
ATxmegaLaserDiode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006b6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000038c  00802000  00006b6c  00006c00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002c3  0080238c  0080238c  00006f8c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006f8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006fbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000cb8  00000000  00000000  00006ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001838c  00000000  00000000  00007cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000660b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006020  00000000  00000000  0002664b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000039ec  00000000  00000000  0002c66c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009391  00000000  00000000  00030058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ab81  00000000  00000000  000393e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000bc0  00000000  00000000  00043f6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__dtors_end>
       4:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__vector_1>
       8:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__vector_2>
       c:	0c 94 b1 11 	jmp	0x2362	; 0x2362 <__vector_3>
      10:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__vector_4>
      14:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__vector_5>
      18:	0c 94 44 12 	jmp	0x2488	; 0x2488 <__vector_6>
      1c:	0c 94 75 12 	jmp	0x24ea	; 0x24ea <__vector_7>
      20:	0c 94 a6 12 	jmp	0x254c	; 0x254c <__vector_8>
      24:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__vector_9>
      28:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__vector_10>
      2c:	0c 94 39 13 	jmp	0x2672	; 0x2672 <__vector_11>
      30:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__vector_12>
      34:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__vector_13>
      38:	0c 94 cc 13 	jmp	0x2798	; 0x2798 <__vector_14>
      3c:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__vector_15>
      40:	0c 94 2e 14 	jmp	0x285c	; 0x285c <__vector_16>
      44:	0c 94 5f 14 	jmp	0x28be	; 0x28be <__vector_17>
      48:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__vector_18>
      4c:	0c 94 c1 14 	jmp	0x2982	; 0x2982 <__vector_19>
      50:	0c 94 f2 14 	jmp	0x29e4	; 0x29e4 <__vector_20>
      54:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <__vector_21>
      58:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__vector_22>
      5c:	0c 94 85 15 	jmp	0x2b0a	; 0x2b0a <__vector_23>
      60:	0c 94 b6 15 	jmp	0x2b6c	; 0x2b6c <__vector_24>
      64:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <__vector_25>
      68:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__vector_26>
      6c:	0c 94 49 16 	jmp	0x2c92	; 0x2c92 <__vector_27>
      70:	0c 94 7a 16 	jmp	0x2cf4	; 0x2cf4 <__vector_28>
      74:	0c 94 ab 16 	jmp	0x2d56	; 0x2d56 <__vector_29>
      78:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <__vector_30>
      7c:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <__vector_31>
      80:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__vector_32>
      84:	0c 94 6f 17 	jmp	0x2ede	; 0x2ede <__vector_33>
      88:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__vector_34>
      8c:	0c 94 d1 17 	jmp	0x2fa2	; 0x2fa2 <__vector_35>
      90:	0c 94 02 18 	jmp	0x3004	; 0x3004 <__vector_36>
      94:	0c 94 33 18 	jmp	0x3066	; 0x3066 <__vector_37>
      98:	0c 94 64 18 	jmp	0x30c8	; 0x30c8 <__vector_38>
      9c:	0c 94 95 18 	jmp	0x312a	; 0x312a <__vector_39>
      a0:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__vector_40>
      a4:	0c 94 f7 18 	jmp	0x31ee	; 0x31ee <__vector_41>
      a8:	0c 94 28 19 	jmp	0x3250	; 0x3250 <__vector_42>
      ac:	0c 94 59 19 	jmp	0x32b2	; 0x32b2 <__vector_43>
      b0:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__vector_44>
      b4:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__vector_45>
      b8:	0c 94 ec 19 	jmp	0x33d8	; 0x33d8 <__vector_46>
      bc:	0c 94 1d 1a 	jmp	0x343a	; 0x343a <__vector_47>
      c0:	0c 94 4e 1a 	jmp	0x349c	; 0x349c <__vector_48>
      c4:	0c 94 7f 1a 	jmp	0x34fe	; 0x34fe <__vector_49>
      c8:	0c 94 b0 1a 	jmp	0x3560	; 0x3560 <__vector_50>
      cc:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <__vector_51>
      d0:	0c 94 12 1b 	jmp	0x3624	; 0x3624 <__vector_52>
      d4:	0c 94 43 1b 	jmp	0x3686	; 0x3686 <__vector_53>
      d8:	0c 94 74 1b 	jmp	0x36e8	; 0x36e8 <__vector_54>
      dc:	0c 94 a5 1b 	jmp	0x374a	; 0x374a <__vector_55>
      e0:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <__vector_56>
      e4:	0c 94 07 1c 	jmp	0x380e	; 0x380e <__vector_57>
      e8:	0c 94 38 1c 	jmp	0x3870	; 0x3870 <__vector_58>
      ec:	0c 94 69 1c 	jmp	0x38d2	; 0x38d2 <__vector_59>
      f0:	0c 94 9a 1c 	jmp	0x3934	; 0x3934 <__vector_60>
      f4:	0c 94 cb 1c 	jmp	0x3996	; 0x3996 <__vector_61>
      f8:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <__vector_62>
      fc:	0c 94 2d 1d 	jmp	0x3a5a	; 0x3a5a <__vector_63>
     100:	0c 94 5e 1d 	jmp	0x3abc	; 0x3abc <__vector_64>
     104:	0c 94 8f 1d 	jmp	0x3b1e	; 0x3b1e <__vector_65>
     108:	0c 94 c0 1d 	jmp	0x3b80	; 0x3b80 <__vector_66>
     10c:	0c 94 f1 1d 	jmp	0x3be2	; 0x3be2 <__vector_67>
     110:	0c 94 22 1e 	jmp	0x3c44	; 0x3c44 <__vector_68>
     114:	0c 94 53 1e 	jmp	0x3ca6	; 0x3ca6 <__vector_69>
     118:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <__vector_70>
     11c:	0c 94 b5 1e 	jmp	0x3d6a	; 0x3d6a <__vector_71>
     120:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <__vector_72>
     124:	0c 94 17 1f 	jmp	0x3e2e	; 0x3e2e <__vector_73>
     128:	0c 94 48 1f 	jmp	0x3e90	; 0x3e90 <__vector_74>
     12c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     130:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     134:	0c 94 79 1f 	jmp	0x3ef2	; 0x3ef2 <__vector_77>
     138:	0c 94 aa 1f 	jmp	0x3f54	; 0x3f54 <__vector_78>
     13c:	0c 94 db 1f 	jmp	0x3fb6	; 0x3fb6 <__vector_79>
     140:	0c 94 0c 20 	jmp	0x4018	; 0x4018 <__vector_80>
     144:	0c 94 3d 20 	jmp	0x407a	; 0x407a <__vector_81>
     148:	0c 94 6e 20 	jmp	0x40dc	; 0x40dc <__vector_82>
     14c:	0c 94 9f 20 	jmp	0x413e	; 0x413e <__vector_83>
     150:	0c 94 d0 20 	jmp	0x41a0	; 0x41a0 <__vector_84>
     154:	0c 94 01 21 	jmp	0x4202	; 0x4202 <__vector_85>
     158:	0c 94 32 21 	jmp	0x4264	; 0x4264 <__vector_86>
     15c:	0c 94 63 21 	jmp	0x42c6	; 0x42c6 <__vector_87>
     160:	0c 94 94 21 	jmp	0x4328	; 0x4328 <__vector_88>
     164:	0c 94 c5 21 	jmp	0x438a	; 0x438a <__vector_89>
     168:	0c 94 f6 21 	jmp	0x43ec	; 0x43ec <__vector_90>
     16c:	0c 94 27 22 	jmp	0x444e	; 0x444e <__vector_91>
     170:	0c 94 58 22 	jmp	0x44b0	; 0x44b0 <__vector_92>
     174:	0c 94 89 22 	jmp	0x4512	; 0x4512 <__vector_93>
     178:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     17c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     180:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     184:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     188:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     18c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     190:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     194:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     198:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     19c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1a0:	0c 94 ba 22 	jmp	0x4574	; 0x4574 <__vector_104>
     1a4:	0c 94 eb 22 	jmp	0x45d6	; 0x45d6 <__vector_105>
     1a8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1ac:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1b0:	0c 94 1c 23 	jmp	0x4638	; 0x4638 <__vector_108>
     1b4:	0c 94 4d 23 	jmp	0x469a	; 0x469a <__vector_109>
     1b8:	0c 94 7e 23 	jmp	0x46fc	; 0x46fc <__vector_110>
     1bc:	0c 94 af 23 	jmp	0x475e	; 0x475e <__vector_111>
     1c0:	0c 94 e0 23 	jmp	0x47c0	; 0x47c0 <__vector_112>
     1c4:	0c 94 11 24 	jmp	0x4822	; 0x4822 <__vector_113>
     1c8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1cc:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d0:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d4:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1d8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1dc:	0c 94 42 24 	jmp	0x4884	; 0x4884 <__vector_119>
     1e0:	0c 94 73 24 	jmp	0x48e6	; 0x48e6 <__vector_120>
     1e4:	0c 94 a4 24 	jmp	0x4948	; 0x4948 <__vector_121>
     1e8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1ec:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f0:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f4:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1f8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
     1fc:	d5 03       	fmuls	r21, r21
     1fe:	57 04       	cpc	r5, r7
     200:	57 04       	cpc	r5, r7
     202:	57 04       	cpc	r5, r7
     204:	57 04       	cpc	r5, r7
     206:	57 04       	cpc	r5, r7
     208:	57 04       	cpc	r5, r7
     20a:	da 03       	fmulsu	r21, r18
     20c:	35 04       	cpc	r3, r5
     20e:	57 04       	cpc	r5, r7
     210:	e1 03       	fmuls	r22, r17
     212:	57 04       	cpc	r5, r7
     214:	e8 03       	fmulsu	r22, r16
     216:	57 04       	cpc	r5, r7
     218:	ef 03       	fmulsu	r22, r23
     21a:	57 04       	cpc	r5, r7
     21c:	f6 03       	fmuls	r23, r22
     21e:	57 04       	cpc	r5, r7
     220:	57 04       	cpc	r5, r7
     222:	57 04       	cpc	r5, r7
     224:	57 04       	cpc	r5, r7
     226:	57 04       	cpc	r5, r7
     228:	fd 03       	fmulsu	r23, r21
     22a:	04 04       	cpc	r0, r4
     22c:	0b 04       	cpc	r0, r11
     22e:	12 04       	cpc	r1, r2
     230:	27 04       	cpc	r2, r7
     232:	57 04       	cpc	r5, r7
     234:	19 04       	cpc	r1, r9
     236:	57 04       	cpc	r5, r7
     238:	2e 04       	cpc	r2, r14
     23a:	57 04       	cpc	r5, r7
     23c:	57 04       	cpc	r5, r7
     23e:	57 04       	cpc	r5, r7
     240:	57 04       	cpc	r5, r7
     242:	57 04       	cpc	r5, r7
     244:	57 04       	cpc	r5, r7
     246:	20 04       	cpc	r2, r0
     248:	57 04       	cpc	r5, r7
     24a:	4a 04       	cpc	r4, r10
     24c:	3c 04       	cpc	r3, r12
     24e:	43 04       	cpc	r4, r3
     250:	57 04       	cpc	r5, r7
     252:	57 04       	cpc	r5, r7
     254:	57 04       	cpc	r5, r7
     256:	57 04       	cpc	r5, r7
     258:	57 04       	cpc	r5, r7
     25a:	51 04       	cpc	r5, r1
     25c:	7b 04       	cpc	r7, r11
     25e:	81 04       	cpc	r8, r1
     260:	87 04       	cpc	r8, r7
     262:	8d 04       	cpc	r8, r13
     264:	93 04       	cpc	r9, r3
     266:	99 04       	cpc	r9, r9
     268:	9f 04       	cpc	r9, r15
     26a:	a5 04       	cpc	r10, r5
     26c:	1d 05       	cpc	r17, r13
     26e:	b4 04       	cpc	r11, r4
     270:	ba 04       	cpc	r11, r10
     272:	c0 04       	cpc	r12, r0
     274:	c6 04       	cpc	r12, r6
     276:	cc 04       	cpc	r12, r12
     278:	d2 04       	cpc	r13, r2
     27a:	d8 04       	cpc	r13, r8
     27c:	de 04       	cpc	r13, r14
     27e:	e4 04       	cpc	r14, r4
     280:	52 29       	or	r21, r2
     282:	52 29       	or	r21, r2
     284:	5c 29       	or	r21, r12
     286:	66 29       	or	r22, r6
     288:	76 29       	or	r23, r6
     28a:	c6 29       	or	r28, r6
     28c:	d0 29       	or	r29, r0
     28e:	05 2a       	or	r0, r21
     290:	05 2a       	or	r0, r21
     292:	03 2a       	or	r0, r19
     294:	03 2a       	or	r0, r19

00000296 <__trampolines_start>:
     296:	0c 94 19 04 	jmp	0x832	; 0x832 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xc4>
     29a:	0c 94 35 04 	jmp	0x86a	; 0x86a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xfc>
     29e:	0c 94 08 2a 	jmp	0x5410	; 0x5410 <_ZN9CMBSender18OnUSARTRxInterruptEPv>
     2a2:	0c 94 d5 24 	jmp	0x49aa	; 0x49aa <__cxa_pure_virtual>
     2a6:	0c 94 e6 2e 	jmp	0x5dcc	; 0x5dcc <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     2aa:	0c 94 ae 26 	jmp	0x4d5c	; 0x4d5c <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>
     2ae:	0c 94 8c 2f 	jmp	0x5f18	; 0x5f18 <_ZN8CTimerC114DisableChannelE19TIMER_CHANNELS_ENUM>
     2b2:	0c 94 94 2b 	jmp	0x5728	; 0x5728 <_ZN10CDGUSUSART11IsReceivingEv>
     2b6:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <_GLOBAL__sub_D_dacSPI>
     2ba:	0c 94 05 31 	jmp	0x620a	; 0x620a <_ZN8CTimerD113EnableChannelE19TIMER_CHANNELS_ENUM>
     2be:	0c 94 14 32 	jmp	0x6428	; 0x6428 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     2c2:	0c 94 f3 30 	jmp	0x61e6	; 0x61e6 <_ZN8CTimerD14StopEv>
     2c6:	0c 94 bc 2e 	jmp	0x5d78	; 0x5d78 <_ZN7CTimerC9SetPeriodEj>
     2ca:	0c 94 93 2f 	jmp	0x5f26	; 0x5f26 <_ZN8CTimerC19SetPeriodEj>
     2ce:	0c 94 2e 30 	jmp	0x605c	; 0x605c <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>
     2d2:	0c 94 2f 2a 	jmp	0x545e	; 0x545e <_ZN9CMBSender18OnTimeoutInterruptEPv>
     2d6:	0c 94 87 04 	jmp	0x90e	; 0x90e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x5e>
     2da:	0c 94 b1 28 	jmp	0x5162	; 0x5162 <_ZN9CMBSender18OnRegisterReceivedEhPhh>
     2de:	0c 94 ac 2b 	jmp	0x5758	; 0x5758 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>
     2e2:	0c 94 c6 2e 	jmp	0x5d8c	; 0x5d8c <_ZN7CTimerC8SetCOMPBEj>
     2e6:	0c 94 b4 04 	jmp	0x968	; 0x968 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xb8>
     2ea:	0c 94 94 2a 	jmp	0x5528	; 0x5528 <_ZN9CMBSender18OnUSARTTxInterruptEPv>
     2ee:	0c 94 d6 0f 	jmp	0x1fac	; 0x1fac <_ZN16CLaserControlApp13OnTimerStaticEPv>
     2f2:	0c 94 c6 29 	jmp	0x538c	; 0x538c <_ZN9CMBSender13OnReceiveByteEh+0x10e>
     2f6:	0c 94 b5 2b 	jmp	0x576a	; 0x576a <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>
     2fa:	0c 94 8d 04 	jmp	0x91a	; 0x91a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x6a>
     2fe:	0c 94 ae 2e 	jmp	0x5d5c	; 0x5d5c <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>
     302:	0c 94 d1 27 	jmp	0x4fa2	; 0x4fa2 <_ZN16CMBEventsHandler13FillVarDataRqEjj>
     306:	0c 94 33 31 	jmp	0x6266	; 0x6266 <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     30a:	0c 94 20 04 	jmp	0x840	; 0x840 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xd2>
     30e:	0c 94 22 31 	jmp	0x6244	; 0x6244 <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     312:	0c 94 d2 31 	jmp	0x63a4	; 0x63a4 <_ZN7CTimerF8SetCOMPBEj>
     316:	0c 94 4a 04 	jmp	0x894	; 0x894 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x126>
     31a:	0c 94 13 31 	jmp	0x6226	; 0x6226 <_ZN8CTimerD19SetPeriodEj>
     31e:	0c 94 c1 2e 	jmp	0x5d82	; 0x5d82 <_ZN7CTimerC8SetCOMPAEj>
     322:	0c 94 50 30 	jmp	0x60a0	; 0x60a0 <_ZN7CTimerD8SetCOMPDEj>
     326:	0c 94 36 28 	jmp	0x506c	; 0x506c <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>
     32a:	0c 94 e1 31 	jmp	0x63c2	; 0x63c2 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     32e:	0c 94 93 04 	jmp	0x926	; 0x926 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x76>
     332:	0c 94 d8 2f 	jmp	0x5fb0	; 0x5fb0 <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     336:	0c 94 7e 2e 	jmp	0x5cfc	; 0x5cfc <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     33a:	0c 94 fe 2f 	jmp	0x5ffc	; 0x5ffc <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     33e:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x100>
     342:	0c 94 55 31 	jmp	0x62aa	; 0x62aa <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     346:	0c 94 c6 04 	jmp	0x98c	; 0x98c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xdc>
     34a:	0c 94 a5 04 	jmp	0x94a	; 0x94a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x9a>
     34e:	0c 94 81 04 	jmp	0x902	; 0x902 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x52>
     352:	0c 94 25 32 	jmp	0x644a	; 0x644a <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     356:	0c 94 be 2b 	jmp	0x577c	; 0x577c <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>
     35a:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>
     35e:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x46>
     362:	0c 94 99 2e 	jmp	0x5d32	; 0x5d32 <_ZN7CTimerC5StartEj>
     366:	0c 94 cc 04 	jmp	0x998	; 0x998 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xe8>
     36a:	0c 94 0b 04 	jmp	0x816	; 0x816 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xa8>
     36e:	0c 94 37 11 	jmp	0x226e	; 0x226e <_ZN4CSPI16StaticOnTransmitEPv>
     372:	0c 94 fb 30 	jmp	0x61f6	; 0x61f6 <_ZN8CTimerD15ResetEv>
     376:	0c 94 19 30 	jmp	0x6032	; 0x6032 <_ZN7CTimerD5StartEj>
     37a:	0c 94 ba 04 	jmp	0x974	; 0x974 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xc4>
     37e:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <_ZN16CLaserControlApp22OnLaserTimerStopStaticEPv>
     382:	0c 94 4b 30 	jmp	0x6096	; 0x6096 <_ZN7CTimerD8SetCOMPCEj>
     386:	0c 94 a2 06 	jmp	0xd44	; 0xd44 <_ZN16CLaserControlApp19OnPWMTimerCMPStaticEPv>
     38a:	0c 94 2a 2f 	jmp	0x5e54	; 0x5e54 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     38e:	0c 94 86 2b 	jmp	0x570c	; 0x570c <_ZN10CDGUSUSART15GetReceivedByteEv>
     392:	0c 94 43 04 	jmp	0x886	; 0x886 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x118>
     396:	0c 94 44 31 	jmp	0x6288	; 0x6288 <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     39a:	0c 94 4f 2f 	jmp	0x5e9e	; 0x5e9e <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     39e:	0c 94 19 2f 	jmp	0x5e32	; 0x5e32 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     3a2:	0c 94 a6 2e 	jmp	0x5d4c	; 0x5d4c <_ZN7CTimerC4StopEv>
     3a6:	0c 94 03 32 	jmp	0x6406	; 0x6406 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     3aa:	0c 94 cb 2e 	jmp	0x5d96	; 0x5d96 <_ZN7CTimerC8SetCOMPCEj>
     3ae:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <_ZN16CLaserControlApp12OnINT0StaticEPv>
     3b2:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x3c>
     3b6:	0c 94 d8 24 	jmp	0x49b0	; 0x49b0 <_GLOBAL__sub_I_dacSPI>
     3ba:	0c 94 8c 2b 	jmp	0x5718	; 0x5718 <_ZN10CDGUSUSART14IsTransmittingEv>
     3be:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x118>
     3c2:	0c 94 08 2f 	jmp	0x5e10	; 0x5e10 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     3c6:	0c 94 f7 2e 	jmp	0x5dee	; 0x5dee <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     3ca:	0c 94 aa 30 	jmp	0x6154	; 0x6154 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     3ce:	0c 94 b5 2e 	jmp	0x5d6a	; 0x5d6a <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>
     3d2:	0c 94 03 2a 	jmp	0x5406	; 0x5406 <_ZN9CMBSender13OnReceiveByteEh+0x188>
     3d6:	0c 94 66 30 	jmp	0x60cc	; 0x60cc <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     3da:	0c 94 b7 31 	jmp	0x636e	; 0x636e <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
     3de:	0c 94 b4 2f 	jmp	0x5f68	; 0x5f68 <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     3e2:	0c 94 48 2b 	jmp	0x5690	; 0x5690 <_ZN9CMBSender21OnTransactionCallbackEPhj>
     3e6:	0c 94 d7 31 	jmp	0x63ae	; 0x63ae <_ZN7CTimerF8SetCOMPCEj>
     3ea:	0c 94 3c 04 	jmp	0x878	; 0x878 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x10a>
     3ee:	0c 94 bf 31 	jmp	0x637e	; 0x637e <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>
     3f2:	0c 94 85 2f 	jmp	0x5f0a	; 0x5f0a <_ZN8CTimerC113EnableChannelE19TIMER_CHANNELS_ENUM>
     3f6:	0c 94 a2 28 	jmp	0x5144	; 0x5144 <_ZN9CMBSender18OnVariableReceivedEjPjj>
     3fa:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x46>
     3fe:	0c 94 71 27 	jmp	0x4ee2	; 0x4ee2 <_ZN16CMBEventsHandler13FillRegDataRqEhh>
     402:	0c 94 2e 04 	jmp	0x85c	; 0x85c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xee>
     406:	0c 94 c8 31 	jmp	0x6390	; 0x6390 <_ZN7CTimerF9SetPeriodEj>
     40a:	0c 94 36 32 	jmp	0x646c	; 0x646c <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     40e:	0c 94 55 30 	jmp	0x60aa	; 0x60aa <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     412:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18a>
     416:	0c 94 77 30 	jmp	0x60ee	; 0x60ee <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     41a:	0c 94 99 04 	jmp	0x932	; 0x932 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x82>
     41e:	0c 94 27 04 	jmp	0x84e	; 0x84e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xe0>
     422:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <_ZN16CLaserControlApp19OnPWMTimerGRNStaticEPv>
     426:	0c 94 a2 2f 	jmp	0x5f44	; 0x5f44 <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     42a:	0c 94 d5 2e 	jmp	0x5daa	; 0x5daa <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     42e:	0c 94 88 30 	jmp	0x6110	; 0x6110 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     432:	0c 94 a3 2b 	jmp	0x5746	; 0x5746 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>
     436:	0c 94 c0 04 	jmp	0x980	; 0x980 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xd0>
     43a:	0c 94 7b 2f 	jmp	0x5ef6	; 0x5ef6 <_ZN8CTimerC15ResetEv>
     43e:	0c 94 41 30 	jmp	0x6082	; 0x6082 <_ZN7CTimerD8SetCOMPAEj>
     442:	0c 94 d0 2e 	jmp	0x5da0	; 0x5da0 <_ZN7CTimerC8SetCOMPDEj>
     446:	0c 94 05 2a 	jmp	0x540a	; 0x540a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
     44a:	0c 94 9b 2b 	jmp	0x5736	; 0x5736 <_ZN10CDGUSUSART11IsDataEmptyEv>
     44e:	0c 94 46 30 	jmp	0x608c	; 0x608c <_ZN7CTimerD8SetCOMPBEj>
     452:	0c 94 76 29 	jmp	0x52ec	; 0x52ec <_ZN9CMBSender13OnReceiveByteEh+0x6e>
     456:	0c 94 b7 03 	jmp	0x76e	; 0x76e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>
     45a:	0c 94 18 31 	jmp	0x6230	; 0x6230 <_ZN8CTimerD18SetCOMPAEj>
     45e:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xf4>
     462:	0c 94 04 04 	jmp	0x808	; 0x808 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x9a>
     466:	0c 94 3c 30 	jmp	0x6078	; 0x6078 <_ZN7CTimerD9SetPeriodEj>
     46a:	0c 94 cf 30 	jmp	0x619e	; 0x619e <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     46e:	0c 94 98 2f 	jmp	0x5f30	; 0x5f30 <_ZN8CTimerC18SetCOMPAEj>
     472:	0c 94 1d 31 	jmp	0x623a	; 0x623a <_ZN8CTimerD18SetCOMPBEj>
     476:	0c 94 7a 31 	jmp	0x62f4	; 0x62f4 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     47a:	0c 94 35 30 	jmp	0x606a	; 0x606a <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>
     47e:	0c 94 63 27 	jmp	0x4ec6	; 0x4ec6 <_ZN16CMBEventsHandler11FreeBuffersEv>
     482:	0c 94 52 29 	jmp	0x52a4	; 0x52a4 <_ZN9CMBSender13OnReceiveByteEh+0x26>
     486:	0c 94 cd 31 	jmp	0x639a	; 0x639a <_ZN7CTimerF8SetCOMPAEj>
     48a:	0c 94 89 2b 	jmp	0x5712	; 0x5712 <_ZN10CDGUSUSART19SetTransmittingByteEh>
     48e:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x140>
     492:	0c 94 48 27 	jmp	0x4e90	; 0x4e90 <_ZN16CMBEventsHandler15AllocateBuffersEjj>
     496:	0c 94 9f 04 	jmp	0x93e	; 0x93e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x8e>
     49a:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x134>
     49e:	0c 94 e6 30 	jmp	0x61cc	; 0x61cc <_ZN8CTimerD15StartEj>
     4a2:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x10c>
     4a6:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <_ZN16CLaserControlApp19OnPWMTimerREDStaticEPv>
     4aa:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x8c>
     4ae:	0c 94 aa 31 	jmp	0x6354	; 0x6354 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
     4b2:	0c 94 f2 31 	jmp	0x63e4	; 0x63e4 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     4b6:	0c 94 c6 2f 	jmp	0x5f8c	; 0x5f8c <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     4ba:	0c 94 26 30 	jmp	0x604c	; 0x604c <_ZN7CTimerD4StopEv>
     4be:	0c 94 73 2f 	jmp	0x5ee6	; 0x5ee6 <_ZN8CTimerC14StopEv>
     4c2:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>
     4c6:	0c 94 a2 31 	jmp	0x6344	; 0x6344 <_ZN7CTimerF4StopEv>
     4ca:	0c 94 dc 31 	jmp	0x63b8	; 0x63b8 <_ZN7CTimerF8SetCOMPDEj>
     4ce:	0c 94 b0 31 	jmp	0x6360	; 0x6360 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
     4d2:	0c 94 b6 03 	jmp	0x76c	; 0x76c <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>
     4d6:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <_ZN16CLaserControlApp19OnPWMTimerOVFStaticEPv>
     4da:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <_ZN16CLaserControlApp19OnPWMTimerBLUStaticEPv>
     4de:	0c 94 95 31 	jmp	0x632a	; 0x632a <_ZN7CTimerF5StartEj>
     4e2:	0c 94 ef 03 	jmp	0x7de	; 0x7de <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x70>
     4e6:	0c 94 5c 29 	jmp	0x52b8	; 0x52b8 <_ZN9CMBSender13OnReceiveByteEh+0x3a>
     4ea:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x54>
     4ee:	0c 94 0c 31 	jmp	0x6218	; 0x6218 <_ZN8CTimerD114DisableChannelE19TIMER_CHANNELS_ENUM>
     4f2:	0c 94 66 29 	jmp	0x52cc	; 0x52cc <_ZN9CMBSender13OnReceiveByteEh+0x4e>
     4f6:	0c 94 d0 29 	jmp	0x53a0	; 0x53a0 <_ZN9CMBSender13OnReceiveByteEh+0x122>
     4fa:	0c 94 9d 2f 	jmp	0x5f3a	; 0x5f3a <_ZN8CTimerC18SetCOMPBEj>
     4fe:	0c 94 4b 2b 	jmp	0x5696	; 0x5696 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
     502:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x7e>
     506:	0c 94 99 30 	jmp	0x6132	; 0x6132 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     50a:	0c 94 12 04 	jmp	0x824	; 0x824 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xb6>
     50e:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x62>
     512:	0c 94 66 2f 	jmp	0x5ecc	; 0x5ecc <_ZN8CTimerC15StartEj>

00000516 <__ctors_start>:
     516:	d8 24       	eor	r13, r8

00000518 <__ctors_end>:
     518:	0d 25       	eor	r16, r13

0000051a <__dtors_end>:
     51a:	11 24       	eor	r1, r1
     51c:	1f be       	out	0x3f, r1	; 63
     51e:	cf ef       	ldi	r28, 0xFF	; 255
     520:	cd bf       	out	0x3d, r28	; 61
     522:	df e3       	ldi	r29, 0x3F	; 63
     524:	de bf       	out	0x3e, r29	; 62
     526:	00 e0       	ldi	r16, 0x00	; 0
     528:	0c bf       	out	0x3c, r16	; 60

0000052a <__do_copy_data>:
     52a:	13 e2       	ldi	r17, 0x23	; 35
     52c:	a0 e0       	ldi	r26, 0x00	; 0
     52e:	b0 e2       	ldi	r27, 0x20	; 32
     530:	ec e6       	ldi	r30, 0x6C	; 108
     532:	fb e6       	ldi	r31, 0x6B	; 107
     534:	00 e0       	ldi	r16, 0x00	; 0
     536:	0b bf       	out	0x3b, r16	; 59
     538:	02 c0       	rjmp	.+4      	; 0x53e <__do_copy_data+0x14>
     53a:	07 90       	elpm	r0, Z+
     53c:	0d 92       	st	X+, r0
     53e:	ac 38       	cpi	r26, 0x8C	; 140
     540:	b1 07       	cpc	r27, r17
     542:	d9 f7       	brne	.-10     	; 0x53a <__do_copy_data+0x10>

00000544 <__do_clear_bss>:
     544:	26 e2       	ldi	r18, 0x26	; 38
     546:	ac e8       	ldi	r26, 0x8C	; 140
     548:	b3 e2       	ldi	r27, 0x23	; 35
     54a:	01 c0       	rjmp	.+2      	; 0x54e <.do_clear_bss_start>

0000054c <.do_clear_bss_loop>:
     54c:	1d 92       	st	X+, r1

0000054e <.do_clear_bss_start>:
     54e:	af 34       	cpi	r26, 0x4F	; 79
     550:	b2 07       	cpc	r27, r18
     552:	e1 f7       	brne	.-8      	; 0x54c <.do_clear_bss_loop>

00000554 <__do_global_ctors>:
     554:	12 e0       	ldi	r17, 0x02	; 2
     556:	cc e8       	ldi	r28, 0x8C	; 140
     558:	d2 e0       	ldi	r29, 0x02	; 2
     55a:	00 e0       	ldi	r16, 0x00	; 0
     55c:	06 c0       	rjmp	.+12     	; 0x56a <__do_global_ctors+0x16>
     55e:	21 97       	sbiw	r28, 0x01	; 1
     560:	01 09       	sbc	r16, r1
     562:	80 2f       	mov	r24, r16
     564:	fe 01       	movw	r30, r28
     566:	0e 94 05 34 	call	0x680a	; 0x680a <__tablejump2__>
     56a:	cb 38       	cpi	r28, 0x8B	; 139
     56c:	d1 07       	cpc	r29, r17
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	08 07       	cpc	r16, r24
     572:	a9 f7       	brne	.-22     	; 0x55e <__do_global_ctors+0xa>
     574:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <main>
     578:	0c 94 a4 35 	jmp	0x6b48	; 0x6b48 <__do_global_dtors>

0000057c <__bad_interrupt>:
     57c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000580 <_ZN13CDGUSDatabaseC1Ev>:
	// Read from SRAM
	m_cpSender->StartMODBUSVariableTransaction(vp_addres, length);
	m_cpSender->WaitMODBUSTransmitter();
	m_cpSender->WaitMODBUSListener();
	data_transaction = (uint16_t*)data;
}
     580:	08 95       	ret

00000582 <_ZN13CDGUSDatabaseD1Ev>:
     582:	08 95       	ret

00000584 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>:
     584:	fc 01       	movw	r30, r24
     586:	62 83       	std	Z+2, r22	; 0x02
     588:	73 83       	std	Z+3, r23	; 0x03
     58a:	94 2f       	mov	r25, r20
     58c:	85 2f       	mov	r24, r21
     58e:	84 83       	std	Z+4, r24	; 0x04
     590:	95 83       	std	Z+5, r25	; 0x05
     592:	46 83       	std	Z+6, r20	; 0x06
     594:	57 83       	std	Z+7, r21	; 0x07
     596:	10 82       	st	Z, r1
     598:	11 82       	std	Z+1, r1	; 0x01
     59a:	08 95       	ret

0000059c <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>:

void CDGUSDatabase::MapDatabaseToWrite(uint16_t vp, uint32_t addr, uint16_t length)
{
     59c:	8f 92       	push	r8
     59e:	9f 92       	push	r9
     5a0:	af 92       	push	r10
     5a2:	bf 92       	push	r11
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	2a 97       	sbiw	r28, 0x0a	; 10
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     5bc:	8a e5       	ldi	r24, 0x5A	; 90
     5be:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0x50;
     5c0:	80 e5       	ldi	r24, 0x50	; 80
     5c2:	8a 83       	std	Y+2, r24	; 0x02
	//FLASH.addr = swap32(addr);
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     5c4:	85 2e       	mov	r8, r21
     5c6:	99 24       	eor	r9, r9
     5c8:	aa 24       	eor	r10, r10
     5ca:	bb 24       	eor	r11, r11
     5cc:	b2 2f       	mov	r27, r18
     5ce:	aa 27       	eor	r26, r26
     5d0:	99 27       	eor	r25, r25
     5d2:	88 27       	eor	r24, r24
     5d4:	88 29       	or	r24, r8
     5d6:	99 29       	or	r25, r9
     5d8:	aa 29       	or	r26, r10
     5da:	bb 29       	or	r27, r11
     5dc:	49 01       	movw	r8, r18
     5de:	5a 01       	movw	r10, r20
     5e0:	88 24       	eor	r8, r8
     5e2:	aa 24       	eor	r10, r10
     5e4:	bb 24       	eor	r11, r11
     5e6:	ba 2c       	mov	r11, r10
     5e8:	a9 2c       	mov	r10, r9
     5ea:	98 2c       	mov	r9, r8
     5ec:	88 24       	eor	r8, r8
     5ee:	88 29       	or	r24, r8
     5f0:	99 29       	or	r25, r9
     5f2:	aa 29       	or	r26, r10
     5f4:	bb 29       	or	r27, r11
     5f6:	49 01       	movw	r8, r18
     5f8:	5a 01       	movw	r10, r20
     5fa:	88 24       	eor	r8, r8
     5fc:	99 24       	eor	r9, r9
     5fe:	bb 24       	eor	r11, r11
     600:	89 2c       	mov	r8, r9
     602:	9a 2c       	mov	r9, r10
     604:	ab 2c       	mov	r10, r11
     606:	bb 24       	eor	r11, r11
     608:	88 29       	or	r24, r8
     60a:	99 29       	or	r25, r9
     60c:	aa 29       	or	r26, r10
     60e:	bb 29       	or	r27, r11
     610:	8b 83       	std	Y+3, r24	; 0x03
     612:	9c 83       	std	Y+4, r25	; 0x04
     614:	ad 83       	std	Y+5, r26	; 0x05
     616:	be 83       	std	Y+6, r27	; 0x06
	//FLASH.addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) | ((addr & 0xff0000) << 8) | ((addr & 0xff000000) >> 8);
	//FLASH.addr = addr;
	FLASH.vp = (vp >> 8) | (vp << 8);
     618:	76 27       	eor	r23, r22
     61a:	67 27       	eor	r22, r23
     61c:	76 27       	eor	r23, r22
     61e:	6f 83       	std	Y+7, r22	; 0x07
     620:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     622:	10 27       	eor	r17, r16
     624:	01 27       	eor	r16, r17
     626:	10 27       	eor	r17, r16
     628:	09 87       	std	Y+9, r16	; 0x09
     62a:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     62c:	2a e0       	ldi	r18, 0x0A	; 10
     62e:	ae 01       	movw	r20, r28
     630:	4f 5f       	subi	r20, 0xFF	; 255
     632:	5f 4f       	sbci	r21, 0xFF	; 255
     634:	66 e5       	ldi	r22, 0x56	; 86
     636:	f7 01       	movw	r30, r14
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	93 81       	ldd	r25, Z+3	; 0x03
     63c:	0e 94 bd 2a 	call	0x557a	; 0x557a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     640:	f7 01       	movw	r30, r14
     642:	82 81       	ldd	r24, Z+2	; 0x02
     644:	93 81       	ldd	r25, Z+3	; 0x03
     646:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     64a:	2a 96       	adiw	r28, 0x0a	; 10
     64c:	cd bf       	out	0x3d, r28	; 61
     64e:	de bf       	out	0x3e, r29	; 62
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	1f 91       	pop	r17
     656:	0f 91       	pop	r16
     658:	ff 90       	pop	r15
     65a:	ef 90       	pop	r14
     65c:	bf 90       	pop	r11
     65e:	af 90       	pop	r10
     660:	9f 90       	pop	r9
     662:	8f 90       	pop	r8
     664:	08 95       	ret

00000666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>:

void CDGUSDatabase::MapDatabaseToRead(uint16_t vp, uint32_t addr, uint16_t length)
{
     666:	8f 92       	push	r8
     668:	9f 92       	push	r9
     66a:	af 92       	push	r10
     66c:	bf 92       	push	r11
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
     67e:	2a 97       	sbiw	r28, 0x0a	; 10
     680:	cd bf       	out	0x3d, r28	; 61
     682:	de bf       	out	0x3e, r29	; 62
     684:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     686:	8a e5       	ldi	r24, 0x5A	; 90
     688:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0xA0;
     68a:	80 ea       	ldi	r24, 0xA0	; 160
     68c:	8a 83       	std	Y+2, r24	; 0x02
	//FLASH.addr = swap32(addr);
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     68e:	85 2e       	mov	r8, r21
     690:	99 24       	eor	r9, r9
     692:	aa 24       	eor	r10, r10
     694:	bb 24       	eor	r11, r11
     696:	b2 2f       	mov	r27, r18
     698:	aa 27       	eor	r26, r26
     69a:	99 27       	eor	r25, r25
     69c:	88 27       	eor	r24, r24
     69e:	88 29       	or	r24, r8
     6a0:	99 29       	or	r25, r9
     6a2:	aa 29       	or	r26, r10
     6a4:	bb 29       	or	r27, r11
     6a6:	49 01       	movw	r8, r18
     6a8:	5a 01       	movw	r10, r20
     6aa:	88 24       	eor	r8, r8
     6ac:	aa 24       	eor	r10, r10
     6ae:	bb 24       	eor	r11, r11
     6b0:	ba 2c       	mov	r11, r10
     6b2:	a9 2c       	mov	r10, r9
     6b4:	98 2c       	mov	r9, r8
     6b6:	88 24       	eor	r8, r8
     6b8:	88 29       	or	r24, r8
     6ba:	99 29       	or	r25, r9
     6bc:	aa 29       	or	r26, r10
     6be:	bb 29       	or	r27, r11
     6c0:	49 01       	movw	r8, r18
     6c2:	5a 01       	movw	r10, r20
     6c4:	88 24       	eor	r8, r8
     6c6:	99 24       	eor	r9, r9
     6c8:	bb 24       	eor	r11, r11
     6ca:	89 2c       	mov	r8, r9
     6cc:	9a 2c       	mov	r9, r10
     6ce:	ab 2c       	mov	r10, r11
     6d0:	bb 24       	eor	r11, r11
     6d2:	88 29       	or	r24, r8
     6d4:	99 29       	or	r25, r9
     6d6:	aa 29       	or	r26, r10
     6d8:	bb 29       	or	r27, r11
     6da:	8b 83       	std	Y+3, r24	; 0x03
     6dc:	9c 83       	std	Y+4, r25	; 0x04
     6de:	ad 83       	std	Y+5, r26	; 0x05
     6e0:	be 83       	std	Y+6, r27	; 0x06
	//FLASH.addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) | ((addr & 0xff0000) << 8) | ((addr & 0xff000000) >> 8);
	//FLASH.addr = addr;
	FLASH.vp = (vp >> 8) | (vp << 8);
     6e2:	76 27       	eor	r23, r22
     6e4:	67 27       	eor	r22, r23
     6e6:	76 27       	eor	r23, r22
     6e8:	6f 83       	std	Y+7, r22	; 0x07
     6ea:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     6ec:	10 27       	eor	r17, r16
     6ee:	01 27       	eor	r16, r17
     6f0:	10 27       	eor	r17, r16
     6f2:	09 87       	std	Y+9, r16	; 0x09
     6f4:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     6f6:	2a e0       	ldi	r18, 0x0A	; 10
     6f8:	ae 01       	movw	r20, r28
     6fa:	4f 5f       	subi	r20, 0xFF	; 255
     6fc:	5f 4f       	sbci	r21, 0xFF	; 255
     6fe:	66 e5       	ldi	r22, 0x56	; 86
     700:	f7 01       	movw	r30, r14
     702:	82 81       	ldd	r24, Z+2	; 0x02
     704:	93 81       	ldd	r25, Z+3	; 0x03
     706:	0e 94 bd 2a 	call	0x557a	; 0x557a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     70a:	f7 01       	movw	r30, r14
     70c:	82 81       	ldd	r24, Z+2	; 0x02
     70e:	93 81       	ldd	r25, Z+3	; 0x03
     710:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     714:	2a 96       	adiw	r28, 0x0a	; 10
     716:	cd bf       	out	0x3d, r28	; 61
     718:	de bf       	out	0x3e, r29	; 62
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	bf 90       	pop	r11
     728:	af 90       	pop	r10
     72a:	9f 90       	pop	r9
     72c:	8f 90       	pop	r8
     72e:	08 95       	ret

00000730 <_ZN13CDGUSDatabase5UnMapEv>:

void CDGUSDatabase::UnMap()
{
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	1f 92       	push	r1
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	8c 01       	movw	r16, r24
	uint8_t en = 0x00;
     740:	19 82       	std	Y+1, r1	; 0x01
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&en, sizeof(en));
     742:	21 e0       	ldi	r18, 0x01	; 1
     744:	ae 01       	movw	r20, r28
     746:	4f 5f       	subi	r20, 0xFF	; 255
     748:	5f 4f       	sbci	r21, 0xFF	; 255
     74a:	66 e5       	ldi	r22, 0x56	; 86
     74c:	fc 01       	movw	r30, r24
     74e:	82 81       	ldd	r24, Z+2	; 0x02
     750:	93 81       	ldd	r25, Z+3	; 0x03
     752:	0e 94 bd 2a 	call	0x557a	; 0x557a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     756:	f8 01       	movw	r30, r16
     758:	82 81       	ldd	r24, Z+2	; 0x02
     75a:	93 81       	ldd	r25, Z+3	; 0x03
     75c:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     760:	0f 90       	pop	r0
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	08 95       	ret

0000076c <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
#ifndef LED_LASER_INDICATOR
	laserBoard.GRNOn();
#endif
}
void CLaserControlApp::OnPWMTimerBLU()
{
     76c:	08 95       	ret

0000076e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
     76e:	dc 01       	movw	r26, r24
     770:	63 30       	cpi	r22, 0x03	; 3
     772:	31 f4       	brne	.+12     	; 0x780 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x12>
     774:	fa 01       	movw	r30, r20
     776:	81 81       	ldd	r24, Z+1	; 0x01
     778:	1f 96       	adiw	r26, 0x0f	; 15
     77a:	8c 93       	st	X, r24
     77c:	1f 97       	sbiw	r26, 0x0f	; 15
     77e:	06 c0       	rjmp	.+12     	; 0x78c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
     780:	66 35       	cpi	r22, 0x56	; 86
     782:	21 f4       	brne	.+8      	; 0x78c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
     784:	fa 01       	movw	r30, r20
     786:	80 81       	ld	r24, Z
     788:	80 93 8d 23 	sts	0x238D, r24	; 0x80238d <DatabaseStatusRegister>
     78c:	1f 96       	adiw	r26, 0x0f	; 15
     78e:	4c 91       	ld	r20, X
     790:	1f 97       	sbiw	r26, 0x0f	; 15
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	40 33       	cpi	r20, 0x30	; 48
     796:	51 05       	cpc	r21, r1
     798:	08 f0       	brcs	.+2      	; 0x79c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x2e>
     79a:	89 c0       	rjmp	.+274    	; 0x8ae <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x140>
     79c:	fa 01       	movw	r30, r20
     79e:	88 27       	eor	r24, r24
     7a0:	e2 50       	subi	r30, 0x02	; 2
     7a2:	ff 4f       	sbci	r31, 0xFF	; 255
     7a4:	8f 4f       	sbci	r24, 0xFF	; 255
     7a6:	0c 94 05 34 	jmp	0x680a	; 0x680a <__tablejump2__>
     7aa:	1c 96       	adiw	r26, 0x0c	; 12
     7ac:	1d 92       	st	X+, r1
     7ae:	1c 92       	st	X, r1
     7b0:	1d 97       	sbiw	r26, 0x0d	; 13
     7b2:	08 95       	ret
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	1c 96       	adiw	r26, 0x0c	; 12
     7ba:	8d 93       	st	X+, r24
     7bc:	9c 93       	st	X, r25
     7be:	1d 97       	sbiw	r26, 0x0d	; 13
     7c0:	08 95       	ret
     7c2:	84 e0       	ldi	r24, 0x04	; 4
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	1c 96       	adiw	r26, 0x0c	; 12
     7c8:	8d 93       	st	X+, r24
     7ca:	9c 93       	st	X, r25
     7cc:	1d 97       	sbiw	r26, 0x0d	; 13
     7ce:	08 95       	ret
     7d0:	88 e0       	ldi	r24, 0x08	; 8
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	1c 96       	adiw	r26, 0x0c	; 12
     7d6:	8d 93       	st	X+, r24
     7d8:	9c 93       	st	X, r25
     7da:	1d 97       	sbiw	r26, 0x0d	; 13
     7dc:	08 95       	ret
     7de:	80 e1       	ldi	r24, 0x10	; 16
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	1c 96       	adiw	r26, 0x0c	; 12
     7e4:	8d 93       	st	X+, r24
     7e6:	9c 93       	st	X, r25
     7e8:	1d 97       	sbiw	r26, 0x0d	; 13
     7ea:	08 95       	ret
     7ec:	80 e2       	ldi	r24, 0x20	; 32
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	1c 96       	adiw	r26, 0x0c	; 12
     7f2:	8d 93       	st	X+, r24
     7f4:	9c 93       	st	X, r25
     7f6:	1d 97       	sbiw	r26, 0x0d	; 13
     7f8:	08 95       	ret
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	93 e0       	ldi	r25, 0x03	; 3
     7fe:	1c 96       	adiw	r26, 0x0c	; 12
     800:	8d 93       	st	X+, r24
     802:	9c 93       	st	X, r25
     804:	1d 97       	sbiw	r26, 0x0d	; 13
     806:	08 95       	ret
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	93 e0       	ldi	r25, 0x03	; 3
     80c:	1c 96       	adiw	r26, 0x0c	; 12
     80e:	8d 93       	st	X+, r24
     810:	9c 93       	st	X, r25
     812:	1d 97       	sbiw	r26, 0x0d	; 13
     814:	08 95       	ret
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	92 e0       	ldi	r25, 0x02	; 2
     81a:	1c 96       	adiw	r26, 0x0c	; 12
     81c:	8d 93       	st	X+, r24
     81e:	9c 93       	st	X, r25
     820:	1d 97       	sbiw	r26, 0x0d	; 13
     822:	08 95       	ret
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	1c 96       	adiw	r26, 0x0c	; 12
     82a:	8d 93       	st	X+, r24
     82c:	9c 93       	st	X, r25
     82e:	1d 97       	sbiw	r26, 0x0d	; 13
     830:	08 95       	ret
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e2       	ldi	r25, 0x20	; 32
     836:	1c 96       	adiw	r26, 0x0c	; 12
     838:	8d 93       	st	X+, r24
     83a:	9c 93       	st	X, r25
     83c:	1d 97       	sbiw	r26, 0x0d	; 13
     83e:	08 95       	ret
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e3       	ldi	r25, 0x30	; 48
     844:	1c 96       	adiw	r26, 0x0c	; 12
     846:	8d 93       	st	X+, r24
     848:	9c 93       	st	X, r25
     84a:	1d 97       	sbiw	r26, 0x0d	; 13
     84c:	08 95       	ret
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e1       	ldi	r25, 0x10	; 16
     852:	1c 96       	adiw	r26, 0x0c	; 12
     854:	8d 93       	st	X+, r24
     856:	9c 93       	st	X, r25
     858:	1d 97       	sbiw	r26, 0x0d	; 13
     85a:	08 95       	ret
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	90 e4       	ldi	r25, 0x40	; 64
     860:	1c 96       	adiw	r26, 0x0c	; 12
     862:	8d 93       	st	X+, r24
     864:	9c 93       	st	X, r25
     866:	1d 97       	sbiw	r26, 0x0d	; 13
     868:	08 95       	ret
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	95 e0       	ldi	r25, 0x05	; 5
     86e:	1c 96       	adiw	r26, 0x0c	; 12
     870:	8d 93       	st	X+, r24
     872:	9c 93       	st	X, r25
     874:	1d 97       	sbiw	r26, 0x0d	; 13
     876:	08 95       	ret
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	96 e0       	ldi	r25, 0x06	; 6
     87c:	1c 96       	adiw	r26, 0x0c	; 12
     87e:	8d 93       	st	X+, r24
     880:	9c 93       	st	X, r25
     882:	1d 97       	sbiw	r26, 0x0d	; 13
     884:	08 95       	ret
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	97 e0       	ldi	r25, 0x07	; 7
     88a:	1c 96       	adiw	r26, 0x0c	; 12
     88c:	8d 93       	st	X+, r24
     88e:	9c 93       	st	X, r25
     890:	1d 97       	sbiw	r26, 0x0d	; 13
     892:	08 95       	ret
     894:	80 e4       	ldi	r24, 0x40	; 64
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	1c 96       	adiw	r26, 0x0c	; 12
     89a:	8d 93       	st	X+, r24
     89c:	9c 93       	st	X, r25
     89e:	1d 97       	sbiw	r26, 0x0d	; 13
     8a0:	08 95       	ret
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	94 e0       	ldi	r25, 0x04	; 4
     8a6:	1c 96       	adiw	r26, 0x0c	; 12
     8a8:	8d 93       	st	X+, r24
     8aa:	9c 93       	st	X, r25
     8ac:	1d 97       	sbiw	r26, 0x0d	; 13
     8ae:	08 95       	ret

000008b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:
     8b0:	cf 92       	push	r12
     8b2:	df 92       	push	r13
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	8c 01       	movw	r16, r24
     8c2:	eb 01       	movw	r28, r22
     8c4:	7a 01       	movw	r14, r20
     8c6:	69 01       	movw	r12, r18
     8c8:	fa 01       	movw	r30, r20
     8ca:	80 81       	ld	r24, Z
     8cc:	91 81       	ldd	r25, Z+1	; 0x01
     8ce:	0e 94 b4 10 	call	0x2168	; 0x2168 <_Z4swapj>
     8d2:	9c 01       	movw	r18, r24
     8d4:	f2 e0       	ldi	r31, 0x02	; 2
     8d6:	cf 16       	cp	r12, r31
     8d8:	d1 04       	cpc	r13, r1
     8da:	09 f0       	breq	.+2      	; 0x8de <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x2e>
     8dc:	7b c0       	rjmp	.+246    	; 0x9d4 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x124>
     8de:	fe 01       	movw	r30, r28
     8e0:	31 97       	sbiw	r30, 0x01	; 1
     8e2:	e2 31       	cpi	r30, 0x12	; 18
     8e4:	f1 05       	cpc	r31, r1
     8e6:	08 f0       	brcs	.+2      	; 0x8ea <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x3a>
     8e8:	a8 c0       	rjmp	.+336    	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18a>
     8ea:	88 27       	eor	r24, r24
     8ec:	e2 5d       	subi	r30, 0xD2	; 210
     8ee:	fe 4f       	sbci	r31, 0xFE	; 254
     8f0:	8f 4f       	sbci	r24, 0xFF	; 255
     8f2:	0c 94 05 34 	jmp	0x680a	; 0x680a <__tablejump2__>
     8f6:	f8 01       	movw	r30, r16
     8f8:	e8 5b       	subi	r30, 0xB8	; 184
     8fa:	ff 4f       	sbci	r31, 0xFF	; 255
     8fc:	20 83       	st	Z, r18
     8fe:	31 83       	std	Z+1, r19	; 0x01
     900:	9c c0       	rjmp	.+312    	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18a>
     902:	f8 01       	movw	r30, r16
     904:	e6 5b       	subi	r30, 0xB6	; 182
     906:	ff 4f       	sbci	r31, 0xFF	; 255
     908:	20 83       	st	Z, r18
     90a:	31 83       	std	Z+1, r19	; 0x01
     90c:	96 c0       	rjmp	.+300    	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18a>
     90e:	f8 01       	movw	r30, r16
     910:	e4 5b       	subi	r30, 0xB4	; 180
     912:	ff 4f       	sbci	r31, 0xFF	; 255
     914:	20 83       	st	Z, r18
     916:	31 83       	std	Z+1, r19	; 0x01
     918:	90 c0       	rjmp	.+288    	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18a>
     91a:	f8 01       	movw	r30, r16
     91c:	e2 5b       	subi	r30, 0xB2	; 178
     91e:	ff 4f       	sbci	r31, 0xFF	; 255
     920:	20 83       	st	Z, r18
     922:	31 83       	std	Z+1, r19	; 0x01
     924:	8a c0       	rjmp	.+276    	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18a>
     926:	f8 01       	movw	r30, r16
     928:	e0 5b       	subi	r30, 0xB0	; 176
     92a:	ff 4f       	sbci	r31, 0xFF	; 255
     92c:	20 83       	st	Z, r18
     92e:	31 83       	std	Z+1, r19	; 0x01
     930:	84 c0       	rjmp	.+264    	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18a>
     932:	f8 01       	movw	r30, r16
     934:	ee 5a       	subi	r30, 0xAE	; 174
     936:	ff 4f       	sbci	r31, 0xFF	; 255
     938:	20 83       	st	Z, r18
     93a:	31 83       	std	Z+1, r19	; 0x01
     93c:	7e c0       	rjmp	.+252    	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18a>
     93e:	f8 01       	movw	r30, r16
     940:	ec 5a       	subi	r30, 0xAC	; 172
     942:	ff 4f       	sbci	r31, 0xFF	; 255
     944:	20 83       	st	Z, r18
     946:	31 83       	std	Z+1, r19	; 0x01
     948:	78 c0       	rjmp	.+240    	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18a>
     94a:	f7 01       	movw	r30, r14
     94c:	60 81       	ld	r22, Z
     94e:	71 81       	ldd	r23, Z+1	; 0x01
     950:	82 81       	ldd	r24, Z+2	; 0x02
     952:	93 81       	ldd	r25, Z+3	; 0x03
     954:	0e 94 b8 10 	call	0x2170	; 0x2170 <_Z6swap32m>
     958:	f8 01       	movw	r30, r16
     95a:	e0 5c       	subi	r30, 0xC0	; 192
     95c:	ff 4f       	sbci	r31, 0xFF	; 255
     95e:	60 83       	st	Z, r22
     960:	71 83       	std	Z+1, r23	; 0x01
     962:	82 83       	std	Z+2, r24	; 0x02
     964:	93 83       	std	Z+3, r25	; 0x03
     966:	69 c0       	rjmp	.+210    	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18a>
     968:	f8 01       	movw	r30, r16
     96a:	e6 5a       	subi	r30, 0xA6	; 166
     96c:	ff 4f       	sbci	r31, 0xFF	; 255
     96e:	20 83       	st	Z, r18
     970:	31 83       	std	Z+1, r19	; 0x01
     972:	63 c0       	rjmp	.+198    	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18a>
     974:	f8 01       	movw	r30, r16
     976:	e4 5a       	subi	r30, 0xA4	; 164
     978:	ff 4f       	sbci	r31, 0xFF	; 255
     97a:	20 83       	st	Z, r18
     97c:	31 83       	std	Z+1, r19	; 0x01
     97e:	5d c0       	rjmp	.+186    	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18a>
     980:	f8 01       	movw	r30, r16
     982:	e2 5a       	subi	r30, 0xA2	; 162
     984:	ff 4f       	sbci	r31, 0xFF	; 255
     986:	20 83       	st	Z, r18
     988:	31 83       	std	Z+1, r19	; 0x01
     98a:	57 c0       	rjmp	.+174    	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18a>
     98c:	f8 01       	movw	r30, r16
     98e:	e0 5a       	subi	r30, 0xA0	; 160
     990:	ff 4f       	sbci	r31, 0xFF	; 255
     992:	20 83       	st	Z, r18
     994:	31 83       	std	Z+1, r19	; 0x01
     996:	51 c0       	rjmp	.+162    	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18a>
     998:	f8 01       	movw	r30, r16
     99a:	ee 59       	subi	r30, 0x9E	; 158
     99c:	ff 4f       	sbci	r31, 0xFF	; 255
     99e:	20 83       	st	Z, r18
     9a0:	31 83       	std	Z+1, r19	; 0x01
     9a2:	4b c0       	rjmp	.+150    	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18a>
     9a4:	f8 01       	movw	r30, r16
     9a6:	ec 59       	subi	r30, 0x9C	; 156
     9a8:	ff 4f       	sbci	r31, 0xFF	; 255
     9aa:	20 83       	st	Z, r18
     9ac:	31 83       	std	Z+1, r19	; 0x01
     9ae:	45 c0       	rjmp	.+138    	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18a>
     9b0:	f8 01       	movw	r30, r16
     9b2:	ea 59       	subi	r30, 0x9A	; 154
     9b4:	ff 4f       	sbci	r31, 0xFF	; 255
     9b6:	20 83       	st	Z, r18
     9b8:	31 83       	std	Z+1, r19	; 0x01
     9ba:	3f c0       	rjmp	.+126    	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18a>
     9bc:	f8 01       	movw	r30, r16
     9be:	e8 59       	subi	r30, 0x98	; 152
     9c0:	ff 4f       	sbci	r31, 0xFF	; 255
     9c2:	20 83       	st	Z, r18
     9c4:	31 83       	std	Z+1, r19	; 0x01
     9c6:	39 c0       	rjmp	.+114    	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18a>
     9c8:	f8 01       	movw	r30, r16
     9ca:	e6 59       	subi	r30, 0x96	; 150
     9cc:	ff 4f       	sbci	r31, 0xFF	; 255
     9ce:	20 83       	st	Z, r18
     9d0:	31 83       	std	Z+1, r19	; 0x01
     9d2:	33 c0       	rjmp	.+102    	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18a>
     9d4:	c1 30       	cpi	r28, 0x01	; 1
     9d6:	d1 05       	cpc	r29, r1
     9d8:	51 f4       	brne	.+20     	; 0x9ee <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x13e>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	a6 01       	movw	r20, r12
     9e0:	b7 01       	movw	r22, r14
     9e2:	c8 01       	movw	r24, r16
     9e4:	88 5b       	subi	r24, 0xB8	; 184
     9e6:	9f 4f       	sbci	r25, 0xFF	; 255
     9e8:	0e 94 7e 10 	call	0x20fc	; 0x20fc <_Z11ConvertDataPvS_jj>
     9ec:	26 c0       	rjmp	.+76     	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18a>
     9ee:	c5 30       	cpi	r28, 0x05	; 5
     9f0:	d1 05       	cpc	r29, r1
     9f2:	49 f4       	brne	.+18     	; 0xa06 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x156>
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	a6 01       	movw	r20, r12
     9fa:	b7 01       	movw	r22, r14
     9fc:	c8 01       	movw	r24, r16
     9fe:	c2 96       	adiw	r24, 0x32	; 50
     a00:	0e 94 7e 10 	call	0x20fc	; 0x20fc <_Z11ConvertDataPvS_jj>
     a04:	1a c0       	rjmp	.+52     	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18a>
     a06:	22 97       	sbiw	r28, 0x02	; 2
     a08:	c1 f4       	brne	.+48     	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18a>
     a0a:	f8 01       	movw	r30, r16
     a0c:	86 85       	ldd	r24, Z+14	; 0x0e
     a0e:	86 30       	cpi	r24, 0x06	; 6
     a10:	90 f4       	brcc	.+36     	; 0xa36 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x186>
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	9c 01       	movw	r18, r24
     a16:	22 0f       	add	r18, r18
     a18:	33 1f       	adc	r19, r19
     a1a:	82 0f       	add	r24, r18
     a1c:	93 1f       	adc	r25, r19
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	4a 96       	adiw	r24, 0x1a	; 26
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	a6 01       	movw	r20, r12
     a2a:	b7 01       	movw	r22, r14
     a2c:	80 0f       	add	r24, r16
     a2e:	91 1f       	adc	r25, r17
     a30:	0e 94 7e 10 	call	0x20fc	; 0x20fc <_Z11ConvertDataPvS_jj>
     a34:	02 c0       	rjmp	.+4      	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18a>
     a36:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <_ZN11CLaserBoard4BeepEv>
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	1f 91       	pop	r17
     a40:	0f 91       	pop	r16
     a42:	ff 90       	pop	r15
     a44:	ef 90       	pop	r14
     a46:	df 90       	pop	r13
     a48:	cf 90       	pop	r12
     a4a:	08 95       	ret

00000a4c <_ZN16CLaserControlAppC1Ev>:
     a4c:	26 e4       	ldi	r18, 0x46	; 70
     a4e:	32 e2       	ldi	r19, 0x22	; 34
     a50:	fc 01       	movw	r30, r24
     a52:	20 83       	st	Z, r18
     a54:	31 83       	std	Z+1, r19	; 0x01
     a56:	08 95       	ret

00000a58 <_ZN16CLaserControlAppD1Ev>:
     a58:	26 e4       	ldi	r18, 0x46	; 70
     a5a:	32 e2       	ldi	r19, 0x22	; 34
     a5c:	fc 01       	movw	r30, r24
     a5e:	20 83       	st	Z, r18
     a60:	31 83       	std	Z+1, r19	; 0x01
     a62:	0e 94 a1 28 	call	0x5142	; 0x5142 <_ZN16CMBEventsHandlerD1Ev>
     a66:	08 95       	ret

00000a68 <_ZN16CLaserControlApp18SetLaserDiodePowerEv>:
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	1f 92       	push	r1
     a6e:	1f 92       	push	r1
     a70:	cd b7       	in	r28, 0x3d	; 61
     a72:	de b7       	in	r29, 0x3e	; 62
     a74:	fc 01       	movw	r30, r24
     a76:	86 ad       	ldd	r24, Z+62	; 0x3e
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	38 2f       	mov	r19, r24
     a7e:	33 0f       	add	r19, r19
     a80:	33 0f       	add	r19, r19
     a82:	36 95       	lsr	r19
     a84:	27 95       	ror	r18
     a86:	36 95       	lsr	r19
     a88:	27 95       	ror	r18
     a8a:	36 95       	lsr	r19
     a8c:	27 95       	ror	r18
     a8e:	ab e7       	ldi	r26, 0x7B	; 123
     a90:	b4 e1       	ldi	r27, 0x14	; 20
     a92:	0e 94 0d 34 	call	0x681a	; 0x681a <__umulhisi3>
     a96:	96 95       	lsr	r25
     a98:	87 95       	ror	r24
     a9a:	88 0f       	add	r24, r24
     a9c:	99 1f       	adc	r25, r25
     a9e:	88 0f       	add	r24, r24
     aa0:	99 1f       	adc	r25, r25
     aa2:	89 83       	std	Y+1, r24	; 0x01
     aa4:	9a 83       	std	Y+2, r25	; 0x02
     aa6:	42 e0       	ldi	r20, 0x02	; 2
     aa8:	50 e0       	ldi	r21, 0x00	; 0
     aaa:	be 01       	movw	r22, r28
     aac:	6f 5f       	subi	r22, 0xFF	; 255
     aae:	7f 4f       	sbci	r23, 0xFF	; 255
     ab0:	85 e4       	ldi	r24, 0x45	; 69
     ab2:	96 e2       	ldi	r25, 0x26	; 38
     ab4:	0e 94 ff 10 	call	0x21fe	; 0x21fe <_ZN4CSPI4SendEPhj>
     ab8:	0f 90       	pop	r0
     aba:	0f 90       	pop	r0
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	08 95       	ret

00000ac2 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>:
     ac2:	4f 92       	push	r4
     ac4:	5f 92       	push	r5
     ac6:	6f 92       	push	r6
     ac8:	7f 92       	push	r7
     aca:	8f 92       	push	r8
     acc:	9f 92       	push	r9
     ace:	af 92       	push	r10
     ad0:	bf 92       	push	r11
     ad2:	cf 92       	push	r12
     ad4:	df 92       	push	r13
     ad6:	ef 92       	push	r14
     ad8:	ff 92       	push	r15
     ada:	0f 93       	push	r16
     adc:	1f 93       	push	r17
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	00 d0       	rcall	.+0      	; 0xae4 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT+0x22>
     ae4:	00 d0       	rcall	.+0      	; 0xae6 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT+0x24>
     ae6:	cd b7       	in	r28, 0x3d	; 61
     ae8:	de b7       	in	r29, 0x3e	; 62
     aea:	7c 01       	movw	r14, r24
     aec:	8b 01       	movw	r16, r22
     aee:	fb 01       	movw	r30, r22
     af0:	80 80       	ld	r8, Z
     af2:	91 80       	ldd	r9, Z+1	; 0x01
     af4:	88 ee       	ldi	r24, 0xE8	; 232
     af6:	93 e0       	ldi	r25, 0x03	; 3
     af8:	b4 01       	movw	r22, r8
     afa:	0e 94 9c 33 	call	0x6738	; 0x6738 <__udivmodhi4>
     afe:	5b 01       	movw	r10, r22
     b00:	22 81       	ldd	r18, Z+2	; 0x02
     b02:	33 81       	ldd	r19, Z+3	; 0x03
     b04:	a8 ee       	ldi	r26, 0xE8	; 232
     b06:	b3 e0       	ldi	r27, 0x03	; 3
     b08:	0e 94 0d 34 	call	0x681a	; 0x681a <__umulhisi3>
     b0c:	95 01       	movw	r18, r10
     b0e:	40 e0       	ldi	r20, 0x00	; 0
     b10:	50 e0       	ldi	r21, 0x00	; 0
     b12:	0e 94 c4 33 	call	0x6788	; 0x6788 <__udivmodsi4>
     b16:	29 01       	movw	r4, r18
     b18:	3a 01       	movw	r6, r20
     b1a:	f8 01       	movw	r30, r16
     b1c:	c4 80       	ldd	r12, Z+4	; 0x04
     b1e:	d5 80       	ldd	r13, Z+5	; 0x05
     b20:	8a e6       	ldi	r24, 0x6A	; 106
     b22:	98 e1       	ldi	r25, 0x18	; 24
     b24:	b4 01       	movw	r22, r8
     b26:	0e 94 9c 33 	call	0x6738	; 0x6738 <__udivmodhi4>
     b2a:	8b 01       	movw	r16, r22
     b2c:	00 0f       	add	r16, r16
     b2e:	11 1f       	adc	r17, r17
     b30:	66 0f       	add	r22, r22
     b32:	77 1f       	adc	r23, r23
     b34:	66 0f       	add	r22, r22
     b36:	77 1f       	adc	r23, r23
     b38:	66 0f       	add	r22, r22
     b3a:	77 1f       	adc	r23, r23
     b3c:	06 0f       	add	r16, r22
     b3e:	17 1f       	adc	r17, r23
     b40:	f7 01       	movw	r30, r14
     b42:	00 af       	std	Z+56, r16	; 0x38
     b44:	11 af       	std	Z+57, r17	; 0x39
     b46:	d8 01       	movw	r26, r16
     b48:	a3 01       	movw	r20, r6
     b4a:	92 01       	movw	r18, r4
     b4c:	0e 94 1c 34 	call	0x6838	; 0x6838 <__muluhisi3>
     b50:	28 ee       	ldi	r18, 0xE8	; 232
     b52:	33 e0       	ldi	r19, 0x03	; 3
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	0e 94 c4 33 	call	0x6788	; 0x6788 <__udivmodsi4>
     b5c:	02 1b       	sub	r16, r18
     b5e:	13 0b       	sbc	r17, r19
     b60:	f7 01       	movw	r30, r14
     b62:	02 af       	std	Z+58, r16	; 0x3a
     b64:	13 af       	std	Z+59, r17	; 0x3b
     b66:	a4 ae       	std	Z+60, r10	; 0x3c
     b68:	b5 ae       	std	Z+61, r11	; 0x3d
     b6a:	88 ec       	ldi	r24, 0xC8	; 200
     b6c:	8c 9d       	mul	r24, r12
     b6e:	90 01       	movw	r18, r0
     b70:	8d 9d       	mul	r24, r13
     b72:	30 0d       	add	r19, r0
     b74:	11 24       	eor	r1, r1
     b76:	36 95       	lsr	r19
     b78:	27 95       	ror	r18
     b7a:	36 95       	lsr	r19
     b7c:	27 95       	ror	r18
     b7e:	ab e7       	ldi	r26, 0x7B	; 123
     b80:	b4 e1       	ldi	r27, 0x14	; 20
     b82:	0e 94 0d 34 	call	0x681a	; 0x681a <__umulhisi3>
     b86:	8c 01       	movw	r16, r24
     b88:	16 95       	lsr	r17
     b8a:	07 95       	ror	r16
     b8c:	09 83       	std	Y+1, r16	; 0x01
     b8e:	1a 83       	std	Y+2, r17	; 0x02
     b90:	96 01       	movw	r18, r12
     b92:	a8 ec       	ldi	r26, 0xC8	; 200
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	0e 94 0d 34 	call	0x681a	; 0x681a <__umulhisi3>
     b9a:	9b 01       	movw	r18, r22
     b9c:	ac 01       	movw	r20, r24
     b9e:	c3 01       	movw	r24, r6
     ba0:	b2 01       	movw	r22, r4
     ba2:	0e 94 8c 33 	call	0x6718	; 0x6718 <__mulsi3>
     ba6:	20 ea       	ldi	r18, 0xA0	; 160
     ba8:	36 e8       	ldi	r19, 0x86	; 134
     baa:	41 e0       	ldi	r20, 0x01	; 1
     bac:	50 e0       	ldi	r21, 0x00	; 0
     bae:	0e 94 c4 33 	call	0x6788	; 0x6788 <__udivmodsi4>
     bb2:	12 2f       	mov	r17, r18
     bb4:	82 2f       	mov	r24, r18
     bb6:	93 2f       	mov	r25, r19
     bb8:	8b 83       	std	Y+3, r24	; 0x03
     bba:	9c 83       	std	Y+4, r25	; 0x04
     bbc:	c3 01       	movw	r24, r6
     bbe:	b2 01       	movw	r22, r4
     bc0:	2a e0       	ldi	r18, 0x0A	; 10
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	40 e0       	ldi	r20, 0x00	; 0
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	0e 94 c4 33 	call	0x6788	; 0x6788 <__udivmodsi4>
     bcc:	62 2f       	mov	r22, r18
     bce:	82 2f       	mov	r24, r18
     bd0:	93 2f       	mov	r25, r19
     bd2:	8d 83       	std	Y+5, r24	; 0x05
     bd4:	9e 83       	std	Y+6, r25	; 0x06
     bd6:	20 2f       	mov	r18, r16
     bd8:	3a 81       	ldd	r19, Y+2	; 0x02
     bda:	41 2f       	mov	r20, r17
     bdc:	5c 81       	ldd	r21, Y+4	; 0x04
     bde:	7e 81       	ldd	r23, Y+6	; 0x06
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	26 96       	adiw	r28, 0x06	; 6
     be6:	cd bf       	out	0x3d, r28	; 61
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	0f 91       	pop	r16
     bf2:	ff 90       	pop	r15
     bf4:	ef 90       	pop	r14
     bf6:	df 90       	pop	r13
     bf8:	cf 90       	pop	r12
     bfa:	bf 90       	pop	r11
     bfc:	af 90       	pop	r10
     bfe:	9f 90       	pop	r9
     c00:	8f 90       	pop	r8
     c02:	7f 90       	pop	r7
     c04:	6f 90       	pop	r6
     c06:	5f 90       	pop	r5
     c08:	4f 90       	pop	r4
     c0a:	08 95       	ret

00000c0c <_ZN16CLaserControlApp11GetVariableEjj>:
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	ec 01       	movw	r28, r24
     c12:	c0 58       	subi	r28, 0x80	; 128
     c14:	df 4f       	sbci	r29, 0xFF	; 255
     c16:	88 81       	ld	r24, Y
     c18:	99 81       	ldd	r25, Y+1	; 0x01
     c1a:	0e 94 11 2b 	call	0x5622	; 0x5622 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
     c1e:	88 81       	ld	r24, Y
     c20:	99 81       	ldd	r25, Y+1	; 0x01
     c22:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     c26:	88 81       	ld	r24, Y
     c28:	99 81       	ldd	r25, Y+1	; 0x01
     c2a:	0e 94 97 2a 	call	0x552e	; 0x552e <_ZN9CMBSender18WaitMODBUSListenerEv>
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	08 95       	ret

00000c34 <_ZN16CLaserControlApp11SetVariableEjPjj>:
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	ec 01       	movw	r28, r24
     c3a:	c0 58       	subi	r28, 0x80	; 128
     c3c:	df 4f       	sbci	r29, 0xFF	; 255
     c3e:	88 81       	ld	r24, Y
     c40:	99 81       	ldd	r25, Y+1	; 0x01
     c42:	0e 94 cc 2a 	call	0x5598	; 0x5598 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
     c46:	88 81       	ld	r24, Y
     c48:	99 81       	ldd	r25, Y+1	; 0x01
     c4a:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	08 95       	ret

00000c54 <_ZN16CLaserControlApp12SetPictureIdEj>:
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	1f 92       	push	r1
     c5e:	1f 92       	push	r1
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	8c 01       	movw	r16, r24
     c66:	cb 01       	movw	r24, r22
     c68:	0e 94 b4 10 	call	0x2168	; 0x2168 <_Z4swapj>
     c6c:	89 83       	std	Y+1, r24	; 0x01
     c6e:	9a 83       	std	Y+2, r25	; 0x02
     c70:	00 58       	subi	r16, 0x80	; 128
     c72:	1f 4f       	sbci	r17, 0xFF	; 255
     c74:	22 e0       	ldi	r18, 0x02	; 2
     c76:	ae 01       	movw	r20, r28
     c78:	4f 5f       	subi	r20, 0xFF	; 255
     c7a:	5f 4f       	sbci	r21, 0xFF	; 255
     c7c:	63 e0       	ldi	r22, 0x03	; 3
     c7e:	f8 01       	movw	r30, r16
     c80:	80 81       	ld	r24, Z
     c82:	91 81       	ldd	r25, Z+1	; 0x01
     c84:	0e 94 bd 2a 	call	0x557a	; 0x557a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
     c88:	f8 01       	movw	r30, r16
     c8a:	80 81       	ld	r24, Z
     c8c:	91 81       	ldd	r25, Z+1	; 0x01
     c8e:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
     c9e:	08 95       	ret

00000ca0 <_ZN16CLaserControlApp12OnLaserTimerEv>:
     ca0:	fc 01       	movw	r30, r24
     ca2:	e0 5c       	subi	r30, 0xC0	; 192
     ca4:	ff 4f       	sbci	r31, 0xFF	; 255
     ca6:	40 81       	ld	r20, Z
     ca8:	51 81       	ldd	r21, Z+1	; 0x01
     caa:	62 81       	ldd	r22, Z+2	; 0x02
     cac:	73 81       	ldd	r23, Z+3	; 0x03
     cae:	4f 5f       	subi	r20, 0xFF	; 255
     cb0:	5f 4f       	sbci	r21, 0xFF	; 255
     cb2:	6f 4f       	sbci	r22, 0xFF	; 255
     cb4:	7f 4f       	sbci	r23, 0xFF	; 255
     cb6:	40 83       	st	Z, r20
     cb8:	51 83       	std	Z+1, r21	; 0x01
     cba:	62 83       	std	Z+2, r22	; 0x02
     cbc:	73 83       	std	Z+3, r23	; 0x03
     cbe:	34 96       	adiw	r30, 0x04	; 4
     cc0:	40 81       	ld	r20, Z
     cc2:	51 81       	ldd	r21, Z+1	; 0x01
     cc4:	62 81       	ldd	r22, Z+2	; 0x02
     cc6:	73 81       	ldd	r23, Z+3	; 0x03
     cc8:	4f 5f       	subi	r20, 0xFF	; 255
     cca:	5f 4f       	sbci	r21, 0xFF	; 255
     ccc:	6f 4f       	sbci	r22, 0xFF	; 255
     cce:	7f 4f       	sbci	r23, 0xFF	; 255
     cd0:	40 83       	st	Z, r20
     cd2:	51 83       	std	Z+1, r21	; 0x01
     cd4:	62 83       	std	Z+2, r22	; 0x02
     cd6:	73 83       	std	Z+3, r23	; 0x03
     cd8:	fc 01       	movw	r30, r24
     cda:	44 ad       	ldd	r20, Z+60	; 0x3c
     cdc:	55 ad       	ldd	r21, Z+61	; 0x3d
     cde:	45 36       	cpi	r20, 0x65	; 101
     ce0:	51 05       	cpc	r21, r1
     ce2:	50 f0       	brcs	.+20     	; 0xcf8 <_ZN16CLaserControlApp12OnLaserTimerEv+0x58>
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	42 e3       	ldi	r20, 0x32	; 50
     ce8:	50 e0       	ldi	r21, 0x00	; 0
     cea:	64 ef       	ldi	r22, 0xF4	; 244
     cec:	71 e0       	ldi	r23, 0x01	; 1
     cee:	84 e0       	ldi	r24, 0x04	; 4
     cf0:	96 e2       	ldi	r25, 0x26	; 38
     cf2:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <_ZN12CSoundPlayer10SoundStartEjjh>
     cf6:	09 c0       	rjmp	.+18     	; 0xd0a <_ZN16CLaserControlApp12OnLaserTimerEv+0x6a>
     cf8:	56 95       	lsr	r21
     cfa:	47 95       	ror	r20
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	64 ef       	ldi	r22, 0xF4	; 244
     d00:	71 e0       	ldi	r23, 0x01	; 1
     d02:	84 e0       	ldi	r24, 0x04	; 4
     d04:	96 e2       	ldi	r25, 0x26	; 38
     d06:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <_ZN12CSoundPlayer10SoundStartEjjh>
     d0a:	84 e0       	ldi	r24, 0x04	; 4
     d0c:	96 e2       	ldi	r25, 0x26	; 38
     d0e:	0e 94 55 2e 	call	0x5caa	; 0x5caa <_ZN12CSoundPlayer9SoundStopEv>
     d12:	08 95       	ret

00000d14 <_ZN16CLaserControlApp22OnLaserTimerStopStaticEPv>:
     d14:	0e 94 50 06 	call	0xca0	; 0xca0 <_ZN16CLaserControlApp12OnLaserTimerEv>
     d18:	08 95       	ret

00000d1a <_ZN16CLaserControlApp13OnPWMTimerOVFEv>:
     d1a:	fc 01       	movw	r30, r24
     d1c:	83 89       	ldd	r24, Z+19	; 0x13
     d1e:	88 23       	and	r24, r24
     d20:	21 f0       	breq	.+8      	; 0xd2a <_ZN16CLaserControlApp13OnPWMTimerOVFEv+0x10>
     d22:	85 e0       	ldi	r24, 0x05	; 5
     d24:	96 e2       	ldi	r25, 0x26	; 38
     d26:	0e 94 93 2d 	call	0x5b26	; 0x5b26 <_ZN11CLaserBoard6PWMOffEv>
     d2a:	08 95       	ret

00000d2c <_ZN16CLaserControlApp13OnPWMTimerCMPEv>:
     d2c:	fc 01       	movw	r30, r24
     d2e:	83 89       	ldd	r24, Z+19	; 0x13
     d30:	88 23       	and	r24, r24
     d32:	21 f0       	breq	.+8      	; 0xd3c <_ZN16CLaserControlApp13OnPWMTimerCMPEv+0x10>
     d34:	85 e0       	ldi	r24, 0x05	; 5
     d36:	96 e2       	ldi	r25, 0x26	; 38
     d38:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <_ZN11CLaserBoard5PWMOnEv>
     d3c:	08 95       	ret

00000d3e <_ZN16CLaserControlApp19OnPWMTimerOVFStaticEPv>:
}

void CLaserControlApp::OnPWMTimerOVFStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerOVF();
     d3e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <_ZN16CLaserControlApp13OnPWMTimerOVFEv>
     d42:	08 95       	ret

00000d44 <_ZN16CLaserControlApp19OnPWMTimerCMPStaticEPv>:
}

void CLaserControlApp::OnPWMTimerCMPStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerCMP();
     d44:	0e 94 96 06 	call	0xd2c	; 0xd2c <_ZN16CLaserControlApp13OnPWMTimerCMPEv>
     d48:	08 95       	ret

00000d4a <_ZN16CLaserControlApp19OnPWMTimerREDStaticEPv>:
}

void CLaserControlApp::OnPWMTimerREDStatic(void* sender)
{
     d4a:	08 95       	ret

00000d4c <_ZN16CLaserControlApp19OnPWMTimerGRNStaticEPv>:
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerRED();
}

void CLaserControlApp::OnPWMTimerGRNStatic(void* sender)
{
     d4c:	08 95       	ret

00000d4e <_ZN16CLaserControlApp19OnPWMTimerBLUStaticEPv>:
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWMTimerGRN();
}
void CLaserControlApp::OnPWMTimerBLUStatic(void* sender)
{
     d4e:	08 95       	ret

00000d50 <_ZN16CLaserControlApp13MelaninPresetEj>:
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnINT0();
}

void CLaserControlApp::MelaninPreset(uint16_t melanin)
{
     d50:	0f 93       	push	r16
     d52:	1f 93       	push	r17
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	ec 01       	movw	r28, r24
	Profile = PROFILE_DEFAULT;
     d5a:	1e 86       	std	Y+14, r1	; 0x0e
	laserDiodeData.mode = Profile;
     d5c:	fc 01       	movw	r30, r24
     d5e:	e8 5b       	subi	r30, 0xB8	; 184
     d60:	ff 4f       	sbci	r31, 0xFF	; 255
     d62:	10 82       	st	Z, r1
     d64:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.laserprofile.Frequency = 3;
     d66:	32 96       	adiw	r30, 0x02	; 2
     d68:	83 e0       	ldi	r24, 0x03	; 3
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	80 83       	st	Z, r24
     d6e:	91 83       	std	Z+1, r25	; 0x01
	if (melanin < 10)
     d70:	6a 30       	cpi	r22, 0x0A	; 10
     d72:	71 05       	cpc	r23, r1
     d74:	70 f4       	brcc	.+28     	; 0xd92 <_ZN16CLaserControlApp13MelaninPresetEj+0x42>
	{
		laserDiodeData.phototype = 1;
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	72 96       	adiw	r30, 0x12	; 18
     d7c:	80 83       	st	Z, r24
     d7e:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 60;
     d80:	8c e3       	ldi	r24, 0x3C	; 60
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	88 8f       	std	Y+24, r24	; 0x18
     d86:	99 8f       	std	Y+25, r25	; 0x19
		m_wMaxEnergy = 97;
     d88:	81 e6       	ldi	r24, 0x61	; 97
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	8c 8b       	std	Y+20, r24	; 0x14
     d8e:	9d 8b       	std	Y+21, r25	; 0x15
     d90:	5b c0       	rjmp	.+182    	; 0xe48 <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 20)
     d92:	64 31       	cpi	r22, 0x14	; 20
     d94:	71 05       	cpc	r23, r1
     d96:	80 f4       	brcc	.+32     	; 0xdb8 <_ZN16CLaserControlApp13MelaninPresetEj+0x68>
	{
		laserDiodeData.phototype = 2;
     d98:	82 e0       	ldi	r24, 0x02	; 2
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	fe 01       	movw	r30, r28
     d9e:	e4 5a       	subi	r30, 0xA4	; 164
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	80 83       	st	Z, r24
     da4:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 60;
     da6:	8c e3       	ldi	r24, 0x3C	; 60
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	88 8f       	std	Y+24, r24	; 0x18
     dac:	99 8f       	std	Y+25, r25	; 0x19
		m_wMaxEnergy = 97;
     dae:	81 e6       	ldi	r24, 0x61	; 97
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	8c 8b       	std	Y+20, r24	; 0x14
     db4:	9d 8b       	std	Y+21, r25	; 0x15
     db6:	48 c0       	rjmp	.+144    	; 0xe48 <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 35)
     db8:	63 32       	cpi	r22, 0x23	; 35
     dba:	71 05       	cpc	r23, r1
     dbc:	80 f4       	brcc	.+32     	; 0xdde <_ZN16CLaserControlApp13MelaninPresetEj+0x8e>
	{
		laserDiodeData.phototype = 3;
     dbe:	83 e0       	ldi	r24, 0x03	; 3
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	fe 01       	movw	r30, r28
     dc4:	e4 5a       	subi	r30, 0xA4	; 164
     dc6:	ff 4f       	sbci	r31, 0xFF	; 255
     dc8:	80 83       	st	Z, r24
     dca:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 60;
     dcc:	8c e3       	ldi	r24, 0x3C	; 60
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	88 8f       	std	Y+24, r24	; 0x18
     dd2:	99 8f       	std	Y+25, r25	; 0x19
		m_wMaxEnergy = 97;
     dd4:	81 e6       	ldi	r24, 0x61	; 97
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	8c 8b       	std	Y+20, r24	; 0x14
     dda:	9d 8b       	std	Y+21, r25	; 0x15
     ddc:	35 c0       	rjmp	.+106    	; 0xe48 <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 49)
     dde:	61 33       	cpi	r22, 0x31	; 49
     de0:	71 05       	cpc	r23, r1
     de2:	80 f4       	brcc	.+32     	; 0xe04 <_ZN16CLaserControlApp13MelaninPresetEj+0xb4>
	{
		laserDiodeData.phototype = 4;
     de4:	84 e0       	ldi	r24, 0x04	; 4
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	fe 01       	movw	r30, r28
     dea:	e4 5a       	subi	r30, 0xA4	; 164
     dec:	ff 4f       	sbci	r31, 0xFF	; 255
     dee:	80 83       	st	Z, r24
     df0:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 100;
     df2:	84 e6       	ldi	r24, 0x64	; 100
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	88 8f       	std	Y+24, r24	; 0x18
     df8:	99 8f       	std	Y+25, r25	; 0x19
		m_wMaxEnergy = 97;
     dfa:	81 e6       	ldi	r24, 0x61	; 97
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	8c 8b       	std	Y+20, r24	; 0x14
     e00:	9d 8b       	std	Y+21, r25	; 0x15
     e02:	22 c0       	rjmp	.+68     	; 0xe48 <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 72)
     e04:	68 34       	cpi	r22, 0x48	; 72
     e06:	71 05       	cpc	r23, r1
     e08:	80 f4       	brcc	.+32     	; 0xe2a <_ZN16CLaserControlApp13MelaninPresetEj+0xda>
	{
		laserDiodeData.phototype = 5;
     e0a:	85 e0       	ldi	r24, 0x05	; 5
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	fe 01       	movw	r30, r28
     e10:	e4 5a       	subi	r30, 0xA4	; 164
     e12:	ff 4f       	sbci	r31, 0xFF	; 255
     e14:	80 83       	st	Z, r24
     e16:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 100;
     e18:	84 e6       	ldi	r24, 0x64	; 100
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	88 8f       	std	Y+24, r24	; 0x18
     e1e:	99 8f       	std	Y+25, r25	; 0x19
		m_wMaxEnergy = 90;
     e20:	8a e5       	ldi	r24, 0x5A	; 90
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	8c 8b       	std	Y+20, r24	; 0x14
     e26:	9d 8b       	std	Y+21, r25	; 0x15
     e28:	0f c0       	rjmp	.+30     	; 0xe48 <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	{
		laserDiodeData.phototype = 6;
     e2a:	86 e0       	ldi	r24, 0x06	; 6
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	fe 01       	movw	r30, r28
     e30:	e4 5a       	subi	r30, 0xA4	; 164
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	80 83       	st	Z, r24
     e36:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 100;
     e38:	84 e6       	ldi	r24, 0x64	; 100
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	88 8f       	std	Y+24, r24	; 0x18
     e3e:	99 8f       	std	Y+25, r25	; 0x19
		m_wMaxEnergy = 87;
     e40:	87 e5       	ldi	r24, 0x57	; 87
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	8c 8b       	std	Y+20, r24	; 0x14
     e46:	9d 8b       	std	Y+21, r25	; 0x15
	}
	
	laserDiodeData.laserprofile.EnergyPercent = 100;//m_wMaxEnergy;
     e48:	fe 01       	movw	r30, r28
     e4a:	e2 5b       	subi	r30, 0xB2	; 178
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	84 e6       	ldi	r24, 0x64	; 100
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	80 83       	st	Z, r24
     e54:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.laserprofile.Duration = m_wMaxDuration;
     e56:	88 8d       	ldd	r24, Y+24	; 0x18
     e58:	99 8d       	ldd	r25, Y+25	; 0x19
     e5a:	32 97       	sbiw	r30, 0x02	; 2
     e5c:	80 83       	st	Z, r24
     e5e:	91 83       	std	Z+1, r25	; 0x01
	
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile]);
     e60:	8e 01       	movw	r16, r28
     e62:	00 5b       	subi	r16, 0xB0	; 176
     e64:	1f 4f       	sbci	r17, 0xFF	; 255
     e66:	8e 85       	ldd	r24, Y+14	; 0x0e
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	bc 01       	movw	r22, r24
     e6c:	66 0f       	add	r22, r22
     e6e:	77 1f       	adc	r23, r23
     e70:	68 0f       	add	r22, r24
     e72:	79 1f       	adc	r23, r25
     e74:	66 0f       	add	r22, r22
     e76:	77 1f       	adc	r23, r23
     e78:	66 5e       	subi	r22, 0xE6	; 230
     e7a:	7f 4f       	sbci	r23, 0xFF	; 255
     e7c:	6c 0f       	add	r22, r28
     e7e:	7d 1f       	adc	r23, r29
     e80:	ce 01       	movw	r24, r28
     e82:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
     e86:	f8 01       	movw	r30, r16
     e88:	20 83       	st	Z, r18
     e8a:	31 83       	std	Z+1, r19	; 0x01
     e8c:	42 83       	std	Z+2, r20	; 0x02
     e8e:	53 83       	std	Z+3, r21	; 0x03
     e90:	64 83       	std	Z+4, r22	; 0x04
     e92:	75 83       	std	Z+5, r23	; 0x05
	laserPower = m_structLaserProfile[Profile].EnergyPercent;
     e94:	8e 85       	ldd	r24, Y+14	; 0x0e
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	fc 01       	movw	r30, r24
     e9a:	ee 0f       	add	r30, r30
     e9c:	ff 1f       	adc	r31, r31
     e9e:	e8 0f       	add	r30, r24
     ea0:	f9 1f       	adc	r31, r25
     ea2:	ee 0f       	add	r30, r30
     ea4:	ff 1f       	adc	r31, r31
     ea6:	ec 0f       	add	r30, r28
     ea8:	fd 1f       	adc	r31, r29
     eaa:	86 8d       	ldd	r24, Z+30	; 0x1e
     eac:	97 8d       	ldd	r25, Z+31	; 0x1f
     eae:	8e af       	std	Y+62, r24	; 0x3e
     eb0:	9f af       	std	Y+63, r25	; 0x3f
}
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	1f 91       	pop	r17
     eb8:	0f 91       	pop	r16
     eba:	08 95       	ret

00000ebc <_ZN16CLaserControlApp15PhototypePresetEj>:

void CLaserControlApp::PhototypePreset(uint16_t phototype)
{
     ebc:	0f 93       	push	r16
     ebe:	1f 93       	push	r17
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	ec 01       	movw	r28, r24
	Profile = PROFILE_DEFAULT;
     ec6:	1e 86       	std	Y+14, r1	; 0x0e
	laserDiodeData.mode = Profile;
     ec8:	fc 01       	movw	r30, r24
     eca:	e8 5b       	subi	r30, 0xB8	; 184
     ecc:	ff 4f       	sbci	r31, 0xFF	; 255
     ece:	10 82       	st	Z, r1
     ed0:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.laserprofile.Frequency = 3;
     ed2:	32 96       	adiw	r30, 0x02	; 2
     ed4:	83 e0       	ldi	r24, 0x03	; 3
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	80 83       	st	Z, r24
     eda:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.phototype = phototype;
     edc:	72 96       	adiw	r30, 0x12	; 18
     ede:	60 83       	st	Z, r22
     ee0:	71 83       	std	Z+1, r23	; 0x01
	
	switch (phototype)
     ee2:	63 30       	cpi	r22, 0x03	; 3
     ee4:	71 05       	cpc	r23, r1
     ee6:	91 f1       	breq	.+100    	; 0xf4c <_ZN16CLaserControlApp15PhototypePresetEj+0x90>
     ee8:	38 f4       	brcc	.+14     	; 0xef8 <_ZN16CLaserControlApp15PhototypePresetEj+0x3c>
     eea:	61 30       	cpi	r22, 0x01	; 1
     eec:	71 05       	cpc	r23, r1
     eee:	71 f0       	breq	.+28     	; 0xf0c <_ZN16CLaserControlApp15PhototypePresetEj+0x50>
     ef0:	62 30       	cpi	r22, 0x02	; 2
     ef2:	71 05       	cpc	r23, r1
     ef4:	d9 f0       	breq	.+54     	; 0xf2c <_ZN16CLaserControlApp15PhototypePresetEj+0x70>
     ef6:	69 c0       	rjmp	.+210    	; 0xfca <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
     ef8:	65 30       	cpi	r22, 0x05	; 5
     efa:	71 05       	cpc	r23, r1
     efc:	09 f4       	brne	.+2      	; 0xf00 <_ZN16CLaserControlApp15PhototypePresetEj+0x44>
     efe:	46 c0       	rjmp	.+140    	; 0xf8c <_ZN16CLaserControlApp15PhototypePresetEj+0xd0>
     f00:	a8 f1       	brcs	.+106    	; 0xf6c <_ZN16CLaserControlApp15PhototypePresetEj+0xb0>
     f02:	66 30       	cpi	r22, 0x06	; 6
     f04:	71 05       	cpc	r23, r1
     f06:	09 f4       	brne	.+2      	; 0xf0a <_ZN16CLaserControlApp15PhototypePresetEj+0x4e>
     f08:	51 c0       	rjmp	.+162    	; 0xfac <_ZN16CLaserControlApp15PhototypePresetEj+0xf0>
     f0a:	5f c0       	rjmp	.+190    	; 0xfca <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
	{
		case 1:
		{
			laserDiodeData.melanin = 5;
     f0c:	85 e0       	ldi	r24, 0x05	; 5
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	fe 01       	movw	r30, r28
     f12:	e6 5a       	subi	r30, 0xA6	; 166
     f14:	ff 4f       	sbci	r31, 0xFF	; 255
     f16:	80 83       	st	Z, r24
     f18:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 60;
     f1a:	8c e3       	ldi	r24, 0x3C	; 60
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	88 8f       	std	Y+24, r24	; 0x18
     f20:	99 8f       	std	Y+25, r25	; 0x19
			m_wMaxEnergy = 97;
     f22:	81 e6       	ldi	r24, 0x61	; 97
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	8c 8b       	std	Y+20, r24	; 0x14
     f28:	9d 8b       	std	Y+21, r25	; 0x15
		}
		break;
     f2a:	4f c0       	rjmp	.+158    	; 0xfca <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 2:
		{
			laserDiodeData.melanin = 14;
     f2c:	8e e0       	ldi	r24, 0x0E	; 14
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	fe 01       	movw	r30, r28
     f32:	e6 5a       	subi	r30, 0xA6	; 166
     f34:	ff 4f       	sbci	r31, 0xFF	; 255
     f36:	80 83       	st	Z, r24
     f38:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 60;
     f3a:	8c e3       	ldi	r24, 0x3C	; 60
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	88 8f       	std	Y+24, r24	; 0x18
     f40:	99 8f       	std	Y+25, r25	; 0x19
			m_wMaxEnergy = 97;
     f42:	81 e6       	ldi	r24, 0x61	; 97
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	8c 8b       	std	Y+20, r24	; 0x14
     f48:	9d 8b       	std	Y+21, r25	; 0x15
		}
		break;
     f4a:	3f c0       	rjmp	.+126    	; 0xfca <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 3:
		{
			laserDiodeData.melanin = 27;
     f4c:	8b e1       	ldi	r24, 0x1B	; 27
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	fe 01       	movw	r30, r28
     f52:	e6 5a       	subi	r30, 0xA6	; 166
     f54:	ff 4f       	sbci	r31, 0xFF	; 255
     f56:	80 83       	st	Z, r24
     f58:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 60;
     f5a:	8c e3       	ldi	r24, 0x3C	; 60
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	88 8f       	std	Y+24, r24	; 0x18
     f60:	99 8f       	std	Y+25, r25	; 0x19
			m_wMaxEnergy = 97;
     f62:	81 e6       	ldi	r24, 0x61	; 97
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	8c 8b       	std	Y+20, r24	; 0x14
     f68:	9d 8b       	std	Y+21, r25	; 0x15
		}
		break;
     f6a:	2f c0       	rjmp	.+94     	; 0xfca <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 4:
		{
			laserDiodeData.melanin = 41;
     f6c:	89 e2       	ldi	r24, 0x29	; 41
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	fe 01       	movw	r30, r28
     f72:	e6 5a       	subi	r30, 0xA6	; 166
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	80 83       	st	Z, r24
     f78:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 100;
     f7a:	84 e6       	ldi	r24, 0x64	; 100
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	88 8f       	std	Y+24, r24	; 0x18
     f80:	99 8f       	std	Y+25, r25	; 0x19
			m_wMaxEnergy = 97;
     f82:	81 e6       	ldi	r24, 0x61	; 97
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	8c 8b       	std	Y+20, r24	; 0x14
     f88:	9d 8b       	std	Y+21, r25	; 0x15
		}
		break;
     f8a:	1f c0       	rjmp	.+62     	; 0xfca <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 5:
		{
			laserDiodeData.melanin = 61;
     f8c:	8d e3       	ldi	r24, 0x3D	; 61
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	fe 01       	movw	r30, r28
     f92:	e6 5a       	subi	r30, 0xA6	; 166
     f94:	ff 4f       	sbci	r31, 0xFF	; 255
     f96:	80 83       	st	Z, r24
     f98:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 100;
     f9a:	84 e6       	ldi	r24, 0x64	; 100
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	88 8f       	std	Y+24, r24	; 0x18
     fa0:	99 8f       	std	Y+25, r25	; 0x19
			m_wMaxEnergy = 90;
     fa2:	8a e5       	ldi	r24, 0x5A	; 90
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	8c 8b       	std	Y+20, r24	; 0x14
     fa8:	9d 8b       	std	Y+21, r25	; 0x15
		}
		break;
     faa:	0f c0       	rjmp	.+30     	; 0xfca <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 6:
		{
			laserDiodeData.melanin = 85;
     fac:	85 e5       	ldi	r24, 0x55	; 85
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	fe 01       	movw	r30, r28
     fb2:	e6 5a       	subi	r30, 0xA6	; 166
     fb4:	ff 4f       	sbci	r31, 0xFF	; 255
     fb6:	80 83       	st	Z, r24
     fb8:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 100;
     fba:	84 e6       	ldi	r24, 0x64	; 100
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	88 8f       	std	Y+24, r24	; 0x18
     fc0:	99 8f       	std	Y+25, r25	; 0x19
			m_wMaxEnergy = 87;
     fc2:	87 e5       	ldi	r24, 0x57	; 87
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	8c 8b       	std	Y+20, r24	; 0x14
     fc8:	9d 8b       	std	Y+21, r25	; 0x15
		}
	}
	
	laserDiodeData.laserprofile.EnergyPercent = 100;//m_wMaxEnergy;
     fca:	fe 01       	movw	r30, r28
     fcc:	e2 5b       	subi	r30, 0xB2	; 178
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	84 e6       	ldi	r24, 0x64	; 100
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	80 83       	st	Z, r24
     fd6:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.laserprofile.Duration = m_wMaxDuration;
     fd8:	88 8d       	ldd	r24, Y+24	; 0x18
     fda:	99 8d       	ldd	r25, Y+25	; 0x19
     fdc:	32 97       	sbiw	r30, 0x02	; 2
     fde:	80 83       	st	Z, r24
     fe0:	91 83       	std	Z+1, r25	; 0x01
	
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile]);
     fe2:	8e 01       	movw	r16, r28
     fe4:	00 5b       	subi	r16, 0xB0	; 176
     fe6:	1f 4f       	sbci	r17, 0xFF	; 255
     fe8:	be 01       	movw	r22, r28
     fea:	66 5e       	subi	r22, 0xE6	; 230
     fec:	7f 4f       	sbci	r23, 0xFF	; 255
     fee:	ce 01       	movw	r24, r28
     ff0:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
     ff4:	f8 01       	movw	r30, r16
     ff6:	20 83       	st	Z, r18
     ff8:	31 83       	std	Z+1, r19	; 0x01
     ffa:	42 83       	std	Z+2, r20	; 0x02
     ffc:	53 83       	std	Z+3, r21	; 0x03
     ffe:	64 83       	std	Z+4, r22	; 0x04
    1000:	75 83       	std	Z+5, r23	; 0x05
	laserPower = m_structLaserProfile[Profile].EnergyPercent;
    1002:	8e 85       	ldd	r24, Y+14	; 0x0e
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	fc 01       	movw	r30, r24
    1008:	ee 0f       	add	r30, r30
    100a:	ff 1f       	adc	r31, r31
    100c:	e8 0f       	add	r30, r24
    100e:	f9 1f       	adc	r31, r25
    1010:	ee 0f       	add	r30, r30
    1012:	ff 1f       	adc	r31, r31
    1014:	ec 0f       	add	r30, r28
    1016:	fd 1f       	adc	r31, r29
    1018:	86 8d       	ldd	r24, Z+30	; 0x1e
    101a:	97 8d       	ldd	r25, Z+31	; 0x1f
    101c:	8e af       	std	Y+62, r24	; 0x3e
    101e:	9f af       	std	Y+63, r25	; 0x3f
}
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	08 95       	ret

0000102a <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM>:

bool CLaserControlApp::CheckLimits(uint16_t &freq, uint16_t &duration, APP_PROFILE mode)
{
    102a:	af 92       	push	r10
    102c:	bf 92       	push	r11
    102e:	cf 92       	push	r12
    1030:	df 92       	push	r13
    1032:	ef 92       	push	r14
    1034:	ff 92       	push	r15
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	ec 01       	movw	r28, r24
    1040:	8b 01       	movw	r16, r22
    1042:	7a 01       	movw	r14, r20
	//MaxDurationTable
	//TableNum
	//PowerTable
	//bool update = false;
	
	switch (mode)
    1044:	22 30       	cpi	r18, 0x02	; 2
    1046:	b1 f0       	breq	.+44     	; 0x1074 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x4a>
    1048:	18 f4       	brcc	.+6      	; 0x1050 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x26>
    104a:	21 30       	cpi	r18, 0x01	; 1
    104c:	31 f0       	breq	.+12     	; 0x105a <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x30>
    104e:	58 c0       	rjmp	.+176    	; 0x1100 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
    1050:	23 30       	cpi	r18, 0x03	; 3
    1052:	39 f1       	breq	.+78     	; 0x10a2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x78>
    1054:	24 30       	cpi	r18, 0x04	; 4
    1056:	e9 f1       	breq	.+122    	; 0x10d2 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xa8>
    1058:	53 c0       	rjmp	.+166    	; 0x1100 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
	{
		case PROFILE_DEFAULT:
		break;
		case PROFILE_SINGLE:
			if (freq != 1)
    105a:	db 01       	movw	r26, r22
    105c:	8d 91       	ld	r24, X+
    105e:	9c 91       	ld	r25, X
    1060:	11 97       	sbiw	r26, 0x01	; 1
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	09 f4       	brne	.+2      	; 0x1068 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x3e>
    1066:	4c c0       	rjmp	.+152    	; 0x1100 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 1;
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	8d 93       	st	X+, r24
    106e:	9c 93       	st	X, r25
				update = true;
    1070:	89 8b       	std	Y+17, r24	; 0x11
    1072:	46 c0       	rjmp	.+140    	; 0x1100 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			}
			break;
		case PROFILE_SLOW:
			if (freq > 3)
    1074:	fb 01       	movw	r30, r22
    1076:	80 81       	ld	r24, Z
    1078:	91 81       	ldd	r25, Z+1	; 0x01
    107a:	04 97       	sbiw	r24, 0x04	; 4
    107c:	30 f0       	brcs	.+12     	; 0x108a <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x60>
			{
				freq = 3;
    107e:	83 e0       	ldi	r24, 0x03	; 3
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	80 83       	st	Z, r24
    1084:	91 83       	std	Z+1, r25	; 0x01
				update = true;
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	89 8b       	std	Y+17, r24	; 0x11
			}
			if (freq < 1)
    108a:	d8 01       	movw	r26, r16
    108c:	8d 91       	ld	r24, X+
    108e:	9c 91       	ld	r25, X
    1090:	11 97       	sbiw	r26, 0x01	; 1
    1092:	89 2b       	or	r24, r25
    1094:	a9 f5       	brne	.+106    	; 0x1100 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 1;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	8d 93       	st	X+, r24
    109c:	9c 93       	st	X, r25
				update = true;
    109e:	89 8b       	std	Y+17, r24	; 0x11
    10a0:	2f c0       	rjmp	.+94     	; 0x1100 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			}
			break;
		case PROFILE_MEDIUM:
			if (freq > 6)
    10a2:	fb 01       	movw	r30, r22
    10a4:	80 81       	ld	r24, Z
    10a6:	91 81       	ldd	r25, Z+1	; 0x01
    10a8:	07 97       	sbiw	r24, 0x07	; 7
    10aa:	30 f0       	brcs	.+12     	; 0x10b8 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x8e>
			{
				freq = 6;
    10ac:	86 e0       	ldi	r24, 0x06	; 6
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	80 83       	st	Z, r24
    10b2:	91 83       	std	Z+1, r25	; 0x01
				update = true;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	89 8b       	std	Y+17, r24	; 0x11
			}
			if (freq < 4)
    10b8:	d8 01       	movw	r26, r16
    10ba:	8d 91       	ld	r24, X+
    10bc:	9c 91       	ld	r25, X
    10be:	11 97       	sbiw	r26, 0x01	; 1
    10c0:	04 97       	sbiw	r24, 0x04	; 4
    10c2:	f0 f4       	brcc	.+60     	; 0x1100 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 4;
    10c4:	84 e0       	ldi	r24, 0x04	; 4
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	8d 93       	st	X+, r24
    10ca:	9c 93       	st	X, r25
				update = true;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	89 8b       	std	Y+17, r24	; 0x11
    10d0:	17 c0       	rjmp	.+46     	; 0x1100 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			}
			break;
		case PROFILE_FAST:
			if (freq > 10)
    10d2:	fb 01       	movw	r30, r22
    10d4:	80 81       	ld	r24, Z
    10d6:	91 81       	ldd	r25, Z+1	; 0x01
    10d8:	0b 97       	sbiw	r24, 0x0b	; 11
    10da:	30 f0       	brcs	.+12     	; 0x10e8 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xbe>
			{
				freq = 10;
    10dc:	8a e0       	ldi	r24, 0x0A	; 10
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	80 83       	st	Z, r24
    10e2:	91 83       	std	Z+1, r25	; 0x01
				update = true;
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	89 8b       	std	Y+17, r24	; 0x11
			}
			if (freq < 7)
    10e8:	d8 01       	movw	r26, r16
    10ea:	8d 91       	ld	r24, X+
    10ec:	9c 91       	ld	r25, X
    10ee:	11 97       	sbiw	r26, 0x01	; 1
    10f0:	07 97       	sbiw	r24, 0x07	; 7
    10f2:	30 f4       	brcc	.+12     	; 0x1100 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 7;
    10f4:	87 e0       	ldi	r24, 0x07	; 7
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	8d 93       	st	X+, r24
    10fa:	9c 93       	st	X, r25
				update = true;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	89 8b       	std	Y+17, r24	; 0x11
			}
			break;
	}
	
	//freq = min(max(1, freq), 10);
	uint16_t MinD = MinDurationTable[freq];
    1100:	f8 01       	movw	r30, r16
    1102:	20 81       	ld	r18, Z
    1104:	31 81       	ldd	r19, Z+1	; 0x01
    1106:	22 0f       	add	r18, r18
    1108:	33 1f       	adc	r19, r19
    110a:	f9 01       	movw	r30, r18
    110c:	e4 51       	subi	r30, 0x14	; 20
    110e:	fe 4d       	sbci	r31, 0xDE	; 222
    1110:	c0 80       	ld	r12, Z
    1112:	d1 80       	ldd	r13, Z+1	; 0x01
	uint16_t MaxD = MaxDurationTable[freq];
    1114:	f9 01       	movw	r30, r18
    1116:	ea 52       	subi	r30, 0x2A	; 42
    1118:	fe 4d       	sbci	r31, 0xDE	; 222
    111a:	01 90       	ld	r0, Z+
    111c:	f0 81       	ld	r31, Z
    111e:	e0 2d       	mov	r30, r0
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq] - 1);
    1120:	cf 01       	movw	r24, r30
    1122:	8c 19       	sub	r24, r12
    1124:	9d 09       	sbc	r25, r13
    1126:	d9 01       	movw	r26, r18
    1128:	a0 54       	subi	r26, 0x40	; 64
    112a:	be 4d       	sbci	r27, 0xDE	; 222
    112c:	6d 91       	ld	r22, X+
    112e:	7c 91       	ld	r23, X
    1130:	61 50       	subi	r22, 0x01	; 1
    1132:	71 09       	sbc	r23, r1
    1134:	0e 94 9c 33 	call	0x6738	; 0x6738 <__udivmodhi4>
	
	if (duration < MinD)
    1138:	d7 01       	movw	r26, r14
    113a:	8d 91       	ld	r24, X+
    113c:	9c 91       	ld	r25, X
    113e:	11 97       	sbiw	r26, 0x01	; 1
    1140:	8c 15       	cp	r24, r12
    1142:	9d 05       	cpc	r25, r13
    1144:	20 f4       	brcc	.+8      	; 0x114e <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x124>
	{
		duration = MinD;
    1146:	cd 92       	st	X+, r12
    1148:	dc 92       	st	X, r13
		update = true;
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	89 8b       	std	Y+17, r24	; 0x11
	}
	
	if (duration > MaxD)
    114e:	d7 01       	movw	r26, r14
    1150:	8d 91       	ld	r24, X+
    1152:	9c 91       	ld	r25, X
    1154:	11 97       	sbiw	r26, 0x01	; 1
    1156:	e8 17       	cp	r30, r24
    1158:	f9 07       	cpc	r31, r25
    115a:	20 f4       	brcc	.+8      	; 0x1164 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x13a>
	{
		duration = MaxD;
    115c:	ed 93       	st	X+, r30
    115e:	fc 93       	st	X, r31
		update = true;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	89 8b       	std	Y+17, r24	; 0x11
	}
	
	uint16_t index = (duration - MinD) / Delta;
	index = min(max(0, index), TableNum[freq] - 1);
    1164:	d8 01       	movw	r26, r16
    1166:	ed 91       	ld	r30, X+
    1168:	fc 91       	ld	r31, X
    116a:	ee 0f       	add	r30, r30
    116c:	ff 1f       	adc	r31, r31
    116e:	e0 54       	subi	r30, 0x40	; 64
    1170:	fe 4d       	sbci	r31, 0xDE	; 222
    1172:	a0 80       	ld	r10, Z
    1174:	b1 80       	ldd	r11, Z+1	; 0x01
    1176:	b1 e0       	ldi	r27, 0x01	; 1
    1178:	ab 1a       	sub	r10, r27
    117a:	b1 08       	sbc	r11, r1
	{
		duration = MaxD;
		update = true;
	}
	
	uint16_t index = (duration - MinD) / Delta;
    117c:	f7 01       	movw	r30, r14
    117e:	80 81       	ld	r24, Z
    1180:	91 81       	ldd	r25, Z+1	; 0x01
    1182:	8c 19       	sub	r24, r12
    1184:	9d 09       	sbc	r25, r13
    1186:	0e 94 9c 33 	call	0x6738	; 0x6738 <__udivmodhi4>
	index = min(max(0, index), TableNum[freq] - 1);
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 af 10 	call	0x215e	; 0x215e <_Z3maxjj>
    1192:	b5 01       	movw	r22, r10
    1194:	0e 94 aa 10 	call	0x2154	; 0x2154 <_Z3minjj>
    1198:	ac 01       	movw	r20, r24
	
	m_wMaxEnergy = PowerTable[11 * (freq - 1) + index] / 5;
    119a:	d8 01       	movw	r26, r16
    119c:	8d 91       	ld	r24, X+
    119e:	9c 91       	ld	r25, X
    11a0:	0f 2e       	mov	r0, r31
    11a2:	fb e0       	ldi	r31, 0x0B	; 11
    11a4:	ff 2e       	mov	r15, r31
    11a6:	f0 2d       	mov	r31, r0
    11a8:	f8 9e       	mul	r15, r24
    11aa:	f0 01       	movw	r30, r0
    11ac:	f9 9e       	mul	r15, r25
    11ae:	f0 0d       	add	r31, r0
    11b0:	11 24       	eor	r1, r1
    11b2:	e4 0f       	add	r30, r20
    11b4:	f5 1f       	adc	r31, r21
    11b6:	ee 0f       	add	r30, r30
    11b8:	ff 1f       	adc	r31, r31
    11ba:	e2 53       	subi	r30, 0x32	; 50
    11bc:	ff 4d       	sbci	r31, 0xDF	; 223
    11be:	20 81       	ld	r18, Z
    11c0:	31 81       	ldd	r19, Z+1	; 0x01
    11c2:	ad ec       	ldi	r26, 0xCD	; 205
    11c4:	bc ec       	ldi	r27, 0xCC	; 204
    11c6:	0e 94 0d 34 	call	0x681a	; 0x681a <__umulhisi3>
    11ca:	96 95       	lsr	r25
    11cc:	87 95       	ror	r24
    11ce:	96 95       	lsr	r25
    11d0:	87 95       	ror	r24
    11d2:	8c 8b       	std	Y+20, r24	; 0x14
    11d4:	9d 8b       	std	Y+21, r25	; 0x15
	m_wMaxEnergy_ = EnergyTable[11 * (freq - 1) + index];
    11d6:	f8 01       	movw	r30, r16
    11d8:	80 81       	ld	r24, Z
    11da:	91 81       	ldd	r25, Z+1	; 0x01
    11dc:	f8 9e       	mul	r15, r24
    11de:	f0 01       	movw	r30, r0
    11e0:	f9 9e       	mul	r15, r25
    11e2:	f0 0d       	add	r31, r0
    11e4:	11 24       	eor	r1, r1
    11e6:	e4 0f       	add	r30, r20
    11e8:	f5 1f       	adc	r31, r21
    11ea:	ee 0f       	add	r30, r30
    11ec:	ff 1f       	adc	r31, r31
    11ee:	ee 50       	subi	r30, 0x0E	; 14
    11f0:	f0 4e       	sbci	r31, 0xE0	; 224
    11f2:	80 81       	ld	r24, Z
    11f4:	91 81       	ldd	r25, Z+1	; 0x01
    11f6:	8e 8b       	std	Y+22, r24	; 0x16
    11f8:	9f 8b       	std	Y+23, r25	; 0x17
	
	return update;
    11fa:	89 89       	ldd	r24, Y+17	; 0x11
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	ff 90       	pop	r15
    1206:	ef 90       	pop	r14
    1208:	df 90       	pop	r13
    120a:	cf 90       	pop	r12
    120c:	bf 90       	pop	r11
    120e:	af 90       	pop	r10
    1210:	08 95       	ret

00001212 <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
    1212:	8f 92       	push	r8
    1214:	9f 92       	push	r9
    1216:	af 92       	push	r10
    1218:	bf 92       	push	r11
    121a:	cf 92       	push	r12
    121c:	df 92       	push	r13
    121e:	ef 92       	push	r14
    1220:	ff 92       	push	r15
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	ec 01       	movw	r28, r24
	// GUI class initialization
	m_cpSender = sender;
    122c:	fc 01       	movw	r30, r24
    122e:	e0 58       	subi	r30, 0x80	; 128
    1230:	ff 4f       	sbci	r31, 0xFF	; 255
    1232:	60 83       	st	Z, r22
    1234:	71 83       	std	Z+1, r23	; 0x01
	
	// Set global variables
	PIC_ID = 0;
    1236:	1f 86       	std	Y+15, r1	; 0x0f
	update = false;
    1238:	19 8a       	std	Y+17, r1	; 0x11
	prepare = false;
    123a:	1a 8a       	std	Y+18, r1	; 0x12
	peltier_en = false;
    123c:	1b 8a       	std	Y+19, r1	; 0x13
	//isstarted = false;
	m_wSetMin = 0;
    123e:	6c 01       	movw	r12, r24
    1240:	28 e7       	ldi	r18, 0x78	; 120
    1242:	c2 0e       	add	r12, r18
    1244:	d1 1c       	adc	r13, r1
    1246:	f6 01       	movw	r30, r12
    1248:	10 82       	st	Z, r1
    124a:	11 82       	std	Z+1, r1	; 0x01
	m_wSetSec = 10;
    124c:	7c 01       	movw	r14, r24
    124e:	fa e7       	ldi	r31, 0x7A	; 122
    1250:	ef 0e       	add	r14, r31
    1252:	f1 1c       	adc	r15, r1
    1254:	8a e0       	ldi	r24, 0x0A	; 10
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	f7 01       	movw	r30, r14
    125a:	80 83       	st	Z, r24
    125c:	91 83       	std	Z+1, r25	; 0x01
	m_wMillSec = 0;
    125e:	34 97       	sbiw	r30, 0x04	; 4
    1260:	10 82       	st	Z, r1
    1262:	11 82       	std	Z+1, r1	; 0x01
	m_wMinutes = m_wSetMin;
    1264:	f6 01       	movw	r30, r12
    1266:	20 81       	ld	r18, Z
    1268:	31 81       	ldd	r19, Z+1	; 0x01
    126a:	36 97       	sbiw	r30, 0x06	; 6
    126c:	20 83       	st	Z, r18
    126e:	31 83       	std	Z+1, r19	; 0x01
	m_wSeconds = m_wSetSec;
    1270:	f7 01       	movw	r30, r14
    1272:	20 81       	ld	r18, Z
    1274:	31 81       	ldd	r19, Z+1	; 0x01
    1276:	36 97       	sbiw	r30, 0x06	; 6
    1278:	20 83       	st	Z, r18
    127a:	31 83       	std	Z+1, r19	; 0x01
	m_wDeadTime = 0;
    127c:	3a 96       	adiw	r30, 0x0a	; 10
    127e:	10 82       	st	Z, r1
    1280:	11 82       	std	Z+1, r1	; 0x01
	m_wMaxEnergy_ = 6; // J/cm2
    1282:	26 e0       	ldi	r18, 0x06	; 6
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	2e 8b       	std	Y+22, r18	; 0x16
    1288:	3f 8b       	std	Y+23, r19	; 0x17
	
	// Fast profile
	m_structLaserProfile[PROFILE_FAST].Frequency = 10;			// 10 Hz
    128a:	8a ab       	std	Y+50, r24	; 0x32
    128c:	9b ab       	std	Y+51, r25	; 0x33
	m_structLaserProfile[PROFILE_FAST].Duration  = 40;			// ms
    128e:	88 e2       	ldi	r24, 0x28	; 40
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	8c ab       	std	Y+52, r24	; 0x34
    1294:	9d ab       	std	Y+53, r25	; 0x35
	m_structLaserProfile[PROFILE_FAST].EnergyPercent = 14;		// W
    1296:	8e e0       	ldi	r24, 0x0E	; 14
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	8e ab       	std	Y+54, r24	; 0x36
    129c:	9f ab       	std	Y+55, r25	; 0x37
	
	// Medium profile
	m_structLaserProfile[PROFILE_MEDIUM].Frequency = 5;			// 10 Hz
    129e:	85 e0       	ldi	r24, 0x05	; 5
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	8c a7       	std	Y+44, r24	; 0x2c
    12a4:	9d a7       	std	Y+45, r25	; 0x2d
	m_structLaserProfile[PROFILE_MEDIUM].Duration  = 80;		// ms
    12a6:	80 e5       	ldi	r24, 0x50	; 80
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	8e a7       	std	Y+46, r24	; 0x2e
    12ac:	9f a7       	std	Y+47, r25	; 0x2f
	m_structLaserProfile[PROFILE_MEDIUM].EnergyPercent = 26;	// W
    12ae:	8a e1       	ldi	r24, 0x1A	; 26
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	88 ab       	std	Y+48, r24	; 0x30
    12b4:	99 ab       	std	Y+49, r25	; 0x31
	
	// Slow profile
	m_structLaserProfile[PROFILE_SLOW].Frequency = 2;			// 10 Hz
    12b6:	82 e0       	ldi	r24, 0x02	; 2
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	8e a3       	std	Y+38, r24	; 0x26
    12bc:	9f a3       	std	Y+39, r25	; 0x27
	m_structLaserProfile[PROFILE_SLOW].Duration  = 120;			// ma
    12be:	88 e7       	ldi	r24, 0x78	; 120
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	88 a7       	std	Y+40, r24	; 0x28
    12c4:	99 a7       	std	Y+41, r25	; 0x29
	m_structLaserProfile[PROFILE_SLOW].EnergyPercent = 36;		// W
    12c6:	84 e2       	ldi	r24, 0x24	; 36
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	8a a7       	std	Y+42, r24	; 0x2a
    12cc:	9b a7       	std	Y+43, r25	; 0x2b
	
	// Single profile
	m_structLaserProfile[PROFILE_SINGLE].Frequency = 1;			// 10 Hz
    12ce:	aa 24       	eor	r10, r10
    12d0:	a3 94       	inc	r10
    12d2:	b1 2c       	mov	r11, r1
    12d4:	a8 a2       	std	Y+32, r10	; 0x20
    12d6:	b9 a2       	std	Y+33, r11	; 0x21
	m_structLaserProfile[PROFILE_SINGLE].Duration  = 100;		// ms
    12d8:	84 e6       	ldi	r24, 0x64	; 100
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	8a a3       	std	Y+34, r24	; 0x22
    12de:	9b a3       	std	Y+35, r25	; 0x23
	m_structLaserProfile[PROFILE_SINGLE].EnergyPercent = 38;	// W
    12e0:	86 e2       	ldi	r24, 0x26	; 38
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	8c a3       	std	Y+36, r24	; 0x24
    12e6:	9d a3       	std	Y+37, r25	; 0x25
	
	// Current profile
	Profile = PROFILE_FAST;
    12e8:	84 e0       	ldi	r24, 0x04	; 4
    12ea:	8e 87       	std	Y+14, r24	; 0x0e
	
	// Set all laser settings
	laserCounter = eeprom_read_dword((uint32_t*)LASER_CNT_EEPROMADDR);
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	0e 94 5d 35 	call	0x6aba	; 0x6aba <eeprom_read_dword>
    12f4:	4e 01       	movw	r8, r28
    12f6:	f0 e4       	ldi	r31, 0x40	; 64
    12f8:	8f 0e       	add	r8, r31
    12fa:	91 1c       	adc	r9, r1
    12fc:	f4 01       	movw	r30, r8
    12fe:	60 83       	st	Z, r22
    1300:	71 83       	std	Z+1, r23	; 0x01
    1302:	82 83       	std	Z+2, r24	; 0x02
    1304:	93 83       	std	Z+3, r25	; 0x03
	laserDiodeData.mode = Profile;
    1306:	38 96       	adiw	r30, 0x08	; 8
    1308:	84 e0       	ldi	r24, 0x04	; 4
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	80 83       	st	Z, r24
    130e:	91 83       	std	Z+1, r25	; 0x01
	memcpy((void*)&laserDiodeData.laserprofile, (void*)&m_structLaserProfile[PROFILE_FAST], sizeof(DGUS_LASERPROFILE));
    1310:	be 01       	movw	r22, r28
    1312:	6e 5c       	subi	r22, 0xCE	; 206
    1314:	7f 4f       	sbci	r23, 0xFF	; 255
    1316:	de 01       	movw	r26, r28
    1318:	a6 5b       	subi	r26, 0xB6	; 182
    131a:	bf 4f       	sbci	r27, 0xFF	; 255
    131c:	86 e0       	ldi	r24, 0x06	; 6
    131e:	fb 01       	movw	r30, r22
    1320:	01 90       	ld	r0, Z+
    1322:	0d 92       	st	X+, r0
    1324:	8a 95       	dec	r24
    1326:	e1 f7       	brne	.-8      	; 0x1320 <_ZN16CLaserControlApp10InitializeEP9CMBSender+0x10e>
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[PROFILE_FAST]);
    1328:	8e 01       	movw	r16, r28
    132a:	00 5b       	subi	r16, 0xB0	; 176
    132c:	1f 4f       	sbci	r17, 0xFF	; 255
    132e:	ce 01       	movw	r24, r28
    1330:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
    1334:	f8 01       	movw	r30, r16
    1336:	20 83       	st	Z, r18
    1338:	31 83       	std	Z+1, r19	; 0x01
    133a:	42 83       	std	Z+2, r20	; 0x02
    133c:	53 83       	std	Z+3, r21	; 0x03
    133e:	64 83       	std	Z+4, r22	; 0x04
    1340:	75 83       	std	Z+5, r23	; 0x05
	laserDiodeData.timer.timer_minutes = m_wSetMin;
    1342:	f6 01       	movw	r30, r12
    1344:	80 81       	ld	r24, Z
    1346:	91 81       	ldd	r25, Z+1	; 0x01
    1348:	74 97       	sbiw	r30, 0x14	; 20
    134a:	80 83       	st	Z, r24
    134c:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.timer.timer_seconds = m_wSetSec;
    134e:	f7 01       	movw	r30, r14
    1350:	80 81       	ld	r24, Z
    1352:	91 81       	ldd	r25, Z+1	; 0x01
    1354:	74 97       	sbiw	r30, 0x14	; 20
    1356:	80 83       	st	Z, r24
    1358:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.PulseCounter = swap32(laserCounter);
    135a:	f4 01       	movw	r30, r8
    135c:	60 81       	ld	r22, Z
    135e:	71 81       	ldd	r23, Z+1	; 0x01
    1360:	82 81       	ldd	r24, Z+2	; 0x02
    1362:	93 81       	ldd	r25, Z+3	; 0x03
    1364:	0e 94 b8 10 	call	0x2170	; 0x2170 <_Z6swap32m>
    1368:	fe 01       	movw	r30, r28
    136a:	ea 5a       	subi	r30, 0xAA	; 170
    136c:	ff 4f       	sbci	r31, 0xFF	; 255
    136e:	60 83       	st	Z, r22
    1370:	71 83       	std	Z+1, r23	; 0x01
    1372:	82 83       	std	Z+2, r24	; 0x02
    1374:	93 83       	std	Z+3, r25	; 0x03
	laserDiodeData.melanin = 0;
    1376:	34 96       	adiw	r30, 0x04	; 4
    1378:	10 82       	st	Z, r1
    137a:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.phototype = 1;
    137c:	32 96       	adiw	r30, 0x02	; 2
    137e:	a0 82       	st	Z, r10
    1380:	b1 82       	std	Z+1, r11	; 0x01
	laserDiodeData.temperature = temperature;
    1382:	32 96       	adiw	r30, 0x02	; 2
    1384:	80 91 7c 25 	lds	r24, 0x257C	; 0x80257c <temperature>
    1388:	90 91 7d 25 	lds	r25, 0x257D	; 0x80257d <temperature+0x1>
    138c:	80 83       	st	Z, r24
    138e:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.cooling = 3;
    1390:	32 96       	adiw	r30, 0x02	; 2
    1392:	83 e0       	ldi	r24, 0x03	; 3
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	80 83       	st	Z, r24
    1398:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.flow = 0;
    139a:	32 96       	adiw	r30, 0x02	; 2
    139c:	10 82       	st	Z, r1
    139e:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.DatabasePageOffset = 0;
    13a0:	36 96       	adiw	r30, 0x06	; 6
    13a2:	10 82       	st	Z, r1
    13a4:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.DatabaseSelectionIndex = 13;
    13a6:	32 96       	adiw	r30, 0x02	; 2
    13a8:	8d e0       	ldi	r24, 0x0D	; 13
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	80 83       	st	Z, r24
    13ae:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.SessionPulseCounter = 0;
    13b0:	34 96       	adiw	r30, 0x04	; 4
    13b2:	10 82       	st	Z, r1
    13b4:	11 82       	std	Z+1, r1	; 0x01
    13b6:	12 82       	std	Z+2, r1	; 0x02
    13b8:	13 82       	std	Z+3, r1	; 0x03
	
	// Initialize Laser timer
	laserTimer.Initialize(WGM_SingleSlopePWM, CS_DIV1024);
    13ba:	47 e0       	ldi	r20, 0x07	; 7
    13bc:	63 e0       	ldi	r22, 0x03	; 3
    13be:	8c e3       	ldi	r24, 0x3C	; 60
    13c0:	96 e2       	ldi	r25, 0x26	; 38
    13c2:	0e 94 7a 31 	call	0x62f4	; 0x62f4 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	laserTimer.SetPeriod(laserTimerPeriod);		// 10 Hz
    13c6:	68 ad       	ldd	r22, Y+56	; 0x38
    13c8:	79 ad       	ldd	r23, Y+57	; 0x39
    13ca:	8c e3       	ldi	r24, 0x3C	; 60
    13cc:	96 e2       	ldi	r25, 0x26	; 38
    13ce:	0e 94 c8 31 	call	0x6390	; 0x6390 <_ZN7CTimerF9SetPeriodEj>
	laserTimer.SetCOMPA(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
    13d2:	6a ad       	ldd	r22, Y+58	; 0x3a
    13d4:	7b ad       	ldd	r23, Y+59	; 0x3b
    13d6:	8c e3       	ldi	r24, 0x3C	; 60
    13d8:	96 e2       	ldi	r25, 0x26	; 38
    13da:	0e 94 cd 31 	call	0x639a	; 0x639a <_ZN7CTimerF8SetCOMPAEj>
	laserTimer.SetOVFCallback(OnLaserTimerStopStatic, this, TC_OVFINTLVL_LO_gc);
    13de:	21 e0       	ldi	r18, 0x01	; 1
    13e0:	ae 01       	movw	r20, r28
    13e2:	6a e8       	ldi	r22, 0x8A	; 138
    13e4:	76 e0       	ldi	r23, 0x06	; 6
    13e6:	8c e3       	ldi	r24, 0x3C	; 60
    13e8:	96 e2       	ldi	r25, 0x26	; 38
    13ea:	0e 94 e1 31 	call	0x63c2	; 0x63c2 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	laserTimer.SetCOMPACallback(OnLaserTimerStatic, this, TC_CCAINTLVL_LO_gc);
    13ee:	21 e0       	ldi	r18, 0x01	; 1
    13f0:	ae 01       	movw	r20, r28
    13f2:	61 e8       	ldi	r22, 0x81	; 129
    13f4:	7a e0       	ldi	r23, 0x0A	; 10
    13f6:	8c e3       	ldi	r24, 0x3C	; 60
    13f8:	96 e2       	ldi	r25, 0x26	; 38
    13fa:	0e 94 03 32 	call	0x6406	; 0x6406 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
	laserTimer.EnableChannel(TIMER_CHANNEL_A);	// Enable Laser TTL Gate
    13fe:	60 e1       	ldi	r22, 0x10	; 16
    1400:	8c e3       	ldi	r24, 0x3C	; 60
    1402:	96 e2       	ldi	r25, 0x26	; 38
    1404:	0e 94 aa 31 	call	0x6354	; 0x6354 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
    1408:	60 e1       	ldi	r22, 0x10	; 16
    140a:	8c e3       	ldi	r24, 0x3C	; 60
    140c:	96 e2       	ldi	r25, 0x26	; 38
    140e:	0e 94 b7 31 	call	0x636e	; 0x636e <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
#ifdef LED_LASER_INDICATOR
	laserTimer.SetCOMPB(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
    1412:	6a ad       	ldd	r22, Y+58	; 0x3a
    1414:	7b ad       	ldd	r23, Y+59	; 0x3b
    1416:	8c e3       	ldi	r24, 0x3C	; 60
    1418:	96 e2       	ldi	r25, 0x26	; 38
    141a:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <_ZN7CTimerF8SetCOMPBEj>
	laserTimer.EnableChannel(TIMER_CHANNEL_B);	// Enable Laser TTL Gate
    141e:	60 e2       	ldi	r22, 0x20	; 32
    1420:	8c e3       	ldi	r24, 0x3C	; 60
    1422:	96 e2       	ldi	r25, 0x26	; 38
    1424:	0e 94 aa 31 	call	0x6354	; 0x6354 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_B);
    1428:	60 e2       	ldi	r22, 0x20	; 32
    142a:	8c e3       	ldi	r24, 0x3C	; 60
    142c:	96 e2       	ldi	r25, 0x26	; 38
    142e:	0e 94 b7 31 	call	0x636e	; 0x636e <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
#endif
}
    1432:	df 91       	pop	r29
    1434:	cf 91       	pop	r28
    1436:	1f 91       	pop	r17
    1438:	0f 91       	pop	r16
    143a:	ff 90       	pop	r15
    143c:	ef 90       	pop	r14
    143e:	df 90       	pop	r13
    1440:	cf 90       	pop	r12
    1442:	bf 90       	pop	r11
    1444:	af 90       	pop	r10
    1446:	9f 90       	pop	r9
    1448:	8f 90       	pop	r8
    144a:	08 95       	ret

0000144c <_ZN16CLaserControlApp5StartEv>:

void CLaserControlApp::Start()
{	
    144c:	ef 92       	push	r14
    144e:	ff 92       	push	r15
    1450:	0f 93       	push	r16
    1452:	1f 93       	push	r17
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	1f 92       	push	r1
    145a:	1f 92       	push	r1
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	7c 01       	movw	r14, r24
	// Startup DGUS initialization
	uint16_t pic_id = swap(PICID_MAINMENU);
    1462:	83 e0       	ldi	r24, 0x03	; 3
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	0e 94 b4 10 	call	0x2168	; 0x2168 <_Z4swapj>
    146a:	89 83       	std	Y+1, r24	; 0x01
    146c:	9a 83       	std	Y+2, r25	; 0x02
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    146e:	87 01       	movw	r16, r14
    1470:	00 58       	subi	r16, 0x80	; 128
    1472:	1f 4f       	sbci	r17, 0xFF	; 255
    1474:	22 e0       	ldi	r18, 0x02	; 2
    1476:	ae 01       	movw	r20, r28
    1478:	4f 5f       	subi	r20, 0xFF	; 255
    147a:	5f 4f       	sbci	r21, 0xFF	; 255
    147c:	63 e0       	ldi	r22, 0x03	; 3
    147e:	f8 01       	movw	r30, r16
    1480:	80 81       	ld	r24, Z
    1482:	91 81       	ldd	r25, Z+1	; 0x01
    1484:	0e 94 bd 2a 	call	0x557a	; 0x557a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
    1488:	f8 01       	movw	r30, r16
    148a:	80 81       	ld	r24, Z
    148c:	91 81       	ldd	r25, Z+1	; 0x01
    148e:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	// Setup variables
	m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
    1492:	a7 01       	movw	r20, r14
    1494:	48 5b       	subi	r20, 0xB8	; 184
    1496:	5f 4f       	sbci	r21, 0xFF	; 255
    1498:	2a e2       	ldi	r18, 0x2A	; 42
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	61 e0       	ldi	r22, 0x01	; 1
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	f8 01       	movw	r30, r16
    14a2:	80 81       	ld	r24, Z
    14a4:	91 81       	ldd	r25, Z+1	; 0x01
    14a6:	0e 94 cc 2a 	call	0x5598	; 0x5598 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
    14aa:	f8 01       	movw	r30, r16
    14ac:	80 81       	ld	r24, Z
    14ae:	91 81       	ldd	r25, Z+1	; 0x01
    14b0:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	timer.Start(25000);
    14b4:	68 ea       	ldi	r22, 0xA8	; 168
    14b6:	71 e6       	ldi	r23, 0x61	; 97
    14b8:	82 e4       	ldi	r24, 0x42	; 66
    14ba:	96 e2       	ldi	r25, 0x26	; 38
    14bc:	0e 94 99 2e 	call	0x5d32	; 0x5d32 <_ZN7CTimerC5StartEj>
	
	state = APP_WORKSETUP;
    14c0:	84 e0       	ldi	r24, 0x04	; 4
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	f7 01       	movw	r30, r14
    14c6:	84 87       	std	Z+12, r24	; 0x0c
    14c8:	95 87       	std	Z+13, r25	; 0x0d
}
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	1f 91       	pop	r17
    14d4:	0f 91       	pop	r16
    14d6:	ff 90       	pop	r15
    14d8:	ef 90       	pop	r14
    14da:	08 95       	ret

000014dc <_ZN16CLaserControlApp16OnLaserTimerStopEv>:
	player.SoundStop();
}

void CLaserControlApp::OnLaserTimerStop()
{	
	if (Profile == PROFILE_SINGLE)
    14dc:	fc 01       	movw	r30, r24
    14de:	86 85       	ldd	r24, Z+14	; 0x0e
    14e0:	81 30       	cpi	r24, 0x01	; 1
    14e2:	71 f4       	brne	.+28     	; 0x1500 <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x24>
	{
		laserTimer.Stop();
    14e4:	8c e3       	ldi	r24, 0x3C	; 60
    14e6:	96 e2       	ldi	r25, 0x26	; 38
    14e8:	0e 94 a2 31 	call	0x6344	; 0x6344 <_ZN7CTimerF4StopEv>
		laserTimer.ChannelSet(TIMER_CHANNEL_A);
    14ec:	60 e1       	ldi	r22, 0x10	; 16
    14ee:	8c e3       	ldi	r24, 0x3C	; 60
    14f0:	96 e2       	ldi	r25, 0x26	; 38
    14f2:	0e 94 b7 31 	call	0x636e	; 0x636e <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
		laserTimer.ChannelSet(TIMER_CHANNEL_B);
    14f6:	60 e2       	ldi	r22, 0x20	; 32
    14f8:	8c e3       	ldi	r24, 0x3C	; 60
    14fa:	96 e2       	ldi	r25, 0x26	; 38
    14fc:	0e 94 b7 31 	call	0x636e	; 0x636e <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
    1500:	08 95       	ret

00001502 <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>:
}

void CLaserControlApp::OnLaserTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnLaserTimerStop();
    1502:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <_ZN16CLaserControlApp16OnLaserTimerStopEv>
    1506:	08 95       	ret

00001508 <_ZN16CLaserControlApp3RunEv>:
	uint16_t data = ((uint16_t)((laserPower * 1024) / MAX_LASER_POWER)) << 2;  // (laserPower * 640) / 63)
	dacSPI.Send((uint8_t*)&data, sizeof(data));
}

void CLaserControlApp::Run()
{	
    1508:	af 92       	push	r10
    150a:	bf 92       	push	r11
    150c:	cf 92       	push	r12
    150e:	df 92       	push	r13
    1510:	ef 92       	push	r14
    1512:	ff 92       	push	r15
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	00 d0       	rcall	.+0      	; 0x151e <_ZN16CLaserControlApp3RunEv+0x16>
    151e:	1f 92       	push	r1
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	7c 01       	movw	r14, r24
	// Get PIC ID
	m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
    1526:	8c 01       	movw	r16, r24
    1528:	00 58       	subi	r16, 0x80	; 128
    152a:	1f 4f       	sbci	r17, 0xFF	; 255
    152c:	42 e0       	ldi	r20, 0x02	; 2
    152e:	63 e0       	ldi	r22, 0x03	; 3
    1530:	f8 01       	movw	r30, r16
    1532:	80 81       	ld	r24, Z
    1534:	91 81       	ldd	r25, Z+1	; 0x01
    1536:	0e 94 0b 2b 	call	0x5616	; 0x5616 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
	m_cpSender->WaitMODBUSTransmitter();
    153a:	f8 01       	movw	r30, r16
    153c:	80 81       	ld	r24, Z
    153e:	91 81       	ldd	r25, Z+1	; 0x01
    1540:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WaitMODBUSListener();
    1544:	f8 01       	movw	r30, r16
    1546:	80 81       	ld	r24, Z
    1548:	91 81       	ldd	r25, Z+1	; 0x01
    154a:	0e 94 97 2a 	call	0x552e	; 0x552e <_ZN9CMBSender18WaitMODBUSListenerEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    154e:	ff ef       	ldi	r31, 0xFF	; 255
    1550:	29 ef       	ldi	r18, 0xF9	; 249
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	f1 50       	subi	r31, 0x01	; 1
    1556:	20 40       	sbci	r18, 0x00	; 0
    1558:	80 40       	sbci	r24, 0x00	; 0
    155a:	e1 f7       	brne	.-8      	; 0x1554 <_ZN16CLaserControlApp3RunEv+0x4c>
    155c:	00 c0       	rjmp	.+0      	; 0x155e <_ZN16CLaserControlApp3RunEv+0x56>
    155e:	00 00       	nop
	
	_delay_ms(10);
	
	// show sensors
	if ((state & 0xFFF) != 0)
    1560:	f7 01       	movw	r30, r14
    1562:	84 85       	ldd	r24, Z+12	; 0x0c
    1564:	95 85       	ldd	r25, Z+13	; 0x0d
    1566:	9f 70       	andi	r25, 0x0F	; 15
    1568:	89 2b       	or	r24, r25
    156a:	09 f4       	brne	.+2      	; 0x156e <_ZN16CLaserControlApp3RunEv+0x66>
    156c:	41 c0       	rjmp	.+130    	; 0x15f0 <_ZN16CLaserControlApp3RunEv+0xe8>
	{
		SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
    156e:	22 e0       	ldi	r18, 0x02	; 2
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	4c e7       	ldi	r20, 0x7C	; 124
    1574:	55 e2       	ldi	r21, 0x25	; 37
    1576:	6c e0       	ldi	r22, 0x0C	; 12
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	c7 01       	movw	r24, r14
    157c:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN16CLaserControlApp11SetVariableEjPjj>
		if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
    1580:	f7 01       	movw	r30, r14
    1582:	e4 58       	subi	r30, 0x84	; 132
    1584:	ff 4f       	sbci	r31, 0xFF	; 255
    1586:	80 81       	ld	r24, Z
    1588:	91 81       	ldd	r25, Z+1	; 0x01
    158a:	44 97       	sbiw	r24, 0x14	; 20
    158c:	28 f4       	brcc	.+10     	; 0x1598 <_ZN16CLaserControlApp3RunEv+0x90>
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	70 97       	sbiw	r30, 0x10	; 16
    1594:	80 83       	st	Z, r24
    1596:	91 83       	std	Z+1, r25	; 0x01
		if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    1598:	f7 01       	movw	r30, r14
    159a:	e4 58       	subi	r30, 0x84	; 132
    159c:	ff 4f       	sbci	r31, 0xFF	; 255
    159e:	80 81       	ld	r24, Z
    15a0:	91 81       	ldd	r25, Z+1	; 0x01
    15a2:	44 97       	sbiw	r24, 0x14	; 20
    15a4:	28 f0       	brcs	.+10     	; 0x15b0 <_ZN16CLaserControlApp3RunEv+0xa8>
    15a6:	80 81       	ld	r24, Z
    15a8:	91 81       	ldd	r25, Z+1	; 0x01
    15aa:	89 97       	sbiw	r24, 0x29	; 41
    15ac:	08 f4       	brcc	.+2      	; 0x15b0 <_ZN16CLaserControlApp3RunEv+0xa8>
    15ae:	e2 c3       	rjmp	.+1988   	; 0x1d74 <_ZN16CLaserControlApp3RunEv+0x86c>
		if (m_wFlow > 40) laserDiodeData.coolIcon = 3;
    15b0:	f7 01       	movw	r30, r14
    15b2:	e4 58       	subi	r30, 0x84	; 132
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	80 81       	ld	r24, Z
    15b8:	91 81       	ldd	r25, Z+1	; 0x01
    15ba:	89 97       	sbiw	r24, 0x29	; 41
    15bc:	28 f0       	brcs	.+10     	; 0x15c8 <_ZN16CLaserControlApp3RunEv+0xc0>
    15be:	83 e0       	ldi	r24, 0x03	; 3
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	70 97       	sbiw	r30, 0x10	; 16
    15c4:	80 83       	st	Z, r24
    15c6:	91 83       	std	Z+1, r25	; 0x01
		SetVariable(VARIABLE_ADDR_COOLICON, (uint16_t*)&laserDiodeData.coolIcon, 2);
    15c8:	22 e0       	ldi	r18, 0x02	; 2
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	a7 01       	movw	r20, r14
    15ce:	44 59       	subi	r20, 0x94	; 148
    15d0:	5f 4f       	sbci	r21, 0xFF	; 255
    15d2:	63 e1       	ldi	r22, 0x13	; 19
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	c7 01       	movw	r24, r14
    15d8:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN16CLaserControlApp11SetVariableEjPjj>
		SetVariable(VARIABLE_ADDR_FLOW, (uint16_t*)&m_wFlow, 2);
    15dc:	22 e0       	ldi	r18, 0x02	; 2
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	a7 01       	movw	r20, r14
    15e2:	44 58       	subi	r20, 0x84	; 132
    15e4:	5f 4f       	sbci	r21, 0xFF	; 255
    15e6:	6e e0       	ldi	r22, 0x0E	; 14
    15e8:	70 e0       	ldi	r23, 0x00	; 0
    15ea:	c7 01       	movw	r24, r14
    15ec:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN16CLaserControlApp11SetVariableEjPjj>
	}
	
	// temperature check
	if ((state & (APP_WORKPOWERON | APP_WORKLIGHT | APP_WORKREADY)) != 0)
    15f0:	f7 01       	movw	r30, r14
    15f2:	84 85       	ldd	r24, Z+12	; 0x0c
    15f4:	95 85       	ldd	r25, Z+13	; 0x0d
    15f6:	88 73       	andi	r24, 0x38	; 56
    15f8:	99 27       	eor	r25, r25
    15fa:	89 2b       	or	r24, r25
    15fc:	21 f1       	breq	.+72     	; 0x1646 <_ZN16CLaserControlApp3RunEv+0x13e>
	{
		if (temperature > 300)
    15fe:	80 91 7c 25 	lds	r24, 0x257C	; 0x80257c <temperature>
    1602:	90 91 7d 25 	lds	r25, 0x257D	; 0x80257d <temperature+0x1>
    1606:	8d 32       	cpi	r24, 0x2D	; 45
    1608:	91 40       	sbci	r25, 0x01	; 1
    160a:	ec f0       	brlt	.+58     	; 0x1646 <_ZN16CLaserControlApp3RunEv+0x13e>
		{
			SetPictureId(PICID_WORK_ERRORHEATING);
    160c:	69 e2       	ldi	r22, 0x29	; 41
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	c7 01       	movw	r24, r14
    1612:	0e 94 2a 06 	call	0xc54	; 0xc54 <_ZN16CLaserControlApp12SetPictureIdEj>
			PIC_ID_last = PIC_ID;
    1616:	f7 01       	movw	r30, r14
    1618:	87 85       	ldd	r24, Z+15	; 0x0f
    161a:	80 8b       	std	Z+16, r24	; 0x10
			
			//if (isstarted)
			{
				laserTimer.Stop();
    161c:	8c e3       	ldi	r24, 0x3C	; 60
    161e:	96 e2       	ldi	r25, 0x26	; 38
    1620:	0e 94 a2 31 	call	0x6344	; 0x6344 <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
    1624:	60 e1       	ldi	r22, 0x10	; 16
    1626:	8c e3       	ldi	r24, 0x3C	; 60
    1628:	96 e2       	ldi	r25, 0x26	; 38
    162a:	0e 94 b7 31 	call	0x636e	; 0x636e <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
    162e:	60 e2       	ldi	r22, 0x20	; 32
    1630:	8c e3       	ldi	r24, 0x3C	; 60
    1632:	96 e2       	ldi	r25, 0x26	; 38
    1634:	0e 94 b7 31 	call	0x636e	; 0x636e <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserBoard.LaserPowerOff();
    1638:	85 e0       	ldi	r24, 0x05	; 5
    163a:	96 e2       	ldi	r25, 0x26	; 38
    163c:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <_ZN11CLaserBoard13LaserPowerOffEv>
				PIC_ID_last = PICID_WORK_PREPARE;
    1640:	87 e0       	ldi	r24, 0x07	; 7
    1642:	f7 01       	movw	r30, r14
    1644:	80 8b       	std	Z+16, r24	; 0x10
	}
	
	/*if ((state & (APP_WORKPOWERON | APP_WORKLIGHT)) == 0)
		isstarted = false;*/
	
	switch (state)
    1646:	f7 01       	movw	r30, r14
    1648:	84 85       	ldd	r24, Z+12	; 0x0c
    164a:	95 85       	ldd	r25, Z+13	; 0x0d
    164c:	81 15       	cp	r24, r1
    164e:	f2 e0       	ldi	r31, 0x02	; 2
    1650:	9f 07       	cpc	r25, r31
    1652:	09 f4       	brne	.+2      	; 0x1656 <_ZN16CLaserControlApp3RunEv+0x14e>
    1654:	b0 c2       	rjmp	.+1376   	; 0x1bb6 <_ZN16CLaserControlApp3RunEv+0x6ae>
    1656:	1c f5       	brge	.+70     	; 0x169e <_ZN16CLaserControlApp3RunEv+0x196>
    1658:	88 30       	cpi	r24, 0x08	; 8
    165a:	91 05       	cpc	r25, r1
    165c:	09 f4       	brne	.+2      	; 0x1660 <_ZN16CLaserControlApp3RunEv+0x158>
    165e:	cd c1       	rjmp	.+922    	; 0x19fa <_ZN16CLaserControlApp3RunEv+0x4f2>
    1660:	64 f4       	brge	.+24     	; 0x167a <_ZN16CLaserControlApp3RunEv+0x172>
    1662:	82 30       	cpi	r24, 0x02	; 2
    1664:	91 05       	cpc	r25, r1
    1666:	09 f4       	brne	.+2      	; 0x166a <_ZN16CLaserControlApp3RunEv+0x162>
    1668:	5e c1       	rjmp	.+700    	; 0x1926 <_ZN16CLaserControlApp3RunEv+0x41e>
    166a:	84 30       	cpi	r24, 0x04	; 4
    166c:	91 05       	cpc	r25, r1
    166e:	09 f4       	brne	.+2      	; 0x1672 <_ZN16CLaserControlApp3RunEv+0x16a>
    1670:	51 c0       	rjmp	.+162    	; 0x1714 <_ZN16CLaserControlApp3RunEv+0x20c>
    1672:	89 2b       	or	r24, r25
    1674:	09 f0       	breq	.+2      	; 0x1678 <_ZN16CLaserControlApp3RunEv+0x170>
    1676:	69 c3       	rjmp	.+1746   	; 0x1d4a <_ZN16CLaserControlApp3RunEv+0x842>
    1678:	42 c0       	rjmp	.+132    	; 0x16fe <_ZN16CLaserControlApp3RunEv+0x1f6>
    167a:	80 32       	cpi	r24, 0x20	; 32
    167c:	91 05       	cpc	r25, r1
    167e:	09 f4       	brne	.+2      	; 0x1682 <_ZN16CLaserControlApp3RunEv+0x17a>
    1680:	cd c1       	rjmp	.+922    	; 0x1a1c <_ZN16CLaserControlApp3RunEv+0x514>
    1682:	24 f4       	brge	.+8      	; 0x168c <_ZN16CLaserControlApp3RunEv+0x184>
    1684:	40 97       	sbiw	r24, 0x10	; 16
    1686:	09 f4       	brne	.+2      	; 0x168a <_ZN16CLaserControlApp3RunEv+0x182>
    1688:	c9 c1       	rjmp	.+914    	; 0x1a1c <_ZN16CLaserControlApp3RunEv+0x514>
    168a:	5f c3       	rjmp	.+1726   	; 0x1d4a <_ZN16CLaserControlApp3RunEv+0x842>
    168c:	80 34       	cpi	r24, 0x40	; 64
    168e:	91 05       	cpc	r25, r1
    1690:	09 f4       	brne	.+2      	; 0x1694 <_ZN16CLaserControlApp3RunEv+0x18c>
    1692:	7e c1       	rjmp	.+764    	; 0x1990 <_ZN16CLaserControlApp3RunEv+0x488>
    1694:	81 15       	cp	r24, r1
    1696:	91 40       	sbci	r25, 0x01	; 1
    1698:	09 f4       	brne	.+2      	; 0x169c <_ZN16CLaserControlApp3RunEv+0x194>
    169a:	4f c2       	rjmp	.+1182   	; 0x1b3a <_ZN16CLaserControlApp3RunEv+0x632>
    169c:	56 c3       	rjmp	.+1708   	; 0x1d4a <_ZN16CLaserControlApp3RunEv+0x842>
    169e:	81 15       	cp	r24, r1
    16a0:	f7 e0       	ldi	r31, 0x07	; 7
    16a2:	9f 07       	cpc	r25, r31
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <_ZN16CLaserControlApp3RunEv+0x1a0>
    16a6:	23 c2       	rjmp	.+1094   	; 0x1aee <_ZN16CLaserControlApp3RunEv+0x5e6>
    16a8:	ac f4       	brge	.+42     	; 0x16d4 <_ZN16CLaserControlApp3RunEv+0x1cc>
    16aa:	81 15       	cp	r24, r1
    16ac:	e4 e0       	ldi	r30, 0x04	; 4
    16ae:	9e 07       	cpc	r25, r30
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <_ZN16CLaserControlApp3RunEv+0x1ac>
    16b2:	be c2       	rjmp	.+1404   	; 0x1c30 <_ZN16CLaserControlApp3RunEv+0x728>
    16b4:	2c f4       	brge	.+10     	; 0x16c0 <_ZN16CLaserControlApp3RunEv+0x1b8>
    16b6:	81 15       	cp	r24, r1
    16b8:	93 40       	sbci	r25, 0x03	; 3
    16ba:	09 f4       	brne	.+2      	; 0x16be <_ZN16CLaserControlApp3RunEv+0x1b6>
    16bc:	85 c2       	rjmp	.+1290   	; 0x1bc8 <_ZN16CLaserControlApp3RunEv+0x6c0>
    16be:	45 c3       	rjmp	.+1674   	; 0x1d4a <_ZN16CLaserControlApp3RunEv+0x842>
    16c0:	81 15       	cp	r24, r1
    16c2:	e5 e0       	ldi	r30, 0x05	; 5
    16c4:	9e 07       	cpc	r25, r30
    16c6:	09 f4       	brne	.+2      	; 0x16ca <_ZN16CLaserControlApp3RunEv+0x1c2>
    16c8:	29 c2       	rjmp	.+1106   	; 0x1b1c <_ZN16CLaserControlApp3RunEv+0x614>
    16ca:	81 15       	cp	r24, r1
    16cc:	96 40       	sbci	r25, 0x06	; 6
    16ce:	09 f4       	brne	.+2      	; 0x16d2 <_ZN16CLaserControlApp3RunEv+0x1ca>
    16d0:	fc c1       	rjmp	.+1016   	; 0x1aca <_ZN16CLaserControlApp3RunEv+0x5c2>
    16d2:	3b c3       	rjmp	.+1654   	; 0x1d4a <_ZN16CLaserControlApp3RunEv+0x842>
    16d4:	81 15       	cp	r24, r1
    16d6:	20 e2       	ldi	r18, 0x20	; 32
    16d8:	92 07       	cpc	r25, r18
    16da:	09 f4       	brne	.+2      	; 0x16de <_ZN16CLaserControlApp3RunEv+0x1d6>
    16dc:	e7 c2       	rjmp	.+1486   	; 0x1cac <_ZN16CLaserControlApp3RunEv+0x7a4>
    16de:	2c f4       	brge	.+10     	; 0x16ea <_ZN16CLaserControlApp3RunEv+0x1e2>
    16e0:	81 15       	cp	r24, r1
    16e2:	90 41       	sbci	r25, 0x10	; 16
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <_ZN16CLaserControlApp3RunEv+0x1e0>
    16e6:	aa c2       	rjmp	.+1364   	; 0x1c3c <_ZN16CLaserControlApp3RunEv+0x734>
    16e8:	30 c3       	rjmp	.+1632   	; 0x1d4a <_ZN16CLaserControlApp3RunEv+0x842>
    16ea:	81 15       	cp	r24, r1
    16ec:	20 e3       	ldi	r18, 0x30	; 48
    16ee:	92 07       	cpc	r25, r18
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <_ZN16CLaserControlApp3RunEv+0x1ec>
    16f2:	09 c3       	rjmp	.+1554   	; 0x1d06 <_ZN16CLaserControlApp3RunEv+0x7fe>
    16f4:	81 15       	cp	r24, r1
    16f6:	90 44       	sbci	r25, 0x40	; 64
    16f8:	09 f4       	brne	.+2      	; 0x16fc <_ZN16CLaserControlApp3RunEv+0x1f4>
    16fa:	22 c3       	rjmp	.+1604   	; 0x1d40 <_ZN16CLaserControlApp3RunEv+0x838>
    16fc:	26 c3       	rjmp	.+1612   	; 0x1d4a <_ZN16CLaserControlApp3RunEv+0x842>
	{		
		// DGUS State
		case APP_LOGO:
			{
				SetPictureId(PICID_MAINMENU);
    16fe:	63 e0       	ldi	r22, 0x03	; 3
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	c7 01       	movw	r24, r14
    1704:	0e 94 2a 06 	call	0xc54	; 0xc54 <_ZN16CLaserControlApp12SetPictureIdEj>
				state = APP_WORKIDLE;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	f7 01       	movw	r30, r14
    170e:	84 87       	std	Z+12, r24	; 0x0c
    1710:	95 87       	std	Z+13, r25	; 0x0d
			}
		break;
    1712:	1f c3       	rjmp	.+1598   	; 0x1d52 <_ZN16CLaserControlApp3RunEv+0x84a>
		case APP_WORKSETUP:
			{
				uint16_t melanin = laserDiodeData.melanin;
    1714:	f7 01       	movw	r30, r14
    1716:	e6 5a       	subi	r30, 0xA6	; 166
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	a0 80       	ld	r10, Z
    171c:	b1 80       	ldd	r11, Z+1	; 0x01
				uint16_t phototype = laserDiodeData.phototype;
    171e:	87 01       	movw	r16, r14
    1720:	04 5a       	subi	r16, 0xA4	; 164
    1722:	1f 4f       	sbci	r17, 0xFF	; 255
    1724:	f8 01       	movw	r30, r16
    1726:	c0 80       	ld	r12, Z
    1728:	d1 80       	ldd	r13, Z+1	; 0x01
				
				GetVariable(STRUCT_ADDR_LASERPROFILE_DATA, sizeof(DGUS_LASERPROFILE));
    172a:	46 e0       	ldi	r20, 0x06	; 6
    172c:	50 e0       	ldi	r21, 0x00	; 0
    172e:	62 e0       	ldi	r22, 0x02	; 2
    1730:	70 e0       	ldi	r23, 0x00	; 0
    1732:	c7 01       	movw	r24, r14
    1734:	0e 94 06 06 	call	0xc0c	; 0xc0c <_ZN16CLaserControlApp11GetVariableEjj>
    1738:	ff ef       	ldi	r31, 0xFF	; 255
    173a:	29 ef       	ldi	r18, 0xF9	; 249
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	f1 50       	subi	r31, 0x01	; 1
    1740:	20 40       	sbci	r18, 0x00	; 0
    1742:	80 40       	sbci	r24, 0x00	; 0
    1744:	e1 f7       	brne	.-8      	; 0x173e <_ZN16CLaserControlApp3RunEv+0x236>
    1746:	00 c0       	rjmp	.+0      	; 0x1748 <_ZN16CLaserControlApp3RunEv+0x240>
    1748:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_COOLING, 2);
    174a:	42 e0       	ldi	r20, 0x02	; 2
    174c:	50 e0       	ldi	r21, 0x00	; 0
    174e:	6d e0       	ldi	r22, 0x0D	; 13
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	c7 01       	movw	r24, r14
    1754:	0e 94 06 06 	call	0xc0c	; 0xc0c <_ZN16CLaserControlApp11GetVariableEjj>
    1758:	9f ef       	ldi	r25, 0xFF	; 255
    175a:	e9 ef       	ldi	r30, 0xF9	; 249
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	91 50       	subi	r25, 0x01	; 1
    1760:	e0 40       	sbci	r30, 0x00	; 0
    1762:	f0 40       	sbci	r31, 0x00	; 0
    1764:	e1 f7       	brne	.-8      	; 0x175e <_ZN16CLaserControlApp3RunEv+0x256>
    1766:	00 c0       	rjmp	.+0      	; 0x1768 <_ZN16CLaserControlApp3RunEv+0x260>
    1768:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_MODE, 2);
    176a:	42 e0       	ldi	r20, 0x02	; 2
    176c:	50 e0       	ldi	r21, 0x00	; 0
    176e:	61 e0       	ldi	r22, 0x01	; 1
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	c7 01       	movw	r24, r14
    1774:	0e 94 06 06 	call	0xc0c	; 0xc0c <_ZN16CLaserControlApp11GetVariableEjj>
    1778:	2f ef       	ldi	r18, 0xFF	; 255
    177a:	89 ef       	ldi	r24, 0xF9	; 249
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	21 50       	subi	r18, 0x01	; 1
    1780:	80 40       	sbci	r24, 0x00	; 0
    1782:	90 40       	sbci	r25, 0x00	; 0
    1784:	e1 f7       	brne	.-8      	; 0x177e <_ZN16CLaserControlApp3RunEv+0x276>
    1786:	00 c0       	rjmp	.+0      	; 0x1788 <_ZN16CLaserControlApp3RunEv+0x280>
    1788:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_MELANIN, 2);
    178a:	42 e0       	ldi	r20, 0x02	; 2
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	6a e0       	ldi	r22, 0x0A	; 10
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	c7 01       	movw	r24, r14
    1794:	0e 94 06 06 	call	0xc0c	; 0xc0c <_ZN16CLaserControlApp11GetVariableEjj>
    1798:	ef ef       	ldi	r30, 0xFF	; 255
    179a:	f9 ef       	ldi	r31, 0xF9	; 249
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	e1 50       	subi	r30, 0x01	; 1
    17a0:	f0 40       	sbci	r31, 0x00	; 0
    17a2:	20 40       	sbci	r18, 0x00	; 0
    17a4:	e1 f7       	brne	.-8      	; 0x179e <_ZN16CLaserControlApp3RunEv+0x296>
    17a6:	00 c0       	rjmp	.+0      	; 0x17a8 <_ZN16CLaserControlApp3RunEv+0x2a0>
    17a8:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_PHOTOTYPE, 2);
    17aa:	42 e0       	ldi	r20, 0x02	; 2
    17ac:	50 e0       	ldi	r21, 0x00	; 0
    17ae:	6b e0       	ldi	r22, 0x0B	; 11
    17b0:	70 e0       	ldi	r23, 0x00	; 0
    17b2:	c7 01       	movw	r24, r14
    17b4:	0e 94 06 06 	call	0xc0c	; 0xc0c <_ZN16CLaserControlApp11GetVariableEjj>
    17b8:	8f ef       	ldi	r24, 0xFF	; 255
    17ba:	99 ef       	ldi	r25, 0xF9	; 249
    17bc:	e0 e0       	ldi	r30, 0x00	; 0
    17be:	81 50       	subi	r24, 0x01	; 1
    17c0:	90 40       	sbci	r25, 0x00	; 0
    17c2:	e0 40       	sbci	r30, 0x00	; 0
    17c4:	e1 f7       	brne	.-8      	; 0x17be <_ZN16CLaserControlApp3RunEv+0x2b6>
    17c6:	00 c0       	rjmp	.+0      	; 0x17c8 <_ZN16CLaserControlApp3RunEv+0x2c0>
    17c8:	00 00       	nop
				_delay_ms(10);
				
				laserDiodeData.PulseCounter = swap32(laserCounter);
    17ca:	f7 01       	movw	r30, r14
    17cc:	e0 5c       	subi	r30, 0xC0	; 192
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	60 81       	ld	r22, Z
    17d2:	71 81       	ldd	r23, Z+1	; 0x01
    17d4:	82 81       	ldd	r24, Z+2	; 0x02
    17d6:	93 81       	ldd	r25, Z+3	; 0x03
    17d8:	0e 94 b8 10 	call	0x2170	; 0x2170 <_Z6swap32m>
    17dc:	f7 01       	movw	r30, r14
    17de:	ea 5a       	subi	r30, 0xAA	; 170
    17e0:	ff 4f       	sbci	r31, 0xFF	; 255
    17e2:	60 83       	st	Z, r22
    17e4:	71 83       	std	Z+1, r23	; 0x01
    17e6:	82 83       	std	Z+2, r24	; 0x02
    17e8:	93 83       	std	Z+3, r25	; 0x03
				laserDiodeData.temperature = temperature;
    17ea:	80 91 7c 25 	lds	r24, 0x257C	; 0x80257c <temperature>
    17ee:	90 91 7d 25 	lds	r25, 0x257D	; 0x80257d <temperature+0x1>
    17f2:	38 96       	adiw	r30, 0x08	; 8
    17f4:	80 83       	st	Z, r24
    17f6:	91 83       	std	Z+1, r25	; 0x01
				laserDiodeData.flow = m_wFlow;
    17f8:	7e 96       	adiw	r30, 0x1e	; 30
    17fa:	80 81       	ld	r24, Z
    17fc:	91 81       	ldd	r25, Z+1	; 0x01
    17fe:	7a 97       	sbiw	r30, 0x1a	; 26
    1800:	80 83       	st	Z, r24
    1802:	91 83       	std	Z+1, r25	; 0x01
				
				if (phototype != laserDiodeData.phototype)
    1804:	f8 01       	movw	r30, r16
    1806:	60 81       	ld	r22, Z
    1808:	71 81       	ldd	r23, Z+1	; 0x01
    180a:	6c 15       	cp	r22, r12
    180c:	7d 05       	cpc	r23, r13
    180e:	39 f0       	breq	.+14     	; 0x181e <_ZN16CLaserControlApp3RunEv+0x316>
				{
					PhototypePreset(laserDiodeData.phototype);
    1810:	c7 01       	movw	r24, r14
    1812:	0e 94 5e 07 	call	0xebc	; 0xebc <_ZN16CLaserControlApp15PhototypePresetEj>
					update = true;
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	f7 01       	movw	r30, r14
    181a:	81 8b       	std	Z+17, r24	; 0x11
    181c:	5e c0       	rjmp	.+188    	; 0x18da <_ZN16CLaserControlApp3RunEv+0x3d2>
				}
				else
				if (melanin != laserDiodeData.melanin)
    181e:	f7 01       	movw	r30, r14
    1820:	e6 5a       	subi	r30, 0xA6	; 166
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	60 81       	ld	r22, Z
    1826:	71 81       	ldd	r23, Z+1	; 0x01
    1828:	6a 15       	cp	r22, r10
    182a:	7b 05       	cpc	r23, r11
    182c:	39 f0       	breq	.+14     	; 0x183c <_ZN16CLaserControlApp3RunEv+0x334>
				{
					MelaninPreset(laserDiodeData.melanin);
    182e:	c7 01       	movw	r24, r14
    1830:	0e 94 a8 06 	call	0xd50	; 0xd50 <_ZN16CLaserControlApp13MelaninPresetEj>
					update = true;
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	f7 01       	movw	r30, r14
    1838:	81 8b       	std	Z+17, r24	; 0x11
    183a:	4f c0       	rjmp	.+158    	; 0x18da <_ZN16CLaserControlApp3RunEv+0x3d2>
				}
				else
				{
					APP_PROFILE prof = (APP_PROFILE)laserDiodeData.mode;
    183c:	f7 01       	movw	r30, r14
    183e:	e8 5b       	subi	r30, 0xB8	; 184
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	80 81       	ld	r24, Z
					if (Profile != prof)	{update = true; Profile = prof;}
    1844:	f7 01       	movw	r30, r14
    1846:	96 85       	ldd	r25, Z+14	; 0x0e
    1848:	98 17       	cp	r25, r24
    184a:	19 f0       	breq	.+6      	; 0x1852 <_ZN16CLaserControlApp3RunEv+0x34a>
    184c:	91 e0       	ldi	r25, 0x01	; 1
    184e:	91 8b       	std	Z+17, r25	; 0x11
    1850:	86 87       	std	Z+14, r24	; 0x0e
					
					memcpy((void*)&laserDiodeData.laserprofile, (void*)&m_structLaserProfile[Profile], sizeof(laserDiodeData.laserprofile));
    1852:	f7 01       	movw	r30, r14
    1854:	86 85       	ldd	r24, Z+14	; 0x0e
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	bc 01       	movw	r22, r24
    185a:	66 0f       	add	r22, r22
    185c:	77 1f       	adc	r23, r23
    185e:	68 0f       	add	r22, r24
    1860:	79 1f       	adc	r23, r25
    1862:	66 0f       	add	r22, r22
    1864:	77 1f       	adc	r23, r23
    1866:	66 5e       	subi	r22, 0xE6	; 230
    1868:	7f 4f       	sbci	r23, 0xFF	; 255
    186a:	6e 0d       	add	r22, r14
    186c:	7f 1d       	adc	r23, r15
    186e:	86 e0       	ldi	r24, 0x06	; 6
    1870:	fb 01       	movw	r30, r22
    1872:	d7 01       	movw	r26, r14
    1874:	a6 5b       	subi	r26, 0xB6	; 182
    1876:	bf 4f       	sbci	r27, 0xFF	; 255
    1878:	01 90       	ld	r0, Z+
    187a:	0d 92       	st	X+, r0
    187c:	8a 95       	dec	r24
    187e:	e1 f7       	brne	.-8      	; 0x1878 <_ZN16CLaserControlApp3RunEv+0x370>
					laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile]);
    1880:	87 01       	movw	r16, r14
    1882:	00 5b       	subi	r16, 0xB0	; 176
    1884:	1f 4f       	sbci	r17, 0xFF	; 255
    1886:	c7 01       	movw	r24, r14
    1888:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
    188c:	f8 01       	movw	r30, r16
    188e:	20 83       	st	Z, r18
    1890:	31 83       	std	Z+1, r19	; 0x01
    1892:	42 83       	std	Z+2, r20	; 0x02
    1894:	53 83       	std	Z+3, r21	; 0x03
    1896:	64 83       	std	Z+4, r22	; 0x04
    1898:	75 83       	std	Z+5, r23	; 0x05
					
					// Calculate laser power
					laserPower = (uint32_t)(m_structLaserProfile[Profile].EnergyPercent * 1440ul) / (uint32_t)m_structLaserProfile[Profile].Duration; // Convert Energy J/cm2 to Power in Watts
    189a:	f7 01       	movw	r30, r14
    189c:	86 85       	ldd	r24, Z+14	; 0x0e
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	fc 01       	movw	r30, r24
    18a2:	ee 0f       	add	r30, r30
    18a4:	ff 1f       	adc	r31, r31
    18a6:	df 01       	movw	r26, r30
    18a8:	a8 0f       	add	r26, r24
    18aa:	b9 1f       	adc	r27, r25
    18ac:	aa 0f       	add	r26, r26
    18ae:	bb 1f       	adc	r27, r27
    18b0:	ae 0d       	add	r26, r14
    18b2:	bf 1d       	adc	r27, r15
    18b4:	5e 96       	adiw	r26, 0x1e	; 30
    18b6:	2d 91       	ld	r18, X+
    18b8:	3c 91       	ld	r19, X
    18ba:	5f 97       	sbiw	r26, 0x1f	; 31
    18bc:	fd 01       	movw	r30, r26
    18be:	44 8d       	ldd	r20, Z+28	; 0x1c
    18c0:	55 8d       	ldd	r21, Z+29	; 0x1d
    18c2:	a0 ea       	ldi	r26, 0xA0	; 160
    18c4:	b5 e0       	ldi	r27, 0x05	; 5
    18c6:	0e 94 0d 34 	call	0x681a	; 0x681a <__umulhisi3>
    18ca:	9a 01       	movw	r18, r20
    18cc:	40 e0       	ldi	r20, 0x00	; 0
    18ce:	50 e0       	ldi	r21, 0x00	; 0
    18d0:	0e 94 c4 33 	call	0x6788	; 0x6788 <__udivmodsi4>
    18d4:	f7 01       	movw	r30, r14
    18d6:	26 af       	std	Z+62, r18	; 0x3e
    18d8:	37 af       	std	Z+63, r19	; 0x3f
				}
				
				update = CheckLimits(laserDiodeData.laserprofile.Frequency, laserDiodeData.laserprofile.Duration, Profile);
    18da:	f7 01       	movw	r30, r14
    18dc:	26 85       	ldd	r18, Z+14	; 0x0e
    18de:	a7 01       	movw	r20, r14
    18e0:	44 5b       	subi	r20, 0xB4	; 180
    18e2:	5f 4f       	sbci	r21, 0xFF	; 255
    18e4:	b7 01       	movw	r22, r14
    18e6:	66 5b       	subi	r22, 0xB6	; 182
    18e8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ea:	c7 01       	movw	r24, r14
    18ec:	0e 94 15 08 	call	0x102a	; 0x102a <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM>
    18f0:	f7 01       	movw	r30, r14
    18f2:	81 8b       	std	Z+17, r24	; 0x11
				
				//laserPower = m_wMaxEnergy * laserPower / 100;
				if (laserDiodeData.laserprofile.EnergyPercent > m_wMaxEnergy_)
    18f4:	86 89       	ldd	r24, Z+22	; 0x16
    18f6:	97 89       	ldd	r25, Z+23	; 0x17
    18f8:	e2 5b       	subi	r30, 0xB2	; 178
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	20 81       	ld	r18, Z
    18fe:	31 81       	ldd	r19, Z+1	; 0x01
    1900:	82 17       	cp	r24, r18
    1902:	93 07       	cpc	r25, r19
    1904:	08 f0       	brcs	.+2      	; 0x1908 <_ZN16CLaserControlApp3RunEv+0x400>
    1906:	25 c2       	rjmp	.+1098   	; 0x1d52 <_ZN16CLaserControlApp3RunEv+0x84a>
				{
					laserDiodeData.laserprofile.EnergyPercent = m_wMaxEnergy_;
    1908:	f7 01       	movw	r30, r14
    190a:	86 89       	ldd	r24, Z+22	; 0x16
    190c:	97 89       	ldd	r25, Z+23	; 0x17
    190e:	e2 5b       	subi	r30, 0xB2	; 178
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	80 83       	st	Z, r24
    1914:	91 83       	std	Z+1, r25	; 0x01
					laserPower = m_wMaxEnergy_;
    1916:	f7 01       	movw	r30, r14
    1918:	86 89       	ldd	r24, Z+22	; 0x16
    191a:	97 89       	ldd	r25, Z+23	; 0x17
    191c:	86 af       	std	Z+62, r24	; 0x3e
    191e:	97 af       	std	Z+63, r25	; 0x3f
					update = true;
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	81 8b       	std	Z+17, r24	; 0x11
    1924:	16 c2       	rjmp	.+1068   	; 0x1d52 <_ZN16CLaserControlApp3RunEv+0x84a>
		break;
		case APP_WORKPREPARE:
			{
				DGUS_PREPARETIMER timervar;
				
				if (prepare)
    1926:	f7 01       	movw	r30, r14
    1928:	82 89       	ldd	r24, Z+18	; 0x12
    192a:	88 23       	and	r24, r24
    192c:	b1 f0       	breq	.+44     	; 0x195a <_ZN16CLaserControlApp3RunEv+0x452>
				{
					timervar.timer_minutes = m_wMinutes;
    192e:	ee 58       	subi	r30, 0x8E	; 142
    1930:	ff 4f       	sbci	r31, 0xFF	; 255
    1932:	80 81       	ld	r24, Z
    1934:	91 81       	ldd	r25, Z+1	; 0x01
    1936:	89 83       	std	Y+1, r24	; 0x01
    1938:	9a 83       	std	Y+2, r25	; 0x02
					timervar.timer_seconds = m_wSeconds;
    193a:	32 96       	adiw	r30, 0x02	; 2
    193c:	80 81       	ld	r24, Z
    193e:	91 81       	ldd	r25, Z+1	; 0x01
    1940:	8b 83       	std	Y+3, r24	; 0x03
    1942:	9c 83       	std	Y+4, r25	; 0x04
					SetVariable(STRUCT_ADDR_PREPARETIMER_DATA, (uint16_t*)&timervar, sizeof(timervar));
    1944:	24 e0       	ldi	r18, 0x04	; 4
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	ae 01       	movw	r20, r28
    194a:	4f 5f       	subi	r20, 0xFF	; 255
    194c:	5f 4f       	sbci	r21, 0xFF	; 255
    194e:	6f e0       	ldi	r22, 0x0F	; 15
    1950:	70 e0       	ldi	r23, 0x00	; 0
    1952:	c7 01       	movw	r24, r14
    1954:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN16CLaserControlApp11SetVariableEjPjj>
    1958:	fc c1       	rjmp	.+1016   	; 0x1d52 <_ZN16CLaserControlApp3RunEv+0x84a>
				}
				else
				{
					SetVariable(STRUCT_ADDR_LASERPROFILE_DATA, (uint16_t*)&m_structLaserProfile[Profile], sizeof(DGUS_LASERPROFILE));
    195a:	f7 01       	movw	r30, r14
    195c:	86 85       	ldd	r24, Z+14	; 0x0e
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	ac 01       	movw	r20, r24
    1962:	44 0f       	add	r20, r20
    1964:	55 1f       	adc	r21, r21
    1966:	48 0f       	add	r20, r24
    1968:	59 1f       	adc	r21, r25
    196a:	44 0f       	add	r20, r20
    196c:	55 1f       	adc	r21, r21
    196e:	46 5e       	subi	r20, 0xE6	; 230
    1970:	5f 4f       	sbci	r21, 0xFF	; 255
    1972:	4e 0d       	add	r20, r14
    1974:	5f 1d       	adc	r21, r15
    1976:	26 e0       	ldi	r18, 0x06	; 6
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	62 e0       	ldi	r22, 0x02	; 2
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	c7 01       	movw	r24, r14
    1980:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN16CLaserControlApp11SetVariableEjPjj>
					SetPictureId(PICID_WORK_READY);	
    1984:	6c e0       	ldi	r22, 0x0C	; 12
    1986:	70 e0       	ldi	r23, 0x00	; 0
    1988:	c7 01       	movw	r24, r14
    198a:	0e 94 2a 06 	call	0xc54	; 0xc54 <_ZN16CLaserControlApp12SetPictureIdEj>
				}
			}
		break;
    198e:	e1 c1       	rjmp	.+962    	; 0x1d52 <_ZN16CLaserControlApp3RunEv+0x84a>
		case APP_WORKTEMPERWAIT:
			{
				DGUS_PREPARETIMER timervar;
				timervar.timer_minutes = temperature / 10;
    1990:	80 91 7c 25 	lds	r24, 0x257C	; 0x80257c <temperature>
    1994:	90 91 7d 25 	lds	r25, 0x257D	; 0x80257d <temperature+0x1>
    1998:	6a e0       	ldi	r22, 0x0A	; 10
    199a:	70 e0       	ldi	r23, 0x00	; 0
    199c:	0e 94 b0 33 	call	0x6760	; 0x6760 <__divmodhi4>
    19a0:	69 83       	std	Y+1, r22	; 0x01
    19a2:	7a 83       	std	Y+2, r23	; 0x02
				timervar.timer_seconds = temperature % 10;
    19a4:	8b 83       	std	Y+3, r24	; 0x03
    19a6:	9c 83       	std	Y+4, r25	; 0x04
				SetVariable(STRUCT_ADDR_PREPARETIMER_DATA, (uint16_t*)&timervar, sizeof(timervar));
    19a8:	24 e0       	ldi	r18, 0x04	; 4
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	ae 01       	movw	r20, r28
    19ae:	4f 5f       	subi	r20, 0xFF	; 255
    19b0:	5f 4f       	sbci	r21, 0xFF	; 255
    19b2:	6f e0       	ldi	r22, 0x0F	; 15
    19b4:	70 e0       	ldi	r23, 0x00	; 0
    19b6:	c7 01       	movw	r24, r14
    19b8:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN16CLaserControlApp11SetVariableEjPjj>
				
				m_wMinutes = m_wSetMin;
    19bc:	f7 01       	movw	r30, r14
    19be:	e8 58       	subi	r30, 0x88	; 136
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	80 81       	ld	r24, Z
    19c4:	91 81       	ldd	r25, Z+1	; 0x01
    19c6:	36 97       	sbiw	r30, 0x06	; 6
    19c8:	80 83       	st	Z, r24
    19ca:	91 83       	std	Z+1, r25	; 0x01
				m_wSeconds = m_wSetSec;
    19cc:	38 96       	adiw	r30, 0x08	; 8
    19ce:	80 81       	ld	r24, Z
    19d0:	91 81       	ldd	r25, Z+1	; 0x01
    19d2:	36 97       	sbiw	r30, 0x06	; 6
    19d4:	80 83       	st	Z, r24
    19d6:	91 83       	std	Z+1, r25	; 0x01
				prepare = true;
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	f7 01       	movw	r30, r14
    19dc:	82 8b       	std	Z+18, r24	; 0x12
				
				if (temperature < 290)
    19de:	80 91 7c 25 	lds	r24, 0x257C	; 0x80257c <temperature>
    19e2:	90 91 7d 25 	lds	r25, 0x257D	; 0x80257d <temperature+0x1>
    19e6:	82 32       	cpi	r24, 0x22	; 34
    19e8:	91 40       	sbci	r25, 0x01	; 1
    19ea:	0c f0       	brlt	.+2      	; 0x19ee <_ZN16CLaserControlApp3RunEv+0x4e6>
    19ec:	b2 c1       	rjmp	.+868    	; 0x1d52 <_ZN16CLaserControlApp3RunEv+0x84a>
					SetPictureId(PICID_WORK_PREPARE);
    19ee:	67 e0       	ldi	r22, 0x07	; 7
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	c7 01       	movw	r24, r14
    19f4:	0e 94 2a 06 	call	0xc54	; 0xc54 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    19f8:	ac c1       	rjmp	.+856    	; 0x1d52 <_ZN16CLaserControlApp3RunEv+0x84a>
		case APP_WORKREADY:
			{				
				if (temperature > 300)
    19fa:	80 91 7c 25 	lds	r24, 0x257C	; 0x80257c <temperature>
    19fe:	90 91 7d 25 	lds	r25, 0x257D	; 0x80257d <temperature+0x1>
    1a02:	8d 32       	cpi	r24, 0x2D	; 45
    1a04:	91 40       	sbci	r25, 0x01	; 1
    1a06:	0c f4       	brge	.+2      	; 0x1a0a <_ZN16CLaserControlApp3RunEv+0x502>
    1a08:	a4 c1       	rjmp	.+840    	; 0x1d52 <_ZN16CLaserControlApp3RunEv+0x84a>
				{
					SetPictureId(PICID_WORK_ERRORHEATING);
    1a0a:	69 e2       	ldi	r22, 0x29	; 41
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	c7 01       	movw	r24, r14
    1a10:	0e 94 2a 06 	call	0xc54	; 0xc54 <_ZN16CLaserControlApp12SetPictureIdEj>
					PIC_ID_last = PIC_ID;
    1a14:	f7 01       	movw	r30, r14
    1a16:	87 85       	ldd	r24, Z+15	; 0x0f
    1a18:	80 8b       	std	Z+16, r24	; 0x10
    1a1a:	9b c1       	rjmp	.+822    	; 0x1d52 <_ZN16CLaserControlApp3RunEv+0x84a>
			}
		break;
		case APP_WORKLIGHT:
		case APP_WORKPOWERON:
			{				
				SetLaserDiodePower();
    1a1c:	c7 01       	movw	r24, r14
    1a1e:	0e 94 34 05 	call	0xa68	; 0xa68 <_ZN16CLaserControlApp18SetLaserDiodePowerEv>
							
				if (!laserBoard.Footswitch())
    1a22:	85 e0       	ldi	r24, 0x05	; 5
    1a24:	96 e2       	ldi	r25, 0x26	; 38
    1a26:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <_ZN11CLaserBoard10FootswitchEv>
    1a2a:	81 11       	cpse	r24, r1
    1a2c:	10 c0       	rjmp	.+32     	; 0x1a4e <_ZN16CLaserControlApp3RunEv+0x546>
				{
					//isstarted = true;
					if (state != APP_WORKLIGHT)
    1a2e:	f7 01       	movw	r30, r14
    1a30:	84 85       	ldd	r24, Z+12	; 0x0c
    1a32:	95 85       	ldd	r25, Z+13	; 0x0d
    1a34:	80 97       	sbiw	r24, 0x20	; 32
    1a36:	d1 f0       	breq	.+52     	; 0x1a6c <_ZN16CLaserControlApp3RunEv+0x564>
					{
						SetPictureId(PICID_WORK_STARTED);
    1a38:	60 e1       	ldi	r22, 0x10	; 16
    1a3a:	70 e0       	ldi	r23, 0x00	; 0
    1a3c:	c7 01       	movw	r24, r14
    1a3e:	0e 94 2a 06 	call	0xc54	; 0xc54 <_ZN16CLaserControlApp12SetPictureIdEj>
						state = APP_WORKLIGHT;
    1a42:	80 e2       	ldi	r24, 0x20	; 32
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	f7 01       	movw	r30, r14
    1a48:	84 87       	std	Z+12, r24	; 0x0c
    1a4a:	95 87       	std	Z+13, r25	; 0x0d
    1a4c:	0f c0       	rjmp	.+30     	; 0x1a6c <_ZN16CLaserControlApp3RunEv+0x564>
					}
				}
				else
				{
					if (state != APP_WORKPOWERON)
    1a4e:	f7 01       	movw	r30, r14
    1a50:	84 85       	ldd	r24, Z+12	; 0x0c
    1a52:	95 85       	ldd	r25, Z+13	; 0x0d
    1a54:	40 97       	sbiw	r24, 0x10	; 16
    1a56:	51 f0       	breq	.+20     	; 0x1a6c <_ZN16CLaserControlApp3RunEv+0x564>
					{
						SetPictureId(PICID_WORK_POWERON);
    1a58:	6e e0       	ldi	r22, 0x0E	; 14
    1a5a:	70 e0       	ldi	r23, 0x00	; 0
    1a5c:	c7 01       	movw	r24, r14
    1a5e:	0e 94 2a 06 	call	0xc54	; 0xc54 <_ZN16CLaserControlApp12SetPictureIdEj>
						state = APP_WORKPOWERON;
    1a62:	80 e1       	ldi	r24, 0x10	; 16
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	f7 01       	movw	r30, r14
    1a68:	84 87       	std	Z+12, r24	; 0x0c
    1a6a:	95 87       	std	Z+13, r25	; 0x0d
					/*laserTimer.Stop();
					laserTimer.ChannelSet(TIMER_CHANNEL_A);
					laserTimer.ChannelSet(TIMER_CHANNEL_B);*/
				}
			
				uint32_t cnt = swap32(laserCounter);
    1a6c:	f7 01       	movw	r30, r14
    1a6e:	e0 5c       	subi	r30, 0xC0	; 192
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	60 81       	ld	r22, Z
    1a74:	71 81       	ldd	r23, Z+1	; 0x01
    1a76:	82 81       	ldd	r24, Z+2	; 0x02
    1a78:	93 81       	ldd	r25, Z+3	; 0x03
    1a7a:	0e 94 b8 10 	call	0x2170	; 0x2170 <_Z6swap32m>
    1a7e:	69 83       	std	Y+1, r22	; 0x01
    1a80:	7a 83       	std	Y+2, r23	; 0x02
    1a82:	8b 83       	std	Y+3, r24	; 0x03
    1a84:	9c 83       	std	Y+4, r25	; 0x04
				SetVariable(VARIABLE_ADDR_LASERCNT, (uint16_t*)&cnt,  4);
    1a86:	24 e0       	ldi	r18, 0x04	; 4
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	ae 01       	movw	r20, r28
    1a8c:	4f 5f       	subi	r20, 0xFF	; 255
    1a8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a90:	68 e0       	ldi	r22, 0x08	; 8
    1a92:	70 e0       	ldi	r23, 0x00	; 0
    1a94:	c7 01       	movw	r24, r14
    1a96:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN16CLaserControlApp11SetVariableEjPjj>
				cnt = swap32(laserCounterSession);
    1a9a:	f7 01       	movw	r30, r14
    1a9c:	ec 5b       	subi	r30, 0xBC	; 188
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	60 81       	ld	r22, Z
    1aa2:	71 81       	ldd	r23, Z+1	; 0x01
    1aa4:	82 81       	ldd	r24, Z+2	; 0x02
    1aa6:	93 81       	ldd	r25, Z+3	; 0x03
    1aa8:	0e 94 b8 10 	call	0x2170	; 0x2170 <_Z6swap32m>
    1aac:	69 83       	std	Y+1, r22	; 0x01
    1aae:	7a 83       	std	Y+2, r23	; 0x02
    1ab0:	8b 83       	std	Y+3, r24	; 0x03
    1ab2:	9c 83       	std	Y+4, r25	; 0x04
				SetVariable(VARIABLE_ADDR_SESSNCNT, (uint16_t*)&cnt,  4);
    1ab4:	24 e0       	ldi	r18, 0x04	; 4
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	ae 01       	movw	r20, r28
    1aba:	4f 5f       	subi	r20, 0xFF	; 255
    1abc:	5f 4f       	sbci	r21, 0xFF	; 255
    1abe:	64 e1       	ldi	r22, 0x14	; 20
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	c7 01       	movw	r24, r14
    1ac4:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN16CLaserControlApp11SetVariableEjPjj>
					SetPictureId(PICID_WORK_ERRORFLOW);
					PIC_ID_last = PIC_ID;
				}
#endif
			}
		break;
    1ac8:	44 c1       	rjmp	.+648    	; 0x1d52 <_ZN16CLaserControlApp3RunEv+0x84a>
		case APP_FLOWERR:			
			laserBoard.LaserPowerOff();
    1aca:	85 e0       	ldi	r24, 0x05	; 5
    1acc:	96 e2       	ldi	r25, 0x26	; 38
    1ace:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <_ZN11CLaserBoard13LaserPowerOffEv>
			
			if (m_wFlow > 60)
    1ad2:	f7 01       	movw	r30, r14
    1ad4:	e4 58       	subi	r30, 0x84	; 132
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	80 81       	ld	r24, Z
    1ada:	91 81       	ldd	r25, Z+1	; 0x01
    1adc:	cd 97       	sbiw	r24, 0x3d	; 61
    1ade:	08 f4       	brcc	.+2      	; 0x1ae2 <_ZN16CLaserControlApp3RunEv+0x5da>
    1ae0:	38 c1       	rjmp	.+624    	; 0x1d52 <_ZN16CLaserControlApp3RunEv+0x84a>
				SetPictureId(PICID_WORKOnReady);
    1ae2:	69 e1       	ldi	r22, 0x19	; 25
    1ae4:	70 e0       	ldi	r23, 0x00	; 0
    1ae6:	c7 01       	movw	r24, r14
    1ae8:	0e 94 2a 06 	call	0xc54	; 0xc54 <_ZN16CLaserControlApp12SetPictureIdEj>
    1aec:	32 c1       	rjmp	.+612    	; 0x1d52 <_ZN16CLaserControlApp3RunEv+0x84a>
		break;
		case APP_TEMPERERR:			
			laserBoard.LaserPowerOff();
    1aee:	85 e0       	ldi	r24, 0x05	; 5
    1af0:	96 e2       	ldi	r25, 0x26	; 38
    1af2:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <_ZN11CLaserBoard13LaserPowerOffEv>
			
			prepare = false;
    1af6:	f7 01       	movw	r30, r14
    1af8:	12 8a       	std	Z+18, r1	; 0x12
			if (temperature < 290)
    1afa:	80 91 7c 25 	lds	r24, 0x257C	; 0x80257c <temperature>
    1afe:	90 91 7d 25 	lds	r25, 0x257D	; 0x80257d <temperature+0x1>
    1b02:	82 32       	cpi	r24, 0x22	; 34
    1b04:	91 40       	sbci	r25, 0x01	; 1
    1b06:	0c f0       	brlt	.+2      	; 0x1b0a <_ZN16CLaserControlApp3RunEv+0x602>
    1b08:	24 c1       	rjmp	.+584    	; 0x1d52 <_ZN16CLaserControlApp3RunEv+0x84a>
			{
				prepare = true;
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	f7 01       	movw	r30, r14
    1b0e:	82 8b       	std	Z+18, r24	; 0x12
				SetPictureId(PIC_ID_last);
    1b10:	60 89       	ldd	r22, Z+16	; 0x10
    1b12:	70 e0       	ldi	r23, 0x00	; 0
    1b14:	c7 01       	movw	r24, r14
    1b16:	0e 94 2a 06 	call	0xc54	; 0xc54 <_ZN16CLaserControlApp12SetPictureIdEj>
    1b1a:	1b c1       	rjmp	.+566    	; 0x1d52 <_ZN16CLaserControlApp3RunEv+0x84a>
			}
		break;
		case APP_POWERERR:			
			laserBoard.LaserPowerOff();
    1b1c:	85 e0       	ldi	r24, 0x05	; 5
    1b1e:	96 e2       	ldi	r25, 0x26	; 38
    1b20:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <_ZN11CLaserBoard13LaserPowerOffEv>
			
			if ((PORTD.IN & PIN5_bm) != 0)
    1b24:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    1b28:	85 ff       	sbrs	r24, 5
    1b2a:	13 c1       	rjmp	.+550    	; 0x1d52 <_ZN16CLaserControlApp3RunEv+0x84a>
				SetPictureId(PIC_ID_last);
    1b2c:	f7 01       	movw	r30, r14
    1b2e:	60 89       	ldd	r22, Z+16	; 0x10
    1b30:	70 e0       	ldi	r23, 0x00	; 0
    1b32:	c7 01       	movw	r24, r14
    1b34:	0e 94 2a 06 	call	0xc54	; 0xc54 <_ZN16CLaserControlApp12SetPictureIdEj>
    1b38:	0c c1       	rjmp	.+536    	; 0x1d52 <_ZN16CLaserControlApp3RunEv+0x84a>
		break;
		
		// Commands
		case APP_WORKOnReady:
			{
				laserCounterSession = 0;
    1b3a:	f7 01       	movw	r30, r14
    1b3c:	ec 5b       	subi	r30, 0xBC	; 188
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	10 82       	st	Z, r1
    1b42:	11 82       	std	Z+1, r1	; 0x01
    1b44:	12 82       	std	Z+2, r1	; 0x02
    1b46:	13 82       	std	Z+3, r1	; 0x03
				
				//laserBoard.Relay2On();
				laserBoard.LaserPowerOn();
    1b48:	85 e0       	ldi	r24, 0x05	; 5
    1b4a:	96 e2       	ldi	r25, 0x26	; 38
    1b4c:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <_ZN11CLaserBoard12LaserPowerOnEv>
				
				uint16_t coolpwm = laserDiodeData.cooling * 204;
    1b50:	f7 01       	movw	r30, r14
    1b52:	e0 5a       	subi	r30, 0xA0	; 160
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	80 81       	ld	r24, Z
    1b58:	91 81       	ldd	r25, Z+1	; 0x01
    1b5a:	2c ec       	ldi	r18, 0xCC	; 204
    1b5c:	28 9f       	mul	r18, r24
    1b5e:	b0 01       	movw	r22, r0
    1b60:	29 9f       	mul	r18, r25
    1b62:	70 0d       	add	r23, r0
    1b64:	11 24       	eor	r1, r1
				pwmtimer.SetCOMPA(coolpwm);
    1b66:	86 e3       	ldi	r24, 0x36	; 54
    1b68:	96 e2       	ldi	r25, 0x26	; 38
    1b6a:	0e 94 41 30 	call	0x6082	; 0x6082 <_ZN7CTimerD8SetCOMPAEj>
				//pwmtimer.Start(1024);
				peltier_en = true;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	f7 01       	movw	r30, r14
    1b72:	83 8b       	std	Z+19, r24	; 0x13
				
				prepare = true;
    1b74:	82 8b       	std	Z+18, r24	; 0x12
				m_wMinutes = m_wSetMin;
    1b76:	e8 58       	subi	r30, 0x88	; 136
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	80 81       	ld	r24, Z
    1b7c:	91 81       	ldd	r25, Z+1	; 0x01
    1b7e:	36 97       	sbiw	r30, 0x06	; 6
    1b80:	80 83       	st	Z, r24
    1b82:	91 83       	std	Z+1, r25	; 0x01
				m_wSeconds = m_wSetSec;
    1b84:	38 96       	adiw	r30, 0x08	; 8
    1b86:	80 81       	ld	r24, Z
    1b88:	91 81       	ldd	r25, Z+1	; 0x01
    1b8a:	36 97       	sbiw	r30, 0x06	; 6
    1b8c:	80 83       	st	Z, r24
    1b8e:	91 83       	std	Z+1, r25	; 0x01
				{
					SetPictureId(PICID_WORK_ERRORFLOW);
				}
				else				
#endif
				if (temperature > 290)
    1b90:	80 91 7c 25 	lds	r24, 0x257C	; 0x80257c <temperature>
    1b94:	90 91 7d 25 	lds	r25, 0x257D	; 0x80257d <temperature+0x1>
    1b98:	83 32       	cpi	r24, 0x23	; 35
    1b9a:	91 40       	sbci	r25, 0x01	; 1
    1b9c:	34 f0       	brlt	.+12     	; 0x1baa <_ZN16CLaserControlApp3RunEv+0x6a2>
				{
					SetPictureId(PICID_WORK_TEMPERWAIT);
    1b9e:	67 e2       	ldi	r22, 0x27	; 39
    1ba0:	70 e0       	ldi	r23, 0x00	; 0
    1ba2:	c7 01       	movw	r24, r14
    1ba4:	0e 94 2a 06 	call	0xc54	; 0xc54 <_ZN16CLaserControlApp12SetPictureIdEj>
    1ba8:	d4 c0       	rjmp	.+424    	; 0x1d52 <_ZN16CLaserControlApp3RunEv+0x84a>
				}
				else
					SetPictureId(PICID_WORK_PREPARE);
    1baa:	67 e0       	ldi	r22, 0x07	; 7
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	c7 01       	movw	r24, r14
    1bb0:	0e 94 2a 06 	call	0xc54	; 0xc54 <_ZN16CLaserControlApp12SetPictureIdEj>
    1bb4:	ce c0       	rjmp	.+412    	; 0x1d52 <_ZN16CLaserControlApp3RunEv+0x84a>
			}
		break;
		case APP_WORKOnPowerOn:
			{
				SetLaserDiodePower();
    1bb6:	c7 01       	movw	r24, r14
    1bb8:	0e 94 34 05 	call	0xa68	; 0xa68 <_ZN16CLaserControlApp18SetLaserDiodePowerEv>
				
				SetPictureId(PICID_WORK_POWERON);
    1bbc:	6e e0       	ldi	r22, 0x0E	; 14
    1bbe:	70 e0       	ldi	r23, 0x00	; 0
    1bc0:	c7 01       	movw	r24, r14
    1bc2:	0e 94 2a 06 	call	0xc54	; 0xc54 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    1bc6:	c5 c0       	rjmp	.+394    	; 0x1d52 <_ZN16CLaserControlApp3RunEv+0x84a>
		case APP_WORKOnPowerOff:
			{
				SetPictureId(PICID_WORK_IDLE);
    1bc8:	6a e0       	ldi	r22, 0x0A	; 10
    1bca:	70 e0       	ldi	r23, 0x00	; 0
    1bcc:	c7 01       	movw	r24, r14
    1bce:	0e 94 2a 06 	call	0xc54	; 0xc54 <_ZN16CLaserControlApp12SetPictureIdEj>
				
				laserTimer.Stop();
    1bd2:	8c e3       	ldi	r24, 0x3C	; 60
    1bd4:	96 e2       	ldi	r25, 0x26	; 38
    1bd6:	0e 94 a2 31 	call	0x6344	; 0x6344 <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
    1bda:	60 e1       	ldi	r22, 0x10	; 16
    1bdc:	8c e3       	ldi	r24, 0x3C	; 60
    1bde:	96 e2       	ldi	r25, 0x26	; 38
    1be0:	0e 94 b7 31 	call	0x636e	; 0x636e <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
    1be4:	60 e2       	ldi	r22, 0x20	; 32
    1be6:	8c e3       	ldi	r24, 0x3C	; 60
    1be8:	96 e2       	ldi	r25, 0x26	; 38
    1bea:	0e 94 b7 31 	call	0x636e	; 0x636e <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserBoard.LaserPowerOff();
    1bee:	85 e0       	ldi	r24, 0x05	; 5
    1bf0:	96 e2       	ldi	r25, 0x26	; 38
    1bf2:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <_ZN11CLaserBoard13LaserPowerOffEv>
				//pwmtimer.Stop();
				peltier_en = false;
    1bf6:	f7 01       	movw	r30, r14
    1bf8:	13 8a       	std	Z+19, r1	; 0x13
				laserBoard.PWMOn(); // Cooling off
    1bfa:	85 e0       	ldi	r24, 0x05	; 5
    1bfc:	96 e2       	ldi	r25, 0x26	; 38
    1bfe:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <_ZN11CLaserBoard5PWMOnEv>
				eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, laserCounter);
    1c02:	f7 01       	movw	r30, r14
    1c04:	e0 5c       	subi	r30, 0xC0	; 192
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	40 81       	ld	r20, Z
    1c0a:	51 81       	ldd	r21, Z+1	; 0x01
    1c0c:	62 81       	ldd	r22, Z+2	; 0x02
    1c0e:	73 81       	ldd	r23, Z+3	; 0x03
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <eeprom_write_dword>
				//laserBoard.Relay2Off();
				
				uint16_t data = 0;
    1c18:	19 82       	std	Y+1, r1	; 0x01
    1c1a:	1a 82       	std	Y+2, r1	; 0x02
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    1c1c:	42 e0       	ldi	r20, 0x02	; 2
    1c1e:	50 e0       	ldi	r21, 0x00	; 0
    1c20:	be 01       	movw	r22, r28
    1c22:	6f 5f       	subi	r22, 0xFF	; 255
    1c24:	7f 4f       	sbci	r23, 0xFF	; 255
    1c26:	85 e4       	ldi	r24, 0x45	; 69
    1c28:	96 e2       	ldi	r25, 0x26	; 38
    1c2a:	0e 94 ff 10 	call	0x21fe	; 0x21fe <_ZN4CSPI4SendEPhj>
			}
		break;
    1c2e:	91 c0       	rjmp	.+290    	; 0x1d52 <_ZN16CLaserControlApp3RunEv+0x84a>
		case APP_OnPhototypeSelect:
			{
				SetPictureId(PICID_WORK_IDLE);
    1c30:	6a e0       	ldi	r22, 0x0A	; 10
    1c32:	70 e0       	ldi	r23, 0x00	; 0
    1c34:	c7 01       	movw	r24, r14
    1c36:	0e 94 2a 06 	call	0xc54	; 0xc54 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    1c3a:	8b c0       	rjmp	.+278    	; 0x1d52 <_ZN16CLaserControlApp3RunEv+0x84a>
		
		// Database
		case APP_DATABASE:
			GetVariable(VARIABLE_ADDR_DATAOFFS, 2);
    1c3c:	42 e0       	ldi	r20, 0x02	; 2
    1c3e:	50 e0       	ldi	r21, 0x00	; 0
    1c40:	61 e1       	ldi	r22, 0x11	; 17
    1c42:	70 e0       	ldi	r23, 0x00	; 0
    1c44:	c7 01       	movw	r24, r14
    1c46:	0e 94 06 06 	call	0xc0c	; 0xc0c <_ZN16CLaserControlApp11GetVariableEjj>
    1c4a:	ff ef       	ldi	r31, 0xFF	; 255
    1c4c:	21 ee       	ldi	r18, 0xE1	; 225
    1c4e:	84 e0       	ldi	r24, 0x04	; 4
    1c50:	f1 50       	subi	r31, 0x01	; 1
    1c52:	20 40       	sbci	r18, 0x00	; 0
    1c54:	80 40       	sbci	r24, 0x00	; 0
    1c56:	e1 f7       	brne	.-8      	; 0x1c50 <_ZN16CLaserControlApp3RunEv+0x748>
    1c58:	00 c0       	rjmp	.+0      	; 0x1c5a <_ZN16CLaserControlApp3RunEv+0x752>
    1c5a:	00 00       	nop
			_delay_ms(50);
			GetVariable(VARIABLE_ADDR_DATAINDEX, 2);
    1c5c:	42 e0       	ldi	r20, 0x02	; 2
    1c5e:	50 e0       	ldi	r21, 0x00	; 0
    1c60:	62 e1       	ldi	r22, 0x12	; 18
    1c62:	70 e0       	ldi	r23, 0x00	; 0
    1c64:	c7 01       	movw	r24, r14
    1c66:	0e 94 06 06 	call	0xc0c	; 0xc0c <_ZN16CLaserControlApp11GetVariableEjj>
    1c6a:	9f ef       	ldi	r25, 0xFF	; 255
    1c6c:	e1 ee       	ldi	r30, 0xE1	; 225
    1c6e:	f4 e0       	ldi	r31, 0x04	; 4
    1c70:	91 50       	subi	r25, 0x01	; 1
    1c72:	e0 40       	sbci	r30, 0x00	; 0
    1c74:	f0 40       	sbci	r31, 0x00	; 0
    1c76:	e1 f7       	brne	.-8      	; 0x1c70 <_ZN16CLaserControlApp3RunEv+0x768>
    1c78:	00 c0       	rjmp	.+0      	; 0x1c7a <_ZN16CLaserControlApp3RunEv+0x772>
    1c7a:	00 00       	nop
			_delay_ms(50);
			
			Database.MapDatabaseToRead(VARIABLE_ADDR_DATABASE, DGUS_DATABASE_ADDR + (uint32_t)laserDiodeData.DatabasePageOffset * (uint32_t)PROFILE_SIZE, 0x0C00);
    1c7c:	f7 01       	movw	r30, r14
    1c7e:	e8 59       	subi	r30, 0x98	; 152
    1c80:	ff 4f       	sbci	r31, 0xFF	; 255
    1c82:	20 81       	ld	r18, Z
    1c84:	31 81       	ldd	r19, Z+1	; 0x01
    1c86:	c9 01       	movw	r24, r18
    1c88:	a0 e0       	ldi	r26, 0x00	; 0
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	90 51       	subi	r25, 0x10	; 16
    1c8e:	af 4f       	sbci	r26, 0xFF	; 255
    1c90:	bf 4f       	sbci	r27, 0xFF	; 255
    1c92:	22 27       	eor	r18, r18
    1c94:	38 2f       	mov	r19, r24
    1c96:	49 2f       	mov	r20, r25
    1c98:	5a 2f       	mov	r21, r26
    1c9a:	00 e0       	ldi	r16, 0x00	; 0
    1c9c:	1c e0       	ldi	r17, 0x0C	; 12
    1c9e:	60 e0       	ldi	r22, 0x00	; 0
    1ca0:	71 e0       	ldi	r23, 0x01	; 1
    1ca2:	8c e2       	ldi	r24, 0x2C	; 44
    1ca4:	96 e2       	ldi	r25, 0x26	; 38
    1ca6:	0e 94 33 03 	call	0x666	; 0x666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
				_delay_ms(500);
				
				uint16_t index = 13;
				SetVariable(VARIABLE_ADDR_DATAINDEX, &index, 2);
			}*/
		break;
    1caa:	53 c0       	rjmp	.+166    	; 0x1d52 <_ZN16CLaserControlApp3RunEv+0x84a>
    1cac:	2f ef       	ldi	r18, 0xFF	; 255
    1cae:	87 ea       	ldi	r24, 0xA7	; 167
    1cb0:	91 e6       	ldi	r25, 0x61	; 97
    1cb2:	21 50       	subi	r18, 0x01	; 1
    1cb4:	80 40       	sbci	r24, 0x00	; 0
    1cb6:	90 40       	sbci	r25, 0x00	; 0
    1cb8:	e1 f7       	brne	.-8      	; 0x1cb2 <_ZN16CLaserControlApp3RunEv+0x7aa>
    1cba:	00 c0       	rjmp	.+0      	; 0x1cbc <_ZN16CLaserControlApp3RunEv+0x7b4>
    1cbc:	00 00       	nop
		case APP_READPROFILE:
			_delay_ms(1000);
			
			GetVariable(VARIABLE_ADDR_DATAINDEX, 2);
    1cbe:	42 e0       	ldi	r20, 0x02	; 2
    1cc0:	50 e0       	ldi	r21, 0x00	; 0
    1cc2:	62 e1       	ldi	r22, 0x12	; 18
    1cc4:	70 e0       	ldi	r23, 0x00	; 0
    1cc6:	c7 01       	movw	r24, r14
    1cc8:	0e 94 06 06 	call	0xc0c	; 0xc0c <_ZN16CLaserControlApp11GetVariableEjj>
			
			Database.MapDatabaseToRead(
				VARIABLE_ADDR_PROFILE, 
				DGUS_DATABASE_ADDR + (uint32_t)(laserDiodeData.DatabasePageOffset + laserDiodeData.DatabaseSelectionIndex) * (uint32_t)PROFILE_SIZE, 0x0100);
    1ccc:	f7 01       	movw	r30, r14
    1cce:	e6 59       	subi	r30, 0x96	; 150
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	20 81       	ld	r18, Z
    1cd4:	31 81       	ldd	r19, Z+1	; 0x01
    1cd6:	32 97       	sbiw	r30, 0x02	; 2
    1cd8:	80 81       	ld	r24, Z
    1cda:	91 81       	ldd	r25, Z+1	; 0x01
    1cdc:	28 0f       	add	r18, r24
    1cde:	39 1f       	adc	r19, r25
    1ce0:	c9 01       	movw	r24, r18
    1ce2:	a0 e0       	ldi	r26, 0x00	; 0
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	90 51       	subi	r25, 0x10	; 16
    1ce8:	af 4f       	sbci	r26, 0xFF	; 255
    1cea:	bf 4f       	sbci	r27, 0xFF	; 255
    1cec:	22 27       	eor	r18, r18
    1cee:	38 2f       	mov	r19, r24
    1cf0:	49 2f       	mov	r20, r25
    1cf2:	5a 2f       	mov	r21, r26
    1cf4:	00 e0       	ldi	r16, 0x00	; 0
    1cf6:	11 e0       	ldi	r17, 0x01	; 1
    1cf8:	60 e0       	ldi	r22, 0x00	; 0
    1cfa:	7d e0       	ldi	r23, 0x0D	; 13
    1cfc:	8c e2       	ldi	r24, 0x2C	; 44
    1cfe:	96 e2       	ldi	r25, 0x26	; 38
    1d00:	0e 94 33 03 	call	0x666	; 0x666 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
		break;
    1d04:	26 c0       	rjmp	.+76     	; 0x1d52 <_ZN16CLaserControlApp3RunEv+0x84a>
		case APP_SAVEPROFILE:
			Database.MapDatabaseToWrite(
				VARIABLE_ADDR_PROFILE,
				DGUS_DATABASE_ADDR + (uint32_t)(laserDiodeData.DatabasePageOffset + laserDiodeData.DatabaseSelectionIndex) * (uint32_t)PROFILE_SIZE, 0x0100);
    1d06:	f7 01       	movw	r30, r14
    1d08:	e6 59       	subi	r30, 0x96	; 150
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	20 81       	ld	r18, Z
    1d0e:	31 81       	ldd	r19, Z+1	; 0x01
    1d10:	32 97       	sbiw	r30, 0x02	; 2
    1d12:	80 81       	ld	r24, Z
    1d14:	91 81       	ldd	r25, Z+1	; 0x01
    1d16:	28 0f       	add	r18, r24
    1d18:	39 1f       	adc	r19, r25
    1d1a:	c9 01       	movw	r24, r18
    1d1c:	a0 e0       	ldi	r26, 0x00	; 0
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	90 51       	subi	r25, 0x10	; 16
    1d22:	af 4f       	sbci	r26, 0xFF	; 255
    1d24:	bf 4f       	sbci	r27, 0xFF	; 255
    1d26:	22 27       	eor	r18, r18
    1d28:	38 2f       	mov	r19, r24
    1d2a:	49 2f       	mov	r20, r25
    1d2c:	5a 2f       	mov	r21, r26
    1d2e:	00 e0       	ldi	r16, 0x00	; 0
    1d30:	11 e0       	ldi	r17, 0x01	; 1
    1d32:	60 e0       	ldi	r22, 0x00	; 0
    1d34:	7d e0       	ldi	r23, 0x0D	; 13
    1d36:	8c e2       	ldi	r24, 0x2C	; 44
    1d38:	96 e2       	ldi	r25, 0x26	; 38
    1d3a:	0e 94 ce 02 	call	0x59c	; 0x59c <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>
		break;
    1d3e:	09 c0       	rjmp	.+18     	; 0x1d52 <_ZN16CLaserControlApp3RunEv+0x84a>
		case APP_UNMAPDATABASE:
			Database.UnMap();
    1d40:	8c e2       	ldi	r24, 0x2C	; 44
    1d42:	96 e2       	ldi	r25, 0x26	; 38
    1d44:	0e 94 98 03 	call	0x730	; 0x730 <_ZN13CDGUSDatabase5UnMapEv>
		break;
    1d48:	04 c0       	rjmp	.+8      	; 0x1d52 <_ZN16CLaserControlApp3RunEv+0x84a>
		default:
			Database.UnMap();
    1d4a:	8c e2       	ldi	r24, 0x2C	; 44
    1d4c:	96 e2       	ldi	r25, 0x26	; 38
    1d4e:	0e 94 98 03 	call	0x730	; 0x730 <_ZN13CDGUSDatabase5UnMapEv>
			PIC_ID_last = PIC_ID;
			SetPictureId(PICID_WORK_ERROR1);
		}
#endif
	
	if (update)
    1d52:	f7 01       	movw	r30, r14
    1d54:	81 89       	ldd	r24, Z+17	; 0x11
    1d56:	88 23       	and	r24, r24
    1d58:	a9 f0       	breq	.+42     	; 0x1d84 <_ZN16CLaserControlApp3RunEv+0x87c>
	{		
		SetVariable(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
    1d5a:	a7 01       	movw	r20, r14
    1d5c:	48 5b       	subi	r20, 0xB8	; 184
    1d5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d60:	2a e2       	ldi	r18, 0x2A	; 42
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	61 e0       	ldi	r22, 0x01	; 1
    1d66:	70 e0       	ldi	r23, 0x00	; 0
    1d68:	c7 01       	movw	r24, r14
    1d6a:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN16CLaserControlApp11SetVariableEjPjj>
		update = false;
    1d6e:	f7 01       	movw	r30, r14
    1d70:	11 8a       	std	Z+17, r1	; 0x11
    1d72:	08 c0       	rjmp	.+16     	; 0x1d84 <_ZN16CLaserControlApp3RunEv+0x87c>
	// show sensors
	if ((state & 0xFFF) != 0)
	{
		SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
		if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
		if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    1d74:	82 e0       	ldi	r24, 0x02	; 2
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	f7 01       	movw	r30, r14
    1d7a:	e4 59       	subi	r30, 0x94	; 148
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	80 83       	st	Z, r24
    1d80:	91 83       	std	Z+1, r25	; 0x01
    1d82:	16 cc       	rjmp	.-2004   	; 0x15b0 <_ZN16CLaserControlApp3RunEv+0xa8>
	if (update)
	{		
		SetVariable(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
		update = false;
	}
}
    1d84:	24 96       	adiw	r28, 0x04	; 4
    1d86:	cd bf       	out	0x3d, r28	; 61
    1d88:	de bf       	out	0x3e, r29	; 62
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28
    1d8e:	1f 91       	pop	r17
    1d90:	0f 91       	pop	r16
    1d92:	ff 90       	pop	r15
    1d94:	ef 90       	pop	r14
    1d96:	df 90       	pop	r13
    1d98:	cf 90       	pop	r12
    1d9a:	bf 90       	pop	r11
    1d9c:	af 90       	pop	r10
    1d9e:	08 95       	ret

00001da0 <_ZN16CLaserControlApp7OnTimerEv>:
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic, 2);
	m_cpSender->WaitMODBUSTransmitter();
}

void CLaserControlApp::OnTimer()
{
    1da0:	cf 93       	push	r28
    1da2:	df 93       	push	r29
    1da4:	ec 01       	movw	r28, r24
	if (m_wDeadTime != 0)
    1da6:	fc 01       	movw	r30, r24
    1da8:	e2 58       	subi	r30, 0x82	; 130
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	80 81       	ld	r24, Z
    1dae:	91 81       	ldd	r25, Z+1	; 0x01
    1db0:	89 2b       	or	r24, r25
    1db2:	29 f0       	breq	.+10     	; 0x1dbe <_ZN16CLaserControlApp7OnTimerEv+0x1e>
		m_wDeadTime--;
    1db4:	80 81       	ld	r24, Z
    1db6:	91 81       	ldd	r25, Z+1	; 0x01
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	80 83       	st	Z, r24
    1dbc:	91 83       	std	Z+1, r25	; 0x01
		
	if (prepare)
    1dbe:	8a 89       	ldd	r24, Y+18	; 0x12
    1dc0:	88 23       	and	r24, r24
    1dc2:	09 f4       	brne	.+2      	; 0x1dc6 <_ZN16CLaserControlApp7OnTimerEv+0x26>
    1dc4:	89 c0       	rjmp	.+274    	; 0x1ed8 <_ZN16CLaserControlApp7OnTimerEv+0x138>
	{
		if (m_wMillSec == 0)
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	ea 58       	subi	r30, 0x8A	; 138
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	80 81       	ld	r24, Z
    1dce:	91 81       	ldd	r25, Z+1	; 0x01
    1dd0:	89 2b       	or	r24, r25
    1dd2:	09 f0       	breq	.+2      	; 0x1dd6 <_ZN16CLaserControlApp7OnTimerEv+0x36>
    1dd4:	79 c0       	rjmp	.+242    	; 0x1ec8 <_ZN16CLaserControlApp7OnTimerEv+0x128>
		{			
			if (m_wSeconds == 0)
    1dd6:	32 97       	sbiw	r30, 0x02	; 2
    1dd8:	80 81       	ld	r24, Z
    1dda:	91 81       	ldd	r25, Z+1	; 0x01
    1ddc:	89 2b       	or	r24, r25
    1dde:	09 f0       	breq	.+2      	; 0x1de2 <_ZN16CLaserControlApp7OnTimerEv+0x42>
    1de0:	4c c0       	rjmp	.+152    	; 0x1e7a <_ZN16CLaserControlApp7OnTimerEv+0xda>
			{
				if (m_wMinutes == 0)
    1de2:	32 97       	sbiw	r30, 0x02	; 2
    1de4:	80 81       	ld	r24, Z
    1de6:	91 81       	ldd	r25, Z+1	; 0x01
    1de8:	89 2b       	or	r24, r25
    1dea:	d1 f5       	brne	.+116    	; 0x1e60 <_ZN16CLaserControlApp7OnTimerEv+0xc0>
				{
					if (state == APP_WORKPREPARE)
    1dec:	8c 85       	ldd	r24, Y+12	; 0x0c
    1dee:	9d 85       	ldd	r25, Y+13	; 0x0d
    1df0:	02 97       	sbiw	r24, 0x02	; 2
    1df2:	a1 f5       	brne	.+104    	; 0x1e5c <_ZN16CLaserControlApp7OnTimerEv+0xbc>
					{
						/*player.SoundStart(1000, 1000, 2);
						player.SoundStop();*/
						player.SoundStart(261, 100, 2);
    1df4:	22 e0       	ldi	r18, 0x02	; 2
    1df6:	44 e6       	ldi	r20, 0x64	; 100
    1df8:	50 e0       	ldi	r21, 0x00	; 0
    1dfa:	65 e0       	ldi	r22, 0x05	; 5
    1dfc:	71 e0       	ldi	r23, 0x01	; 1
    1dfe:	84 e0       	ldi	r24, 0x04	; 4
    1e00:	96 e2       	ldi	r25, 0x26	; 38
    1e02:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1e06:	84 e0       	ldi	r24, 0x04	; 4
    1e08:	96 e2       	ldi	r25, 0x26	; 38
    1e0a:	0e 94 55 2e 	call	0x5caa	; 0x5caa <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(294, 100, 2);
    1e0e:	22 e0       	ldi	r18, 0x02	; 2
    1e10:	44 e6       	ldi	r20, 0x64	; 100
    1e12:	50 e0       	ldi	r21, 0x00	; 0
    1e14:	66 e2       	ldi	r22, 0x26	; 38
    1e16:	71 e0       	ldi	r23, 0x01	; 1
    1e18:	84 e0       	ldi	r24, 0x04	; 4
    1e1a:	96 e2       	ldi	r25, 0x26	; 38
    1e1c:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1e20:	84 e0       	ldi	r24, 0x04	; 4
    1e22:	96 e2       	ldi	r25, 0x26	; 38
    1e24:	0e 94 55 2e 	call	0x5caa	; 0x5caa <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(329, 100, 2);
    1e28:	22 e0       	ldi	r18, 0x02	; 2
    1e2a:	44 e6       	ldi	r20, 0x64	; 100
    1e2c:	50 e0       	ldi	r21, 0x00	; 0
    1e2e:	69 e4       	ldi	r22, 0x49	; 73
    1e30:	71 e0       	ldi	r23, 0x01	; 1
    1e32:	84 e0       	ldi	r24, 0x04	; 4
    1e34:	96 e2       	ldi	r25, 0x26	; 38
    1e36:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1e3a:	84 e0       	ldi	r24, 0x04	; 4
    1e3c:	96 e2       	ldi	r25, 0x26	; 38
    1e3e:	0e 94 55 2e 	call	0x5caa	; 0x5caa <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(349, 100, 2);
    1e42:	22 e0       	ldi	r18, 0x02	; 2
    1e44:	44 e6       	ldi	r20, 0x64	; 100
    1e46:	50 e0       	ldi	r21, 0x00	; 0
    1e48:	6d e5       	ldi	r22, 0x5D	; 93
    1e4a:	71 e0       	ldi	r23, 0x01	; 1
    1e4c:	84 e0       	ldi	r24, 0x04	; 4
    1e4e:	96 e2       	ldi	r25, 0x26	; 38
    1e50:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1e54:	84 e0       	ldi	r24, 0x04	; 4
    1e56:	96 e2       	ldi	r25, 0x26	; 38
    1e58:	0e 94 55 2e 	call	0x5caa	; 0x5caa <_ZN12CSoundPlayer9SoundStopEv>
}

void CLaserControlApp::OnTimeout()
{
	//timer.Stop();
	prepare = false;
    1e5c:	1a 8a       	std	Y+18, r1	; 0x12
    1e5e:	a3 c0       	rjmp	.+326    	; 0x1fa6 <_ZN16CLaserControlApp7OnTimerEv+0x206>
					OnTimeout();
					
					//player.beep(1000, 1000);
					return;
				}
				m_wSeconds = 60;
    1e60:	8c e3       	ldi	r24, 0x3C	; 60
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	fe 01       	movw	r30, r28
    1e66:	ec 58       	subi	r30, 0x8C	; 140
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	80 83       	st	Z, r24
    1e6c:	91 83       	std	Z+1, r25	; 0x01
				m_wMinutes--;
    1e6e:	32 97       	sbiw	r30, 0x02	; 2
    1e70:	80 81       	ld	r24, Z
    1e72:	91 81       	ldd	r25, Z+1	; 0x01
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	80 83       	st	Z, r24
    1e78:	91 83       	std	Z+1, r25	; 0x01
			}
			m_wMillSec = 100; // Every 10 ms
    1e7a:	84 e6       	ldi	r24, 0x64	; 100
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	fe 01       	movw	r30, r28
    1e80:	ea 58       	subi	r30, 0x8A	; 138
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	80 83       	st	Z, r24
    1e86:	91 83       	std	Z+1, r25	; 0x01
			m_wSeconds--;
    1e88:	32 97       	sbiw	r30, 0x02	; 2
    1e8a:	80 81       	ld	r24, Z
    1e8c:	91 81       	ldd	r25, Z+1	; 0x01
    1e8e:	01 97       	sbiw	r24, 0x01	; 1
    1e90:	80 83       	st	Z, r24
    1e92:	91 83       	std	Z+1, r25	; 0x01
			
			// ****************** Tick sound
			if (state == APP_WORKPREPARE)
    1e94:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e96:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e98:	02 97       	sbiw	r24, 0x02	; 2
    1e9a:	b1 f4       	brne	.+44     	; 0x1ec8 <_ZN16CLaserControlApp7OnTimerEv+0x128>
			{
				if (m_wMinutes == 0 && m_wSeconds < 10 && state == APP_WORKPREPARE)
    1e9c:	32 97       	sbiw	r30, 0x02	; 2
    1e9e:	80 81       	ld	r24, Z
    1ea0:	91 81       	ldd	r25, Z+1	; 0x01
    1ea2:	89 2b       	or	r24, r25
    1ea4:	09 f0       	breq	.+2      	; 0x1ea8 <_ZN16CLaserControlApp7OnTimerEv+0x108>
    1ea6:	4c c0       	rjmp	.+152    	; 0x1f40 <_ZN16CLaserControlApp7OnTimerEv+0x1a0>
    1ea8:	32 96       	adiw	r30, 0x02	; 2
    1eaa:	80 81       	ld	r24, Z
    1eac:	91 81       	ldd	r25, Z+1	; 0x01
    1eae:	0a 97       	sbiw	r24, 0x0a	; 10
    1eb0:	08 f4       	brcc	.+2      	; 0x1eb4 <_ZN16CLaserControlApp7OnTimerEv+0x114>
    1eb2:	54 c0       	rjmp	.+168    	; 0x1f5c <_ZN16CLaserControlApp7OnTimerEv+0x1bc>
    1eb4:	45 c0       	rjmp	.+138    	; 0x1f40 <_ZN16CLaserControlApp7OnTimerEv+0x1a0>
				{
					if (m_wMinutes == 0 && m_wSeconds < 5)
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	ec 58       	subi	r30, 0x8C	; 140
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	80 81       	ld	r24, Z
    1ebe:	91 81       	ldd	r25, Z+1	; 0x01
    1ec0:	05 97       	sbiw	r24, 0x05	; 5
    1ec2:	08 f4       	brcc	.+2      	; 0x1ec6 <_ZN16CLaserControlApp7OnTimerEv+0x126>
    1ec4:	54 c0       	rjmp	.+168    	; 0x1f6e <_ZN16CLaserControlApp7OnTimerEv+0x1ce>
    1ec6:	61 c0       	rjmp	.+194    	; 0x1f8a <_ZN16CLaserControlApp7OnTimerEv+0x1ea>
					//player.beep(1000, 25);
					}
			}
			// ************************************
		}
		m_wMillSec-=10;
    1ec8:	fe 01       	movw	r30, r28
    1eca:	ea 58       	subi	r30, 0x8A	; 138
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	80 81       	ld	r24, Z
    1ed0:	91 81       	ldd	r25, Z+1	; 0x01
    1ed2:	0a 97       	sbiw	r24, 0x0a	; 10
    1ed4:	80 83       	st	Z, r24
    1ed6:	91 83       	std	Z+1, r25	; 0x01
	}
	
	// Flow sensor
	{
		static uint16_t millsec = 100;
		if (millsec == 0)
    1ed8:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <_ZZN16CLaserControlApp7OnTimerEvE7millsec>
    1edc:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <_ZZN16CLaserControlApp7OnTimerEvE7millsec+0x1>
    1ee0:	89 2b       	or	r24, r25
    1ee2:	21 f5       	brne	.+72     	; 0x1f2c <_ZN16CLaserControlApp7OnTimerEv+0x18c>
		{
			millsec = 100;
    1ee4:	84 e6       	ldi	r24, 0x64	; 100
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <_ZZN16CLaserControlApp7OnTimerEvE7millsec>
    1eec:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <_ZZN16CLaserControlApp7OnTimerEvE7millsec+0x1>
			
			m_wFlow = (TCC1.CNT * 73) / 104; // ((cnt * 10) / 8) * (7,3 / 13)
    1ef0:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
    1ef4:	90 91 61 08 	lds	r25, 0x0861	; 0x800861 <__TEXT_REGION_LENGTH__+0x700861>
    1ef8:	49 e4       	ldi	r20, 0x49	; 73
    1efa:	48 9f       	mul	r20, r24
    1efc:	90 01       	movw	r18, r0
    1efe:	49 9f       	mul	r20, r25
    1f00:	30 0d       	add	r19, r0
    1f02:	11 24       	eor	r1, r1
    1f04:	a5 ec       	ldi	r26, 0xC5	; 197
    1f06:	be e4       	ldi	r27, 0x4E	; 78
    1f08:	0e 94 0d 34 	call	0x681a	; 0x681a <__umulhisi3>
    1f0c:	96 95       	lsr	r25
    1f0e:	87 95       	ror	r24
    1f10:	92 95       	swap	r25
    1f12:	82 95       	swap	r24
    1f14:	8f 70       	andi	r24, 0x0F	; 15
    1f16:	89 27       	eor	r24, r25
    1f18:	9f 70       	andi	r25, 0x0F	; 15
    1f1a:	89 27       	eor	r24, r25
    1f1c:	c4 58       	subi	r28, 0x84	; 132
    1f1e:	df 4f       	sbci	r29, 0xFF	; 255
    1f20:	88 83       	st	Y, r24
    1f22:	99 83       	std	Y+1, r25	; 0x01
			flowtimer.Reset();
    1f24:	89 e3       	ldi	r24, 0x39	; 57
    1f26:	96 e2       	ldi	r25, 0x26	; 38
    1f28:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <_ZN8CTimerC15ResetEv>
		}
		millsec-=10;
    1f2c:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <_ZZN16CLaserControlApp7OnTimerEvE7millsec>
    1f30:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <_ZZN16CLaserControlApp7OnTimerEvE7millsec+0x1>
    1f34:	0a 97       	sbiw	r24, 0x0a	; 10
    1f36:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <_ZZN16CLaserControlApp7OnTimerEvE7millsec>
    1f3a:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <_ZZN16CLaserControlApp7OnTimerEvE7millsec+0x1>
    1f3e:	33 c0       	rjmp	.+102    	; 0x1fa6 <_ZN16CLaserControlApp7OnTimerEv+0x206>
						//player.beep(1000, 50);
					}
				}
				else
				{
					player.SoundStart(1000, 25, 2);
    1f40:	22 e0       	ldi	r18, 0x02	; 2
    1f42:	49 e1       	ldi	r20, 0x19	; 25
    1f44:	50 e0       	ldi	r21, 0x00	; 0
    1f46:	68 ee       	ldi	r22, 0xE8	; 232
    1f48:	73 e0       	ldi	r23, 0x03	; 3
    1f4a:	84 e0       	ldi	r24, 0x04	; 4
    1f4c:	96 e2       	ldi	r25, 0x26	; 38
    1f4e:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <_ZN12CSoundPlayer10SoundStartEjjh>
					player.SoundStop();
    1f52:	84 e0       	ldi	r24, 0x04	; 4
    1f54:	96 e2       	ldi	r25, 0x26	; 38
    1f56:	0e 94 55 2e 	call	0x5caa	; 0x5caa <_ZN12CSoundPlayer9SoundStopEv>
    1f5a:	b6 cf       	rjmp	.-148    	; 0x1ec8 <_ZN16CLaserControlApp7OnTimerEv+0x128>
			// ****************** Tick sound
			if (state == APP_WORKPREPARE)
			{
				if (m_wMinutes == 0 && m_wSeconds < 10 && state == APP_WORKPREPARE)
				{
					if (m_wMinutes == 0 && m_wSeconds < 5)
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	ee 58       	subi	r30, 0x8E	; 142
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	80 81       	ld	r24, Z
    1f64:	91 81       	ldd	r25, Z+1	; 0x01
    1f66:	89 2b       	or	r24, r25
    1f68:	09 f4       	brne	.+2      	; 0x1f6c <_ZN16CLaserControlApp7OnTimerEv+0x1cc>
    1f6a:	a5 cf       	rjmp	.-182    	; 0x1eb6 <_ZN16CLaserControlApp7OnTimerEv+0x116>
    1f6c:	0e c0       	rjmp	.+28     	; 0x1f8a <_ZN16CLaserControlApp7OnTimerEv+0x1ea>
					{
						player.SoundStart(1000, 100, 2);
    1f6e:	22 e0       	ldi	r18, 0x02	; 2
    1f70:	44 e6       	ldi	r20, 0x64	; 100
    1f72:	50 e0       	ldi	r21, 0x00	; 0
    1f74:	68 ee       	ldi	r22, 0xE8	; 232
    1f76:	73 e0       	ldi	r23, 0x03	; 3
    1f78:	84 e0       	ldi	r24, 0x04	; 4
    1f7a:	96 e2       	ldi	r25, 0x26	; 38
    1f7c:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1f80:	84 e0       	ldi	r24, 0x04	; 4
    1f82:	96 e2       	ldi	r25, 0x26	; 38
    1f84:	0e 94 55 2e 	call	0x5caa	; 0x5caa <_ZN12CSoundPlayer9SoundStopEv>
    1f88:	9f cf       	rjmp	.-194    	; 0x1ec8 <_ZN16CLaserControlApp7OnTimerEv+0x128>
						//player.beep(1000, 100);
					}
					else
					{
						player.SoundStart(1000, 50, 2);
    1f8a:	22 e0       	ldi	r18, 0x02	; 2
    1f8c:	42 e3       	ldi	r20, 0x32	; 50
    1f8e:	50 e0       	ldi	r21, 0x00	; 0
    1f90:	68 ee       	ldi	r22, 0xE8	; 232
    1f92:	73 e0       	ldi	r23, 0x03	; 3
    1f94:	84 e0       	ldi	r24, 0x04	; 4
    1f96:	96 e2       	ldi	r25, 0x26	; 38
    1f98:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    1f9c:	84 e0       	ldi	r24, 0x04	; 4
    1f9e:	96 e2       	ldi	r25, 0x26	; 38
    1fa0:	0e 94 55 2e 	call	0x5caa	; 0x5caa <_ZN12CSoundPlayer9SoundStopEv>
    1fa4:	91 cf       	rjmp	.-222    	; 0x1ec8 <_ZN16CLaserControlApp7OnTimerEv+0x128>
			m_wFlow = (TCC1.CNT * 73) / 104; // ((cnt * 10) / 8) * (7,3 / 13)
			flowtimer.Reset();
		}
		millsec-=10;
	}
}
    1fa6:	df 91       	pop	r29
    1fa8:	cf 91       	pop	r28
    1faa:	08 95       	ret

00001fac <_ZN16CLaserControlApp13OnTimerStaticEPv>:
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnTimer();
    1fac:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <_ZN16CLaserControlApp7OnTimerEv>
    1fb0:	08 95       	ret

00001fb2 <_ZN16CLaserControlApp6OnINT0Ev>:
	laserBoard.BLUOn();
#endif
}

void CLaserControlApp::OnINT0()
{
    1fb2:	cf 93       	push	r28
    1fb4:	df 93       	push	r29
	static bool isstarted = false;
	
	switch (state)
    1fb6:	fc 01       	movw	r30, r24
    1fb8:	24 85       	ldd	r18, Z+12	; 0x0c
    1fba:	35 85       	ldd	r19, Z+13	; 0x0d
    1fbc:	20 31       	cpi	r18, 0x10	; 16
    1fbe:	31 05       	cpc	r19, r1
    1fc0:	21 f0       	breq	.+8      	; 0x1fca <_ZN16CLaserControlApp6OnINT0Ev+0x18>
    1fc2:	20 32       	cpi	r18, 0x20	; 32
    1fc4:	31 05       	cpc	r19, r1
    1fc6:	09 f0       	breq	.+2      	; 0x1fca <_ZN16CLaserControlApp6OnINT0Ev+0x18>
    1fc8:	93 c0       	rjmp	.+294    	; 0x20f0 <_ZN16CLaserControlApp6OnINT0Ev+0x13e>
    1fca:	ec 01       	movw	r28, r24
	{
		case APP_WORKLIGHT:
		case APP_WORKPOWERON:
		{
			if ((PORTC.IN & 0x01) == 0)
    1fcc:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    1fd0:	80 fd       	sbrc	r24, 0
    1fd2:	78 c0       	rjmp	.+240    	; 0x20c4 <_ZN16CLaserControlApp6OnINT0Ev+0x112>
			{				
				if ((!isstarted) && (m_wDeadTime == 0))
    1fd4:	80 91 8c 23 	lds	r24, 0x238C	; 0x80238c <__data_end>
    1fd8:	81 11       	cpse	r24, r1
    1fda:	8a c0       	rjmp	.+276    	; 0x20f0 <_ZN16CLaserControlApp6OnINT0Ev+0x13e>
    1fdc:	fe 01       	movw	r30, r28
    1fde:	e2 58       	subi	r30, 0x82	; 130
    1fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe2:	80 81       	ld	r24, Z
    1fe4:	91 81       	ldd	r25, Z+1	; 0x01
    1fe6:	89 2b       	or	r24, r25
    1fe8:	09 f4       	brne	.+2      	; 0x1fec <_ZN16CLaserControlApp6OnINT0Ev+0x3a>
    1fea:	7d c0       	rjmp	.+250    	; 0x20e6 <_ZN16CLaserControlApp6OnINT0Ev+0x134>
    1fec:	81 c0       	rjmp	.+258    	; 0x20f0 <_ZN16CLaserControlApp6OnINT0Ev+0x13e>
				{
					if (Profile == PROFILE_SINGLE)
					{
						m_wDeadTime = 10;
    1fee:	8a e0       	ldi	r24, 0x0A	; 10
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	e2 58       	subi	r30, 0x82	; 130
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	80 83       	st	Z, r24
    1ffa:	91 83       	std	Z+1, r25	; 0x01
						
						laserCounter++;
    1ffc:	fe 97       	sbiw	r30, 0x3e	; 62
    1ffe:	80 81       	ld	r24, Z
    2000:	91 81       	ldd	r25, Z+1	; 0x01
    2002:	a2 81       	ldd	r26, Z+2	; 0x02
    2004:	b3 81       	ldd	r27, Z+3	; 0x03
    2006:	01 96       	adiw	r24, 0x01	; 1
    2008:	a1 1d       	adc	r26, r1
    200a:	b1 1d       	adc	r27, r1
    200c:	80 83       	st	Z, r24
    200e:	91 83       	std	Z+1, r25	; 0x01
    2010:	a2 83       	std	Z+2, r26	; 0x02
    2012:	b3 83       	std	Z+3, r27	; 0x03
						laserCounterSession++;
    2014:	34 96       	adiw	r30, 0x04	; 4
    2016:	80 81       	ld	r24, Z
    2018:	91 81       	ldd	r25, Z+1	; 0x01
    201a:	a2 81       	ldd	r26, Z+2	; 0x02
    201c:	b3 81       	ldd	r27, Z+3	; 0x03
    201e:	01 96       	adiw	r24, 0x01	; 1
    2020:	a1 1d       	adc	r26, r1
    2022:	b1 1d       	adc	r27, r1
    2024:	80 83       	st	Z, r24
    2026:	91 83       	std	Z+1, r25	; 0x01
    2028:	a2 83       	std	Z+2, r26	; 0x02
    202a:	b3 83       	std	Z+3, r27	; 0x03
						
						if (laserTimerDutyCyclems > 100)
    202c:	4c ad       	ldd	r20, Y+60	; 0x3c
    202e:	5d ad       	ldd	r21, Y+61	; 0x3d
    2030:	45 36       	cpi	r20, 0x65	; 101
    2032:	51 05       	cpc	r21, r1
    2034:	50 f0       	brcs	.+20     	; 0x204a <_ZN16CLaserControlApp6OnINT0Ev+0x98>
							player.SoundStart(500, 50, 0);
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	42 e3       	ldi	r20, 0x32	; 50
    203a:	50 e0       	ldi	r21, 0x00	; 0
    203c:	64 ef       	ldi	r22, 0xF4	; 244
    203e:	71 e0       	ldi	r23, 0x01	; 1
    2040:	84 e0       	ldi	r24, 0x04	; 4
    2042:	96 e2       	ldi	r25, 0x26	; 38
    2044:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <_ZN12CSoundPlayer10SoundStartEjjh>
    2048:	09 c0       	rjmp	.+18     	; 0x205c <_ZN16CLaserControlApp6OnINT0Ev+0xaa>
						else
							player.SoundStart(500, laserTimerDutyCyclems/2, 0);
    204a:	56 95       	lsr	r21
    204c:	47 95       	ror	r20
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	64 ef       	ldi	r22, 0xF4	; 244
    2052:	71 e0       	ldi	r23, 0x01	; 1
    2054:	84 e0       	ldi	r24, 0x04	; 4
    2056:	96 e2       	ldi	r25, 0x26	; 38
    2058:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    205c:	84 e0       	ldi	r24, 0x04	; 4
    205e:	96 e2       	ldi	r25, 0x26	; 38
    2060:	0e 94 55 2e 	call	0x5caa	; 0x5caa <_ZN12CSoundPlayer9SoundStopEv>
					}
						
					if (laserTimerDutyCycle != 0)
    2064:	8a ad       	ldd	r24, Y+58	; 0x3a
    2066:	9b ad       	ldd	r25, Y+59	; 0x3b
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	29 f0       	breq	.+10     	; 0x2076 <_ZN16CLaserControlApp6OnINT0Ev+0xc4>
						TCF0.CNT = laserTimerDutyCycle - 1;
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <__TEXT_REGION_LENGTH__+0x700b20>
    2072:	90 93 21 0b 	sts	0x0B21, r25	; 0x800b21 <__TEXT_REGION_LENGTH__+0x700b21>
						
					laserTimer.SetCOMPA(laserTimerDutyCycle);
    2076:	6a ad       	ldd	r22, Y+58	; 0x3a
    2078:	7b ad       	ldd	r23, Y+59	; 0x3b
    207a:	8c e3       	ldi	r24, 0x3C	; 60
    207c:	96 e2       	ldi	r25, 0x26	; 38
    207e:	0e 94 cd 31 	call	0x639a	; 0x639a <_ZN7CTimerF8SetCOMPAEj>
					laserTimer.SetCOMPB(laserTimerDutyCycle);
    2082:	6a ad       	ldd	r22, Y+58	; 0x3a
    2084:	7b ad       	ldd	r23, Y+59	; 0x3b
    2086:	8c e3       	ldi	r24, 0x3C	; 60
    2088:	96 e2       	ldi	r25, 0x26	; 38
    208a:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <_ZN7CTimerF8SetCOMPBEj>
					laserTimer.Start(laserTimerPeriod);
    208e:	68 ad       	ldd	r22, Y+56	; 0x38
    2090:	79 ad       	ldd	r23, Y+57	; 0x39
    2092:	8c e3       	ldi	r24, 0x3C	; 60
    2094:	96 e2       	ldi	r25, 0x26	; 38
    2096:	0e 94 95 31 	call	0x632a	; 0x632a <_ZN7CTimerF5StartEj>
					
					if (Profile == PROFILE_SINGLE)
    209a:	8e 85       	ldd	r24, Y+14	; 0x0e
    209c:	81 30       	cpi	r24, 0x01	; 1
    209e:	49 f4       	brne	.+18     	; 0x20b2 <_ZN16CLaserControlApp6OnINT0Ev+0x100>
    20a0:	ff ef       	ldi	r31, 0xFF	; 255
    20a2:	27 e8       	ldi	r18, 0x87	; 135
    20a4:	83 e1       	ldi	r24, 0x13	; 19
    20a6:	f1 50       	subi	r31, 0x01	; 1
    20a8:	20 40       	sbci	r18, 0x00	; 0
    20aa:	80 40       	sbci	r24, 0x00	; 0
    20ac:	e1 f7       	brne	.-8      	; 0x20a6 <_ZN16CLaserControlApp6OnINT0Ev+0xf4>
    20ae:	00 c0       	rjmp	.+0      	; 0x20b0 <_ZN16CLaserControlApp6OnINT0Ev+0xfe>
    20b0:	00 00       	nop
						_delay_ms(200);
					
					PORTC.INTFLAGS &= ~0x01;
    20b2:	e0 e4       	ldi	r30, 0x40	; 64
    20b4:	f6 e0       	ldi	r31, 0x06	; 6
    20b6:	84 85       	ldd	r24, Z+12	; 0x0c
    20b8:	8e 7f       	andi	r24, 0xFE	; 254
    20ba:	84 87       	std	Z+12, r24	; 0x0c
					
					isstarted = true;
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	80 93 8c 23 	sts	0x238C, r24	; 0x80238c <__data_end>
    20c2:	16 c0       	rjmp	.+44     	; 0x20f0 <_ZN16CLaserControlApp6OnINT0Ev+0x13e>
					state = APP_WORKLIGHT;
				}*/
			}
			else
			{
				isstarted = false;
    20c4:	10 92 8c 23 	sts	0x238C, r1	; 0x80238c <__data_end>
				
				laserTimer.Stop();
    20c8:	8c e3       	ldi	r24, 0x3C	; 60
    20ca:	96 e2       	ldi	r25, 0x26	; 38
    20cc:	0e 94 a2 31 	call	0x6344	; 0x6344 <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
    20d0:	60 e1       	ldi	r22, 0x10	; 16
    20d2:	8c e3       	ldi	r24, 0x3C	; 60
    20d4:	96 e2       	ldi	r25, 0x26	; 38
    20d6:	0e 94 b7 31 	call	0x636e	; 0x636e <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
    20da:	60 e2       	ldi	r22, 0x20	; 32
    20dc:	8c e3       	ldi	r24, 0x3C	; 60
    20de:	96 e2       	ldi	r25, 0x26	; 38
    20e0:	0e 94 b7 31 	call	0x636e	; 0x636e <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
    20e4:	05 c0       	rjmp	.+10     	; 0x20f0 <_ZN16CLaserControlApp6OnINT0Ev+0x13e>
		{
			if ((PORTC.IN & 0x01) == 0)
			{				
				if ((!isstarted) && (m_wDeadTime == 0))
				{
					if (Profile == PROFILE_SINGLE)
    20e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    20e8:	81 30       	cpi	r24, 0x01	; 1
    20ea:	09 f0       	breq	.+2      	; 0x20ee <_ZN16CLaserControlApp6OnINT0Ev+0x13c>
    20ec:	bb cf       	rjmp	.-138    	; 0x2064 <_ZN16CLaserControlApp6OnINT0Ev+0xb2>
    20ee:	7f cf       	rjmp	.-258    	; 0x1fee <_ZN16CLaserControlApp6OnINT0Ev+0x3c>
		}
		break;
		default:
		break;
	}
}
    20f0:	df 91       	pop	r29
    20f2:	cf 91       	pop	r28
    20f4:	08 95       	ret

000020f6 <_ZN16CLaserControlApp12OnINT0StaticEPv>:
}

void CLaserControlApp::OnINT0Static(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnINT0();
    20f6:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <_ZN16CLaserControlApp6OnINT0Ev>
    20fa:	08 95       	ret

000020fc <_Z11ConvertDataPvS_jj>:
 */ 

#include <stdint.h>

void ConvertData(void* dst, void* src, uint16_t size, uint16_t offset = 0)
{
    20fc:	cf 92       	push	r12
    20fe:	df 92       	push	r13
    2100:	ef 92       	push	r14
    2102:	ff 92       	push	r15
    2104:	0f 93       	push	r16
    2106:	1f 93       	push	r17
    2108:	cf 93       	push	r28
    210a:	df 93       	push	r29
    210c:	7c 01       	movw	r14, r24
    210e:	8a 01       	movw	r16, r20
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
    2110:	41 15       	cp	r20, r1
    2112:	51 05       	cpc	r21, r1
    2114:	b1 f0       	breq	.+44     	; 0x2142 <_Z11ConvertDataPvS_jj+0x46>
    2116:	6b 01       	movw	r12, r22
    2118:	c4 0e       	add	r12, r20
    211a:	d5 1e       	adc	r13, r21
    211c:	eb 01       	movw	r28, r22
    211e:	26 1b       	sub	r18, r22
    2120:	37 0b       	sbc	r19, r23
    2122:	c9 01       	movw	r24, r18
    2124:	8c 0f       	add	r24, r28
    2126:	9d 1f       	adc	r25, r29
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
    2128:	b8 01       	movw	r22, r16
    212a:	0e 94 9c 33 	call	0x6738	; 0x6738 <__udivmodhi4>
    212e:	fc 01       	movw	r30, r24
    2130:	41 e0       	ldi	r20, 0x01	; 1
    2132:	e4 27       	eor	r30, r20
    2134:	ee 0d       	add	r30, r14
    2136:	ff 1d       	adc	r31, r15
    2138:	89 91       	ld	r24, Y+
    213a:	80 83       	st	Z, r24
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
    213c:	cc 15       	cp	r28, r12
    213e:	dd 05       	cpc	r29, r13
    2140:	81 f7       	brne	.-32     	; 0x2122 <_Z11ConvertDataPvS_jj+0x26>
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
}
    2142:	df 91       	pop	r29
    2144:	cf 91       	pop	r28
    2146:	1f 91       	pop	r17
    2148:	0f 91       	pop	r16
    214a:	ff 90       	pop	r15
    214c:	ef 90       	pop	r14
    214e:	df 90       	pop	r13
    2150:	cf 90       	pop	r12
    2152:	08 95       	ret

00002154 <_Z3minjj>:

uint16_t min(uint16_t x, uint16_t y)
{
    2154:	68 17       	cp	r22, r24
    2156:	79 07       	cpc	r23, r25
    2158:	08 f4       	brcc	.+2      	; 0x215c <_Z3minjj+0x8>
    215a:	cb 01       	movw	r24, r22
	if (x < y)
		return x;
	else
		return y;
}
    215c:	08 95       	ret

0000215e <_Z3maxjj>:

uint16_t max(uint16_t x, uint16_t y)
{
    215e:	86 17       	cp	r24, r22
    2160:	97 07       	cpc	r25, r23
    2162:	08 f4       	brcc	.+2      	; 0x2166 <_Z3maxjj+0x8>
    2164:	cb 01       	movw	r24, r22
	if (x > y)
		return x;
	else
		return y;
}
    2166:	08 95       	ret

00002168 <_Z4swapj>:

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
}
    2168:	98 27       	eor	r25, r24
    216a:	89 27       	eor	r24, r25
    216c:	98 27       	eor	r25, r24
    216e:	08 95       	ret

00002170 <_Z6swap32m>:

uint32_t swap32(uint32_t data)
{
	return ((data & 0xffff) << 16) | ((data & 0xffff0000) >> 16);
    2170:	9b 01       	movw	r18, r22
    2172:	bc 01       	movw	r22, r24
    2174:	c9 01       	movw	r24, r18
}
    2176:	08 95       	ret

00002178 <_ZN4CSPIC1Ev>:
	SPIE.DATA = buffer[--rx_pos];
}

void CSPI::SendByte(uint8_t data)
{
	SPIE.DATA = data;
    2178:	08 95       	ret

0000217a <_ZN4CSPID1Ev>:
    217a:	08 95       	ret

0000217c <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>:
    217c:	ef 92       	push	r14
    217e:	0f 93       	push	r16
    2180:	1f 93       	push	r17
    2182:	cf 93       	push	r28
    2184:	df 93       	push	r29
    2186:	ec 01       	movw	r28, r24
    2188:	e0 e8       	ldi	r30, 0x80	; 128
    218a:	f6 e0       	ldi	r31, 0x06	; 6
    218c:	90 eb       	ldi	r25, 0xB0	; 176
    218e:	91 83       	std	Z+1, r25	; 0x01
    2190:	80 ec       	ldi	r24, 0xC0	; 192
    2192:	84 8b       	std	Z+20, r24	; 0x14
    2194:	85 8b       	std	Z+21, r24	; 0x15
    2196:	87 8b       	std	Z+23, r24	; 0x17
    2198:	95 83       	std	Z+5, r25	; 0x05
    219a:	61 11       	cpse	r22, r1
    219c:	02 c0       	rjmp	.+4      	; 0x21a2 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x26>
    219e:	80 e4       	ldi	r24, 0x40	; 64
    21a0:	01 c0       	rjmp	.+2      	; 0x21a4 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x28>
    21a2:	80 e5       	ldi	r24, 0x50	; 80
    21a4:	01 11       	cpse	r16, r1
    21a6:	02 c0       	rjmp	.+4      	; 0x21ac <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x30>
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	01 c0       	rjmp	.+2      	; 0x21ae <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x32>
    21ac:	30 e8       	ldi	r19, 0x80	; 128
    21ae:	41 11       	cpse	r20, r1
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x3a>
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	01 c0       	rjmp	.+2      	; 0x21b8 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x3c>
    21b6:	90 e2       	ldi	r25, 0x20	; 32
    21b8:	22 0f       	add	r18, r18
    21ba:	22 0f       	add	r18, r18
    21bc:	e2 2a       	or	r14, r18
    21be:	e8 2a       	or	r14, r24
    21c0:	e3 2a       	or	r14, r19
    21c2:	e9 2a       	or	r14, r25
    21c4:	00 ec       	ldi	r16, 0xC0	; 192
    21c6:	1a e0       	ldi	r17, 0x0A	; 10
    21c8:	f8 01       	movw	r30, r16
    21ca:	e0 82       	st	Z, r14
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	91 e0       	ldi	r25, 0x01	; 1
    21d0:	0e 94 27 34 	call	0x684e	; 0x684e <malloc>
    21d4:	88 83       	st	Y, r24
    21d6:	99 83       	std	Y+1, r25	; 0x01
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	f8 01       	movw	r30, r16
    21dc:	81 83       	std	Z+1, r24	; 0x01
    21de:	87 e3       	ldi	r24, 0x37	; 55
    21e0:	91 e1       	ldi	r25, 0x11	; 17
    21e2:	80 93 00 24 	sts	0x2400, r24	; 0x802400 <InterruptFuncTable+0x72>
    21e6:	90 93 01 24 	sts	0x2401, r25	; 0x802401 <InterruptFuncTable+0x73>
    21ea:	c0 93 f6 24 	sts	0x24F6, r28	; 0x8024f6 <InterruptSenderTable+0x72>
    21ee:	d0 93 f7 24 	sts	0x24F7, r29	; 0x8024f7 <InterruptSenderTable+0x73>
    21f2:	df 91       	pop	r29
    21f4:	cf 91       	pop	r28
    21f6:	1f 91       	pop	r17
    21f8:	0f 91       	pop	r16
    21fa:	ef 90       	pop	r14
    21fc:	08 95       	ret

000021fe <_ZN4CSPI4SendEPhj>:
    21fe:	cf 93       	push	r28
    2200:	df 93       	push	r29
    2202:	ec 01       	movw	r28, r24
    2204:	4a 83       	std	Y+2, r20	; 0x02
    2206:	5b 83       	std	Y+3, r21	; 0x03
    2208:	4c 83       	std	Y+4, r20	; 0x04
    220a:	5d 83       	std	Y+5, r21	; 0x05
    220c:	88 81       	ld	r24, Y
    220e:	99 81       	ldd	r25, Y+1	; 0x01
    2210:	0e 94 54 35 	call	0x6aa8	; 0x6aa8 <memcpy>
    2214:	80 e1       	ldi	r24, 0x10	; 16
    2216:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    221a:	88 81       	ld	r24, Y
    221c:	99 81       	ldd	r25, Y+1	; 0x01
    221e:	4a 81       	ldd	r20, Y+2	; 0x02
    2220:	5b 81       	ldd	r21, Y+3	; 0x03
    2222:	9a 01       	movw	r18, r20
    2224:	21 50       	subi	r18, 0x01	; 1
    2226:	31 09       	sbc	r19, r1
    2228:	2a 83       	std	Y+2, r18	; 0x02
    222a:	3b 83       	std	Y+3, r19	; 0x03
    222c:	fc 01       	movw	r30, r24
    222e:	e2 0f       	add	r30, r18
    2230:	f3 1f       	adc	r31, r19
    2232:	80 81       	ld	r24, Z
    2234:	80 93 c3 0a 	sts	0x0AC3, r24	; 0x800ac3 <__TEXT_REGION_LENGTH__+0x700ac3>
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	08 95       	ret

0000223e <_ZN4CSPI10OnTransmitEv>:
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
}

void CSPI::OnTransmit()
{
    223e:	fc 01       	movw	r30, r24
	if (rx_pos != 0)
    2240:	82 81       	ldd	r24, Z+2	; 0x02
    2242:	93 81       	ldd	r25, Z+3	; 0x03
    2244:	89 2b       	or	r24, r25
    2246:	79 f0       	breq	.+30     	; 0x2266 <_ZN4CSPI10OnTransmitEv+0x28>
		SPIE.DATA = buffer[--rx_pos];
    2248:	40 81       	ld	r20, Z
    224a:	51 81       	ldd	r21, Z+1	; 0x01
    224c:	22 81       	ldd	r18, Z+2	; 0x02
    224e:	33 81       	ldd	r19, Z+3	; 0x03
    2250:	c9 01       	movw	r24, r18
    2252:	01 97       	sbiw	r24, 0x01	; 1
    2254:	82 83       	std	Z+2, r24	; 0x02
    2256:	93 83       	std	Z+3, r25	; 0x03
    2258:	fa 01       	movw	r30, r20
    225a:	e8 0f       	add	r30, r24
    225c:	f9 1f       	adc	r31, r25
    225e:	80 81       	ld	r24, Z
    2260:	80 93 c3 0a 	sts	0x0AC3, r24	; 0x800ac3 <__TEXT_REGION_LENGTH__+0x700ac3>
    2264:	08 95       	ret
	else
		PORTE.OUTSET = PIN4_bm;
    2266:	80 e1       	ldi	r24, 0x10	; 16
    2268:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    226c:	08 95       	ret

0000226e <_ZN4CSPI16StaticOnTransmitEPv>:
}

void CSPI::StaticOnTransmit(void* sender)
{
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
    226e:	0e 94 1f 11 	call	0x223e	; 0x223e <_ZN4CSPI10OnTransmitEv>
    2272:	08 95       	ret

00002274 <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
    2274:	2c e5       	ldi	r18, 0x5C	; 92
    2276:	32 e2       	ldi	r19, 0x22	; 34
    2278:	fc 01       	movw	r30, r24
    227a:	20 83       	st	Z, r18
    227c:	31 83       	std	Z+1, r19	; 0x01
    227e:	08 95       	ret

00002280 <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
    2280:	08 95       	ret

00002282 <_ZN7CTimer1C1Ev>:


#include "CTimer1.h"

// default constructor
CTimer1::CTimer1()
    2282:	20 e8       	ldi	r18, 0x80	; 128
    2284:	32 e2       	ldi	r19, 0x22	; 34
    2286:	fc 01       	movw	r30, r24
    2288:	20 83       	st	Z, r18
    228a:	31 83       	std	Z+1, r19	; 0x01
    228c:	08 95       	ret

0000228e <_ZN7CTimer1D1Ev>:
{
} //CTimer1

// default destructor
CTimer1::~CTimer1()
    228e:	08 95       	ret

00002290 <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
    2290:	2e e9       	ldi	r18, 0x9E	; 158
    2292:	32 e2       	ldi	r19, 0x22	; 34
    2294:	fc 01       	movw	r30, r24
    2296:	20 83       	st	Z, r18
    2298:	31 83       	std	Z+1, r19	; 0x01
    229a:	08 95       	ret

0000229c <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
    229c:	08 95       	ret

0000229e <__vector_1>:
		if (InterruptFuncTable[vector_id##_num] != 0)										\
		(*(InterruptFuncTable[vector_id##_num]))(InterruptSenderTable[vector_id##_num]);	\
	}

/* OSC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(OSC_OSCF_vect)      /* External Oscillator Failure Interrupt (NMI) */
    229e:	1f 92       	push	r1
    22a0:	0f 92       	push	r0
    22a2:	0f b6       	in	r0, 0x3f	; 63
    22a4:	0f 92       	push	r0
    22a6:	11 24       	eor	r1, r1
    22a8:	0b b6       	in	r0, 0x3b	; 59
    22aa:	0f 92       	push	r0
    22ac:	2f 93       	push	r18
    22ae:	3f 93       	push	r19
    22b0:	4f 93       	push	r20
    22b2:	5f 93       	push	r21
    22b4:	6f 93       	push	r22
    22b6:	7f 93       	push	r23
    22b8:	8f 93       	push	r24
    22ba:	9f 93       	push	r25
    22bc:	af 93       	push	r26
    22be:	bf 93       	push	r27
    22c0:	ef 93       	push	r30
    22c2:	ff 93       	push	r31
    22c4:	e0 91 90 23 	lds	r30, 0x2390	; 0x802390 <InterruptFuncTable+0x2>
    22c8:	f0 91 91 23 	lds	r31, 0x2391	; 0x802391 <InterruptFuncTable+0x3>
    22cc:	30 97       	sbiw	r30, 0x00	; 0
    22ce:	29 f0       	breq	.+10     	; 0x22da <__vector_1+0x3c>
    22d0:	80 91 86 24 	lds	r24, 0x2486	; 0x802486 <InterruptSenderTable+0x2>
    22d4:	90 91 87 24 	lds	r25, 0x2487	; 0x802487 <InterruptSenderTable+0x3>
    22d8:	19 95       	eicall
    22da:	ff 91       	pop	r31
    22dc:	ef 91       	pop	r30
    22de:	bf 91       	pop	r27
    22e0:	af 91       	pop	r26
    22e2:	9f 91       	pop	r25
    22e4:	8f 91       	pop	r24
    22e6:	7f 91       	pop	r23
    22e8:	6f 91       	pop	r22
    22ea:	5f 91       	pop	r21
    22ec:	4f 91       	pop	r20
    22ee:	3f 91       	pop	r19
    22f0:	2f 91       	pop	r18
    22f2:	0f 90       	pop	r0
    22f4:	0b be       	out	0x3b, r0	; 59
    22f6:	0f 90       	pop	r0
    22f8:	0f be       	out	0x3f, r0	; 63
    22fa:	0f 90       	pop	r0
    22fc:	1f 90       	pop	r1
    22fe:	18 95       	reti

00002300 <__vector_2>:

/* PORTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT0_vect)      /* External Interrupt 0 */
    2300:	1f 92       	push	r1
    2302:	0f 92       	push	r0
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	0f 92       	push	r0
    2308:	11 24       	eor	r1, r1
    230a:	0b b6       	in	r0, 0x3b	; 59
    230c:	0f 92       	push	r0
    230e:	2f 93       	push	r18
    2310:	3f 93       	push	r19
    2312:	4f 93       	push	r20
    2314:	5f 93       	push	r21
    2316:	6f 93       	push	r22
    2318:	7f 93       	push	r23
    231a:	8f 93       	push	r24
    231c:	9f 93       	push	r25
    231e:	af 93       	push	r26
    2320:	bf 93       	push	r27
    2322:	ef 93       	push	r30
    2324:	ff 93       	push	r31
    2326:	e0 91 92 23 	lds	r30, 0x2392	; 0x802392 <InterruptFuncTable+0x4>
    232a:	f0 91 93 23 	lds	r31, 0x2393	; 0x802393 <InterruptFuncTable+0x5>
    232e:	30 97       	sbiw	r30, 0x00	; 0
    2330:	29 f0       	breq	.+10     	; 0x233c <__vector_2+0x3c>
    2332:	80 91 88 24 	lds	r24, 0x2488	; 0x802488 <InterruptSenderTable+0x4>
    2336:	90 91 89 24 	lds	r25, 0x2489	; 0x802489 <InterruptSenderTable+0x5>
    233a:	19 95       	eicall
    233c:	ff 91       	pop	r31
    233e:	ef 91       	pop	r30
    2340:	bf 91       	pop	r27
    2342:	af 91       	pop	r26
    2344:	9f 91       	pop	r25
    2346:	8f 91       	pop	r24
    2348:	7f 91       	pop	r23
    234a:	6f 91       	pop	r22
    234c:	5f 91       	pop	r21
    234e:	4f 91       	pop	r20
    2350:	3f 91       	pop	r19
    2352:	2f 91       	pop	r18
    2354:	0f 90       	pop	r0
    2356:	0b be       	out	0x3b, r0	; 59
    2358:	0f 90       	pop	r0
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	0f 90       	pop	r0
    235e:	1f 90       	pop	r1
    2360:	18 95       	reti

00002362 <__vector_3>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT1_vect)      /* External Interrupt 1 */
    2362:	1f 92       	push	r1
    2364:	0f 92       	push	r0
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	0f 92       	push	r0
    236a:	11 24       	eor	r1, r1
    236c:	0b b6       	in	r0, 0x3b	; 59
    236e:	0f 92       	push	r0
    2370:	2f 93       	push	r18
    2372:	3f 93       	push	r19
    2374:	4f 93       	push	r20
    2376:	5f 93       	push	r21
    2378:	6f 93       	push	r22
    237a:	7f 93       	push	r23
    237c:	8f 93       	push	r24
    237e:	9f 93       	push	r25
    2380:	af 93       	push	r26
    2382:	bf 93       	push	r27
    2384:	ef 93       	push	r30
    2386:	ff 93       	push	r31
    2388:	e0 91 94 23 	lds	r30, 0x2394	; 0x802394 <InterruptFuncTable+0x6>
    238c:	f0 91 95 23 	lds	r31, 0x2395	; 0x802395 <InterruptFuncTable+0x7>
    2390:	30 97       	sbiw	r30, 0x00	; 0
    2392:	29 f0       	breq	.+10     	; 0x239e <__vector_3+0x3c>
    2394:	80 91 8a 24 	lds	r24, 0x248A	; 0x80248a <InterruptSenderTable+0x6>
    2398:	90 91 8b 24 	lds	r25, 0x248B	; 0x80248b <InterruptSenderTable+0x7>
    239c:	19 95       	eicall
    239e:	ff 91       	pop	r31
    23a0:	ef 91       	pop	r30
    23a2:	bf 91       	pop	r27
    23a4:	af 91       	pop	r26
    23a6:	9f 91       	pop	r25
    23a8:	8f 91       	pop	r24
    23aa:	7f 91       	pop	r23
    23ac:	6f 91       	pop	r22
    23ae:	5f 91       	pop	r21
    23b0:	4f 91       	pop	r20
    23b2:	3f 91       	pop	r19
    23b4:	2f 91       	pop	r18
    23b6:	0f 90       	pop	r0
    23b8:	0b be       	out	0x3b, r0	; 59
    23ba:	0f 90       	pop	r0
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	0f 90       	pop	r0
    23c0:	1f 90       	pop	r1
    23c2:	18 95       	reti

000023c4 <__vector_4>:

/* PORTR interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT0_vect)      /* External Interrupt 0 */
    23c4:	1f 92       	push	r1
    23c6:	0f 92       	push	r0
    23c8:	0f b6       	in	r0, 0x3f	; 63
    23ca:	0f 92       	push	r0
    23cc:	11 24       	eor	r1, r1
    23ce:	0b b6       	in	r0, 0x3b	; 59
    23d0:	0f 92       	push	r0
    23d2:	2f 93       	push	r18
    23d4:	3f 93       	push	r19
    23d6:	4f 93       	push	r20
    23d8:	5f 93       	push	r21
    23da:	6f 93       	push	r22
    23dc:	7f 93       	push	r23
    23de:	8f 93       	push	r24
    23e0:	9f 93       	push	r25
    23e2:	af 93       	push	r26
    23e4:	bf 93       	push	r27
    23e6:	ef 93       	push	r30
    23e8:	ff 93       	push	r31
    23ea:	e0 91 96 23 	lds	r30, 0x2396	; 0x802396 <InterruptFuncTable+0x8>
    23ee:	f0 91 97 23 	lds	r31, 0x2397	; 0x802397 <InterruptFuncTable+0x9>
    23f2:	30 97       	sbiw	r30, 0x00	; 0
    23f4:	29 f0       	breq	.+10     	; 0x2400 <__vector_4+0x3c>
    23f6:	80 91 8c 24 	lds	r24, 0x248C	; 0x80248c <InterruptSenderTable+0x8>
    23fa:	90 91 8d 24 	lds	r25, 0x248D	; 0x80248d <InterruptSenderTable+0x9>
    23fe:	19 95       	eicall
    2400:	ff 91       	pop	r31
    2402:	ef 91       	pop	r30
    2404:	bf 91       	pop	r27
    2406:	af 91       	pop	r26
    2408:	9f 91       	pop	r25
    240a:	8f 91       	pop	r24
    240c:	7f 91       	pop	r23
    240e:	6f 91       	pop	r22
    2410:	5f 91       	pop	r21
    2412:	4f 91       	pop	r20
    2414:	3f 91       	pop	r19
    2416:	2f 91       	pop	r18
    2418:	0f 90       	pop	r0
    241a:	0b be       	out	0x3b, r0	; 59
    241c:	0f 90       	pop	r0
    241e:	0f be       	out	0x3f, r0	; 63
    2420:	0f 90       	pop	r0
    2422:	1f 90       	pop	r1
    2424:	18 95       	reti

00002426 <__vector_5>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT1_vect)      /* External Interrupt 1 */
    2426:	1f 92       	push	r1
    2428:	0f 92       	push	r0
    242a:	0f b6       	in	r0, 0x3f	; 63
    242c:	0f 92       	push	r0
    242e:	11 24       	eor	r1, r1
    2430:	0b b6       	in	r0, 0x3b	; 59
    2432:	0f 92       	push	r0
    2434:	2f 93       	push	r18
    2436:	3f 93       	push	r19
    2438:	4f 93       	push	r20
    243a:	5f 93       	push	r21
    243c:	6f 93       	push	r22
    243e:	7f 93       	push	r23
    2440:	8f 93       	push	r24
    2442:	9f 93       	push	r25
    2444:	af 93       	push	r26
    2446:	bf 93       	push	r27
    2448:	ef 93       	push	r30
    244a:	ff 93       	push	r31
    244c:	e0 91 98 23 	lds	r30, 0x2398	; 0x802398 <InterruptFuncTable+0xa>
    2450:	f0 91 99 23 	lds	r31, 0x2399	; 0x802399 <InterruptFuncTable+0xb>
    2454:	30 97       	sbiw	r30, 0x00	; 0
    2456:	29 f0       	breq	.+10     	; 0x2462 <__vector_5+0x3c>
    2458:	80 91 8e 24 	lds	r24, 0x248E	; 0x80248e <InterruptSenderTable+0xa>
    245c:	90 91 8f 24 	lds	r25, 0x248F	; 0x80248f <InterruptSenderTable+0xb>
    2460:	19 95       	eicall
    2462:	ff 91       	pop	r31
    2464:	ef 91       	pop	r30
    2466:	bf 91       	pop	r27
    2468:	af 91       	pop	r26
    246a:	9f 91       	pop	r25
    246c:	8f 91       	pop	r24
    246e:	7f 91       	pop	r23
    2470:	6f 91       	pop	r22
    2472:	5f 91       	pop	r21
    2474:	4f 91       	pop	r20
    2476:	3f 91       	pop	r19
    2478:	2f 91       	pop	r18
    247a:	0f 90       	pop	r0
    247c:	0b be       	out	0x3b, r0	; 59
    247e:	0f 90       	pop	r0
    2480:	0f be       	out	0x3f, r0	; 63
    2482:	0f 90       	pop	r0
    2484:	1f 90       	pop	r1
    2486:	18 95       	reti

00002488 <__vector_6>:

/* DMA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH0_vect)      /* Channel 0 Interrupt */
    2488:	1f 92       	push	r1
    248a:	0f 92       	push	r0
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	0f 92       	push	r0
    2490:	11 24       	eor	r1, r1
    2492:	0b b6       	in	r0, 0x3b	; 59
    2494:	0f 92       	push	r0
    2496:	2f 93       	push	r18
    2498:	3f 93       	push	r19
    249a:	4f 93       	push	r20
    249c:	5f 93       	push	r21
    249e:	6f 93       	push	r22
    24a0:	7f 93       	push	r23
    24a2:	8f 93       	push	r24
    24a4:	9f 93       	push	r25
    24a6:	af 93       	push	r26
    24a8:	bf 93       	push	r27
    24aa:	ef 93       	push	r30
    24ac:	ff 93       	push	r31
    24ae:	e0 91 9a 23 	lds	r30, 0x239A	; 0x80239a <InterruptFuncTable+0xc>
    24b2:	f0 91 9b 23 	lds	r31, 0x239B	; 0x80239b <InterruptFuncTable+0xd>
    24b6:	30 97       	sbiw	r30, 0x00	; 0
    24b8:	29 f0       	breq	.+10     	; 0x24c4 <__vector_6+0x3c>
    24ba:	80 91 90 24 	lds	r24, 0x2490	; 0x802490 <InterruptSenderTable+0xc>
    24be:	90 91 91 24 	lds	r25, 0x2491	; 0x802491 <InterruptSenderTable+0xd>
    24c2:	19 95       	eicall
    24c4:	ff 91       	pop	r31
    24c6:	ef 91       	pop	r30
    24c8:	bf 91       	pop	r27
    24ca:	af 91       	pop	r26
    24cc:	9f 91       	pop	r25
    24ce:	8f 91       	pop	r24
    24d0:	7f 91       	pop	r23
    24d2:	6f 91       	pop	r22
    24d4:	5f 91       	pop	r21
    24d6:	4f 91       	pop	r20
    24d8:	3f 91       	pop	r19
    24da:	2f 91       	pop	r18
    24dc:	0f 90       	pop	r0
    24de:	0b be       	out	0x3b, r0	; 59
    24e0:	0f 90       	pop	r0
    24e2:	0f be       	out	0x3f, r0	; 63
    24e4:	0f 90       	pop	r0
    24e6:	1f 90       	pop	r1
    24e8:	18 95       	reti

000024ea <__vector_7>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH1_vect)      /* Channel 1 Interrupt */
    24ea:	1f 92       	push	r1
    24ec:	0f 92       	push	r0
    24ee:	0f b6       	in	r0, 0x3f	; 63
    24f0:	0f 92       	push	r0
    24f2:	11 24       	eor	r1, r1
    24f4:	0b b6       	in	r0, 0x3b	; 59
    24f6:	0f 92       	push	r0
    24f8:	2f 93       	push	r18
    24fa:	3f 93       	push	r19
    24fc:	4f 93       	push	r20
    24fe:	5f 93       	push	r21
    2500:	6f 93       	push	r22
    2502:	7f 93       	push	r23
    2504:	8f 93       	push	r24
    2506:	9f 93       	push	r25
    2508:	af 93       	push	r26
    250a:	bf 93       	push	r27
    250c:	ef 93       	push	r30
    250e:	ff 93       	push	r31
    2510:	e0 91 9c 23 	lds	r30, 0x239C	; 0x80239c <InterruptFuncTable+0xe>
    2514:	f0 91 9d 23 	lds	r31, 0x239D	; 0x80239d <InterruptFuncTable+0xf>
    2518:	30 97       	sbiw	r30, 0x00	; 0
    251a:	29 f0       	breq	.+10     	; 0x2526 <__vector_7+0x3c>
    251c:	80 91 92 24 	lds	r24, 0x2492	; 0x802492 <InterruptSenderTable+0xe>
    2520:	90 91 93 24 	lds	r25, 0x2493	; 0x802493 <InterruptSenderTable+0xf>
    2524:	19 95       	eicall
    2526:	ff 91       	pop	r31
    2528:	ef 91       	pop	r30
    252a:	bf 91       	pop	r27
    252c:	af 91       	pop	r26
    252e:	9f 91       	pop	r25
    2530:	8f 91       	pop	r24
    2532:	7f 91       	pop	r23
    2534:	6f 91       	pop	r22
    2536:	5f 91       	pop	r21
    2538:	4f 91       	pop	r20
    253a:	3f 91       	pop	r19
    253c:	2f 91       	pop	r18
    253e:	0f 90       	pop	r0
    2540:	0b be       	out	0x3b, r0	; 59
    2542:	0f 90       	pop	r0
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	0f 90       	pop	r0
    2548:	1f 90       	pop	r1
    254a:	18 95       	reti

0000254c <__vector_8>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH2_vect)      /* Channel 2 Interrupt */
    254c:	1f 92       	push	r1
    254e:	0f 92       	push	r0
    2550:	0f b6       	in	r0, 0x3f	; 63
    2552:	0f 92       	push	r0
    2554:	11 24       	eor	r1, r1
    2556:	0b b6       	in	r0, 0x3b	; 59
    2558:	0f 92       	push	r0
    255a:	2f 93       	push	r18
    255c:	3f 93       	push	r19
    255e:	4f 93       	push	r20
    2560:	5f 93       	push	r21
    2562:	6f 93       	push	r22
    2564:	7f 93       	push	r23
    2566:	8f 93       	push	r24
    2568:	9f 93       	push	r25
    256a:	af 93       	push	r26
    256c:	bf 93       	push	r27
    256e:	ef 93       	push	r30
    2570:	ff 93       	push	r31
    2572:	e0 91 9e 23 	lds	r30, 0x239E	; 0x80239e <InterruptFuncTable+0x10>
    2576:	f0 91 9f 23 	lds	r31, 0x239F	; 0x80239f <InterruptFuncTable+0x11>
    257a:	30 97       	sbiw	r30, 0x00	; 0
    257c:	29 f0       	breq	.+10     	; 0x2588 <__vector_8+0x3c>
    257e:	80 91 94 24 	lds	r24, 0x2494	; 0x802494 <InterruptSenderTable+0x10>
    2582:	90 91 95 24 	lds	r25, 0x2495	; 0x802495 <InterruptSenderTable+0x11>
    2586:	19 95       	eicall
    2588:	ff 91       	pop	r31
    258a:	ef 91       	pop	r30
    258c:	bf 91       	pop	r27
    258e:	af 91       	pop	r26
    2590:	9f 91       	pop	r25
    2592:	8f 91       	pop	r24
    2594:	7f 91       	pop	r23
    2596:	6f 91       	pop	r22
    2598:	5f 91       	pop	r21
    259a:	4f 91       	pop	r20
    259c:	3f 91       	pop	r19
    259e:	2f 91       	pop	r18
    25a0:	0f 90       	pop	r0
    25a2:	0b be       	out	0x3b, r0	; 59
    25a4:	0f 90       	pop	r0
    25a6:	0f be       	out	0x3f, r0	; 63
    25a8:	0f 90       	pop	r0
    25aa:	1f 90       	pop	r1
    25ac:	18 95       	reti

000025ae <__vector_9>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH3_vect)      /* Channel 3 Interrupt */
    25ae:	1f 92       	push	r1
    25b0:	0f 92       	push	r0
    25b2:	0f b6       	in	r0, 0x3f	; 63
    25b4:	0f 92       	push	r0
    25b6:	11 24       	eor	r1, r1
    25b8:	0b b6       	in	r0, 0x3b	; 59
    25ba:	0f 92       	push	r0
    25bc:	2f 93       	push	r18
    25be:	3f 93       	push	r19
    25c0:	4f 93       	push	r20
    25c2:	5f 93       	push	r21
    25c4:	6f 93       	push	r22
    25c6:	7f 93       	push	r23
    25c8:	8f 93       	push	r24
    25ca:	9f 93       	push	r25
    25cc:	af 93       	push	r26
    25ce:	bf 93       	push	r27
    25d0:	ef 93       	push	r30
    25d2:	ff 93       	push	r31
    25d4:	e0 91 a0 23 	lds	r30, 0x23A0	; 0x8023a0 <InterruptFuncTable+0x12>
    25d8:	f0 91 a1 23 	lds	r31, 0x23A1	; 0x8023a1 <InterruptFuncTable+0x13>
    25dc:	30 97       	sbiw	r30, 0x00	; 0
    25de:	29 f0       	breq	.+10     	; 0x25ea <__vector_9+0x3c>
    25e0:	80 91 96 24 	lds	r24, 0x2496	; 0x802496 <InterruptSenderTable+0x12>
    25e4:	90 91 97 24 	lds	r25, 0x2497	; 0x802497 <InterruptSenderTable+0x13>
    25e8:	19 95       	eicall
    25ea:	ff 91       	pop	r31
    25ec:	ef 91       	pop	r30
    25ee:	bf 91       	pop	r27
    25f0:	af 91       	pop	r26
    25f2:	9f 91       	pop	r25
    25f4:	8f 91       	pop	r24
    25f6:	7f 91       	pop	r23
    25f8:	6f 91       	pop	r22
    25fa:	5f 91       	pop	r21
    25fc:	4f 91       	pop	r20
    25fe:	3f 91       	pop	r19
    2600:	2f 91       	pop	r18
    2602:	0f 90       	pop	r0
    2604:	0b be       	out	0x3b, r0	; 59
    2606:	0f 90       	pop	r0
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	0f 90       	pop	r0
    260c:	1f 90       	pop	r1
    260e:	18 95       	reti

00002610 <__vector_10>:

/* RTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_OVF_vect)      /* Overflow Interrupt */
    2610:	1f 92       	push	r1
    2612:	0f 92       	push	r0
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	0f 92       	push	r0
    2618:	11 24       	eor	r1, r1
    261a:	0b b6       	in	r0, 0x3b	; 59
    261c:	0f 92       	push	r0
    261e:	2f 93       	push	r18
    2620:	3f 93       	push	r19
    2622:	4f 93       	push	r20
    2624:	5f 93       	push	r21
    2626:	6f 93       	push	r22
    2628:	7f 93       	push	r23
    262a:	8f 93       	push	r24
    262c:	9f 93       	push	r25
    262e:	af 93       	push	r26
    2630:	bf 93       	push	r27
    2632:	ef 93       	push	r30
    2634:	ff 93       	push	r31
    2636:	e0 91 a2 23 	lds	r30, 0x23A2	; 0x8023a2 <InterruptFuncTable+0x14>
    263a:	f0 91 a3 23 	lds	r31, 0x23A3	; 0x8023a3 <InterruptFuncTable+0x15>
    263e:	30 97       	sbiw	r30, 0x00	; 0
    2640:	29 f0       	breq	.+10     	; 0x264c <__vector_10+0x3c>
    2642:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <InterruptSenderTable+0x14>
    2646:	90 91 99 24 	lds	r25, 0x2499	; 0x802499 <InterruptSenderTable+0x15>
    264a:	19 95       	eicall
    264c:	ff 91       	pop	r31
    264e:	ef 91       	pop	r30
    2650:	bf 91       	pop	r27
    2652:	af 91       	pop	r26
    2654:	9f 91       	pop	r25
    2656:	8f 91       	pop	r24
    2658:	7f 91       	pop	r23
    265a:	6f 91       	pop	r22
    265c:	5f 91       	pop	r21
    265e:	4f 91       	pop	r20
    2660:	3f 91       	pop	r19
    2662:	2f 91       	pop	r18
    2664:	0f 90       	pop	r0
    2666:	0b be       	out	0x3b, r0	; 59
    2668:	0f 90       	pop	r0
    266a:	0f be       	out	0x3f, r0	; 63
    266c:	0f 90       	pop	r0
    266e:	1f 90       	pop	r1
    2670:	18 95       	reti

00002672 <__vector_11>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_COMP_vect)      /* Compare Interrupt */
    2672:	1f 92       	push	r1
    2674:	0f 92       	push	r0
    2676:	0f b6       	in	r0, 0x3f	; 63
    2678:	0f 92       	push	r0
    267a:	11 24       	eor	r1, r1
    267c:	0b b6       	in	r0, 0x3b	; 59
    267e:	0f 92       	push	r0
    2680:	2f 93       	push	r18
    2682:	3f 93       	push	r19
    2684:	4f 93       	push	r20
    2686:	5f 93       	push	r21
    2688:	6f 93       	push	r22
    268a:	7f 93       	push	r23
    268c:	8f 93       	push	r24
    268e:	9f 93       	push	r25
    2690:	af 93       	push	r26
    2692:	bf 93       	push	r27
    2694:	ef 93       	push	r30
    2696:	ff 93       	push	r31
    2698:	e0 91 a4 23 	lds	r30, 0x23A4	; 0x8023a4 <InterruptFuncTable+0x16>
    269c:	f0 91 a5 23 	lds	r31, 0x23A5	; 0x8023a5 <InterruptFuncTable+0x17>
    26a0:	30 97       	sbiw	r30, 0x00	; 0
    26a2:	29 f0       	breq	.+10     	; 0x26ae <__vector_11+0x3c>
    26a4:	80 91 9a 24 	lds	r24, 0x249A	; 0x80249a <InterruptSenderTable+0x16>
    26a8:	90 91 9b 24 	lds	r25, 0x249B	; 0x80249b <InterruptSenderTable+0x17>
    26ac:	19 95       	eicall
    26ae:	ff 91       	pop	r31
    26b0:	ef 91       	pop	r30
    26b2:	bf 91       	pop	r27
    26b4:	af 91       	pop	r26
    26b6:	9f 91       	pop	r25
    26b8:	8f 91       	pop	r24
    26ba:	7f 91       	pop	r23
    26bc:	6f 91       	pop	r22
    26be:	5f 91       	pop	r21
    26c0:	4f 91       	pop	r20
    26c2:	3f 91       	pop	r19
    26c4:	2f 91       	pop	r18
    26c6:	0f 90       	pop	r0
    26c8:	0b be       	out	0x3b, r0	; 59
    26ca:	0f 90       	pop	r0
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	0f 90       	pop	r0
    26d0:	1f 90       	pop	r1
    26d2:	18 95       	reti

000026d4 <__vector_12>:

/* TWIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIS_vect)      /* TWI Slave Interrupt */
    26d4:	1f 92       	push	r1
    26d6:	0f 92       	push	r0
    26d8:	0f b6       	in	r0, 0x3f	; 63
    26da:	0f 92       	push	r0
    26dc:	11 24       	eor	r1, r1
    26de:	0b b6       	in	r0, 0x3b	; 59
    26e0:	0f 92       	push	r0
    26e2:	2f 93       	push	r18
    26e4:	3f 93       	push	r19
    26e6:	4f 93       	push	r20
    26e8:	5f 93       	push	r21
    26ea:	6f 93       	push	r22
    26ec:	7f 93       	push	r23
    26ee:	8f 93       	push	r24
    26f0:	9f 93       	push	r25
    26f2:	af 93       	push	r26
    26f4:	bf 93       	push	r27
    26f6:	ef 93       	push	r30
    26f8:	ff 93       	push	r31
    26fa:	e0 91 a6 23 	lds	r30, 0x23A6	; 0x8023a6 <InterruptFuncTable+0x18>
    26fe:	f0 91 a7 23 	lds	r31, 0x23A7	; 0x8023a7 <InterruptFuncTable+0x19>
    2702:	30 97       	sbiw	r30, 0x00	; 0
    2704:	29 f0       	breq	.+10     	; 0x2710 <__vector_12+0x3c>
    2706:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <InterruptSenderTable+0x18>
    270a:	90 91 9d 24 	lds	r25, 0x249D	; 0x80249d <InterruptSenderTable+0x19>
    270e:	19 95       	eicall
    2710:	ff 91       	pop	r31
    2712:	ef 91       	pop	r30
    2714:	bf 91       	pop	r27
    2716:	af 91       	pop	r26
    2718:	9f 91       	pop	r25
    271a:	8f 91       	pop	r24
    271c:	7f 91       	pop	r23
    271e:	6f 91       	pop	r22
    2720:	5f 91       	pop	r21
    2722:	4f 91       	pop	r20
    2724:	3f 91       	pop	r19
    2726:	2f 91       	pop	r18
    2728:	0f 90       	pop	r0
    272a:	0b be       	out	0x3b, r0	; 59
    272c:	0f 90       	pop	r0
    272e:	0f be       	out	0x3f, r0	; 63
    2730:	0f 90       	pop	r0
    2732:	1f 90       	pop	r1
    2734:	18 95       	reti

00002736 <__vector_13>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIM_vect)      /* TWI Master Interrupt */
    2736:	1f 92       	push	r1
    2738:	0f 92       	push	r0
    273a:	0f b6       	in	r0, 0x3f	; 63
    273c:	0f 92       	push	r0
    273e:	11 24       	eor	r1, r1
    2740:	0b b6       	in	r0, 0x3b	; 59
    2742:	0f 92       	push	r0
    2744:	2f 93       	push	r18
    2746:	3f 93       	push	r19
    2748:	4f 93       	push	r20
    274a:	5f 93       	push	r21
    274c:	6f 93       	push	r22
    274e:	7f 93       	push	r23
    2750:	8f 93       	push	r24
    2752:	9f 93       	push	r25
    2754:	af 93       	push	r26
    2756:	bf 93       	push	r27
    2758:	ef 93       	push	r30
    275a:	ff 93       	push	r31
    275c:	e0 91 a8 23 	lds	r30, 0x23A8	; 0x8023a8 <InterruptFuncTable+0x1a>
    2760:	f0 91 a9 23 	lds	r31, 0x23A9	; 0x8023a9 <InterruptFuncTable+0x1b>
    2764:	30 97       	sbiw	r30, 0x00	; 0
    2766:	29 f0       	breq	.+10     	; 0x2772 <__vector_13+0x3c>
    2768:	80 91 9e 24 	lds	r24, 0x249E	; 0x80249e <InterruptSenderTable+0x1a>
    276c:	90 91 9f 24 	lds	r25, 0x249F	; 0x80249f <InterruptSenderTable+0x1b>
    2770:	19 95       	eicall
    2772:	ff 91       	pop	r31
    2774:	ef 91       	pop	r30
    2776:	bf 91       	pop	r27
    2778:	af 91       	pop	r26
    277a:	9f 91       	pop	r25
    277c:	8f 91       	pop	r24
    277e:	7f 91       	pop	r23
    2780:	6f 91       	pop	r22
    2782:	5f 91       	pop	r21
    2784:	4f 91       	pop	r20
    2786:	3f 91       	pop	r19
    2788:	2f 91       	pop	r18
    278a:	0f 90       	pop	r0
    278c:	0b be       	out	0x3b, r0	; 59
    278e:	0f 90       	pop	r0
    2790:	0f be       	out	0x3f, r0	; 63
    2792:	0f 90       	pop	r0
    2794:	1f 90       	pop	r1
    2796:	18 95       	reti

00002798 <__vector_14>:

/* TCC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_OVF_vect)      /* Overflow Interrupt */
    2798:	1f 92       	push	r1
    279a:	0f 92       	push	r0
    279c:	0f b6       	in	r0, 0x3f	; 63
    279e:	0f 92       	push	r0
    27a0:	11 24       	eor	r1, r1
    27a2:	0b b6       	in	r0, 0x3b	; 59
    27a4:	0f 92       	push	r0
    27a6:	2f 93       	push	r18
    27a8:	3f 93       	push	r19
    27aa:	4f 93       	push	r20
    27ac:	5f 93       	push	r21
    27ae:	6f 93       	push	r22
    27b0:	7f 93       	push	r23
    27b2:	8f 93       	push	r24
    27b4:	9f 93       	push	r25
    27b6:	af 93       	push	r26
    27b8:	bf 93       	push	r27
    27ba:	ef 93       	push	r30
    27bc:	ff 93       	push	r31
    27be:	e0 91 aa 23 	lds	r30, 0x23AA	; 0x8023aa <InterruptFuncTable+0x1c>
    27c2:	f0 91 ab 23 	lds	r31, 0x23AB	; 0x8023ab <InterruptFuncTable+0x1d>
    27c6:	30 97       	sbiw	r30, 0x00	; 0
    27c8:	29 f0       	breq	.+10     	; 0x27d4 <__vector_14+0x3c>
    27ca:	80 91 a0 24 	lds	r24, 0x24A0	; 0x8024a0 <InterruptSenderTable+0x1c>
    27ce:	90 91 a1 24 	lds	r25, 0x24A1	; 0x8024a1 <InterruptSenderTable+0x1d>
    27d2:	19 95       	eicall
    27d4:	ff 91       	pop	r31
    27d6:	ef 91       	pop	r30
    27d8:	bf 91       	pop	r27
    27da:	af 91       	pop	r26
    27dc:	9f 91       	pop	r25
    27de:	8f 91       	pop	r24
    27e0:	7f 91       	pop	r23
    27e2:	6f 91       	pop	r22
    27e4:	5f 91       	pop	r21
    27e6:	4f 91       	pop	r20
    27e8:	3f 91       	pop	r19
    27ea:	2f 91       	pop	r18
    27ec:	0f 90       	pop	r0
    27ee:	0b be       	out	0x3b, r0	; 59
    27f0:	0f 90       	pop	r0
    27f2:	0f be       	out	0x3f, r0	; 63
    27f4:	0f 90       	pop	r0
    27f6:	1f 90       	pop	r1
    27f8:	18 95       	reti

000027fa <__vector_15>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_ERR_vect)      /* Error Interrupt */
    27fa:	1f 92       	push	r1
    27fc:	0f 92       	push	r0
    27fe:	0f b6       	in	r0, 0x3f	; 63
    2800:	0f 92       	push	r0
    2802:	11 24       	eor	r1, r1
    2804:	0b b6       	in	r0, 0x3b	; 59
    2806:	0f 92       	push	r0
    2808:	2f 93       	push	r18
    280a:	3f 93       	push	r19
    280c:	4f 93       	push	r20
    280e:	5f 93       	push	r21
    2810:	6f 93       	push	r22
    2812:	7f 93       	push	r23
    2814:	8f 93       	push	r24
    2816:	9f 93       	push	r25
    2818:	af 93       	push	r26
    281a:	bf 93       	push	r27
    281c:	ef 93       	push	r30
    281e:	ff 93       	push	r31
    2820:	e0 91 ac 23 	lds	r30, 0x23AC	; 0x8023ac <InterruptFuncTable+0x1e>
    2824:	f0 91 ad 23 	lds	r31, 0x23AD	; 0x8023ad <InterruptFuncTable+0x1f>
    2828:	30 97       	sbiw	r30, 0x00	; 0
    282a:	29 f0       	breq	.+10     	; 0x2836 <__vector_15+0x3c>
    282c:	80 91 a2 24 	lds	r24, 0x24A2	; 0x8024a2 <InterruptSenderTable+0x1e>
    2830:	90 91 a3 24 	lds	r25, 0x24A3	; 0x8024a3 <InterruptSenderTable+0x1f>
    2834:	19 95       	eicall
    2836:	ff 91       	pop	r31
    2838:	ef 91       	pop	r30
    283a:	bf 91       	pop	r27
    283c:	af 91       	pop	r26
    283e:	9f 91       	pop	r25
    2840:	8f 91       	pop	r24
    2842:	7f 91       	pop	r23
    2844:	6f 91       	pop	r22
    2846:	5f 91       	pop	r21
    2848:	4f 91       	pop	r20
    284a:	3f 91       	pop	r19
    284c:	2f 91       	pop	r18
    284e:	0f 90       	pop	r0
    2850:	0b be       	out	0x3b, r0	; 59
    2852:	0f 90       	pop	r0
    2854:	0f be       	out	0x3f, r0	; 63
    2856:	0f 90       	pop	r0
    2858:	1f 90       	pop	r1
    285a:	18 95       	reti

0000285c <__vector_16>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCA_vect)      /* Compare or Capture A Interrupt */
    285c:	1f 92       	push	r1
    285e:	0f 92       	push	r0
    2860:	0f b6       	in	r0, 0x3f	; 63
    2862:	0f 92       	push	r0
    2864:	11 24       	eor	r1, r1
    2866:	0b b6       	in	r0, 0x3b	; 59
    2868:	0f 92       	push	r0
    286a:	2f 93       	push	r18
    286c:	3f 93       	push	r19
    286e:	4f 93       	push	r20
    2870:	5f 93       	push	r21
    2872:	6f 93       	push	r22
    2874:	7f 93       	push	r23
    2876:	8f 93       	push	r24
    2878:	9f 93       	push	r25
    287a:	af 93       	push	r26
    287c:	bf 93       	push	r27
    287e:	ef 93       	push	r30
    2880:	ff 93       	push	r31
    2882:	e0 91 ae 23 	lds	r30, 0x23AE	; 0x8023ae <InterruptFuncTable+0x20>
    2886:	f0 91 af 23 	lds	r31, 0x23AF	; 0x8023af <InterruptFuncTable+0x21>
    288a:	30 97       	sbiw	r30, 0x00	; 0
    288c:	29 f0       	breq	.+10     	; 0x2898 <__vector_16+0x3c>
    288e:	80 91 a4 24 	lds	r24, 0x24A4	; 0x8024a4 <InterruptSenderTable+0x20>
    2892:	90 91 a5 24 	lds	r25, 0x24A5	; 0x8024a5 <InterruptSenderTable+0x21>
    2896:	19 95       	eicall
    2898:	ff 91       	pop	r31
    289a:	ef 91       	pop	r30
    289c:	bf 91       	pop	r27
    289e:	af 91       	pop	r26
    28a0:	9f 91       	pop	r25
    28a2:	8f 91       	pop	r24
    28a4:	7f 91       	pop	r23
    28a6:	6f 91       	pop	r22
    28a8:	5f 91       	pop	r21
    28aa:	4f 91       	pop	r20
    28ac:	3f 91       	pop	r19
    28ae:	2f 91       	pop	r18
    28b0:	0f 90       	pop	r0
    28b2:	0b be       	out	0x3b, r0	; 59
    28b4:	0f 90       	pop	r0
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	0f 90       	pop	r0
    28ba:	1f 90       	pop	r1
    28bc:	18 95       	reti

000028be <__vector_17>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCB_vect)      /* Compare or Capture B Interrupt */
    28be:	1f 92       	push	r1
    28c0:	0f 92       	push	r0
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	0f 92       	push	r0
    28c6:	11 24       	eor	r1, r1
    28c8:	0b b6       	in	r0, 0x3b	; 59
    28ca:	0f 92       	push	r0
    28cc:	2f 93       	push	r18
    28ce:	3f 93       	push	r19
    28d0:	4f 93       	push	r20
    28d2:	5f 93       	push	r21
    28d4:	6f 93       	push	r22
    28d6:	7f 93       	push	r23
    28d8:	8f 93       	push	r24
    28da:	9f 93       	push	r25
    28dc:	af 93       	push	r26
    28de:	bf 93       	push	r27
    28e0:	ef 93       	push	r30
    28e2:	ff 93       	push	r31
    28e4:	e0 91 b0 23 	lds	r30, 0x23B0	; 0x8023b0 <InterruptFuncTable+0x22>
    28e8:	f0 91 b1 23 	lds	r31, 0x23B1	; 0x8023b1 <InterruptFuncTable+0x23>
    28ec:	30 97       	sbiw	r30, 0x00	; 0
    28ee:	29 f0       	breq	.+10     	; 0x28fa <__vector_17+0x3c>
    28f0:	80 91 a6 24 	lds	r24, 0x24A6	; 0x8024a6 <InterruptSenderTable+0x22>
    28f4:	90 91 a7 24 	lds	r25, 0x24A7	; 0x8024a7 <InterruptSenderTable+0x23>
    28f8:	19 95       	eicall
    28fa:	ff 91       	pop	r31
    28fc:	ef 91       	pop	r30
    28fe:	bf 91       	pop	r27
    2900:	af 91       	pop	r26
    2902:	9f 91       	pop	r25
    2904:	8f 91       	pop	r24
    2906:	7f 91       	pop	r23
    2908:	6f 91       	pop	r22
    290a:	5f 91       	pop	r21
    290c:	4f 91       	pop	r20
    290e:	3f 91       	pop	r19
    2910:	2f 91       	pop	r18
    2912:	0f 90       	pop	r0
    2914:	0b be       	out	0x3b, r0	; 59
    2916:	0f 90       	pop	r0
    2918:	0f be       	out	0x3f, r0	; 63
    291a:	0f 90       	pop	r0
    291c:	1f 90       	pop	r1
    291e:	18 95       	reti

00002920 <__vector_18>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCC_vect)      /* Compare or Capture C Interrupt */
    2920:	1f 92       	push	r1
    2922:	0f 92       	push	r0
    2924:	0f b6       	in	r0, 0x3f	; 63
    2926:	0f 92       	push	r0
    2928:	11 24       	eor	r1, r1
    292a:	0b b6       	in	r0, 0x3b	; 59
    292c:	0f 92       	push	r0
    292e:	2f 93       	push	r18
    2930:	3f 93       	push	r19
    2932:	4f 93       	push	r20
    2934:	5f 93       	push	r21
    2936:	6f 93       	push	r22
    2938:	7f 93       	push	r23
    293a:	8f 93       	push	r24
    293c:	9f 93       	push	r25
    293e:	af 93       	push	r26
    2940:	bf 93       	push	r27
    2942:	ef 93       	push	r30
    2944:	ff 93       	push	r31
    2946:	e0 91 b2 23 	lds	r30, 0x23B2	; 0x8023b2 <InterruptFuncTable+0x24>
    294a:	f0 91 b3 23 	lds	r31, 0x23B3	; 0x8023b3 <InterruptFuncTable+0x25>
    294e:	30 97       	sbiw	r30, 0x00	; 0
    2950:	29 f0       	breq	.+10     	; 0x295c <__vector_18+0x3c>
    2952:	80 91 a8 24 	lds	r24, 0x24A8	; 0x8024a8 <InterruptSenderTable+0x24>
    2956:	90 91 a9 24 	lds	r25, 0x24A9	; 0x8024a9 <InterruptSenderTable+0x25>
    295a:	19 95       	eicall
    295c:	ff 91       	pop	r31
    295e:	ef 91       	pop	r30
    2960:	bf 91       	pop	r27
    2962:	af 91       	pop	r26
    2964:	9f 91       	pop	r25
    2966:	8f 91       	pop	r24
    2968:	7f 91       	pop	r23
    296a:	6f 91       	pop	r22
    296c:	5f 91       	pop	r21
    296e:	4f 91       	pop	r20
    2970:	3f 91       	pop	r19
    2972:	2f 91       	pop	r18
    2974:	0f 90       	pop	r0
    2976:	0b be       	out	0x3b, r0	; 59
    2978:	0f 90       	pop	r0
    297a:	0f be       	out	0x3f, r0	; 63
    297c:	0f 90       	pop	r0
    297e:	1f 90       	pop	r1
    2980:	18 95       	reti

00002982 <__vector_19>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCD_vect)      /* Compare or Capture D Interrupt */
    2982:	1f 92       	push	r1
    2984:	0f 92       	push	r0
    2986:	0f b6       	in	r0, 0x3f	; 63
    2988:	0f 92       	push	r0
    298a:	11 24       	eor	r1, r1
    298c:	0b b6       	in	r0, 0x3b	; 59
    298e:	0f 92       	push	r0
    2990:	2f 93       	push	r18
    2992:	3f 93       	push	r19
    2994:	4f 93       	push	r20
    2996:	5f 93       	push	r21
    2998:	6f 93       	push	r22
    299a:	7f 93       	push	r23
    299c:	8f 93       	push	r24
    299e:	9f 93       	push	r25
    29a0:	af 93       	push	r26
    29a2:	bf 93       	push	r27
    29a4:	ef 93       	push	r30
    29a6:	ff 93       	push	r31
    29a8:	e0 91 b4 23 	lds	r30, 0x23B4	; 0x8023b4 <InterruptFuncTable+0x26>
    29ac:	f0 91 b5 23 	lds	r31, 0x23B5	; 0x8023b5 <InterruptFuncTable+0x27>
    29b0:	30 97       	sbiw	r30, 0x00	; 0
    29b2:	29 f0       	breq	.+10     	; 0x29be <__vector_19+0x3c>
    29b4:	80 91 aa 24 	lds	r24, 0x24AA	; 0x8024aa <InterruptSenderTable+0x26>
    29b8:	90 91 ab 24 	lds	r25, 0x24AB	; 0x8024ab <InterruptSenderTable+0x27>
    29bc:	19 95       	eicall
    29be:	ff 91       	pop	r31
    29c0:	ef 91       	pop	r30
    29c2:	bf 91       	pop	r27
    29c4:	af 91       	pop	r26
    29c6:	9f 91       	pop	r25
    29c8:	8f 91       	pop	r24
    29ca:	7f 91       	pop	r23
    29cc:	6f 91       	pop	r22
    29ce:	5f 91       	pop	r21
    29d0:	4f 91       	pop	r20
    29d2:	3f 91       	pop	r19
    29d4:	2f 91       	pop	r18
    29d6:	0f 90       	pop	r0
    29d8:	0b be       	out	0x3b, r0	; 59
    29da:	0f 90       	pop	r0
    29dc:	0f be       	out	0x3f, r0	; 63
    29de:	0f 90       	pop	r0
    29e0:	1f 90       	pop	r1
    29e2:	18 95       	reti

000029e4 <__vector_20>:

/* TCC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_OVF_vect)      /* Overflow Interrupt */
    29e4:	1f 92       	push	r1
    29e6:	0f 92       	push	r0
    29e8:	0f b6       	in	r0, 0x3f	; 63
    29ea:	0f 92       	push	r0
    29ec:	11 24       	eor	r1, r1
    29ee:	0b b6       	in	r0, 0x3b	; 59
    29f0:	0f 92       	push	r0
    29f2:	2f 93       	push	r18
    29f4:	3f 93       	push	r19
    29f6:	4f 93       	push	r20
    29f8:	5f 93       	push	r21
    29fa:	6f 93       	push	r22
    29fc:	7f 93       	push	r23
    29fe:	8f 93       	push	r24
    2a00:	9f 93       	push	r25
    2a02:	af 93       	push	r26
    2a04:	bf 93       	push	r27
    2a06:	ef 93       	push	r30
    2a08:	ff 93       	push	r31
    2a0a:	e0 91 b6 23 	lds	r30, 0x23B6	; 0x8023b6 <InterruptFuncTable+0x28>
    2a0e:	f0 91 b7 23 	lds	r31, 0x23B7	; 0x8023b7 <InterruptFuncTable+0x29>
    2a12:	30 97       	sbiw	r30, 0x00	; 0
    2a14:	29 f0       	breq	.+10     	; 0x2a20 <__vector_20+0x3c>
    2a16:	80 91 ac 24 	lds	r24, 0x24AC	; 0x8024ac <InterruptSenderTable+0x28>
    2a1a:	90 91 ad 24 	lds	r25, 0x24AD	; 0x8024ad <InterruptSenderTable+0x29>
    2a1e:	19 95       	eicall
    2a20:	ff 91       	pop	r31
    2a22:	ef 91       	pop	r30
    2a24:	bf 91       	pop	r27
    2a26:	af 91       	pop	r26
    2a28:	9f 91       	pop	r25
    2a2a:	8f 91       	pop	r24
    2a2c:	7f 91       	pop	r23
    2a2e:	6f 91       	pop	r22
    2a30:	5f 91       	pop	r21
    2a32:	4f 91       	pop	r20
    2a34:	3f 91       	pop	r19
    2a36:	2f 91       	pop	r18
    2a38:	0f 90       	pop	r0
    2a3a:	0b be       	out	0x3b, r0	; 59
    2a3c:	0f 90       	pop	r0
    2a3e:	0f be       	out	0x3f, r0	; 63
    2a40:	0f 90       	pop	r0
    2a42:	1f 90       	pop	r1
    2a44:	18 95       	reti

00002a46 <__vector_21>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_ERR_vect)      /* Error Interrupt */
    2a46:	1f 92       	push	r1
    2a48:	0f 92       	push	r0
    2a4a:	0f b6       	in	r0, 0x3f	; 63
    2a4c:	0f 92       	push	r0
    2a4e:	11 24       	eor	r1, r1
    2a50:	0b b6       	in	r0, 0x3b	; 59
    2a52:	0f 92       	push	r0
    2a54:	2f 93       	push	r18
    2a56:	3f 93       	push	r19
    2a58:	4f 93       	push	r20
    2a5a:	5f 93       	push	r21
    2a5c:	6f 93       	push	r22
    2a5e:	7f 93       	push	r23
    2a60:	8f 93       	push	r24
    2a62:	9f 93       	push	r25
    2a64:	af 93       	push	r26
    2a66:	bf 93       	push	r27
    2a68:	ef 93       	push	r30
    2a6a:	ff 93       	push	r31
    2a6c:	e0 91 b8 23 	lds	r30, 0x23B8	; 0x8023b8 <InterruptFuncTable+0x2a>
    2a70:	f0 91 b9 23 	lds	r31, 0x23B9	; 0x8023b9 <InterruptFuncTable+0x2b>
    2a74:	30 97       	sbiw	r30, 0x00	; 0
    2a76:	29 f0       	breq	.+10     	; 0x2a82 <__vector_21+0x3c>
    2a78:	80 91 ae 24 	lds	r24, 0x24AE	; 0x8024ae <InterruptSenderTable+0x2a>
    2a7c:	90 91 af 24 	lds	r25, 0x24AF	; 0x8024af <InterruptSenderTable+0x2b>
    2a80:	19 95       	eicall
    2a82:	ff 91       	pop	r31
    2a84:	ef 91       	pop	r30
    2a86:	bf 91       	pop	r27
    2a88:	af 91       	pop	r26
    2a8a:	9f 91       	pop	r25
    2a8c:	8f 91       	pop	r24
    2a8e:	7f 91       	pop	r23
    2a90:	6f 91       	pop	r22
    2a92:	5f 91       	pop	r21
    2a94:	4f 91       	pop	r20
    2a96:	3f 91       	pop	r19
    2a98:	2f 91       	pop	r18
    2a9a:	0f 90       	pop	r0
    2a9c:	0b be       	out	0x3b, r0	; 59
    2a9e:	0f 90       	pop	r0
    2aa0:	0f be       	out	0x3f, r0	; 63
    2aa2:	0f 90       	pop	r0
    2aa4:	1f 90       	pop	r1
    2aa6:	18 95       	reti

00002aa8 <__vector_22>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCA_vect)      /* Compare or Capture A Interrupt */
    2aa8:	1f 92       	push	r1
    2aaa:	0f 92       	push	r0
    2aac:	0f b6       	in	r0, 0x3f	; 63
    2aae:	0f 92       	push	r0
    2ab0:	11 24       	eor	r1, r1
    2ab2:	0b b6       	in	r0, 0x3b	; 59
    2ab4:	0f 92       	push	r0
    2ab6:	2f 93       	push	r18
    2ab8:	3f 93       	push	r19
    2aba:	4f 93       	push	r20
    2abc:	5f 93       	push	r21
    2abe:	6f 93       	push	r22
    2ac0:	7f 93       	push	r23
    2ac2:	8f 93       	push	r24
    2ac4:	9f 93       	push	r25
    2ac6:	af 93       	push	r26
    2ac8:	bf 93       	push	r27
    2aca:	ef 93       	push	r30
    2acc:	ff 93       	push	r31
    2ace:	e0 91 ba 23 	lds	r30, 0x23BA	; 0x8023ba <InterruptFuncTable+0x2c>
    2ad2:	f0 91 bb 23 	lds	r31, 0x23BB	; 0x8023bb <InterruptFuncTable+0x2d>
    2ad6:	30 97       	sbiw	r30, 0x00	; 0
    2ad8:	29 f0       	breq	.+10     	; 0x2ae4 <__vector_22+0x3c>
    2ada:	80 91 b0 24 	lds	r24, 0x24B0	; 0x8024b0 <InterruptSenderTable+0x2c>
    2ade:	90 91 b1 24 	lds	r25, 0x24B1	; 0x8024b1 <InterruptSenderTable+0x2d>
    2ae2:	19 95       	eicall
    2ae4:	ff 91       	pop	r31
    2ae6:	ef 91       	pop	r30
    2ae8:	bf 91       	pop	r27
    2aea:	af 91       	pop	r26
    2aec:	9f 91       	pop	r25
    2aee:	8f 91       	pop	r24
    2af0:	7f 91       	pop	r23
    2af2:	6f 91       	pop	r22
    2af4:	5f 91       	pop	r21
    2af6:	4f 91       	pop	r20
    2af8:	3f 91       	pop	r19
    2afa:	2f 91       	pop	r18
    2afc:	0f 90       	pop	r0
    2afe:	0b be       	out	0x3b, r0	; 59
    2b00:	0f 90       	pop	r0
    2b02:	0f be       	out	0x3f, r0	; 63
    2b04:	0f 90       	pop	r0
    2b06:	1f 90       	pop	r1
    2b08:	18 95       	reti

00002b0a <__vector_23>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCB_vect)      /* Compare or Capture B Interrupt */
    2b0a:	1f 92       	push	r1
    2b0c:	0f 92       	push	r0
    2b0e:	0f b6       	in	r0, 0x3f	; 63
    2b10:	0f 92       	push	r0
    2b12:	11 24       	eor	r1, r1
    2b14:	0b b6       	in	r0, 0x3b	; 59
    2b16:	0f 92       	push	r0
    2b18:	2f 93       	push	r18
    2b1a:	3f 93       	push	r19
    2b1c:	4f 93       	push	r20
    2b1e:	5f 93       	push	r21
    2b20:	6f 93       	push	r22
    2b22:	7f 93       	push	r23
    2b24:	8f 93       	push	r24
    2b26:	9f 93       	push	r25
    2b28:	af 93       	push	r26
    2b2a:	bf 93       	push	r27
    2b2c:	ef 93       	push	r30
    2b2e:	ff 93       	push	r31
    2b30:	e0 91 bc 23 	lds	r30, 0x23BC	; 0x8023bc <InterruptFuncTable+0x2e>
    2b34:	f0 91 bd 23 	lds	r31, 0x23BD	; 0x8023bd <InterruptFuncTable+0x2f>
    2b38:	30 97       	sbiw	r30, 0x00	; 0
    2b3a:	29 f0       	breq	.+10     	; 0x2b46 <__vector_23+0x3c>
    2b3c:	80 91 b2 24 	lds	r24, 0x24B2	; 0x8024b2 <InterruptSenderTable+0x2e>
    2b40:	90 91 b3 24 	lds	r25, 0x24B3	; 0x8024b3 <InterruptSenderTable+0x2f>
    2b44:	19 95       	eicall
    2b46:	ff 91       	pop	r31
    2b48:	ef 91       	pop	r30
    2b4a:	bf 91       	pop	r27
    2b4c:	af 91       	pop	r26
    2b4e:	9f 91       	pop	r25
    2b50:	8f 91       	pop	r24
    2b52:	7f 91       	pop	r23
    2b54:	6f 91       	pop	r22
    2b56:	5f 91       	pop	r21
    2b58:	4f 91       	pop	r20
    2b5a:	3f 91       	pop	r19
    2b5c:	2f 91       	pop	r18
    2b5e:	0f 90       	pop	r0
    2b60:	0b be       	out	0x3b, r0	; 59
    2b62:	0f 90       	pop	r0
    2b64:	0f be       	out	0x3f, r0	; 63
    2b66:	0f 90       	pop	r0
    2b68:	1f 90       	pop	r1
    2b6a:	18 95       	reti

00002b6c <__vector_24>:

/* SPIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIC_INT_vect)      /* SPI Interrupt */
    2b6c:	1f 92       	push	r1
    2b6e:	0f 92       	push	r0
    2b70:	0f b6       	in	r0, 0x3f	; 63
    2b72:	0f 92       	push	r0
    2b74:	11 24       	eor	r1, r1
    2b76:	0b b6       	in	r0, 0x3b	; 59
    2b78:	0f 92       	push	r0
    2b7a:	2f 93       	push	r18
    2b7c:	3f 93       	push	r19
    2b7e:	4f 93       	push	r20
    2b80:	5f 93       	push	r21
    2b82:	6f 93       	push	r22
    2b84:	7f 93       	push	r23
    2b86:	8f 93       	push	r24
    2b88:	9f 93       	push	r25
    2b8a:	af 93       	push	r26
    2b8c:	bf 93       	push	r27
    2b8e:	ef 93       	push	r30
    2b90:	ff 93       	push	r31
    2b92:	e0 91 be 23 	lds	r30, 0x23BE	; 0x8023be <InterruptFuncTable+0x30>
    2b96:	f0 91 bf 23 	lds	r31, 0x23BF	; 0x8023bf <InterruptFuncTable+0x31>
    2b9a:	30 97       	sbiw	r30, 0x00	; 0
    2b9c:	29 f0       	breq	.+10     	; 0x2ba8 <__vector_24+0x3c>
    2b9e:	80 91 b4 24 	lds	r24, 0x24B4	; 0x8024b4 <InterruptSenderTable+0x30>
    2ba2:	90 91 b5 24 	lds	r25, 0x24B5	; 0x8024b5 <InterruptSenderTable+0x31>
    2ba6:	19 95       	eicall
    2ba8:	ff 91       	pop	r31
    2baa:	ef 91       	pop	r30
    2bac:	bf 91       	pop	r27
    2bae:	af 91       	pop	r26
    2bb0:	9f 91       	pop	r25
    2bb2:	8f 91       	pop	r24
    2bb4:	7f 91       	pop	r23
    2bb6:	6f 91       	pop	r22
    2bb8:	5f 91       	pop	r21
    2bba:	4f 91       	pop	r20
    2bbc:	3f 91       	pop	r19
    2bbe:	2f 91       	pop	r18
    2bc0:	0f 90       	pop	r0
    2bc2:	0b be       	out	0x3b, r0	; 59
    2bc4:	0f 90       	pop	r0
    2bc6:	0f be       	out	0x3f, r0	; 63
    2bc8:	0f 90       	pop	r0
    2bca:	1f 90       	pop	r1
    2bcc:	18 95       	reti

00002bce <__vector_25>:

/* USARTC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_RXC_vect)      /* Reception Complete Interrupt */
    2bce:	1f 92       	push	r1
    2bd0:	0f 92       	push	r0
    2bd2:	0f b6       	in	r0, 0x3f	; 63
    2bd4:	0f 92       	push	r0
    2bd6:	11 24       	eor	r1, r1
    2bd8:	0b b6       	in	r0, 0x3b	; 59
    2bda:	0f 92       	push	r0
    2bdc:	2f 93       	push	r18
    2bde:	3f 93       	push	r19
    2be0:	4f 93       	push	r20
    2be2:	5f 93       	push	r21
    2be4:	6f 93       	push	r22
    2be6:	7f 93       	push	r23
    2be8:	8f 93       	push	r24
    2bea:	9f 93       	push	r25
    2bec:	af 93       	push	r26
    2bee:	bf 93       	push	r27
    2bf0:	ef 93       	push	r30
    2bf2:	ff 93       	push	r31
    2bf4:	e0 91 c0 23 	lds	r30, 0x23C0	; 0x8023c0 <InterruptFuncTable+0x32>
    2bf8:	f0 91 c1 23 	lds	r31, 0x23C1	; 0x8023c1 <InterruptFuncTable+0x33>
    2bfc:	30 97       	sbiw	r30, 0x00	; 0
    2bfe:	29 f0       	breq	.+10     	; 0x2c0a <__vector_25+0x3c>
    2c00:	80 91 b6 24 	lds	r24, 0x24B6	; 0x8024b6 <InterruptSenderTable+0x32>
    2c04:	90 91 b7 24 	lds	r25, 0x24B7	; 0x8024b7 <InterruptSenderTable+0x33>
    2c08:	19 95       	eicall
    2c0a:	ff 91       	pop	r31
    2c0c:	ef 91       	pop	r30
    2c0e:	bf 91       	pop	r27
    2c10:	af 91       	pop	r26
    2c12:	9f 91       	pop	r25
    2c14:	8f 91       	pop	r24
    2c16:	7f 91       	pop	r23
    2c18:	6f 91       	pop	r22
    2c1a:	5f 91       	pop	r21
    2c1c:	4f 91       	pop	r20
    2c1e:	3f 91       	pop	r19
    2c20:	2f 91       	pop	r18
    2c22:	0f 90       	pop	r0
    2c24:	0b be       	out	0x3b, r0	; 59
    2c26:	0f 90       	pop	r0
    2c28:	0f be       	out	0x3f, r0	; 63
    2c2a:	0f 90       	pop	r0
    2c2c:	1f 90       	pop	r1
    2c2e:	18 95       	reti

00002c30 <__vector_26>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_DRE_vect)      /* Data Register Empty Interrupt */
    2c30:	1f 92       	push	r1
    2c32:	0f 92       	push	r0
    2c34:	0f b6       	in	r0, 0x3f	; 63
    2c36:	0f 92       	push	r0
    2c38:	11 24       	eor	r1, r1
    2c3a:	0b b6       	in	r0, 0x3b	; 59
    2c3c:	0f 92       	push	r0
    2c3e:	2f 93       	push	r18
    2c40:	3f 93       	push	r19
    2c42:	4f 93       	push	r20
    2c44:	5f 93       	push	r21
    2c46:	6f 93       	push	r22
    2c48:	7f 93       	push	r23
    2c4a:	8f 93       	push	r24
    2c4c:	9f 93       	push	r25
    2c4e:	af 93       	push	r26
    2c50:	bf 93       	push	r27
    2c52:	ef 93       	push	r30
    2c54:	ff 93       	push	r31
    2c56:	e0 91 c2 23 	lds	r30, 0x23C2	; 0x8023c2 <InterruptFuncTable+0x34>
    2c5a:	f0 91 c3 23 	lds	r31, 0x23C3	; 0x8023c3 <InterruptFuncTable+0x35>
    2c5e:	30 97       	sbiw	r30, 0x00	; 0
    2c60:	29 f0       	breq	.+10     	; 0x2c6c <__vector_26+0x3c>
    2c62:	80 91 b8 24 	lds	r24, 0x24B8	; 0x8024b8 <InterruptSenderTable+0x34>
    2c66:	90 91 b9 24 	lds	r25, 0x24B9	; 0x8024b9 <InterruptSenderTable+0x35>
    2c6a:	19 95       	eicall
    2c6c:	ff 91       	pop	r31
    2c6e:	ef 91       	pop	r30
    2c70:	bf 91       	pop	r27
    2c72:	af 91       	pop	r26
    2c74:	9f 91       	pop	r25
    2c76:	8f 91       	pop	r24
    2c78:	7f 91       	pop	r23
    2c7a:	6f 91       	pop	r22
    2c7c:	5f 91       	pop	r21
    2c7e:	4f 91       	pop	r20
    2c80:	3f 91       	pop	r19
    2c82:	2f 91       	pop	r18
    2c84:	0f 90       	pop	r0
    2c86:	0b be       	out	0x3b, r0	; 59
    2c88:	0f 90       	pop	r0
    2c8a:	0f be       	out	0x3f, r0	; 63
    2c8c:	0f 90       	pop	r0
    2c8e:	1f 90       	pop	r1
    2c90:	18 95       	reti

00002c92 <__vector_27>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_TXC_vect)      /* Transmission Complete Interrupt */
    2c92:	1f 92       	push	r1
    2c94:	0f 92       	push	r0
    2c96:	0f b6       	in	r0, 0x3f	; 63
    2c98:	0f 92       	push	r0
    2c9a:	11 24       	eor	r1, r1
    2c9c:	0b b6       	in	r0, 0x3b	; 59
    2c9e:	0f 92       	push	r0
    2ca0:	2f 93       	push	r18
    2ca2:	3f 93       	push	r19
    2ca4:	4f 93       	push	r20
    2ca6:	5f 93       	push	r21
    2ca8:	6f 93       	push	r22
    2caa:	7f 93       	push	r23
    2cac:	8f 93       	push	r24
    2cae:	9f 93       	push	r25
    2cb0:	af 93       	push	r26
    2cb2:	bf 93       	push	r27
    2cb4:	ef 93       	push	r30
    2cb6:	ff 93       	push	r31
    2cb8:	e0 91 c4 23 	lds	r30, 0x23C4	; 0x8023c4 <InterruptFuncTable+0x36>
    2cbc:	f0 91 c5 23 	lds	r31, 0x23C5	; 0x8023c5 <InterruptFuncTable+0x37>
    2cc0:	30 97       	sbiw	r30, 0x00	; 0
    2cc2:	29 f0       	breq	.+10     	; 0x2cce <__vector_27+0x3c>
    2cc4:	80 91 ba 24 	lds	r24, 0x24BA	; 0x8024ba <InterruptSenderTable+0x36>
    2cc8:	90 91 bb 24 	lds	r25, 0x24BB	; 0x8024bb <InterruptSenderTable+0x37>
    2ccc:	19 95       	eicall
    2cce:	ff 91       	pop	r31
    2cd0:	ef 91       	pop	r30
    2cd2:	bf 91       	pop	r27
    2cd4:	af 91       	pop	r26
    2cd6:	9f 91       	pop	r25
    2cd8:	8f 91       	pop	r24
    2cda:	7f 91       	pop	r23
    2cdc:	6f 91       	pop	r22
    2cde:	5f 91       	pop	r21
    2ce0:	4f 91       	pop	r20
    2ce2:	3f 91       	pop	r19
    2ce4:	2f 91       	pop	r18
    2ce6:	0f 90       	pop	r0
    2ce8:	0b be       	out	0x3b, r0	; 59
    2cea:	0f 90       	pop	r0
    2cec:	0f be       	out	0x3f, r0	; 63
    2cee:	0f 90       	pop	r0
    2cf0:	1f 90       	pop	r1
    2cf2:	18 95       	reti

00002cf4 <__vector_28>:

/* USARTC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_RXC_vect)      /* Reception Complete Interrupt */
    2cf4:	1f 92       	push	r1
    2cf6:	0f 92       	push	r0
    2cf8:	0f b6       	in	r0, 0x3f	; 63
    2cfa:	0f 92       	push	r0
    2cfc:	11 24       	eor	r1, r1
    2cfe:	0b b6       	in	r0, 0x3b	; 59
    2d00:	0f 92       	push	r0
    2d02:	2f 93       	push	r18
    2d04:	3f 93       	push	r19
    2d06:	4f 93       	push	r20
    2d08:	5f 93       	push	r21
    2d0a:	6f 93       	push	r22
    2d0c:	7f 93       	push	r23
    2d0e:	8f 93       	push	r24
    2d10:	9f 93       	push	r25
    2d12:	af 93       	push	r26
    2d14:	bf 93       	push	r27
    2d16:	ef 93       	push	r30
    2d18:	ff 93       	push	r31
    2d1a:	e0 91 c6 23 	lds	r30, 0x23C6	; 0x8023c6 <InterruptFuncTable+0x38>
    2d1e:	f0 91 c7 23 	lds	r31, 0x23C7	; 0x8023c7 <InterruptFuncTable+0x39>
    2d22:	30 97       	sbiw	r30, 0x00	; 0
    2d24:	29 f0       	breq	.+10     	; 0x2d30 <__vector_28+0x3c>
    2d26:	80 91 bc 24 	lds	r24, 0x24BC	; 0x8024bc <InterruptSenderTable+0x38>
    2d2a:	90 91 bd 24 	lds	r25, 0x24BD	; 0x8024bd <InterruptSenderTable+0x39>
    2d2e:	19 95       	eicall
    2d30:	ff 91       	pop	r31
    2d32:	ef 91       	pop	r30
    2d34:	bf 91       	pop	r27
    2d36:	af 91       	pop	r26
    2d38:	9f 91       	pop	r25
    2d3a:	8f 91       	pop	r24
    2d3c:	7f 91       	pop	r23
    2d3e:	6f 91       	pop	r22
    2d40:	5f 91       	pop	r21
    2d42:	4f 91       	pop	r20
    2d44:	3f 91       	pop	r19
    2d46:	2f 91       	pop	r18
    2d48:	0f 90       	pop	r0
    2d4a:	0b be       	out	0x3b, r0	; 59
    2d4c:	0f 90       	pop	r0
    2d4e:	0f be       	out	0x3f, r0	; 63
    2d50:	0f 90       	pop	r0
    2d52:	1f 90       	pop	r1
    2d54:	18 95       	reti

00002d56 <__vector_29>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_DRE_vect)      /* Data Register Empty Interrupt */
    2d56:	1f 92       	push	r1
    2d58:	0f 92       	push	r0
    2d5a:	0f b6       	in	r0, 0x3f	; 63
    2d5c:	0f 92       	push	r0
    2d5e:	11 24       	eor	r1, r1
    2d60:	0b b6       	in	r0, 0x3b	; 59
    2d62:	0f 92       	push	r0
    2d64:	2f 93       	push	r18
    2d66:	3f 93       	push	r19
    2d68:	4f 93       	push	r20
    2d6a:	5f 93       	push	r21
    2d6c:	6f 93       	push	r22
    2d6e:	7f 93       	push	r23
    2d70:	8f 93       	push	r24
    2d72:	9f 93       	push	r25
    2d74:	af 93       	push	r26
    2d76:	bf 93       	push	r27
    2d78:	ef 93       	push	r30
    2d7a:	ff 93       	push	r31
    2d7c:	e0 91 c8 23 	lds	r30, 0x23C8	; 0x8023c8 <InterruptFuncTable+0x3a>
    2d80:	f0 91 c9 23 	lds	r31, 0x23C9	; 0x8023c9 <InterruptFuncTable+0x3b>
    2d84:	30 97       	sbiw	r30, 0x00	; 0
    2d86:	29 f0       	breq	.+10     	; 0x2d92 <__vector_29+0x3c>
    2d88:	80 91 be 24 	lds	r24, 0x24BE	; 0x8024be <InterruptSenderTable+0x3a>
    2d8c:	90 91 bf 24 	lds	r25, 0x24BF	; 0x8024bf <InterruptSenderTable+0x3b>
    2d90:	19 95       	eicall
    2d92:	ff 91       	pop	r31
    2d94:	ef 91       	pop	r30
    2d96:	bf 91       	pop	r27
    2d98:	af 91       	pop	r26
    2d9a:	9f 91       	pop	r25
    2d9c:	8f 91       	pop	r24
    2d9e:	7f 91       	pop	r23
    2da0:	6f 91       	pop	r22
    2da2:	5f 91       	pop	r21
    2da4:	4f 91       	pop	r20
    2da6:	3f 91       	pop	r19
    2da8:	2f 91       	pop	r18
    2daa:	0f 90       	pop	r0
    2dac:	0b be       	out	0x3b, r0	; 59
    2dae:	0f 90       	pop	r0
    2db0:	0f be       	out	0x3f, r0	; 63
    2db2:	0f 90       	pop	r0
    2db4:	1f 90       	pop	r1
    2db6:	18 95       	reti

00002db8 <__vector_30>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_TXC_vect)      /* Transmission Complete Interrupt */
    2db8:	1f 92       	push	r1
    2dba:	0f 92       	push	r0
    2dbc:	0f b6       	in	r0, 0x3f	; 63
    2dbe:	0f 92       	push	r0
    2dc0:	11 24       	eor	r1, r1
    2dc2:	0b b6       	in	r0, 0x3b	; 59
    2dc4:	0f 92       	push	r0
    2dc6:	2f 93       	push	r18
    2dc8:	3f 93       	push	r19
    2dca:	4f 93       	push	r20
    2dcc:	5f 93       	push	r21
    2dce:	6f 93       	push	r22
    2dd0:	7f 93       	push	r23
    2dd2:	8f 93       	push	r24
    2dd4:	9f 93       	push	r25
    2dd6:	af 93       	push	r26
    2dd8:	bf 93       	push	r27
    2dda:	ef 93       	push	r30
    2ddc:	ff 93       	push	r31
    2dde:	e0 91 ca 23 	lds	r30, 0x23CA	; 0x8023ca <InterruptFuncTable+0x3c>
    2de2:	f0 91 cb 23 	lds	r31, 0x23CB	; 0x8023cb <InterruptFuncTable+0x3d>
    2de6:	30 97       	sbiw	r30, 0x00	; 0
    2de8:	29 f0       	breq	.+10     	; 0x2df4 <__vector_30+0x3c>
    2dea:	80 91 c0 24 	lds	r24, 0x24C0	; 0x8024c0 <InterruptSenderTable+0x3c>
    2dee:	90 91 c1 24 	lds	r25, 0x24C1	; 0x8024c1 <InterruptSenderTable+0x3d>
    2df2:	19 95       	eicall
    2df4:	ff 91       	pop	r31
    2df6:	ef 91       	pop	r30
    2df8:	bf 91       	pop	r27
    2dfa:	af 91       	pop	r26
    2dfc:	9f 91       	pop	r25
    2dfe:	8f 91       	pop	r24
    2e00:	7f 91       	pop	r23
    2e02:	6f 91       	pop	r22
    2e04:	5f 91       	pop	r21
    2e06:	4f 91       	pop	r20
    2e08:	3f 91       	pop	r19
    2e0a:	2f 91       	pop	r18
    2e0c:	0f 90       	pop	r0
    2e0e:	0b be       	out	0x3b, r0	; 59
    2e10:	0f 90       	pop	r0
    2e12:	0f be       	out	0x3f, r0	; 63
    2e14:	0f 90       	pop	r0
    2e16:	1f 90       	pop	r1
    2e18:	18 95       	reti

00002e1a <__vector_31>:

/* AES interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(AES_INT_vect)      /* AES Interrupt */
    2e1a:	1f 92       	push	r1
    2e1c:	0f 92       	push	r0
    2e1e:	0f b6       	in	r0, 0x3f	; 63
    2e20:	0f 92       	push	r0
    2e22:	11 24       	eor	r1, r1
    2e24:	0b b6       	in	r0, 0x3b	; 59
    2e26:	0f 92       	push	r0
    2e28:	2f 93       	push	r18
    2e2a:	3f 93       	push	r19
    2e2c:	4f 93       	push	r20
    2e2e:	5f 93       	push	r21
    2e30:	6f 93       	push	r22
    2e32:	7f 93       	push	r23
    2e34:	8f 93       	push	r24
    2e36:	9f 93       	push	r25
    2e38:	af 93       	push	r26
    2e3a:	bf 93       	push	r27
    2e3c:	ef 93       	push	r30
    2e3e:	ff 93       	push	r31
    2e40:	e0 91 cc 23 	lds	r30, 0x23CC	; 0x8023cc <InterruptFuncTable+0x3e>
    2e44:	f0 91 cd 23 	lds	r31, 0x23CD	; 0x8023cd <InterruptFuncTable+0x3f>
    2e48:	30 97       	sbiw	r30, 0x00	; 0
    2e4a:	29 f0       	breq	.+10     	; 0x2e56 <__vector_31+0x3c>
    2e4c:	80 91 c2 24 	lds	r24, 0x24C2	; 0x8024c2 <InterruptSenderTable+0x3e>
    2e50:	90 91 c3 24 	lds	r25, 0x24C3	; 0x8024c3 <InterruptSenderTable+0x3f>
    2e54:	19 95       	eicall
    2e56:	ff 91       	pop	r31
    2e58:	ef 91       	pop	r30
    2e5a:	bf 91       	pop	r27
    2e5c:	af 91       	pop	r26
    2e5e:	9f 91       	pop	r25
    2e60:	8f 91       	pop	r24
    2e62:	7f 91       	pop	r23
    2e64:	6f 91       	pop	r22
    2e66:	5f 91       	pop	r21
    2e68:	4f 91       	pop	r20
    2e6a:	3f 91       	pop	r19
    2e6c:	2f 91       	pop	r18
    2e6e:	0f 90       	pop	r0
    2e70:	0b be       	out	0x3b, r0	; 59
    2e72:	0f 90       	pop	r0
    2e74:	0f be       	out	0x3f, r0	; 63
    2e76:	0f 90       	pop	r0
    2e78:	1f 90       	pop	r1
    2e7a:	18 95       	reti

00002e7c <__vector_32>:

/* NVM interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_EE_vect)      /* EE Interrupt */
    2e7c:	1f 92       	push	r1
    2e7e:	0f 92       	push	r0
    2e80:	0f b6       	in	r0, 0x3f	; 63
    2e82:	0f 92       	push	r0
    2e84:	11 24       	eor	r1, r1
    2e86:	0b b6       	in	r0, 0x3b	; 59
    2e88:	0f 92       	push	r0
    2e8a:	2f 93       	push	r18
    2e8c:	3f 93       	push	r19
    2e8e:	4f 93       	push	r20
    2e90:	5f 93       	push	r21
    2e92:	6f 93       	push	r22
    2e94:	7f 93       	push	r23
    2e96:	8f 93       	push	r24
    2e98:	9f 93       	push	r25
    2e9a:	af 93       	push	r26
    2e9c:	bf 93       	push	r27
    2e9e:	ef 93       	push	r30
    2ea0:	ff 93       	push	r31
    2ea2:	e0 91 ce 23 	lds	r30, 0x23CE	; 0x8023ce <InterruptFuncTable+0x40>
    2ea6:	f0 91 cf 23 	lds	r31, 0x23CF	; 0x8023cf <InterruptFuncTable+0x41>
    2eaa:	30 97       	sbiw	r30, 0x00	; 0
    2eac:	29 f0       	breq	.+10     	; 0x2eb8 <__vector_32+0x3c>
    2eae:	80 91 c4 24 	lds	r24, 0x24C4	; 0x8024c4 <InterruptSenderTable+0x40>
    2eb2:	90 91 c5 24 	lds	r25, 0x24C5	; 0x8024c5 <InterruptSenderTable+0x41>
    2eb6:	19 95       	eicall
    2eb8:	ff 91       	pop	r31
    2eba:	ef 91       	pop	r30
    2ebc:	bf 91       	pop	r27
    2ebe:	af 91       	pop	r26
    2ec0:	9f 91       	pop	r25
    2ec2:	8f 91       	pop	r24
    2ec4:	7f 91       	pop	r23
    2ec6:	6f 91       	pop	r22
    2ec8:	5f 91       	pop	r21
    2eca:	4f 91       	pop	r20
    2ecc:	3f 91       	pop	r19
    2ece:	2f 91       	pop	r18
    2ed0:	0f 90       	pop	r0
    2ed2:	0b be       	out	0x3b, r0	; 59
    2ed4:	0f 90       	pop	r0
    2ed6:	0f be       	out	0x3f, r0	; 63
    2ed8:	0f 90       	pop	r0
    2eda:	1f 90       	pop	r1
    2edc:	18 95       	reti

00002ede <__vector_33>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_SPM_vect)      /* SPM Interrupt */
    2ede:	1f 92       	push	r1
    2ee0:	0f 92       	push	r0
    2ee2:	0f b6       	in	r0, 0x3f	; 63
    2ee4:	0f 92       	push	r0
    2ee6:	11 24       	eor	r1, r1
    2ee8:	0b b6       	in	r0, 0x3b	; 59
    2eea:	0f 92       	push	r0
    2eec:	2f 93       	push	r18
    2eee:	3f 93       	push	r19
    2ef0:	4f 93       	push	r20
    2ef2:	5f 93       	push	r21
    2ef4:	6f 93       	push	r22
    2ef6:	7f 93       	push	r23
    2ef8:	8f 93       	push	r24
    2efa:	9f 93       	push	r25
    2efc:	af 93       	push	r26
    2efe:	bf 93       	push	r27
    2f00:	ef 93       	push	r30
    2f02:	ff 93       	push	r31
    2f04:	e0 91 d0 23 	lds	r30, 0x23D0	; 0x8023d0 <InterruptFuncTable+0x42>
    2f08:	f0 91 d1 23 	lds	r31, 0x23D1	; 0x8023d1 <InterruptFuncTable+0x43>
    2f0c:	30 97       	sbiw	r30, 0x00	; 0
    2f0e:	29 f0       	breq	.+10     	; 0x2f1a <__vector_33+0x3c>
    2f10:	80 91 c6 24 	lds	r24, 0x24C6	; 0x8024c6 <InterruptSenderTable+0x42>
    2f14:	90 91 c7 24 	lds	r25, 0x24C7	; 0x8024c7 <InterruptSenderTable+0x43>
    2f18:	19 95       	eicall
    2f1a:	ff 91       	pop	r31
    2f1c:	ef 91       	pop	r30
    2f1e:	bf 91       	pop	r27
    2f20:	af 91       	pop	r26
    2f22:	9f 91       	pop	r25
    2f24:	8f 91       	pop	r24
    2f26:	7f 91       	pop	r23
    2f28:	6f 91       	pop	r22
    2f2a:	5f 91       	pop	r21
    2f2c:	4f 91       	pop	r20
    2f2e:	3f 91       	pop	r19
    2f30:	2f 91       	pop	r18
    2f32:	0f 90       	pop	r0
    2f34:	0b be       	out	0x3b, r0	; 59
    2f36:	0f 90       	pop	r0
    2f38:	0f be       	out	0x3f, r0	; 63
    2f3a:	0f 90       	pop	r0
    2f3c:	1f 90       	pop	r1
    2f3e:	18 95       	reti

00002f40 <__vector_34>:

/* PORTB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT0_vect)      /* External Interrupt 0 */
    2f40:	1f 92       	push	r1
    2f42:	0f 92       	push	r0
    2f44:	0f b6       	in	r0, 0x3f	; 63
    2f46:	0f 92       	push	r0
    2f48:	11 24       	eor	r1, r1
    2f4a:	0b b6       	in	r0, 0x3b	; 59
    2f4c:	0f 92       	push	r0
    2f4e:	2f 93       	push	r18
    2f50:	3f 93       	push	r19
    2f52:	4f 93       	push	r20
    2f54:	5f 93       	push	r21
    2f56:	6f 93       	push	r22
    2f58:	7f 93       	push	r23
    2f5a:	8f 93       	push	r24
    2f5c:	9f 93       	push	r25
    2f5e:	af 93       	push	r26
    2f60:	bf 93       	push	r27
    2f62:	ef 93       	push	r30
    2f64:	ff 93       	push	r31
    2f66:	e0 91 d2 23 	lds	r30, 0x23D2	; 0x8023d2 <InterruptFuncTable+0x44>
    2f6a:	f0 91 d3 23 	lds	r31, 0x23D3	; 0x8023d3 <InterruptFuncTable+0x45>
    2f6e:	30 97       	sbiw	r30, 0x00	; 0
    2f70:	29 f0       	breq	.+10     	; 0x2f7c <__vector_34+0x3c>
    2f72:	80 91 c8 24 	lds	r24, 0x24C8	; 0x8024c8 <InterruptSenderTable+0x44>
    2f76:	90 91 c9 24 	lds	r25, 0x24C9	; 0x8024c9 <InterruptSenderTable+0x45>
    2f7a:	19 95       	eicall
    2f7c:	ff 91       	pop	r31
    2f7e:	ef 91       	pop	r30
    2f80:	bf 91       	pop	r27
    2f82:	af 91       	pop	r26
    2f84:	9f 91       	pop	r25
    2f86:	8f 91       	pop	r24
    2f88:	7f 91       	pop	r23
    2f8a:	6f 91       	pop	r22
    2f8c:	5f 91       	pop	r21
    2f8e:	4f 91       	pop	r20
    2f90:	3f 91       	pop	r19
    2f92:	2f 91       	pop	r18
    2f94:	0f 90       	pop	r0
    2f96:	0b be       	out	0x3b, r0	; 59
    2f98:	0f 90       	pop	r0
    2f9a:	0f be       	out	0x3f, r0	; 63
    2f9c:	0f 90       	pop	r0
    2f9e:	1f 90       	pop	r1
    2fa0:	18 95       	reti

00002fa2 <__vector_35>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT1_vect)      /* External Interrupt 1 */
    2fa2:	1f 92       	push	r1
    2fa4:	0f 92       	push	r0
    2fa6:	0f b6       	in	r0, 0x3f	; 63
    2fa8:	0f 92       	push	r0
    2faa:	11 24       	eor	r1, r1
    2fac:	0b b6       	in	r0, 0x3b	; 59
    2fae:	0f 92       	push	r0
    2fb0:	2f 93       	push	r18
    2fb2:	3f 93       	push	r19
    2fb4:	4f 93       	push	r20
    2fb6:	5f 93       	push	r21
    2fb8:	6f 93       	push	r22
    2fba:	7f 93       	push	r23
    2fbc:	8f 93       	push	r24
    2fbe:	9f 93       	push	r25
    2fc0:	af 93       	push	r26
    2fc2:	bf 93       	push	r27
    2fc4:	ef 93       	push	r30
    2fc6:	ff 93       	push	r31
    2fc8:	e0 91 d4 23 	lds	r30, 0x23D4	; 0x8023d4 <InterruptFuncTable+0x46>
    2fcc:	f0 91 d5 23 	lds	r31, 0x23D5	; 0x8023d5 <InterruptFuncTable+0x47>
    2fd0:	30 97       	sbiw	r30, 0x00	; 0
    2fd2:	29 f0       	breq	.+10     	; 0x2fde <__vector_35+0x3c>
    2fd4:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <InterruptSenderTable+0x46>
    2fd8:	90 91 cb 24 	lds	r25, 0x24CB	; 0x8024cb <InterruptSenderTable+0x47>
    2fdc:	19 95       	eicall
    2fde:	ff 91       	pop	r31
    2fe0:	ef 91       	pop	r30
    2fe2:	bf 91       	pop	r27
    2fe4:	af 91       	pop	r26
    2fe6:	9f 91       	pop	r25
    2fe8:	8f 91       	pop	r24
    2fea:	7f 91       	pop	r23
    2fec:	6f 91       	pop	r22
    2fee:	5f 91       	pop	r21
    2ff0:	4f 91       	pop	r20
    2ff2:	3f 91       	pop	r19
    2ff4:	2f 91       	pop	r18
    2ff6:	0f 90       	pop	r0
    2ff8:	0b be       	out	0x3b, r0	; 59
    2ffa:	0f 90       	pop	r0
    2ffc:	0f be       	out	0x3f, r0	; 63
    2ffe:	0f 90       	pop	r0
    3000:	1f 90       	pop	r1
    3002:	18 95       	reti

00003004 <__vector_36>:

/* ACB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC0_vect)      /* AC0 Interrupt */
    3004:	1f 92       	push	r1
    3006:	0f 92       	push	r0
    3008:	0f b6       	in	r0, 0x3f	; 63
    300a:	0f 92       	push	r0
    300c:	11 24       	eor	r1, r1
    300e:	0b b6       	in	r0, 0x3b	; 59
    3010:	0f 92       	push	r0
    3012:	2f 93       	push	r18
    3014:	3f 93       	push	r19
    3016:	4f 93       	push	r20
    3018:	5f 93       	push	r21
    301a:	6f 93       	push	r22
    301c:	7f 93       	push	r23
    301e:	8f 93       	push	r24
    3020:	9f 93       	push	r25
    3022:	af 93       	push	r26
    3024:	bf 93       	push	r27
    3026:	ef 93       	push	r30
    3028:	ff 93       	push	r31
    302a:	e0 91 d6 23 	lds	r30, 0x23D6	; 0x8023d6 <InterruptFuncTable+0x48>
    302e:	f0 91 d7 23 	lds	r31, 0x23D7	; 0x8023d7 <InterruptFuncTable+0x49>
    3032:	30 97       	sbiw	r30, 0x00	; 0
    3034:	29 f0       	breq	.+10     	; 0x3040 <__vector_36+0x3c>
    3036:	80 91 cc 24 	lds	r24, 0x24CC	; 0x8024cc <InterruptSenderTable+0x48>
    303a:	90 91 cd 24 	lds	r25, 0x24CD	; 0x8024cd <InterruptSenderTable+0x49>
    303e:	19 95       	eicall
    3040:	ff 91       	pop	r31
    3042:	ef 91       	pop	r30
    3044:	bf 91       	pop	r27
    3046:	af 91       	pop	r26
    3048:	9f 91       	pop	r25
    304a:	8f 91       	pop	r24
    304c:	7f 91       	pop	r23
    304e:	6f 91       	pop	r22
    3050:	5f 91       	pop	r21
    3052:	4f 91       	pop	r20
    3054:	3f 91       	pop	r19
    3056:	2f 91       	pop	r18
    3058:	0f 90       	pop	r0
    305a:	0b be       	out	0x3b, r0	; 59
    305c:	0f 90       	pop	r0
    305e:	0f be       	out	0x3f, r0	; 63
    3060:	0f 90       	pop	r0
    3062:	1f 90       	pop	r1
    3064:	18 95       	reti

00003066 <__vector_37>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC1_vect)      /* AC1 Interrupt */
    3066:	1f 92       	push	r1
    3068:	0f 92       	push	r0
    306a:	0f b6       	in	r0, 0x3f	; 63
    306c:	0f 92       	push	r0
    306e:	11 24       	eor	r1, r1
    3070:	0b b6       	in	r0, 0x3b	; 59
    3072:	0f 92       	push	r0
    3074:	2f 93       	push	r18
    3076:	3f 93       	push	r19
    3078:	4f 93       	push	r20
    307a:	5f 93       	push	r21
    307c:	6f 93       	push	r22
    307e:	7f 93       	push	r23
    3080:	8f 93       	push	r24
    3082:	9f 93       	push	r25
    3084:	af 93       	push	r26
    3086:	bf 93       	push	r27
    3088:	ef 93       	push	r30
    308a:	ff 93       	push	r31
    308c:	e0 91 d8 23 	lds	r30, 0x23D8	; 0x8023d8 <InterruptFuncTable+0x4a>
    3090:	f0 91 d9 23 	lds	r31, 0x23D9	; 0x8023d9 <InterruptFuncTable+0x4b>
    3094:	30 97       	sbiw	r30, 0x00	; 0
    3096:	29 f0       	breq	.+10     	; 0x30a2 <__vector_37+0x3c>
    3098:	80 91 ce 24 	lds	r24, 0x24CE	; 0x8024ce <InterruptSenderTable+0x4a>
    309c:	90 91 cf 24 	lds	r25, 0x24CF	; 0x8024cf <InterruptSenderTable+0x4b>
    30a0:	19 95       	eicall
    30a2:	ff 91       	pop	r31
    30a4:	ef 91       	pop	r30
    30a6:	bf 91       	pop	r27
    30a8:	af 91       	pop	r26
    30aa:	9f 91       	pop	r25
    30ac:	8f 91       	pop	r24
    30ae:	7f 91       	pop	r23
    30b0:	6f 91       	pop	r22
    30b2:	5f 91       	pop	r21
    30b4:	4f 91       	pop	r20
    30b6:	3f 91       	pop	r19
    30b8:	2f 91       	pop	r18
    30ba:	0f 90       	pop	r0
    30bc:	0b be       	out	0x3b, r0	; 59
    30be:	0f 90       	pop	r0
    30c0:	0f be       	out	0x3f, r0	; 63
    30c2:	0f 90       	pop	r0
    30c4:	1f 90       	pop	r1
    30c6:	18 95       	reti

000030c8 <__vector_38>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_ACW_vect)      /* ACW Window Mode Interrupt */
    30c8:	1f 92       	push	r1
    30ca:	0f 92       	push	r0
    30cc:	0f b6       	in	r0, 0x3f	; 63
    30ce:	0f 92       	push	r0
    30d0:	11 24       	eor	r1, r1
    30d2:	0b b6       	in	r0, 0x3b	; 59
    30d4:	0f 92       	push	r0
    30d6:	2f 93       	push	r18
    30d8:	3f 93       	push	r19
    30da:	4f 93       	push	r20
    30dc:	5f 93       	push	r21
    30de:	6f 93       	push	r22
    30e0:	7f 93       	push	r23
    30e2:	8f 93       	push	r24
    30e4:	9f 93       	push	r25
    30e6:	af 93       	push	r26
    30e8:	bf 93       	push	r27
    30ea:	ef 93       	push	r30
    30ec:	ff 93       	push	r31
    30ee:	e0 91 da 23 	lds	r30, 0x23DA	; 0x8023da <InterruptFuncTable+0x4c>
    30f2:	f0 91 db 23 	lds	r31, 0x23DB	; 0x8023db <InterruptFuncTable+0x4d>
    30f6:	30 97       	sbiw	r30, 0x00	; 0
    30f8:	29 f0       	breq	.+10     	; 0x3104 <__vector_38+0x3c>
    30fa:	80 91 d0 24 	lds	r24, 0x24D0	; 0x8024d0 <InterruptSenderTable+0x4c>
    30fe:	90 91 d1 24 	lds	r25, 0x24D1	; 0x8024d1 <InterruptSenderTable+0x4d>
    3102:	19 95       	eicall
    3104:	ff 91       	pop	r31
    3106:	ef 91       	pop	r30
    3108:	bf 91       	pop	r27
    310a:	af 91       	pop	r26
    310c:	9f 91       	pop	r25
    310e:	8f 91       	pop	r24
    3110:	7f 91       	pop	r23
    3112:	6f 91       	pop	r22
    3114:	5f 91       	pop	r21
    3116:	4f 91       	pop	r20
    3118:	3f 91       	pop	r19
    311a:	2f 91       	pop	r18
    311c:	0f 90       	pop	r0
    311e:	0b be       	out	0x3b, r0	; 59
    3120:	0f 90       	pop	r0
    3122:	0f be       	out	0x3f, r0	; 63
    3124:	0f 90       	pop	r0
    3126:	1f 90       	pop	r1
    3128:	18 95       	reti

0000312a <__vector_39>:

/* ADCB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH0_vect)      /* Interrupt 0 */
    312a:	1f 92       	push	r1
    312c:	0f 92       	push	r0
    312e:	0f b6       	in	r0, 0x3f	; 63
    3130:	0f 92       	push	r0
    3132:	11 24       	eor	r1, r1
    3134:	0b b6       	in	r0, 0x3b	; 59
    3136:	0f 92       	push	r0
    3138:	2f 93       	push	r18
    313a:	3f 93       	push	r19
    313c:	4f 93       	push	r20
    313e:	5f 93       	push	r21
    3140:	6f 93       	push	r22
    3142:	7f 93       	push	r23
    3144:	8f 93       	push	r24
    3146:	9f 93       	push	r25
    3148:	af 93       	push	r26
    314a:	bf 93       	push	r27
    314c:	ef 93       	push	r30
    314e:	ff 93       	push	r31
    3150:	e0 91 dc 23 	lds	r30, 0x23DC	; 0x8023dc <InterruptFuncTable+0x4e>
    3154:	f0 91 dd 23 	lds	r31, 0x23DD	; 0x8023dd <InterruptFuncTable+0x4f>
    3158:	30 97       	sbiw	r30, 0x00	; 0
    315a:	29 f0       	breq	.+10     	; 0x3166 <__vector_39+0x3c>
    315c:	80 91 d2 24 	lds	r24, 0x24D2	; 0x8024d2 <InterruptSenderTable+0x4e>
    3160:	90 91 d3 24 	lds	r25, 0x24D3	; 0x8024d3 <InterruptSenderTable+0x4f>
    3164:	19 95       	eicall
    3166:	ff 91       	pop	r31
    3168:	ef 91       	pop	r30
    316a:	bf 91       	pop	r27
    316c:	af 91       	pop	r26
    316e:	9f 91       	pop	r25
    3170:	8f 91       	pop	r24
    3172:	7f 91       	pop	r23
    3174:	6f 91       	pop	r22
    3176:	5f 91       	pop	r21
    3178:	4f 91       	pop	r20
    317a:	3f 91       	pop	r19
    317c:	2f 91       	pop	r18
    317e:	0f 90       	pop	r0
    3180:	0b be       	out	0x3b, r0	; 59
    3182:	0f 90       	pop	r0
    3184:	0f be       	out	0x3f, r0	; 63
    3186:	0f 90       	pop	r0
    3188:	1f 90       	pop	r1
    318a:	18 95       	reti

0000318c <__vector_40>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH1_vect)      /* Interrupt 1 */
    318c:	1f 92       	push	r1
    318e:	0f 92       	push	r0
    3190:	0f b6       	in	r0, 0x3f	; 63
    3192:	0f 92       	push	r0
    3194:	11 24       	eor	r1, r1
    3196:	0b b6       	in	r0, 0x3b	; 59
    3198:	0f 92       	push	r0
    319a:	2f 93       	push	r18
    319c:	3f 93       	push	r19
    319e:	4f 93       	push	r20
    31a0:	5f 93       	push	r21
    31a2:	6f 93       	push	r22
    31a4:	7f 93       	push	r23
    31a6:	8f 93       	push	r24
    31a8:	9f 93       	push	r25
    31aa:	af 93       	push	r26
    31ac:	bf 93       	push	r27
    31ae:	ef 93       	push	r30
    31b0:	ff 93       	push	r31
    31b2:	e0 91 de 23 	lds	r30, 0x23DE	; 0x8023de <InterruptFuncTable+0x50>
    31b6:	f0 91 df 23 	lds	r31, 0x23DF	; 0x8023df <InterruptFuncTable+0x51>
    31ba:	30 97       	sbiw	r30, 0x00	; 0
    31bc:	29 f0       	breq	.+10     	; 0x31c8 <__vector_40+0x3c>
    31be:	80 91 d4 24 	lds	r24, 0x24D4	; 0x8024d4 <InterruptSenderTable+0x50>
    31c2:	90 91 d5 24 	lds	r25, 0x24D5	; 0x8024d5 <InterruptSenderTable+0x51>
    31c6:	19 95       	eicall
    31c8:	ff 91       	pop	r31
    31ca:	ef 91       	pop	r30
    31cc:	bf 91       	pop	r27
    31ce:	af 91       	pop	r26
    31d0:	9f 91       	pop	r25
    31d2:	8f 91       	pop	r24
    31d4:	7f 91       	pop	r23
    31d6:	6f 91       	pop	r22
    31d8:	5f 91       	pop	r21
    31da:	4f 91       	pop	r20
    31dc:	3f 91       	pop	r19
    31de:	2f 91       	pop	r18
    31e0:	0f 90       	pop	r0
    31e2:	0b be       	out	0x3b, r0	; 59
    31e4:	0f 90       	pop	r0
    31e6:	0f be       	out	0x3f, r0	; 63
    31e8:	0f 90       	pop	r0
    31ea:	1f 90       	pop	r1
    31ec:	18 95       	reti

000031ee <__vector_41>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH2_vect)      /* Interrupt 2 */
    31ee:	1f 92       	push	r1
    31f0:	0f 92       	push	r0
    31f2:	0f b6       	in	r0, 0x3f	; 63
    31f4:	0f 92       	push	r0
    31f6:	11 24       	eor	r1, r1
    31f8:	0b b6       	in	r0, 0x3b	; 59
    31fa:	0f 92       	push	r0
    31fc:	2f 93       	push	r18
    31fe:	3f 93       	push	r19
    3200:	4f 93       	push	r20
    3202:	5f 93       	push	r21
    3204:	6f 93       	push	r22
    3206:	7f 93       	push	r23
    3208:	8f 93       	push	r24
    320a:	9f 93       	push	r25
    320c:	af 93       	push	r26
    320e:	bf 93       	push	r27
    3210:	ef 93       	push	r30
    3212:	ff 93       	push	r31
    3214:	e0 91 e0 23 	lds	r30, 0x23E0	; 0x8023e0 <InterruptFuncTable+0x52>
    3218:	f0 91 e1 23 	lds	r31, 0x23E1	; 0x8023e1 <InterruptFuncTable+0x53>
    321c:	30 97       	sbiw	r30, 0x00	; 0
    321e:	29 f0       	breq	.+10     	; 0x322a <__vector_41+0x3c>
    3220:	80 91 d6 24 	lds	r24, 0x24D6	; 0x8024d6 <InterruptSenderTable+0x52>
    3224:	90 91 d7 24 	lds	r25, 0x24D7	; 0x8024d7 <InterruptSenderTable+0x53>
    3228:	19 95       	eicall
    322a:	ff 91       	pop	r31
    322c:	ef 91       	pop	r30
    322e:	bf 91       	pop	r27
    3230:	af 91       	pop	r26
    3232:	9f 91       	pop	r25
    3234:	8f 91       	pop	r24
    3236:	7f 91       	pop	r23
    3238:	6f 91       	pop	r22
    323a:	5f 91       	pop	r21
    323c:	4f 91       	pop	r20
    323e:	3f 91       	pop	r19
    3240:	2f 91       	pop	r18
    3242:	0f 90       	pop	r0
    3244:	0b be       	out	0x3b, r0	; 59
    3246:	0f 90       	pop	r0
    3248:	0f be       	out	0x3f, r0	; 63
    324a:	0f 90       	pop	r0
    324c:	1f 90       	pop	r1
    324e:	18 95       	reti

00003250 <__vector_42>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH3_vect)      /* Interrupt 3 */
    3250:	1f 92       	push	r1
    3252:	0f 92       	push	r0
    3254:	0f b6       	in	r0, 0x3f	; 63
    3256:	0f 92       	push	r0
    3258:	11 24       	eor	r1, r1
    325a:	0b b6       	in	r0, 0x3b	; 59
    325c:	0f 92       	push	r0
    325e:	2f 93       	push	r18
    3260:	3f 93       	push	r19
    3262:	4f 93       	push	r20
    3264:	5f 93       	push	r21
    3266:	6f 93       	push	r22
    3268:	7f 93       	push	r23
    326a:	8f 93       	push	r24
    326c:	9f 93       	push	r25
    326e:	af 93       	push	r26
    3270:	bf 93       	push	r27
    3272:	ef 93       	push	r30
    3274:	ff 93       	push	r31
    3276:	e0 91 e2 23 	lds	r30, 0x23E2	; 0x8023e2 <InterruptFuncTable+0x54>
    327a:	f0 91 e3 23 	lds	r31, 0x23E3	; 0x8023e3 <InterruptFuncTable+0x55>
    327e:	30 97       	sbiw	r30, 0x00	; 0
    3280:	29 f0       	breq	.+10     	; 0x328c <__vector_42+0x3c>
    3282:	80 91 d8 24 	lds	r24, 0x24D8	; 0x8024d8 <InterruptSenderTable+0x54>
    3286:	90 91 d9 24 	lds	r25, 0x24D9	; 0x8024d9 <InterruptSenderTable+0x55>
    328a:	19 95       	eicall
    328c:	ff 91       	pop	r31
    328e:	ef 91       	pop	r30
    3290:	bf 91       	pop	r27
    3292:	af 91       	pop	r26
    3294:	9f 91       	pop	r25
    3296:	8f 91       	pop	r24
    3298:	7f 91       	pop	r23
    329a:	6f 91       	pop	r22
    329c:	5f 91       	pop	r21
    329e:	4f 91       	pop	r20
    32a0:	3f 91       	pop	r19
    32a2:	2f 91       	pop	r18
    32a4:	0f 90       	pop	r0
    32a6:	0b be       	out	0x3b, r0	; 59
    32a8:	0f 90       	pop	r0
    32aa:	0f be       	out	0x3f, r0	; 63
    32ac:	0f 90       	pop	r0
    32ae:	1f 90       	pop	r1
    32b0:	18 95       	reti

000032b2 <__vector_43>:

/* PORTE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT0_vect)      /* External Interrupt 0 */
    32b2:	1f 92       	push	r1
    32b4:	0f 92       	push	r0
    32b6:	0f b6       	in	r0, 0x3f	; 63
    32b8:	0f 92       	push	r0
    32ba:	11 24       	eor	r1, r1
    32bc:	0b b6       	in	r0, 0x3b	; 59
    32be:	0f 92       	push	r0
    32c0:	2f 93       	push	r18
    32c2:	3f 93       	push	r19
    32c4:	4f 93       	push	r20
    32c6:	5f 93       	push	r21
    32c8:	6f 93       	push	r22
    32ca:	7f 93       	push	r23
    32cc:	8f 93       	push	r24
    32ce:	9f 93       	push	r25
    32d0:	af 93       	push	r26
    32d2:	bf 93       	push	r27
    32d4:	ef 93       	push	r30
    32d6:	ff 93       	push	r31
    32d8:	e0 91 e4 23 	lds	r30, 0x23E4	; 0x8023e4 <InterruptFuncTable+0x56>
    32dc:	f0 91 e5 23 	lds	r31, 0x23E5	; 0x8023e5 <InterruptFuncTable+0x57>
    32e0:	30 97       	sbiw	r30, 0x00	; 0
    32e2:	29 f0       	breq	.+10     	; 0x32ee <__vector_43+0x3c>
    32e4:	80 91 da 24 	lds	r24, 0x24DA	; 0x8024da <InterruptSenderTable+0x56>
    32e8:	90 91 db 24 	lds	r25, 0x24DB	; 0x8024db <InterruptSenderTable+0x57>
    32ec:	19 95       	eicall
    32ee:	ff 91       	pop	r31
    32f0:	ef 91       	pop	r30
    32f2:	bf 91       	pop	r27
    32f4:	af 91       	pop	r26
    32f6:	9f 91       	pop	r25
    32f8:	8f 91       	pop	r24
    32fa:	7f 91       	pop	r23
    32fc:	6f 91       	pop	r22
    32fe:	5f 91       	pop	r21
    3300:	4f 91       	pop	r20
    3302:	3f 91       	pop	r19
    3304:	2f 91       	pop	r18
    3306:	0f 90       	pop	r0
    3308:	0b be       	out	0x3b, r0	; 59
    330a:	0f 90       	pop	r0
    330c:	0f be       	out	0x3f, r0	; 63
    330e:	0f 90       	pop	r0
    3310:	1f 90       	pop	r1
    3312:	18 95       	reti

00003314 <__vector_44>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT1_vect)      /* External Interrupt 1 */
    3314:	1f 92       	push	r1
    3316:	0f 92       	push	r0
    3318:	0f b6       	in	r0, 0x3f	; 63
    331a:	0f 92       	push	r0
    331c:	11 24       	eor	r1, r1
    331e:	0b b6       	in	r0, 0x3b	; 59
    3320:	0f 92       	push	r0
    3322:	2f 93       	push	r18
    3324:	3f 93       	push	r19
    3326:	4f 93       	push	r20
    3328:	5f 93       	push	r21
    332a:	6f 93       	push	r22
    332c:	7f 93       	push	r23
    332e:	8f 93       	push	r24
    3330:	9f 93       	push	r25
    3332:	af 93       	push	r26
    3334:	bf 93       	push	r27
    3336:	ef 93       	push	r30
    3338:	ff 93       	push	r31
    333a:	e0 91 e6 23 	lds	r30, 0x23E6	; 0x8023e6 <InterruptFuncTable+0x58>
    333e:	f0 91 e7 23 	lds	r31, 0x23E7	; 0x8023e7 <InterruptFuncTable+0x59>
    3342:	30 97       	sbiw	r30, 0x00	; 0
    3344:	29 f0       	breq	.+10     	; 0x3350 <__vector_44+0x3c>
    3346:	80 91 dc 24 	lds	r24, 0x24DC	; 0x8024dc <InterruptSenderTable+0x58>
    334a:	90 91 dd 24 	lds	r25, 0x24DD	; 0x8024dd <InterruptSenderTable+0x59>
    334e:	19 95       	eicall
    3350:	ff 91       	pop	r31
    3352:	ef 91       	pop	r30
    3354:	bf 91       	pop	r27
    3356:	af 91       	pop	r26
    3358:	9f 91       	pop	r25
    335a:	8f 91       	pop	r24
    335c:	7f 91       	pop	r23
    335e:	6f 91       	pop	r22
    3360:	5f 91       	pop	r21
    3362:	4f 91       	pop	r20
    3364:	3f 91       	pop	r19
    3366:	2f 91       	pop	r18
    3368:	0f 90       	pop	r0
    336a:	0b be       	out	0x3b, r0	; 59
    336c:	0f 90       	pop	r0
    336e:	0f be       	out	0x3f, r0	; 63
    3370:	0f 90       	pop	r0
    3372:	1f 90       	pop	r1
    3374:	18 95       	reti

00003376 <__vector_45>:

/* TWIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIS_vect)      /* TWI Slave Interrupt */
    3376:	1f 92       	push	r1
    3378:	0f 92       	push	r0
    337a:	0f b6       	in	r0, 0x3f	; 63
    337c:	0f 92       	push	r0
    337e:	11 24       	eor	r1, r1
    3380:	0b b6       	in	r0, 0x3b	; 59
    3382:	0f 92       	push	r0
    3384:	2f 93       	push	r18
    3386:	3f 93       	push	r19
    3388:	4f 93       	push	r20
    338a:	5f 93       	push	r21
    338c:	6f 93       	push	r22
    338e:	7f 93       	push	r23
    3390:	8f 93       	push	r24
    3392:	9f 93       	push	r25
    3394:	af 93       	push	r26
    3396:	bf 93       	push	r27
    3398:	ef 93       	push	r30
    339a:	ff 93       	push	r31
    339c:	e0 91 e8 23 	lds	r30, 0x23E8	; 0x8023e8 <InterruptFuncTable+0x5a>
    33a0:	f0 91 e9 23 	lds	r31, 0x23E9	; 0x8023e9 <InterruptFuncTable+0x5b>
    33a4:	30 97       	sbiw	r30, 0x00	; 0
    33a6:	29 f0       	breq	.+10     	; 0x33b2 <__vector_45+0x3c>
    33a8:	80 91 de 24 	lds	r24, 0x24DE	; 0x8024de <InterruptSenderTable+0x5a>
    33ac:	90 91 df 24 	lds	r25, 0x24DF	; 0x8024df <InterruptSenderTable+0x5b>
    33b0:	19 95       	eicall
    33b2:	ff 91       	pop	r31
    33b4:	ef 91       	pop	r30
    33b6:	bf 91       	pop	r27
    33b8:	af 91       	pop	r26
    33ba:	9f 91       	pop	r25
    33bc:	8f 91       	pop	r24
    33be:	7f 91       	pop	r23
    33c0:	6f 91       	pop	r22
    33c2:	5f 91       	pop	r21
    33c4:	4f 91       	pop	r20
    33c6:	3f 91       	pop	r19
    33c8:	2f 91       	pop	r18
    33ca:	0f 90       	pop	r0
    33cc:	0b be       	out	0x3b, r0	; 59
    33ce:	0f 90       	pop	r0
    33d0:	0f be       	out	0x3f, r0	; 63
    33d2:	0f 90       	pop	r0
    33d4:	1f 90       	pop	r1
    33d6:	18 95       	reti

000033d8 <__vector_46>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIM_vect)		/* TWI Master Interrupt */
    33d8:	1f 92       	push	r1
    33da:	0f 92       	push	r0
    33dc:	0f b6       	in	r0, 0x3f	; 63
    33de:	0f 92       	push	r0
    33e0:	11 24       	eor	r1, r1
    33e2:	0b b6       	in	r0, 0x3b	; 59
    33e4:	0f 92       	push	r0
    33e6:	2f 93       	push	r18
    33e8:	3f 93       	push	r19
    33ea:	4f 93       	push	r20
    33ec:	5f 93       	push	r21
    33ee:	6f 93       	push	r22
    33f0:	7f 93       	push	r23
    33f2:	8f 93       	push	r24
    33f4:	9f 93       	push	r25
    33f6:	af 93       	push	r26
    33f8:	bf 93       	push	r27
    33fa:	ef 93       	push	r30
    33fc:	ff 93       	push	r31
    33fe:	e0 91 ea 23 	lds	r30, 0x23EA	; 0x8023ea <InterruptFuncTable+0x5c>
    3402:	f0 91 eb 23 	lds	r31, 0x23EB	; 0x8023eb <InterruptFuncTable+0x5d>
    3406:	30 97       	sbiw	r30, 0x00	; 0
    3408:	29 f0       	breq	.+10     	; 0x3414 <__vector_46+0x3c>
    340a:	80 91 e0 24 	lds	r24, 0x24E0	; 0x8024e0 <InterruptSenderTable+0x5c>
    340e:	90 91 e1 24 	lds	r25, 0x24E1	; 0x8024e1 <InterruptSenderTable+0x5d>
    3412:	19 95       	eicall
    3414:	ff 91       	pop	r31
    3416:	ef 91       	pop	r30
    3418:	bf 91       	pop	r27
    341a:	af 91       	pop	r26
    341c:	9f 91       	pop	r25
    341e:	8f 91       	pop	r24
    3420:	7f 91       	pop	r23
    3422:	6f 91       	pop	r22
    3424:	5f 91       	pop	r21
    3426:	4f 91       	pop	r20
    3428:	3f 91       	pop	r19
    342a:	2f 91       	pop	r18
    342c:	0f 90       	pop	r0
    342e:	0b be       	out	0x3b, r0	; 59
    3430:	0f 90       	pop	r0
    3432:	0f be       	out	0x3f, r0	; 63
    3434:	0f 90       	pop	r0
    3436:	1f 90       	pop	r1
    3438:	18 95       	reti

0000343a <__vector_47>:

/* TCE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_OVF_vect)      /* Overflow Interrupt */
    343a:	1f 92       	push	r1
    343c:	0f 92       	push	r0
    343e:	0f b6       	in	r0, 0x3f	; 63
    3440:	0f 92       	push	r0
    3442:	11 24       	eor	r1, r1
    3444:	0b b6       	in	r0, 0x3b	; 59
    3446:	0f 92       	push	r0
    3448:	2f 93       	push	r18
    344a:	3f 93       	push	r19
    344c:	4f 93       	push	r20
    344e:	5f 93       	push	r21
    3450:	6f 93       	push	r22
    3452:	7f 93       	push	r23
    3454:	8f 93       	push	r24
    3456:	9f 93       	push	r25
    3458:	af 93       	push	r26
    345a:	bf 93       	push	r27
    345c:	ef 93       	push	r30
    345e:	ff 93       	push	r31
    3460:	e0 91 ec 23 	lds	r30, 0x23EC	; 0x8023ec <InterruptFuncTable+0x5e>
    3464:	f0 91 ed 23 	lds	r31, 0x23ED	; 0x8023ed <InterruptFuncTable+0x5f>
    3468:	30 97       	sbiw	r30, 0x00	; 0
    346a:	29 f0       	breq	.+10     	; 0x3476 <__vector_47+0x3c>
    346c:	80 91 e2 24 	lds	r24, 0x24E2	; 0x8024e2 <InterruptSenderTable+0x5e>
    3470:	90 91 e3 24 	lds	r25, 0x24E3	; 0x8024e3 <InterruptSenderTable+0x5f>
    3474:	19 95       	eicall
    3476:	ff 91       	pop	r31
    3478:	ef 91       	pop	r30
    347a:	bf 91       	pop	r27
    347c:	af 91       	pop	r26
    347e:	9f 91       	pop	r25
    3480:	8f 91       	pop	r24
    3482:	7f 91       	pop	r23
    3484:	6f 91       	pop	r22
    3486:	5f 91       	pop	r21
    3488:	4f 91       	pop	r20
    348a:	3f 91       	pop	r19
    348c:	2f 91       	pop	r18
    348e:	0f 90       	pop	r0
    3490:	0b be       	out	0x3b, r0	; 59
    3492:	0f 90       	pop	r0
    3494:	0f be       	out	0x3f, r0	; 63
    3496:	0f 90       	pop	r0
    3498:	1f 90       	pop	r1
    349a:	18 95       	reti

0000349c <__vector_48>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_ERR_vect)      /* Error Interrupt */
    349c:	1f 92       	push	r1
    349e:	0f 92       	push	r0
    34a0:	0f b6       	in	r0, 0x3f	; 63
    34a2:	0f 92       	push	r0
    34a4:	11 24       	eor	r1, r1
    34a6:	0b b6       	in	r0, 0x3b	; 59
    34a8:	0f 92       	push	r0
    34aa:	2f 93       	push	r18
    34ac:	3f 93       	push	r19
    34ae:	4f 93       	push	r20
    34b0:	5f 93       	push	r21
    34b2:	6f 93       	push	r22
    34b4:	7f 93       	push	r23
    34b6:	8f 93       	push	r24
    34b8:	9f 93       	push	r25
    34ba:	af 93       	push	r26
    34bc:	bf 93       	push	r27
    34be:	ef 93       	push	r30
    34c0:	ff 93       	push	r31
    34c2:	e0 91 ee 23 	lds	r30, 0x23EE	; 0x8023ee <InterruptFuncTable+0x60>
    34c6:	f0 91 ef 23 	lds	r31, 0x23EF	; 0x8023ef <InterruptFuncTable+0x61>
    34ca:	30 97       	sbiw	r30, 0x00	; 0
    34cc:	29 f0       	breq	.+10     	; 0x34d8 <__vector_48+0x3c>
    34ce:	80 91 e4 24 	lds	r24, 0x24E4	; 0x8024e4 <InterruptSenderTable+0x60>
    34d2:	90 91 e5 24 	lds	r25, 0x24E5	; 0x8024e5 <InterruptSenderTable+0x61>
    34d6:	19 95       	eicall
    34d8:	ff 91       	pop	r31
    34da:	ef 91       	pop	r30
    34dc:	bf 91       	pop	r27
    34de:	af 91       	pop	r26
    34e0:	9f 91       	pop	r25
    34e2:	8f 91       	pop	r24
    34e4:	7f 91       	pop	r23
    34e6:	6f 91       	pop	r22
    34e8:	5f 91       	pop	r21
    34ea:	4f 91       	pop	r20
    34ec:	3f 91       	pop	r19
    34ee:	2f 91       	pop	r18
    34f0:	0f 90       	pop	r0
    34f2:	0b be       	out	0x3b, r0	; 59
    34f4:	0f 90       	pop	r0
    34f6:	0f be       	out	0x3f, r0	; 63
    34f8:	0f 90       	pop	r0
    34fa:	1f 90       	pop	r1
    34fc:	18 95       	reti

000034fe <__vector_49>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCA_vect)      /* Compare or Capture A Interrupt */
    34fe:	1f 92       	push	r1
    3500:	0f 92       	push	r0
    3502:	0f b6       	in	r0, 0x3f	; 63
    3504:	0f 92       	push	r0
    3506:	11 24       	eor	r1, r1
    3508:	0b b6       	in	r0, 0x3b	; 59
    350a:	0f 92       	push	r0
    350c:	2f 93       	push	r18
    350e:	3f 93       	push	r19
    3510:	4f 93       	push	r20
    3512:	5f 93       	push	r21
    3514:	6f 93       	push	r22
    3516:	7f 93       	push	r23
    3518:	8f 93       	push	r24
    351a:	9f 93       	push	r25
    351c:	af 93       	push	r26
    351e:	bf 93       	push	r27
    3520:	ef 93       	push	r30
    3522:	ff 93       	push	r31
    3524:	e0 91 f0 23 	lds	r30, 0x23F0	; 0x8023f0 <InterruptFuncTable+0x62>
    3528:	f0 91 f1 23 	lds	r31, 0x23F1	; 0x8023f1 <InterruptFuncTable+0x63>
    352c:	30 97       	sbiw	r30, 0x00	; 0
    352e:	29 f0       	breq	.+10     	; 0x353a <__vector_49+0x3c>
    3530:	80 91 e6 24 	lds	r24, 0x24E6	; 0x8024e6 <InterruptSenderTable+0x62>
    3534:	90 91 e7 24 	lds	r25, 0x24E7	; 0x8024e7 <InterruptSenderTable+0x63>
    3538:	19 95       	eicall
    353a:	ff 91       	pop	r31
    353c:	ef 91       	pop	r30
    353e:	bf 91       	pop	r27
    3540:	af 91       	pop	r26
    3542:	9f 91       	pop	r25
    3544:	8f 91       	pop	r24
    3546:	7f 91       	pop	r23
    3548:	6f 91       	pop	r22
    354a:	5f 91       	pop	r21
    354c:	4f 91       	pop	r20
    354e:	3f 91       	pop	r19
    3550:	2f 91       	pop	r18
    3552:	0f 90       	pop	r0
    3554:	0b be       	out	0x3b, r0	; 59
    3556:	0f 90       	pop	r0
    3558:	0f be       	out	0x3f, r0	; 63
    355a:	0f 90       	pop	r0
    355c:	1f 90       	pop	r1
    355e:	18 95       	reti

00003560 <__vector_50>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCB_vect)      /* Compare or Capture B Interrupt */
    3560:	1f 92       	push	r1
    3562:	0f 92       	push	r0
    3564:	0f b6       	in	r0, 0x3f	; 63
    3566:	0f 92       	push	r0
    3568:	11 24       	eor	r1, r1
    356a:	0b b6       	in	r0, 0x3b	; 59
    356c:	0f 92       	push	r0
    356e:	2f 93       	push	r18
    3570:	3f 93       	push	r19
    3572:	4f 93       	push	r20
    3574:	5f 93       	push	r21
    3576:	6f 93       	push	r22
    3578:	7f 93       	push	r23
    357a:	8f 93       	push	r24
    357c:	9f 93       	push	r25
    357e:	af 93       	push	r26
    3580:	bf 93       	push	r27
    3582:	ef 93       	push	r30
    3584:	ff 93       	push	r31
    3586:	e0 91 f2 23 	lds	r30, 0x23F2	; 0x8023f2 <InterruptFuncTable+0x64>
    358a:	f0 91 f3 23 	lds	r31, 0x23F3	; 0x8023f3 <InterruptFuncTable+0x65>
    358e:	30 97       	sbiw	r30, 0x00	; 0
    3590:	29 f0       	breq	.+10     	; 0x359c <__vector_50+0x3c>
    3592:	80 91 e8 24 	lds	r24, 0x24E8	; 0x8024e8 <InterruptSenderTable+0x64>
    3596:	90 91 e9 24 	lds	r25, 0x24E9	; 0x8024e9 <InterruptSenderTable+0x65>
    359a:	19 95       	eicall
    359c:	ff 91       	pop	r31
    359e:	ef 91       	pop	r30
    35a0:	bf 91       	pop	r27
    35a2:	af 91       	pop	r26
    35a4:	9f 91       	pop	r25
    35a6:	8f 91       	pop	r24
    35a8:	7f 91       	pop	r23
    35aa:	6f 91       	pop	r22
    35ac:	5f 91       	pop	r21
    35ae:	4f 91       	pop	r20
    35b0:	3f 91       	pop	r19
    35b2:	2f 91       	pop	r18
    35b4:	0f 90       	pop	r0
    35b6:	0b be       	out	0x3b, r0	; 59
    35b8:	0f 90       	pop	r0
    35ba:	0f be       	out	0x3f, r0	; 63
    35bc:	0f 90       	pop	r0
    35be:	1f 90       	pop	r1
    35c0:	18 95       	reti

000035c2 <__vector_51>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCC_vect)      /* Compare or Capture C Interrupt */
    35c2:	1f 92       	push	r1
    35c4:	0f 92       	push	r0
    35c6:	0f b6       	in	r0, 0x3f	; 63
    35c8:	0f 92       	push	r0
    35ca:	11 24       	eor	r1, r1
    35cc:	0b b6       	in	r0, 0x3b	; 59
    35ce:	0f 92       	push	r0
    35d0:	2f 93       	push	r18
    35d2:	3f 93       	push	r19
    35d4:	4f 93       	push	r20
    35d6:	5f 93       	push	r21
    35d8:	6f 93       	push	r22
    35da:	7f 93       	push	r23
    35dc:	8f 93       	push	r24
    35de:	9f 93       	push	r25
    35e0:	af 93       	push	r26
    35e2:	bf 93       	push	r27
    35e4:	ef 93       	push	r30
    35e6:	ff 93       	push	r31
    35e8:	e0 91 f4 23 	lds	r30, 0x23F4	; 0x8023f4 <InterruptFuncTable+0x66>
    35ec:	f0 91 f5 23 	lds	r31, 0x23F5	; 0x8023f5 <InterruptFuncTable+0x67>
    35f0:	30 97       	sbiw	r30, 0x00	; 0
    35f2:	29 f0       	breq	.+10     	; 0x35fe <__vector_51+0x3c>
    35f4:	80 91 ea 24 	lds	r24, 0x24EA	; 0x8024ea <InterruptSenderTable+0x66>
    35f8:	90 91 eb 24 	lds	r25, 0x24EB	; 0x8024eb <InterruptSenderTable+0x67>
    35fc:	19 95       	eicall
    35fe:	ff 91       	pop	r31
    3600:	ef 91       	pop	r30
    3602:	bf 91       	pop	r27
    3604:	af 91       	pop	r26
    3606:	9f 91       	pop	r25
    3608:	8f 91       	pop	r24
    360a:	7f 91       	pop	r23
    360c:	6f 91       	pop	r22
    360e:	5f 91       	pop	r21
    3610:	4f 91       	pop	r20
    3612:	3f 91       	pop	r19
    3614:	2f 91       	pop	r18
    3616:	0f 90       	pop	r0
    3618:	0b be       	out	0x3b, r0	; 59
    361a:	0f 90       	pop	r0
    361c:	0f be       	out	0x3f, r0	; 63
    361e:	0f 90       	pop	r0
    3620:	1f 90       	pop	r1
    3622:	18 95       	reti

00003624 <__vector_52>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCD_vect)      /* Compare or Capture D Interrupt */
    3624:	1f 92       	push	r1
    3626:	0f 92       	push	r0
    3628:	0f b6       	in	r0, 0x3f	; 63
    362a:	0f 92       	push	r0
    362c:	11 24       	eor	r1, r1
    362e:	0b b6       	in	r0, 0x3b	; 59
    3630:	0f 92       	push	r0
    3632:	2f 93       	push	r18
    3634:	3f 93       	push	r19
    3636:	4f 93       	push	r20
    3638:	5f 93       	push	r21
    363a:	6f 93       	push	r22
    363c:	7f 93       	push	r23
    363e:	8f 93       	push	r24
    3640:	9f 93       	push	r25
    3642:	af 93       	push	r26
    3644:	bf 93       	push	r27
    3646:	ef 93       	push	r30
    3648:	ff 93       	push	r31
    364a:	e0 91 f6 23 	lds	r30, 0x23F6	; 0x8023f6 <InterruptFuncTable+0x68>
    364e:	f0 91 f7 23 	lds	r31, 0x23F7	; 0x8023f7 <InterruptFuncTable+0x69>
    3652:	30 97       	sbiw	r30, 0x00	; 0
    3654:	29 f0       	breq	.+10     	; 0x3660 <__vector_52+0x3c>
    3656:	80 91 ec 24 	lds	r24, 0x24EC	; 0x8024ec <InterruptSenderTable+0x68>
    365a:	90 91 ed 24 	lds	r25, 0x24ED	; 0x8024ed <InterruptSenderTable+0x69>
    365e:	19 95       	eicall
    3660:	ff 91       	pop	r31
    3662:	ef 91       	pop	r30
    3664:	bf 91       	pop	r27
    3666:	af 91       	pop	r26
    3668:	9f 91       	pop	r25
    366a:	8f 91       	pop	r24
    366c:	7f 91       	pop	r23
    366e:	6f 91       	pop	r22
    3670:	5f 91       	pop	r21
    3672:	4f 91       	pop	r20
    3674:	3f 91       	pop	r19
    3676:	2f 91       	pop	r18
    3678:	0f 90       	pop	r0
    367a:	0b be       	out	0x3b, r0	; 59
    367c:	0f 90       	pop	r0
    367e:	0f be       	out	0x3f, r0	; 63
    3680:	0f 90       	pop	r0
    3682:	1f 90       	pop	r1
    3684:	18 95       	reti

00003686 <__vector_53>:

/* TCE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_OVF_vect)      /* Overflow Interrupt */
    3686:	1f 92       	push	r1
    3688:	0f 92       	push	r0
    368a:	0f b6       	in	r0, 0x3f	; 63
    368c:	0f 92       	push	r0
    368e:	11 24       	eor	r1, r1
    3690:	0b b6       	in	r0, 0x3b	; 59
    3692:	0f 92       	push	r0
    3694:	2f 93       	push	r18
    3696:	3f 93       	push	r19
    3698:	4f 93       	push	r20
    369a:	5f 93       	push	r21
    369c:	6f 93       	push	r22
    369e:	7f 93       	push	r23
    36a0:	8f 93       	push	r24
    36a2:	9f 93       	push	r25
    36a4:	af 93       	push	r26
    36a6:	bf 93       	push	r27
    36a8:	ef 93       	push	r30
    36aa:	ff 93       	push	r31
    36ac:	e0 91 f8 23 	lds	r30, 0x23F8	; 0x8023f8 <InterruptFuncTable+0x6a>
    36b0:	f0 91 f9 23 	lds	r31, 0x23F9	; 0x8023f9 <InterruptFuncTable+0x6b>
    36b4:	30 97       	sbiw	r30, 0x00	; 0
    36b6:	29 f0       	breq	.+10     	; 0x36c2 <__vector_53+0x3c>
    36b8:	80 91 ee 24 	lds	r24, 0x24EE	; 0x8024ee <InterruptSenderTable+0x6a>
    36bc:	90 91 ef 24 	lds	r25, 0x24EF	; 0x8024ef <InterruptSenderTable+0x6b>
    36c0:	19 95       	eicall
    36c2:	ff 91       	pop	r31
    36c4:	ef 91       	pop	r30
    36c6:	bf 91       	pop	r27
    36c8:	af 91       	pop	r26
    36ca:	9f 91       	pop	r25
    36cc:	8f 91       	pop	r24
    36ce:	7f 91       	pop	r23
    36d0:	6f 91       	pop	r22
    36d2:	5f 91       	pop	r21
    36d4:	4f 91       	pop	r20
    36d6:	3f 91       	pop	r19
    36d8:	2f 91       	pop	r18
    36da:	0f 90       	pop	r0
    36dc:	0b be       	out	0x3b, r0	; 59
    36de:	0f 90       	pop	r0
    36e0:	0f be       	out	0x3f, r0	; 63
    36e2:	0f 90       	pop	r0
    36e4:	1f 90       	pop	r1
    36e6:	18 95       	reti

000036e8 <__vector_54>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_ERR_vect)      /* Error Interrupt */
    36e8:	1f 92       	push	r1
    36ea:	0f 92       	push	r0
    36ec:	0f b6       	in	r0, 0x3f	; 63
    36ee:	0f 92       	push	r0
    36f0:	11 24       	eor	r1, r1
    36f2:	0b b6       	in	r0, 0x3b	; 59
    36f4:	0f 92       	push	r0
    36f6:	2f 93       	push	r18
    36f8:	3f 93       	push	r19
    36fa:	4f 93       	push	r20
    36fc:	5f 93       	push	r21
    36fe:	6f 93       	push	r22
    3700:	7f 93       	push	r23
    3702:	8f 93       	push	r24
    3704:	9f 93       	push	r25
    3706:	af 93       	push	r26
    3708:	bf 93       	push	r27
    370a:	ef 93       	push	r30
    370c:	ff 93       	push	r31
    370e:	e0 91 fa 23 	lds	r30, 0x23FA	; 0x8023fa <InterruptFuncTable+0x6c>
    3712:	f0 91 fb 23 	lds	r31, 0x23FB	; 0x8023fb <InterruptFuncTable+0x6d>
    3716:	30 97       	sbiw	r30, 0x00	; 0
    3718:	29 f0       	breq	.+10     	; 0x3724 <__vector_54+0x3c>
    371a:	80 91 f0 24 	lds	r24, 0x24F0	; 0x8024f0 <InterruptSenderTable+0x6c>
    371e:	90 91 f1 24 	lds	r25, 0x24F1	; 0x8024f1 <InterruptSenderTable+0x6d>
    3722:	19 95       	eicall
    3724:	ff 91       	pop	r31
    3726:	ef 91       	pop	r30
    3728:	bf 91       	pop	r27
    372a:	af 91       	pop	r26
    372c:	9f 91       	pop	r25
    372e:	8f 91       	pop	r24
    3730:	7f 91       	pop	r23
    3732:	6f 91       	pop	r22
    3734:	5f 91       	pop	r21
    3736:	4f 91       	pop	r20
    3738:	3f 91       	pop	r19
    373a:	2f 91       	pop	r18
    373c:	0f 90       	pop	r0
    373e:	0b be       	out	0x3b, r0	; 59
    3740:	0f 90       	pop	r0
    3742:	0f be       	out	0x3f, r0	; 63
    3744:	0f 90       	pop	r0
    3746:	1f 90       	pop	r1
    3748:	18 95       	reti

0000374a <__vector_55>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCA_vect)      /* Compare or Capture A Interrupt */
    374a:	1f 92       	push	r1
    374c:	0f 92       	push	r0
    374e:	0f b6       	in	r0, 0x3f	; 63
    3750:	0f 92       	push	r0
    3752:	11 24       	eor	r1, r1
    3754:	0b b6       	in	r0, 0x3b	; 59
    3756:	0f 92       	push	r0
    3758:	2f 93       	push	r18
    375a:	3f 93       	push	r19
    375c:	4f 93       	push	r20
    375e:	5f 93       	push	r21
    3760:	6f 93       	push	r22
    3762:	7f 93       	push	r23
    3764:	8f 93       	push	r24
    3766:	9f 93       	push	r25
    3768:	af 93       	push	r26
    376a:	bf 93       	push	r27
    376c:	ef 93       	push	r30
    376e:	ff 93       	push	r31
    3770:	e0 91 fc 23 	lds	r30, 0x23FC	; 0x8023fc <InterruptFuncTable+0x6e>
    3774:	f0 91 fd 23 	lds	r31, 0x23FD	; 0x8023fd <InterruptFuncTable+0x6f>
    3778:	30 97       	sbiw	r30, 0x00	; 0
    377a:	29 f0       	breq	.+10     	; 0x3786 <__vector_55+0x3c>
    377c:	80 91 f2 24 	lds	r24, 0x24F2	; 0x8024f2 <InterruptSenderTable+0x6e>
    3780:	90 91 f3 24 	lds	r25, 0x24F3	; 0x8024f3 <InterruptSenderTable+0x6f>
    3784:	19 95       	eicall
    3786:	ff 91       	pop	r31
    3788:	ef 91       	pop	r30
    378a:	bf 91       	pop	r27
    378c:	af 91       	pop	r26
    378e:	9f 91       	pop	r25
    3790:	8f 91       	pop	r24
    3792:	7f 91       	pop	r23
    3794:	6f 91       	pop	r22
    3796:	5f 91       	pop	r21
    3798:	4f 91       	pop	r20
    379a:	3f 91       	pop	r19
    379c:	2f 91       	pop	r18
    379e:	0f 90       	pop	r0
    37a0:	0b be       	out	0x3b, r0	; 59
    37a2:	0f 90       	pop	r0
    37a4:	0f be       	out	0x3f, r0	; 63
    37a6:	0f 90       	pop	r0
    37a8:	1f 90       	pop	r1
    37aa:	18 95       	reti

000037ac <__vector_56>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCB_vect)      /* Compare or Capture B Interrupt */
    37ac:	1f 92       	push	r1
    37ae:	0f 92       	push	r0
    37b0:	0f b6       	in	r0, 0x3f	; 63
    37b2:	0f 92       	push	r0
    37b4:	11 24       	eor	r1, r1
    37b6:	0b b6       	in	r0, 0x3b	; 59
    37b8:	0f 92       	push	r0
    37ba:	2f 93       	push	r18
    37bc:	3f 93       	push	r19
    37be:	4f 93       	push	r20
    37c0:	5f 93       	push	r21
    37c2:	6f 93       	push	r22
    37c4:	7f 93       	push	r23
    37c6:	8f 93       	push	r24
    37c8:	9f 93       	push	r25
    37ca:	af 93       	push	r26
    37cc:	bf 93       	push	r27
    37ce:	ef 93       	push	r30
    37d0:	ff 93       	push	r31
    37d2:	e0 91 fe 23 	lds	r30, 0x23FE	; 0x8023fe <InterruptFuncTable+0x70>
    37d6:	f0 91 ff 23 	lds	r31, 0x23FF	; 0x8023ff <InterruptFuncTable+0x71>
    37da:	30 97       	sbiw	r30, 0x00	; 0
    37dc:	29 f0       	breq	.+10     	; 0x37e8 <__vector_56+0x3c>
    37de:	80 91 f4 24 	lds	r24, 0x24F4	; 0x8024f4 <InterruptSenderTable+0x70>
    37e2:	90 91 f5 24 	lds	r25, 0x24F5	; 0x8024f5 <InterruptSenderTable+0x71>
    37e6:	19 95       	eicall
    37e8:	ff 91       	pop	r31
    37ea:	ef 91       	pop	r30
    37ec:	bf 91       	pop	r27
    37ee:	af 91       	pop	r26
    37f0:	9f 91       	pop	r25
    37f2:	8f 91       	pop	r24
    37f4:	7f 91       	pop	r23
    37f6:	6f 91       	pop	r22
    37f8:	5f 91       	pop	r21
    37fa:	4f 91       	pop	r20
    37fc:	3f 91       	pop	r19
    37fe:	2f 91       	pop	r18
    3800:	0f 90       	pop	r0
    3802:	0b be       	out	0x3b, r0	; 59
    3804:	0f 90       	pop	r0
    3806:	0f be       	out	0x3f, r0	; 63
    3808:	0f 90       	pop	r0
    380a:	1f 90       	pop	r1
    380c:	18 95       	reti

0000380e <__vector_57>:

/* SPIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIE_INT_vect)      /* SPI Interrupt */
    380e:	1f 92       	push	r1
    3810:	0f 92       	push	r0
    3812:	0f b6       	in	r0, 0x3f	; 63
    3814:	0f 92       	push	r0
    3816:	11 24       	eor	r1, r1
    3818:	0b b6       	in	r0, 0x3b	; 59
    381a:	0f 92       	push	r0
    381c:	2f 93       	push	r18
    381e:	3f 93       	push	r19
    3820:	4f 93       	push	r20
    3822:	5f 93       	push	r21
    3824:	6f 93       	push	r22
    3826:	7f 93       	push	r23
    3828:	8f 93       	push	r24
    382a:	9f 93       	push	r25
    382c:	af 93       	push	r26
    382e:	bf 93       	push	r27
    3830:	ef 93       	push	r30
    3832:	ff 93       	push	r31
    3834:	e0 91 00 24 	lds	r30, 0x2400	; 0x802400 <InterruptFuncTable+0x72>
    3838:	f0 91 01 24 	lds	r31, 0x2401	; 0x802401 <InterruptFuncTable+0x73>
    383c:	30 97       	sbiw	r30, 0x00	; 0
    383e:	29 f0       	breq	.+10     	; 0x384a <__vector_57+0x3c>
    3840:	80 91 f6 24 	lds	r24, 0x24F6	; 0x8024f6 <InterruptSenderTable+0x72>
    3844:	90 91 f7 24 	lds	r25, 0x24F7	; 0x8024f7 <InterruptSenderTable+0x73>
    3848:	19 95       	eicall
    384a:	ff 91       	pop	r31
    384c:	ef 91       	pop	r30
    384e:	bf 91       	pop	r27
    3850:	af 91       	pop	r26
    3852:	9f 91       	pop	r25
    3854:	8f 91       	pop	r24
    3856:	7f 91       	pop	r23
    3858:	6f 91       	pop	r22
    385a:	5f 91       	pop	r21
    385c:	4f 91       	pop	r20
    385e:	3f 91       	pop	r19
    3860:	2f 91       	pop	r18
    3862:	0f 90       	pop	r0
    3864:	0b be       	out	0x3b, r0	; 59
    3866:	0f 90       	pop	r0
    3868:	0f be       	out	0x3f, r0	; 63
    386a:	0f 90       	pop	r0
    386c:	1f 90       	pop	r1
    386e:	18 95       	reti

00003870 <__vector_58>:

/* USARTE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_RXC_vect)      /* Reception Complete Interrupt */
    3870:	1f 92       	push	r1
    3872:	0f 92       	push	r0
    3874:	0f b6       	in	r0, 0x3f	; 63
    3876:	0f 92       	push	r0
    3878:	11 24       	eor	r1, r1
    387a:	0b b6       	in	r0, 0x3b	; 59
    387c:	0f 92       	push	r0
    387e:	2f 93       	push	r18
    3880:	3f 93       	push	r19
    3882:	4f 93       	push	r20
    3884:	5f 93       	push	r21
    3886:	6f 93       	push	r22
    3888:	7f 93       	push	r23
    388a:	8f 93       	push	r24
    388c:	9f 93       	push	r25
    388e:	af 93       	push	r26
    3890:	bf 93       	push	r27
    3892:	ef 93       	push	r30
    3894:	ff 93       	push	r31
    3896:	e0 91 02 24 	lds	r30, 0x2402	; 0x802402 <InterruptFuncTable+0x74>
    389a:	f0 91 03 24 	lds	r31, 0x2403	; 0x802403 <InterruptFuncTable+0x75>
    389e:	30 97       	sbiw	r30, 0x00	; 0
    38a0:	29 f0       	breq	.+10     	; 0x38ac <__vector_58+0x3c>
    38a2:	80 91 f8 24 	lds	r24, 0x24F8	; 0x8024f8 <InterruptSenderTable+0x74>
    38a6:	90 91 f9 24 	lds	r25, 0x24F9	; 0x8024f9 <InterruptSenderTable+0x75>
    38aa:	19 95       	eicall
    38ac:	ff 91       	pop	r31
    38ae:	ef 91       	pop	r30
    38b0:	bf 91       	pop	r27
    38b2:	af 91       	pop	r26
    38b4:	9f 91       	pop	r25
    38b6:	8f 91       	pop	r24
    38b8:	7f 91       	pop	r23
    38ba:	6f 91       	pop	r22
    38bc:	5f 91       	pop	r21
    38be:	4f 91       	pop	r20
    38c0:	3f 91       	pop	r19
    38c2:	2f 91       	pop	r18
    38c4:	0f 90       	pop	r0
    38c6:	0b be       	out	0x3b, r0	; 59
    38c8:	0f 90       	pop	r0
    38ca:	0f be       	out	0x3f, r0	; 63
    38cc:	0f 90       	pop	r0
    38ce:	1f 90       	pop	r1
    38d0:	18 95       	reti

000038d2 <__vector_59>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_DRE_vect)      /* Data Register Empty Interrupt */
    38d2:	1f 92       	push	r1
    38d4:	0f 92       	push	r0
    38d6:	0f b6       	in	r0, 0x3f	; 63
    38d8:	0f 92       	push	r0
    38da:	11 24       	eor	r1, r1
    38dc:	0b b6       	in	r0, 0x3b	; 59
    38de:	0f 92       	push	r0
    38e0:	2f 93       	push	r18
    38e2:	3f 93       	push	r19
    38e4:	4f 93       	push	r20
    38e6:	5f 93       	push	r21
    38e8:	6f 93       	push	r22
    38ea:	7f 93       	push	r23
    38ec:	8f 93       	push	r24
    38ee:	9f 93       	push	r25
    38f0:	af 93       	push	r26
    38f2:	bf 93       	push	r27
    38f4:	ef 93       	push	r30
    38f6:	ff 93       	push	r31
    38f8:	e0 91 04 24 	lds	r30, 0x2404	; 0x802404 <InterruptFuncTable+0x76>
    38fc:	f0 91 05 24 	lds	r31, 0x2405	; 0x802405 <InterruptFuncTable+0x77>
    3900:	30 97       	sbiw	r30, 0x00	; 0
    3902:	29 f0       	breq	.+10     	; 0x390e <__vector_59+0x3c>
    3904:	80 91 fa 24 	lds	r24, 0x24FA	; 0x8024fa <InterruptSenderTable+0x76>
    3908:	90 91 fb 24 	lds	r25, 0x24FB	; 0x8024fb <InterruptSenderTable+0x77>
    390c:	19 95       	eicall
    390e:	ff 91       	pop	r31
    3910:	ef 91       	pop	r30
    3912:	bf 91       	pop	r27
    3914:	af 91       	pop	r26
    3916:	9f 91       	pop	r25
    3918:	8f 91       	pop	r24
    391a:	7f 91       	pop	r23
    391c:	6f 91       	pop	r22
    391e:	5f 91       	pop	r21
    3920:	4f 91       	pop	r20
    3922:	3f 91       	pop	r19
    3924:	2f 91       	pop	r18
    3926:	0f 90       	pop	r0
    3928:	0b be       	out	0x3b, r0	; 59
    392a:	0f 90       	pop	r0
    392c:	0f be       	out	0x3f, r0	; 63
    392e:	0f 90       	pop	r0
    3930:	1f 90       	pop	r1
    3932:	18 95       	reti

00003934 <__vector_60>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_TXC_vect)      /* Transmission Complete Interrupt */
    3934:	1f 92       	push	r1
    3936:	0f 92       	push	r0
    3938:	0f b6       	in	r0, 0x3f	; 63
    393a:	0f 92       	push	r0
    393c:	11 24       	eor	r1, r1
    393e:	0b b6       	in	r0, 0x3b	; 59
    3940:	0f 92       	push	r0
    3942:	2f 93       	push	r18
    3944:	3f 93       	push	r19
    3946:	4f 93       	push	r20
    3948:	5f 93       	push	r21
    394a:	6f 93       	push	r22
    394c:	7f 93       	push	r23
    394e:	8f 93       	push	r24
    3950:	9f 93       	push	r25
    3952:	af 93       	push	r26
    3954:	bf 93       	push	r27
    3956:	ef 93       	push	r30
    3958:	ff 93       	push	r31
    395a:	e0 91 06 24 	lds	r30, 0x2406	; 0x802406 <InterruptFuncTable+0x78>
    395e:	f0 91 07 24 	lds	r31, 0x2407	; 0x802407 <InterruptFuncTable+0x79>
    3962:	30 97       	sbiw	r30, 0x00	; 0
    3964:	29 f0       	breq	.+10     	; 0x3970 <__vector_60+0x3c>
    3966:	80 91 fc 24 	lds	r24, 0x24FC	; 0x8024fc <InterruptSenderTable+0x78>
    396a:	90 91 fd 24 	lds	r25, 0x24FD	; 0x8024fd <InterruptSenderTable+0x79>
    396e:	19 95       	eicall
    3970:	ff 91       	pop	r31
    3972:	ef 91       	pop	r30
    3974:	bf 91       	pop	r27
    3976:	af 91       	pop	r26
    3978:	9f 91       	pop	r25
    397a:	8f 91       	pop	r24
    397c:	7f 91       	pop	r23
    397e:	6f 91       	pop	r22
    3980:	5f 91       	pop	r21
    3982:	4f 91       	pop	r20
    3984:	3f 91       	pop	r19
    3986:	2f 91       	pop	r18
    3988:	0f 90       	pop	r0
    398a:	0b be       	out	0x3b, r0	; 59
    398c:	0f 90       	pop	r0
    398e:	0f be       	out	0x3f, r0	; 63
    3990:	0f 90       	pop	r0
    3992:	1f 90       	pop	r1
    3994:	18 95       	reti

00003996 <__vector_61>:

/* USARTE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_RXC_vect)      /* Reception Complete Interrupt */
    3996:	1f 92       	push	r1
    3998:	0f 92       	push	r0
    399a:	0f b6       	in	r0, 0x3f	; 63
    399c:	0f 92       	push	r0
    399e:	11 24       	eor	r1, r1
    39a0:	0b b6       	in	r0, 0x3b	; 59
    39a2:	0f 92       	push	r0
    39a4:	2f 93       	push	r18
    39a6:	3f 93       	push	r19
    39a8:	4f 93       	push	r20
    39aa:	5f 93       	push	r21
    39ac:	6f 93       	push	r22
    39ae:	7f 93       	push	r23
    39b0:	8f 93       	push	r24
    39b2:	9f 93       	push	r25
    39b4:	af 93       	push	r26
    39b6:	bf 93       	push	r27
    39b8:	ef 93       	push	r30
    39ba:	ff 93       	push	r31
    39bc:	e0 91 08 24 	lds	r30, 0x2408	; 0x802408 <InterruptFuncTable+0x7a>
    39c0:	f0 91 09 24 	lds	r31, 0x2409	; 0x802409 <InterruptFuncTable+0x7b>
    39c4:	30 97       	sbiw	r30, 0x00	; 0
    39c6:	29 f0       	breq	.+10     	; 0x39d2 <__vector_61+0x3c>
    39c8:	80 91 fe 24 	lds	r24, 0x24FE	; 0x8024fe <InterruptSenderTable+0x7a>
    39cc:	90 91 ff 24 	lds	r25, 0x24FF	; 0x8024ff <InterruptSenderTable+0x7b>
    39d0:	19 95       	eicall
    39d2:	ff 91       	pop	r31
    39d4:	ef 91       	pop	r30
    39d6:	bf 91       	pop	r27
    39d8:	af 91       	pop	r26
    39da:	9f 91       	pop	r25
    39dc:	8f 91       	pop	r24
    39de:	7f 91       	pop	r23
    39e0:	6f 91       	pop	r22
    39e2:	5f 91       	pop	r21
    39e4:	4f 91       	pop	r20
    39e6:	3f 91       	pop	r19
    39e8:	2f 91       	pop	r18
    39ea:	0f 90       	pop	r0
    39ec:	0b be       	out	0x3b, r0	; 59
    39ee:	0f 90       	pop	r0
    39f0:	0f be       	out	0x3f, r0	; 63
    39f2:	0f 90       	pop	r0
    39f4:	1f 90       	pop	r1
    39f6:	18 95       	reti

000039f8 <__vector_62>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_DRE_vect)      /* Data Register Empty Interrupt */
    39f8:	1f 92       	push	r1
    39fa:	0f 92       	push	r0
    39fc:	0f b6       	in	r0, 0x3f	; 63
    39fe:	0f 92       	push	r0
    3a00:	11 24       	eor	r1, r1
    3a02:	0b b6       	in	r0, 0x3b	; 59
    3a04:	0f 92       	push	r0
    3a06:	2f 93       	push	r18
    3a08:	3f 93       	push	r19
    3a0a:	4f 93       	push	r20
    3a0c:	5f 93       	push	r21
    3a0e:	6f 93       	push	r22
    3a10:	7f 93       	push	r23
    3a12:	8f 93       	push	r24
    3a14:	9f 93       	push	r25
    3a16:	af 93       	push	r26
    3a18:	bf 93       	push	r27
    3a1a:	ef 93       	push	r30
    3a1c:	ff 93       	push	r31
    3a1e:	e0 91 0a 24 	lds	r30, 0x240A	; 0x80240a <InterruptFuncTable+0x7c>
    3a22:	f0 91 0b 24 	lds	r31, 0x240B	; 0x80240b <InterruptFuncTable+0x7d>
    3a26:	30 97       	sbiw	r30, 0x00	; 0
    3a28:	29 f0       	breq	.+10     	; 0x3a34 <__vector_62+0x3c>
    3a2a:	80 91 00 25 	lds	r24, 0x2500	; 0x802500 <InterruptSenderTable+0x7c>
    3a2e:	90 91 01 25 	lds	r25, 0x2501	; 0x802501 <InterruptSenderTable+0x7d>
    3a32:	19 95       	eicall
    3a34:	ff 91       	pop	r31
    3a36:	ef 91       	pop	r30
    3a38:	bf 91       	pop	r27
    3a3a:	af 91       	pop	r26
    3a3c:	9f 91       	pop	r25
    3a3e:	8f 91       	pop	r24
    3a40:	7f 91       	pop	r23
    3a42:	6f 91       	pop	r22
    3a44:	5f 91       	pop	r21
    3a46:	4f 91       	pop	r20
    3a48:	3f 91       	pop	r19
    3a4a:	2f 91       	pop	r18
    3a4c:	0f 90       	pop	r0
    3a4e:	0b be       	out	0x3b, r0	; 59
    3a50:	0f 90       	pop	r0
    3a52:	0f be       	out	0x3f, r0	; 63
    3a54:	0f 90       	pop	r0
    3a56:	1f 90       	pop	r1
    3a58:	18 95       	reti

00003a5a <__vector_63>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_TXC_vect)      /* Transmission Complete Interrupt */
    3a5a:	1f 92       	push	r1
    3a5c:	0f 92       	push	r0
    3a5e:	0f b6       	in	r0, 0x3f	; 63
    3a60:	0f 92       	push	r0
    3a62:	11 24       	eor	r1, r1
    3a64:	0b b6       	in	r0, 0x3b	; 59
    3a66:	0f 92       	push	r0
    3a68:	2f 93       	push	r18
    3a6a:	3f 93       	push	r19
    3a6c:	4f 93       	push	r20
    3a6e:	5f 93       	push	r21
    3a70:	6f 93       	push	r22
    3a72:	7f 93       	push	r23
    3a74:	8f 93       	push	r24
    3a76:	9f 93       	push	r25
    3a78:	af 93       	push	r26
    3a7a:	bf 93       	push	r27
    3a7c:	ef 93       	push	r30
    3a7e:	ff 93       	push	r31
    3a80:	e0 91 0c 24 	lds	r30, 0x240C	; 0x80240c <InterruptFuncTable+0x7e>
    3a84:	f0 91 0d 24 	lds	r31, 0x240D	; 0x80240d <InterruptFuncTable+0x7f>
    3a88:	30 97       	sbiw	r30, 0x00	; 0
    3a8a:	29 f0       	breq	.+10     	; 0x3a96 <__vector_63+0x3c>
    3a8c:	80 91 02 25 	lds	r24, 0x2502	; 0x802502 <InterruptSenderTable+0x7e>
    3a90:	90 91 03 25 	lds	r25, 0x2503	; 0x802503 <InterruptSenderTable+0x7f>
    3a94:	19 95       	eicall
    3a96:	ff 91       	pop	r31
    3a98:	ef 91       	pop	r30
    3a9a:	bf 91       	pop	r27
    3a9c:	af 91       	pop	r26
    3a9e:	9f 91       	pop	r25
    3aa0:	8f 91       	pop	r24
    3aa2:	7f 91       	pop	r23
    3aa4:	6f 91       	pop	r22
    3aa6:	5f 91       	pop	r21
    3aa8:	4f 91       	pop	r20
    3aaa:	3f 91       	pop	r19
    3aac:	2f 91       	pop	r18
    3aae:	0f 90       	pop	r0
    3ab0:	0b be       	out	0x3b, r0	; 59
    3ab2:	0f 90       	pop	r0
    3ab4:	0f be       	out	0x3f, r0	; 63
    3ab6:	0f 90       	pop	r0
    3ab8:	1f 90       	pop	r1
    3aba:	18 95       	reti

00003abc <__vector_64>:

/* PORTD interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT0_vect)      /* External Interrupt 0 */
    3abc:	1f 92       	push	r1
    3abe:	0f 92       	push	r0
    3ac0:	0f b6       	in	r0, 0x3f	; 63
    3ac2:	0f 92       	push	r0
    3ac4:	11 24       	eor	r1, r1
    3ac6:	0b b6       	in	r0, 0x3b	; 59
    3ac8:	0f 92       	push	r0
    3aca:	2f 93       	push	r18
    3acc:	3f 93       	push	r19
    3ace:	4f 93       	push	r20
    3ad0:	5f 93       	push	r21
    3ad2:	6f 93       	push	r22
    3ad4:	7f 93       	push	r23
    3ad6:	8f 93       	push	r24
    3ad8:	9f 93       	push	r25
    3ada:	af 93       	push	r26
    3adc:	bf 93       	push	r27
    3ade:	ef 93       	push	r30
    3ae0:	ff 93       	push	r31
    3ae2:	e0 91 0e 24 	lds	r30, 0x240E	; 0x80240e <InterruptFuncTable+0x80>
    3ae6:	f0 91 0f 24 	lds	r31, 0x240F	; 0x80240f <InterruptFuncTable+0x81>
    3aea:	30 97       	sbiw	r30, 0x00	; 0
    3aec:	29 f0       	breq	.+10     	; 0x3af8 <__vector_64+0x3c>
    3aee:	80 91 04 25 	lds	r24, 0x2504	; 0x802504 <InterruptSenderTable+0x80>
    3af2:	90 91 05 25 	lds	r25, 0x2505	; 0x802505 <InterruptSenderTable+0x81>
    3af6:	19 95       	eicall
    3af8:	ff 91       	pop	r31
    3afa:	ef 91       	pop	r30
    3afc:	bf 91       	pop	r27
    3afe:	af 91       	pop	r26
    3b00:	9f 91       	pop	r25
    3b02:	8f 91       	pop	r24
    3b04:	7f 91       	pop	r23
    3b06:	6f 91       	pop	r22
    3b08:	5f 91       	pop	r21
    3b0a:	4f 91       	pop	r20
    3b0c:	3f 91       	pop	r19
    3b0e:	2f 91       	pop	r18
    3b10:	0f 90       	pop	r0
    3b12:	0b be       	out	0x3b, r0	; 59
    3b14:	0f 90       	pop	r0
    3b16:	0f be       	out	0x3f, r0	; 63
    3b18:	0f 90       	pop	r0
    3b1a:	1f 90       	pop	r1
    3b1c:	18 95       	reti

00003b1e <__vector_65>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT1_vect)      /* External Interrupt 1 */
    3b1e:	1f 92       	push	r1
    3b20:	0f 92       	push	r0
    3b22:	0f b6       	in	r0, 0x3f	; 63
    3b24:	0f 92       	push	r0
    3b26:	11 24       	eor	r1, r1
    3b28:	0b b6       	in	r0, 0x3b	; 59
    3b2a:	0f 92       	push	r0
    3b2c:	2f 93       	push	r18
    3b2e:	3f 93       	push	r19
    3b30:	4f 93       	push	r20
    3b32:	5f 93       	push	r21
    3b34:	6f 93       	push	r22
    3b36:	7f 93       	push	r23
    3b38:	8f 93       	push	r24
    3b3a:	9f 93       	push	r25
    3b3c:	af 93       	push	r26
    3b3e:	bf 93       	push	r27
    3b40:	ef 93       	push	r30
    3b42:	ff 93       	push	r31
    3b44:	e0 91 10 24 	lds	r30, 0x2410	; 0x802410 <InterruptFuncTable+0x82>
    3b48:	f0 91 11 24 	lds	r31, 0x2411	; 0x802411 <InterruptFuncTable+0x83>
    3b4c:	30 97       	sbiw	r30, 0x00	; 0
    3b4e:	29 f0       	breq	.+10     	; 0x3b5a <__vector_65+0x3c>
    3b50:	80 91 06 25 	lds	r24, 0x2506	; 0x802506 <InterruptSenderTable+0x82>
    3b54:	90 91 07 25 	lds	r25, 0x2507	; 0x802507 <InterruptSenderTable+0x83>
    3b58:	19 95       	eicall
    3b5a:	ff 91       	pop	r31
    3b5c:	ef 91       	pop	r30
    3b5e:	bf 91       	pop	r27
    3b60:	af 91       	pop	r26
    3b62:	9f 91       	pop	r25
    3b64:	8f 91       	pop	r24
    3b66:	7f 91       	pop	r23
    3b68:	6f 91       	pop	r22
    3b6a:	5f 91       	pop	r21
    3b6c:	4f 91       	pop	r20
    3b6e:	3f 91       	pop	r19
    3b70:	2f 91       	pop	r18
    3b72:	0f 90       	pop	r0
    3b74:	0b be       	out	0x3b, r0	; 59
    3b76:	0f 90       	pop	r0
    3b78:	0f be       	out	0x3f, r0	; 63
    3b7a:	0f 90       	pop	r0
    3b7c:	1f 90       	pop	r1
    3b7e:	18 95       	reti

00003b80 <__vector_66>:

/* PORTA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT0_vect)      /* External Interrupt 0 */
    3b80:	1f 92       	push	r1
    3b82:	0f 92       	push	r0
    3b84:	0f b6       	in	r0, 0x3f	; 63
    3b86:	0f 92       	push	r0
    3b88:	11 24       	eor	r1, r1
    3b8a:	0b b6       	in	r0, 0x3b	; 59
    3b8c:	0f 92       	push	r0
    3b8e:	2f 93       	push	r18
    3b90:	3f 93       	push	r19
    3b92:	4f 93       	push	r20
    3b94:	5f 93       	push	r21
    3b96:	6f 93       	push	r22
    3b98:	7f 93       	push	r23
    3b9a:	8f 93       	push	r24
    3b9c:	9f 93       	push	r25
    3b9e:	af 93       	push	r26
    3ba0:	bf 93       	push	r27
    3ba2:	ef 93       	push	r30
    3ba4:	ff 93       	push	r31
    3ba6:	e0 91 12 24 	lds	r30, 0x2412	; 0x802412 <InterruptFuncTable+0x84>
    3baa:	f0 91 13 24 	lds	r31, 0x2413	; 0x802413 <InterruptFuncTable+0x85>
    3bae:	30 97       	sbiw	r30, 0x00	; 0
    3bb0:	29 f0       	breq	.+10     	; 0x3bbc <__vector_66+0x3c>
    3bb2:	80 91 08 25 	lds	r24, 0x2508	; 0x802508 <InterruptSenderTable+0x84>
    3bb6:	90 91 09 25 	lds	r25, 0x2509	; 0x802509 <InterruptSenderTable+0x85>
    3bba:	19 95       	eicall
    3bbc:	ff 91       	pop	r31
    3bbe:	ef 91       	pop	r30
    3bc0:	bf 91       	pop	r27
    3bc2:	af 91       	pop	r26
    3bc4:	9f 91       	pop	r25
    3bc6:	8f 91       	pop	r24
    3bc8:	7f 91       	pop	r23
    3bca:	6f 91       	pop	r22
    3bcc:	5f 91       	pop	r21
    3bce:	4f 91       	pop	r20
    3bd0:	3f 91       	pop	r19
    3bd2:	2f 91       	pop	r18
    3bd4:	0f 90       	pop	r0
    3bd6:	0b be       	out	0x3b, r0	; 59
    3bd8:	0f 90       	pop	r0
    3bda:	0f be       	out	0x3f, r0	; 63
    3bdc:	0f 90       	pop	r0
    3bde:	1f 90       	pop	r1
    3be0:	18 95       	reti

00003be2 <__vector_67>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT1_vect)      /* External Interrupt 1 */
    3be2:	1f 92       	push	r1
    3be4:	0f 92       	push	r0
    3be6:	0f b6       	in	r0, 0x3f	; 63
    3be8:	0f 92       	push	r0
    3bea:	11 24       	eor	r1, r1
    3bec:	0b b6       	in	r0, 0x3b	; 59
    3bee:	0f 92       	push	r0
    3bf0:	2f 93       	push	r18
    3bf2:	3f 93       	push	r19
    3bf4:	4f 93       	push	r20
    3bf6:	5f 93       	push	r21
    3bf8:	6f 93       	push	r22
    3bfa:	7f 93       	push	r23
    3bfc:	8f 93       	push	r24
    3bfe:	9f 93       	push	r25
    3c00:	af 93       	push	r26
    3c02:	bf 93       	push	r27
    3c04:	ef 93       	push	r30
    3c06:	ff 93       	push	r31
    3c08:	e0 91 14 24 	lds	r30, 0x2414	; 0x802414 <InterruptFuncTable+0x86>
    3c0c:	f0 91 15 24 	lds	r31, 0x2415	; 0x802415 <InterruptFuncTable+0x87>
    3c10:	30 97       	sbiw	r30, 0x00	; 0
    3c12:	29 f0       	breq	.+10     	; 0x3c1e <__vector_67+0x3c>
    3c14:	80 91 0a 25 	lds	r24, 0x250A	; 0x80250a <InterruptSenderTable+0x86>
    3c18:	90 91 0b 25 	lds	r25, 0x250B	; 0x80250b <InterruptSenderTable+0x87>
    3c1c:	19 95       	eicall
    3c1e:	ff 91       	pop	r31
    3c20:	ef 91       	pop	r30
    3c22:	bf 91       	pop	r27
    3c24:	af 91       	pop	r26
    3c26:	9f 91       	pop	r25
    3c28:	8f 91       	pop	r24
    3c2a:	7f 91       	pop	r23
    3c2c:	6f 91       	pop	r22
    3c2e:	5f 91       	pop	r21
    3c30:	4f 91       	pop	r20
    3c32:	3f 91       	pop	r19
    3c34:	2f 91       	pop	r18
    3c36:	0f 90       	pop	r0
    3c38:	0b be       	out	0x3b, r0	; 59
    3c3a:	0f 90       	pop	r0
    3c3c:	0f be       	out	0x3f, r0	; 63
    3c3e:	0f 90       	pop	r0
    3c40:	1f 90       	pop	r1
    3c42:	18 95       	reti

00003c44 <__vector_68>:

/* ACA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC0_vect)      /* AC0 Interrupt */
    3c44:	1f 92       	push	r1
    3c46:	0f 92       	push	r0
    3c48:	0f b6       	in	r0, 0x3f	; 63
    3c4a:	0f 92       	push	r0
    3c4c:	11 24       	eor	r1, r1
    3c4e:	0b b6       	in	r0, 0x3b	; 59
    3c50:	0f 92       	push	r0
    3c52:	2f 93       	push	r18
    3c54:	3f 93       	push	r19
    3c56:	4f 93       	push	r20
    3c58:	5f 93       	push	r21
    3c5a:	6f 93       	push	r22
    3c5c:	7f 93       	push	r23
    3c5e:	8f 93       	push	r24
    3c60:	9f 93       	push	r25
    3c62:	af 93       	push	r26
    3c64:	bf 93       	push	r27
    3c66:	ef 93       	push	r30
    3c68:	ff 93       	push	r31
    3c6a:	e0 91 16 24 	lds	r30, 0x2416	; 0x802416 <InterruptFuncTable+0x88>
    3c6e:	f0 91 17 24 	lds	r31, 0x2417	; 0x802417 <InterruptFuncTable+0x89>
    3c72:	30 97       	sbiw	r30, 0x00	; 0
    3c74:	29 f0       	breq	.+10     	; 0x3c80 <__vector_68+0x3c>
    3c76:	80 91 0c 25 	lds	r24, 0x250C	; 0x80250c <InterruptSenderTable+0x88>
    3c7a:	90 91 0d 25 	lds	r25, 0x250D	; 0x80250d <InterruptSenderTable+0x89>
    3c7e:	19 95       	eicall
    3c80:	ff 91       	pop	r31
    3c82:	ef 91       	pop	r30
    3c84:	bf 91       	pop	r27
    3c86:	af 91       	pop	r26
    3c88:	9f 91       	pop	r25
    3c8a:	8f 91       	pop	r24
    3c8c:	7f 91       	pop	r23
    3c8e:	6f 91       	pop	r22
    3c90:	5f 91       	pop	r21
    3c92:	4f 91       	pop	r20
    3c94:	3f 91       	pop	r19
    3c96:	2f 91       	pop	r18
    3c98:	0f 90       	pop	r0
    3c9a:	0b be       	out	0x3b, r0	; 59
    3c9c:	0f 90       	pop	r0
    3c9e:	0f be       	out	0x3f, r0	; 63
    3ca0:	0f 90       	pop	r0
    3ca2:	1f 90       	pop	r1
    3ca4:	18 95       	reti

00003ca6 <__vector_69>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC1_vect)      /* AC1 Interrupt */
    3ca6:	1f 92       	push	r1
    3ca8:	0f 92       	push	r0
    3caa:	0f b6       	in	r0, 0x3f	; 63
    3cac:	0f 92       	push	r0
    3cae:	11 24       	eor	r1, r1
    3cb0:	0b b6       	in	r0, 0x3b	; 59
    3cb2:	0f 92       	push	r0
    3cb4:	2f 93       	push	r18
    3cb6:	3f 93       	push	r19
    3cb8:	4f 93       	push	r20
    3cba:	5f 93       	push	r21
    3cbc:	6f 93       	push	r22
    3cbe:	7f 93       	push	r23
    3cc0:	8f 93       	push	r24
    3cc2:	9f 93       	push	r25
    3cc4:	af 93       	push	r26
    3cc6:	bf 93       	push	r27
    3cc8:	ef 93       	push	r30
    3cca:	ff 93       	push	r31
    3ccc:	e0 91 18 24 	lds	r30, 0x2418	; 0x802418 <InterruptFuncTable+0x8a>
    3cd0:	f0 91 19 24 	lds	r31, 0x2419	; 0x802419 <InterruptFuncTable+0x8b>
    3cd4:	30 97       	sbiw	r30, 0x00	; 0
    3cd6:	29 f0       	breq	.+10     	; 0x3ce2 <__vector_69+0x3c>
    3cd8:	80 91 0e 25 	lds	r24, 0x250E	; 0x80250e <InterruptSenderTable+0x8a>
    3cdc:	90 91 0f 25 	lds	r25, 0x250F	; 0x80250f <InterruptSenderTable+0x8b>
    3ce0:	19 95       	eicall
    3ce2:	ff 91       	pop	r31
    3ce4:	ef 91       	pop	r30
    3ce6:	bf 91       	pop	r27
    3ce8:	af 91       	pop	r26
    3cea:	9f 91       	pop	r25
    3cec:	8f 91       	pop	r24
    3cee:	7f 91       	pop	r23
    3cf0:	6f 91       	pop	r22
    3cf2:	5f 91       	pop	r21
    3cf4:	4f 91       	pop	r20
    3cf6:	3f 91       	pop	r19
    3cf8:	2f 91       	pop	r18
    3cfa:	0f 90       	pop	r0
    3cfc:	0b be       	out	0x3b, r0	; 59
    3cfe:	0f 90       	pop	r0
    3d00:	0f be       	out	0x3f, r0	; 63
    3d02:	0f 90       	pop	r0
    3d04:	1f 90       	pop	r1
    3d06:	18 95       	reti

00003d08 <__vector_70>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_ACW_vect)      /* ACW Window Mode Interrupt */
    3d08:	1f 92       	push	r1
    3d0a:	0f 92       	push	r0
    3d0c:	0f b6       	in	r0, 0x3f	; 63
    3d0e:	0f 92       	push	r0
    3d10:	11 24       	eor	r1, r1
    3d12:	0b b6       	in	r0, 0x3b	; 59
    3d14:	0f 92       	push	r0
    3d16:	2f 93       	push	r18
    3d18:	3f 93       	push	r19
    3d1a:	4f 93       	push	r20
    3d1c:	5f 93       	push	r21
    3d1e:	6f 93       	push	r22
    3d20:	7f 93       	push	r23
    3d22:	8f 93       	push	r24
    3d24:	9f 93       	push	r25
    3d26:	af 93       	push	r26
    3d28:	bf 93       	push	r27
    3d2a:	ef 93       	push	r30
    3d2c:	ff 93       	push	r31
    3d2e:	e0 91 1a 24 	lds	r30, 0x241A	; 0x80241a <InterruptFuncTable+0x8c>
    3d32:	f0 91 1b 24 	lds	r31, 0x241B	; 0x80241b <InterruptFuncTable+0x8d>
    3d36:	30 97       	sbiw	r30, 0x00	; 0
    3d38:	29 f0       	breq	.+10     	; 0x3d44 <__vector_70+0x3c>
    3d3a:	80 91 10 25 	lds	r24, 0x2510	; 0x802510 <InterruptSenderTable+0x8c>
    3d3e:	90 91 11 25 	lds	r25, 0x2511	; 0x802511 <InterruptSenderTable+0x8d>
    3d42:	19 95       	eicall
    3d44:	ff 91       	pop	r31
    3d46:	ef 91       	pop	r30
    3d48:	bf 91       	pop	r27
    3d4a:	af 91       	pop	r26
    3d4c:	9f 91       	pop	r25
    3d4e:	8f 91       	pop	r24
    3d50:	7f 91       	pop	r23
    3d52:	6f 91       	pop	r22
    3d54:	5f 91       	pop	r21
    3d56:	4f 91       	pop	r20
    3d58:	3f 91       	pop	r19
    3d5a:	2f 91       	pop	r18
    3d5c:	0f 90       	pop	r0
    3d5e:	0b be       	out	0x3b, r0	; 59
    3d60:	0f 90       	pop	r0
    3d62:	0f be       	out	0x3f, r0	; 63
    3d64:	0f 90       	pop	r0
    3d66:	1f 90       	pop	r1
    3d68:	18 95       	reti

00003d6a <__vector_71>:

/* ADCA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH0_vect)      /* Interrupt 0 */
    3d6a:	1f 92       	push	r1
    3d6c:	0f 92       	push	r0
    3d6e:	0f b6       	in	r0, 0x3f	; 63
    3d70:	0f 92       	push	r0
    3d72:	11 24       	eor	r1, r1
    3d74:	0b b6       	in	r0, 0x3b	; 59
    3d76:	0f 92       	push	r0
    3d78:	2f 93       	push	r18
    3d7a:	3f 93       	push	r19
    3d7c:	4f 93       	push	r20
    3d7e:	5f 93       	push	r21
    3d80:	6f 93       	push	r22
    3d82:	7f 93       	push	r23
    3d84:	8f 93       	push	r24
    3d86:	9f 93       	push	r25
    3d88:	af 93       	push	r26
    3d8a:	bf 93       	push	r27
    3d8c:	ef 93       	push	r30
    3d8e:	ff 93       	push	r31
    3d90:	e0 91 1c 24 	lds	r30, 0x241C	; 0x80241c <InterruptFuncTable+0x8e>
    3d94:	f0 91 1d 24 	lds	r31, 0x241D	; 0x80241d <InterruptFuncTable+0x8f>
    3d98:	30 97       	sbiw	r30, 0x00	; 0
    3d9a:	29 f0       	breq	.+10     	; 0x3da6 <__vector_71+0x3c>
    3d9c:	80 91 12 25 	lds	r24, 0x2512	; 0x802512 <InterruptSenderTable+0x8e>
    3da0:	90 91 13 25 	lds	r25, 0x2513	; 0x802513 <InterruptSenderTable+0x8f>
    3da4:	19 95       	eicall
    3da6:	ff 91       	pop	r31
    3da8:	ef 91       	pop	r30
    3daa:	bf 91       	pop	r27
    3dac:	af 91       	pop	r26
    3dae:	9f 91       	pop	r25
    3db0:	8f 91       	pop	r24
    3db2:	7f 91       	pop	r23
    3db4:	6f 91       	pop	r22
    3db6:	5f 91       	pop	r21
    3db8:	4f 91       	pop	r20
    3dba:	3f 91       	pop	r19
    3dbc:	2f 91       	pop	r18
    3dbe:	0f 90       	pop	r0
    3dc0:	0b be       	out	0x3b, r0	; 59
    3dc2:	0f 90       	pop	r0
    3dc4:	0f be       	out	0x3f, r0	; 63
    3dc6:	0f 90       	pop	r0
    3dc8:	1f 90       	pop	r1
    3dca:	18 95       	reti

00003dcc <__vector_72>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH1_vect)      /* Interrupt 1 */
    3dcc:	1f 92       	push	r1
    3dce:	0f 92       	push	r0
    3dd0:	0f b6       	in	r0, 0x3f	; 63
    3dd2:	0f 92       	push	r0
    3dd4:	11 24       	eor	r1, r1
    3dd6:	0b b6       	in	r0, 0x3b	; 59
    3dd8:	0f 92       	push	r0
    3dda:	2f 93       	push	r18
    3ddc:	3f 93       	push	r19
    3dde:	4f 93       	push	r20
    3de0:	5f 93       	push	r21
    3de2:	6f 93       	push	r22
    3de4:	7f 93       	push	r23
    3de6:	8f 93       	push	r24
    3de8:	9f 93       	push	r25
    3dea:	af 93       	push	r26
    3dec:	bf 93       	push	r27
    3dee:	ef 93       	push	r30
    3df0:	ff 93       	push	r31
    3df2:	e0 91 1e 24 	lds	r30, 0x241E	; 0x80241e <InterruptFuncTable+0x90>
    3df6:	f0 91 1f 24 	lds	r31, 0x241F	; 0x80241f <InterruptFuncTable+0x91>
    3dfa:	30 97       	sbiw	r30, 0x00	; 0
    3dfc:	29 f0       	breq	.+10     	; 0x3e08 <__vector_72+0x3c>
    3dfe:	80 91 14 25 	lds	r24, 0x2514	; 0x802514 <InterruptSenderTable+0x90>
    3e02:	90 91 15 25 	lds	r25, 0x2515	; 0x802515 <InterruptSenderTable+0x91>
    3e06:	19 95       	eicall
    3e08:	ff 91       	pop	r31
    3e0a:	ef 91       	pop	r30
    3e0c:	bf 91       	pop	r27
    3e0e:	af 91       	pop	r26
    3e10:	9f 91       	pop	r25
    3e12:	8f 91       	pop	r24
    3e14:	7f 91       	pop	r23
    3e16:	6f 91       	pop	r22
    3e18:	5f 91       	pop	r21
    3e1a:	4f 91       	pop	r20
    3e1c:	3f 91       	pop	r19
    3e1e:	2f 91       	pop	r18
    3e20:	0f 90       	pop	r0
    3e22:	0b be       	out	0x3b, r0	; 59
    3e24:	0f 90       	pop	r0
    3e26:	0f be       	out	0x3f, r0	; 63
    3e28:	0f 90       	pop	r0
    3e2a:	1f 90       	pop	r1
    3e2c:	18 95       	reti

00003e2e <__vector_73>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH2_vect)      /* Interrupt 2 */
    3e2e:	1f 92       	push	r1
    3e30:	0f 92       	push	r0
    3e32:	0f b6       	in	r0, 0x3f	; 63
    3e34:	0f 92       	push	r0
    3e36:	11 24       	eor	r1, r1
    3e38:	0b b6       	in	r0, 0x3b	; 59
    3e3a:	0f 92       	push	r0
    3e3c:	2f 93       	push	r18
    3e3e:	3f 93       	push	r19
    3e40:	4f 93       	push	r20
    3e42:	5f 93       	push	r21
    3e44:	6f 93       	push	r22
    3e46:	7f 93       	push	r23
    3e48:	8f 93       	push	r24
    3e4a:	9f 93       	push	r25
    3e4c:	af 93       	push	r26
    3e4e:	bf 93       	push	r27
    3e50:	ef 93       	push	r30
    3e52:	ff 93       	push	r31
    3e54:	e0 91 20 24 	lds	r30, 0x2420	; 0x802420 <InterruptFuncTable+0x92>
    3e58:	f0 91 21 24 	lds	r31, 0x2421	; 0x802421 <InterruptFuncTable+0x93>
    3e5c:	30 97       	sbiw	r30, 0x00	; 0
    3e5e:	29 f0       	breq	.+10     	; 0x3e6a <__vector_73+0x3c>
    3e60:	80 91 16 25 	lds	r24, 0x2516	; 0x802516 <InterruptSenderTable+0x92>
    3e64:	90 91 17 25 	lds	r25, 0x2517	; 0x802517 <InterruptSenderTable+0x93>
    3e68:	19 95       	eicall
    3e6a:	ff 91       	pop	r31
    3e6c:	ef 91       	pop	r30
    3e6e:	bf 91       	pop	r27
    3e70:	af 91       	pop	r26
    3e72:	9f 91       	pop	r25
    3e74:	8f 91       	pop	r24
    3e76:	7f 91       	pop	r23
    3e78:	6f 91       	pop	r22
    3e7a:	5f 91       	pop	r21
    3e7c:	4f 91       	pop	r20
    3e7e:	3f 91       	pop	r19
    3e80:	2f 91       	pop	r18
    3e82:	0f 90       	pop	r0
    3e84:	0b be       	out	0x3b, r0	; 59
    3e86:	0f 90       	pop	r0
    3e88:	0f be       	out	0x3f, r0	; 63
    3e8a:	0f 90       	pop	r0
    3e8c:	1f 90       	pop	r1
    3e8e:	18 95       	reti

00003e90 <__vector_74>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH3_vect)      /* Interrupt 3 */
    3e90:	1f 92       	push	r1
    3e92:	0f 92       	push	r0
    3e94:	0f b6       	in	r0, 0x3f	; 63
    3e96:	0f 92       	push	r0
    3e98:	11 24       	eor	r1, r1
    3e9a:	0b b6       	in	r0, 0x3b	; 59
    3e9c:	0f 92       	push	r0
    3e9e:	2f 93       	push	r18
    3ea0:	3f 93       	push	r19
    3ea2:	4f 93       	push	r20
    3ea4:	5f 93       	push	r21
    3ea6:	6f 93       	push	r22
    3ea8:	7f 93       	push	r23
    3eaa:	8f 93       	push	r24
    3eac:	9f 93       	push	r25
    3eae:	af 93       	push	r26
    3eb0:	bf 93       	push	r27
    3eb2:	ef 93       	push	r30
    3eb4:	ff 93       	push	r31
    3eb6:	e0 91 22 24 	lds	r30, 0x2422	; 0x802422 <InterruptFuncTable+0x94>
    3eba:	f0 91 23 24 	lds	r31, 0x2423	; 0x802423 <InterruptFuncTable+0x95>
    3ebe:	30 97       	sbiw	r30, 0x00	; 0
    3ec0:	29 f0       	breq	.+10     	; 0x3ecc <__vector_74+0x3c>
    3ec2:	80 91 18 25 	lds	r24, 0x2518	; 0x802518 <InterruptSenderTable+0x94>
    3ec6:	90 91 19 25 	lds	r25, 0x2519	; 0x802519 <InterruptSenderTable+0x95>
    3eca:	19 95       	eicall
    3ecc:	ff 91       	pop	r31
    3ece:	ef 91       	pop	r30
    3ed0:	bf 91       	pop	r27
    3ed2:	af 91       	pop	r26
    3ed4:	9f 91       	pop	r25
    3ed6:	8f 91       	pop	r24
    3ed8:	7f 91       	pop	r23
    3eda:	6f 91       	pop	r22
    3edc:	5f 91       	pop	r21
    3ede:	4f 91       	pop	r20
    3ee0:	3f 91       	pop	r19
    3ee2:	2f 91       	pop	r18
    3ee4:	0f 90       	pop	r0
    3ee6:	0b be       	out	0x3b, r0	; 59
    3ee8:	0f 90       	pop	r0
    3eea:	0f be       	out	0x3f, r0	; 63
    3eec:	0f 90       	pop	r0
    3eee:	1f 90       	pop	r1
    3ef0:	18 95       	reti

00003ef2 <__vector_77>:

/* TCD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_OVF_vect)      /* Overflow Interrupt */
    3ef2:	1f 92       	push	r1
    3ef4:	0f 92       	push	r0
    3ef6:	0f b6       	in	r0, 0x3f	; 63
    3ef8:	0f 92       	push	r0
    3efa:	11 24       	eor	r1, r1
    3efc:	0b b6       	in	r0, 0x3b	; 59
    3efe:	0f 92       	push	r0
    3f00:	2f 93       	push	r18
    3f02:	3f 93       	push	r19
    3f04:	4f 93       	push	r20
    3f06:	5f 93       	push	r21
    3f08:	6f 93       	push	r22
    3f0a:	7f 93       	push	r23
    3f0c:	8f 93       	push	r24
    3f0e:	9f 93       	push	r25
    3f10:	af 93       	push	r26
    3f12:	bf 93       	push	r27
    3f14:	ef 93       	push	r30
    3f16:	ff 93       	push	r31
    3f18:	e0 91 28 24 	lds	r30, 0x2428	; 0x802428 <InterruptFuncTable+0x9a>
    3f1c:	f0 91 29 24 	lds	r31, 0x2429	; 0x802429 <InterruptFuncTable+0x9b>
    3f20:	30 97       	sbiw	r30, 0x00	; 0
    3f22:	29 f0       	breq	.+10     	; 0x3f2e <__vector_77+0x3c>
    3f24:	80 91 1e 25 	lds	r24, 0x251E	; 0x80251e <InterruptSenderTable+0x9a>
    3f28:	90 91 1f 25 	lds	r25, 0x251F	; 0x80251f <InterruptSenderTable+0x9b>
    3f2c:	19 95       	eicall
    3f2e:	ff 91       	pop	r31
    3f30:	ef 91       	pop	r30
    3f32:	bf 91       	pop	r27
    3f34:	af 91       	pop	r26
    3f36:	9f 91       	pop	r25
    3f38:	8f 91       	pop	r24
    3f3a:	7f 91       	pop	r23
    3f3c:	6f 91       	pop	r22
    3f3e:	5f 91       	pop	r21
    3f40:	4f 91       	pop	r20
    3f42:	3f 91       	pop	r19
    3f44:	2f 91       	pop	r18
    3f46:	0f 90       	pop	r0
    3f48:	0b be       	out	0x3b, r0	; 59
    3f4a:	0f 90       	pop	r0
    3f4c:	0f be       	out	0x3f, r0	; 63
    3f4e:	0f 90       	pop	r0
    3f50:	1f 90       	pop	r1
    3f52:	18 95       	reti

00003f54 <__vector_78>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_ERR_vect)      /* Error Interrupt */
    3f54:	1f 92       	push	r1
    3f56:	0f 92       	push	r0
    3f58:	0f b6       	in	r0, 0x3f	; 63
    3f5a:	0f 92       	push	r0
    3f5c:	11 24       	eor	r1, r1
    3f5e:	0b b6       	in	r0, 0x3b	; 59
    3f60:	0f 92       	push	r0
    3f62:	2f 93       	push	r18
    3f64:	3f 93       	push	r19
    3f66:	4f 93       	push	r20
    3f68:	5f 93       	push	r21
    3f6a:	6f 93       	push	r22
    3f6c:	7f 93       	push	r23
    3f6e:	8f 93       	push	r24
    3f70:	9f 93       	push	r25
    3f72:	af 93       	push	r26
    3f74:	bf 93       	push	r27
    3f76:	ef 93       	push	r30
    3f78:	ff 93       	push	r31
    3f7a:	e0 91 2a 24 	lds	r30, 0x242A	; 0x80242a <InterruptFuncTable+0x9c>
    3f7e:	f0 91 2b 24 	lds	r31, 0x242B	; 0x80242b <InterruptFuncTable+0x9d>
    3f82:	30 97       	sbiw	r30, 0x00	; 0
    3f84:	29 f0       	breq	.+10     	; 0x3f90 <__vector_78+0x3c>
    3f86:	80 91 20 25 	lds	r24, 0x2520	; 0x802520 <InterruptSenderTable+0x9c>
    3f8a:	90 91 21 25 	lds	r25, 0x2521	; 0x802521 <InterruptSenderTable+0x9d>
    3f8e:	19 95       	eicall
    3f90:	ff 91       	pop	r31
    3f92:	ef 91       	pop	r30
    3f94:	bf 91       	pop	r27
    3f96:	af 91       	pop	r26
    3f98:	9f 91       	pop	r25
    3f9a:	8f 91       	pop	r24
    3f9c:	7f 91       	pop	r23
    3f9e:	6f 91       	pop	r22
    3fa0:	5f 91       	pop	r21
    3fa2:	4f 91       	pop	r20
    3fa4:	3f 91       	pop	r19
    3fa6:	2f 91       	pop	r18
    3fa8:	0f 90       	pop	r0
    3faa:	0b be       	out	0x3b, r0	; 59
    3fac:	0f 90       	pop	r0
    3fae:	0f be       	out	0x3f, r0	; 63
    3fb0:	0f 90       	pop	r0
    3fb2:	1f 90       	pop	r1
    3fb4:	18 95       	reti

00003fb6 <__vector_79>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCA_vect)      /* Compare or Capture A Interrupt */
    3fb6:	1f 92       	push	r1
    3fb8:	0f 92       	push	r0
    3fba:	0f b6       	in	r0, 0x3f	; 63
    3fbc:	0f 92       	push	r0
    3fbe:	11 24       	eor	r1, r1
    3fc0:	0b b6       	in	r0, 0x3b	; 59
    3fc2:	0f 92       	push	r0
    3fc4:	2f 93       	push	r18
    3fc6:	3f 93       	push	r19
    3fc8:	4f 93       	push	r20
    3fca:	5f 93       	push	r21
    3fcc:	6f 93       	push	r22
    3fce:	7f 93       	push	r23
    3fd0:	8f 93       	push	r24
    3fd2:	9f 93       	push	r25
    3fd4:	af 93       	push	r26
    3fd6:	bf 93       	push	r27
    3fd8:	ef 93       	push	r30
    3fda:	ff 93       	push	r31
    3fdc:	e0 91 2c 24 	lds	r30, 0x242C	; 0x80242c <InterruptFuncTable+0x9e>
    3fe0:	f0 91 2d 24 	lds	r31, 0x242D	; 0x80242d <InterruptFuncTable+0x9f>
    3fe4:	30 97       	sbiw	r30, 0x00	; 0
    3fe6:	29 f0       	breq	.+10     	; 0x3ff2 <__vector_79+0x3c>
    3fe8:	80 91 22 25 	lds	r24, 0x2522	; 0x802522 <InterruptSenderTable+0x9e>
    3fec:	90 91 23 25 	lds	r25, 0x2523	; 0x802523 <InterruptSenderTable+0x9f>
    3ff0:	19 95       	eicall
    3ff2:	ff 91       	pop	r31
    3ff4:	ef 91       	pop	r30
    3ff6:	bf 91       	pop	r27
    3ff8:	af 91       	pop	r26
    3ffa:	9f 91       	pop	r25
    3ffc:	8f 91       	pop	r24
    3ffe:	7f 91       	pop	r23
    4000:	6f 91       	pop	r22
    4002:	5f 91       	pop	r21
    4004:	4f 91       	pop	r20
    4006:	3f 91       	pop	r19
    4008:	2f 91       	pop	r18
    400a:	0f 90       	pop	r0
    400c:	0b be       	out	0x3b, r0	; 59
    400e:	0f 90       	pop	r0
    4010:	0f be       	out	0x3f, r0	; 63
    4012:	0f 90       	pop	r0
    4014:	1f 90       	pop	r1
    4016:	18 95       	reti

00004018 <__vector_80>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCB_vect)      /* Compare or Capture B Interrupt */
    4018:	1f 92       	push	r1
    401a:	0f 92       	push	r0
    401c:	0f b6       	in	r0, 0x3f	; 63
    401e:	0f 92       	push	r0
    4020:	11 24       	eor	r1, r1
    4022:	0b b6       	in	r0, 0x3b	; 59
    4024:	0f 92       	push	r0
    4026:	2f 93       	push	r18
    4028:	3f 93       	push	r19
    402a:	4f 93       	push	r20
    402c:	5f 93       	push	r21
    402e:	6f 93       	push	r22
    4030:	7f 93       	push	r23
    4032:	8f 93       	push	r24
    4034:	9f 93       	push	r25
    4036:	af 93       	push	r26
    4038:	bf 93       	push	r27
    403a:	ef 93       	push	r30
    403c:	ff 93       	push	r31
    403e:	e0 91 2e 24 	lds	r30, 0x242E	; 0x80242e <InterruptFuncTable+0xa0>
    4042:	f0 91 2f 24 	lds	r31, 0x242F	; 0x80242f <InterruptFuncTable+0xa1>
    4046:	30 97       	sbiw	r30, 0x00	; 0
    4048:	29 f0       	breq	.+10     	; 0x4054 <__vector_80+0x3c>
    404a:	80 91 24 25 	lds	r24, 0x2524	; 0x802524 <InterruptSenderTable+0xa0>
    404e:	90 91 25 25 	lds	r25, 0x2525	; 0x802525 <InterruptSenderTable+0xa1>
    4052:	19 95       	eicall
    4054:	ff 91       	pop	r31
    4056:	ef 91       	pop	r30
    4058:	bf 91       	pop	r27
    405a:	af 91       	pop	r26
    405c:	9f 91       	pop	r25
    405e:	8f 91       	pop	r24
    4060:	7f 91       	pop	r23
    4062:	6f 91       	pop	r22
    4064:	5f 91       	pop	r21
    4066:	4f 91       	pop	r20
    4068:	3f 91       	pop	r19
    406a:	2f 91       	pop	r18
    406c:	0f 90       	pop	r0
    406e:	0b be       	out	0x3b, r0	; 59
    4070:	0f 90       	pop	r0
    4072:	0f be       	out	0x3f, r0	; 63
    4074:	0f 90       	pop	r0
    4076:	1f 90       	pop	r1
    4078:	18 95       	reti

0000407a <__vector_81>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCC_vect)      /* Compare or Capture C Interrupt */
    407a:	1f 92       	push	r1
    407c:	0f 92       	push	r0
    407e:	0f b6       	in	r0, 0x3f	; 63
    4080:	0f 92       	push	r0
    4082:	11 24       	eor	r1, r1
    4084:	0b b6       	in	r0, 0x3b	; 59
    4086:	0f 92       	push	r0
    4088:	2f 93       	push	r18
    408a:	3f 93       	push	r19
    408c:	4f 93       	push	r20
    408e:	5f 93       	push	r21
    4090:	6f 93       	push	r22
    4092:	7f 93       	push	r23
    4094:	8f 93       	push	r24
    4096:	9f 93       	push	r25
    4098:	af 93       	push	r26
    409a:	bf 93       	push	r27
    409c:	ef 93       	push	r30
    409e:	ff 93       	push	r31
    40a0:	e0 91 30 24 	lds	r30, 0x2430	; 0x802430 <InterruptFuncTable+0xa2>
    40a4:	f0 91 31 24 	lds	r31, 0x2431	; 0x802431 <InterruptFuncTable+0xa3>
    40a8:	30 97       	sbiw	r30, 0x00	; 0
    40aa:	29 f0       	breq	.+10     	; 0x40b6 <__vector_81+0x3c>
    40ac:	80 91 26 25 	lds	r24, 0x2526	; 0x802526 <InterruptSenderTable+0xa2>
    40b0:	90 91 27 25 	lds	r25, 0x2527	; 0x802527 <InterruptSenderTable+0xa3>
    40b4:	19 95       	eicall
    40b6:	ff 91       	pop	r31
    40b8:	ef 91       	pop	r30
    40ba:	bf 91       	pop	r27
    40bc:	af 91       	pop	r26
    40be:	9f 91       	pop	r25
    40c0:	8f 91       	pop	r24
    40c2:	7f 91       	pop	r23
    40c4:	6f 91       	pop	r22
    40c6:	5f 91       	pop	r21
    40c8:	4f 91       	pop	r20
    40ca:	3f 91       	pop	r19
    40cc:	2f 91       	pop	r18
    40ce:	0f 90       	pop	r0
    40d0:	0b be       	out	0x3b, r0	; 59
    40d2:	0f 90       	pop	r0
    40d4:	0f be       	out	0x3f, r0	; 63
    40d6:	0f 90       	pop	r0
    40d8:	1f 90       	pop	r1
    40da:	18 95       	reti

000040dc <__vector_82>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCD_vect)      /* Compare or Capture D Interrupt */
    40dc:	1f 92       	push	r1
    40de:	0f 92       	push	r0
    40e0:	0f b6       	in	r0, 0x3f	; 63
    40e2:	0f 92       	push	r0
    40e4:	11 24       	eor	r1, r1
    40e6:	0b b6       	in	r0, 0x3b	; 59
    40e8:	0f 92       	push	r0
    40ea:	2f 93       	push	r18
    40ec:	3f 93       	push	r19
    40ee:	4f 93       	push	r20
    40f0:	5f 93       	push	r21
    40f2:	6f 93       	push	r22
    40f4:	7f 93       	push	r23
    40f6:	8f 93       	push	r24
    40f8:	9f 93       	push	r25
    40fa:	af 93       	push	r26
    40fc:	bf 93       	push	r27
    40fe:	ef 93       	push	r30
    4100:	ff 93       	push	r31
    4102:	e0 91 32 24 	lds	r30, 0x2432	; 0x802432 <InterruptFuncTable+0xa4>
    4106:	f0 91 33 24 	lds	r31, 0x2433	; 0x802433 <InterruptFuncTable+0xa5>
    410a:	30 97       	sbiw	r30, 0x00	; 0
    410c:	29 f0       	breq	.+10     	; 0x4118 <__vector_82+0x3c>
    410e:	80 91 28 25 	lds	r24, 0x2528	; 0x802528 <InterruptSenderTable+0xa4>
    4112:	90 91 29 25 	lds	r25, 0x2529	; 0x802529 <InterruptSenderTable+0xa5>
    4116:	19 95       	eicall
    4118:	ff 91       	pop	r31
    411a:	ef 91       	pop	r30
    411c:	bf 91       	pop	r27
    411e:	af 91       	pop	r26
    4120:	9f 91       	pop	r25
    4122:	8f 91       	pop	r24
    4124:	7f 91       	pop	r23
    4126:	6f 91       	pop	r22
    4128:	5f 91       	pop	r21
    412a:	4f 91       	pop	r20
    412c:	3f 91       	pop	r19
    412e:	2f 91       	pop	r18
    4130:	0f 90       	pop	r0
    4132:	0b be       	out	0x3b, r0	; 59
    4134:	0f 90       	pop	r0
    4136:	0f be       	out	0x3f, r0	; 63
    4138:	0f 90       	pop	r0
    413a:	1f 90       	pop	r1
    413c:	18 95       	reti

0000413e <__vector_83>:

/* TCD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_OVF_vect)      /* Overflow Interrupt */
    413e:	1f 92       	push	r1
    4140:	0f 92       	push	r0
    4142:	0f b6       	in	r0, 0x3f	; 63
    4144:	0f 92       	push	r0
    4146:	11 24       	eor	r1, r1
    4148:	0b b6       	in	r0, 0x3b	; 59
    414a:	0f 92       	push	r0
    414c:	2f 93       	push	r18
    414e:	3f 93       	push	r19
    4150:	4f 93       	push	r20
    4152:	5f 93       	push	r21
    4154:	6f 93       	push	r22
    4156:	7f 93       	push	r23
    4158:	8f 93       	push	r24
    415a:	9f 93       	push	r25
    415c:	af 93       	push	r26
    415e:	bf 93       	push	r27
    4160:	ef 93       	push	r30
    4162:	ff 93       	push	r31
    4164:	e0 91 34 24 	lds	r30, 0x2434	; 0x802434 <InterruptFuncTable+0xa6>
    4168:	f0 91 35 24 	lds	r31, 0x2435	; 0x802435 <InterruptFuncTable+0xa7>
    416c:	30 97       	sbiw	r30, 0x00	; 0
    416e:	29 f0       	breq	.+10     	; 0x417a <__vector_83+0x3c>
    4170:	80 91 2a 25 	lds	r24, 0x252A	; 0x80252a <InterruptSenderTable+0xa6>
    4174:	90 91 2b 25 	lds	r25, 0x252B	; 0x80252b <InterruptSenderTable+0xa7>
    4178:	19 95       	eicall
    417a:	ff 91       	pop	r31
    417c:	ef 91       	pop	r30
    417e:	bf 91       	pop	r27
    4180:	af 91       	pop	r26
    4182:	9f 91       	pop	r25
    4184:	8f 91       	pop	r24
    4186:	7f 91       	pop	r23
    4188:	6f 91       	pop	r22
    418a:	5f 91       	pop	r21
    418c:	4f 91       	pop	r20
    418e:	3f 91       	pop	r19
    4190:	2f 91       	pop	r18
    4192:	0f 90       	pop	r0
    4194:	0b be       	out	0x3b, r0	; 59
    4196:	0f 90       	pop	r0
    4198:	0f be       	out	0x3f, r0	; 63
    419a:	0f 90       	pop	r0
    419c:	1f 90       	pop	r1
    419e:	18 95       	reti

000041a0 <__vector_84>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_ERR_vect)      /* Error Interrupt */
    41a0:	1f 92       	push	r1
    41a2:	0f 92       	push	r0
    41a4:	0f b6       	in	r0, 0x3f	; 63
    41a6:	0f 92       	push	r0
    41a8:	11 24       	eor	r1, r1
    41aa:	0b b6       	in	r0, 0x3b	; 59
    41ac:	0f 92       	push	r0
    41ae:	2f 93       	push	r18
    41b0:	3f 93       	push	r19
    41b2:	4f 93       	push	r20
    41b4:	5f 93       	push	r21
    41b6:	6f 93       	push	r22
    41b8:	7f 93       	push	r23
    41ba:	8f 93       	push	r24
    41bc:	9f 93       	push	r25
    41be:	af 93       	push	r26
    41c0:	bf 93       	push	r27
    41c2:	ef 93       	push	r30
    41c4:	ff 93       	push	r31
    41c6:	e0 91 36 24 	lds	r30, 0x2436	; 0x802436 <InterruptFuncTable+0xa8>
    41ca:	f0 91 37 24 	lds	r31, 0x2437	; 0x802437 <InterruptFuncTable+0xa9>
    41ce:	30 97       	sbiw	r30, 0x00	; 0
    41d0:	29 f0       	breq	.+10     	; 0x41dc <__vector_84+0x3c>
    41d2:	80 91 2c 25 	lds	r24, 0x252C	; 0x80252c <InterruptSenderTable+0xa8>
    41d6:	90 91 2d 25 	lds	r25, 0x252D	; 0x80252d <InterruptSenderTable+0xa9>
    41da:	19 95       	eicall
    41dc:	ff 91       	pop	r31
    41de:	ef 91       	pop	r30
    41e0:	bf 91       	pop	r27
    41e2:	af 91       	pop	r26
    41e4:	9f 91       	pop	r25
    41e6:	8f 91       	pop	r24
    41e8:	7f 91       	pop	r23
    41ea:	6f 91       	pop	r22
    41ec:	5f 91       	pop	r21
    41ee:	4f 91       	pop	r20
    41f0:	3f 91       	pop	r19
    41f2:	2f 91       	pop	r18
    41f4:	0f 90       	pop	r0
    41f6:	0b be       	out	0x3b, r0	; 59
    41f8:	0f 90       	pop	r0
    41fa:	0f be       	out	0x3f, r0	; 63
    41fc:	0f 90       	pop	r0
    41fe:	1f 90       	pop	r1
    4200:	18 95       	reti

00004202 <__vector_85>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCA_vect)      /* Compare or Capture A Interrupt */
    4202:	1f 92       	push	r1
    4204:	0f 92       	push	r0
    4206:	0f b6       	in	r0, 0x3f	; 63
    4208:	0f 92       	push	r0
    420a:	11 24       	eor	r1, r1
    420c:	0b b6       	in	r0, 0x3b	; 59
    420e:	0f 92       	push	r0
    4210:	2f 93       	push	r18
    4212:	3f 93       	push	r19
    4214:	4f 93       	push	r20
    4216:	5f 93       	push	r21
    4218:	6f 93       	push	r22
    421a:	7f 93       	push	r23
    421c:	8f 93       	push	r24
    421e:	9f 93       	push	r25
    4220:	af 93       	push	r26
    4222:	bf 93       	push	r27
    4224:	ef 93       	push	r30
    4226:	ff 93       	push	r31
    4228:	e0 91 38 24 	lds	r30, 0x2438	; 0x802438 <InterruptFuncTable+0xaa>
    422c:	f0 91 39 24 	lds	r31, 0x2439	; 0x802439 <InterruptFuncTable+0xab>
    4230:	30 97       	sbiw	r30, 0x00	; 0
    4232:	29 f0       	breq	.+10     	; 0x423e <__vector_85+0x3c>
    4234:	80 91 2e 25 	lds	r24, 0x252E	; 0x80252e <InterruptSenderTable+0xaa>
    4238:	90 91 2f 25 	lds	r25, 0x252F	; 0x80252f <InterruptSenderTable+0xab>
    423c:	19 95       	eicall
    423e:	ff 91       	pop	r31
    4240:	ef 91       	pop	r30
    4242:	bf 91       	pop	r27
    4244:	af 91       	pop	r26
    4246:	9f 91       	pop	r25
    4248:	8f 91       	pop	r24
    424a:	7f 91       	pop	r23
    424c:	6f 91       	pop	r22
    424e:	5f 91       	pop	r21
    4250:	4f 91       	pop	r20
    4252:	3f 91       	pop	r19
    4254:	2f 91       	pop	r18
    4256:	0f 90       	pop	r0
    4258:	0b be       	out	0x3b, r0	; 59
    425a:	0f 90       	pop	r0
    425c:	0f be       	out	0x3f, r0	; 63
    425e:	0f 90       	pop	r0
    4260:	1f 90       	pop	r1
    4262:	18 95       	reti

00004264 <__vector_86>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCB_vect)      /* Compare or Capture B Interrupt */
    4264:	1f 92       	push	r1
    4266:	0f 92       	push	r0
    4268:	0f b6       	in	r0, 0x3f	; 63
    426a:	0f 92       	push	r0
    426c:	11 24       	eor	r1, r1
    426e:	0b b6       	in	r0, 0x3b	; 59
    4270:	0f 92       	push	r0
    4272:	2f 93       	push	r18
    4274:	3f 93       	push	r19
    4276:	4f 93       	push	r20
    4278:	5f 93       	push	r21
    427a:	6f 93       	push	r22
    427c:	7f 93       	push	r23
    427e:	8f 93       	push	r24
    4280:	9f 93       	push	r25
    4282:	af 93       	push	r26
    4284:	bf 93       	push	r27
    4286:	ef 93       	push	r30
    4288:	ff 93       	push	r31
    428a:	e0 91 3a 24 	lds	r30, 0x243A	; 0x80243a <InterruptFuncTable+0xac>
    428e:	f0 91 3b 24 	lds	r31, 0x243B	; 0x80243b <InterruptFuncTable+0xad>
    4292:	30 97       	sbiw	r30, 0x00	; 0
    4294:	29 f0       	breq	.+10     	; 0x42a0 <__vector_86+0x3c>
    4296:	80 91 30 25 	lds	r24, 0x2530	; 0x802530 <InterruptSenderTable+0xac>
    429a:	90 91 31 25 	lds	r25, 0x2531	; 0x802531 <InterruptSenderTable+0xad>
    429e:	19 95       	eicall
    42a0:	ff 91       	pop	r31
    42a2:	ef 91       	pop	r30
    42a4:	bf 91       	pop	r27
    42a6:	af 91       	pop	r26
    42a8:	9f 91       	pop	r25
    42aa:	8f 91       	pop	r24
    42ac:	7f 91       	pop	r23
    42ae:	6f 91       	pop	r22
    42b0:	5f 91       	pop	r21
    42b2:	4f 91       	pop	r20
    42b4:	3f 91       	pop	r19
    42b6:	2f 91       	pop	r18
    42b8:	0f 90       	pop	r0
    42ba:	0b be       	out	0x3b, r0	; 59
    42bc:	0f 90       	pop	r0
    42be:	0f be       	out	0x3f, r0	; 63
    42c0:	0f 90       	pop	r0
    42c2:	1f 90       	pop	r1
    42c4:	18 95       	reti

000042c6 <__vector_87>:

/* SPID interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPID_INT_vect)      /* SPI Interrupt */
    42c6:	1f 92       	push	r1
    42c8:	0f 92       	push	r0
    42ca:	0f b6       	in	r0, 0x3f	; 63
    42cc:	0f 92       	push	r0
    42ce:	11 24       	eor	r1, r1
    42d0:	0b b6       	in	r0, 0x3b	; 59
    42d2:	0f 92       	push	r0
    42d4:	2f 93       	push	r18
    42d6:	3f 93       	push	r19
    42d8:	4f 93       	push	r20
    42da:	5f 93       	push	r21
    42dc:	6f 93       	push	r22
    42de:	7f 93       	push	r23
    42e0:	8f 93       	push	r24
    42e2:	9f 93       	push	r25
    42e4:	af 93       	push	r26
    42e6:	bf 93       	push	r27
    42e8:	ef 93       	push	r30
    42ea:	ff 93       	push	r31
    42ec:	e0 91 3c 24 	lds	r30, 0x243C	; 0x80243c <InterruptFuncTable+0xae>
    42f0:	f0 91 3d 24 	lds	r31, 0x243D	; 0x80243d <InterruptFuncTable+0xaf>
    42f4:	30 97       	sbiw	r30, 0x00	; 0
    42f6:	29 f0       	breq	.+10     	; 0x4302 <__vector_87+0x3c>
    42f8:	80 91 32 25 	lds	r24, 0x2532	; 0x802532 <InterruptSenderTable+0xae>
    42fc:	90 91 33 25 	lds	r25, 0x2533	; 0x802533 <InterruptSenderTable+0xaf>
    4300:	19 95       	eicall
    4302:	ff 91       	pop	r31
    4304:	ef 91       	pop	r30
    4306:	bf 91       	pop	r27
    4308:	af 91       	pop	r26
    430a:	9f 91       	pop	r25
    430c:	8f 91       	pop	r24
    430e:	7f 91       	pop	r23
    4310:	6f 91       	pop	r22
    4312:	5f 91       	pop	r21
    4314:	4f 91       	pop	r20
    4316:	3f 91       	pop	r19
    4318:	2f 91       	pop	r18
    431a:	0f 90       	pop	r0
    431c:	0b be       	out	0x3b, r0	; 59
    431e:	0f 90       	pop	r0
    4320:	0f be       	out	0x3f, r0	; 63
    4322:	0f 90       	pop	r0
    4324:	1f 90       	pop	r1
    4326:	18 95       	reti

00004328 <__vector_88>:

/* USARTD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_RXC_vect)      /* Reception Complete Interrupt */
    4328:	1f 92       	push	r1
    432a:	0f 92       	push	r0
    432c:	0f b6       	in	r0, 0x3f	; 63
    432e:	0f 92       	push	r0
    4330:	11 24       	eor	r1, r1
    4332:	0b b6       	in	r0, 0x3b	; 59
    4334:	0f 92       	push	r0
    4336:	2f 93       	push	r18
    4338:	3f 93       	push	r19
    433a:	4f 93       	push	r20
    433c:	5f 93       	push	r21
    433e:	6f 93       	push	r22
    4340:	7f 93       	push	r23
    4342:	8f 93       	push	r24
    4344:	9f 93       	push	r25
    4346:	af 93       	push	r26
    4348:	bf 93       	push	r27
    434a:	ef 93       	push	r30
    434c:	ff 93       	push	r31
    434e:	e0 91 3e 24 	lds	r30, 0x243E	; 0x80243e <InterruptFuncTable+0xb0>
    4352:	f0 91 3f 24 	lds	r31, 0x243F	; 0x80243f <InterruptFuncTable+0xb1>
    4356:	30 97       	sbiw	r30, 0x00	; 0
    4358:	29 f0       	breq	.+10     	; 0x4364 <__vector_88+0x3c>
    435a:	80 91 34 25 	lds	r24, 0x2534	; 0x802534 <InterruptSenderTable+0xb0>
    435e:	90 91 35 25 	lds	r25, 0x2535	; 0x802535 <InterruptSenderTable+0xb1>
    4362:	19 95       	eicall
    4364:	ff 91       	pop	r31
    4366:	ef 91       	pop	r30
    4368:	bf 91       	pop	r27
    436a:	af 91       	pop	r26
    436c:	9f 91       	pop	r25
    436e:	8f 91       	pop	r24
    4370:	7f 91       	pop	r23
    4372:	6f 91       	pop	r22
    4374:	5f 91       	pop	r21
    4376:	4f 91       	pop	r20
    4378:	3f 91       	pop	r19
    437a:	2f 91       	pop	r18
    437c:	0f 90       	pop	r0
    437e:	0b be       	out	0x3b, r0	; 59
    4380:	0f 90       	pop	r0
    4382:	0f be       	out	0x3f, r0	; 63
    4384:	0f 90       	pop	r0
    4386:	1f 90       	pop	r1
    4388:	18 95       	reti

0000438a <__vector_89>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_DRE_vect)      /* Data Register Empty Interrupt */
    438a:	1f 92       	push	r1
    438c:	0f 92       	push	r0
    438e:	0f b6       	in	r0, 0x3f	; 63
    4390:	0f 92       	push	r0
    4392:	11 24       	eor	r1, r1
    4394:	0b b6       	in	r0, 0x3b	; 59
    4396:	0f 92       	push	r0
    4398:	2f 93       	push	r18
    439a:	3f 93       	push	r19
    439c:	4f 93       	push	r20
    439e:	5f 93       	push	r21
    43a0:	6f 93       	push	r22
    43a2:	7f 93       	push	r23
    43a4:	8f 93       	push	r24
    43a6:	9f 93       	push	r25
    43a8:	af 93       	push	r26
    43aa:	bf 93       	push	r27
    43ac:	ef 93       	push	r30
    43ae:	ff 93       	push	r31
    43b0:	e0 91 40 24 	lds	r30, 0x2440	; 0x802440 <InterruptFuncTable+0xb2>
    43b4:	f0 91 41 24 	lds	r31, 0x2441	; 0x802441 <InterruptFuncTable+0xb3>
    43b8:	30 97       	sbiw	r30, 0x00	; 0
    43ba:	29 f0       	breq	.+10     	; 0x43c6 <__vector_89+0x3c>
    43bc:	80 91 36 25 	lds	r24, 0x2536	; 0x802536 <InterruptSenderTable+0xb2>
    43c0:	90 91 37 25 	lds	r25, 0x2537	; 0x802537 <InterruptSenderTable+0xb3>
    43c4:	19 95       	eicall
    43c6:	ff 91       	pop	r31
    43c8:	ef 91       	pop	r30
    43ca:	bf 91       	pop	r27
    43cc:	af 91       	pop	r26
    43ce:	9f 91       	pop	r25
    43d0:	8f 91       	pop	r24
    43d2:	7f 91       	pop	r23
    43d4:	6f 91       	pop	r22
    43d6:	5f 91       	pop	r21
    43d8:	4f 91       	pop	r20
    43da:	3f 91       	pop	r19
    43dc:	2f 91       	pop	r18
    43de:	0f 90       	pop	r0
    43e0:	0b be       	out	0x3b, r0	; 59
    43e2:	0f 90       	pop	r0
    43e4:	0f be       	out	0x3f, r0	; 63
    43e6:	0f 90       	pop	r0
    43e8:	1f 90       	pop	r1
    43ea:	18 95       	reti

000043ec <__vector_90>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_TXC_vect)      /* Transmission Complete Interrupt */
    43ec:	1f 92       	push	r1
    43ee:	0f 92       	push	r0
    43f0:	0f b6       	in	r0, 0x3f	; 63
    43f2:	0f 92       	push	r0
    43f4:	11 24       	eor	r1, r1
    43f6:	0b b6       	in	r0, 0x3b	; 59
    43f8:	0f 92       	push	r0
    43fa:	2f 93       	push	r18
    43fc:	3f 93       	push	r19
    43fe:	4f 93       	push	r20
    4400:	5f 93       	push	r21
    4402:	6f 93       	push	r22
    4404:	7f 93       	push	r23
    4406:	8f 93       	push	r24
    4408:	9f 93       	push	r25
    440a:	af 93       	push	r26
    440c:	bf 93       	push	r27
    440e:	ef 93       	push	r30
    4410:	ff 93       	push	r31
    4412:	e0 91 42 24 	lds	r30, 0x2442	; 0x802442 <InterruptFuncTable+0xb4>
    4416:	f0 91 43 24 	lds	r31, 0x2443	; 0x802443 <InterruptFuncTable+0xb5>
    441a:	30 97       	sbiw	r30, 0x00	; 0
    441c:	29 f0       	breq	.+10     	; 0x4428 <__vector_90+0x3c>
    441e:	80 91 38 25 	lds	r24, 0x2538	; 0x802538 <InterruptSenderTable+0xb4>
    4422:	90 91 39 25 	lds	r25, 0x2539	; 0x802539 <InterruptSenderTable+0xb5>
    4426:	19 95       	eicall
    4428:	ff 91       	pop	r31
    442a:	ef 91       	pop	r30
    442c:	bf 91       	pop	r27
    442e:	af 91       	pop	r26
    4430:	9f 91       	pop	r25
    4432:	8f 91       	pop	r24
    4434:	7f 91       	pop	r23
    4436:	6f 91       	pop	r22
    4438:	5f 91       	pop	r21
    443a:	4f 91       	pop	r20
    443c:	3f 91       	pop	r19
    443e:	2f 91       	pop	r18
    4440:	0f 90       	pop	r0
    4442:	0b be       	out	0x3b, r0	; 59
    4444:	0f 90       	pop	r0
    4446:	0f be       	out	0x3f, r0	; 63
    4448:	0f 90       	pop	r0
    444a:	1f 90       	pop	r1
    444c:	18 95       	reti

0000444e <__vector_91>:

/* USARTD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_RXC_vect)      /* Reception Complete Interrupt */
    444e:	1f 92       	push	r1
    4450:	0f 92       	push	r0
    4452:	0f b6       	in	r0, 0x3f	; 63
    4454:	0f 92       	push	r0
    4456:	11 24       	eor	r1, r1
    4458:	0b b6       	in	r0, 0x3b	; 59
    445a:	0f 92       	push	r0
    445c:	2f 93       	push	r18
    445e:	3f 93       	push	r19
    4460:	4f 93       	push	r20
    4462:	5f 93       	push	r21
    4464:	6f 93       	push	r22
    4466:	7f 93       	push	r23
    4468:	8f 93       	push	r24
    446a:	9f 93       	push	r25
    446c:	af 93       	push	r26
    446e:	bf 93       	push	r27
    4470:	ef 93       	push	r30
    4472:	ff 93       	push	r31
    4474:	e0 91 44 24 	lds	r30, 0x2444	; 0x802444 <InterruptFuncTable+0xb6>
    4478:	f0 91 45 24 	lds	r31, 0x2445	; 0x802445 <InterruptFuncTable+0xb7>
    447c:	30 97       	sbiw	r30, 0x00	; 0
    447e:	29 f0       	breq	.+10     	; 0x448a <__vector_91+0x3c>
    4480:	80 91 3a 25 	lds	r24, 0x253A	; 0x80253a <InterruptSenderTable+0xb6>
    4484:	90 91 3b 25 	lds	r25, 0x253B	; 0x80253b <InterruptSenderTable+0xb7>
    4488:	19 95       	eicall
    448a:	ff 91       	pop	r31
    448c:	ef 91       	pop	r30
    448e:	bf 91       	pop	r27
    4490:	af 91       	pop	r26
    4492:	9f 91       	pop	r25
    4494:	8f 91       	pop	r24
    4496:	7f 91       	pop	r23
    4498:	6f 91       	pop	r22
    449a:	5f 91       	pop	r21
    449c:	4f 91       	pop	r20
    449e:	3f 91       	pop	r19
    44a0:	2f 91       	pop	r18
    44a2:	0f 90       	pop	r0
    44a4:	0b be       	out	0x3b, r0	; 59
    44a6:	0f 90       	pop	r0
    44a8:	0f be       	out	0x3f, r0	; 63
    44aa:	0f 90       	pop	r0
    44ac:	1f 90       	pop	r1
    44ae:	18 95       	reti

000044b0 <__vector_92>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_DRE_vect)      /* Data Register Empty Interrupt */
    44b0:	1f 92       	push	r1
    44b2:	0f 92       	push	r0
    44b4:	0f b6       	in	r0, 0x3f	; 63
    44b6:	0f 92       	push	r0
    44b8:	11 24       	eor	r1, r1
    44ba:	0b b6       	in	r0, 0x3b	; 59
    44bc:	0f 92       	push	r0
    44be:	2f 93       	push	r18
    44c0:	3f 93       	push	r19
    44c2:	4f 93       	push	r20
    44c4:	5f 93       	push	r21
    44c6:	6f 93       	push	r22
    44c8:	7f 93       	push	r23
    44ca:	8f 93       	push	r24
    44cc:	9f 93       	push	r25
    44ce:	af 93       	push	r26
    44d0:	bf 93       	push	r27
    44d2:	ef 93       	push	r30
    44d4:	ff 93       	push	r31
    44d6:	e0 91 46 24 	lds	r30, 0x2446	; 0x802446 <InterruptFuncTable+0xb8>
    44da:	f0 91 47 24 	lds	r31, 0x2447	; 0x802447 <InterruptFuncTable+0xb9>
    44de:	30 97       	sbiw	r30, 0x00	; 0
    44e0:	29 f0       	breq	.+10     	; 0x44ec <__vector_92+0x3c>
    44e2:	80 91 3c 25 	lds	r24, 0x253C	; 0x80253c <InterruptSenderTable+0xb8>
    44e6:	90 91 3d 25 	lds	r25, 0x253D	; 0x80253d <InterruptSenderTable+0xb9>
    44ea:	19 95       	eicall
    44ec:	ff 91       	pop	r31
    44ee:	ef 91       	pop	r30
    44f0:	bf 91       	pop	r27
    44f2:	af 91       	pop	r26
    44f4:	9f 91       	pop	r25
    44f6:	8f 91       	pop	r24
    44f8:	7f 91       	pop	r23
    44fa:	6f 91       	pop	r22
    44fc:	5f 91       	pop	r21
    44fe:	4f 91       	pop	r20
    4500:	3f 91       	pop	r19
    4502:	2f 91       	pop	r18
    4504:	0f 90       	pop	r0
    4506:	0b be       	out	0x3b, r0	; 59
    4508:	0f 90       	pop	r0
    450a:	0f be       	out	0x3f, r0	; 63
    450c:	0f 90       	pop	r0
    450e:	1f 90       	pop	r1
    4510:	18 95       	reti

00004512 <__vector_93>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_TXC_vect)      /* Transmission Complete Interrupt */
    4512:	1f 92       	push	r1
    4514:	0f 92       	push	r0
    4516:	0f b6       	in	r0, 0x3f	; 63
    4518:	0f 92       	push	r0
    451a:	11 24       	eor	r1, r1
    451c:	0b b6       	in	r0, 0x3b	; 59
    451e:	0f 92       	push	r0
    4520:	2f 93       	push	r18
    4522:	3f 93       	push	r19
    4524:	4f 93       	push	r20
    4526:	5f 93       	push	r21
    4528:	6f 93       	push	r22
    452a:	7f 93       	push	r23
    452c:	8f 93       	push	r24
    452e:	9f 93       	push	r25
    4530:	af 93       	push	r26
    4532:	bf 93       	push	r27
    4534:	ef 93       	push	r30
    4536:	ff 93       	push	r31
    4538:	e0 91 48 24 	lds	r30, 0x2448	; 0x802448 <InterruptFuncTable+0xba>
    453c:	f0 91 49 24 	lds	r31, 0x2449	; 0x802449 <InterruptFuncTable+0xbb>
    4540:	30 97       	sbiw	r30, 0x00	; 0
    4542:	29 f0       	breq	.+10     	; 0x454e <__vector_93+0x3c>
    4544:	80 91 3e 25 	lds	r24, 0x253E	; 0x80253e <InterruptSenderTable+0xba>
    4548:	90 91 3f 25 	lds	r25, 0x253F	; 0x80253f <InterruptSenderTable+0xbb>
    454c:	19 95       	eicall
    454e:	ff 91       	pop	r31
    4550:	ef 91       	pop	r30
    4552:	bf 91       	pop	r27
    4554:	af 91       	pop	r26
    4556:	9f 91       	pop	r25
    4558:	8f 91       	pop	r24
    455a:	7f 91       	pop	r23
    455c:	6f 91       	pop	r22
    455e:	5f 91       	pop	r21
    4560:	4f 91       	pop	r20
    4562:	3f 91       	pop	r19
    4564:	2f 91       	pop	r18
    4566:	0f 90       	pop	r0
    4568:	0b be       	out	0x3b, r0	; 59
    456a:	0f 90       	pop	r0
    456c:	0f be       	out	0x3f, r0	; 63
    456e:	0f 90       	pop	r0
    4570:	1f 90       	pop	r1
    4572:	18 95       	reti

00004574 <__vector_104>:

/* PORTF interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT0_vect)      /* External Interrupt 0 */
    4574:	1f 92       	push	r1
    4576:	0f 92       	push	r0
    4578:	0f b6       	in	r0, 0x3f	; 63
    457a:	0f 92       	push	r0
    457c:	11 24       	eor	r1, r1
    457e:	0b b6       	in	r0, 0x3b	; 59
    4580:	0f 92       	push	r0
    4582:	2f 93       	push	r18
    4584:	3f 93       	push	r19
    4586:	4f 93       	push	r20
    4588:	5f 93       	push	r21
    458a:	6f 93       	push	r22
    458c:	7f 93       	push	r23
    458e:	8f 93       	push	r24
    4590:	9f 93       	push	r25
    4592:	af 93       	push	r26
    4594:	bf 93       	push	r27
    4596:	ef 93       	push	r30
    4598:	ff 93       	push	r31
    459a:	e0 91 5e 24 	lds	r30, 0x245E	; 0x80245e <InterruptFuncTable+0xd0>
    459e:	f0 91 5f 24 	lds	r31, 0x245F	; 0x80245f <InterruptFuncTable+0xd1>
    45a2:	30 97       	sbiw	r30, 0x00	; 0
    45a4:	29 f0       	breq	.+10     	; 0x45b0 <__vector_104+0x3c>
    45a6:	80 91 54 25 	lds	r24, 0x2554	; 0x802554 <InterruptSenderTable+0xd0>
    45aa:	90 91 55 25 	lds	r25, 0x2555	; 0x802555 <InterruptSenderTable+0xd1>
    45ae:	19 95       	eicall
    45b0:	ff 91       	pop	r31
    45b2:	ef 91       	pop	r30
    45b4:	bf 91       	pop	r27
    45b6:	af 91       	pop	r26
    45b8:	9f 91       	pop	r25
    45ba:	8f 91       	pop	r24
    45bc:	7f 91       	pop	r23
    45be:	6f 91       	pop	r22
    45c0:	5f 91       	pop	r21
    45c2:	4f 91       	pop	r20
    45c4:	3f 91       	pop	r19
    45c6:	2f 91       	pop	r18
    45c8:	0f 90       	pop	r0
    45ca:	0b be       	out	0x3b, r0	; 59
    45cc:	0f 90       	pop	r0
    45ce:	0f be       	out	0x3f, r0	; 63
    45d0:	0f 90       	pop	r0
    45d2:	1f 90       	pop	r1
    45d4:	18 95       	reti

000045d6 <__vector_105>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT1_vect)      /* External Interrupt 1 */
    45d6:	1f 92       	push	r1
    45d8:	0f 92       	push	r0
    45da:	0f b6       	in	r0, 0x3f	; 63
    45dc:	0f 92       	push	r0
    45de:	11 24       	eor	r1, r1
    45e0:	0b b6       	in	r0, 0x3b	; 59
    45e2:	0f 92       	push	r0
    45e4:	2f 93       	push	r18
    45e6:	3f 93       	push	r19
    45e8:	4f 93       	push	r20
    45ea:	5f 93       	push	r21
    45ec:	6f 93       	push	r22
    45ee:	7f 93       	push	r23
    45f0:	8f 93       	push	r24
    45f2:	9f 93       	push	r25
    45f4:	af 93       	push	r26
    45f6:	bf 93       	push	r27
    45f8:	ef 93       	push	r30
    45fa:	ff 93       	push	r31
    45fc:	e0 91 60 24 	lds	r30, 0x2460	; 0x802460 <InterruptFuncTable+0xd2>
    4600:	f0 91 61 24 	lds	r31, 0x2461	; 0x802461 <InterruptFuncTable+0xd3>
    4604:	30 97       	sbiw	r30, 0x00	; 0
    4606:	29 f0       	breq	.+10     	; 0x4612 <__vector_105+0x3c>
    4608:	80 91 56 25 	lds	r24, 0x2556	; 0x802556 <InterruptSenderTable+0xd2>
    460c:	90 91 57 25 	lds	r25, 0x2557	; 0x802557 <InterruptSenderTable+0xd3>
    4610:	19 95       	eicall
    4612:	ff 91       	pop	r31
    4614:	ef 91       	pop	r30
    4616:	bf 91       	pop	r27
    4618:	af 91       	pop	r26
    461a:	9f 91       	pop	r25
    461c:	8f 91       	pop	r24
    461e:	7f 91       	pop	r23
    4620:	6f 91       	pop	r22
    4622:	5f 91       	pop	r21
    4624:	4f 91       	pop	r20
    4626:	3f 91       	pop	r19
    4628:	2f 91       	pop	r18
    462a:	0f 90       	pop	r0
    462c:	0b be       	out	0x3b, r0	; 59
    462e:	0f 90       	pop	r0
    4630:	0f be       	out	0x3f, r0	; 63
    4632:	0f 90       	pop	r0
    4634:	1f 90       	pop	r1
    4636:	18 95       	reti

00004638 <__vector_108>:

/* TCF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_OVF_vect)      /* Overflow Interrupt */
    4638:	1f 92       	push	r1
    463a:	0f 92       	push	r0
    463c:	0f b6       	in	r0, 0x3f	; 63
    463e:	0f 92       	push	r0
    4640:	11 24       	eor	r1, r1
    4642:	0b b6       	in	r0, 0x3b	; 59
    4644:	0f 92       	push	r0
    4646:	2f 93       	push	r18
    4648:	3f 93       	push	r19
    464a:	4f 93       	push	r20
    464c:	5f 93       	push	r21
    464e:	6f 93       	push	r22
    4650:	7f 93       	push	r23
    4652:	8f 93       	push	r24
    4654:	9f 93       	push	r25
    4656:	af 93       	push	r26
    4658:	bf 93       	push	r27
    465a:	ef 93       	push	r30
    465c:	ff 93       	push	r31
    465e:	e0 91 66 24 	lds	r30, 0x2466	; 0x802466 <InterruptFuncTable+0xd8>
    4662:	f0 91 67 24 	lds	r31, 0x2467	; 0x802467 <InterruptFuncTable+0xd9>
    4666:	30 97       	sbiw	r30, 0x00	; 0
    4668:	29 f0       	breq	.+10     	; 0x4674 <__vector_108+0x3c>
    466a:	80 91 5c 25 	lds	r24, 0x255C	; 0x80255c <InterruptSenderTable+0xd8>
    466e:	90 91 5d 25 	lds	r25, 0x255D	; 0x80255d <InterruptSenderTable+0xd9>
    4672:	19 95       	eicall
    4674:	ff 91       	pop	r31
    4676:	ef 91       	pop	r30
    4678:	bf 91       	pop	r27
    467a:	af 91       	pop	r26
    467c:	9f 91       	pop	r25
    467e:	8f 91       	pop	r24
    4680:	7f 91       	pop	r23
    4682:	6f 91       	pop	r22
    4684:	5f 91       	pop	r21
    4686:	4f 91       	pop	r20
    4688:	3f 91       	pop	r19
    468a:	2f 91       	pop	r18
    468c:	0f 90       	pop	r0
    468e:	0b be       	out	0x3b, r0	; 59
    4690:	0f 90       	pop	r0
    4692:	0f be       	out	0x3f, r0	; 63
    4694:	0f 90       	pop	r0
    4696:	1f 90       	pop	r1
    4698:	18 95       	reti

0000469a <__vector_109>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_ERR_vect)      /* Error Interrupt */
    469a:	1f 92       	push	r1
    469c:	0f 92       	push	r0
    469e:	0f b6       	in	r0, 0x3f	; 63
    46a0:	0f 92       	push	r0
    46a2:	11 24       	eor	r1, r1
    46a4:	0b b6       	in	r0, 0x3b	; 59
    46a6:	0f 92       	push	r0
    46a8:	2f 93       	push	r18
    46aa:	3f 93       	push	r19
    46ac:	4f 93       	push	r20
    46ae:	5f 93       	push	r21
    46b0:	6f 93       	push	r22
    46b2:	7f 93       	push	r23
    46b4:	8f 93       	push	r24
    46b6:	9f 93       	push	r25
    46b8:	af 93       	push	r26
    46ba:	bf 93       	push	r27
    46bc:	ef 93       	push	r30
    46be:	ff 93       	push	r31
    46c0:	e0 91 68 24 	lds	r30, 0x2468	; 0x802468 <InterruptFuncTable+0xda>
    46c4:	f0 91 69 24 	lds	r31, 0x2469	; 0x802469 <InterruptFuncTable+0xdb>
    46c8:	30 97       	sbiw	r30, 0x00	; 0
    46ca:	29 f0       	breq	.+10     	; 0x46d6 <__vector_109+0x3c>
    46cc:	80 91 5e 25 	lds	r24, 0x255E	; 0x80255e <InterruptSenderTable+0xda>
    46d0:	90 91 5f 25 	lds	r25, 0x255F	; 0x80255f <InterruptSenderTable+0xdb>
    46d4:	19 95       	eicall
    46d6:	ff 91       	pop	r31
    46d8:	ef 91       	pop	r30
    46da:	bf 91       	pop	r27
    46dc:	af 91       	pop	r26
    46de:	9f 91       	pop	r25
    46e0:	8f 91       	pop	r24
    46e2:	7f 91       	pop	r23
    46e4:	6f 91       	pop	r22
    46e6:	5f 91       	pop	r21
    46e8:	4f 91       	pop	r20
    46ea:	3f 91       	pop	r19
    46ec:	2f 91       	pop	r18
    46ee:	0f 90       	pop	r0
    46f0:	0b be       	out	0x3b, r0	; 59
    46f2:	0f 90       	pop	r0
    46f4:	0f be       	out	0x3f, r0	; 63
    46f6:	0f 90       	pop	r0
    46f8:	1f 90       	pop	r1
    46fa:	18 95       	reti

000046fc <__vector_110>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCA_vect)      /* Compare or Capture A Interrupt */
    46fc:	1f 92       	push	r1
    46fe:	0f 92       	push	r0
    4700:	0f b6       	in	r0, 0x3f	; 63
    4702:	0f 92       	push	r0
    4704:	11 24       	eor	r1, r1
    4706:	0b b6       	in	r0, 0x3b	; 59
    4708:	0f 92       	push	r0
    470a:	2f 93       	push	r18
    470c:	3f 93       	push	r19
    470e:	4f 93       	push	r20
    4710:	5f 93       	push	r21
    4712:	6f 93       	push	r22
    4714:	7f 93       	push	r23
    4716:	8f 93       	push	r24
    4718:	9f 93       	push	r25
    471a:	af 93       	push	r26
    471c:	bf 93       	push	r27
    471e:	ef 93       	push	r30
    4720:	ff 93       	push	r31
    4722:	e0 91 6a 24 	lds	r30, 0x246A	; 0x80246a <InterruptFuncTable+0xdc>
    4726:	f0 91 6b 24 	lds	r31, 0x246B	; 0x80246b <InterruptFuncTable+0xdd>
    472a:	30 97       	sbiw	r30, 0x00	; 0
    472c:	29 f0       	breq	.+10     	; 0x4738 <__vector_110+0x3c>
    472e:	80 91 60 25 	lds	r24, 0x2560	; 0x802560 <InterruptSenderTable+0xdc>
    4732:	90 91 61 25 	lds	r25, 0x2561	; 0x802561 <InterruptSenderTable+0xdd>
    4736:	19 95       	eicall
    4738:	ff 91       	pop	r31
    473a:	ef 91       	pop	r30
    473c:	bf 91       	pop	r27
    473e:	af 91       	pop	r26
    4740:	9f 91       	pop	r25
    4742:	8f 91       	pop	r24
    4744:	7f 91       	pop	r23
    4746:	6f 91       	pop	r22
    4748:	5f 91       	pop	r21
    474a:	4f 91       	pop	r20
    474c:	3f 91       	pop	r19
    474e:	2f 91       	pop	r18
    4750:	0f 90       	pop	r0
    4752:	0b be       	out	0x3b, r0	; 59
    4754:	0f 90       	pop	r0
    4756:	0f be       	out	0x3f, r0	; 63
    4758:	0f 90       	pop	r0
    475a:	1f 90       	pop	r1
    475c:	18 95       	reti

0000475e <__vector_111>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCB_vect)      /* Compare or Capture B Interrupt */
    475e:	1f 92       	push	r1
    4760:	0f 92       	push	r0
    4762:	0f b6       	in	r0, 0x3f	; 63
    4764:	0f 92       	push	r0
    4766:	11 24       	eor	r1, r1
    4768:	0b b6       	in	r0, 0x3b	; 59
    476a:	0f 92       	push	r0
    476c:	2f 93       	push	r18
    476e:	3f 93       	push	r19
    4770:	4f 93       	push	r20
    4772:	5f 93       	push	r21
    4774:	6f 93       	push	r22
    4776:	7f 93       	push	r23
    4778:	8f 93       	push	r24
    477a:	9f 93       	push	r25
    477c:	af 93       	push	r26
    477e:	bf 93       	push	r27
    4780:	ef 93       	push	r30
    4782:	ff 93       	push	r31
    4784:	e0 91 6c 24 	lds	r30, 0x246C	; 0x80246c <InterruptFuncTable+0xde>
    4788:	f0 91 6d 24 	lds	r31, 0x246D	; 0x80246d <InterruptFuncTable+0xdf>
    478c:	30 97       	sbiw	r30, 0x00	; 0
    478e:	29 f0       	breq	.+10     	; 0x479a <__vector_111+0x3c>
    4790:	80 91 62 25 	lds	r24, 0x2562	; 0x802562 <InterruptSenderTable+0xde>
    4794:	90 91 63 25 	lds	r25, 0x2563	; 0x802563 <InterruptSenderTable+0xdf>
    4798:	19 95       	eicall
    479a:	ff 91       	pop	r31
    479c:	ef 91       	pop	r30
    479e:	bf 91       	pop	r27
    47a0:	af 91       	pop	r26
    47a2:	9f 91       	pop	r25
    47a4:	8f 91       	pop	r24
    47a6:	7f 91       	pop	r23
    47a8:	6f 91       	pop	r22
    47aa:	5f 91       	pop	r21
    47ac:	4f 91       	pop	r20
    47ae:	3f 91       	pop	r19
    47b0:	2f 91       	pop	r18
    47b2:	0f 90       	pop	r0
    47b4:	0b be       	out	0x3b, r0	; 59
    47b6:	0f 90       	pop	r0
    47b8:	0f be       	out	0x3f, r0	; 63
    47ba:	0f 90       	pop	r0
    47bc:	1f 90       	pop	r1
    47be:	18 95       	reti

000047c0 <__vector_112>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCC_vect)      /* Compare or Capture C Interrupt */
    47c0:	1f 92       	push	r1
    47c2:	0f 92       	push	r0
    47c4:	0f b6       	in	r0, 0x3f	; 63
    47c6:	0f 92       	push	r0
    47c8:	11 24       	eor	r1, r1
    47ca:	0b b6       	in	r0, 0x3b	; 59
    47cc:	0f 92       	push	r0
    47ce:	2f 93       	push	r18
    47d0:	3f 93       	push	r19
    47d2:	4f 93       	push	r20
    47d4:	5f 93       	push	r21
    47d6:	6f 93       	push	r22
    47d8:	7f 93       	push	r23
    47da:	8f 93       	push	r24
    47dc:	9f 93       	push	r25
    47de:	af 93       	push	r26
    47e0:	bf 93       	push	r27
    47e2:	ef 93       	push	r30
    47e4:	ff 93       	push	r31
    47e6:	e0 91 6e 24 	lds	r30, 0x246E	; 0x80246e <InterruptFuncTable+0xe0>
    47ea:	f0 91 6f 24 	lds	r31, 0x246F	; 0x80246f <InterruptFuncTable+0xe1>
    47ee:	30 97       	sbiw	r30, 0x00	; 0
    47f0:	29 f0       	breq	.+10     	; 0x47fc <__vector_112+0x3c>
    47f2:	80 91 64 25 	lds	r24, 0x2564	; 0x802564 <InterruptSenderTable+0xe0>
    47f6:	90 91 65 25 	lds	r25, 0x2565	; 0x802565 <InterruptSenderTable+0xe1>
    47fa:	19 95       	eicall
    47fc:	ff 91       	pop	r31
    47fe:	ef 91       	pop	r30
    4800:	bf 91       	pop	r27
    4802:	af 91       	pop	r26
    4804:	9f 91       	pop	r25
    4806:	8f 91       	pop	r24
    4808:	7f 91       	pop	r23
    480a:	6f 91       	pop	r22
    480c:	5f 91       	pop	r21
    480e:	4f 91       	pop	r20
    4810:	3f 91       	pop	r19
    4812:	2f 91       	pop	r18
    4814:	0f 90       	pop	r0
    4816:	0b be       	out	0x3b, r0	; 59
    4818:	0f 90       	pop	r0
    481a:	0f be       	out	0x3f, r0	; 63
    481c:	0f 90       	pop	r0
    481e:	1f 90       	pop	r1
    4820:	18 95       	reti

00004822 <__vector_113>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCD_vect)      /* Compare or Capture D Interrupt */
    4822:	1f 92       	push	r1
    4824:	0f 92       	push	r0
    4826:	0f b6       	in	r0, 0x3f	; 63
    4828:	0f 92       	push	r0
    482a:	11 24       	eor	r1, r1
    482c:	0b b6       	in	r0, 0x3b	; 59
    482e:	0f 92       	push	r0
    4830:	2f 93       	push	r18
    4832:	3f 93       	push	r19
    4834:	4f 93       	push	r20
    4836:	5f 93       	push	r21
    4838:	6f 93       	push	r22
    483a:	7f 93       	push	r23
    483c:	8f 93       	push	r24
    483e:	9f 93       	push	r25
    4840:	af 93       	push	r26
    4842:	bf 93       	push	r27
    4844:	ef 93       	push	r30
    4846:	ff 93       	push	r31
    4848:	e0 91 70 24 	lds	r30, 0x2470	; 0x802470 <InterruptFuncTable+0xe2>
    484c:	f0 91 71 24 	lds	r31, 0x2471	; 0x802471 <InterruptFuncTable+0xe3>
    4850:	30 97       	sbiw	r30, 0x00	; 0
    4852:	29 f0       	breq	.+10     	; 0x485e <__vector_113+0x3c>
    4854:	80 91 66 25 	lds	r24, 0x2566	; 0x802566 <InterruptSenderTable+0xe2>
    4858:	90 91 67 25 	lds	r25, 0x2567	; 0x802567 <InterruptSenderTable+0xe3>
    485c:	19 95       	eicall
    485e:	ff 91       	pop	r31
    4860:	ef 91       	pop	r30
    4862:	bf 91       	pop	r27
    4864:	af 91       	pop	r26
    4866:	9f 91       	pop	r25
    4868:	8f 91       	pop	r24
    486a:	7f 91       	pop	r23
    486c:	6f 91       	pop	r22
    486e:	5f 91       	pop	r21
    4870:	4f 91       	pop	r20
    4872:	3f 91       	pop	r19
    4874:	2f 91       	pop	r18
    4876:	0f 90       	pop	r0
    4878:	0b be       	out	0x3b, r0	; 59
    487a:	0f 90       	pop	r0
    487c:	0f be       	out	0x3f, r0	; 63
    487e:	0f 90       	pop	r0
    4880:	1f 90       	pop	r1
    4882:	18 95       	reti

00004884 <__vector_119>:

/* USARTF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_RXC_vect)      /* Reception Complete Interrupt */
    4884:	1f 92       	push	r1
    4886:	0f 92       	push	r0
    4888:	0f b6       	in	r0, 0x3f	; 63
    488a:	0f 92       	push	r0
    488c:	11 24       	eor	r1, r1
    488e:	0b b6       	in	r0, 0x3b	; 59
    4890:	0f 92       	push	r0
    4892:	2f 93       	push	r18
    4894:	3f 93       	push	r19
    4896:	4f 93       	push	r20
    4898:	5f 93       	push	r21
    489a:	6f 93       	push	r22
    489c:	7f 93       	push	r23
    489e:	8f 93       	push	r24
    48a0:	9f 93       	push	r25
    48a2:	af 93       	push	r26
    48a4:	bf 93       	push	r27
    48a6:	ef 93       	push	r30
    48a8:	ff 93       	push	r31
    48aa:	e0 91 7c 24 	lds	r30, 0x247C	; 0x80247c <InterruptFuncTable+0xee>
    48ae:	f0 91 7d 24 	lds	r31, 0x247D	; 0x80247d <InterruptFuncTable+0xef>
    48b2:	30 97       	sbiw	r30, 0x00	; 0
    48b4:	29 f0       	breq	.+10     	; 0x48c0 <__vector_119+0x3c>
    48b6:	80 91 72 25 	lds	r24, 0x2572	; 0x802572 <InterruptSenderTable+0xee>
    48ba:	90 91 73 25 	lds	r25, 0x2573	; 0x802573 <InterruptSenderTable+0xef>
    48be:	19 95       	eicall
    48c0:	ff 91       	pop	r31
    48c2:	ef 91       	pop	r30
    48c4:	bf 91       	pop	r27
    48c6:	af 91       	pop	r26
    48c8:	9f 91       	pop	r25
    48ca:	8f 91       	pop	r24
    48cc:	7f 91       	pop	r23
    48ce:	6f 91       	pop	r22
    48d0:	5f 91       	pop	r21
    48d2:	4f 91       	pop	r20
    48d4:	3f 91       	pop	r19
    48d6:	2f 91       	pop	r18
    48d8:	0f 90       	pop	r0
    48da:	0b be       	out	0x3b, r0	; 59
    48dc:	0f 90       	pop	r0
    48de:	0f be       	out	0x3f, r0	; 63
    48e0:	0f 90       	pop	r0
    48e2:	1f 90       	pop	r1
    48e4:	18 95       	reti

000048e6 <__vector_120>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_DRE_vect)      /* Data Register Empty Interrupt */
    48e6:	1f 92       	push	r1
    48e8:	0f 92       	push	r0
    48ea:	0f b6       	in	r0, 0x3f	; 63
    48ec:	0f 92       	push	r0
    48ee:	11 24       	eor	r1, r1
    48f0:	0b b6       	in	r0, 0x3b	; 59
    48f2:	0f 92       	push	r0
    48f4:	2f 93       	push	r18
    48f6:	3f 93       	push	r19
    48f8:	4f 93       	push	r20
    48fa:	5f 93       	push	r21
    48fc:	6f 93       	push	r22
    48fe:	7f 93       	push	r23
    4900:	8f 93       	push	r24
    4902:	9f 93       	push	r25
    4904:	af 93       	push	r26
    4906:	bf 93       	push	r27
    4908:	ef 93       	push	r30
    490a:	ff 93       	push	r31
    490c:	e0 91 7e 24 	lds	r30, 0x247E	; 0x80247e <InterruptFuncTable+0xf0>
    4910:	f0 91 7f 24 	lds	r31, 0x247F	; 0x80247f <InterruptFuncTable+0xf1>
    4914:	30 97       	sbiw	r30, 0x00	; 0
    4916:	29 f0       	breq	.+10     	; 0x4922 <__vector_120+0x3c>
    4918:	80 91 74 25 	lds	r24, 0x2574	; 0x802574 <InterruptSenderTable+0xf0>
    491c:	90 91 75 25 	lds	r25, 0x2575	; 0x802575 <InterruptSenderTable+0xf1>
    4920:	19 95       	eicall
    4922:	ff 91       	pop	r31
    4924:	ef 91       	pop	r30
    4926:	bf 91       	pop	r27
    4928:	af 91       	pop	r26
    492a:	9f 91       	pop	r25
    492c:	8f 91       	pop	r24
    492e:	7f 91       	pop	r23
    4930:	6f 91       	pop	r22
    4932:	5f 91       	pop	r21
    4934:	4f 91       	pop	r20
    4936:	3f 91       	pop	r19
    4938:	2f 91       	pop	r18
    493a:	0f 90       	pop	r0
    493c:	0b be       	out	0x3b, r0	; 59
    493e:	0f 90       	pop	r0
    4940:	0f be       	out	0x3f, r0	; 63
    4942:	0f 90       	pop	r0
    4944:	1f 90       	pop	r1
    4946:	18 95       	reti

00004948 <__vector_121>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_TXC_vect)      /* Transmission Complete Interrupt */
    4948:	1f 92       	push	r1
    494a:	0f 92       	push	r0
    494c:	0f b6       	in	r0, 0x3f	; 63
    494e:	0f 92       	push	r0
    4950:	11 24       	eor	r1, r1
    4952:	0b b6       	in	r0, 0x3b	; 59
    4954:	0f 92       	push	r0
    4956:	2f 93       	push	r18
    4958:	3f 93       	push	r19
    495a:	4f 93       	push	r20
    495c:	5f 93       	push	r21
    495e:	6f 93       	push	r22
    4960:	7f 93       	push	r23
    4962:	8f 93       	push	r24
    4964:	9f 93       	push	r25
    4966:	af 93       	push	r26
    4968:	bf 93       	push	r27
    496a:	ef 93       	push	r30
    496c:	ff 93       	push	r31
    496e:	e0 91 80 24 	lds	r30, 0x2480	; 0x802480 <InterruptFuncTable+0xf2>
    4972:	f0 91 81 24 	lds	r31, 0x2481	; 0x802481 <InterruptFuncTable+0xf3>
    4976:	30 97       	sbiw	r30, 0x00	; 0
    4978:	29 f0       	breq	.+10     	; 0x4984 <__vector_121+0x3c>
    497a:	80 91 76 25 	lds	r24, 0x2576	; 0x802576 <InterruptSenderTable+0xf2>
    497e:	90 91 77 25 	lds	r25, 0x2577	; 0x802577 <InterruptSenderTable+0xf3>
    4982:	19 95       	eicall
    4984:	ff 91       	pop	r31
    4986:	ef 91       	pop	r30
    4988:	bf 91       	pop	r27
    498a:	af 91       	pop	r26
    498c:	9f 91       	pop	r25
    498e:	8f 91       	pop	r24
    4990:	7f 91       	pop	r23
    4992:	6f 91       	pop	r22
    4994:	5f 91       	pop	r21
    4996:	4f 91       	pop	r20
    4998:	3f 91       	pop	r19
    499a:	2f 91       	pop	r18
    499c:	0f 90       	pop	r0
    499e:	0b be       	out	0x3b, r0	; 59
    49a0:	0f 90       	pop	r0
    49a2:	0f be       	out	0x3f, r0	; 63
    49a4:	0f 90       	pop	r0
    49a6:	1f 90       	pop	r1
    49a8:	18 95       	reti

000049aa <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual()
{	
	while(1)
	{
		laserBoard.BeepClassError();
    49aa:	0e 94 cf 2d 	call	0x5b9e	; 0x5b9e <_ZN11CLaserBoard14BeepClassErrorEv>
CLaserControlApp App;
CDS18B20 D18B20;

int temperature = 0;

extern "C" void __cxa_pure_virtual()
    49ae:	fd cf       	rjmp	.-6      	; 0x49aa <__cxa_pure_virtual>

000049b0 <_GLOBAL__sub_I_dacSPI>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    49b0:	85 e4       	ldi	r24, 0x45	; 69
    49b2:	96 e2       	ldi	r25, 0x26	; 38
    49b4:	0e 94 bc 10 	call	0x2178	; 0x2178 <_ZN4CSPIC1Ev>
CTimerC timer;
    49b8:	82 e4       	ldi	r24, 0x42	; 66
    49ba:	96 e2       	ldi	r25, 0x26	; 38
    49bc:	0e 94 3b 2f 	call	0x5e76	; 0x5e76 <_ZN7CTimerCC1Ev>
CTimerD1 timeout;
    49c0:	8f e3       	ldi	r24, 0x3F	; 63
    49c2:	96 e2       	ldi	r25, 0x26	; 38
    49c4:	0e 94 66 31 	call	0x62cc	; 0x62cc <_ZN8CTimerD1C1Ev>
CTimerF laserTimer;
    49c8:	8c e3       	ldi	r24, 0x3C	; 60
    49ca:	96 e2       	ldi	r25, 0x26	; 38
    49cc:	0e 94 47 32 	call	0x648e	; 0x648e <_ZN7CTimerFC1Ev>
CTimerC1 flowtimer;
    49d0:	89 e3       	ldi	r24, 0x39	; 57
    49d2:	96 e2       	ldi	r25, 0x26	; 38
    49d4:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <_ZN8CTimerC1C1Ev>
CTimerD pwmtimer; // Cooling PWM
    49d8:	86 e3       	ldi	r24, 0x36	; 54
    49da:	96 e2       	ldi	r25, 0x26	; 38
    49dc:	0e 94 bb 30 	call	0x6176	; 0x6176 <_ZN7CTimerDC1Ev>
CDGUSUSART usart;
    49e0:	84 e3       	ldi	r24, 0x34	; 52
    49e2:	96 e2       	ldi	r25, 0x26	; 38
    49e4:	0e 94 c7 2b 	call	0x578e	; 0x578e <_ZN10CDGUSUSARTC1Ev>
CDGUSDatabase Database;
    49e8:	8c e2       	ldi	r24, 0x2C	; 44
    49ea:	96 e2       	ldi	r25, 0x26	; 38
    49ec:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN13CDGUSDatabaseC1Ev>
CMBSender sender;
    49f0:	8f e0       	ldi	r24, 0x0F	; 15
    49f2:	96 e2       	ldi	r25, 0x26	; 38
    49f4:	0e 94 c0 28 	call	0x5180	; 0x5180 <_ZN9CMBSenderC1Ev>
CLaserBoard laserBoard;
    49f8:	85 e0       	ldi	r24, 0x05	; 5
    49fa:	96 e2       	ldi	r25, 0x26	; 38
    49fc:	0e 94 f8 2c 	call	0x59f0	; 0x59f0 <_ZN11CLaserBoardC1Ev>
CSoundPlayer player;
    4a00:	84 e0       	ldi	r24, 0x04	; 4
    4a02:	96 e2       	ldi	r25, 0x26	; 38
    4a04:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <_ZN12CSoundPlayerC1Ev>
CLaserControlApp App;
    4a08:	82 e8       	ldi	r24, 0x82	; 130
    4a0a:	95 e2       	ldi	r25, 0x25	; 37
    4a0c:	0e 94 26 05 	call	0xa4c	; 0xa4c <_ZN16CLaserControlAppC1Ev>
CDS18B20 D18B20;
    4a10:	8e e7       	ldi	r24, 0x7E	; 126
    4a12:	95 e2       	ldi	r25, 0x25	; 37
    4a14:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <_ZN8CDS18B20C1Ev>
    4a18:	08 95       	ret

00004a1a <_GLOBAL__sub_D_dacSPI>:
    4a1a:	8e e7       	ldi	r24, 0x7E	; 126
    4a1c:	95 e2       	ldi	r25, 0x25	; 37
    4a1e:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <_ZN8CDS18B20D1Ev>
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;
    4a22:	82 e8       	ldi	r24, 0x82	; 130
    4a24:	95 e2       	ldi	r25, 0x25	; 37
    4a26:	0e 94 2c 05 	call	0xa58	; 0xa58 <_ZN16CLaserControlAppD1Ev>
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
    4a2a:	84 e0       	ldi	r24, 0x04	; 4
    4a2c:	96 e2       	ldi	r25, 0x26	; 38
    4a2e:	0e 94 03 2e 	call	0x5c06	; 0x5c06 <_ZN12CSoundPlayerD1Ev>
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
    4a32:	85 e0       	ldi	r24, 0x05	; 5
    4a34:	96 e2       	ldi	r25, 0x26	; 38
    4a36:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <_ZN11CLaserBoardD1Ev>
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
    4a3a:	8f e0       	ldi	r24, 0x0F	; 15
    4a3c:	96 e2       	ldi	r25, 0x26	; 38
    4a3e:	0e 94 37 29 	call	0x526e	; 0x526e <_ZN9CMBSenderD1Ev>
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
CDGUSDatabase Database;
    4a42:	8c e2       	ldi	r24, 0x2C	; 44
    4a44:	96 e2       	ldi	r25, 0x26	; 38
    4a46:	0e 94 c1 02 	call	0x582	; 0x582 <_ZN13CDGUSDatabaseD1Ev>
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
CDGUSUSART usart;
    4a4a:	84 e3       	ldi	r24, 0x34	; 52
    4a4c:	96 e2       	ldi	r25, 0x26	; 38
    4a4e:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <_ZN10CDGUSUSARTD1Ev>
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
CTimerD pwmtimer; // Cooling PWM
    4a52:	86 e3       	ldi	r24, 0x36	; 54
    4a54:	96 e2       	ldi	r25, 0x26	; 38
    4a56:	0e 94 c7 30 	call	0x618e	; 0x618e <_ZN7CTimerDD1Ev>
/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
CTimerC1 flowtimer;
    4a5a:	89 e3       	ldi	r24, 0x39	; 57
    4a5c:	96 e2       	ldi	r25, 0x26	; 38
    4a5e:	0e 94 f6 2f 	call	0x5fec	; 0x5fec <_ZN8CTimerC1D1Ev>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
CTimerF laserTimer;
    4a62:	8c e3       	ldi	r24, 0x3C	; 60
    4a64:	96 e2       	ldi	r25, 0x26	; 38
    4a66:	0e 94 53 32 	call	0x64a6	; 0x64a6 <_ZN7CTimerFD1Ev>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
CTimerD1 timeout;
    4a6a:	8f e3       	ldi	r24, 0x3F	; 63
    4a6c:	96 e2       	ldi	r25, 0x26	; 38
    4a6e:	0e 94 72 31 	call	0x62e4	; 0x62e4 <_ZN8CTimerD1D1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerC timer;
    4a72:	82 e4       	ldi	r24, 0x42	; 66
    4a74:	96 e2       	ldi	r25, 0x26	; 38
    4a76:	0e 94 47 2f 	call	0x5e8e	; 0x5e8e <_ZN7CTimerCD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    4a7a:	85 e4       	ldi	r24, 0x45	; 69
    4a7c:	96 e2       	ldi	r25, 0x26	; 38
    4a7e:	0e 94 bd 10 	call	0x217a	; 0x217a <_ZN4CSPID1Ev>
    4a82:	08 95       	ret

00004a84 <_Z16SystemInitializev>:
		laserBoard.BeepClassError();
	}
}

void SystemInitialize()
{
    4a84:	cf 92       	push	r12
    4a86:	df 92       	push	r13
    4a88:	ef 92       	push	r14
    4a8a:	ff 92       	push	r15
    4a8c:	0f 93       	push	r16
    4a8e:	1f 93       	push	r17
	//LASER_CNT_EEPROMADDR
	//eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, 0);
	
	cli();	/* Disable global interrupts */
    4a90:	f8 94       	cli
	
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTC_PIN4_gc;
    4a92:	84 e6       	ldi	r24, 0x64	; 100
    4a94:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
	
	// Initialize modules
	laserBoard.InitializeIO();
    4a98:	85 e0       	ldi	r24, 0x05	; 5
    4a9a:	96 e2       	ldi	r25, 0x26	; 38
    4a9c:	0e 94 fa 2c 	call	0x59f4	; 0x59f4 <_ZN11CLaserBoard12InitializeIOEv>
	D18B20.Initialize();
    4aa0:	8e e7       	ldi	r24, 0x7E	; 126
    4aa2:	95 e2       	ldi	r25, 0x25	; 37
    4aa4:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <_ZN8CDS18B2010InitializeEv>
	// TimerE0, TimerE1
	player.Initialize();
    4aa8:	84 e0       	ldi	r24, 0x04	; 4
    4aaa:	96 e2       	ldi	r25, 0x26	; 38
    4aac:	0e 94 73 2e 	call	0x5ce6	; 0x5ce6 <_ZN12CSoundPlayer10InitializeEv>
	// TimerC0 Initialize prepare timer
	timer.Initialize(WGM_Normal, CS_DIV256);
    4ab0:	46 e0       	ldi	r20, 0x06	; 6
    4ab2:	60 e0       	ldi	r22, 0x00	; 0
    4ab4:	82 e4       	ldi	r24, 0x42	; 66
    4ab6:	96 e2       	ldi	r25, 0x26	; 38
    4ab8:	0e 94 7e 2e 	call	0x5cfc	; 0x5cfc <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timer.SetPeriod(25000); // Every 10 ms
    4abc:	68 ea       	ldi	r22, 0xA8	; 168
    4abe:	71 e6       	ldi	r23, 0x61	; 97
    4ac0:	82 e4       	ldi	r24, 0x42	; 66
    4ac2:	96 e2       	ldi	r25, 0x26	; 38
    4ac4:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <_ZN7CTimerC9SetPeriodEj>
	timer.SetOVFCallback(App.OnTimerStatic, &App, TC_OVFINTLVL_LO_gc); // Enable interrupt
    4ac8:	21 e0       	ldi	r18, 0x01	; 1
    4aca:	42 e8       	ldi	r20, 0x82	; 130
    4acc:	55 e2       	ldi	r21, 0x25	; 37
    4ace:	66 ed       	ldi	r22, 0xD6	; 214
    4ad0:	7f e0       	ldi	r23, 0x0F	; 15
    4ad2:	82 e4       	ldi	r24, 0x42	; 66
    4ad4:	96 e2       	ldi	r25, 0x26	; 38
    4ad6:	0e 94 d5 2e 	call	0x5daa	; 0x5daa <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	// TimerD1
	timeout.Initialize(WGM_Normal, CS_DIV1024);
    4ada:	47 e0       	ldi	r20, 0x07	; 7
    4adc:	60 e0       	ldi	r22, 0x00	; 0
    4ade:	8f e3       	ldi	r24, 0x3F	; 63
    4ae0:	96 e2       	ldi	r25, 0x26	; 38
    4ae2:	0e 94 cf 30 	call	0x619e	; 0x619e <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timeout.SetPeriod(31250); //1s timeout
    4ae6:	62 e1       	ldi	r22, 0x12	; 18
    4ae8:	7a e7       	ldi	r23, 0x7A	; 122
    4aea:	8f e3       	ldi	r24, 0x3F	; 63
    4aec:	96 e2       	ldi	r25, 0x26	; 38
    4aee:	0e 94 13 31 	call	0x6226	; 0x6226 <_ZN8CTimerD19SetPeriodEj>
	// TimerC1
	flowtimer.Initialize(WGM_Normal, CS_EventChannel0);
    4af2:	48 e0       	ldi	r20, 0x08	; 8
    4af4:	60 e0       	ldi	r22, 0x00	; 0
    4af6:	89 e3       	ldi	r24, 0x39	; 57
    4af8:	96 e2       	ldi	r25, 0x26	; 38
    4afa:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	flowtimer.SetPeriod(65535);
    4afe:	6f ef       	ldi	r22, 0xFF	; 255
    4b00:	7f ef       	ldi	r23, 0xFF	; 255
    4b02:	89 e3       	ldi	r24, 0x39	; 57
    4b04:	96 e2       	ldi	r25, 0x26	; 38
    4b06:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <_ZN8CTimerC19SetPeriodEj>
	flowtimer.Start(65535);
    4b0a:	6f ef       	ldi	r22, 0xFF	; 255
    4b0c:	7f ef       	ldi	r23, 0xFF	; 255
    4b0e:	89 e3       	ldi	r24, 0x39	; 57
    4b10:	96 e2       	ldi	r25, 0x26	; 38
    4b12:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <_ZN8CTimerC15StartEj>
	// TimerD0
	pwmtimer.Initialize(WGM_SingleSlopePWM, CS_DIV64);//CS_DIV256);
    4b16:	45 e0       	ldi	r20, 0x05	; 5
    4b18:	63 e0       	ldi	r22, 0x03	; 3
    4b1a:	86 e3       	ldi	r24, 0x36	; 54
    4b1c:	96 e2       	ldi	r25, 0x26	; 38
    4b1e:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	pwmtimer.SetCOMPA(512);
    4b22:	60 e0       	ldi	r22, 0x00	; 0
    4b24:	72 e0       	ldi	r23, 0x02	; 2
    4b26:	86 e3       	ldi	r24, 0x36	; 54
    4b28:	96 e2       	ldi	r25, 0x26	; 38
    4b2a:	0e 94 41 30 	call	0x6082	; 0x6082 <_ZN7CTimerD8SetCOMPAEj>
	laserBoard.PWMOn();
    4b2e:	85 e0       	ldi	r24, 0x05	; 5
    4b30:	96 e2       	ldi	r25, 0x26	; 38
    4b32:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <_ZN11CLaserBoard5PWMOnEv>
	laserBoard.REDOn();
    4b36:	85 e0       	ldi	r24, 0x05	; 5
    4b38:	96 e2       	ldi	r25, 0x26	; 38
    4b3a:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN11CLaserBoard5REDOnEv>
	laserBoard.GRNOn();
    4b3e:	85 e0       	ldi	r24, 0x05	; 5
    4b40:	96 e2       	ldi	r25, 0x26	; 38
    4b42:	0e 94 9b 2d 	call	0x5b36	; 0x5b36 <_ZN11CLaserBoard5GRNOnEv>
	laserBoard.BLUOn();
    4b46:	85 e0       	ldi	r24, 0x05	; 5
    4b48:	96 e2       	ldi	r25, 0x26	; 38
    4b4a:	0e 94 9f 2d 	call	0x5b3e	; 0x5b3e <_ZN11CLaserBoard5BLUOnEv>
	//pwmtimer.EnableChannel(TIMER_CHANNEL_A);
	pwmtimer.SetOVFCallback(App.OnPWMTimerOVFStatic, &App, TC_OVFINTLVL_LO_gc);
    4b4e:	21 e0       	ldi	r18, 0x01	; 1
    4b50:	42 e8       	ldi	r20, 0x82	; 130
    4b52:	55 e2       	ldi	r21, 0x25	; 37
    4b54:	6f e9       	ldi	r22, 0x9F	; 159
    4b56:	76 e0       	ldi	r23, 0x06	; 6
    4b58:	86 e3       	ldi	r24, 0x36	; 54
    4b5a:	96 e2       	ldi	r25, 0x26	; 38
    4b5c:	0e 94 55 30 	call	0x60aa	; 0x60aa <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	pwmtimer.SetCOMPACallback(App.OnPWMTimerCMPStatic, &App, TC_CCAINTLVL_LO_gc);
    4b60:	21 e0       	ldi	r18, 0x01	; 1
    4b62:	42 e8       	ldi	r20, 0x82	; 130
    4b64:	55 e2       	ldi	r21, 0x25	; 37
    4b66:	62 ea       	ldi	r22, 0xA2	; 162
    4b68:	76 e0       	ldi	r23, 0x06	; 6
    4b6a:	86 e3       	ldi	r24, 0x36	; 54
    4b6c:	96 e2       	ldi	r25, 0x26	; 38
    4b6e:	0e 94 77 30 	call	0x60ee	; 0x60ee <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
	// Set RGB Led control
#ifndef LED_LASER_INDICATOR
	pwmtimer.SetCOMPB(256);
    4b72:	60 e0       	ldi	r22, 0x00	; 0
    4b74:	71 e0       	ldi	r23, 0x01	; 1
    4b76:	86 e3       	ldi	r24, 0x36	; 54
    4b78:	96 e2       	ldi	r25, 0x26	; 38
    4b7a:	0e 94 46 30 	call	0x608c	; 0x608c <_ZN7CTimerD8SetCOMPBEj>
	pwmtimer.SetCOMPC(512);
    4b7e:	60 e0       	ldi	r22, 0x00	; 0
    4b80:	72 e0       	ldi	r23, 0x02	; 2
    4b82:	86 e3       	ldi	r24, 0x36	; 54
    4b84:	96 e2       	ldi	r25, 0x26	; 38
    4b86:	0e 94 4b 30 	call	0x6096	; 0x6096 <_ZN7CTimerD8SetCOMPCEj>
	pwmtimer.SetCOMPD(768);
    4b8a:	60 e0       	ldi	r22, 0x00	; 0
    4b8c:	73 e0       	ldi	r23, 0x03	; 3
    4b8e:	86 e3       	ldi	r24, 0x36	; 54
    4b90:	96 e2       	ldi	r25, 0x26	; 38
    4b92:	0e 94 50 30 	call	0x60a0	; 0x60a0 <_ZN7CTimerD8SetCOMPDEj>
	pwmtimer.SetCOMPBCallback(App.OnPWMTimerREDStatic, &App, TC_CCBINTLVL_HI_gc);
    4b96:	2c e0       	ldi	r18, 0x0C	; 12
    4b98:	42 e8       	ldi	r20, 0x82	; 130
    4b9a:	55 e2       	ldi	r21, 0x25	; 37
    4b9c:	65 ea       	ldi	r22, 0xA5	; 165
    4b9e:	76 e0       	ldi	r23, 0x06	; 6
    4ba0:	86 e3       	ldi	r24, 0x36	; 54
    4ba2:	96 e2       	ldi	r25, 0x26	; 38
    4ba4:	0e 94 88 30 	call	0x6110	; 0x6110 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
	pwmtimer.SetCOMPCCallback(App.OnPWMTimerGRNStatic, &App, TC_CCCINTLVL_HI_gc);
    4ba8:	20 e3       	ldi	r18, 0x30	; 48
    4baa:	42 e8       	ldi	r20, 0x82	; 130
    4bac:	55 e2       	ldi	r21, 0x25	; 37
    4bae:	66 ea       	ldi	r22, 0xA6	; 166
    4bb0:	76 e0       	ldi	r23, 0x06	; 6
    4bb2:	86 e3       	ldi	r24, 0x36	; 54
    4bb4:	96 e2       	ldi	r25, 0x26	; 38
    4bb6:	0e 94 99 30 	call	0x6132	; 0x6132 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
	pwmtimer.SetCOMPDCallback(App.OnPWMTimerBLUStatic, &App, TC_CCDINTLVL_HI_gc);
    4bba:	20 ec       	ldi	r18, 0xC0	; 192
    4bbc:	42 e8       	ldi	r20, 0x82	; 130
    4bbe:	55 e2       	ldi	r21, 0x25	; 37
    4bc0:	67 ea       	ldi	r22, 0xA7	; 167
    4bc2:	76 e0       	ldi	r23, 0x06	; 6
    4bc4:	86 e3       	ldi	r24, 0x36	; 54
    4bc6:	96 e2       	ldi	r25, 0x26	; 38
    4bc8:	0e 94 aa 30 	call	0x6154	; 0x6154 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
#endif
	pwmtimer.Start(1024);
    4bcc:	60 e0       	ldi	r22, 0x00	; 0
    4bce:	74 e0       	ldi	r23, 0x04	; 4
    4bd0:	86 e3       	ldi	r24, 0x36	; 54
    4bd2:	96 e2       	ldi	r25, 0x26	; 38
    4bd4:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN7CTimerD5StartEj>
	
	dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    4bd8:	0f 2e       	mov	r0, r31
    4bda:	f3 e0       	ldi	r31, 0x03	; 3
    4bdc:	ef 2e       	mov	r14, r31
    4bde:	f0 2d       	mov	r31, r0
    4be0:	00 e0       	ldi	r16, 0x00	; 0
    4be2:	23 e0       	ldi	r18, 0x03	; 3
    4be4:	40 e0       	ldi	r20, 0x00	; 0
    4be6:	61 e0       	ldi	r22, 0x01	; 1
    4be8:	85 e4       	ldi	r24, 0x45	; 69
    4bea:	96 e2       	ldi	r25, 0x26	; 38
    4bec:	0e 94 be 10 	call	0x217c	; 0x217c <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
	usart.Initialize(BAUD_115200_ERM0P1, PARITY_DISABLE, STOPBITS_1BIT, true);
    4bf0:	01 e0       	ldi	r16, 0x01	; 1
    4bf2:	20 e0       	ldi	r18, 0x00	; 0
    4bf4:	40 e0       	ldi	r20, 0x00	; 0
    4bf6:	6d e0       	ldi	r22, 0x0D	; 13
    4bf8:	84 e3       	ldi	r24, 0x34	; 52
    4bfa:	96 e2       	ldi	r25, 0x26	; 38
    4bfc:	0e 94 4b 2b 	call	0x5696	; 0x5696 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
	sender.Initialize(&timeout, &usart, &App, 256, 256, 31250);
    4c00:	0f 2e       	mov	r0, r31
    4c02:	f2 e1       	ldi	r31, 0x12	; 18
    4c04:	cf 2e       	mov	r12, r31
    4c06:	fa e7       	ldi	r31, 0x7A	; 122
    4c08:	df 2e       	mov	r13, r31
    4c0a:	f0 2d       	mov	r31, r0
    4c0c:	e1 2c       	mov	r14, r1
    4c0e:	ff 24       	eor	r15, r15
    4c10:	f3 94       	inc	r15
    4c12:	00 e0       	ldi	r16, 0x00	; 0
    4c14:	11 e0       	ldi	r17, 0x01	; 1
    4c16:	22 e8       	ldi	r18, 0x82	; 130
    4c18:	35 e2       	ldi	r19, 0x25	; 37
    4c1a:	44 e3       	ldi	r20, 0x34	; 52
    4c1c:	56 e2       	ldi	r21, 0x26	; 38
    4c1e:	6f e3       	ldi	r22, 0x3F	; 63
    4c20:	76 e2       	ldi	r23, 0x26	; 38
    4c22:	8f e0       	ldi	r24, 0x0F	; 15
    4c24:	96 e2       	ldi	r25, 0x26	; 38
    4c26:	0e 94 c6 28 	call	0x518c	; 0x518c <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj>
	Database.Initialize(&sender, VARIABLE_ADDR_DATABASE);
    4c2a:	40 e0       	ldi	r20, 0x00	; 0
    4c2c:	51 e0       	ldi	r21, 0x01	; 1
    4c2e:	6f e0       	ldi	r22, 0x0F	; 15
    4c30:	76 e2       	ldi	r23, 0x26	; 38
    4c32:	8c e2       	ldi	r24, 0x2C	; 44
    4c34:	96 e2       	ldi	r25, 0x26	; 38
    4c36:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>
	// TimerC0, TimerF0
	App.Initialize(&sender);
    4c3a:	6f e0       	ldi	r22, 0x0F	; 15
    4c3c:	76 e2       	ldi	r23, 0x26	; 38
    4c3e:	82 e8       	ldi	r24, 0x82	; 130
    4c40:	95 e2       	ldi	r25, 0x25	; 37
    4c42:	0e 94 09 09 	call	0x1212	; 0x1212 <_ZN16CLaserControlApp10InitializeEP9CMBSender>
	laserBoard.InitializeClock();
    4c46:	85 e0       	ldi	r24, 0x05	; 5
    4c48:	96 e2       	ldi	r25, 0x26	; 38
    4c4a:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <_ZN11CLaserBoard15InitializeClockEv>
	
	InterruptSenderTable[PORTC_INT0_vect_num] = &App;
    4c4e:	82 e8       	ldi	r24, 0x82	; 130
    4c50:	95 e2       	ldi	r25, 0x25	; 37
    4c52:	80 93 88 24 	sts	0x2488, r24	; 0x802488 <InterruptSenderTable+0x4>
    4c56:	90 93 89 24 	sts	0x2489, r25	; 0x802489 <InterruptSenderTable+0x5>
	InterruptFuncTable[PORTC_INT0_vect_num] = App.OnINT0Static;
    4c5a:	8b e7       	ldi	r24, 0x7B	; 123
    4c5c:	90 e1       	ldi	r25, 0x10	; 16
    4c5e:	80 93 92 23 	sts	0x2392, r24	; 0x802392 <InterruptFuncTable+0x4>
    4c62:	90 93 93 23 	sts	0x2393, r25	; 0x802393 <InterruptFuncTable+0x5>
	
	sei();	/* Enable global interrupts */
    4c66:	78 94       	sei
}
    4c68:	1f 91       	pop	r17
    4c6a:	0f 91       	pop	r16
    4c6c:	ff 90       	pop	r15
    4c6e:	ef 90       	pop	r14
    4c70:	df 90       	pop	r13
    4c72:	cf 90       	pop	r12
    4c74:	08 95       	ret

00004c76 <main>:

DGUS_PROFILE empty_record;
	 
int main(void)
{
    4c76:	cf 93       	push	r28
    4c78:	df 93       	push	r29
    4c7a:	1f 92       	push	r1
    4c7c:	1f 92       	push	r1
    4c7e:	cd b7       	in	r28, 0x3d	; 61
    4c80:	de b7       	in	r29, 0x3e	; 62
	//eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, 0);
	// Initialization system
	SystemInitialize();
    4c82:	0e 94 42 25 	call	0x4a84	; 0x4a84 <_Z16SystemInitializev>
    4c86:	2a ea       	ldi	r18, 0xAA	; 170
    4c88:	36 ee       	ldi	r19, 0xE6	; 230
    4c8a:	86 e9       	ldi	r24, 0x96	; 150
    4c8c:	91 e0       	ldi	r25, 0x01	; 1
    4c8e:	21 50       	subi	r18, 0x01	; 1
    4c90:	30 40       	sbci	r19, 0x00	; 0
    4c92:	80 40       	sbci	r24, 0x00	; 0
    4c94:	90 40       	sbci	r25, 0x00	; 0
    4c96:	d9 f7       	brne	.-10     	; 0x4c8e <main+0x18>
    4c98:	00 00       	nop
	}*/
	
	// Startup delay (Beep "Imperial March")
	//player.Play();
	_delay_ms(5000);
	laserBoard.Relay1On();
    4c9a:	85 e0       	ldi	r24, 0x05	; 5
    4c9c:	96 e2       	ldi	r25, 0x26	; 38
    4c9e:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <_ZN11CLaserBoard8Relay1OnEv>
    4ca2:	2f ef       	ldi	r18, 0xFF	; 255
    4ca4:	33 ec       	ldi	r19, 0xC3	; 195
    4ca6:	89 e0       	ldi	r24, 0x09	; 9
    4ca8:	21 50       	subi	r18, 0x01	; 1
    4caa:	30 40       	sbci	r19, 0x00	; 0
    4cac:	80 40       	sbci	r24, 0x00	; 0
    4cae:	e1 f7       	brne	.-8      	; 0x4ca8 <main+0x32>
    4cb0:	00 c0       	rjmp	.+0      	; 0x4cb2 <main+0x3c>
    4cb2:	00 00       	nop
	_delay_ms(100);
	//laserBoard.Relay1Off();
	
	uint16_t data = 0;
    4cb4:	19 82       	std	Y+1, r1	; 0x01
    4cb6:	1a 82       	std	Y+2, r1	; 0x02
	dacSPI.Send((uint8_t*)&data, sizeof(data));
    4cb8:	42 e0       	ldi	r20, 0x02	; 2
    4cba:	50 e0       	ldi	r21, 0x00	; 0
    4cbc:	be 01       	movw	r22, r28
    4cbe:	6f 5f       	subi	r22, 0xFF	; 255
    4cc0:	7f 4f       	sbci	r23, 0xFF	; 255
    4cc2:	85 e4       	ldi	r24, 0x45	; 69
    4cc4:	96 e2       	ldi	r25, 0x26	; 38
    4cc6:	0e 94 ff 10 	call	0x21fe	; 0x21fe <_ZN4CSPI4SendEPhj>
	
	// Initialize application GUI
	App.Start();
    4cca:	82 e8       	ldi	r24, 0x82	; 130
    4ccc:	95 e2       	ldi	r25, 0x25	; 37
    4cce:	0e 94 26 0a 	call	0x144c	; 0x144c <_ZN16CLaserControlApp5StartEv>
			//while (dacSPI.transmitterState() > 0);
			//dacSPI.Deinitialize();
			//_delay_ms(1);
			
			static uint16_t prs = 0;
			if ((prs++ % 15) == 0)
    4cd2:	1f e0       	ldi	r17, 0x0F	; 15
    while (1) 
    {
		// Loop delay
		//_delay_ms(1);
		
		laserBoard.PortCheck();
    4cd4:	85 e0       	ldi	r24, 0x05	; 5
    4cd6:	96 e2       	ldi	r25, 0x26	; 38
    4cd8:	0e 94 f9 2d 	call	0x5bf2	; 0x5bf2 <_ZN11CLaserBoard9PortCheckEv>
		
		// Process application
		//static uint16_t prs = 0;
		//if ((prs++ % 5) == 0)
		{
			App.Run();
    4cdc:	82 e8       	ldi	r24, 0x82	; 130
    4cde:	95 e2       	ldi	r25, 0x25	; 37
    4ce0:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN16CLaserControlApp3RunEv>
			//while (dacSPI.transmitterState() > 0);
			//dacSPI.Deinitialize();
			//_delay_ms(1);
			
			static uint16_t prs = 0;
			if ((prs++ % 15) == 0)
    4ce4:	40 91 7a 25 	lds	r20, 0x257A	; 0x80257a <_ZZ4mainE3prs>
    4ce8:	50 91 7b 25 	lds	r21, 0x257B	; 0x80257b <_ZZ4mainE3prs+0x1>
    4cec:	ca 01       	movw	r24, r20
    4cee:	01 96       	adiw	r24, 0x01	; 1
    4cf0:	80 93 7a 25 	sts	0x257A, r24	; 0x80257a <_ZZ4mainE3prs>
    4cf4:	90 93 7b 25 	sts	0x257B, r25	; 0x80257b <_ZZ4mainE3prs+0x1>
    4cf8:	9a 01       	movw	r18, r20
    4cfa:	a9 e8       	ldi	r26, 0x89	; 137
    4cfc:	b8 e8       	ldi	r27, 0x88	; 136
    4cfe:	0e 94 0d 34 	call	0x681a	; 0x681a <__umulhisi3>
    4d02:	96 95       	lsr	r25
    4d04:	87 95       	ror	r24
    4d06:	96 95       	lsr	r25
    4d08:	87 95       	ror	r24
    4d0a:	96 95       	lsr	r25
    4d0c:	87 95       	ror	r24
    4d0e:	18 9f       	mul	r17, r24
    4d10:	90 01       	movw	r18, r0
    4d12:	19 9f       	mul	r17, r25
    4d14:	30 0d       	add	r19, r0
    4d16:	11 24       	eor	r1, r1
    4d18:	42 17       	cp	r20, r18
    4d1a:	53 07       	cpc	r21, r19
    4d1c:	41 f4       	brne	.+16     	; 0x4d2e <main+0xb8>
				temperature = D18B20.temp_18b20();
    4d1e:	8e e7       	ldi	r24, 0x7E	; 126
    4d20:	95 e2       	ldi	r25, 0x25	; 37
    4d22:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <_ZN8CDS18B2010temp_18b20Ev>
    4d26:	80 93 7c 25 	sts	0x257C, r24	; 0x80257c <temperature>
    4d2a:	90 93 7d 25 	sts	0x257D, r25	; 0x80257d <temperature+0x1>
			
			//_delay_ms(1);
			//dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
			
			if (temperature > 265)
    4d2e:	80 91 7c 25 	lds	r24, 0x257C	; 0x80257c <temperature>
    4d32:	90 91 7d 25 	lds	r25, 0x257D	; 0x80257d <temperature+0x1>
    4d36:	8a 30       	cpi	r24, 0x0A	; 10
    4d38:	91 40       	sbci	r25, 0x01	; 1
    4d3a:	24 f0       	brlt	.+8      	; 0x4d44 <main+0xce>
				laserBoard.Relay2On();
    4d3c:	85 e0       	ldi	r24, 0x05	; 5
    4d3e:	96 e2       	ldi	r25, 0x26	; 38
    4d40:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <_ZN11CLaserBoard8Relay2OnEv>
			
			if (temperature <255)
    4d44:	80 91 7c 25 	lds	r24, 0x257C	; 0x80257c <temperature>
    4d48:	90 91 7d 25 	lds	r25, 0x257D	; 0x80257d <temperature+0x1>
    4d4c:	8f 3f       	cpi	r24, 0xFF	; 255
    4d4e:	91 05       	cpc	r25, r1
    4d50:	0c f6       	brge	.-126    	; 0x4cd4 <main+0x5e>
				laserBoard.Relay2Off();			
    4d52:	85 e0       	ldi	r24, 0x05	; 5
    4d54:	96 e2       	ldi	r25, 0x26	; 38
    4d56:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <_ZN11CLaserBoard9Relay2OffEv>
    4d5a:	bc cf       	rjmp	.-136    	; 0x4cd4 <main+0x5e>

00004d5c <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	index = crch ^ data;	
	crch  = crcl ^ CRCTABH[index];
	crcl  = CRCTABL[index];

	return (crch << 8) | crcl;
}
    4d5c:	ef 92       	push	r14
    4d5e:	ff 92       	push	r15
    4d60:	0f 93       	push	r16
    4d62:	1f 93       	push	r17
    4d64:	cf 93       	push	r28
    4d66:	df 93       	push	r29
    4d68:	8c 01       	movw	r16, r24
    4d6a:	dc 01       	movw	r26, r24
    4d6c:	14 96       	adiw	r26, 0x04	; 4
    4d6e:	ed 91       	ld	r30, X+
    4d70:	fc 91       	ld	r31, X
    4d72:	15 97       	sbiw	r26, 0x05	; 5
    4d74:	8a ea       	ldi	r24, 0xAA	; 170
    4d76:	80 83       	st	Z, r24
    4d78:	14 96       	adiw	r26, 0x04	; 4
    4d7a:	ed 91       	ld	r30, X+
    4d7c:	fc 91       	ld	r31, X
    4d7e:	15 97       	sbiw	r26, 0x05	; 5
    4d80:	8c ec       	ldi	r24, 0xCC	; 204
    4d82:	81 83       	std	Z+1, r24	; 0x01
    4d84:	14 96       	adiw	r26, 0x04	; 4
    4d86:	ed 91       	ld	r30, X+
    4d88:	fc 91       	ld	r31, X
    4d8a:	15 97       	sbiw	r26, 0x05	; 5
    4d8c:	85 e0       	ldi	r24, 0x05	; 5
    4d8e:	82 0f       	add	r24, r18
    4d90:	82 83       	std	Z+2, r24	; 0x02
    4d92:	14 96       	adiw	r26, 0x04	; 4
    4d94:	ed 91       	ld	r30, X+
    4d96:	fc 91       	ld	r31, X
    4d98:	15 97       	sbiw	r26, 0x05	; 5
    4d9a:	82 e8       	ldi	r24, 0x82	; 130
    4d9c:	83 83       	std	Z+3, r24	; 0x03
    4d9e:	14 96       	adiw	r26, 0x04	; 4
    4da0:	ed 91       	ld	r30, X+
    4da2:	fc 91       	ld	r31, X
    4da4:	15 97       	sbiw	r26, 0x05	; 5
    4da6:	74 83       	std	Z+4, r23	; 0x04
    4da8:	14 96       	adiw	r26, 0x04	; 4
    4daa:	ed 91       	ld	r30, X+
    4dac:	fc 91       	ld	r31, X
    4dae:	15 97       	sbiw	r26, 0x05	; 5
    4db0:	65 83       	std	Z+5, r22	; 0x05
    4db2:	86 e0       	ldi	r24, 0x06	; 6
    4db4:	82 0f       	add	r24, r18
    4db6:	19 96       	adiw	r26, 0x09	; 9
    4db8:	8c 93       	st	X, r24
    4dba:	c9 01       	movw	r24, r18
    4dbc:	96 95       	lsr	r25
    4dbe:	87 95       	ror	r24
    4dc0:	00 97       	sbiw	r24, 0x00	; 0
    4dc2:	d9 f0       	breq	.+54     	; 0x4dfa <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x9e>
    4dc4:	e4 2f       	mov	r30, r20
    4dc6:	f5 2f       	mov	r31, r21
    4dc8:	03 96       	adiw	r24, 0x03	; 3
    4dca:	88 0f       	add	r24, r24
    4dcc:	99 1f       	adc	r25, r25
    4dce:	46 e0       	ldi	r20, 0x06	; 6
    4dd0:	50 e0       	ldi	r21, 0x00	; 0
    4dd2:	e8 01       	movw	r28, r16
    4dd4:	ac 81       	ldd	r26, Y+4	; 0x04
    4dd6:	bd 81       	ldd	r27, Y+5	; 0x05
    4dd8:	a4 0f       	add	r26, r20
    4dda:	b5 1f       	adc	r27, r21
    4ddc:	61 81       	ldd	r22, Z+1	; 0x01
    4dde:	6c 93       	st	X, r22
    4de0:	ac 81       	ldd	r26, Y+4	; 0x04
    4de2:	bd 81       	ldd	r27, Y+5	; 0x05
    4de4:	a4 0f       	add	r26, r20
    4de6:	b5 1f       	adc	r27, r21
    4de8:	60 81       	ld	r22, Z
    4dea:	32 96       	adiw	r30, 0x02	; 2
    4dec:	11 96       	adiw	r26, 0x01	; 1
    4dee:	6c 93       	st	X, r22
    4df0:	4e 5f       	subi	r20, 0xFE	; 254
    4df2:	5f 4f       	sbci	r21, 0xFF	; 255
    4df4:	48 17       	cp	r20, r24
    4df6:	59 07       	cpc	r21, r25
    4df8:	61 f7       	brne	.-40     	; 0x4dd2 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x76>
    4dfa:	f8 01       	movw	r30, r16
    4dfc:	81 85       	ldd	r24, Z+9	; 0x09
    4dfe:	a8 2f       	mov	r26, r24
    4e00:	b0 e0       	ldi	r27, 0x00	; 0
    4e02:	a4 30       	cpi	r26, 0x04	; 4
    4e04:	b1 05       	cpc	r27, r1
    4e06:	34 f1       	brlt	.+76     	; 0x4e54 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0xf8>
    4e08:	04 80       	ldd	r0, Z+4	; 0x04
    4e0a:	f5 81       	ldd	r31, Z+5	; 0x05
    4e0c:	e0 2d       	mov	r30, r0
    4e0e:	33 96       	adiw	r30, 0x03	; 3
    4e10:	63 e0       	ldi	r22, 0x03	; 3
    4e12:	70 e0       	ldi	r23, 0x00	; 0
    4e14:	4f ef       	ldi	r20, 0xFF	; 255
    4e16:	5f ef       	ldi	r21, 0xFF	; 255
    4e18:	91 91       	ld	r25, Z+
    4e1a:	49 27       	eor	r20, r25
    4e1c:	94 2f       	mov	r25, r20
    4e1e:	92 95       	swap	r25
    4e20:	94 27       	eor	r25, r20
    4e22:	09 2e       	mov	r0, r25
    4e24:	96 95       	lsr	r25
    4e26:	96 95       	lsr	r25
    4e28:	90 25       	eor	r25, r0
    4e2a:	09 2e       	mov	r0, r25
    4e2c:	96 95       	lsr	r25
    4e2e:	90 25       	eor	r25, r0
    4e30:	97 70       	andi	r25, 0x07	; 7
    4e32:	04 2e       	mov	r0, r20
    4e34:	45 2f       	mov	r20, r21
    4e36:	96 95       	lsr	r25
    4e38:	07 94       	ror	r0
    4e3a:	97 95       	ror	r25
    4e3c:	50 2d       	mov	r21, r0
    4e3e:	49 27       	eor	r20, r25
    4e40:	06 94       	lsr	r0
    4e42:	97 95       	ror	r25
    4e44:	50 25       	eor	r21, r0
    4e46:	49 27       	eor	r20, r25
    4e48:	6f 5f       	subi	r22, 0xFF	; 255
    4e4a:	7f 4f       	sbci	r23, 0xFF	; 255
    4e4c:	6a 17       	cp	r22, r26
    4e4e:	7b 07       	cpc	r23, r27
    4e50:	1c f3       	brlt	.-58     	; 0x4e18 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0xbc>
    4e52:	02 c0       	rjmp	.+4      	; 0x4e58 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0xfc>
    4e54:	4f ef       	ldi	r20, 0xFF	; 255
    4e56:	5f ef       	ldi	r21, 0xFF	; 255
    4e58:	d8 01       	movw	r26, r16
    4e5a:	14 96       	adiw	r26, 0x04	; 4
    4e5c:	ed 91       	ld	r30, X+
    4e5e:	fc 91       	ld	r31, X
    4e60:	15 97       	sbiw	r26, 0x05	; 5
    4e62:	e8 0f       	add	r30, r24
    4e64:	f1 1d       	adc	r31, r1
    4e66:	51 83       	std	Z+1, r21	; 0x01
    4e68:	19 96       	adiw	r26, 0x09	; 9
    4e6a:	8c 91       	ld	r24, X
    4e6c:	19 97       	sbiw	r26, 0x09	; 9
    4e6e:	14 96       	adiw	r26, 0x04	; 4
    4e70:	ed 91       	ld	r30, X+
    4e72:	fc 91       	ld	r31, X
    4e74:	15 97       	sbiw	r26, 0x05	; 5
    4e76:	e8 0f       	add	r30, r24
    4e78:	f1 1d       	adc	r31, r1
    4e7a:	40 83       	st	Z, r20
    4e7c:	28 5f       	subi	r18, 0xF8	; 248
    4e7e:	19 96       	adiw	r26, 0x09	; 9
    4e80:	2c 93       	st	X, r18
    4e82:	df 91       	pop	r29
    4e84:	cf 91       	pop	r28
    4e86:	1f 91       	pop	r17
    4e88:	0f 91       	pop	r16
    4e8a:	ff 90       	pop	r15
    4e8c:	ef 90       	pop	r14
    4e8e:	08 95       	ret

00004e90 <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
    4e90:	0f 93       	push	r16
    4e92:	1f 93       	push	r17
    4e94:	cf 93       	push	r28
    4e96:	df 93       	push	r29
    4e98:	ec 01       	movw	r28, r24
    4e9a:	cb 01       	movw	r24, r22
    4e9c:	8a 01       	movw	r16, r20
    4e9e:	6f 83       	std	Y+7, r22	; 0x07
    4ea0:	78 87       	std	Y+8, r23	; 0x08
    4ea2:	4a 87       	std	Y+10, r20	; 0x0a
    4ea4:	5b 87       	std	Y+11, r21	; 0x0b
    4ea6:	0e 94 27 34 	call	0x684e	; 0x684e <malloc>
    4eaa:	8a 83       	std	Y+2, r24	; 0x02
    4eac:	9b 83       	std	Y+3, r25	; 0x03
    4eae:	c8 01       	movw	r24, r16
    4eb0:	0e 94 27 34 	call	0x684e	; 0x684e <malloc>
    4eb4:	8c 83       	std	Y+4, r24	; 0x04
    4eb6:	9d 83       	std	Y+5, r25	; 0x05
    4eb8:	19 86       	std	Y+9, r1	; 0x09
    4eba:	1e 82       	std	Y+6, r1	; 0x06
    4ebc:	df 91       	pop	r29
    4ebe:	cf 91       	pop	r28
    4ec0:	1f 91       	pop	r17
    4ec2:	0f 91       	pop	r16
    4ec4:	08 95       	ret

00004ec6 <_ZN16CMBEventsHandler11FreeBuffersEv>:
    4ec6:	cf 93       	push	r28
    4ec8:	df 93       	push	r29
    4eca:	ec 01       	movw	r28, r24
    4ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    4ece:	9b 81       	ldd	r25, Y+3	; 0x03
    4ed0:	0e 94 bc 34 	call	0x6978	; 0x6978 <free>
    4ed4:	8c 81       	ldd	r24, Y+4	; 0x04
    4ed6:	9d 81       	ldd	r25, Y+5	; 0x05
    4ed8:	0e 94 bc 34 	call	0x6978	; 0x6978 <free>
    4edc:	df 91       	pop	r29
    4ede:	cf 91       	pop	r28
    4ee0:	08 95       	ret

00004ee2 <_ZN16CMBEventsHandler13FillRegDataRqEhh>:
    4ee2:	cf 93       	push	r28
    4ee4:	df 93       	push	r29
    4ee6:	dc 01       	movw	r26, r24
    4ee8:	14 96       	adiw	r26, 0x04	; 4
    4eea:	ed 91       	ld	r30, X+
    4eec:	fc 91       	ld	r31, X
    4eee:	15 97       	sbiw	r26, 0x05	; 5
    4ef0:	8a ea       	ldi	r24, 0xAA	; 170
    4ef2:	80 83       	st	Z, r24
    4ef4:	14 96       	adiw	r26, 0x04	; 4
    4ef6:	ed 91       	ld	r30, X+
    4ef8:	fc 91       	ld	r31, X
    4efa:	15 97       	sbiw	r26, 0x05	; 5
    4efc:	8c ec       	ldi	r24, 0xCC	; 204
    4efe:	81 83       	std	Z+1, r24	; 0x01
    4f00:	14 96       	adiw	r26, 0x04	; 4
    4f02:	ed 91       	ld	r30, X+
    4f04:	fc 91       	ld	r31, X
    4f06:	15 97       	sbiw	r26, 0x05	; 5
    4f08:	85 e0       	ldi	r24, 0x05	; 5
    4f0a:	82 83       	std	Z+2, r24	; 0x02
    4f0c:	14 96       	adiw	r26, 0x04	; 4
    4f0e:	ed 91       	ld	r30, X+
    4f10:	fc 91       	ld	r31, X
    4f12:	15 97       	sbiw	r26, 0x05	; 5
    4f14:	81 e8       	ldi	r24, 0x81	; 129
    4f16:	83 83       	std	Z+3, r24	; 0x03
    4f18:	14 96       	adiw	r26, 0x04	; 4
    4f1a:	ed 91       	ld	r30, X+
    4f1c:	fc 91       	ld	r31, X
    4f1e:	15 97       	sbiw	r26, 0x05	; 5
    4f20:	64 83       	std	Z+4, r22	; 0x04
    4f22:	14 96       	adiw	r26, 0x04	; 4
    4f24:	ed 91       	ld	r30, X+
    4f26:	fc 91       	ld	r31, X
    4f28:	15 97       	sbiw	r26, 0x05	; 5
    4f2a:	45 83       	std	Z+5, r20	; 0x05
    4f2c:	86 e0       	ldi	r24, 0x06	; 6
    4f2e:	19 96       	adiw	r26, 0x09	; 9
    4f30:	8c 93       	st	X, r24
    4f32:	19 97       	sbiw	r26, 0x09	; 9
    4f34:	14 96       	adiw	r26, 0x04	; 4
    4f36:	cd 91       	ld	r28, X+
    4f38:	dc 91       	ld	r29, X
    4f3a:	15 97       	sbiw	r26, 0x05	; 5
    4f3c:	fe 01       	movw	r30, r28
    4f3e:	33 96       	adiw	r30, 0x03	; 3
    4f40:	be 01       	movw	r22, r28
    4f42:	6a 5f       	subi	r22, 0xFA	; 250
    4f44:	7f 4f       	sbci	r23, 0xFF	; 255
    4f46:	2f ef       	ldi	r18, 0xFF	; 255
    4f48:	3f ef       	ldi	r19, 0xFF	; 255
    4f4a:	91 91       	ld	r25, Z+
    4f4c:	29 27       	eor	r18, r25
    4f4e:	92 2f       	mov	r25, r18
    4f50:	92 95       	swap	r25
    4f52:	92 27       	eor	r25, r18
    4f54:	09 2e       	mov	r0, r25
    4f56:	96 95       	lsr	r25
    4f58:	96 95       	lsr	r25
    4f5a:	90 25       	eor	r25, r0
    4f5c:	09 2e       	mov	r0, r25
    4f5e:	96 95       	lsr	r25
    4f60:	90 25       	eor	r25, r0
    4f62:	97 70       	andi	r25, 0x07	; 7
    4f64:	02 2e       	mov	r0, r18
    4f66:	23 2f       	mov	r18, r19
    4f68:	96 95       	lsr	r25
    4f6a:	07 94       	ror	r0
    4f6c:	97 95       	ror	r25
    4f6e:	30 2d       	mov	r19, r0
    4f70:	29 27       	eor	r18, r25
    4f72:	06 94       	lsr	r0
    4f74:	97 95       	ror	r25
    4f76:	30 25       	eor	r19, r0
    4f78:	29 27       	eor	r18, r25
    4f7a:	e6 17       	cp	r30, r22
    4f7c:	f7 07       	cpc	r31, r23
    4f7e:	29 f7       	brne	.-54     	; 0x4f4a <_ZN16CMBEventsHandler13FillRegDataRqEhh+0x68>
    4f80:	3f 83       	std	Y+7, r19	; 0x07
    4f82:	19 96       	adiw	r26, 0x09	; 9
    4f84:	8c 91       	ld	r24, X
    4f86:	19 97       	sbiw	r26, 0x09	; 9
    4f88:	14 96       	adiw	r26, 0x04	; 4
    4f8a:	ed 91       	ld	r30, X+
    4f8c:	fc 91       	ld	r31, X
    4f8e:	15 97       	sbiw	r26, 0x05	; 5
    4f90:	e8 0f       	add	r30, r24
    4f92:	f1 1d       	adc	r31, r1
    4f94:	20 83       	st	Z, r18
    4f96:	48 5f       	subi	r20, 0xF8	; 248
    4f98:	19 96       	adiw	r26, 0x09	; 9
    4f9a:	4c 93       	st	X, r20
    4f9c:	df 91       	pop	r29
    4f9e:	cf 91       	pop	r28
    4fa0:	08 95       	ret

00004fa2 <_ZN16CMBEventsHandler13FillVarDataRqEjj>:
    4fa2:	cf 93       	push	r28
    4fa4:	df 93       	push	r29
    4fa6:	dc 01       	movw	r26, r24
    4fa8:	14 96       	adiw	r26, 0x04	; 4
    4faa:	ed 91       	ld	r30, X+
    4fac:	fc 91       	ld	r31, X
    4fae:	15 97       	sbiw	r26, 0x05	; 5
    4fb0:	8a ea       	ldi	r24, 0xAA	; 170
    4fb2:	80 83       	st	Z, r24
    4fb4:	14 96       	adiw	r26, 0x04	; 4
    4fb6:	ed 91       	ld	r30, X+
    4fb8:	fc 91       	ld	r31, X
    4fba:	15 97       	sbiw	r26, 0x05	; 5
    4fbc:	8c ec       	ldi	r24, 0xCC	; 204
    4fbe:	81 83       	std	Z+1, r24	; 0x01
    4fc0:	14 96       	adiw	r26, 0x04	; 4
    4fc2:	ed 91       	ld	r30, X+
    4fc4:	fc 91       	ld	r31, X
    4fc6:	15 97       	sbiw	r26, 0x05	; 5
    4fc8:	86 e0       	ldi	r24, 0x06	; 6
    4fca:	82 83       	std	Z+2, r24	; 0x02
    4fcc:	14 96       	adiw	r26, 0x04	; 4
    4fce:	ed 91       	ld	r30, X+
    4fd0:	fc 91       	ld	r31, X
    4fd2:	15 97       	sbiw	r26, 0x05	; 5
    4fd4:	83 e8       	ldi	r24, 0x83	; 131
    4fd6:	83 83       	std	Z+3, r24	; 0x03
    4fd8:	14 96       	adiw	r26, 0x04	; 4
    4fda:	ed 91       	ld	r30, X+
    4fdc:	fc 91       	ld	r31, X
    4fde:	15 97       	sbiw	r26, 0x05	; 5
    4fe0:	74 83       	std	Z+4, r23	; 0x04
    4fe2:	14 96       	adiw	r26, 0x04	; 4
    4fe4:	ed 91       	ld	r30, X+
    4fe6:	fc 91       	ld	r31, X
    4fe8:	15 97       	sbiw	r26, 0x05	; 5
    4fea:	65 83       	std	Z+5, r22	; 0x05
    4fec:	14 96       	adiw	r26, 0x04	; 4
    4fee:	ed 91       	ld	r30, X+
    4ff0:	fc 91       	ld	r31, X
    4ff2:	15 97       	sbiw	r26, 0x05	; 5
    4ff4:	46 83       	std	Z+6, r20	; 0x06
    4ff6:	87 e0       	ldi	r24, 0x07	; 7
    4ff8:	19 96       	adiw	r26, 0x09	; 9
    4ffa:	8c 93       	st	X, r24
    4ffc:	19 97       	sbiw	r26, 0x09	; 9
    4ffe:	14 96       	adiw	r26, 0x04	; 4
    5000:	cd 91       	ld	r28, X+
    5002:	dc 91       	ld	r29, X
    5004:	15 97       	sbiw	r26, 0x05	; 5
    5006:	fe 01       	movw	r30, r28
    5008:	33 96       	adiw	r30, 0x03	; 3
    500a:	ae 01       	movw	r20, r28
    500c:	49 5f       	subi	r20, 0xF9	; 249
    500e:	5f 4f       	sbci	r21, 0xFF	; 255
    5010:	2f ef       	ldi	r18, 0xFF	; 255
    5012:	3f ef       	ldi	r19, 0xFF	; 255
    5014:	91 91       	ld	r25, Z+
    5016:	29 27       	eor	r18, r25
    5018:	92 2f       	mov	r25, r18
    501a:	92 95       	swap	r25
    501c:	92 27       	eor	r25, r18
    501e:	09 2e       	mov	r0, r25
    5020:	96 95       	lsr	r25
    5022:	96 95       	lsr	r25
    5024:	90 25       	eor	r25, r0
    5026:	09 2e       	mov	r0, r25
    5028:	96 95       	lsr	r25
    502a:	90 25       	eor	r25, r0
    502c:	97 70       	andi	r25, 0x07	; 7
    502e:	02 2e       	mov	r0, r18
    5030:	23 2f       	mov	r18, r19
    5032:	96 95       	lsr	r25
    5034:	07 94       	ror	r0
    5036:	97 95       	ror	r25
    5038:	30 2d       	mov	r19, r0
    503a:	29 27       	eor	r18, r25
    503c:	06 94       	lsr	r0
    503e:	97 95       	ror	r25
    5040:	30 25       	eor	r19, r0
    5042:	29 27       	eor	r18, r25
    5044:	e4 17       	cp	r30, r20
    5046:	f5 07       	cpc	r31, r21
    5048:	29 f7       	brne	.-54     	; 0x5014 <_ZN16CMBEventsHandler13FillVarDataRqEjj+0x72>
    504a:	38 87       	std	Y+8, r19	; 0x08
    504c:	19 96       	adiw	r26, 0x09	; 9
    504e:	8c 91       	ld	r24, X
    5050:	19 97       	sbiw	r26, 0x09	; 9
    5052:	14 96       	adiw	r26, 0x04	; 4
    5054:	ed 91       	ld	r30, X+
    5056:	fc 91       	ld	r31, X
    5058:	15 97       	sbiw	r26, 0x05	; 5
    505a:	e8 0f       	add	r30, r24
    505c:	f1 1d       	adc	r31, r1
    505e:	20 83       	st	Z, r18
    5060:	89 e0       	ldi	r24, 0x09	; 9
    5062:	19 96       	adiw	r26, 0x09	; 9
    5064:	8c 93       	st	X, r24
    5066:	df 91       	pop	r29
    5068:	cf 91       	pop	r28
    506a:	08 95       	ret

0000506c <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
    506c:	cf 93       	push	r28
    506e:	df 93       	push	r29
    5070:	ec 01       	movw	r28, r24
    5072:	ec 81       	ldd	r30, Y+4	; 0x04
    5074:	fd 81       	ldd	r31, Y+5	; 0x05
    5076:	8a ea       	ldi	r24, 0xAA	; 170
    5078:	80 83       	st	Z, r24
    507a:	ec 81       	ldd	r30, Y+4	; 0x04
    507c:	fd 81       	ldd	r31, Y+5	; 0x05
    507e:	8c ec       	ldi	r24, 0xCC	; 204
    5080:	81 83       	std	Z+1, r24	; 0x01
    5082:	ec 81       	ldd	r30, Y+4	; 0x04
    5084:	fd 81       	ldd	r31, Y+5	; 0x05
    5086:	84 e0       	ldi	r24, 0x04	; 4
    5088:	82 0f       	add	r24, r18
    508a:	82 83       	std	Z+2, r24	; 0x02
    508c:	ec 81       	ldd	r30, Y+4	; 0x04
    508e:	fd 81       	ldd	r31, Y+5	; 0x05
    5090:	80 e8       	ldi	r24, 0x80	; 128
    5092:	83 83       	std	Z+3, r24	; 0x03
    5094:	ec 81       	ldd	r30, Y+4	; 0x04
    5096:	fd 81       	ldd	r31, Y+5	; 0x05
    5098:	64 83       	std	Z+4, r22	; 0x04
    509a:	85 e0       	ldi	r24, 0x05	; 5
    509c:	82 0f       	add	r24, r18
    509e:	89 87       	std	Y+9, r24	; 0x09
    50a0:	82 2f       	mov	r24, r18
    50a2:	90 e0       	ldi	r25, 0x00	; 0
    50a4:	00 97       	sbiw	r24, 0x00	; 0
    50a6:	81 f0       	breq	.+32     	; 0x50c8 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x5c>
    50a8:	da 01       	movw	r26, r20
    50aa:	48 0f       	add	r20, r24
    50ac:	59 1f       	adc	r21, r25
    50ae:	65 e0       	ldi	r22, 0x05	; 5
    50b0:	70 e0       	ldi	r23, 0x00	; 0
    50b2:	8d 91       	ld	r24, X+
    50b4:	ec 81       	ldd	r30, Y+4	; 0x04
    50b6:	fd 81       	ldd	r31, Y+5	; 0x05
    50b8:	e6 0f       	add	r30, r22
    50ba:	f7 1f       	adc	r31, r23
    50bc:	80 83       	st	Z, r24
    50be:	6f 5f       	subi	r22, 0xFF	; 255
    50c0:	7f 4f       	sbci	r23, 0xFF	; 255
    50c2:	a4 17       	cp	r26, r20
    50c4:	b5 07       	cpc	r27, r21
    50c6:	a9 f7       	brne	.-22     	; 0x50b2 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
    50c8:	a9 85       	ldd	r26, Y+9	; 0x09
    50ca:	b0 e0       	ldi	r27, 0x00	; 0
    50cc:	a4 30       	cpi	r26, 0x04	; 4
    50ce:	b1 05       	cpc	r27, r1
    50d0:	28 f1       	brcs	.+74     	; 0x511c <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0xb0>
    50d2:	ec 81       	ldd	r30, Y+4	; 0x04
    50d4:	fd 81       	ldd	r31, Y+5	; 0x05
    50d6:	33 96       	adiw	r30, 0x03	; 3
    50d8:	63 e0       	ldi	r22, 0x03	; 3
    50da:	70 e0       	ldi	r23, 0x00	; 0
    50dc:	4f ef       	ldi	r20, 0xFF	; 255
    50de:	5f ef       	ldi	r21, 0xFF	; 255
    50e0:	91 91       	ld	r25, Z+
    50e2:	49 27       	eor	r20, r25
    50e4:	94 2f       	mov	r25, r20
    50e6:	92 95       	swap	r25
    50e8:	94 27       	eor	r25, r20
    50ea:	09 2e       	mov	r0, r25
    50ec:	96 95       	lsr	r25
    50ee:	96 95       	lsr	r25
    50f0:	90 25       	eor	r25, r0
    50f2:	09 2e       	mov	r0, r25
    50f4:	96 95       	lsr	r25
    50f6:	90 25       	eor	r25, r0
    50f8:	97 70       	andi	r25, 0x07	; 7
    50fa:	04 2e       	mov	r0, r20
    50fc:	45 2f       	mov	r20, r21
    50fe:	96 95       	lsr	r25
    5100:	07 94       	ror	r0
    5102:	97 95       	ror	r25
    5104:	50 2d       	mov	r21, r0
    5106:	49 27       	eor	r20, r25
    5108:	06 94       	lsr	r0
    510a:	97 95       	ror	r25
    510c:	50 25       	eor	r21, r0
    510e:	49 27       	eor	r20, r25
    5110:	6f 5f       	subi	r22, 0xFF	; 255
    5112:	7f 4f       	sbci	r23, 0xFF	; 255
    5114:	6a 17       	cp	r22, r26
    5116:	7b 07       	cpc	r23, r27
    5118:	18 f3       	brcs	.-58     	; 0x50e0 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x74>
    511a:	02 c0       	rjmp	.+4      	; 0x5120 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0xb4>
    511c:	4f ef       	ldi	r20, 0xFF	; 255
    511e:	5f ef       	ldi	r21, 0xFF	; 255
    5120:	8c 81       	ldd	r24, Y+4	; 0x04
    5122:	9d 81       	ldd	r25, Y+5	; 0x05
    5124:	a8 0f       	add	r26, r24
    5126:	b9 1f       	adc	r27, r25
    5128:	11 96       	adiw	r26, 0x01	; 1
    512a:	5c 93       	st	X, r21
    512c:	89 85       	ldd	r24, Y+9	; 0x09
    512e:	ec 81       	ldd	r30, Y+4	; 0x04
    5130:	fd 81       	ldd	r31, Y+5	; 0x05
    5132:	e8 0f       	add	r30, r24
    5134:	f1 1d       	adc	r31, r1
    5136:	40 83       	st	Z, r20
    5138:	29 5f       	subi	r18, 0xF9	; 249
    513a:	29 87       	std	Y+9, r18	; 0x09
    513c:	df 91       	pop	r29
    513e:	cf 91       	pop	r28
    5140:	08 95       	ret

00005142 <_ZN16CMBEventsHandlerD1Ev>:

CMBEventsHandler::~CMBEventsHandler()
    5142:	08 95       	ret

00005144 <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	return Complete;
}

void CMBSender::StopMODBUSTransmitter()
{
	modbus_transmitter_state = tx_Idle;
    5144:	dc 01       	movw	r26, r24
    5146:	5b 96       	adiw	r26, 0x1b	; 27
    5148:	8d 91       	ld	r24, X+
    514a:	9c 91       	ld	r25, X
    514c:	5c 97       	sbiw	r26, 0x1c	; 28
    514e:	00 97       	sbiw	r24, 0x00	; 0
    5150:	39 f0       	breq	.+14     	; 0x5160 <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
    5152:	dc 01       	movw	r26, r24
    5154:	ed 91       	ld	r30, X+
    5156:	fc 91       	ld	r31, X
    5158:	02 80       	ldd	r0, Z+2	; 0x02
    515a:	f3 81       	ldd	r31, Z+3	; 0x03
    515c:	e0 2d       	mov	r30, r0
    515e:	19 95       	eicall
    5160:	08 95       	ret

00005162 <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
    5162:	dc 01       	movw	r26, r24
    5164:	5b 96       	adiw	r26, 0x1b	; 27
    5166:	8d 91       	ld	r24, X+
    5168:	9c 91       	ld	r25, X
    516a:	5c 97       	sbiw	r26, 0x1c	; 28
    516c:	00 97       	sbiw	r24, 0x00	; 0
    516e:	39 f0       	breq	.+14     	; 0x517e <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
    5170:	dc 01       	movw	r26, r24
    5172:	ed 91       	ld	r30, X+
    5174:	fc 91       	ld	r31, X
    5176:	04 80       	ldd	r0, Z+4	; 0x04
    5178:	f5 81       	ldd	r31, Z+5	; 0x05
    517a:	e0 2d       	mov	r30, r0
    517c:	19 95       	eicall
    517e:	08 95       	ret

00005180 <_ZN9CMBSenderC1Ev>:
    5180:	26 eb       	ldi	r18, 0xB6	; 182
    5182:	32 e2       	ldi	r19, 0x22	; 34
    5184:	fc 01       	movw	r30, r24
    5186:	20 83       	st	Z, r18
    5188:	31 83       	std	Z+1, r19	; 0x01
    518a:	08 95       	ret

0000518c <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj>:
    518c:	6f 92       	push	r6
    518e:	7f 92       	push	r7
    5190:	8f 92       	push	r8
    5192:	9f 92       	push	r9
    5194:	af 92       	push	r10
    5196:	bf 92       	push	r11
    5198:	cf 92       	push	r12
    519a:	df 92       	push	r13
    519c:	ef 92       	push	r14
    519e:	ff 92       	push	r15
    51a0:	0f 93       	push	r16
    51a2:	1f 93       	push	r17
    51a4:	cf 93       	push	r28
    51a6:	df 93       	push	r29
    51a8:	ec 01       	movw	r28, r24
    51aa:	4b 01       	movw	r8, r22
    51ac:	5a 01       	movw	r10, r20
    51ae:	39 01       	movw	r6, r18
    51b0:	c8 01       	movw	r24, r16
    51b2:	0f 83       	std	Y+7, r16	; 0x07
    51b4:	18 87       	std	Y+8, r17	; 0x08
    51b6:	ea 86       	std	Y+10, r14	; 0x0a
    51b8:	fb 86       	std	Y+11, r15	; 0x0b
    51ba:	0e 94 27 34 	call	0x684e	; 0x684e <malloc>
    51be:	8a 83       	std	Y+2, r24	; 0x02
    51c0:	9b 83       	std	Y+3, r25	; 0x03
    51c2:	c7 01       	movw	r24, r14
    51c4:	0e 94 27 34 	call	0x684e	; 0x684e <malloc>
    51c8:	8c 83       	std	Y+4, r24	; 0x04
    51ca:	9d 83       	std	Y+5, r25	; 0x05
    51cc:	19 8e       	std	Y+25, r1	; 0x19
    51ce:	19 86       	std	Y+9, r1	; 0x09
    51d0:	19 8a       	std	Y+17, r1	; 0x11
    51d2:	1e 82       	std	Y+6, r1	; 0x06
    51d4:	1c 8a       	std	Y+20, r1	; 0x14
    51d6:	1d 8a       	std	Y+21, r1	; 0x15
    51d8:	8f ef       	ldi	r24, 0xFF	; 255
    51da:	9f ef       	ldi	r25, 0xFF	; 255
    51dc:	8e 8b       	std	Y+22, r24	; 0x16
    51de:	9f 8b       	std	Y+23, r25	; 0x17
    51e0:	87 e0       	ldi	r24, 0x07	; 7
    51e2:	88 8b       	std	Y+16, r24	; 0x10
    51e4:	82 e0       	ldi	r24, 0x02	; 2
    51e6:	88 8f       	std	Y+24, r24	; 0x18
    51e8:	1a 8e       	std	Y+26, r1	; 0x1a
    51ea:	ca 8a       	std	Y+18, r12	; 0x12
    51ec:	db 8a       	std	Y+19, r13	; 0x13
    51ee:	ac 86       	std	Y+12, r10	; 0x0c
    51f0:	bd 86       	std	Y+13, r11	; 0x0d
    51f2:	d5 01       	movw	r26, r10
    51f4:	ed 91       	ld	r30, X+
    51f6:	fc 91       	ld	r31, X
    51f8:	04 84       	ldd	r0, Z+12	; 0x0c
    51fa:	f5 85       	ldd	r31, Z+13	; 0x0d
    51fc:	e0 2d       	mov	r30, r0
    51fe:	48 e0       	ldi	r20, 0x08	; 8
    5200:	5a e2       	ldi	r21, 0x2A	; 42
    5202:	be 01       	movw	r22, r28
    5204:	c5 01       	movw	r24, r10
    5206:	19 95       	eicall
    5208:	d5 01       	movw	r26, r10
    520a:	ed 91       	ld	r30, X+
    520c:	fc 91       	ld	r31, X
    520e:	06 84       	ldd	r0, Z+14	; 0x0e
    5210:	f7 85       	ldd	r31, Z+15	; 0x0f
    5212:	e0 2d       	mov	r30, r0
    5214:	44 e9       	ldi	r20, 0x94	; 148
    5216:	5a e2       	ldi	r21, 0x2A	; 42
    5218:	be 01       	movw	r22, r28
    521a:	c5 01       	movw	r24, r10
    521c:	19 95       	eicall
    521e:	61 14       	cp	r6, r1
    5220:	71 04       	cpc	r7, r1
    5222:	19 f0       	breq	.+6      	; 0x522a <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0x9e>
    5224:	6b 8e       	std	Y+27, r6	; 0x1b
    5226:	7c 8e       	std	Y+28, r7	; 0x1c
    5228:	02 c0       	rjmp	.+4      	; 0x522e <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0xa2>
    522a:	cb 8f       	std	Y+27, r28	; 0x1b
    522c:	dc 8f       	std	Y+28, r29	; 0x1c
    522e:	8e 86       	std	Y+14, r8	; 0x0e
    5230:	9f 86       	std	Y+15, r9	; 0x0f
    5232:	81 14       	cp	r8, r1
    5234:	91 04       	cpc	r9, r1
    5236:	61 f0       	breq	.+24     	; 0x5250 <_ZN9CMBSender10InitializeEP7CTimer1P6CUSARTP16CMBEventsHandlerjjj+0xc4>
    5238:	d4 01       	movw	r26, r8
    523a:	ed 91       	ld	r30, X+
    523c:	fc 91       	ld	r31, X
    523e:	02 88       	ldd	r0, Z+18	; 0x12
    5240:	f3 89       	ldd	r31, Z+19	; 0x13
    5242:	e0 2d       	mov	r30, r0
    5244:	21 e0       	ldi	r18, 0x01	; 1
    5246:	ae 01       	movw	r20, r28
    5248:	6f e2       	ldi	r22, 0x2F	; 47
    524a:	7a e2       	ldi	r23, 0x2A	; 42
    524c:	c4 01       	movw	r24, r8
    524e:	19 95       	eicall
    5250:	df 91       	pop	r29
    5252:	cf 91       	pop	r28
    5254:	1f 91       	pop	r17
    5256:	0f 91       	pop	r16
    5258:	ff 90       	pop	r15
    525a:	ef 90       	pop	r14
    525c:	df 90       	pop	r13
    525e:	cf 90       	pop	r12
    5260:	bf 90       	pop	r11
    5262:	af 90       	pop	r10
    5264:	9f 90       	pop	r9
    5266:	8f 90       	pop	r8
    5268:	7f 90       	pop	r7
    526a:	6f 90       	pop	r6
    526c:	08 95       	ret

0000526e <_ZN9CMBSenderD1Ev>:
    526e:	26 eb       	ldi	r18, 0xB6	; 182
    5270:	32 e2       	ldi	r19, 0x22	; 34
    5272:	fc 01       	movw	r30, r24
    5274:	20 83       	st	Z, r18
    5276:	31 83       	std	Z+1, r19	; 0x01
    5278:	0e 94 a1 28 	call	0x5142	; 0x5142 <_ZN16CMBEventsHandlerD1Ev>
    527c:	08 95       	ret

0000527e <_ZN9CMBSender13OnReceiveByteEh>:
    527e:	cf 93       	push	r28
    5280:	df 93       	push	r29
    5282:	dc 01       	movw	r26, r24
    5284:	96 2f       	mov	r25, r22
    5286:	50 96       	adiw	r26, 0x10	; 16
    5288:	4c 91       	ld	r20, X
    528a:	50 97       	sbiw	r26, 0x10	; 16
    528c:	50 e0       	ldi	r21, 0x00	; 0
    528e:	4b 30       	cpi	r20, 0x0B	; 11
    5290:	51 05       	cpc	r21, r1
    5292:	08 f0       	brcs	.+2      	; 0x5296 <_ZN9CMBSender13OnReceiveByteEh+0x18>
    5294:	ba c0       	rjmp	.+372    	; 0x540a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    5296:	fa 01       	movw	r30, r20
    5298:	88 27       	eor	r24, r24
    529a:	e0 5c       	subi	r30, 0xC0	; 192
    529c:	fe 4f       	sbci	r31, 0xFE	; 254
    529e:	8f 4f       	sbci	r24, 0xFF	; 255
    52a0:	0c 94 05 34 	jmp	0x680a	; 0x680a <__tablejump2__>
    52a4:	9a 3a       	cpi	r25, 0xAA	; 170
    52a6:	21 f4       	brne	.+8      	; 0x52b0 <_ZN9CMBSender13OnReceiveByteEh+0x32>
    52a8:	82 e0       	ldi	r24, 0x02	; 2
    52aa:	50 96       	adiw	r26, 0x10	; 16
    52ac:	8c 93       	st	X, r24
    52ae:	ad c0       	rjmp	.+346    	; 0x540a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    52b0:	81 e0       	ldi	r24, 0x01	; 1
    52b2:	50 96       	adiw	r26, 0x10	; 16
    52b4:	8c 93       	st	X, r24
    52b6:	a9 c0       	rjmp	.+338    	; 0x540a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    52b8:	9c 3c       	cpi	r25, 0xCC	; 204
    52ba:	21 f4       	brne	.+8      	; 0x52c4 <_ZN9CMBSender13OnReceiveByteEh+0x46>
    52bc:	83 e0       	ldi	r24, 0x03	; 3
    52be:	50 96       	adiw	r26, 0x10	; 16
    52c0:	8c 93       	st	X, r24
    52c2:	a3 c0       	rjmp	.+326    	; 0x540a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    52c4:	81 e0       	ldi	r24, 0x01	; 1
    52c6:	50 96       	adiw	r26, 0x10	; 16
    52c8:	8c 93       	st	X, r24
    52ca:	9f c0       	rjmp	.+318    	; 0x540a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    52cc:	16 96       	adiw	r26, 0x06	; 6
    52ce:	9c 93       	st	X, r25
    52d0:	16 97       	sbiw	r26, 0x06	; 6
    52d2:	51 96       	adiw	r26, 0x11	; 17
    52d4:	1c 92       	st	X, r1
    52d6:	51 97       	sbiw	r26, 0x11	; 17
    52d8:	8f ef       	ldi	r24, 0xFF	; 255
    52da:	9f ef       	ldi	r25, 0xFF	; 255
    52dc:	56 96       	adiw	r26, 0x16	; 22
    52de:	8d 93       	st	X+, r24
    52e0:	9c 93       	st	X, r25
    52e2:	57 97       	sbiw	r26, 0x17	; 23
    52e4:	84 e0       	ldi	r24, 0x04	; 4
    52e6:	50 96       	adiw	r26, 0x10	; 16
    52e8:	8c 93       	st	X, r24
    52ea:	8f c0       	rjmp	.+286    	; 0x540a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    52ec:	51 96       	adiw	r26, 0x11	; 17
    52ee:	8c 91       	ld	r24, X
    52f0:	51 97       	sbiw	r26, 0x11	; 17
    52f2:	12 96       	adiw	r26, 0x02	; 2
    52f4:	ed 91       	ld	r30, X+
    52f6:	fc 91       	ld	r31, X
    52f8:	13 97       	sbiw	r26, 0x03	; 3
    52fa:	e8 0f       	add	r30, r24
    52fc:	f1 1d       	adc	r31, r1
    52fe:	90 83       	st	Z, r25
    5300:	51 96       	adiw	r26, 0x11	; 17
    5302:	2c 91       	ld	r18, X
    5304:	51 97       	sbiw	r26, 0x11	; 17
    5306:	30 e0       	ldi	r19, 0x00	; 0
    5308:	17 96       	adiw	r26, 0x07	; 7
    530a:	4d 91       	ld	r20, X+
    530c:	5c 91       	ld	r21, X
    530e:	18 97       	sbiw	r26, 0x08	; 8
    5310:	42 17       	cp	r20, r18
    5312:	53 07       	cpc	r21, r19
    5314:	20 f4       	brcc	.+8      	; 0x531e <_ZN9CMBSender13OnReceiveByteEh+0xa0>
    5316:	89 e0       	ldi	r24, 0x09	; 9
    5318:	50 96       	adiw	r26, 0x10	; 16
    531a:	8c 93       	st	X, r24
    531c:	76 c0       	rjmp	.+236    	; 0x540a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    531e:	56 96       	adiw	r26, 0x16	; 22
    5320:	2d 91       	ld	r18, X+
    5322:	3c 91       	ld	r19, X
    5324:	57 97       	sbiw	r26, 0x17	; 23
    5326:	29 27       	eor	r18, r25
    5328:	62 2f       	mov	r22, r18
    532a:	62 95       	swap	r22
    532c:	62 27       	eor	r22, r18
    532e:	06 2e       	mov	r0, r22
    5330:	66 95       	lsr	r22
    5332:	66 95       	lsr	r22
    5334:	60 25       	eor	r22, r0
    5336:	06 2e       	mov	r0, r22
    5338:	66 95       	lsr	r22
    533a:	60 25       	eor	r22, r0
    533c:	67 70       	andi	r22, 0x07	; 7
    533e:	02 2e       	mov	r0, r18
    5340:	23 2f       	mov	r18, r19
    5342:	66 95       	lsr	r22
    5344:	07 94       	ror	r0
    5346:	67 95       	ror	r22
    5348:	30 2d       	mov	r19, r0
    534a:	26 27       	eor	r18, r22
    534c:	06 94       	lsr	r0
    534e:	67 95       	ror	r22
    5350:	30 25       	eor	r19, r0
    5352:	26 27       	eor	r18, r22
    5354:	56 96       	adiw	r26, 0x16	; 22
    5356:	2d 93       	st	X+, r18
    5358:	3c 93       	st	X, r19
    535a:	57 97       	sbiw	r26, 0x17	; 23
    535c:	51 96       	adiw	r26, 0x11	; 17
    535e:	8c 91       	ld	r24, X
    5360:	51 97       	sbiw	r26, 0x11	; 17
    5362:	8f 5f       	subi	r24, 0xFF	; 255
    5364:	51 96       	adiw	r26, 0x11	; 17
    5366:	8c 93       	st	X, r24
    5368:	51 97       	sbiw	r26, 0x11	; 17
    536a:	51 96       	adiw	r26, 0x11	; 17
    536c:	2c 91       	ld	r18, X
    536e:	51 97       	sbiw	r26, 0x11	; 17
    5370:	30 e0       	ldi	r19, 0x00	; 0
    5372:	16 96       	adiw	r26, 0x06	; 6
    5374:	8c 91       	ld	r24, X
    5376:	16 97       	sbiw	r26, 0x06	; 6
    5378:	90 e0       	ldi	r25, 0x00	; 0
    537a:	02 97       	sbiw	r24, 0x02	; 2
    537c:	28 17       	cp	r18, r24
    537e:	39 07       	cpc	r19, r25
    5380:	09 f0       	breq	.+2      	; 0x5384 <_ZN9CMBSender13OnReceiveByteEh+0x106>
    5382:	43 c0       	rjmp	.+134    	; 0x540a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    5384:	85 e0       	ldi	r24, 0x05	; 5
    5386:	50 96       	adiw	r26, 0x10	; 16
    5388:	8c 93       	st	X, r24
    538a:	3f c0       	rjmp	.+126    	; 0x540a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    538c:	69 2f       	mov	r22, r25
    538e:	70 e0       	ldi	r23, 0x00	; 0
    5390:	54 96       	adiw	r26, 0x14	; 20
    5392:	6d 93       	st	X+, r22
    5394:	7c 93       	st	X, r23
    5396:	55 97       	sbiw	r26, 0x15	; 21
    5398:	86 e0       	ldi	r24, 0x06	; 6
    539a:	50 96       	adiw	r26, 0x10	; 16
    539c:	8c 93       	st	X, r24
    539e:	35 c0       	rjmp	.+106    	; 0x540a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    53a0:	54 96       	adiw	r26, 0x14	; 20
    53a2:	2d 91       	ld	r18, X+
    53a4:	3c 91       	ld	r19, X
    53a6:	55 97       	sbiw	r26, 0x15	; 21
    53a8:	a9 01       	movw	r20, r18
    53aa:	59 2b       	or	r21, r25
    53ac:	54 96       	adiw	r26, 0x14	; 20
    53ae:	4d 93       	st	X+, r20
    53b0:	5c 93       	st	X, r21
    53b2:	55 97       	sbiw	r26, 0x15	; 21
    53b4:	56 96       	adiw	r26, 0x16	; 22
    53b6:	2d 91       	ld	r18, X+
    53b8:	3c 91       	ld	r19, X
    53ba:	57 97       	sbiw	r26, 0x17	; 23
    53bc:	42 17       	cp	r20, r18
    53be:	53 07       	cpc	r21, r19
    53c0:	f1 f4       	brne	.+60     	; 0x53fe <_ZN9CMBSender13OnReceiveByteEh+0x180>
    53c2:	ed 01       	movw	r28, r26
    53c4:	88 e0       	ldi	r24, 0x08	; 8
    53c6:	88 8b       	std	Y+16, r24	; 0x10
    53c8:	e8 81       	ld	r30, Y
    53ca:	f9 81       	ldd	r31, Y+1	; 0x01
    53cc:	4e 81       	ldd	r20, Y+6	; 0x06
    53ce:	50 e0       	ldi	r21, 0x00	; 0
    53d0:	6a 81       	ldd	r22, Y+2	; 0x02
    53d2:	7b 81       	ldd	r23, Y+3	; 0x03
    53d4:	01 90       	ld	r0, Z+
    53d6:	f0 81       	ld	r31, Z
    53d8:	e0 2d       	mov	r30, r0
    53da:	cd 01       	movw	r24, r26
    53dc:	19 95       	eicall
    53de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    53e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    53e2:	00 97       	sbiw	r24, 0x00	; 0
    53e4:	91 f0       	breq	.+36     	; 0x540a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    53e6:	dc 01       	movw	r26, r24
    53e8:	ed 91       	ld	r30, X+
    53ea:	fc 91       	ld	r31, X
    53ec:	4e 81       	ldd	r20, Y+6	; 0x06
    53ee:	50 e0       	ldi	r21, 0x00	; 0
    53f0:	6a 81       	ldd	r22, Y+2	; 0x02
    53f2:	7b 81       	ldd	r23, Y+3	; 0x03
    53f4:	01 90       	ld	r0, Z+
    53f6:	f0 81       	ld	r31, Z
    53f8:	e0 2d       	mov	r30, r0
    53fa:	19 95       	eicall
    53fc:	06 c0       	rjmp	.+12     	; 0x540a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    53fe:	89 e0       	ldi	r24, 0x09	; 9
    5400:	50 96       	adiw	r26, 0x10	; 16
    5402:	8c 93       	st	X, r24
    5404:	02 c0       	rjmp	.+4      	; 0x540a <_ZN9CMBSender13OnReceiveByteEh+0x18c>
    5406:	5a 96       	adiw	r26, 0x1a	; 26
    5408:	1c 92       	st	X, r1
    540a:	df 91       	pop	r29
    540c:	cf 91       	pop	r28
    540e:	08 95       	ret

00005410 <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
    5410:	cf 93       	push	r28
    5412:	df 93       	push	r29
    5414:	ec 01       	movw	r28, r24
    5416:	8c 85       	ldd	r24, Y+12	; 0x0c
    5418:	9d 85       	ldd	r25, Y+13	; 0x0d
    541a:	dc 01       	movw	r26, r24
    541c:	ed 91       	ld	r30, X+
    541e:	fc 91       	ld	r31, X
    5420:	02 80       	ldd	r0, Z+2	; 0x02
    5422:	f3 81       	ldd	r31, Z+3	; 0x03
    5424:	e0 2d       	mov	r30, r0
    5426:	19 95       	eicall
    5428:	68 2f       	mov	r22, r24
    542a:	ce 01       	movw	r24, r28
    542c:	0e 94 3f 29 	call	0x527e	; 0x527e <_ZN9CMBSender13OnReceiveByteEh>
    5430:	df 91       	pop	r29
    5432:	cf 91       	pop	r28
    5434:	08 95       	ret

00005436 <_ZN9CMBSender9OnTimeoutEv>:
    5436:	cf 93       	push	r28
    5438:	df 93       	push	r29
    543a:	ec 01       	movw	r28, r24
    543c:	8e 85       	ldd	r24, Y+14	; 0x0e
    543e:	9f 85       	ldd	r25, Y+15	; 0x0f
    5440:	dc 01       	movw	r26, r24
    5442:	ed 91       	ld	r30, X+
    5444:	fc 91       	ld	r31, X
    5446:	04 80       	ldd	r0, Z+4	; 0x04
    5448:	f5 81       	ldd	r31, Z+5	; 0x05
    544a:	e0 2d       	mov	r30, r0
    544c:	19 95       	eicall
    544e:	88 89       	ldd	r24, Y+16	; 0x10
    5450:	88 30       	cpi	r24, 0x08	; 8
    5452:	11 f0       	breq	.+4      	; 0x5458 <_ZN9CMBSender9OnTimeoutEv+0x22>
    5454:	8a e0       	ldi	r24, 0x0A	; 10
    5456:	88 8b       	std	Y+16, r24	; 0x10
    5458:	df 91       	pop	r29
    545a:	cf 91       	pop	r28
    545c:	08 95       	ret

0000545e <_ZN9CMBSender18OnTimeoutInterruptEPv>:
    545e:	0e 94 1b 2a 	call	0x5436	; 0x5436 <_ZN9CMBSender9OnTimeoutEv>
    5462:	08 95       	ret

00005464 <_ZN9CMBSender19StartMODBUSListenerEv>:
    5464:	cf 93       	push	r28
    5466:	df 93       	push	r29
    5468:	fc 01       	movw	r30, r24
    546a:	11 8a       	std	Z+17, r1	; 0x11
    546c:	16 82       	std	Z+6, r1	; 0x06
    546e:	14 8a       	std	Z+20, r1	; 0x14
    5470:	15 8a       	std	Z+21, r1	; 0x15
    5472:	16 8a       	std	Z+22, r1	; 0x16
    5474:	17 8a       	std	Z+23, r1	; 0x17
    5476:	10 8a       	std	Z+16, r1	; 0x10
    5478:	86 85       	ldd	r24, Z+14	; 0x0e
    547a:	97 85       	ldd	r25, Z+15	; 0x0f
    547c:	ec 01       	movw	r28, r24
    547e:	a8 81       	ld	r26, Y
    5480:	b9 81       	ldd	r27, Y+1	; 0x01
    5482:	62 89       	ldd	r22, Z+18	; 0x12
    5484:	73 89       	ldd	r23, Z+19	; 0x13
    5486:	12 96       	adiw	r26, 0x02	; 2
    5488:	ed 91       	ld	r30, X+
    548a:	fc 91       	ld	r31, X
    548c:	13 97       	sbiw	r26, 0x03	; 3
    548e:	19 95       	eicall
    5490:	df 91       	pop	r29
    5492:	cf 91       	pop	r28
    5494:	08 95       	ret

00005496 <_ZN9CMBSender14OnTransmitByteEv>:
    5496:	cf 93       	push	r28
    5498:	df 93       	push	r29
    549a:	ec 01       	movw	r28, r24
    549c:	88 8d       	ldd	r24, Y+24	; 0x18
    549e:	84 30       	cpi	r24, 0x04	; 4
    54a0:	38 f4       	brcc	.+14     	; 0x54b0 <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    54a2:	82 30       	cpi	r24, 0x02	; 2
    54a4:	b8 f5       	brcc	.+110    	; 0x5514 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    54a6:	88 23       	and	r24, r24
    54a8:	31 f0       	breq	.+12     	; 0x54b6 <_ZN9CMBSender14OnTransmitByteEv+0x20>
    54aa:	81 30       	cpi	r24, 0x01	; 1
    54ac:	d1 f0       	breq	.+52     	; 0x54e2 <_ZN9CMBSender14OnTransmitByteEv+0x4c>
    54ae:	39 c0       	rjmp	.+114    	; 0x5522 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    54b0:	85 30       	cpi	r24, 0x05	; 5
    54b2:	81 f1       	breq	.+96     	; 0x5514 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    54b4:	36 c0       	rjmp	.+108    	; 0x5522 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    54b6:	81 e0       	ldi	r24, 0x01	; 1
    54b8:	88 8f       	std	Y+24, r24	; 0x18
    54ba:	19 8e       	std	Y+25, r1	; 0x19
    54bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    54be:	9d 85       	ldd	r25, Y+13	; 0x0d
    54c0:	29 8d       	ldd	r18, Y+25	; 0x19
    54c2:	dc 01       	movw	r26, r24
    54c4:	ed 91       	ld	r30, X+
    54c6:	fc 91       	ld	r31, X
    54c8:	ac 81       	ldd	r26, Y+4	; 0x04
    54ca:	bd 81       	ldd	r27, Y+5	; 0x05
    54cc:	a2 0f       	add	r26, r18
    54ce:	b1 1d       	adc	r27, r1
    54d0:	04 80       	ldd	r0, Z+4	; 0x04
    54d2:	f5 81       	ldd	r31, Z+5	; 0x05
    54d4:	e0 2d       	mov	r30, r0
    54d6:	6c 91       	ld	r22, X
    54d8:	19 95       	eicall
    54da:	89 8d       	ldd	r24, Y+25	; 0x19
    54dc:	8f 5f       	subi	r24, 0xFF	; 255
    54de:	89 8f       	std	Y+25, r24	; 0x19
    54e0:	20 c0       	rjmp	.+64     	; 0x5522 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    54e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    54e4:	9d 85       	ldd	r25, Y+13	; 0x0d
    54e6:	29 8d       	ldd	r18, Y+25	; 0x19
    54e8:	dc 01       	movw	r26, r24
    54ea:	ed 91       	ld	r30, X+
    54ec:	fc 91       	ld	r31, X
    54ee:	ac 81       	ldd	r26, Y+4	; 0x04
    54f0:	bd 81       	ldd	r27, Y+5	; 0x05
    54f2:	a2 0f       	add	r26, r18
    54f4:	b1 1d       	adc	r27, r1
    54f6:	04 80       	ldd	r0, Z+4	; 0x04
    54f8:	f5 81       	ldd	r31, Z+5	; 0x05
    54fa:	e0 2d       	mov	r30, r0
    54fc:	6c 91       	ld	r22, X
    54fe:	19 95       	eicall
    5500:	89 8d       	ldd	r24, Y+25	; 0x19
    5502:	8f 5f       	subi	r24, 0xFF	; 255
    5504:	89 8f       	std	Y+25, r24	; 0x19
    5506:	99 8d       	ldd	r25, Y+25	; 0x19
    5508:	89 85       	ldd	r24, Y+9	; 0x09
    550a:	98 13       	cpse	r25, r24
    550c:	0a c0       	rjmp	.+20     	; 0x5522 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    550e:	83 e0       	ldi	r24, 0x03	; 3
    5510:	88 8f       	std	Y+24, r24	; 0x18
    5512:	07 c0       	rjmp	.+14     	; 0x5522 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    5514:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5516:	88 23       	and	r24, r24
    5518:	19 f0       	breq	.+6      	; 0x5520 <_ZN9CMBSender14OnTransmitByteEv+0x8a>
    551a:	ce 01       	movw	r24, r28
    551c:	0e 94 32 2a 	call	0x5464	; 0x5464 <_ZN9CMBSender19StartMODBUSListenerEv>
    5520:	1a 8e       	std	Y+26, r1	; 0x1a
    5522:	df 91       	pop	r29
    5524:	cf 91       	pop	r28
    5526:	08 95       	ret

00005528 <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
    5528:	0e 94 4b 2a 	call	0x5496	; 0x5496 <_ZN9CMBSender14OnTransmitByteEv>
    552c:	08 95       	ret

0000552e <_ZN9CMBSender18WaitMODBUSListenerEv>:
    552e:	fc 01       	movw	r30, r24
    5530:	06 c0       	rjmp	.+12     	; 0x553e <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
    5532:	80 89       	ldd	r24, Z+16	; 0x10
    5534:	89 30       	cpi	r24, 0x09	; 9
    5536:	41 f0       	breq	.+16     	; 0x5548 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
    5538:	80 89       	ldd	r24, Z+16	; 0x10
    553a:	8a 30       	cpi	r24, 0x0A	; 10
    553c:	39 f0       	breq	.+14     	; 0x554c <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
    553e:	80 89       	ldd	r24, Z+16	; 0x10
    5540:	88 30       	cpi	r24, 0x08	; 8
    5542:	b9 f7       	brne	.-18     	; 0x5532 <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
    5544:	81 e0       	ldi	r24, 0x01	; 1
    5546:	08 95       	ret
    5548:	82 e0       	ldi	r24, 0x02	; 2
    554a:	08 95       	ret
    554c:	83 e0       	ldi	r24, 0x03	; 3
    554e:	08 95       	ret

00005550 <_ZN9CMBSender22StartMODBUSTransmitterEv>:
    5550:	cf 93       	push	r28
    5552:	df 93       	push	r29
    5554:	ec 01       	movw	r28, r24
    5556:	19 8e       	std	Y+25, r1	; 0x19
    5558:	18 8e       	std	Y+24, r1	; 0x18
    555a:	0e 94 4b 2a 	call	0x5496	; 0x5496 <_ZN9CMBSender14OnTransmitByteEv>
    555e:	8e 85       	ldd	r24, Y+14	; 0x0e
    5560:	9f 85       	ldd	r25, Y+15	; 0x0f
    5562:	dc 01       	movw	r26, r24
    5564:	ed 91       	ld	r30, X+
    5566:	fc 91       	ld	r31, X
    5568:	6a 89       	ldd	r22, Y+18	; 0x12
    556a:	7b 89       	ldd	r23, Y+19	; 0x13
    556c:	02 80       	ldd	r0, Z+2	; 0x02
    556e:	f3 81       	ldd	r31, Z+3	; 0x03
    5570:	e0 2d       	mov	r30, r0
    5572:	19 95       	eicall
    5574:	df 91       	pop	r29
    5576:	cf 91       	pop	r28
    5578:	08 95       	ret

0000557a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
    557a:	cf 93       	push	r28
    557c:	df 93       	push	r29
    557e:	ec 01       	movw	r28, r24
    5580:	e8 81       	ld	r30, Y
    5582:	f9 81       	ldd	r31, Y+1	; 0x01
    5584:	02 84       	ldd	r0, Z+10	; 0x0a
    5586:	f3 85       	ldd	r31, Z+11	; 0x0b
    5588:	e0 2d       	mov	r30, r0
    558a:	19 95       	eicall
    558c:	ce 01       	movw	r24, r28
    558e:	0e 94 a8 2a 	call	0x5550	; 0x5550 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    5592:	df 91       	pop	r29
    5594:	cf 91       	pop	r28
    5596:	08 95       	ret

00005598 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:
    5598:	cf 93       	push	r28
    559a:	df 93       	push	r29
    559c:	ec 01       	movw	r28, r24
    559e:	e8 81       	ld	r30, Y
    55a0:	f9 81       	ldd	r31, Y+1	; 0x01
    55a2:	06 84       	ldd	r0, Z+14	; 0x0e
    55a4:	f7 85       	ldd	r31, Z+15	; 0x0f
    55a6:	e0 2d       	mov	r30, r0
    55a8:	19 95       	eicall
    55aa:	ce 01       	movw	r24, r28
    55ac:	0e 94 a8 2a 	call	0x5550	; 0x5550 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    55b0:	df 91       	pop	r29
    55b2:	cf 91       	pop	r28
    55b4:	08 95       	ret

000055b6 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:
    55b6:	cf 93       	push	r28
    55b8:	df 93       	push	r29
    55ba:	ec 01       	movw	r28, r24
    55bc:	e8 81       	ld	r30, Y
    55be:	f9 81       	ldd	r31, Y+1	; 0x01
    55c0:	04 84       	ldd	r0, Z+12	; 0x0c
    55c2:	f5 85       	ldd	r31, Z+13	; 0x0d
    55c4:	e0 2d       	mov	r30, r0
    55c6:	19 95       	eicall
    55c8:	ce 01       	movw	r24, r28
    55ca:	0e 94 a8 2a 	call	0x5550	; 0x5550 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    55ce:	df 91       	pop	r29
    55d0:	cf 91       	pop	r28
    55d2:	08 95       	ret

000055d4 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:
    55d4:	cf 93       	push	r28
    55d6:	df 93       	push	r29
    55d8:	ec 01       	movw	r28, r24
    55da:	e8 81       	ld	r30, Y
    55dc:	f9 81       	ldd	r31, Y+1	; 0x01
    55de:	50 e0       	ldi	r21, 0x00	; 0
    55e0:	00 88       	ldd	r0, Z+16	; 0x10
    55e2:	f1 89       	ldd	r31, Z+17	; 0x11
    55e4:	e0 2d       	mov	r30, r0
    55e6:	19 95       	eicall
    55e8:	ce 01       	movw	r24, r28
    55ea:	0e 94 a8 2a 	call	0x5550	; 0x5550 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    55ee:	df 91       	pop	r29
    55f0:	cf 91       	pop	r28
    55f2:	08 95       	ret

000055f4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
    55f4:	fc 01       	movw	r30, r24
    55f6:	06 c0       	rjmp	.+12     	; 0x5604 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
    55f8:	80 8d       	ldd	r24, Z+24	; 0x18
    55fa:	84 30       	cpi	r24, 0x04	; 4
    55fc:	41 f0       	breq	.+16     	; 0x560e <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
    55fe:	80 8d       	ldd	r24, Z+24	; 0x18
    5600:	85 30       	cpi	r24, 0x05	; 5
    5602:	39 f0       	breq	.+14     	; 0x5612 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
    5604:	80 8d       	ldd	r24, Z+24	; 0x18
    5606:	83 30       	cpi	r24, 0x03	; 3
    5608:	b9 f7       	brne	.-18     	; 0x55f8 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
    560a:	81 e0       	ldi	r24, 0x01	; 1
    560c:	08 95       	ret
    560e:	82 e0       	ldi	r24, 0x02	; 2
    5610:	08 95       	ret
    5612:	83 e0       	ldi	r24, 0x03	; 3
    5614:	08 95       	ret

00005616 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTimeout();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    5616:	21 e0       	ldi	r18, 0x01	; 1
    5618:	fc 01       	movw	r30, r24
    561a:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromRegisterAsync(addr, length);
    561c:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    5620:	08 95       	ret

00005622 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    5622:	21 e0       	ldi	r18, 0x01	; 1
    5624:	fc 01       	movw	r30, r24
    5626:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromSRAMAsync(addr, length);
    5628:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    562c:	08 95       	ret

0000562e <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    562e:	0f 93       	push	r16
    5630:	1f 93       	push	r17
    5632:	cf 93       	push	r28
    5634:	df 93       	push	r29
    5636:	8c 01       	movw	r16, r24
    5638:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    563a:	98 81       	ld	r25, Y
    563c:	91 38       	cpi	r25, 0x81	; 129
    563e:	69 f4       	brne	.+26     	; 0x565a <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    5640:	d8 01       	movw	r26, r16
    5642:	ed 91       	ld	r30, X+
    5644:	fc 91       	ld	r31, X
    5646:	04 80       	ldd	r0, Z+4	; 0x04
    5648:	f5 81       	ldd	r31, Z+5	; 0x05
    564a:	e0 2d       	mov	r30, r0
    564c:	2a 81       	ldd	r18, Y+2	; 0x02
    564e:	ab 01       	movw	r20, r22
    5650:	4d 5f       	subi	r20, 0xFD	; 253
    5652:	5f 4f       	sbci	r21, 0xFF	; 255
    5654:	69 81       	ldd	r22, Y+1	; 0x01
    5656:	c8 01       	movw	r24, r16
    5658:	19 95       	eicall
	}
	if (data[0] == 0x83)
    565a:	98 81       	ld	r25, Y
    565c:	93 38       	cpi	r25, 0x83	; 131
    565e:	99 f4       	brne	.+38     	; 0x5686 <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], data[3]);
    5660:	d8 01       	movw	r26, r16
    5662:	ed 91       	ld	r30, X+
    5664:	fc 91       	ld	r31, X
    5666:	2b 81       	ldd	r18, Y+3	; 0x03
    5668:	30 e0       	ldi	r19, 0x00	; 0
    566a:	ae 01       	movw	r20, r28
    566c:	4c 5f       	subi	r20, 0xFC	; 252
    566e:	5f 4f       	sbci	r21, 0xFF	; 255
    5670:	69 81       	ldd	r22, Y+1	; 0x01
    5672:	70 e0       	ldi	r23, 0x00	; 0
    5674:	76 2f       	mov	r23, r22
    5676:	66 27       	eor	r22, r22
    5678:	8a 81       	ldd	r24, Y+2	; 0x02
    567a:	68 2b       	or	r22, r24
    567c:	02 80       	ldd	r0, Z+2	; 0x02
    567e:	f3 81       	ldd	r31, Z+3	; 0x03
    5680:	e0 2d       	mov	r30, r0
    5682:	c8 01       	movw	r24, r16
    5684:	19 95       	eicall
	}
}
    5686:	df 91       	pop	r29
    5688:	cf 91       	pop	r28
    568a:	1f 91       	pop	r17
    568c:	0f 91       	pop	r16
    568e:	08 95       	ret

00005690 <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    5690:	0e 94 17 2b 	call	0x562e	; 0x562e <_ZN9CMBSender18ProcessTransactionEPhj>
    5694:	08 95       	ret

00005696 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
    5696:	0f 93       	push	r16
	PORTD.DIRSET = PIN3_bm; // Set TX to output
    5698:	e0 e6       	ldi	r30, 0x60	; 96
    569a:	f6 e0       	ldi	r31, 0x06	; 6
    569c:	88 e0       	ldi	r24, 0x08	; 8
    569e:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; // Set RX to input
    56a0:	84 e0       	ldi	r24, 0x04	; 4
    56a2:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN2CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    56a4:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    56a6:	13 8a       	std	Z+19, r1	; 0x13
	
	// Turn on interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_LO_gc/* | USART_DREINTLVL_LO_gc*/;
    56a8:	e0 ea       	ldi	r30, 0xA0	; 160
    56aa:	f9 e0       	ldi	r31, 0x09	; 9
    56ac:	84 e1       	ldi	r24, 0x14	; 20
    56ae:	83 83       	std	Z+3, r24	; 0x03
	
	// Enable RX, TX
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    56b0:	88 e1       	ldi	r24, 0x18	; 24
    56b2:	84 83       	std	Z+4, r24	; 0x04
	
	// Double transmission speed
#ifdef U2X
	USARTD0.CTRLB |=  (1 << USART_CLK2X_bm);
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
    56b4:	84 81       	ldd	r24, Z+4	; 0x04
    56b6:	84 83       	std	Z+4, r24	; 0x04
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
    56b8:	41 30       	cpi	r20, 0x01	; 1
    56ba:	19 f0       	breq	.+6      	; 0x56c2 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x2c>
    56bc:	42 30       	cpi	r20, 0x02	; 2
    56be:	19 f0       	breq	.+6      	; 0x56c6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x30>
    56c0:	04 c0       	rjmp	.+8      	; 0x56ca <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
	{
		case PARITY_DISABLE:
			temp |= USART_PMODE_DISABLED_gc;
		break;
		case PARITY_EVEN:
			temp |= USART_PMODE_EVEN_gc;
    56c2:	80 e2       	ldi	r24, 0x20	; 32
    56c4:	03 c0       	rjmp	.+6      	; 0x56cc <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
		break;
		case PARITY_ODD:
			temp |= USART_PMODE_ODD_gc;
    56c6:	80 e3       	ldi	r24, 0x30	; 48
		break;
    56c8:	01 c0       	rjmp	.+2      	; 0x56cc <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
#endif

	// Parity param set
	uint8_t temp = 0;
    56ca:	80 e0       	ldi	r24, 0x00	; 0
			temp |= USART_PMODE_ODD_gc;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
    56cc:	22 23       	and	r18, r18
    56ce:	19 f0       	breq	.+6      	; 0x56d6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x40>
    56d0:	21 30       	cpi	r18, 0x01	; 1
    56d2:	19 f0       	breq	.+6      	; 0x56da <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x44>
    56d4:	03 c0       	rjmp	.+6      	; 0x56dc <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
	{
		case STOPBITS_1BIT:
			temp &= ~USART_SBMODE_bm;
    56d6:	87 7f       	andi	r24, 0xF7	; 247
		break;
    56d8:	01 c0       	rjmp	.+2      	; 0x56dc <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
		case STOPBITS_2BIT:
			temp |=  USART_SBMODE_bm;
    56da:	88 60       	ori	r24, 0x08	; 8
		break;
	}
	
	// USART mode asynchronous, 8bit
	USARTD0.CTRLC = (Async?USART_CMODE_ASYNCHRONOUS_gc:USART_CMODE_SYNCHRONOUS_gc) | USART_CHSIZE_8BIT_gc | temp;
    56dc:	01 11       	cpse	r16, r1
    56de:	02 c0       	rjmp	.+4      	; 0x56e4 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x4e>
    56e0:	93 e4       	ldi	r25, 0x43	; 67
    56e2:	01 c0       	rjmp	.+2      	; 0x56e6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x50>
    56e4:	93 e0       	ldi	r25, 0x03	; 3
    56e6:	89 2b       	or	r24, r25
    56e8:	e0 ea       	ldi	r30, 0xA0	; 160
    56ea:	f9 e0       	ldi	r31, 0x09	; 9
    56ec:	85 83       	std	Z+5, r24	; 0x05
	
	// Set baud rate
	USARTD0.BAUDCTRLA = bsel_table[baud];
    56ee:	70 e0       	ldi	r23, 0x00	; 0
    56f0:	db 01       	movw	r26, r22
    56f2:	ae 5d       	subi	r26, 0xDE	; 222
    56f4:	bd 4d       	sbci	r27, 0xDD	; 221
    56f6:	8c 91       	ld	r24, X
    56f8:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (((int8_t)(16 + bscale_table[baud])) << USART_BSCALE0_bp) | ((bsel_table[baud] >> 8) & 0x0F);	
    56fa:	db 01       	movw	r26, r22
    56fc:	ae 5f       	subi	r26, 0xFE	; 254
    56fe:	bd 4d       	sbci	r27, 0xDD	; 221
    5700:	8c 91       	ld	r24, X
    5702:	82 95       	swap	r24
    5704:	80 7f       	andi	r24, 0xF0	; 240
    5706:	87 83       	std	Z+7, r24	; 0x07
} //CUSART
    5708:	0f 91       	pop	r16
    570a:	08 95       	ret

0000570c <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return USARTD0.DATA;
    570c:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}
    5710:	08 95       	ret

00005712 <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( ( USARTD0.STATUS & (1<<USART_DREIF_bm)) );
	USARTD0.DATA = data;
    5712:	60 93 a0 09 	sts	0x09A0, r22	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    5716:	08 95       	ret

00005718 <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return !( USARTD0.STATUS & USART_TXCIF_bm);
    5718:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    571c:	86 fb       	bst	r24, 6
    571e:	88 27       	eor	r24, r24
    5720:	80 f9       	bld	r24, 0
}
    5722:	91 e0       	ldi	r25, 0x01	; 1
    5724:	89 27       	eor	r24, r25
    5726:	08 95       	ret

00005728 <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return !( USARTD0.STATUS & USART_RXCIF_bm);
    5728:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    572c:	80 95       	com	r24
}
    572e:	88 1f       	adc	r24, r24
    5730:	88 27       	eor	r24, r24
    5732:	88 1f       	adc	r24, r24
    5734:	08 95       	ret

00005736 <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return !( USARTD0.STATUS & USART_DREIF_bm);
    5736:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
    573a:	85 fb       	bst	r24, 5
    573c:	88 27       	eor	r24, r24
    573e:	80 f9       	bld	r24, 0
}
    5740:	91 e0       	ldi	r25, 0x01	; 1
    5742:	89 27       	eor	r24, r25
    5744:	08 95       	ret

00005746 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_RXC_vect_num] = sender;
    5746:	60 93 34 25 	sts	0x2534, r22	; 0x802534 <InterruptSenderTable+0xb0>
    574a:	70 93 35 25 	sts	0x2535, r23	; 0x802535 <InterruptSenderTable+0xb1>
	InterruptFuncTable[USARTD0_RXC_vect_num] = callback;
    574e:	40 93 3e 24 	sts	0x243E, r20	; 0x80243e <InterruptFuncTable+0xb0>
    5752:	50 93 3f 24 	sts	0x243F, r21	; 0x80243f <InterruptFuncTable+0xb1>
    5756:	08 95       	ret

00005758 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_TXC_vect_num] = sender;
    5758:	60 93 38 25 	sts	0x2538, r22	; 0x802538 <InterruptSenderTable+0xb4>
    575c:	70 93 39 25 	sts	0x2539, r23	; 0x802539 <InterruptSenderTable+0xb5>
	InterruptFuncTable[USARTD0_TXC_vect_num] = callback;
    5760:	40 93 42 24 	sts	0x2442, r20	; 0x802442 <InterruptFuncTable+0xb4>
    5764:	50 93 43 24 	sts	0x2443, r21	; 0x802443 <InterruptFuncTable+0xb5>
    5768:	08 95       	ret

0000576a <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMARxTrig(DMA_CH_t *dma_channel)
{
    576a:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_RXC_gc;
    576c:	8b e6       	ldi	r24, 0x6B	; 107
    576e:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->SRCADDR0 = (int)&USARTD0.DATA;
    5770:	80 ea       	ldi	r24, 0xA0	; 160
    5772:	80 87       	std	Z+8, r24	; 0x08
	dma_channel->SRCADDR1 = (int)&USARTD0.DATA >> 8;
    5774:	89 e0       	ldi	r24, 0x09	; 9
    5776:	81 87       	std	Z+9, r24	; 0x09
	dma_channel->SRCADDR2 = 0;
    5778:	12 86       	std	Z+10, r1	; 0x0a
    577a:	08 95       	ret

0000577c <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMATxTrig(DMA_CH_t *dma_channel)
{
    577c:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_DRE_gc;
    577e:	8c e6       	ldi	r24, 0x6C	; 108
    5780:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->DESTADDR0 = (int)&USARTD0.DATA;
    5782:	80 ea       	ldi	r24, 0xA0	; 160
    5784:	84 87       	std	Z+12, r24	; 0x0c
	dma_channel->DESTADDR1 = (int)&USARTD0.DATA >> 8;
    5786:	89 e0       	ldi	r24, 0x09	; 9
    5788:	85 87       	std	Z+13, r24	; 0x0d
	dma_channel->DESTADDR2 = 0;
    578a:	16 86       	std	Z+14, r1	; 0x0e
    578c:	08 95       	ret

0000578e <_ZN10CDGUSUSARTC1Ev>:
								true, true, true, true, true, true, true, true, true, true,
								true, true};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
    578e:	cf 93       	push	r28
    5790:	df 93       	push	r29
    5792:	ec 01       	movw	r28, r24
    5794:	0e 94 48 11 	call	0x2290	; 0x2290 <_ZN6CUSARTC1Ev>
    5798:	8c ec       	ldi	r24, 0xCC	; 204
    579a:	92 e2       	ldi	r25, 0x22	; 34
    579c:	88 83       	st	Y, r24
    579e:	99 83       	std	Y+1, r25	; 0x01
{
} //CDGUSUSART
    57a0:	df 91       	pop	r29
    57a2:	cf 91       	pop	r28
    57a4:	08 95       	ret

000057a6 <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
    57a6:	2c ec       	ldi	r18, 0xCC	; 204
    57a8:	32 e2       	ldi	r19, 0x22	; 34
    57aa:	fc 01       	movw	r30, r24
    57ac:	20 83       	st	Z, r18
    57ae:	31 83       	std	Z+1, r19	; 0x01
    57b0:	0e 94 4e 11 	call	0x229c	; 0x229c <_ZN6CUSARTD1Ev>
    57b4:	08 95       	ret

000057b6 <_Z18onewire_crc_updatehh>:

#define F_CPU	32000000

#include <util/delay.h>

uint8_t onewire_crc_update(uint8_t crc, uint8_t b) {
    57b6:	98 e0       	ldi	r25, 0x08	; 8
	for (uint8_t p = 8; p; p--) {
		crc = ((crc ^ b) & 1) ? (crc >> 1) ^ 0b10001100 : (crc >> 1);
    57b8:	3c e8       	ldi	r19, 0x8C	; 140
    57ba:	26 2f       	mov	r18, r22
    57bc:	28 27       	eor	r18, r24
    57be:	20 ff       	sbrs	r18, 0
    57c0:	03 c0       	rjmp	.+6      	; 0x57c8 <_Z18onewire_crc_updatehh+0x12>
    57c2:	86 95       	lsr	r24
    57c4:	83 27       	eor	r24, r19
    57c6:	01 c0       	rjmp	.+2      	; 0x57ca <_Z18onewire_crc_updatehh+0x14>
    57c8:	86 95       	lsr	r24
		b >>= 1;
    57ca:	66 95       	lsr	r22
    57cc:	91 50       	subi	r25, 0x01	; 1
#define F_CPU	32000000

#include <util/delay.h>

uint8_t onewire_crc_update(uint8_t crc, uint8_t b) {
	for (uint8_t p = 8; p; p--) {
    57ce:	a9 f7       	brne	.-22     	; 0x57ba <_Z18onewire_crc_updatehh+0x4>
		crc = ((crc ^ b) & 1) ? (crc >> 1) ^ 0b10001100 : (crc >> 1);
		b >>= 1;
	}
	return crc;
}
    57d0:	08 95       	ret

000057d2 <_ZN8CDS18B20C1Ev>:

// default constructor
CDS18B20::CDS18B20()
    57d2:	08 95       	ret

000057d4 <_ZN8CDS18B20D1Ev>:
{
} //CDS18B20

// default destructor
CDS18B20::~CDS18B20()
    57d4:	08 95       	ret

000057d6 <_ZN8CDS18B207w1_findEv>:
{
} //~CDS18B20

bool CDS18B20::w1_find()
{
	PORTD.DIRSET = PIN7_bm;	// pull down 1-wire bus
    57d6:	e0 e6       	ldi	r30, 0x60	; 96
    57d8:	f6 e0       	ldi	r31, 0x06	; 6
    57da:	80 e8       	ldi	r24, 0x80	; 128
    57dc:	81 83       	std	Z+1, r24	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    57de:	a7 e2       	ldi	r26, 0x27	; 39
    57e0:	bf e0       	ldi	r27, 0x0F	; 15
    57e2:	11 97       	sbiw	r26, 0x01	; 1
    57e4:	f1 f7       	brne	.-4      	; 0x57e2 <_ZN8CDS18B207w1_findEv+0xc>
    57e6:	00 c0       	rjmp	.+0      	; 0x57e8 <_ZN8CDS18B207w1_findEv+0x12>
    57e8:	00 00       	nop
	_delay_us(485);			// wait for 480 us
	PORTD.DIRCLR = PIN7_bm; // 1-wire bus pull up
    57ea:	82 83       	std	Z+2, r24	; 0x02
    57ec:	87 e0       	ldi	r24, 0x07	; 7
    57ee:	92 e0       	ldi	r25, 0x02	; 2
    57f0:	01 97       	sbiw	r24, 0x01	; 1
    57f2:	f1 f7       	brne	.-4      	; 0x57f0 <_ZN8CDS18B207w1_findEv+0x1a>
    57f4:	00 c0       	rjmp	.+0      	; 0x57f6 <_ZN8CDS18B207w1_findEv+0x20>
    57f6:	00 00       	nop
	_delay_us(65);			// wait for 65 us
	
	bool result;
	if((PORTD.IN & PIN7_bm) == 0x00)
    57f8:	80 85       	ldd	r24, Z+8	; 0x08
    57fa:	af e1       	ldi	r26, 0x1F	; 31
    57fc:	bd e0       	ldi	r27, 0x0D	; 13
    57fe:	11 97       	sbiw	r26, 0x01	; 1
    5800:	f1 f7       	brne	.-4      	; 0x57fe <_ZN8CDS18B207w1_findEv+0x28>
    5802:	00 c0       	rjmp	.+0      	; 0x5804 <_ZN8CDS18B207w1_findEv+0x2e>
    5804:	00 00       	nop
    5806:	80 95       	com	r24
	else
		result = false;
		
	_delay_us(420);			// wait 480 us
	return result;
}
    5808:	88 1f       	adc	r24, r24
    580a:	88 27       	eor	r24, r24
    580c:	88 1f       	adc	r24, r24
    580e:	08 95       	ret

00005810 <_ZN8CDS18B2010w1_sendcmdEh>:

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
    5810:	cf 93       	push	r28
    5812:	df 93       	push	r29
    5814:	80 e0       	ldi	r24, 0x00	; 0
    5816:	90 e0       	ldi	r25, 0x00	; 0
	for(unsigned char i = 0; i < 8; i++)
	{
		if((cmd & (1<<i)) == 1<<i)
    5818:	c1 e0       	ldi	r28, 0x01	; 1
    581a:	d0 e0       	ldi	r29, 0x00	; 0
    581c:	70 e0       	ldi	r23, 0x00	; 0
			_delay_us(65);
		}
		else
		{
			
			PORTD.DIRSET = PIN7_bm;
    581e:	e0 e6       	ldi	r30, 0x60	; 96
    5820:	f6 e0       	ldi	r31, 0x06	; 6
    5822:	40 e8       	ldi	r20, 0x80	; 128

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
	for(unsigned char i = 0; i < 8; i++)
	{
		if((cmd & (1<<i)) == 1<<i)
    5824:	9e 01       	movw	r18, r28
    5826:	08 2e       	mov	r0, r24
    5828:	02 c0       	rjmp	.+4      	; 0x582e <_ZN8CDS18B2010w1_sendcmdEh+0x1e>
    582a:	22 0f       	add	r18, r18
    582c:	33 1f       	adc	r19, r19
    582e:	0a 94       	dec	r0
    5830:	e2 f7       	brpl	.-8      	; 0x582a <_ZN8CDS18B2010w1_sendcmdEh+0x1a>
    5832:	d9 01       	movw	r26, r18
    5834:	a6 23       	and	r26, r22
    5836:	b7 23       	and	r27, r23
    5838:	2a 17       	cp	r18, r26
    583a:	3b 07       	cpc	r19, r27
    583c:	69 f4       	brne	.+26     	; 0x5858 <_ZN8CDS18B2010w1_sendcmdEh+0x48>
		{
			PORTD.DIRSET = PIN7_bm;
    583e:	41 83       	std	Z+1, r20	; 0x01
    5840:	25 e1       	ldi	r18, 0x15	; 21
    5842:	2a 95       	dec	r18
    5844:	f1 f7       	brne	.-4      	; 0x5842 <_ZN8CDS18B2010w1_sendcmdEh+0x32>
    5846:	00 00       	nop
			_delay_us(2);
			PORTD.DIRCLR = PIN7_bm;
    5848:	42 83       	std	Z+2, r20	; 0x02
    584a:	a7 e0       	ldi	r26, 0x07	; 7
    584c:	b2 e0       	ldi	r27, 0x02	; 2
    584e:	11 97       	sbiw	r26, 0x01	; 1
    5850:	f1 f7       	brne	.-4      	; 0x584e <_ZN8CDS18B2010w1_sendcmdEh+0x3e>
    5852:	00 c0       	rjmp	.+0      	; 0x5854 <_ZN8CDS18B2010w1_sendcmdEh+0x44>
    5854:	00 00       	nop
    5856:	0c c0       	rjmp	.+24     	; 0x5870 <_ZN8CDS18B2010w1_sendcmdEh+0x60>
			_delay_us(65);
		}
		else
		{
			
			PORTD.DIRSET = PIN7_bm;
    5858:	41 83       	std	Z+1, r20	; 0x01
    585a:	a7 e0       	ldi	r26, 0x07	; 7
    585c:	b2 e0       	ldi	r27, 0x02	; 2
    585e:	11 97       	sbiw	r26, 0x01	; 1
    5860:	f1 f7       	brne	.-4      	; 0x585e <_ZN8CDS18B2010w1_sendcmdEh+0x4e>
    5862:	00 c0       	rjmp	.+0      	; 0x5864 <_ZN8CDS18B2010w1_sendcmdEh+0x54>
    5864:	00 00       	nop
			_delay_us(65);
			PORTD.DIRCLR = PIN7_bm;
    5866:	42 83       	std	Z+2, r20	; 0x02
    5868:	b5 e3       	ldi	r27, 0x35	; 53
    586a:	ba 95       	dec	r27
    586c:	f1 f7       	brne	.-4      	; 0x586a <_ZN8CDS18B2010w1_sendcmdEh+0x5a>
    586e:	00 00       	nop
    5870:	01 96       	adiw	r24, 0x01	; 1
	return result;
}

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
	for(unsigned char i = 0; i < 8; i++)
    5872:	88 30       	cpi	r24, 0x08	; 8
    5874:	91 05       	cpc	r25, r1
    5876:	b1 f6       	brne	.-84     	; 0x5824 <_ZN8CDS18B2010w1_sendcmdEh+0x14>
			_delay_us(65);
			PORTD.DIRCLR = PIN7_bm;
			_delay_us(5);
		}
	}
}
    5878:	df 91       	pop	r29
    587a:	cf 91       	pop	r28
    587c:	08 95       	ret

0000587e <_ZN8CDS18B2015w1_receive_byteEv>:

unsigned char CDS18B20::w1_receive_byte()
{
    587e:	20 e0       	ldi	r18, 0x00	; 0
    5880:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char data=0;
    5882:	80 e0       	ldi	r24, 0x00	; 0
	for(unsigned char i = 0; i < 8; i++)
	{
		PORTD.DIRSET = PIN7_bm;
    5884:	e0 e6       	ldi	r30, 0x60	; 96
    5886:	f6 e0       	ldi	r31, 0x06	; 6
    5888:	90 e8       	ldi	r25, 0x80	; 128
		PORTD.DIRCLR = PIN7_bm;
		_delay_us(10);
		if((PORTD.IN & PIN7_bm) == 0x00)
			data &= ~(1<<i);
		else
			data |= 1<<i;
    588a:	61 e0       	ldi	r22, 0x01	; 1
    588c:	70 e0       	ldi	r23, 0x00	; 0
unsigned char CDS18B20::w1_receive_byte()
{
	unsigned char data=0;
	for(unsigned char i = 0; i < 8; i++)
	{
		PORTD.DIRSET = PIN7_bm;
    588e:	91 83       	std	Z+1, r25	; 0x01
    5890:	45 e1       	ldi	r20, 0x15	; 21
    5892:	4a 95       	dec	r20
    5894:	f1 f7       	brne	.-4      	; 0x5892 <_ZN8CDS18B2015w1_receive_byteEv+0x14>
    5896:	00 00       	nop
		_delay_us(2);
		PORTD.DIRCLR = PIN7_bm;
    5898:	92 83       	std	Z+2, r25	; 0x02
    589a:	aa e6       	ldi	r26, 0x6A	; 106
    589c:	aa 95       	dec	r26
    589e:	f1 f7       	brne	.-4      	; 0x589c <_ZN8CDS18B2015w1_receive_byteEv+0x1e>
    58a0:	00 c0       	rjmp	.+0      	; 0x58a2 <_ZN8CDS18B2015w1_receive_byteEv+0x24>
		_delay_us(10);
		if((PORTD.IN & PIN7_bm) == 0x00)
    58a2:	40 85       	ldd	r20, Z+8	; 0x08
    58a4:	44 23       	and	r20, r20
    58a6:	54 f0       	brlt	.+20     	; 0x58bc <_ZN8CDS18B2015w1_receive_byteEv+0x3e>
			data &= ~(1<<i);
    58a8:	ab 01       	movw	r20, r22
    58aa:	02 2e       	mov	r0, r18
    58ac:	02 c0       	rjmp	.+4      	; 0x58b2 <_ZN8CDS18B2015w1_receive_byteEv+0x34>
    58ae:	44 0f       	add	r20, r20
    58b0:	55 1f       	adc	r21, r21
    58b2:	0a 94       	dec	r0
    58b4:	e2 f7       	brpl	.-8      	; 0x58ae <_ZN8CDS18B2015w1_receive_byteEv+0x30>
    58b6:	40 95       	com	r20
    58b8:	84 23       	and	r24, r20
    58ba:	08 c0       	rjmp	.+16     	; 0x58cc <_ZN8CDS18B2015w1_receive_byteEv+0x4e>
		else
			data |= 1<<i;
    58bc:	ab 01       	movw	r20, r22
    58be:	02 2e       	mov	r0, r18
    58c0:	02 c0       	rjmp	.+4      	; 0x58c6 <_ZN8CDS18B2015w1_receive_byteEv+0x48>
    58c2:	44 0f       	add	r20, r20
    58c4:	55 1f       	adc	r21, r21
    58c6:	0a 94       	dec	r0
    58c8:	e2 f7       	brpl	.-8      	; 0x58c2 <_ZN8CDS18B2015w1_receive_byteEv+0x44>
    58ca:	84 2b       	or	r24, r20
    58cc:	af e8       	ldi	r26, 0x8F	; 143
    58ce:	b1 e0       	ldi	r27, 0x01	; 1
    58d0:	11 97       	sbiw	r26, 0x01	; 1
    58d2:	f1 f7       	brne	.-4      	; 0x58d0 <_ZN8CDS18B2015w1_receive_byteEv+0x52>
    58d4:	00 c0       	rjmp	.+0      	; 0x58d6 <_ZN8CDS18B2015w1_receive_byteEv+0x58>
    58d6:	00 00       	nop
    58d8:	2f 5f       	subi	r18, 0xFF	; 255
    58da:	3f 4f       	sbci	r19, 0xFF	; 255
}

unsigned char CDS18B20::w1_receive_byte()
{
	unsigned char data=0;
	for(unsigned char i = 0; i < 8; i++)
    58dc:	28 30       	cpi	r18, 0x08	; 8
    58de:	31 05       	cpc	r19, r1
    58e0:	b1 f6       	brne	.-84     	; 0x588e <_ZN8CDS18B2015w1_receive_byteEv+0x10>
		else
			data |= 1<<i;
		_delay_us(50);
	}
	return data;
}
    58e2:	08 95       	ret

000058e4 <_ZN8CDS18B2010temp_18b20Ev>:

int CDS18B20::temp_18b20()
{
    58e4:	af 92       	push	r10
    58e6:	bf 92       	push	r11
    58e8:	df 92       	push	r13
    58ea:	ef 92       	push	r14
    58ec:	ff 92       	push	r15
    58ee:	0f 93       	push	r16
    58f0:	1f 93       	push	r17
    58f2:	cf 93       	push	r28
    58f4:	df 93       	push	r29
    58f6:	cd b7       	in	r28, 0x3d	; 61
    58f8:	de b7       	in	r29, 0x3e	; 62
    58fa:	29 97       	sbiw	r28, 0x09	; 9
    58fc:	cd bf       	out	0x3d, r28	; 61
    58fe:	de bf       	out	0x3e, r29	; 62
    5900:	8c 01       	movw	r16, r24
	unsigned char data[9];
	int temp = 0;
	
	if (req)
    5902:	fc 01       	movw	r30, r24
    5904:	82 81       	ldd	r24, Z+2	; 0x02
    5906:	88 23       	and	r24, r24
    5908:	a1 f0       	breq	.+40     	; 0x5932 <_ZN8CDS18B2010temp_18b20Ev+0x4e>
	{
		if(w1_find())
    590a:	c8 01       	movw	r24, r16
    590c:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <_ZN8CDS18B207w1_findEv>
    5910:	88 23       	and	r24, r24
    5912:	61 f0       	breq	.+24     	; 0x592c <_ZN8CDS18B2010temp_18b20Ev+0x48>
		{
			w1_sendcmd(0xcc);	//skip ROM
    5914:	6c ec       	ldi	r22, 0xCC	; 204
    5916:	c8 01       	movw	r24, r16
    5918:	0e 94 08 2c 	call	0x5810	; 0x5810 <_ZN8CDS18B2010w1_sendcmdEh>
			w1_sendcmd(0x44);	//start conversion
    591c:	64 e4       	ldi	r22, 0x44	; 68
    591e:	c8 01       	movw	r24, r16
    5920:	0e 94 08 2c 	call	0x5810	; 0x5810 <_ZN8CDS18B2010w1_sendcmdEh>
			find = true;
    5924:	81 e0       	ldi	r24, 0x01	; 1
    5926:	f8 01       	movw	r30, r16
    5928:	83 83       	std	Z+3, r24	; 0x03
    592a:	3f c0       	rjmp	.+126    	; 0x59aa <_ZN8CDS18B2010temp_18b20Ev+0xc6>
		}
		else
			find = false;
    592c:	f8 01       	movw	r30, r16
    592e:	13 82       	std	Z+3, r1	; 0x03
    5930:	3c c0       	rjmp	.+120    	; 0x59aa <_ZN8CDS18B2010temp_18b20Ev+0xc6>
	}
	else
	{
		if (find)
    5932:	f8 01       	movw	r30, r16
    5934:	83 81       	ldd	r24, Z+3	; 0x03
    5936:	88 23       	and	r24, r24
    5938:	c1 f1       	breq	.+112    	; 0x59aa <_ZN8CDS18B2010temp_18b20Ev+0xc6>
		{
			w1_find();
    593a:	c8 01       	movw	r24, r16
    593c:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <_ZN8CDS18B207w1_findEv>
			w1_sendcmd(0xcc);
    5940:	6c ec       	ldi	r22, 0xCC	; 204
    5942:	c8 01       	movw	r24, r16
    5944:	0e 94 08 2c 	call	0x5810	; 0x5810 <_ZN8CDS18B2010w1_sendcmdEh>
			w1_sendcmd(0xbe);	//read temperature
    5948:	6e eb       	ldi	r22, 0xBE	; 190
    594a:	c8 01       	movw	r24, r16
    594c:	0e 94 08 2c 	call	0x5810	; 0x5810 <_ZN8CDS18B2010w1_sendcmdEh>
    5950:	ce 01       	movw	r24, r28
    5952:	01 96       	adiw	r24, 0x01	; 1
    5954:	7c 01       	movw	r14, r24
    5956:	5e 01       	movw	r10, r28
    5958:	9a e0       	ldi	r25, 0x0A	; 10
    595a:	a9 0e       	add	r10, r25
    595c:	b1 1c       	adc	r11, r1
			/*data[0] = w1_receive_byte();
			data[1] = w1_receive_byte();*/
			uint8_t crc = 0;
    595e:	d1 2c       	mov	r13, r1
			for (int i = 0; i < 9; i++)
			{
				data[i] = w1_receive_byte();
    5960:	c8 01       	movw	r24, r16
    5962:	0e 94 3f 2c 	call	0x587e	; 0x587e <_ZN8CDS18B2015w1_receive_byteEv>
    5966:	68 2f       	mov	r22, r24
    5968:	f7 01       	movw	r30, r14
    596a:	81 93       	st	Z+, r24
    596c:	7f 01       	movw	r14, r30
				crc = onewire_crc_update(crc, data[i]);
    596e:	8d 2d       	mov	r24, r13
    5970:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <_Z18onewire_crc_updatehh>
    5974:	d8 2e       	mov	r13, r24
			w1_sendcmd(0xcc);
			w1_sendcmd(0xbe);	//read temperature
			/*data[0] = w1_receive_byte();
			data[1] = w1_receive_byte();*/
			uint8_t crc = 0;
			for (int i = 0; i < 9; i++)
    5976:	ea 14       	cp	r14, r10
    5978:	fb 04       	cpc	r15, r11
    597a:	91 f7       	brne	.-28     	; 0x5960 <_ZN8CDS18B2010temp_18b20Ev+0x7c>
			{
				data[i] = w1_receive_byte();
				crc = onewire_crc_update(crc, data[i]);
			}
			
			temp = data[1];
    597c:	8a 81       	ldd	r24, Y+2	; 0x02
			temp = temp<<8;
			temp |= data[0];
    597e:	69 81       	ldd	r22, Y+1	; 0x01
			
			temp *= 0.625;
			
			if (crc == 0)
    5980:	d1 10       	cpse	r13, r1
    5982:	13 c0       	rjmp	.+38     	; 0x59aa <_ZN8CDS18B2010temp_18b20Ev+0xc6>
				data[i] = w1_receive_byte();
				crc = onewire_crc_update(crc, data[i]);
			}
			
			temp = data[1];
			temp = temp<<8;
    5984:	70 e0       	ldi	r23, 0x00	; 0
			temp |= data[0];
    5986:	78 2b       	or	r23, r24
			
			temp *= 0.625;
    5988:	07 2e       	mov	r0, r23
    598a:	00 0c       	add	r0, r0
    598c:	88 0b       	sbc	r24, r24
    598e:	99 0b       	sbc	r25, r25
    5990:	0e 94 93 32 	call	0x6526	; 0x6526 <__floatsisf>
    5994:	20 e0       	ldi	r18, 0x00	; 0
    5996:	30 e0       	ldi	r19, 0x00	; 0
    5998:	40 e2       	ldi	r20, 0x20	; 32
    599a:	5f e3       	ldi	r21, 0x3F	; 63
    599c:	0e 94 f7 32 	call	0x65ee	; 0x65ee <__mulsf3>
    59a0:	0e 94 5b 32 	call	0x64b6	; 0x64b6 <__fixsfsi>
    59a4:	f8 01       	movw	r30, r16
    59a6:	60 83       	st	Z, r22
    59a8:	71 83       	std	Z+1, r23	; 0x01
			if (crc == 0)
				temperature = temp;
		}
	}
	
	req = !req;
    59aa:	f8 01       	movw	r30, r16
    59ac:	92 81       	ldd	r25, Z+2	; 0x02
    59ae:	81 e0       	ldi	r24, 0x01	; 1
    59b0:	89 27       	eor	r24, r25
    59b2:	82 83       	std	Z+2, r24	; 0x02
	
	return temperature;
}
    59b4:	80 81       	ld	r24, Z
    59b6:	91 81       	ldd	r25, Z+1	; 0x01
    59b8:	29 96       	adiw	r28, 0x09	; 9
    59ba:	cd bf       	out	0x3d, r28	; 61
    59bc:	de bf       	out	0x3e, r29	; 62
    59be:	df 91       	pop	r29
    59c0:	cf 91       	pop	r28
    59c2:	1f 91       	pop	r17
    59c4:	0f 91       	pop	r16
    59c6:	ff 90       	pop	r15
    59c8:	ef 90       	pop	r14
    59ca:	df 90       	pop	r13
    59cc:	bf 90       	pop	r11
    59ce:	af 90       	pop	r10
    59d0:	08 95       	ret

000059d2 <_ZN8CDS18B2010InitializeEv>:

void CDS18B20::Initialize()
{
    59d2:	fc 01       	movw	r30, r24
	PORTD.OUTCLR = PIN7_bm;
    59d4:	a0 e6       	ldi	r26, 0x60	; 96
    59d6:	b6 e0       	ldi	r27, 0x06	; 6
    59d8:	80 e8       	ldi	r24, 0x80	; 128
    59da:	16 96       	adiw	r26, 0x06	; 6
    59dc:	8c 93       	st	X, r24
    59de:	16 97       	sbiw	r26, 0x06	; 6
	PORTD.PIN7CTRL = PORT_OPC_TOTEM_gc;// | PORT_SRLEN_bm;
    59e0:	57 96       	adiw	r26, 0x17	; 23
    59e2:	1c 92       	st	X, r1
	
	temperature = 0;
    59e4:	10 82       	st	Z, r1
    59e6:	11 82       	std	Z+1, r1	; 0x01
	find = false;
    59e8:	13 82       	std	Z+3, r1	; 0x03
	req = true;
    59ea:	81 e0       	ldi	r24, 0x01	; 1
    59ec:	82 83       	std	Z+2, r24	; 0x02
    59ee:	08 95       	ret

000059f0 <_ZN11CLaserBoardC1Ev>:
	PORTD.DIRCLR = PIN4_bm;
}

void CLaserBoard::Relay1Off()
{
	PORTD.DIRSET = PIN0_bm;
    59f0:	08 95       	ret

000059f2 <_ZN11CLaserBoardD1Ev>:
    59f2:	08 95       	ret

000059f4 <_ZN11CLaserBoard12InitializeIOEv>:
    59f4:	cf 93       	push	r28
    59f6:	df 93       	push	r29
    59f8:	ec 01       	movw	r28, r24
    59fa:	e0 e4       	ldi	r30, 0x40	; 64
    59fc:	f6 e0       	ldi	r31, 0x06	; 6
    59fe:	11 82       	std	Z+1, r1	; 0x01
    5a00:	98 ea       	ldi	r25, 0xA8	; 168
    5a02:	90 8b       	std	Z+16, r25	; 0x10
    5a04:	91 8b       	std	Z+17, r25	; 0x11
    5a06:	92 8b       	std	Z+18, r25	; 0x12
    5a08:	93 8b       	std	Z+19, r25	; 0x13
    5a0a:	94 8b       	std	Z+20, r25	; 0x14
    5a0c:	95 8b       	std	Z+21, r25	; 0x15
    5a0e:	96 8b       	std	Z+22, r25	; 0x16
    5a10:	97 8b       	std	Z+23, r25	; 0x17
    5a12:	8f ef       	ldi	r24, 0xFF	; 255
    5a14:	84 83       	std	Z+4, r24	; 0x04
    5a16:	a0 e8       	ldi	r26, 0x80	; 128
    5a18:	b6 e0       	ldi	r27, 0x06	; 6
    5a1a:	98 e0       	ldi	r25, 0x08	; 8
    5a1c:	11 96       	adiw	r26, 0x01	; 1
    5a1e:	9c 93       	st	X, r25
    5a20:	11 97       	sbiw	r26, 0x01	; 1
    5a22:	53 96       	adiw	r26, 0x13	; 19
    5a24:	1c 92       	st	X, r1
    5a26:	53 97       	sbiw	r26, 0x13	; 19
    5a28:	14 96       	adiw	r26, 0x04	; 4
    5a2a:	1c 92       	st	X, r1
    5a2c:	14 97       	sbiw	r26, 0x04	; 4
    5a2e:	e0 ea       	ldi	r30, 0xA0	; 160
    5a30:	f6 e0       	ldi	r31, 0x06	; 6
    5a32:	90 ec       	ldi	r25, 0xC0	; 192
    5a34:	90 8b       	std	Z+16, r25	; 0x10
    5a36:	20 e8       	ldi	r18, 0x80	; 128
    5a38:	21 8b       	std	Z+17, r18	; 0x11
    5a3a:	22 8b       	std	Z+18, r18	; 0x12
    5a3c:	23 8b       	std	Z+19, r18	; 0x13
    5a3e:	94 8b       	std	Z+20, r25	; 0x14
    5a40:	95 8b       	std	Z+21, r25	; 0x15
    5a42:	96 8b       	std	Z+22, r25	; 0x16
    5a44:	97 8b       	std	Z+23, r25	; 0x17
    5a46:	14 82       	std	Z+4, r1	; 0x04
    5a48:	81 83       	std	Z+1, r24	; 0x01
    5a4a:	e0 e6       	ldi	r30, 0x60	; 96
    5a4c:	f6 e0       	ldi	r31, 0x06	; 6
    5a4e:	81 e1       	ldi	r24, 0x11	; 17
    5a50:	81 83       	std	Z+1, r24	; 0x01
    5a52:	90 8b       	std	Z+16, r25	; 0x10
    5a54:	94 8b       	std	Z+20, r25	; 0x14
    5a56:	15 8a       	std	Z+21, r1	; 0x15
    5a58:	14 82       	std	Z+4, r1	; 0x04
    5a5a:	87 e0       	ldi	r24, 0x07	; 7
    5a5c:	11 96       	adiw	r26, 0x01	; 1
    5a5e:	8c 93       	st	X, r24
    5a60:	11 97       	sbiw	r26, 0x01	; 1
    5a62:	50 96       	adiw	r26, 0x10	; 16
    5a64:	2c 93       	st	X, r18
    5a66:	50 97       	sbiw	r26, 0x10	; 16
    5a68:	51 96       	adiw	r26, 0x11	; 17
    5a6a:	2c 93       	st	X, r18
    5a6c:	51 97       	sbiw	r26, 0x11	; 17
    5a6e:	52 96       	adiw	r26, 0x12	; 18
    5a70:	2c 93       	st	X, r18
    5a72:	52 97       	sbiw	r26, 0x12	; 18
    5a74:	14 96       	adiw	r26, 0x04	; 4
    5a76:	1c 92       	st	X, r1
    5a78:	e0 ea       	ldi	r30, 0xA0	; 160
    5a7a:	f0 e0       	ldi	r31, 0x00	; 0
    5a7c:	82 81       	ldd	r24, Z+2	; 0x02
    5a7e:	81 60       	ori	r24, 0x01	; 1
    5a80:	82 83       	std	Z+2, r24	; 0x02
    5a82:	82 81       	ldd	r24, Z+2	; 0x02
    5a84:	82 60       	ori	r24, 0x02	; 2
    5a86:	82 83       	std	Z+2, r24	; 0x02
    5a88:	82 81       	ldd	r24, Z+2	; 0x02
    5a8a:	84 60       	ori	r24, 0x04	; 4
    5a8c:	82 83       	std	Z+2, r24	; 0x02
    5a8e:	fe 01       	movw	r30, r28
    5a90:	9e 01       	movw	r18, r28
    5a92:	28 5f       	subi	r18, 0xF8	; 248
    5a94:	3f 4f       	sbci	r19, 0xFF	; 255
    5a96:	91 e0       	ldi	r25, 0x01	; 1
    5a98:	91 93       	st	Z+, r25
    5a9a:	e2 17       	cp	r30, r18
    5a9c:	f3 07       	cpc	r31, r19
    5a9e:	e1 f7       	brne	.-8      	; 0x5a98 <_ZN11CLaserBoard12InitializeIOEv+0xa4>
    5aa0:	83 e0       	ldi	r24, 0x03	; 3
    5aa2:	88 87       	std	Y+8, r24	; 0x08
    5aa4:	e0 e4       	ldi	r30, 0x40	; 64
    5aa6:	f6 e0       	ldi	r31, 0x06	; 6
    5aa8:	81 e0       	ldi	r24, 0x01	; 1
    5aaa:	82 87       	std	Z+10, r24	; 0x0a
    5aac:	81 87       	std	Z+9, r24	; 0x09
    5aae:	df 91       	pop	r29
    5ab0:	cf 91       	pop	r28
    5ab2:	08 95       	ret

00005ab4 <_ZN11CLaserBoard15InitializeClockEv>:
    5ab4:	e0 e5       	ldi	r30, 0x50	; 80
    5ab6:	f0 e0       	ldi	r31, 0x00	; 0
    5ab8:	8b ec       	ldi	r24, 0xCB	; 203
    5aba:	82 83       	std	Z+2, r24	; 0x02
    5abc:	80 81       	ld	r24, Z
    5abe:	88 60       	ori	r24, 0x08	; 8
    5ac0:	80 83       	st	Z, r24
    5ac2:	81 81       	ldd	r24, Z+1	; 0x01
    5ac4:	83 ff       	sbrs	r24, 3
    5ac6:	fd cf       	rjmp	.-6      	; 0x5ac2 <_ZN11CLaserBoard15InitializeClockEv+0xe>
    5ac8:	e0 e5       	ldi	r30, 0x50	; 80
    5aca:	f0 e0       	ldi	r31, 0x00	; 0
    5acc:	85 81       	ldd	r24, Z+5	; 0x05
    5ace:	98 ed       	ldi	r25, 0xD8	; 216
    5ad0:	94 bf       	out	0x34, r25	; 52
    5ad2:	84 ec       	ldi	r24, 0xC4	; 196
    5ad4:	85 83       	std	Z+5, r24	; 0x05
    5ad6:	80 81       	ld	r24, Z
    5ad8:	80 61       	ori	r24, 0x10	; 16
    5ada:	80 83       	st	Z, r24
    5adc:	e0 e4       	ldi	r30, 0x40	; 64
    5ade:	f0 e0       	ldi	r31, 0x00	; 0
    5ae0:	81 81       	ldd	r24, Z+1	; 0x01
    5ae2:	94 bf       	out	0x34, r25	; 52
    5ae4:	11 82       	std	Z+1, r1	; 0x01
    5ae6:	e0 e5       	ldi	r30, 0x50	; 80
    5ae8:	f0 e0       	ldi	r31, 0x00	; 0
    5aea:	81 81       	ldd	r24, Z+1	; 0x01
    5aec:	84 ff       	sbrs	r24, 4
    5aee:	fd cf       	rjmp	.-6      	; 0x5aea <_ZN11CLaserBoard15InitializeClockEv+0x36>
    5af0:	e0 e4       	ldi	r30, 0x40	; 64
    5af2:	f0 e0       	ldi	r31, 0x00	; 0
    5af4:	80 81       	ld	r24, Z
    5af6:	88 7f       	andi	r24, 0xF8	; 248
    5af8:	84 60       	ori	r24, 0x04	; 4
    5afa:	98 ed       	ldi	r25, 0xD8	; 216
    5afc:	94 bf       	out	0x34, r25	; 52
    5afe:	80 83       	st	Z, r24
    5b00:	a0 e5       	ldi	r26, 0x50	; 80
    5b02:	b0 e0       	ldi	r27, 0x00	; 0
    5b04:	8c 91       	ld	r24, X
    5b06:	88 7f       	andi	r24, 0xF8	; 248
    5b08:	8c 93       	st	X, r24
    5b0a:	82 81       	ldd	r24, Z+2	; 0x02
    5b0c:	94 bf       	out	0x34, r25	; 52
    5b0e:	81 e0       	ldi	r24, 0x01	; 1
    5b10:	82 83       	std	Z+2, r24	; 0x02
    5b12:	e0 eb       	ldi	r30, 0xB0	; 176
    5b14:	f0 e0       	ldi	r31, 0x00	; 0
    5b16:	84 81       	ldd	r24, Z+4	; 0x04
    5b18:	8c 7f       	andi	r24, 0xFC	; 252
    5b1a:	84 83       	std	Z+4, r24	; 0x04
    5b1c:	08 95       	ret

00005b1e <_ZN11CLaserBoard5PWMOnEv>:
    5b1e:	84 e0       	ldi	r24, 0x04	; 4
    5b20:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    5b24:	08 95       	ret

00005b26 <_ZN11CLaserBoard6PWMOffEv>:
    5b26:	84 e0       	ldi	r24, 0x04	; 4
    5b28:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    5b2c:	08 95       	ret

00005b2e <_ZN11CLaserBoard5REDOnEv>:
    5b2e:	82 e0       	ldi	r24, 0x02	; 2
    5b30:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
    5b34:	08 95       	ret

00005b36 <_ZN11CLaserBoard5GRNOnEv>:
    5b36:	84 e0       	ldi	r24, 0x04	; 4
    5b38:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
    5b3c:	08 95       	ret

00005b3e <_ZN11CLaserBoard5BLUOnEv>:
    5b3e:	88 e0       	ldi	r24, 0x08	; 8
    5b40:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
    5b44:	08 95       	ret

00005b46 <_ZN11CLaserBoard8Relay1OnEv>:
    5b46:	81 e0       	ldi	r24, 0x01	; 1
    5b48:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
    5b4c:	08 95       	ret

00005b4e <_ZN11CLaserBoard8Relay2OnEv>:
    5b4e:	80 e1       	ldi	r24, 0x10	; 16
    5b50:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
    5b54:	08 95       	ret

00005b56 <_ZN11CLaserBoard9Relay2OffEv>:
}

void CLaserBoard::Relay2Off()
{
	PORTD.DIRSET = PIN4_bm;
    5b56:	80 e1       	ldi	r24, 0x10	; 16
    5b58:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
    5b5c:	08 95       	ret

00005b5e <_ZN11CLaserBoard12LaserPowerOnEv>:
}

void CLaserBoard::LaserPowerOn()
{
	PORTE.OUTSET = PIN1_bm;
    5b5e:	82 e0       	ldi	r24, 0x02	; 2
    5b60:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    5b64:	08 95       	ret

00005b66 <_ZN11CLaserBoard13LaserPowerOffEv>:
}

void CLaserBoard::LaserPowerOff()
{
	PORTE.OUTCLR = PIN1_bm;
    5b66:	82 e0       	ldi	r24, 0x02	; 2
    5b68:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    5b6c:	08 95       	ret

00005b6e <_ZN11CLaserBoard4BeepEv>:
}

void CLaserBoard::Beep()
{
	cli();
    5b6e:	f8 94       	cli
    5b70:	84 e6       	ldi	r24, 0x64	; 100
    5b72:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 100; i++)
	{
		PORTE.OUTSET = PIN3_bm;
    5b74:	e0 e8       	ldi	r30, 0x80	; 128
    5b76:	f6 e0       	ldi	r31, 0x06	; 6
    5b78:	28 e0       	ldi	r18, 0x08	; 8
    5b7a:	25 83       	std	Z+5, r18	; 0x05
    5b7c:	af e9       	ldi	r26, 0x9F	; 159
    5b7e:	bf e0       	ldi	r27, 0x0F	; 15
    5b80:	11 97       	sbiw	r26, 0x01	; 1
    5b82:	f1 f7       	brne	.-4      	; 0x5b80 <_ZN11CLaserBoard4BeepEv+0x12>
    5b84:	00 c0       	rjmp	.+0      	; 0x5b86 <_ZN11CLaserBoard4BeepEv+0x18>
    5b86:	00 00       	nop
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
    5b88:	26 83       	std	Z+6, r18	; 0x06
    5b8a:	af e9       	ldi	r26, 0x9F	; 159
    5b8c:	bf e0       	ldi	r27, 0x0F	; 15
    5b8e:	11 97       	sbiw	r26, 0x01	; 1
    5b90:	f1 f7       	brne	.-4      	; 0x5b8e <_ZN11CLaserBoard4BeepEv+0x20>
    5b92:	00 c0       	rjmp	.+0      	; 0x5b94 <_ZN11CLaserBoard4BeepEv+0x26>
    5b94:	00 00       	nop
    5b96:	01 97       	sbiw	r24, 0x01	; 1

void CLaserBoard::Beep()
{
	cli();
	
	for (int i = 0; i < 100; i++)
    5b98:	81 f7       	brne	.-32     	; 0x5b7a <_ZN11CLaserBoard4BeepEv+0xc>
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
		_delay_us(500);
	}
	
	sei();
    5b9a:	78 94       	sei
    5b9c:	08 95       	ret

00005b9e <_ZN11CLaserBoard14BeepClassErrorEv>:
}

void CLaserBoard::BeepClassError()
{
	cli();
    5b9e:	f8 94       	cli
    5ba0:	45 e0       	ldi	r20, 0x05	; 5
    5ba2:	50 e0       	ldi	r21, 0x00	; 0
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    5ba4:	64 e6       	ldi	r22, 0x64	; 100
    5ba6:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
		{
			PORTE.OUTSET = PIN3_bm;
    5ba8:	e0 e8       	ldi	r30, 0x80	; 128
    5baa:	f6 e0       	ldi	r31, 0x06	; 6
    5bac:	28 e0       	ldi	r18, 0x08	; 8
    5bae:	1c c0       	rjmp	.+56     	; 0x5be8 <_ZN11CLaserBoard14BeepClassErrorEv+0x4a>
    5bb0:	25 83       	std	Z+5, r18	; 0x05
    5bb2:	af e9       	ldi	r26, 0x9F	; 159
    5bb4:	bf e0       	ldi	r27, 0x0F	; 15
    5bb6:	11 97       	sbiw	r26, 0x01	; 1
    5bb8:	f1 f7       	brne	.-4      	; 0x5bb6 <_ZN11CLaserBoard14BeepClassErrorEv+0x18>
    5bba:	00 c0       	rjmp	.+0      	; 0x5bbc <_ZN11CLaserBoard14BeepClassErrorEv+0x1e>
    5bbc:	00 00       	nop
			_delay_us(500);
			PORTE.OUTCLR = PIN3_bm;
    5bbe:	26 83       	std	Z+6, r18	; 0x06
    5bc0:	af e9       	ldi	r26, 0x9F	; 159
    5bc2:	bf e0       	ldi	r27, 0x0F	; 15
    5bc4:	11 97       	sbiw	r26, 0x01	; 1
    5bc6:	f1 f7       	brne	.-4      	; 0x5bc4 <_ZN11CLaserBoard14BeepClassErrorEv+0x26>
    5bc8:	00 c0       	rjmp	.+0      	; 0x5bca <_ZN11CLaserBoard14BeepClassErrorEv+0x2c>
    5bca:	00 00       	nop
    5bcc:	01 97       	sbiw	r24, 0x01	; 1
{
	cli();
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
    5bce:	81 f7       	brne	.-32     	; 0x5bb0 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5bd0:	bf ef       	ldi	r27, 0xFF	; 255
    5bd2:	73 ec       	ldi	r23, 0xC3	; 195
    5bd4:	89 e0       	ldi	r24, 0x09	; 9
    5bd6:	b1 50       	subi	r27, 0x01	; 1
    5bd8:	70 40       	sbci	r23, 0x00	; 0
    5bda:	80 40       	sbci	r24, 0x00	; 0
    5bdc:	e1 f7       	brne	.-8      	; 0x5bd6 <_ZN11CLaserBoard14BeepClassErrorEv+0x38>
    5bde:	00 c0       	rjmp	.+0      	; 0x5be0 <_ZN11CLaserBoard14BeepClassErrorEv+0x42>
    5be0:	00 00       	nop
    5be2:	41 50       	subi	r20, 0x01	; 1
    5be4:	51 09       	sbc	r21, r1

void CLaserBoard::BeepClassError()
{
	cli();
	
	for (int j = 0; j < 5; j++)
    5be6:	19 f0       	breq	.+6      	; 0x5bee <_ZN11CLaserBoard14BeepClassErrorEv+0x50>
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    5be8:	86 2f       	mov	r24, r22
    5bea:	93 2f       	mov	r25, r19
    5bec:	e1 cf       	rjmp	.-62     	; 0x5bb0 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
			_delay_us(500);
		}
		_delay_ms(100);
	}
	
	sei();
    5bee:	78 94       	sei
    5bf0:	08 95       	ret

00005bf2 <_ZN11CLaserBoard9PortCheckEv>:
		else
			Port &= ~bitpos;
		
		bitpos <<= 1;
	}*/
	Port = PORTC.IN;
    5bf2:	20 91 48 06 	lds	r18, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    5bf6:	fc 01       	movw	r30, r24
    5bf8:	21 87       	std	Z+9, r18	; 0x09
    5bfa:	08 95       	ret

00005bfc <_ZN11CLaserBoard10FootswitchEv>:
}

bool CLaserBoard::Footswitch()
{
	return Port & 0x01;
    5bfc:	fc 01       	movw	r30, r24
    5bfe:	81 85       	ldd	r24, Z+9	; 0x09
    5c00:	81 70       	andi	r24, 0x01	; 1
    5c02:	08 95       	ret

00005c04 <_ZN12CSoundPlayerC1Ev>:
//This function generates the square wave that makes the piezo speaker sound at a determinated frequency.
void CSoundPlayer::beep(uint16_t note, uint16_t duration)
{
	SoundStart(note, duration, 3);
	SoundStop();
}
    5c04:	08 95       	ret

00005c06 <_ZN12CSoundPlayerD1Ev>:
    5c06:	08 95       	ret

00005c08 <_ZN12CSoundPlayer19InitializeToneTimerEv>:
    5c08:	e0 e0       	ldi	r30, 0x00	; 0
    5c0a:	fa e0       	ldi	r31, 0x0A	; 10
    5c0c:	10 82       	st	Z, r1
    5c0e:	87 e8       	ldi	r24, 0x87	; 135
    5c10:	81 83       	std	Z+1, r24	; 0x01
    5c12:	13 82       	std	Z+3, r1	; 0x03
    5c14:	84 e2       	ldi	r24, 0x24	; 36
    5c16:	94 ef       	ldi	r25, 0xF4	; 244
    5c18:	86 a3       	std	Z+38, r24	; 0x26
    5c1a:	97 a3       	std	Z+39, r25	; 0x27
    5c1c:	82 e1       	ldi	r24, 0x12	; 18
    5c1e:	9a e7       	ldi	r25, 0x7A	; 122
    5c20:	86 a7       	std	Z+46, r24	; 0x2e
    5c22:	97 a7       	std	Z+47, r25	; 0x2f
    5c24:	16 82       	std	Z+6, r1	; 0x06
    5c26:	17 82       	std	Z+7, r1	; 0x07
    5c28:	08 95       	ret

00005c2a <_ZN12CSoundPlayer23InitializeDurationTimerEv>:
    5c2a:	e0 e4       	ldi	r30, 0x40	; 64
    5c2c:	fa e0       	ldi	r31, 0x0A	; 10
    5c2e:	10 82       	st	Z, r1
    5c30:	11 82       	std	Z+1, r1	; 0x01
    5c32:	13 82       	std	Z+3, r1	; 0x03
    5c34:	84 e2       	ldi	r24, 0x24	; 36
    5c36:	94 ef       	ldi	r25, 0xF4	; 244
    5c38:	86 a3       	std	Z+38, r24	; 0x26
    5c3a:	97 a3       	std	Z+39, r25	; 0x27
    5c3c:	16 82       	std	Z+6, r1	; 0x06
    5c3e:	17 82       	std	Z+7, r1	; 0x07
    5c40:	08 95       	ret

00005c42 <_ZN12CSoundPlayer10SoundStartEjjh>:
    5c42:	0f 93       	push	r16
    5c44:	1f 93       	push	r17
    5c46:	cf 93       	push	r28
    5c48:	8a 01       	movw	r16, r20
    5c4a:	c2 2f       	mov	r28, r18
    5c4c:	9b 01       	movw	r18, r22
    5c4e:	40 e0       	ldi	r20, 0x00	; 0
    5c50:	50 e0       	ldi	r21, 0x00	; 0
    5c52:	64 e2       	ldi	r22, 0x24	; 36
    5c54:	74 ef       	ldi	r23, 0xF4	; 244
    5c56:	80 e0       	ldi	r24, 0x00	; 0
    5c58:	90 e0       	ldi	r25, 0x00	; 0
    5c5a:	0e 94 e6 33 	call	0x67cc	; 0x67cc <__divmodsi4>
    5c5e:	b8 01       	movw	r22, r16
    5c60:	76 95       	lsr	r23
    5c62:	67 95       	ror	r22
    5c64:	ee e3       	ldi	r30, 0x3E	; 62
    5c66:	e0 9f       	mul	r30, r16
    5c68:	c0 01       	movw	r24, r0
    5c6a:	e1 9f       	mul	r30, r17
    5c6c:	90 0d       	add	r25, r0
    5c6e:	11 24       	eor	r1, r1
    5c70:	86 0f       	add	r24, r22
    5c72:	97 1f       	adc	r25, r23
    5c74:	cf 5f       	subi	r28, 0xFF	; 255
    5c76:	b9 01       	movw	r22, r18
    5c78:	02 c0       	rjmp	.+4      	; 0x5c7e <_ZN12CSoundPlayer10SoundStartEjjh+0x3c>
    5c7a:	76 95       	lsr	r23
    5c7c:	67 95       	ror	r22
    5c7e:	ca 95       	dec	r28
    5c80:	e2 f7       	brpl	.-8      	; 0x5c7a <_ZN12CSoundPlayer10SoundStartEjjh+0x38>
    5c82:	e0 e0       	ldi	r30, 0x00	; 0
    5c84:	fa e0       	ldi	r31, 0x0A	; 10
    5c86:	66 a7       	std	Z+46, r22	; 0x2e
    5c88:	77 a7       	std	Z+47, r23	; 0x2f
    5c8a:	26 a3       	std	Z+38, r18	; 0x26
    5c8c:	37 a3       	std	Z+39, r19	; 0x27
    5c8e:	a0 e4       	ldi	r26, 0x40	; 64
    5c90:	ba e0       	ldi	r27, 0x0A	; 10
    5c92:	96 96       	adiw	r26, 0x26	; 38
    5c94:	8d 93       	st	X+, r24
    5c96:	9c 93       	st	X, r25
    5c98:	97 97       	sbiw	r26, 0x27	; 39
    5c9a:	86 e0       	ldi	r24, 0x06	; 6
    5c9c:	80 83       	st	Z, r24
    5c9e:	87 e0       	ldi	r24, 0x07	; 7
    5ca0:	8c 93       	st	X, r24
    5ca2:	cf 91       	pop	r28
    5ca4:	1f 91       	pop	r17
    5ca6:	0f 91       	pop	r16
    5ca8:	08 95       	ret

00005caa <_ZN12CSoundPlayer9SoundStopEv>:
    5caa:	e0 e4       	ldi	r30, 0x40	; 64
    5cac:	fa e0       	ldi	r31, 0x0A	; 10
    5cae:	84 85       	ldd	r24, Z+12	; 0x0c
    5cb0:	80 ff       	sbrs	r24, 0
    5cb2:	fd cf       	rjmp	.-6      	; 0x5cae <_ZN12CSoundPlayer9SoundStopEv+0x4>
    5cb4:	e0 e4       	ldi	r30, 0x40	; 64
    5cb6:	fa e0       	ldi	r31, 0x0A	; 10
    5cb8:	84 85       	ldd	r24, Z+12	; 0x0c
    5cba:	81 70       	andi	r24, 0x01	; 1
    5cbc:	84 87       	std	Z+12, r24	; 0x0c
    5cbe:	a0 e0       	ldi	r26, 0x00	; 0
    5cc0:	ba e0       	ldi	r27, 0x0A	; 10
    5cc2:	1c 92       	st	X, r1
    5cc4:	10 82       	st	Z, r1
    5cc6:	10 a2       	std	Z+32, r1	; 0x20
    5cc8:	11 a2       	std	Z+33, r1	; 0x21
    5cca:	90 96       	adiw	r26, 0x20	; 32
    5ccc:	1d 92       	st	X+, r1
    5cce:	1c 92       	st	X, r1
    5cd0:	91 97       	sbiw	r26, 0x21	; 33
    5cd2:	2f ef       	ldi	r18, 0xFF	; 255
    5cd4:	83 ef       	ldi	r24, 0xF3	; 243
    5cd6:	91 e0       	ldi	r25, 0x01	; 1
    5cd8:	21 50       	subi	r18, 0x01	; 1
    5cda:	80 40       	sbci	r24, 0x00	; 0
    5cdc:	90 40       	sbci	r25, 0x00	; 0
    5cde:	e1 f7       	brne	.-8      	; 0x5cd8 <_ZN12CSoundPlayer9SoundStopEv+0x2e>
    5ce0:	00 c0       	rjmp	.+0      	; 0x5ce2 <_ZN12CSoundPlayer9SoundStopEv+0x38>
    5ce2:	00 00       	nop
    5ce4:	08 95       	ret

00005ce6 <_ZN12CSoundPlayer10InitializeEv>:

	_delay_ms(20);
} 

void CSoundPlayer::Initialize()
{
    5ce6:	cf 93       	push	r28
    5ce8:	df 93       	push	r29
    5cea:	ec 01       	movw	r28, r24
	InitializeToneTimer();
    5cec:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <_ZN12CSoundPlayer19InitializeToneTimerEv>
	InitializeDurationTimer();
    5cf0:	ce 01       	movw	r24, r28
    5cf2:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <_ZN12CSoundPlayer23InitializeDurationTimerEv>
}
    5cf6:	df 91       	pop	r29
    5cf8:	cf 91       	pop	r28
    5cfa:	08 95       	ret

00005cfc <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerC::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    5cfc:	fc 01       	movw	r30, r24
    5cfe:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5d00:	e0 e0       	ldi	r30, 0x00	; 0
    5d02:	f8 e0       	ldi	r31, 0x08	; 8
    5d04:	80 81       	ld	r24, Z
    5d06:	80 7f       	andi	r24, 0xF0	; 240
    5d08:	80 83       	st	Z, r24
	
	// No events
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5d0a:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC0.CNT = 0;
    5d0c:	10 a2       	std	Z+32, r1	; 0x20
    5d0e:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CCA = 0;
    5d10:	10 a6       	std	Z+40, r1	; 0x28
    5d12:	11 a6       	std	Z+41, r1	; 0x29
	TCC0.CCB = 0;
    5d14:	12 a6       	std	Z+42, r1	; 0x2a
    5d16:	13 a6       	std	Z+43, r1	; 0x2b
	TCC0.CCC = 0;
    5d18:	14 a6       	std	Z+44, r1	; 0x2c
    5d1a:	15 a6       	std	Z+45, r1	; 0x2d
	TCC0.CCD = 0;
    5d1c:	16 a6       	std	Z+46, r1	; 0x2e
    5d1e:	17 a6       	std	Z+47, r1	; 0x2f
	TCC0.PER = 0;
    5d20:	16 a2       	std	Z+38, r1	; 0x26
    5d22:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    5d24:	81 81       	ldd	r24, Z+1	; 0x01
    5d26:	88 7f       	andi	r24, 0xF8	; 248
    5d28:	68 2b       	or	r22, r24
    5d2a:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC0.CTRLA = (TCC0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    5d2c:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    5d2e:	17 82       	std	Z+7, r1	; 0x07
    5d30:	08 95       	ret

00005d32 <_ZN7CTimerC5StartEj>:
}

void CTimerC::Start(uint16_t period)
{
	// Set period of timer
	TCC0.PER = period;
    5d32:	e0 e0       	ldi	r30, 0x00	; 0
    5d34:	f8 e0       	ldi	r31, 0x08	; 8
    5d36:	66 a3       	std	Z+38, r22	; 0x26
    5d38:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    5d3a:	20 81       	ld	r18, Z
    5d3c:	20 7f       	andi	r18, 0xF0	; 240
    5d3e:	dc 01       	movw	r26, r24
    5d40:	12 96       	adiw	r26, 0x02	; 2
    5d42:	9c 91       	ld	r25, X
    5d44:	82 2f       	mov	r24, r18
    5d46:	89 2b       	or	r24, r25
    5d48:	80 83       	st	Z, r24
    5d4a:	08 95       	ret

00005d4c <_ZN7CTimerC4StopEv>:
}

void CTimerC::Stop()
{
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5d4c:	e0 e0       	ldi	r30, 0x00	; 0
    5d4e:	f8 e0       	ldi	r31, 0x08	; 8
    5d50:	80 81       	ld	r24, Z
    5d52:	80 7f       	andi	r24, 0xF0	; 240
    5d54:	80 83       	st	Z, r24
	TCC0.CNT = 0;
    5d56:	10 a2       	std	Z+32, r1	; 0x20
    5d58:	11 a2       	std	Z+33, r1	; 0x21
    5d5a:	08 95       	ret

00005d5c <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::EnableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB = (TCC0.CTRLB & ~0xF0) | channels;
    5d5c:	e0 e0       	ldi	r30, 0x00	; 0
    5d5e:	f8 e0       	ldi	r31, 0x08	; 8
    5d60:	81 81       	ldd	r24, Z+1	; 0x01
    5d62:	8f 70       	andi	r24, 0x0F	; 15
    5d64:	68 2b       	or	r22, r24
    5d66:	61 83       	std	Z+1, r22	; 0x01
    5d68:	08 95       	ret

00005d6a <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::DisableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB &= ~channels;
    5d6a:	e0 e0       	ldi	r30, 0x00	; 0
    5d6c:	f8 e0       	ldi	r31, 0x08	; 8
    5d6e:	81 81       	ldd	r24, Z+1	; 0x01
    5d70:	60 95       	com	r22
    5d72:	68 23       	and	r22, r24
    5d74:	61 83       	std	Z+1, r22	; 0x01
    5d76:	08 95       	ret

00005d78 <_ZN7CTimerC9SetPeriodEj>:
}

void CTimerC::SetPeriod(uint16_t value)
{
	TCC0.PER = value;
    5d78:	60 93 26 08 	sts	0x0826, r22	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
    5d7c:	70 93 27 08 	sts	0x0827, r23	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
    5d80:	08 95       	ret

00005d82 <_ZN7CTimerC8SetCOMPAEj>:
}

void CTimerC::SetCOMPA(uint16_t value)
{
	TCC0.CCA = value;
    5d82:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    5d86:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    5d8a:	08 95       	ret

00005d8c <_ZN7CTimerC8SetCOMPBEj>:
}

void CTimerC::SetCOMPB(uint16_t value)
{
	TCC0.CCB = value;
    5d8c:	60 93 2a 08 	sts	0x082A, r22	; 0x80082a <__TEXT_REGION_LENGTH__+0x70082a>
    5d90:	70 93 2b 08 	sts	0x082B, r23	; 0x80082b <__TEXT_REGION_LENGTH__+0x70082b>
    5d94:	08 95       	ret

00005d96 <_ZN7CTimerC8SetCOMPCEj>:
}

void CTimerC::SetCOMPC(uint16_t value)
{
	TCC0.CCC = value;
    5d96:	60 93 2c 08 	sts	0x082C, r22	; 0x80082c <__TEXT_REGION_LENGTH__+0x70082c>
    5d9a:	70 93 2d 08 	sts	0x082D, r23	; 0x80082d <__TEXT_REGION_LENGTH__+0x70082d>
    5d9e:	08 95       	ret

00005da0 <_ZN7CTimerC8SetCOMPDEj>:
}

void CTimerC::SetCOMPD(uint16_t value)
{
	TCC0.CCD = value;
    5da0:	60 93 2e 08 	sts	0x082E, r22	; 0x80082e <__TEXT_REGION_LENGTH__+0x70082e>
    5da4:	70 93 2f 08 	sts	0x082F, r23	; 0x80082f <__TEXT_REGION_LENGTH__+0x70082f>
    5da8:	08 95       	ret

00005daa <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    5daa:	61 15       	cp	r22, r1
    5dac:	71 05       	cpc	r23, r1
    5dae:	29 f0       	breq	.+10     	; 0x5dba <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCC0.INTCTRLA |= intlvl;// = (TCC0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    5db0:	e0 e0       	ldi	r30, 0x00	; 0
    5db2:	f8 e0       	ldi	r31, 0x08	; 8
    5db4:	86 81       	ldd	r24, Z+6	; 0x06
    5db6:	28 2b       	or	r18, r24
    5db8:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCC0_OVF_vect_num] = func;
    5dba:	60 93 aa 23 	sts	0x23AA, r22	; 0x8023aa <InterruptFuncTable+0x1c>
    5dbe:	70 93 ab 23 	sts	0x23AB, r23	; 0x8023ab <InterruptFuncTable+0x1d>
	InterruptSenderTable[TCC0_OVF_vect_num] = owner;
    5dc2:	40 93 a0 24 	sts	0x24A0, r20	; 0x8024a0 <InterruptSenderTable+0x1c>
    5dc6:	50 93 a1 24 	sts	0x24A1, r21	; 0x8024a1 <InterruptSenderTable+0x1d>
    5dca:	08 95       	ret

00005dcc <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    5dcc:	61 15       	cp	r22, r1
    5dce:	71 05       	cpc	r23, r1
    5dd0:	29 f0       	breq	.+10     	; 0x5ddc <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCC0.INTCTRLA |= intlvl;// = (TCC0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    5dd2:	e0 e0       	ldi	r30, 0x00	; 0
    5dd4:	f8 e0       	ldi	r31, 0x08	; 8
    5dd6:	86 81       	ldd	r24, Z+6	; 0x06
    5dd8:	28 2b       	or	r18, r24
    5dda:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC0_ERR_vect_num] = func;
    5ddc:	60 93 ac 23 	sts	0x23AC, r22	; 0x8023ac <InterruptFuncTable+0x1e>
    5de0:	70 93 ad 23 	sts	0x23AD, r23	; 0x8023ad <InterruptFuncTable+0x1f>
	InterruptSenderTable[TCC0_ERR_vect_num] = owner;
    5de4:	40 93 a2 24 	sts	0x24A2, r20	; 0x8024a2 <InterruptSenderTable+0x1e>
    5de8:	50 93 a3 24 	sts	0x24A3, r21	; 0x8024a3 <InterruptSenderTable+0x1f>
    5dec:	08 95       	ret

00005dee <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    5dee:	61 15       	cp	r22, r1
    5df0:	71 05       	cpc	r23, r1
    5df2:	29 f0       	breq	.+10     	; 0x5dfe <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    5df4:	e0 e0       	ldi	r30, 0x00	; 0
    5df6:	f8 e0       	ldi	r31, 0x08	; 8
    5df8:	87 81       	ldd	r24, Z+7	; 0x07
    5dfa:	28 2b       	or	r18, r24
    5dfc:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCA_vect_num] = func;
    5dfe:	60 93 ae 23 	sts	0x23AE, r22	; 0x8023ae <InterruptFuncTable+0x20>
    5e02:	70 93 af 23 	sts	0x23AF, r23	; 0x8023af <InterruptFuncTable+0x21>
	InterruptSenderTable[TCC0_CCA_vect_num] = owner;
    5e06:	40 93 a4 24 	sts	0x24A4, r20	; 0x8024a4 <InterruptSenderTable+0x20>
    5e0a:	50 93 a5 24 	sts	0x24A5, r21	; 0x8024a5 <InterruptSenderTable+0x21>
    5e0e:	08 95       	ret

00005e10 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    5e10:	61 15       	cp	r22, r1
    5e12:	71 05       	cpc	r23, r1
    5e14:	29 f0       	breq	.+10     	; 0x5e20 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    5e16:	e0 e0       	ldi	r30, 0x00	; 0
    5e18:	f8 e0       	ldi	r31, 0x08	; 8
    5e1a:	87 81       	ldd	r24, Z+7	; 0x07
    5e1c:	28 2b       	or	r18, r24
    5e1e:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCB_vect_num] = func;
    5e20:	60 93 b0 23 	sts	0x23B0, r22	; 0x8023b0 <InterruptFuncTable+0x22>
    5e24:	70 93 b1 23 	sts	0x23B1, r23	; 0x8023b1 <InterruptFuncTable+0x23>
	InterruptSenderTable[TCC0_CCB_vect_num] = owner;
    5e28:	40 93 a6 24 	sts	0x24A6, r20	; 0x8024a6 <InterruptSenderTable+0x22>
    5e2c:	50 93 a7 24 	sts	0x24A7, r21	; 0x8024a7 <InterruptSenderTable+0x23>
    5e30:	08 95       	ret

00005e32 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerC::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    5e32:	61 15       	cp	r22, r1
    5e34:	71 05       	cpc	r23, r1
    5e36:	29 f0       	breq	.+10     	; 0x5e42 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    5e38:	e0 e0       	ldi	r30, 0x00	; 0
    5e3a:	f8 e0       	ldi	r31, 0x08	; 8
    5e3c:	87 81       	ldd	r24, Z+7	; 0x07
    5e3e:	28 2b       	or	r18, r24
    5e40:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCC_vect_num] = func;
    5e42:	60 93 b2 23 	sts	0x23B2, r22	; 0x8023b2 <InterruptFuncTable+0x24>
    5e46:	70 93 b3 23 	sts	0x23B3, r23	; 0x8023b3 <InterruptFuncTable+0x25>
	InterruptSenderTable[TCC0_CCC_vect_num] = owner;
    5e4a:	40 93 a8 24 	sts	0x24A8, r20	; 0x8024a8 <InterruptSenderTable+0x24>
    5e4e:	50 93 a9 24 	sts	0x24A9, r21	; 0x8024a9 <InterruptSenderTable+0x25>
    5e52:	08 95       	ret

00005e54 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerC::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    5e54:	61 15       	cp	r22, r1
    5e56:	71 05       	cpc	r23, r1
    5e58:	29 f0       	breq	.+10     	; 0x5e64 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCC0.INTCTRLB |= intlvl;// = (TCC0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    5e5a:	e0 e0       	ldi	r30, 0x00	; 0
    5e5c:	f8 e0       	ldi	r31, 0x08	; 8
    5e5e:	87 81       	ldd	r24, Z+7	; 0x07
    5e60:	28 2b       	or	r18, r24
    5e62:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCD_vect_num] = func;
    5e64:	60 93 b4 23 	sts	0x23B4, r22	; 0x8023b4 <InterruptFuncTable+0x26>
    5e68:	70 93 b5 23 	sts	0x23B5, r23	; 0x8023b5 <InterruptFuncTable+0x27>
	InterruptSenderTable[TCC0_CCD_vect_num] = owner;
    5e6c:	40 93 aa 24 	sts	0x24AA, r20	; 0x8024aa <InterruptSenderTable+0x26>
    5e70:	50 93 ab 24 	sts	0x24AB, r21	; 0x8024ab <InterruptSenderTable+0x27>
    5e74:	08 95       	ret

00005e76 <_ZN7CTimerCC1Ev>:

#include "CTimerC.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC::CTimerC()
    5e76:	cf 93       	push	r28
    5e78:	df 93       	push	r29
    5e7a:	ec 01       	movw	r28, r24
    5e7c:	0e 94 3a 11 	call	0x2274	; 0x2274 <_ZN6CTimerC1Ev>
    5e80:	84 ee       	ldi	r24, 0xE4	; 228
    5e82:	92 e2       	ldi	r25, 0x22	; 34
    5e84:	88 83       	st	Y, r24
    5e86:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    5e88:	df 91       	pop	r29
    5e8a:	cf 91       	pop	r28
    5e8c:	08 95       	ret

00005e8e <_ZN7CTimerCD1Ev>:

// default destructor
CTimerC::~CTimerC()
    5e8e:	24 ee       	ldi	r18, 0xE4	; 228
    5e90:	32 e2       	ldi	r19, 0x22	; 34
    5e92:	fc 01       	movw	r30, r24
    5e94:	20 83       	st	Z, r18
    5e96:	31 83       	std	Z+1, r19	; 0x01
    5e98:	0e 94 40 11 	call	0x2280	; 0x2280 <_ZN6CTimerD1Ev>
    5e9c:	08 95       	ret

00005e9e <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC1

// Basic timer functions
void CTimerC1::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    5e9e:	fc 01       	movw	r30, r24
    5ea0:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5ea2:	e0 e4       	ldi	r30, 0x40	; 64
    5ea4:	f8 e0       	ldi	r31, 0x08	; 8
    5ea6:	80 81       	ld	r24, Z
    5ea8:	80 7f       	andi	r24, 0xF0	; 240
    5eaa:	80 83       	st	Z, r24
	
	// No events
	TCC1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5eac:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC1.CNT = 0;
    5eae:	10 a2       	std	Z+32, r1	; 0x20
    5eb0:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.CCA = 0;
    5eb2:	10 a6       	std	Z+40, r1	; 0x28
    5eb4:	11 a6       	std	Z+41, r1	; 0x29
	TCC1.CCB = 0;
    5eb6:	12 a6       	std	Z+42, r1	; 0x2a
    5eb8:	13 a6       	std	Z+43, r1	; 0x2b
	TCC1.PER = 0;
    5eba:	16 a2       	std	Z+38, r1	; 0x26
    5ebc:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC1.CTRLB = (TCC1.CTRLB & ~TC1_WGMODE_gm) | wgm;
    5ebe:	81 81       	ldd	r24, Z+1	; 0x01
    5ec0:	88 7f       	andi	r24, 0xF8	; 248
    5ec2:	68 2b       	or	r22, r24
    5ec4:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC1.CTRLA = (TCC1.CTRLA & TC1_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    5ec6:	16 82       	std	Z+6, r1	; 0x06
	TCC1.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    5ec8:	17 82       	std	Z+7, r1	; 0x07
    5eca:	08 95       	ret

00005ecc <_ZN8CTimerC15StartEj>:
}

void CTimerC1::Start(uint16_t period)
{
	// Set period of timer
	TCC1.PER = period;
    5ecc:	e0 e4       	ldi	r30, 0x40	; 64
    5ece:	f8 e0       	ldi	r31, 0x08	; 8
    5ed0:	66 a3       	std	Z+38, r22	; 0x26
    5ed2:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | clockSrc;
    5ed4:	20 81       	ld	r18, Z
    5ed6:	20 7f       	andi	r18, 0xF0	; 240
    5ed8:	dc 01       	movw	r26, r24
    5eda:	12 96       	adiw	r26, 0x02	; 2
    5edc:	9c 91       	ld	r25, X
    5ede:	82 2f       	mov	r24, r18
    5ee0:	89 2b       	or	r24, r25
    5ee2:	80 83       	st	Z, r24
    5ee4:	08 95       	ret

00005ee6 <_ZN8CTimerC14StopEv>:
}

void CTimerC1::Stop()
{
	// Stop timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5ee6:	e0 e4       	ldi	r30, 0x40	; 64
    5ee8:	f8 e0       	ldi	r31, 0x08	; 8
    5eea:	80 81       	ld	r24, Z
    5eec:	80 7f       	andi	r24, 0xF0	; 240
    5eee:	80 83       	st	Z, r24
	TCC1.CNT = 0;
    5ef0:	10 a2       	std	Z+32, r1	; 0x20
    5ef2:	11 a2       	std	Z+33, r1	; 0x21
    5ef4:	08 95       	ret

00005ef6 <_ZN8CTimerC15ResetEv>:
}

void CTimerC1::Reset()
{
	// Stop timer
	uint16_t tmp = TCC1.CTRLA;
    5ef6:	e0 e4       	ldi	r30, 0x40	; 64
    5ef8:	f8 e0       	ldi	r31, 0x08	; 8
    5efa:	90 81       	ld	r25, Z
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5efc:	80 81       	ld	r24, Z
    5efe:	80 7f       	andi	r24, 0xF0	; 240
    5f00:	80 83       	st	Z, r24
	TCC1.CNT = 0;
    5f02:	10 a2       	std	Z+32, r1	; 0x20
    5f04:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.CTRLA = tmp;
    5f06:	90 83       	st	Z, r25
    5f08:	08 95       	ret

00005f0a <_ZN8CTimerC113EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC1::EnableChannel(TIMER_CHANNELS channels)
{
	TCC1.CTRLB = (TCC1.CTRLB & ~0xF0) | channels;
    5f0a:	e0 e4       	ldi	r30, 0x40	; 64
    5f0c:	f8 e0       	ldi	r31, 0x08	; 8
    5f0e:	81 81       	ldd	r24, Z+1	; 0x01
    5f10:	8f 70       	andi	r24, 0x0F	; 15
    5f12:	68 2b       	or	r22, r24
    5f14:	61 83       	std	Z+1, r22	; 0x01
    5f16:	08 95       	ret

00005f18 <_ZN8CTimerC114DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC1::DisableChannel(TIMER_CHANNELS channels)
{
	TCC1.CTRLB &= ~channels;
    5f18:	e0 e4       	ldi	r30, 0x40	; 64
    5f1a:	f8 e0       	ldi	r31, 0x08	; 8
    5f1c:	81 81       	ldd	r24, Z+1	; 0x01
    5f1e:	60 95       	com	r22
    5f20:	68 23       	and	r22, r24
    5f22:	61 83       	std	Z+1, r22	; 0x01
    5f24:	08 95       	ret

00005f26 <_ZN8CTimerC19SetPeriodEj>:
}

void CTimerC1::SetPeriod(uint16_t value)
{
	TCC1.PER = value;
    5f26:	60 93 66 08 	sts	0x0866, r22	; 0x800866 <__TEXT_REGION_LENGTH__+0x700866>
    5f2a:	70 93 67 08 	sts	0x0867, r23	; 0x800867 <__TEXT_REGION_LENGTH__+0x700867>
    5f2e:	08 95       	ret

00005f30 <_ZN8CTimerC18SetCOMPAEj>:
}

void CTimerC1::SetCOMPA(uint16_t value)
{
	TCC1.CCA = value;
    5f30:	60 93 68 08 	sts	0x0868, r22	; 0x800868 <__TEXT_REGION_LENGTH__+0x700868>
    5f34:	70 93 69 08 	sts	0x0869, r23	; 0x800869 <__TEXT_REGION_LENGTH__+0x700869>
    5f38:	08 95       	ret

00005f3a <_ZN8CTimerC18SetCOMPBEj>:
}

void CTimerC1::SetCOMPB(uint16_t value)
{
	TCC1.CCB = value;
    5f3a:	60 93 6a 08 	sts	0x086A, r22	; 0x80086a <__TEXT_REGION_LENGTH__+0x70086a>
    5f3e:	70 93 6b 08 	sts	0x086B, r23	; 0x80086b <__TEXT_REGION_LENGTH__+0x70086b>
    5f42:	08 95       	ret

00005f44 <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC1::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    5f44:	61 15       	cp	r22, r1
    5f46:	71 05       	cpc	r23, r1
    5f48:	31 f0       	breq	.+12     	; 0x5f56 <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
	TCC1.INTCTRLA = (TCC1.INTCTRLA & TC1_OVFINTLVL_gm) | intlvl;
    5f4a:	e0 e4       	ldi	r30, 0x40	; 64
    5f4c:	f8 e0       	ldi	r31, 0x08	; 8
    5f4e:	86 81       	ldd	r24, Z+6	; 0x06
    5f50:	83 70       	andi	r24, 0x03	; 3
    5f52:	28 2b       	or	r18, r24
    5f54:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC1_OVF_vect_num] = func;
    5f56:	60 93 b6 23 	sts	0x23B6, r22	; 0x8023b6 <InterruptFuncTable+0x28>
    5f5a:	70 93 b7 23 	sts	0x23B7, r23	; 0x8023b7 <InterruptFuncTable+0x29>
	InterruptSenderTable[TCC1_OVF_vect_num] = owner;
    5f5e:	40 93 ac 24 	sts	0x24AC, r20	; 0x8024ac <InterruptSenderTable+0x28>
    5f62:	50 93 ad 24 	sts	0x24AD, r21	; 0x8024ad <InterruptSenderTable+0x29>
    5f66:	08 95       	ret

00005f68 <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC1::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    5f68:	61 15       	cp	r22, r1
    5f6a:	71 05       	cpc	r23, r1
    5f6c:	31 f0       	breq	.+12     	; 0x5f7a <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
	TCC1.INTCTRLA = (TCC1.INTCTRLA & TC1_ERRINTLVL_gm) | intlvl;
    5f6e:	e0 e4       	ldi	r30, 0x40	; 64
    5f70:	f8 e0       	ldi	r31, 0x08	; 8
    5f72:	86 81       	ldd	r24, Z+6	; 0x06
    5f74:	8c 70       	andi	r24, 0x0C	; 12
    5f76:	28 2b       	or	r18, r24
    5f78:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC1_ERR_vect_num] = func;
    5f7a:	60 93 b8 23 	sts	0x23B8, r22	; 0x8023b8 <InterruptFuncTable+0x2a>
    5f7e:	70 93 b9 23 	sts	0x23B9, r23	; 0x8023b9 <InterruptFuncTable+0x2b>
	InterruptSenderTable[TCC1_ERR_vect_num] = owner;
    5f82:	40 93 ae 24 	sts	0x24AE, r20	; 0x8024ae <InterruptSenderTable+0x2a>
    5f86:	50 93 af 24 	sts	0x24AF, r21	; 0x8024af <InterruptSenderTable+0x2b>
    5f8a:	08 95       	ret

00005f8c <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC1::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    5f8c:	61 15       	cp	r22, r1
    5f8e:	71 05       	cpc	r23, r1
    5f90:	31 f0       	breq	.+12     	; 0x5f9e <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
	TCC1.INTCTRLB = (TCC1.INTCTRLB & TC1_CCAINTLVL_gm) | intlvl;
    5f92:	e0 e4       	ldi	r30, 0x40	; 64
    5f94:	f8 e0       	ldi	r31, 0x08	; 8
    5f96:	87 81       	ldd	r24, Z+7	; 0x07
    5f98:	83 70       	andi	r24, 0x03	; 3
    5f9a:	28 2b       	or	r18, r24
    5f9c:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC1_CCA_vect_num] = func;
    5f9e:	60 93 ba 23 	sts	0x23BA, r22	; 0x8023ba <InterruptFuncTable+0x2c>
    5fa2:	70 93 bb 23 	sts	0x23BB, r23	; 0x8023bb <InterruptFuncTable+0x2d>
	InterruptSenderTable[TCC1_CCA_vect_num] = owner;
    5fa6:	40 93 b0 24 	sts	0x24B0, r20	; 0x8024b0 <InterruptSenderTable+0x2c>
    5faa:	50 93 b1 24 	sts	0x24B1, r21	; 0x8024b1 <InterruptSenderTable+0x2d>
    5fae:	08 95       	ret

00005fb0 <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC1::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    5fb0:	61 15       	cp	r22, r1
    5fb2:	71 05       	cpc	r23, r1
    5fb4:	31 f0       	breq	.+12     	; 0x5fc2 <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
	TCC1.INTCTRLB = (TCC1.INTCTRLB & TC1_CCBINTLVL_gm) | intlvl;
    5fb6:	e0 e4       	ldi	r30, 0x40	; 64
    5fb8:	f8 e0       	ldi	r31, 0x08	; 8
    5fba:	87 81       	ldd	r24, Z+7	; 0x07
    5fbc:	8c 70       	andi	r24, 0x0C	; 12
    5fbe:	28 2b       	or	r18, r24
    5fc0:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC1_CCB_vect_num] = func;
    5fc2:	60 93 bc 23 	sts	0x23BC, r22	; 0x8023bc <InterruptFuncTable+0x2e>
    5fc6:	70 93 bd 23 	sts	0x23BD, r23	; 0x8023bd <InterruptFuncTable+0x2f>
	InterruptSenderTable[TCC1_CCB_vect_num] = owner;
    5fca:	40 93 b2 24 	sts	0x24B2, r20	; 0x8024b2 <InterruptSenderTable+0x2e>
    5fce:	50 93 b3 24 	sts	0x24B3, r21	; 0x8024b3 <InterruptSenderTable+0x2f>
    5fd2:	08 95       	ret

00005fd4 <_ZN8CTimerC1C1Ev>:

#include "CTimerC1.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC1::CTimerC1()
    5fd4:	cf 93       	push	r28
    5fd6:	df 93       	push	r29
    5fd8:	ec 01       	movw	r28, r24
    5fda:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN7CTimer1C1Ev>
    5fde:	88 e0       	ldi	r24, 0x08	; 8
    5fe0:	93 e2       	ldi	r25, 0x23	; 35
    5fe2:	88 83       	st	Y, r24
    5fe4:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC1
    5fe6:	df 91       	pop	r29
    5fe8:	cf 91       	pop	r28
    5fea:	08 95       	ret

00005fec <_ZN8CTimerC1D1Ev>:

// default destructor
CTimerC1::~CTimerC1()
    5fec:	28 e0       	ldi	r18, 0x08	; 8
    5fee:	33 e2       	ldi	r19, 0x23	; 35
    5ff0:	fc 01       	movw	r30, r24
    5ff2:	20 83       	st	Z, r18
    5ff4:	31 83       	std	Z+1, r19	; 0x01
    5ff6:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN7CTimer1D1Ev>
    5ffa:	08 95       	ret

00005ffc <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerD

// Basic timer functions
void CTimerD::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    5ffc:	fc 01       	movw	r30, r24
    5ffe:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    6000:	e0 e0       	ldi	r30, 0x00	; 0
    6002:	f9 e0       	ldi	r31, 0x09	; 9
    6004:	80 81       	ld	r24, Z
    6006:	80 7f       	andi	r24, 0xF0	; 240
    6008:	80 83       	st	Z, r24
	
	// No events
	TCD0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    600a:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCD0.CNT = 0;
    600c:	10 a2       	std	Z+32, r1	; 0x20
    600e:	11 a2       	std	Z+33, r1	; 0x21
	TCD0.CCA = 0;
    6010:	10 a6       	std	Z+40, r1	; 0x28
    6012:	11 a6       	std	Z+41, r1	; 0x29
	TCD0.CCB = 0;
    6014:	12 a6       	std	Z+42, r1	; 0x2a
    6016:	13 a6       	std	Z+43, r1	; 0x2b
	TCD0.CCC = 0;
    6018:	14 a6       	std	Z+44, r1	; 0x2c
    601a:	15 a6       	std	Z+45, r1	; 0x2d
	TCD0.CCD = 0;
    601c:	16 a6       	std	Z+46, r1	; 0x2e
    601e:	17 a6       	std	Z+47, r1	; 0x2f
	TCD0.PER = 0;
    6020:	16 a2       	std	Z+38, r1	; 0x26
    6022:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCD0.CTRLB = (TCD0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    6024:	81 81       	ldd	r24, Z+1	; 0x01
    6026:	88 7f       	andi	r24, 0xF8	; 248
    6028:	68 2b       	or	r22, r24
    602a:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCD0.CTRLA = (TCD0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCD0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    602c:	16 82       	std	Z+6, r1	; 0x06
	TCD0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    602e:	17 82       	std	Z+7, r1	; 0x07
    6030:	08 95       	ret

00006032 <_ZN7CTimerD5StartEj>:
}

void CTimerD::Start(uint16_t period)
{
	// Set period of timer
	TCD0.PER = period;
    6032:	e0 e0       	ldi	r30, 0x00	; 0
    6034:	f9 e0       	ldi	r31, 0x09	; 9
    6036:	66 a3       	std	Z+38, r22	; 0x26
    6038:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    603a:	20 81       	ld	r18, Z
    603c:	20 7f       	andi	r18, 0xF0	; 240
    603e:	dc 01       	movw	r26, r24
    6040:	12 96       	adiw	r26, 0x02	; 2
    6042:	9c 91       	ld	r25, X
    6044:	82 2f       	mov	r24, r18
    6046:	89 2b       	or	r24, r25
    6048:	80 83       	st	Z, r24
    604a:	08 95       	ret

0000604c <_ZN7CTimerD4StopEv>:
}

void CTimerD::Stop()
{
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    604c:	e0 e0       	ldi	r30, 0x00	; 0
    604e:	f9 e0       	ldi	r31, 0x09	; 9
    6050:	80 81       	ld	r24, Z
    6052:	80 7f       	andi	r24, 0xF0	; 240
    6054:	80 83       	st	Z, r24
	TCD0.CNT = 0;
    6056:	10 a2       	std	Z+32, r1	; 0x20
    6058:	11 a2       	std	Z+33, r1	; 0x21
    605a:	08 95       	ret

0000605c <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::EnableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB = (TCD0.CTRLB & ~0xF0) | channels;
    605c:	e0 e0       	ldi	r30, 0x00	; 0
    605e:	f9 e0       	ldi	r31, 0x09	; 9
    6060:	81 81       	ldd	r24, Z+1	; 0x01
    6062:	8f 70       	andi	r24, 0x0F	; 15
    6064:	68 2b       	or	r22, r24
    6066:	61 83       	std	Z+1, r22	; 0x01
    6068:	08 95       	ret

0000606a <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::DisableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB &= ~channels;
    606a:	e0 e0       	ldi	r30, 0x00	; 0
    606c:	f9 e0       	ldi	r31, 0x09	; 9
    606e:	81 81       	ldd	r24, Z+1	; 0x01
    6070:	60 95       	com	r22
    6072:	68 23       	and	r22, r24
    6074:	61 83       	std	Z+1, r22	; 0x01
    6076:	08 95       	ret

00006078 <_ZN7CTimerD9SetPeriodEj>:
}

void CTimerD::SetPeriod(uint16_t value)
{
	TCD0.PER = value;
    6078:	60 93 26 09 	sts	0x0926, r22	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
    607c:	70 93 27 09 	sts	0x0927, r23	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
    6080:	08 95       	ret

00006082 <_ZN7CTimerD8SetCOMPAEj>:
}

void CTimerD::SetCOMPA(uint16_t value)
{
	TCD0.CCA = value;
    6082:	60 93 28 09 	sts	0x0928, r22	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    6086:	70 93 29 09 	sts	0x0929, r23	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    608a:	08 95       	ret

0000608c <_ZN7CTimerD8SetCOMPBEj>:
}

void CTimerD::SetCOMPB(uint16_t value)
{
	TCD0.CCB = value;
    608c:	60 93 2a 09 	sts	0x092A, r22	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    6090:	70 93 2b 09 	sts	0x092B, r23	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    6094:	08 95       	ret

00006096 <_ZN7CTimerD8SetCOMPCEj>:
}

void CTimerD::SetCOMPC(uint16_t value)
{
	TCD0.CCC = value;
    6096:	60 93 2c 09 	sts	0x092C, r22	; 0x80092c <__TEXT_REGION_LENGTH__+0x70092c>
    609a:	70 93 2d 09 	sts	0x092D, r23	; 0x80092d <__TEXT_REGION_LENGTH__+0x70092d>
    609e:	08 95       	ret

000060a0 <_ZN7CTimerD8SetCOMPDEj>:
}

void CTimerD::SetCOMPD(uint16_t value)
{
	TCD0.CCD = value;
    60a0:	60 93 2e 09 	sts	0x092E, r22	; 0x80092e <__TEXT_REGION_LENGTH__+0x70092e>
    60a4:	70 93 2f 09 	sts	0x092F, r23	; 0x80092f <__TEXT_REGION_LENGTH__+0x70092f>
    60a8:	08 95       	ret

000060aa <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerD::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    60aa:	61 15       	cp	r22, r1
    60ac:	71 05       	cpc	r23, r1
    60ae:	29 f0       	breq	.+10     	; 0x60ba <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCD0.INTCTRLA |= intlvl;// = (TCD0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    60b0:	e0 e0       	ldi	r30, 0x00	; 0
    60b2:	f9 e0       	ldi	r31, 0x09	; 9
    60b4:	86 81       	ldd	r24, Z+6	; 0x06
    60b6:	28 2b       	or	r18, r24
    60b8:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCD0_OVF_vect_num] = func;
    60ba:	60 93 28 24 	sts	0x2428, r22	; 0x802428 <InterruptFuncTable+0x9a>
    60be:	70 93 29 24 	sts	0x2429, r23	; 0x802429 <InterruptFuncTable+0x9b>
	InterruptSenderTable[TCD0_OVF_vect_num] = owner;
    60c2:	40 93 1e 25 	sts	0x251E, r20	; 0x80251e <InterruptSenderTable+0x9a>
    60c6:	50 93 1f 25 	sts	0x251F, r21	; 0x80251f <InterruptSenderTable+0x9b>
    60ca:	08 95       	ret

000060cc <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerD::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    60cc:	61 15       	cp	r22, r1
    60ce:	71 05       	cpc	r23, r1
    60d0:	29 f0       	breq	.+10     	; 0x60dc <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCD0.INTCTRLA |= intlvl;// = (TCD0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    60d2:	e0 e0       	ldi	r30, 0x00	; 0
    60d4:	f9 e0       	ldi	r31, 0x09	; 9
    60d6:	86 81       	ldd	r24, Z+6	; 0x06
    60d8:	28 2b       	or	r18, r24
    60da:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD0_ERR_vect_num] = func;
    60dc:	60 93 2a 24 	sts	0x242A, r22	; 0x80242a <InterruptFuncTable+0x9c>
    60e0:	70 93 2b 24 	sts	0x242B, r23	; 0x80242b <InterruptFuncTable+0x9d>
	InterruptSenderTable[TCD0_ERR_vect_num] = owner;
    60e4:	40 93 20 25 	sts	0x2520, r20	; 0x802520 <InterruptSenderTable+0x9c>
    60e8:	50 93 21 25 	sts	0x2521, r21	; 0x802521 <InterruptSenderTable+0x9d>
    60ec:	08 95       	ret

000060ee <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerD::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    60ee:	61 15       	cp	r22, r1
    60f0:	71 05       	cpc	r23, r1
    60f2:	29 f0       	breq	.+10     	; 0x60fe <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    60f4:	e0 e0       	ldi	r30, 0x00	; 0
    60f6:	f9 e0       	ldi	r31, 0x09	; 9
    60f8:	87 81       	ldd	r24, Z+7	; 0x07
    60fa:	28 2b       	or	r18, r24
    60fc:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCA_vect_num] = func;
    60fe:	60 93 2c 24 	sts	0x242C, r22	; 0x80242c <InterruptFuncTable+0x9e>
    6102:	70 93 2d 24 	sts	0x242D, r23	; 0x80242d <InterruptFuncTable+0x9f>
	InterruptSenderTable[TCD0_CCA_vect_num] = owner;
    6106:	40 93 22 25 	sts	0x2522, r20	; 0x802522 <InterruptSenderTable+0x9e>
    610a:	50 93 23 25 	sts	0x2523, r21	; 0x802523 <InterruptSenderTable+0x9f>
    610e:	08 95       	ret

00006110 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerD::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    6110:	61 15       	cp	r22, r1
    6112:	71 05       	cpc	r23, r1
    6114:	29 f0       	breq	.+10     	; 0x6120 <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;//= (TCD0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    6116:	e0 e0       	ldi	r30, 0x00	; 0
    6118:	f9 e0       	ldi	r31, 0x09	; 9
    611a:	87 81       	ldd	r24, Z+7	; 0x07
    611c:	28 2b       	or	r18, r24
    611e:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCB_vect_num] = func;
    6120:	60 93 2e 24 	sts	0x242E, r22	; 0x80242e <InterruptFuncTable+0xa0>
    6124:	70 93 2f 24 	sts	0x242F, r23	; 0x80242f <InterruptFuncTable+0xa1>
	InterruptSenderTable[TCD0_CCB_vect_num] = owner;
    6128:	40 93 24 25 	sts	0x2524, r20	; 0x802524 <InterruptSenderTable+0xa0>
    612c:	50 93 25 25 	sts	0x2525, r21	; 0x802525 <InterruptSenderTable+0xa1>
    6130:	08 95       	ret

00006132 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerD::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    6132:	61 15       	cp	r22, r1
    6134:	71 05       	cpc	r23, r1
    6136:	29 f0       	breq	.+10     	; 0x6142 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    6138:	e0 e0       	ldi	r30, 0x00	; 0
    613a:	f9 e0       	ldi	r31, 0x09	; 9
    613c:	87 81       	ldd	r24, Z+7	; 0x07
    613e:	28 2b       	or	r18, r24
    6140:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCC_vect_num] = func;
    6142:	60 93 30 24 	sts	0x2430, r22	; 0x802430 <InterruptFuncTable+0xa2>
    6146:	70 93 31 24 	sts	0x2431, r23	; 0x802431 <InterruptFuncTable+0xa3>
	InterruptSenderTable[TCD0_CCC_vect_num] = owner;
    614a:	40 93 26 25 	sts	0x2526, r20	; 0x802526 <InterruptSenderTable+0xa2>
    614e:	50 93 27 25 	sts	0x2527, r21	; 0x802527 <InterruptSenderTable+0xa3>
    6152:	08 95       	ret

00006154 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerD::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    6154:	61 15       	cp	r22, r1
    6156:	71 05       	cpc	r23, r1
    6158:	29 f0       	breq	.+10     	; 0x6164 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCD0.INTCTRLB |= intlvl;// = (TCD0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    615a:	e0 e0       	ldi	r30, 0x00	; 0
    615c:	f9 e0       	ldi	r31, 0x09	; 9
    615e:	87 81       	ldd	r24, Z+7	; 0x07
    6160:	28 2b       	or	r18, r24
    6162:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCD_vect_num] = func;
    6164:	60 93 32 24 	sts	0x2432, r22	; 0x802432 <InterruptFuncTable+0xa4>
    6168:	70 93 33 24 	sts	0x2433, r23	; 0x802433 <InterruptFuncTable+0xa5>
	InterruptSenderTable[TCD0_CCD_vect_num] = owner;
    616c:	40 93 28 25 	sts	0x2528, r20	; 0x802528 <InterruptSenderTable+0xa4>
    6170:	50 93 29 25 	sts	0x2529, r21	; 0x802529 <InterruptSenderTable+0xa5>
    6174:	08 95       	ret

00006176 <_ZN7CTimerDC1Ev>:

#include "CTimerD.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerD::CTimerD()
    6176:	cf 93       	push	r28
    6178:	df 93       	push	r29
    617a:	ec 01       	movw	r28, r24
    617c:	0e 94 3a 11 	call	0x2274	; 0x2274 <_ZN6CTimerC1Ev>
    6180:	86 e2       	ldi	r24, 0x26	; 38
    6182:	93 e2       	ldi	r25, 0x23	; 35
    6184:	88 83       	st	Y, r24
    6186:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerD
    6188:	df 91       	pop	r29
    618a:	cf 91       	pop	r28
    618c:	08 95       	ret

0000618e <_ZN7CTimerDD1Ev>:

// default destructor
CTimerD::~CTimerD()
    618e:	26 e2       	ldi	r18, 0x26	; 38
    6190:	33 e2       	ldi	r19, 0x23	; 35
    6192:	fc 01       	movw	r30, r24
    6194:	20 83       	st	Z, r18
    6196:	31 83       	std	Z+1, r19	; 0x01
    6198:	0e 94 40 11 	call	0x2280	; 0x2280 <_ZN6CTimerD1Ev>
    619c:	08 95       	ret

0000619e <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerD1

// Basic timer functions
void CTimerD1::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    619e:	fc 01       	movw	r30, r24
    61a0:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    61a2:	e0 e4       	ldi	r30, 0x40	; 64
    61a4:	f9 e0       	ldi	r31, 0x09	; 9
    61a6:	80 81       	ld	r24, Z
    61a8:	80 7f       	andi	r24, 0xF0	; 240
    61aa:	80 83       	st	Z, r24
	
	// No events
	TCD1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    61ac:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCD1.CNT = 0;
    61ae:	10 a2       	std	Z+32, r1	; 0x20
    61b0:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CCA = 0;
    61b2:	10 a6       	std	Z+40, r1	; 0x28
    61b4:	11 a6       	std	Z+41, r1	; 0x29
	TCD1.CCB = 0;
    61b6:	12 a6       	std	Z+42, r1	; 0x2a
    61b8:	13 a6       	std	Z+43, r1	; 0x2b
	TCD1.PER = 0;
    61ba:	16 a2       	std	Z+38, r1	; 0x26
    61bc:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCD1.CTRLB = (TCD1.CTRLB & ~TC1_WGMODE_gm) | wgm;
    61be:	81 81       	ldd	r24, Z+1	; 0x01
    61c0:	88 7f       	andi	r24, 0xF8	; 248
    61c2:	68 2b       	or	r22, r24
    61c4:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCD1.CTRLA = (TCD1.CTRLA & TC1_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCD1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    61c6:	16 82       	std	Z+6, r1	; 0x06
	TCD1.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    61c8:	17 82       	std	Z+7, r1	; 0x07
    61ca:	08 95       	ret

000061cc <_ZN8CTimerD15StartEj>:
}

void CTimerD1::Start(uint16_t period)
{
	// Set period of timer
	TCD1.PER = period;
    61cc:	e0 e4       	ldi	r30, 0x40	; 64
    61ce:	f9 e0       	ldi	r31, 0x09	; 9
    61d0:	66 a3       	std	Z+38, r22	; 0x26
    61d2:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | clockSrc;
    61d4:	20 81       	ld	r18, Z
    61d6:	20 7f       	andi	r18, 0xF0	; 240
    61d8:	dc 01       	movw	r26, r24
    61da:	12 96       	adiw	r26, 0x02	; 2
    61dc:	9c 91       	ld	r25, X
    61de:	82 2f       	mov	r24, r18
    61e0:	89 2b       	or	r24, r25
    61e2:	80 83       	st	Z, r24
    61e4:	08 95       	ret

000061e6 <_ZN8CTimerD14StopEv>:
}

void CTimerD1::Stop()
{
	// Stop timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    61e6:	e0 e4       	ldi	r30, 0x40	; 64
    61e8:	f9 e0       	ldi	r31, 0x09	; 9
    61ea:	80 81       	ld	r24, Z
    61ec:	80 7f       	andi	r24, 0xF0	; 240
    61ee:	80 83       	st	Z, r24
	TCD1.CNT = 0;
    61f0:	10 a2       	std	Z+32, r1	; 0x20
    61f2:	11 a2       	std	Z+33, r1	; 0x21
    61f4:	08 95       	ret

000061f6 <_ZN8CTimerD15ResetEv>:
}

void CTimerD1::Reset()
{
	// Stop timer
	uint16_t tmp = TCD1.CTRLA;
    61f6:	e0 e4       	ldi	r30, 0x40	; 64
    61f8:	f9 e0       	ldi	r31, 0x09	; 9
    61fa:	90 81       	ld	r25, Z
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    61fc:	80 81       	ld	r24, Z
    61fe:	80 7f       	andi	r24, 0xF0	; 240
    6200:	80 83       	st	Z, r24
	TCD1.CNT = 0;
    6202:	10 a2       	std	Z+32, r1	; 0x20
    6204:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CTRLA = tmp;
    6206:	90 83       	st	Z, r25
    6208:	08 95       	ret

0000620a <_ZN8CTimerD113EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD1::EnableChannel(TIMER_CHANNELS channels)
{
	TCD1.CTRLB = (TCD1.CTRLB & ~0xF0) | channels;
    620a:	e0 e4       	ldi	r30, 0x40	; 64
    620c:	f9 e0       	ldi	r31, 0x09	; 9
    620e:	81 81       	ldd	r24, Z+1	; 0x01
    6210:	8f 70       	andi	r24, 0x0F	; 15
    6212:	68 2b       	or	r22, r24
    6214:	61 83       	std	Z+1, r22	; 0x01
    6216:	08 95       	ret

00006218 <_ZN8CTimerD114DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD1::DisableChannel(TIMER_CHANNELS channels)
{
	TCD1.CTRLB &= ~channels;
    6218:	e0 e4       	ldi	r30, 0x40	; 64
    621a:	f9 e0       	ldi	r31, 0x09	; 9
    621c:	81 81       	ldd	r24, Z+1	; 0x01
    621e:	60 95       	com	r22
    6220:	68 23       	and	r22, r24
    6222:	61 83       	std	Z+1, r22	; 0x01
    6224:	08 95       	ret

00006226 <_ZN8CTimerD19SetPeriodEj>:
}

void CTimerD1::SetPeriod(uint16_t value)
{
	TCD1.PER = value;
    6226:	60 93 66 09 	sts	0x0966, r22	; 0x800966 <__TEXT_REGION_LENGTH__+0x700966>
    622a:	70 93 67 09 	sts	0x0967, r23	; 0x800967 <__TEXT_REGION_LENGTH__+0x700967>
    622e:	08 95       	ret

00006230 <_ZN8CTimerD18SetCOMPAEj>:
}

void CTimerD1::SetCOMPA(uint16_t value)
{
	TCD1.CCA = value;
    6230:	60 93 68 09 	sts	0x0968, r22	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    6234:	70 93 69 09 	sts	0x0969, r23	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    6238:	08 95       	ret

0000623a <_ZN8CTimerD18SetCOMPBEj>:
}

void CTimerD1::SetCOMPB(uint16_t value)
{
	TCD1.CCB = value;
    623a:	60 93 6a 09 	sts	0x096A, r22	; 0x80096a <__TEXT_REGION_LENGTH__+0x70096a>
    623e:	70 93 6b 09 	sts	0x096B, r23	; 0x80096b <__TEXT_REGION_LENGTH__+0x70096b>
    6242:	08 95       	ret

00006244 <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerD1::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    6244:	61 15       	cp	r22, r1
    6246:	71 05       	cpc	r23, r1
    6248:	29 f0       	breq	.+10     	; 0x6254 <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
	TCD1.INTCTRLA |= intlvl;// = (TCD1.INTCTRLA & TC1_OVFINTLVL_gm) | intlvl;
    624a:	e0 e4       	ldi	r30, 0x40	; 64
    624c:	f9 e0       	ldi	r31, 0x09	; 9
    624e:	86 81       	ldd	r24, Z+6	; 0x06
    6250:	28 2b       	or	r18, r24
    6252:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD1_OVF_vect_num] = func;
    6254:	60 93 34 24 	sts	0x2434, r22	; 0x802434 <InterruptFuncTable+0xa6>
    6258:	70 93 35 24 	sts	0x2435, r23	; 0x802435 <InterruptFuncTable+0xa7>
	InterruptSenderTable[TCD1_OVF_vect_num] = owner;
    625c:	40 93 2a 25 	sts	0x252A, r20	; 0x80252a <InterruptSenderTable+0xa6>
    6260:	50 93 2b 25 	sts	0x252B, r21	; 0x80252b <InterruptSenderTable+0xa7>
    6264:	08 95       	ret

00006266 <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerD1::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    6266:	61 15       	cp	r22, r1
    6268:	71 05       	cpc	r23, r1
    626a:	29 f0       	breq	.+10     	; 0x6276 <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
	TCD1.INTCTRLA |= intlvl;// = (TCD1.INTCTRLA & TC1_ERRINTLVL_gm) | intlvl;
    626c:	e0 e4       	ldi	r30, 0x40	; 64
    626e:	f9 e0       	ldi	r31, 0x09	; 9
    6270:	86 81       	ldd	r24, Z+6	; 0x06
    6272:	28 2b       	or	r18, r24
    6274:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD1_ERR_vect_num] = func;
    6276:	60 93 36 24 	sts	0x2436, r22	; 0x802436 <InterruptFuncTable+0xa8>
    627a:	70 93 37 24 	sts	0x2437, r23	; 0x802437 <InterruptFuncTable+0xa9>
	InterruptSenderTable[TCD1_ERR_vect_num] = owner;
    627e:	40 93 2c 25 	sts	0x252C, r20	; 0x80252c <InterruptSenderTable+0xa8>
    6282:	50 93 2d 25 	sts	0x252D, r21	; 0x80252d <InterruptSenderTable+0xa9>
    6286:	08 95       	ret

00006288 <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerD1::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    6288:	61 15       	cp	r22, r1
    628a:	71 05       	cpc	r23, r1
    628c:	29 f0       	breq	.+10     	; 0x6298 <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
	TCD1.INTCTRLB |= intlvl;// = (TCD1.INTCTRLB & TC1_CCAINTLVL_gm) | intlvl;
    628e:	e0 e4       	ldi	r30, 0x40	; 64
    6290:	f9 e0       	ldi	r31, 0x09	; 9
    6292:	87 81       	ldd	r24, Z+7	; 0x07
    6294:	28 2b       	or	r18, r24
    6296:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD1_CCA_vect_num] = func;
    6298:	60 93 38 24 	sts	0x2438, r22	; 0x802438 <InterruptFuncTable+0xaa>
    629c:	70 93 39 24 	sts	0x2439, r23	; 0x802439 <InterruptFuncTable+0xab>
	InterruptSenderTable[TCD1_CCA_vect_num] = owner;
    62a0:	40 93 2e 25 	sts	0x252E, r20	; 0x80252e <InterruptSenderTable+0xaa>
    62a4:	50 93 2f 25 	sts	0x252F, r21	; 0x80252f <InterruptSenderTable+0xab>
    62a8:	08 95       	ret

000062aa <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerD1::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    62aa:	61 15       	cp	r22, r1
    62ac:	71 05       	cpc	r23, r1
    62ae:	29 f0       	breq	.+10     	; 0x62ba <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
	TCD1.INTCTRLB |= intlvl;// = (TCD1.INTCTRLB & TC1_CCBINTLVL_gm) | intlvl;
    62b0:	e0 e4       	ldi	r30, 0x40	; 64
    62b2:	f9 e0       	ldi	r31, 0x09	; 9
    62b4:	87 81       	ldd	r24, Z+7	; 0x07
    62b6:	28 2b       	or	r18, r24
    62b8:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD1_CCB_vect_num] = func;
    62ba:	60 93 3a 24 	sts	0x243A, r22	; 0x80243a <InterruptFuncTable+0xac>
    62be:	70 93 3b 24 	sts	0x243B, r23	; 0x80243b <InterruptFuncTable+0xad>
	InterruptSenderTable[TCD1_CCB_vect_num] = owner;
    62c2:	40 93 30 25 	sts	0x2530, r20	; 0x802530 <InterruptSenderTable+0xac>
    62c6:	50 93 31 25 	sts	0x2531, r21	; 0x802531 <InterruptSenderTable+0xad>
    62ca:	08 95       	ret

000062cc <_ZN8CTimerD1C1Ev>:

#include "CTimerD1.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerD1::CTimerD1()
    62cc:	cf 93       	push	r28
    62ce:	df 93       	push	r29
    62d0:	ec 01       	movw	r28, r24
    62d2:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN7CTimer1C1Ev>
    62d6:	8a e4       	ldi	r24, 0x4A	; 74
    62d8:	93 e2       	ldi	r25, 0x23	; 35
    62da:	88 83       	st	Y, r24
    62dc:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerD1
    62de:	df 91       	pop	r29
    62e0:	cf 91       	pop	r28
    62e2:	08 95       	ret

000062e4 <_ZN8CTimerD1D1Ev>:

// default destructor
CTimerD1::~CTimerD1()
    62e4:	2a e4       	ldi	r18, 0x4A	; 74
    62e6:	33 e2       	ldi	r19, 0x23	; 35
    62e8:	fc 01       	movw	r30, r24
    62ea:	20 83       	st	Z, r18
    62ec:	31 83       	std	Z+1, r19	; 0x01
    62ee:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN7CTimer1D1Ev>
    62f2:	08 95       	ret

000062f4 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerF::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    62f4:	fc 01       	movw	r30, r24
    62f6:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    62f8:	e0 e0       	ldi	r30, 0x00	; 0
    62fa:	fb e0       	ldi	r31, 0x0B	; 11
    62fc:	80 81       	ld	r24, Z
    62fe:	80 7f       	andi	r24, 0xF0	; 240
    6300:	80 83       	st	Z, r24
	
	// No events
	TCF0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    6302:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCF0.CNT = 0;
    6304:	10 a2       	std	Z+32, r1	; 0x20
    6306:	11 a2       	std	Z+33, r1	; 0x21
	TCF0.CCA = 0;
    6308:	10 a6       	std	Z+40, r1	; 0x28
    630a:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB = 0;
    630c:	12 a6       	std	Z+42, r1	; 0x2a
    630e:	13 a6       	std	Z+43, r1	; 0x2b
	TCF0.CCC = 0;
    6310:	14 a6       	std	Z+44, r1	; 0x2c
    6312:	15 a6       	std	Z+45, r1	; 0x2d
	TCF0.CCD = 0;
    6314:	16 a6       	std	Z+46, r1	; 0x2e
    6316:	17 a6       	std	Z+47, r1	; 0x2f
	TCF0.PER = 0;
    6318:	16 a2       	std	Z+38, r1	; 0x26
    631a:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCF0.CTRLB = (TCF0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    631c:	81 81       	ldd	r24, Z+1	; 0x01
    631e:	88 7f       	andi	r24, 0xF8	; 248
    6320:	68 2b       	or	r22, r24
    6322:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCF0.CTRLA = (TCF0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCF0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    6324:	16 82       	std	Z+6, r1	; 0x06
	TCF0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    6326:	17 82       	std	Z+7, r1	; 0x07
    6328:	08 95       	ret

0000632a <_ZN7CTimerF5StartEj>:
}

void CTimerF::Start(uint16_t period)
{
	// Set period of timer
	TCF0.PER = period;
    632a:	e0 e0       	ldi	r30, 0x00	; 0
    632c:	fb e0       	ldi	r31, 0x0B	; 11
    632e:	66 a3       	std	Z+38, r22	; 0x26
    6330:	77 a3       	std	Z+39, r23	; 0x27
	//TCF0.CNT = 0;
	
	// Start timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    6332:	20 81       	ld	r18, Z
    6334:	20 7f       	andi	r18, 0xF0	; 240
    6336:	dc 01       	movw	r26, r24
    6338:	12 96       	adiw	r26, 0x02	; 2
    633a:	9c 91       	ld	r25, X
    633c:	82 2f       	mov	r24, r18
    633e:	89 2b       	or	r24, r25
    6340:	80 83       	st	Z, r24
    6342:	08 95       	ret

00006344 <_ZN7CTimerF4StopEv>:
}

void CTimerF::Stop()
{
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    6344:	e0 e0       	ldi	r30, 0x00	; 0
    6346:	fb e0       	ldi	r31, 0x0B	; 11
    6348:	80 81       	ld	r24, Z
    634a:	80 7f       	andi	r24, 0xF0	; 240
    634c:	80 83       	st	Z, r24
	TCF0.CNT = 0;
    634e:	10 a2       	std	Z+32, r1	; 0x20
    6350:	11 a2       	std	Z+33, r1	; 0x21
    6352:	08 95       	ret

00006354 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::EnableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB |= channels;
    6354:	e0 e0       	ldi	r30, 0x00	; 0
    6356:	fb e0       	ldi	r31, 0x0B	; 11
    6358:	81 81       	ldd	r24, Z+1	; 0x01
    635a:	68 2b       	or	r22, r24
    635c:	61 83       	std	Z+1, r22	; 0x01
    635e:	08 95       	ret

00006360 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::DisableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB &= ~channels;
    6360:	e0 e0       	ldi	r30, 0x00	; 0
    6362:	fb e0       	ldi	r31, 0x0B	; 11
    6364:	81 81       	ldd	r24, Z+1	; 0x01
    6366:	60 95       	com	r22
    6368:	68 23       	and	r22, r24
    636a:	61 83       	std	Z+1, r22	; 0x01
    636c:	08 95       	ret

0000636e <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelSet(TIMER_CHANNELS channels)
{
	TCF0.CTRLC |= (channels >> 4);
    636e:	e0 e0       	ldi	r30, 0x00	; 0
    6370:	fb e0       	ldi	r31, 0x0B	; 11
    6372:	82 81       	ldd	r24, Z+2	; 0x02
    6374:	62 95       	swap	r22
    6376:	6f 70       	andi	r22, 0x0F	; 15
    6378:	68 2b       	or	r22, r24
    637a:	62 83       	std	Z+2, r22	; 0x02
    637c:	08 95       	ret

0000637e <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelReset(TIMER_CHANNELS channels)
{
	TCF0.CTRLC &= ~(channels >> 4);
    637e:	e0 e0       	ldi	r30, 0x00	; 0
    6380:	fb e0       	ldi	r31, 0x0B	; 11
    6382:	82 81       	ldd	r24, Z+2	; 0x02
    6384:	62 95       	swap	r22
    6386:	6f 70       	andi	r22, 0x0F	; 15
    6388:	60 95       	com	r22
    638a:	68 23       	and	r22, r24
    638c:	62 83       	std	Z+2, r22	; 0x02
    638e:	08 95       	ret

00006390 <_ZN7CTimerF9SetPeriodEj>:
}

void CTimerF::SetPeriod(uint16_t value)
{
	TCF0.PER = value;
    6390:	60 93 26 0b 	sts	0x0B26, r22	; 0x800b26 <__TEXT_REGION_LENGTH__+0x700b26>
    6394:	70 93 27 0b 	sts	0x0B27, r23	; 0x800b27 <__TEXT_REGION_LENGTH__+0x700b27>
    6398:	08 95       	ret

0000639a <_ZN7CTimerF8SetCOMPAEj>:
}

void CTimerF::SetCOMPA(uint16_t value)
{
	TCF0.CCA = value;
    639a:	60 93 28 0b 	sts	0x0B28, r22	; 0x800b28 <__TEXT_REGION_LENGTH__+0x700b28>
    639e:	70 93 29 0b 	sts	0x0B29, r23	; 0x800b29 <__TEXT_REGION_LENGTH__+0x700b29>
    63a2:	08 95       	ret

000063a4 <_ZN7CTimerF8SetCOMPBEj>:
}

void CTimerF::SetCOMPB(uint16_t value)
{
	TCF0.CCB = value;
    63a4:	60 93 2a 0b 	sts	0x0B2A, r22	; 0x800b2a <__TEXT_REGION_LENGTH__+0x700b2a>
    63a8:	70 93 2b 0b 	sts	0x0B2B, r23	; 0x800b2b <__TEXT_REGION_LENGTH__+0x700b2b>
    63ac:	08 95       	ret

000063ae <_ZN7CTimerF8SetCOMPCEj>:
}

void CTimerF::SetCOMPC(uint16_t value)
{
	TCF0.CCC = value;
    63ae:	60 93 2c 0b 	sts	0x0B2C, r22	; 0x800b2c <__TEXT_REGION_LENGTH__+0x700b2c>
    63b2:	70 93 2d 0b 	sts	0x0B2D, r23	; 0x800b2d <__TEXT_REGION_LENGTH__+0x700b2d>
    63b6:	08 95       	ret

000063b8 <_ZN7CTimerF8SetCOMPDEj>:
}

void CTimerF::SetCOMPD(uint16_t value)
{
	TCF0.CCD = value;
    63b8:	60 93 2e 0b 	sts	0x0B2E, r22	; 0x800b2e <__TEXT_REGION_LENGTH__+0x700b2e>
    63bc:	70 93 2f 0b 	sts	0x0B2F, r23	; 0x800b2f <__TEXT_REGION_LENGTH__+0x700b2f>
    63c0:	08 95       	ret

000063c2 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerF::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    63c2:	61 15       	cp	r22, r1
    63c4:	71 05       	cpc	r23, r1
    63c6:	29 f0       	breq	.+10     	; 0x63d2 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x10>
		TCF0.INTCTRLA |= intlvl;// = (TCF0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    63c8:	e0 e0       	ldi	r30, 0x00	; 0
    63ca:	fb e0       	ldi	r31, 0x0B	; 11
    63cc:	86 81       	ldd	r24, Z+6	; 0x06
    63ce:	28 2b       	or	r18, r24
    63d0:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_OVF_vect_num] = func;
    63d2:	60 93 66 24 	sts	0x2466, r22	; 0x802466 <InterruptFuncTable+0xd8>
    63d6:	70 93 67 24 	sts	0x2467, r23	; 0x802467 <InterruptFuncTable+0xd9>
	InterruptSenderTable[TCF0_OVF_vect_num] = owner;
    63da:	40 93 5c 25 	sts	0x255C, r20	; 0x80255c <InterruptSenderTable+0xd8>
    63de:	50 93 5d 25 	sts	0x255D, r21	; 0x80255d <InterruptSenderTable+0xd9>
    63e2:	08 95       	ret

000063e4 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerF::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    63e4:	61 15       	cp	r22, r1
    63e6:	71 05       	cpc	r23, r1
    63e8:	29 f0       	breq	.+10     	; 0x63f4 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x10>
		TCF0.INTCTRLA |= intlvl;// = (TCF0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    63ea:	e0 e0       	ldi	r30, 0x00	; 0
    63ec:	fb e0       	ldi	r31, 0x0B	; 11
    63ee:	86 81       	ldd	r24, Z+6	; 0x06
    63f0:	28 2b       	or	r18, r24
    63f2:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_ERR_vect_num] = func;
    63f4:	60 93 68 24 	sts	0x2468, r22	; 0x802468 <InterruptFuncTable+0xda>
    63f8:	70 93 69 24 	sts	0x2469, r23	; 0x802469 <InterruptFuncTable+0xdb>
	InterruptSenderTable[TCF0_ERR_vect_num] = owner;
    63fc:	40 93 5e 25 	sts	0x255E, r20	; 0x80255e <InterruptSenderTable+0xda>
    6400:	50 93 5f 25 	sts	0x255F, r21	; 0x80255f <InterruptSenderTable+0xdb>
    6404:	08 95       	ret

00006406 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerF::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    6406:	61 15       	cp	r22, r1
    6408:	71 05       	cpc	r23, r1
    640a:	29 f0       	breq	.+10     	; 0x6416 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    640c:	e0 e0       	ldi	r30, 0x00	; 0
    640e:	fb e0       	ldi	r31, 0x0B	; 11
    6410:	87 81       	ldd	r24, Z+7	; 0x07
    6412:	28 2b       	or	r18, r24
    6414:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCA_vect_num] = func;
    6416:	60 93 6a 24 	sts	0x246A, r22	; 0x80246a <InterruptFuncTable+0xdc>
    641a:	70 93 6b 24 	sts	0x246B, r23	; 0x80246b <InterruptFuncTable+0xdd>
	InterruptSenderTable[TCF0_CCA_vect_num] = owner;
    641e:	40 93 60 25 	sts	0x2560, r20	; 0x802560 <InterruptSenderTable+0xdc>
    6422:	50 93 61 25 	sts	0x2561, r21	; 0x802561 <InterruptSenderTable+0xdd>
    6426:	08 95       	ret

00006428 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerF::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    6428:	61 15       	cp	r22, r1
    642a:	71 05       	cpc	r23, r1
    642c:	29 f0       	breq	.+10     	; 0x6438 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    642e:	e0 e0       	ldi	r30, 0x00	; 0
    6430:	fb e0       	ldi	r31, 0x0B	; 11
    6432:	87 81       	ldd	r24, Z+7	; 0x07
    6434:	28 2b       	or	r18, r24
    6436:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCB_vect_num] = func;
    6438:	60 93 6c 24 	sts	0x246C, r22	; 0x80246c <InterruptFuncTable+0xde>
    643c:	70 93 6d 24 	sts	0x246D, r23	; 0x80246d <InterruptFuncTable+0xdf>
	InterruptSenderTable[TCF0_CCB_vect_num] = owner;
    6440:	40 93 62 25 	sts	0x2562, r20	; 0x802562 <InterruptSenderTable+0xde>
    6444:	50 93 63 25 	sts	0x2563, r21	; 0x802563 <InterruptSenderTable+0xdf>
    6448:	08 95       	ret

0000644a <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerF::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    644a:	61 15       	cp	r22, r1
    644c:	71 05       	cpc	r23, r1
    644e:	29 f0       	breq	.+10     	; 0x645a <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    6450:	e0 e0       	ldi	r30, 0x00	; 0
    6452:	fb e0       	ldi	r31, 0x0B	; 11
    6454:	87 81       	ldd	r24, Z+7	; 0x07
    6456:	28 2b       	or	r18, r24
    6458:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCC_vect_num] = func;
    645a:	60 93 6e 24 	sts	0x246E, r22	; 0x80246e <InterruptFuncTable+0xe0>
    645e:	70 93 6f 24 	sts	0x246F, r23	; 0x80246f <InterruptFuncTable+0xe1>
	InterruptSenderTable[TCF0_CCC_vect_num] = owner;
    6462:	40 93 64 25 	sts	0x2564, r20	; 0x802564 <InterruptSenderTable+0xe0>
    6466:	50 93 65 25 	sts	0x2565, r21	; 0x802565 <InterruptSenderTable+0xe1>
    646a:	08 95       	ret

0000646c <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerF::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    646c:	61 15       	cp	r22, r1
    646e:	71 05       	cpc	r23, r1
    6470:	29 f0       	breq	.+10     	; 0x647c <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x10>
		TCF0.INTCTRLB |= intlvl;// = (TCF0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    6472:	e0 e0       	ldi	r30, 0x00	; 0
    6474:	fb e0       	ldi	r31, 0x0B	; 11
    6476:	87 81       	ldd	r24, Z+7	; 0x07
    6478:	28 2b       	or	r18, r24
    647a:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCD_vect_num] = func;
    647c:	60 93 70 24 	sts	0x2470, r22	; 0x802470 <InterruptFuncTable+0xe2>
    6480:	70 93 71 24 	sts	0x2471, r23	; 0x802471 <InterruptFuncTable+0xe3>
	InterruptSenderTable[TCF0_CCD_vect_num] = owner;
    6484:	40 93 66 25 	sts	0x2566, r20	; 0x802566 <InterruptSenderTable+0xe2>
    6488:	50 93 67 25 	sts	0x2567, r21	; 0x802567 <InterruptSenderTable+0xe3>
    648c:	08 95       	ret

0000648e <_ZN7CTimerFC1Ev>:

#include "CTimerF.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerF::CTimerF()
    648e:	cf 93       	push	r28
    6490:	df 93       	push	r29
    6492:	ec 01       	movw	r28, r24
    6494:	0e 94 3a 11 	call	0x2274	; 0x2274 <_ZN6CTimerC1Ev>
    6498:	88 e6       	ldi	r24, 0x68	; 104
    649a:	93 e2       	ldi	r25, 0x23	; 35
    649c:	88 83       	st	Y, r24
    649e:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    64a0:	df 91       	pop	r29
    64a2:	cf 91       	pop	r28
    64a4:	08 95       	ret

000064a6 <_ZN7CTimerFD1Ev>:

// default destructor
CTimerF::~CTimerF()
    64a6:	28 e6       	ldi	r18, 0x68	; 104
    64a8:	33 e2       	ldi	r19, 0x23	; 35
    64aa:	fc 01       	movw	r30, r24
    64ac:	20 83       	st	Z, r18
    64ae:	31 83       	std	Z+1, r19	; 0x01
    64b0:	0e 94 40 11 	call	0x2280	; 0x2280 <_ZN6CTimerD1Ev>
    64b4:	08 95       	ret

000064b6 <__fixsfsi>:
    64b6:	0e 94 62 32 	call	0x64c4	; 0x64c4 <__fixunssfsi>
    64ba:	68 94       	set
    64bc:	b1 11       	cpse	r27, r1
    64be:	0c 94 f1 32 	jmp	0x65e2	; 0x65e2 <__fp_szero>
    64c2:	08 95       	ret

000064c4 <__fixunssfsi>:
    64c4:	0e 94 d6 32 	call	0x65ac	; 0x65ac <__fp_splitA>
    64c8:	88 f0       	brcs	.+34     	; 0x64ec <__fixunssfsi+0x28>
    64ca:	9f 57       	subi	r25, 0x7F	; 127
    64cc:	98 f0       	brcs	.+38     	; 0x64f4 <__fixunssfsi+0x30>
    64ce:	b9 2f       	mov	r27, r25
    64d0:	99 27       	eor	r25, r25
    64d2:	b7 51       	subi	r27, 0x17	; 23
    64d4:	b0 f0       	brcs	.+44     	; 0x6502 <__fixunssfsi+0x3e>
    64d6:	e1 f0       	breq	.+56     	; 0x6510 <__fixunssfsi+0x4c>
    64d8:	66 0f       	add	r22, r22
    64da:	77 1f       	adc	r23, r23
    64dc:	88 1f       	adc	r24, r24
    64de:	99 1f       	adc	r25, r25
    64e0:	1a f0       	brmi	.+6      	; 0x64e8 <__fixunssfsi+0x24>
    64e2:	ba 95       	dec	r27
    64e4:	c9 f7       	brne	.-14     	; 0x64d8 <__fixunssfsi+0x14>
    64e6:	14 c0       	rjmp	.+40     	; 0x6510 <__fixunssfsi+0x4c>
    64e8:	b1 30       	cpi	r27, 0x01	; 1
    64ea:	91 f0       	breq	.+36     	; 0x6510 <__fixunssfsi+0x4c>
    64ec:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <__fp_zero>
    64f0:	b1 e0       	ldi	r27, 0x01	; 1
    64f2:	08 95       	ret
    64f4:	0c 94 f0 32 	jmp	0x65e0	; 0x65e0 <__fp_zero>
    64f8:	67 2f       	mov	r22, r23
    64fa:	78 2f       	mov	r23, r24
    64fc:	88 27       	eor	r24, r24
    64fe:	b8 5f       	subi	r27, 0xF8	; 248
    6500:	39 f0       	breq	.+14     	; 0x6510 <__fixunssfsi+0x4c>
    6502:	b9 3f       	cpi	r27, 0xF9	; 249
    6504:	cc f3       	brlt	.-14     	; 0x64f8 <__fixunssfsi+0x34>
    6506:	86 95       	lsr	r24
    6508:	77 95       	ror	r23
    650a:	67 95       	ror	r22
    650c:	b3 95       	inc	r27
    650e:	d9 f7       	brne	.-10     	; 0x6506 <__fixunssfsi+0x42>
    6510:	3e f4       	brtc	.+14     	; 0x6520 <__fixunssfsi+0x5c>
    6512:	90 95       	com	r25
    6514:	80 95       	com	r24
    6516:	70 95       	com	r23
    6518:	61 95       	neg	r22
    651a:	7f 4f       	sbci	r23, 0xFF	; 255
    651c:	8f 4f       	sbci	r24, 0xFF	; 255
    651e:	9f 4f       	sbci	r25, 0xFF	; 255
    6520:	08 95       	ret

00006522 <__floatunsisf>:
    6522:	e8 94       	clt
    6524:	09 c0       	rjmp	.+18     	; 0x6538 <__floatsisf+0x12>

00006526 <__floatsisf>:
    6526:	97 fb       	bst	r25, 7
    6528:	3e f4       	brtc	.+14     	; 0x6538 <__floatsisf+0x12>
    652a:	90 95       	com	r25
    652c:	80 95       	com	r24
    652e:	70 95       	com	r23
    6530:	61 95       	neg	r22
    6532:	7f 4f       	sbci	r23, 0xFF	; 255
    6534:	8f 4f       	sbci	r24, 0xFF	; 255
    6536:	9f 4f       	sbci	r25, 0xFF	; 255
    6538:	99 23       	and	r25, r25
    653a:	a9 f0       	breq	.+42     	; 0x6566 <__floatsisf+0x40>
    653c:	f9 2f       	mov	r31, r25
    653e:	96 e9       	ldi	r25, 0x96	; 150
    6540:	bb 27       	eor	r27, r27
    6542:	93 95       	inc	r25
    6544:	f6 95       	lsr	r31
    6546:	87 95       	ror	r24
    6548:	77 95       	ror	r23
    654a:	67 95       	ror	r22
    654c:	b7 95       	ror	r27
    654e:	f1 11       	cpse	r31, r1
    6550:	f8 cf       	rjmp	.-16     	; 0x6542 <__floatsisf+0x1c>
    6552:	fa f4       	brpl	.+62     	; 0x6592 <__floatsisf+0x6c>
    6554:	bb 0f       	add	r27, r27
    6556:	11 f4       	brne	.+4      	; 0x655c <__floatsisf+0x36>
    6558:	60 ff       	sbrs	r22, 0
    655a:	1b c0       	rjmp	.+54     	; 0x6592 <__floatsisf+0x6c>
    655c:	6f 5f       	subi	r22, 0xFF	; 255
    655e:	7f 4f       	sbci	r23, 0xFF	; 255
    6560:	8f 4f       	sbci	r24, 0xFF	; 255
    6562:	9f 4f       	sbci	r25, 0xFF	; 255
    6564:	16 c0       	rjmp	.+44     	; 0x6592 <__floatsisf+0x6c>
    6566:	88 23       	and	r24, r24
    6568:	11 f0       	breq	.+4      	; 0x656e <__floatsisf+0x48>
    656a:	96 e9       	ldi	r25, 0x96	; 150
    656c:	11 c0       	rjmp	.+34     	; 0x6590 <__floatsisf+0x6a>
    656e:	77 23       	and	r23, r23
    6570:	21 f0       	breq	.+8      	; 0x657a <__floatsisf+0x54>
    6572:	9e e8       	ldi	r25, 0x8E	; 142
    6574:	87 2f       	mov	r24, r23
    6576:	76 2f       	mov	r23, r22
    6578:	05 c0       	rjmp	.+10     	; 0x6584 <__floatsisf+0x5e>
    657a:	66 23       	and	r22, r22
    657c:	71 f0       	breq	.+28     	; 0x659a <__floatsisf+0x74>
    657e:	96 e8       	ldi	r25, 0x86	; 134
    6580:	86 2f       	mov	r24, r22
    6582:	70 e0       	ldi	r23, 0x00	; 0
    6584:	60 e0       	ldi	r22, 0x00	; 0
    6586:	2a f0       	brmi	.+10     	; 0x6592 <__floatsisf+0x6c>
    6588:	9a 95       	dec	r25
    658a:	66 0f       	add	r22, r22
    658c:	77 1f       	adc	r23, r23
    658e:	88 1f       	adc	r24, r24
    6590:	da f7       	brpl	.-10     	; 0x6588 <__floatsisf+0x62>
    6592:	88 0f       	add	r24, r24
    6594:	96 95       	lsr	r25
    6596:	87 95       	ror	r24
    6598:	97 f9       	bld	r25, 7
    659a:	08 95       	ret

0000659c <__fp_split3>:
    659c:	57 fd       	sbrc	r21, 7
    659e:	90 58       	subi	r25, 0x80	; 128
    65a0:	44 0f       	add	r20, r20
    65a2:	55 1f       	adc	r21, r21
    65a4:	59 f0       	breq	.+22     	; 0x65bc <__fp_splitA+0x10>
    65a6:	5f 3f       	cpi	r21, 0xFF	; 255
    65a8:	71 f0       	breq	.+28     	; 0x65c6 <__fp_splitA+0x1a>
    65aa:	47 95       	ror	r20

000065ac <__fp_splitA>:
    65ac:	88 0f       	add	r24, r24
    65ae:	97 fb       	bst	r25, 7
    65b0:	99 1f       	adc	r25, r25
    65b2:	61 f0       	breq	.+24     	; 0x65cc <__fp_splitA+0x20>
    65b4:	9f 3f       	cpi	r25, 0xFF	; 255
    65b6:	79 f0       	breq	.+30     	; 0x65d6 <__fp_splitA+0x2a>
    65b8:	87 95       	ror	r24
    65ba:	08 95       	ret
    65bc:	12 16       	cp	r1, r18
    65be:	13 06       	cpc	r1, r19
    65c0:	14 06       	cpc	r1, r20
    65c2:	55 1f       	adc	r21, r21
    65c4:	f2 cf       	rjmp	.-28     	; 0x65aa <__fp_split3+0xe>
    65c6:	46 95       	lsr	r20
    65c8:	f1 df       	rcall	.-30     	; 0x65ac <__fp_splitA>
    65ca:	08 c0       	rjmp	.+16     	; 0x65dc <__fp_splitA+0x30>
    65cc:	16 16       	cp	r1, r22
    65ce:	17 06       	cpc	r1, r23
    65d0:	18 06       	cpc	r1, r24
    65d2:	99 1f       	adc	r25, r25
    65d4:	f1 cf       	rjmp	.-30     	; 0x65b8 <__fp_splitA+0xc>
    65d6:	86 95       	lsr	r24
    65d8:	71 05       	cpc	r23, r1
    65da:	61 05       	cpc	r22, r1
    65dc:	08 94       	sec
    65de:	08 95       	ret

000065e0 <__fp_zero>:
    65e0:	e8 94       	clt

000065e2 <__fp_szero>:
    65e2:	bb 27       	eor	r27, r27
    65e4:	66 27       	eor	r22, r22
    65e6:	77 27       	eor	r23, r23
    65e8:	cb 01       	movw	r24, r22
    65ea:	97 f9       	bld	r25, 7
    65ec:	08 95       	ret

000065ee <__mulsf3>:
    65ee:	0e 94 0a 33 	call	0x6614	; 0x6614 <__mulsf3x>
    65f2:	0c 94 7b 33 	jmp	0x66f6	; 0x66f6 <__fp_round>
    65f6:	0e 94 6d 33 	call	0x66da	; 0x66da <__fp_pscA>
    65fa:	38 f0       	brcs	.+14     	; 0x660a <__mulsf3+0x1c>
    65fc:	0e 94 74 33 	call	0x66e8	; 0x66e8 <__fp_pscB>
    6600:	20 f0       	brcs	.+8      	; 0x660a <__mulsf3+0x1c>
    6602:	95 23       	and	r25, r21
    6604:	11 f0       	breq	.+4      	; 0x660a <__mulsf3+0x1c>
    6606:	0c 94 64 33 	jmp	0x66c8	; 0x66c8 <__fp_inf>
    660a:	0c 94 6a 33 	jmp	0x66d4	; 0x66d4 <__fp_nan>
    660e:	11 24       	eor	r1, r1
    6610:	0c 94 f1 32 	jmp	0x65e2	; 0x65e2 <__fp_szero>

00006614 <__mulsf3x>:
    6614:	0e 94 ce 32 	call	0x659c	; 0x659c <__fp_split3>
    6618:	70 f3       	brcs	.-36     	; 0x65f6 <__mulsf3+0x8>

0000661a <__mulsf3_pse>:
    661a:	95 9f       	mul	r25, r21
    661c:	c1 f3       	breq	.-16     	; 0x660e <__mulsf3+0x20>
    661e:	95 0f       	add	r25, r21
    6620:	50 e0       	ldi	r21, 0x00	; 0
    6622:	55 1f       	adc	r21, r21
    6624:	62 9f       	mul	r22, r18
    6626:	f0 01       	movw	r30, r0
    6628:	72 9f       	mul	r23, r18
    662a:	bb 27       	eor	r27, r27
    662c:	f0 0d       	add	r31, r0
    662e:	b1 1d       	adc	r27, r1
    6630:	63 9f       	mul	r22, r19
    6632:	aa 27       	eor	r26, r26
    6634:	f0 0d       	add	r31, r0
    6636:	b1 1d       	adc	r27, r1
    6638:	aa 1f       	adc	r26, r26
    663a:	64 9f       	mul	r22, r20
    663c:	66 27       	eor	r22, r22
    663e:	b0 0d       	add	r27, r0
    6640:	a1 1d       	adc	r26, r1
    6642:	66 1f       	adc	r22, r22
    6644:	82 9f       	mul	r24, r18
    6646:	22 27       	eor	r18, r18
    6648:	b0 0d       	add	r27, r0
    664a:	a1 1d       	adc	r26, r1
    664c:	62 1f       	adc	r22, r18
    664e:	73 9f       	mul	r23, r19
    6650:	b0 0d       	add	r27, r0
    6652:	a1 1d       	adc	r26, r1
    6654:	62 1f       	adc	r22, r18
    6656:	83 9f       	mul	r24, r19
    6658:	a0 0d       	add	r26, r0
    665a:	61 1d       	adc	r22, r1
    665c:	22 1f       	adc	r18, r18
    665e:	74 9f       	mul	r23, r20
    6660:	33 27       	eor	r19, r19
    6662:	a0 0d       	add	r26, r0
    6664:	61 1d       	adc	r22, r1
    6666:	23 1f       	adc	r18, r19
    6668:	84 9f       	mul	r24, r20
    666a:	60 0d       	add	r22, r0
    666c:	21 1d       	adc	r18, r1
    666e:	82 2f       	mov	r24, r18
    6670:	76 2f       	mov	r23, r22
    6672:	6a 2f       	mov	r22, r26
    6674:	11 24       	eor	r1, r1
    6676:	9f 57       	subi	r25, 0x7F	; 127
    6678:	50 40       	sbci	r21, 0x00	; 0
    667a:	9a f0       	brmi	.+38     	; 0x66a2 <__mulsf3_pse+0x88>
    667c:	f1 f0       	breq	.+60     	; 0x66ba <__mulsf3_pse+0xa0>
    667e:	88 23       	and	r24, r24
    6680:	4a f0       	brmi	.+18     	; 0x6694 <__mulsf3_pse+0x7a>
    6682:	ee 0f       	add	r30, r30
    6684:	ff 1f       	adc	r31, r31
    6686:	bb 1f       	adc	r27, r27
    6688:	66 1f       	adc	r22, r22
    668a:	77 1f       	adc	r23, r23
    668c:	88 1f       	adc	r24, r24
    668e:	91 50       	subi	r25, 0x01	; 1
    6690:	50 40       	sbci	r21, 0x00	; 0
    6692:	a9 f7       	brne	.-22     	; 0x667e <__mulsf3_pse+0x64>
    6694:	9e 3f       	cpi	r25, 0xFE	; 254
    6696:	51 05       	cpc	r21, r1
    6698:	80 f0       	brcs	.+32     	; 0x66ba <__mulsf3_pse+0xa0>
    669a:	0c 94 64 33 	jmp	0x66c8	; 0x66c8 <__fp_inf>
    669e:	0c 94 f1 32 	jmp	0x65e2	; 0x65e2 <__fp_szero>
    66a2:	5f 3f       	cpi	r21, 0xFF	; 255
    66a4:	e4 f3       	brlt	.-8      	; 0x669e <__mulsf3_pse+0x84>
    66a6:	98 3e       	cpi	r25, 0xE8	; 232
    66a8:	d4 f3       	brlt	.-12     	; 0x669e <__mulsf3_pse+0x84>
    66aa:	86 95       	lsr	r24
    66ac:	77 95       	ror	r23
    66ae:	67 95       	ror	r22
    66b0:	b7 95       	ror	r27
    66b2:	f7 95       	ror	r31
    66b4:	e7 95       	ror	r30
    66b6:	9f 5f       	subi	r25, 0xFF	; 255
    66b8:	c1 f7       	brne	.-16     	; 0x66aa <__mulsf3_pse+0x90>
    66ba:	fe 2b       	or	r31, r30
    66bc:	88 0f       	add	r24, r24
    66be:	91 1d       	adc	r25, r1
    66c0:	96 95       	lsr	r25
    66c2:	87 95       	ror	r24
    66c4:	97 f9       	bld	r25, 7
    66c6:	08 95       	ret

000066c8 <__fp_inf>:
    66c8:	97 f9       	bld	r25, 7
    66ca:	9f 67       	ori	r25, 0x7F	; 127
    66cc:	80 e8       	ldi	r24, 0x80	; 128
    66ce:	70 e0       	ldi	r23, 0x00	; 0
    66d0:	60 e0       	ldi	r22, 0x00	; 0
    66d2:	08 95       	ret

000066d4 <__fp_nan>:
    66d4:	9f ef       	ldi	r25, 0xFF	; 255
    66d6:	80 ec       	ldi	r24, 0xC0	; 192
    66d8:	08 95       	ret

000066da <__fp_pscA>:
    66da:	00 24       	eor	r0, r0
    66dc:	0a 94       	dec	r0
    66de:	16 16       	cp	r1, r22
    66e0:	17 06       	cpc	r1, r23
    66e2:	18 06       	cpc	r1, r24
    66e4:	09 06       	cpc	r0, r25
    66e6:	08 95       	ret

000066e8 <__fp_pscB>:
    66e8:	00 24       	eor	r0, r0
    66ea:	0a 94       	dec	r0
    66ec:	12 16       	cp	r1, r18
    66ee:	13 06       	cpc	r1, r19
    66f0:	14 06       	cpc	r1, r20
    66f2:	05 06       	cpc	r0, r21
    66f4:	08 95       	ret

000066f6 <__fp_round>:
    66f6:	09 2e       	mov	r0, r25
    66f8:	03 94       	inc	r0
    66fa:	00 0c       	add	r0, r0
    66fc:	11 f4       	brne	.+4      	; 0x6702 <__fp_round+0xc>
    66fe:	88 23       	and	r24, r24
    6700:	52 f0       	brmi	.+20     	; 0x6716 <__fp_round+0x20>
    6702:	bb 0f       	add	r27, r27
    6704:	40 f4       	brcc	.+16     	; 0x6716 <__fp_round+0x20>
    6706:	bf 2b       	or	r27, r31
    6708:	11 f4       	brne	.+4      	; 0x670e <__fp_round+0x18>
    670a:	60 ff       	sbrs	r22, 0
    670c:	04 c0       	rjmp	.+8      	; 0x6716 <__fp_round+0x20>
    670e:	6f 5f       	subi	r22, 0xFF	; 255
    6710:	7f 4f       	sbci	r23, 0xFF	; 255
    6712:	8f 4f       	sbci	r24, 0xFF	; 255
    6714:	9f 4f       	sbci	r25, 0xFF	; 255
    6716:	08 95       	ret

00006718 <__mulsi3>:
    6718:	db 01       	movw	r26, r22
    671a:	8f 93       	push	r24
    671c:	9f 93       	push	r25
    671e:	0e 94 1c 34 	call	0x6838	; 0x6838 <__muluhisi3>
    6722:	bf 91       	pop	r27
    6724:	af 91       	pop	r26
    6726:	a2 9f       	mul	r26, r18
    6728:	80 0d       	add	r24, r0
    672a:	91 1d       	adc	r25, r1
    672c:	a3 9f       	mul	r26, r19
    672e:	90 0d       	add	r25, r0
    6730:	b2 9f       	mul	r27, r18
    6732:	90 0d       	add	r25, r0
    6734:	11 24       	eor	r1, r1
    6736:	08 95       	ret

00006738 <__udivmodhi4>:
    6738:	aa 1b       	sub	r26, r26
    673a:	bb 1b       	sub	r27, r27
    673c:	51 e1       	ldi	r21, 0x11	; 17
    673e:	07 c0       	rjmp	.+14     	; 0x674e <__udivmodhi4_ep>

00006740 <__udivmodhi4_loop>:
    6740:	aa 1f       	adc	r26, r26
    6742:	bb 1f       	adc	r27, r27
    6744:	a6 17       	cp	r26, r22
    6746:	b7 07       	cpc	r27, r23
    6748:	10 f0       	brcs	.+4      	; 0x674e <__udivmodhi4_ep>
    674a:	a6 1b       	sub	r26, r22
    674c:	b7 0b       	sbc	r27, r23

0000674e <__udivmodhi4_ep>:
    674e:	88 1f       	adc	r24, r24
    6750:	99 1f       	adc	r25, r25
    6752:	5a 95       	dec	r21
    6754:	a9 f7       	brne	.-22     	; 0x6740 <__udivmodhi4_loop>
    6756:	80 95       	com	r24
    6758:	90 95       	com	r25
    675a:	bc 01       	movw	r22, r24
    675c:	cd 01       	movw	r24, r26
    675e:	08 95       	ret

00006760 <__divmodhi4>:
    6760:	97 fb       	bst	r25, 7
    6762:	07 2e       	mov	r0, r23
    6764:	16 f4       	brtc	.+4      	; 0x676a <__divmodhi4+0xa>
    6766:	00 94       	com	r0
    6768:	07 d0       	rcall	.+14     	; 0x6778 <__divmodhi4_neg1>
    676a:	77 fd       	sbrc	r23, 7
    676c:	09 d0       	rcall	.+18     	; 0x6780 <__divmodhi4_neg2>
    676e:	0e 94 9c 33 	call	0x6738	; 0x6738 <__udivmodhi4>
    6772:	07 fc       	sbrc	r0, 7
    6774:	05 d0       	rcall	.+10     	; 0x6780 <__divmodhi4_neg2>
    6776:	3e f4       	brtc	.+14     	; 0x6786 <__divmodhi4_exit>

00006778 <__divmodhi4_neg1>:
    6778:	90 95       	com	r25
    677a:	81 95       	neg	r24
    677c:	9f 4f       	sbci	r25, 0xFF	; 255
    677e:	08 95       	ret

00006780 <__divmodhi4_neg2>:
    6780:	70 95       	com	r23
    6782:	61 95       	neg	r22
    6784:	7f 4f       	sbci	r23, 0xFF	; 255

00006786 <__divmodhi4_exit>:
    6786:	08 95       	ret

00006788 <__udivmodsi4>:
    6788:	a1 e2       	ldi	r26, 0x21	; 33
    678a:	1a 2e       	mov	r1, r26
    678c:	aa 1b       	sub	r26, r26
    678e:	bb 1b       	sub	r27, r27
    6790:	fd 01       	movw	r30, r26
    6792:	0d c0       	rjmp	.+26     	; 0x67ae <__udivmodsi4_ep>

00006794 <__udivmodsi4_loop>:
    6794:	aa 1f       	adc	r26, r26
    6796:	bb 1f       	adc	r27, r27
    6798:	ee 1f       	adc	r30, r30
    679a:	ff 1f       	adc	r31, r31
    679c:	a2 17       	cp	r26, r18
    679e:	b3 07       	cpc	r27, r19
    67a0:	e4 07       	cpc	r30, r20
    67a2:	f5 07       	cpc	r31, r21
    67a4:	20 f0       	brcs	.+8      	; 0x67ae <__udivmodsi4_ep>
    67a6:	a2 1b       	sub	r26, r18
    67a8:	b3 0b       	sbc	r27, r19
    67aa:	e4 0b       	sbc	r30, r20
    67ac:	f5 0b       	sbc	r31, r21

000067ae <__udivmodsi4_ep>:
    67ae:	66 1f       	adc	r22, r22
    67b0:	77 1f       	adc	r23, r23
    67b2:	88 1f       	adc	r24, r24
    67b4:	99 1f       	adc	r25, r25
    67b6:	1a 94       	dec	r1
    67b8:	69 f7       	brne	.-38     	; 0x6794 <__udivmodsi4_loop>
    67ba:	60 95       	com	r22
    67bc:	70 95       	com	r23
    67be:	80 95       	com	r24
    67c0:	90 95       	com	r25
    67c2:	9b 01       	movw	r18, r22
    67c4:	ac 01       	movw	r20, r24
    67c6:	bd 01       	movw	r22, r26
    67c8:	cf 01       	movw	r24, r30
    67ca:	08 95       	ret

000067cc <__divmodsi4>:
    67cc:	05 2e       	mov	r0, r21
    67ce:	97 fb       	bst	r25, 7
    67d0:	1e f4       	brtc	.+6      	; 0x67d8 <__divmodsi4+0xc>
    67d2:	00 94       	com	r0
    67d4:	0e 94 fd 33 	call	0x67fa	; 0x67fa <__negsi2>
    67d8:	57 fd       	sbrc	r21, 7
    67da:	07 d0       	rcall	.+14     	; 0x67ea <__divmodsi4_neg2>
    67dc:	0e 94 c4 33 	call	0x6788	; 0x6788 <__udivmodsi4>
    67e0:	07 fc       	sbrc	r0, 7
    67e2:	03 d0       	rcall	.+6      	; 0x67ea <__divmodsi4_neg2>
    67e4:	4e f4       	brtc	.+18     	; 0x67f8 <__divmodsi4_exit>
    67e6:	0c 94 fd 33 	jmp	0x67fa	; 0x67fa <__negsi2>

000067ea <__divmodsi4_neg2>:
    67ea:	50 95       	com	r21
    67ec:	40 95       	com	r20
    67ee:	30 95       	com	r19
    67f0:	21 95       	neg	r18
    67f2:	3f 4f       	sbci	r19, 0xFF	; 255
    67f4:	4f 4f       	sbci	r20, 0xFF	; 255
    67f6:	5f 4f       	sbci	r21, 0xFF	; 255

000067f8 <__divmodsi4_exit>:
    67f8:	08 95       	ret

000067fa <__negsi2>:
    67fa:	90 95       	com	r25
    67fc:	80 95       	com	r24
    67fe:	70 95       	com	r23
    6800:	61 95       	neg	r22
    6802:	7f 4f       	sbci	r23, 0xFF	; 255
    6804:	8f 4f       	sbci	r24, 0xFF	; 255
    6806:	9f 4f       	sbci	r25, 0xFF	; 255
    6808:	08 95       	ret

0000680a <__tablejump2__>:
    680a:	ee 0f       	add	r30, r30
    680c:	ff 1f       	adc	r31, r31
    680e:	88 1f       	adc	r24, r24
    6810:	8b bf       	out	0x3b, r24	; 59
    6812:	07 90       	elpm	r0, Z+
    6814:	f6 91       	elpm	r31, Z
    6816:	e0 2d       	mov	r30, r0
    6818:	19 94       	eijmp

0000681a <__umulhisi3>:
    681a:	a2 9f       	mul	r26, r18
    681c:	b0 01       	movw	r22, r0
    681e:	b3 9f       	mul	r27, r19
    6820:	c0 01       	movw	r24, r0
    6822:	a3 9f       	mul	r26, r19
    6824:	70 0d       	add	r23, r0
    6826:	81 1d       	adc	r24, r1
    6828:	11 24       	eor	r1, r1
    682a:	91 1d       	adc	r25, r1
    682c:	b2 9f       	mul	r27, r18
    682e:	70 0d       	add	r23, r0
    6830:	81 1d       	adc	r24, r1
    6832:	11 24       	eor	r1, r1
    6834:	91 1d       	adc	r25, r1
    6836:	08 95       	ret

00006838 <__muluhisi3>:
    6838:	0e 94 0d 34 	call	0x681a	; 0x681a <__umulhisi3>
    683c:	a5 9f       	mul	r26, r21
    683e:	90 0d       	add	r25, r0
    6840:	b4 9f       	mul	r27, r20
    6842:	90 0d       	add	r25, r0
    6844:	a4 9f       	mul	r26, r20
    6846:	80 0d       	add	r24, r0
    6848:	91 1d       	adc	r25, r1
    684a:	11 24       	eor	r1, r1
    684c:	08 95       	ret

0000684e <malloc>:
    684e:	cf 93       	push	r28
    6850:	df 93       	push	r29
    6852:	82 30       	cpi	r24, 0x02	; 2
    6854:	91 05       	cpc	r25, r1
    6856:	10 f4       	brcc	.+4      	; 0x685c <malloc+0xe>
    6858:	82 e0       	ldi	r24, 0x02	; 2
    685a:	90 e0       	ldi	r25, 0x00	; 0
    685c:	e0 91 4d 26 	lds	r30, 0x264D	; 0x80264d <__flp>
    6860:	f0 91 4e 26 	lds	r31, 0x264E	; 0x80264e <__flp+0x1>
    6864:	20 e0       	ldi	r18, 0x00	; 0
    6866:	30 e0       	ldi	r19, 0x00	; 0
    6868:	c0 e0       	ldi	r28, 0x00	; 0
    686a:	d0 e0       	ldi	r29, 0x00	; 0
    686c:	30 97       	sbiw	r30, 0x00	; 0
    686e:	11 f1       	breq	.+68     	; 0x68b4 <malloc+0x66>
    6870:	40 81       	ld	r20, Z
    6872:	51 81       	ldd	r21, Z+1	; 0x01
    6874:	48 17       	cp	r20, r24
    6876:	59 07       	cpc	r21, r25
    6878:	c0 f0       	brcs	.+48     	; 0x68aa <malloc+0x5c>
    687a:	48 17       	cp	r20, r24
    687c:	59 07       	cpc	r21, r25
    687e:	61 f4       	brne	.+24     	; 0x6898 <malloc+0x4a>
    6880:	82 81       	ldd	r24, Z+2	; 0x02
    6882:	93 81       	ldd	r25, Z+3	; 0x03
    6884:	20 97       	sbiw	r28, 0x00	; 0
    6886:	19 f0       	breq	.+6      	; 0x688e <malloc+0x40>
    6888:	8a 83       	std	Y+2, r24	; 0x02
    688a:	9b 83       	std	Y+3, r25	; 0x03
    688c:	2b c0       	rjmp	.+86     	; 0x68e4 <malloc+0x96>
    688e:	80 93 4d 26 	sts	0x264D, r24	; 0x80264d <__flp>
    6892:	90 93 4e 26 	sts	0x264E, r25	; 0x80264e <__flp+0x1>
    6896:	26 c0       	rjmp	.+76     	; 0x68e4 <malloc+0x96>
    6898:	21 15       	cp	r18, r1
    689a:	31 05       	cpc	r19, r1
    689c:	19 f0       	breq	.+6      	; 0x68a4 <malloc+0x56>
    689e:	42 17       	cp	r20, r18
    68a0:	53 07       	cpc	r21, r19
    68a2:	18 f4       	brcc	.+6      	; 0x68aa <malloc+0x5c>
    68a4:	9a 01       	movw	r18, r20
    68a6:	be 01       	movw	r22, r28
    68a8:	df 01       	movw	r26, r30
    68aa:	ef 01       	movw	r28, r30
    68ac:	02 80       	ldd	r0, Z+2	; 0x02
    68ae:	f3 81       	ldd	r31, Z+3	; 0x03
    68b0:	e0 2d       	mov	r30, r0
    68b2:	dc cf       	rjmp	.-72     	; 0x686c <malloc+0x1e>
    68b4:	21 15       	cp	r18, r1
    68b6:	31 05       	cpc	r19, r1
    68b8:	09 f1       	breq	.+66     	; 0x68fc <malloc+0xae>
    68ba:	28 1b       	sub	r18, r24
    68bc:	39 0b       	sbc	r19, r25
    68be:	24 30       	cpi	r18, 0x04	; 4
    68c0:	31 05       	cpc	r19, r1
    68c2:	90 f4       	brcc	.+36     	; 0x68e8 <malloc+0x9a>
    68c4:	12 96       	adiw	r26, 0x02	; 2
    68c6:	8d 91       	ld	r24, X+
    68c8:	9c 91       	ld	r25, X
    68ca:	13 97       	sbiw	r26, 0x03	; 3
    68cc:	61 15       	cp	r22, r1
    68ce:	71 05       	cpc	r23, r1
    68d0:	21 f0       	breq	.+8      	; 0x68da <malloc+0x8c>
    68d2:	fb 01       	movw	r30, r22
    68d4:	82 83       	std	Z+2, r24	; 0x02
    68d6:	93 83       	std	Z+3, r25	; 0x03
    68d8:	04 c0       	rjmp	.+8      	; 0x68e2 <malloc+0x94>
    68da:	80 93 4d 26 	sts	0x264D, r24	; 0x80264d <__flp>
    68de:	90 93 4e 26 	sts	0x264E, r25	; 0x80264e <__flp+0x1>
    68e2:	fd 01       	movw	r30, r26
    68e4:	32 96       	adiw	r30, 0x02	; 2
    68e6:	44 c0       	rjmp	.+136    	; 0x6970 <malloc+0x122>
    68e8:	fd 01       	movw	r30, r26
    68ea:	e2 0f       	add	r30, r18
    68ec:	f3 1f       	adc	r31, r19
    68ee:	81 93       	st	Z+, r24
    68f0:	91 93       	st	Z+, r25
    68f2:	22 50       	subi	r18, 0x02	; 2
    68f4:	31 09       	sbc	r19, r1
    68f6:	2d 93       	st	X+, r18
    68f8:	3c 93       	st	X, r19
    68fa:	3a c0       	rjmp	.+116    	; 0x6970 <malloc+0x122>
    68fc:	20 91 4b 26 	lds	r18, 0x264B	; 0x80264b <__brkval>
    6900:	30 91 4c 26 	lds	r19, 0x264C	; 0x80264c <__brkval+0x1>
    6904:	23 2b       	or	r18, r19
    6906:	41 f4       	brne	.+16     	; 0x6918 <malloc+0xca>
    6908:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    690c:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    6910:	20 93 4b 26 	sts	0x264B, r18	; 0x80264b <__brkval>
    6914:	30 93 4c 26 	sts	0x264C, r19	; 0x80264c <__brkval+0x1>
    6918:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    691c:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    6920:	21 15       	cp	r18, r1
    6922:	31 05       	cpc	r19, r1
    6924:	41 f4       	brne	.+16     	; 0x6936 <malloc+0xe8>
    6926:	2d b7       	in	r18, 0x3d	; 61
    6928:	3e b7       	in	r19, 0x3e	; 62
    692a:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    692e:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    6932:	24 1b       	sub	r18, r20
    6934:	35 0b       	sbc	r19, r21
    6936:	e0 91 4b 26 	lds	r30, 0x264B	; 0x80264b <__brkval>
    693a:	f0 91 4c 26 	lds	r31, 0x264C	; 0x80264c <__brkval+0x1>
    693e:	e2 17       	cp	r30, r18
    6940:	f3 07       	cpc	r31, r19
    6942:	a0 f4       	brcc	.+40     	; 0x696c <malloc+0x11e>
    6944:	2e 1b       	sub	r18, r30
    6946:	3f 0b       	sbc	r19, r31
    6948:	28 17       	cp	r18, r24
    694a:	39 07       	cpc	r19, r25
    694c:	78 f0       	brcs	.+30     	; 0x696c <malloc+0x11e>
    694e:	ac 01       	movw	r20, r24
    6950:	4e 5f       	subi	r20, 0xFE	; 254
    6952:	5f 4f       	sbci	r21, 0xFF	; 255
    6954:	24 17       	cp	r18, r20
    6956:	35 07       	cpc	r19, r21
    6958:	48 f0       	brcs	.+18     	; 0x696c <malloc+0x11e>
    695a:	4e 0f       	add	r20, r30
    695c:	5f 1f       	adc	r21, r31
    695e:	40 93 4b 26 	sts	0x264B, r20	; 0x80264b <__brkval>
    6962:	50 93 4c 26 	sts	0x264C, r21	; 0x80264c <__brkval+0x1>
    6966:	81 93       	st	Z+, r24
    6968:	91 93       	st	Z+, r25
    696a:	02 c0       	rjmp	.+4      	; 0x6970 <malloc+0x122>
    696c:	e0 e0       	ldi	r30, 0x00	; 0
    696e:	f0 e0       	ldi	r31, 0x00	; 0
    6970:	cf 01       	movw	r24, r30
    6972:	df 91       	pop	r29
    6974:	cf 91       	pop	r28
    6976:	08 95       	ret

00006978 <free>:
    6978:	0f 93       	push	r16
    697a:	1f 93       	push	r17
    697c:	cf 93       	push	r28
    697e:	df 93       	push	r29
    6980:	00 97       	sbiw	r24, 0x00	; 0
    6982:	09 f4       	brne	.+2      	; 0x6986 <free+0xe>
    6984:	8c c0       	rjmp	.+280    	; 0x6a9e <free+0x126>
    6986:	fc 01       	movw	r30, r24
    6988:	32 97       	sbiw	r30, 0x02	; 2
    698a:	12 82       	std	Z+2, r1	; 0x02
    698c:	13 82       	std	Z+3, r1	; 0x03
    698e:	00 91 4d 26 	lds	r16, 0x264D	; 0x80264d <__flp>
    6992:	10 91 4e 26 	lds	r17, 0x264E	; 0x80264e <__flp+0x1>
    6996:	01 15       	cp	r16, r1
    6998:	11 05       	cpc	r17, r1
    699a:	81 f4       	brne	.+32     	; 0x69bc <free+0x44>
    699c:	20 81       	ld	r18, Z
    699e:	31 81       	ldd	r19, Z+1	; 0x01
    69a0:	82 0f       	add	r24, r18
    69a2:	93 1f       	adc	r25, r19
    69a4:	20 91 4b 26 	lds	r18, 0x264B	; 0x80264b <__brkval>
    69a8:	30 91 4c 26 	lds	r19, 0x264C	; 0x80264c <__brkval+0x1>
    69ac:	28 17       	cp	r18, r24
    69ae:	39 07       	cpc	r19, r25
    69b0:	79 f5       	brne	.+94     	; 0x6a10 <free+0x98>
    69b2:	e0 93 4b 26 	sts	0x264B, r30	; 0x80264b <__brkval>
    69b6:	f0 93 4c 26 	sts	0x264C, r31	; 0x80264c <__brkval+0x1>
    69ba:	71 c0       	rjmp	.+226    	; 0x6a9e <free+0x126>
    69bc:	d8 01       	movw	r26, r16
    69be:	40 e0       	ldi	r20, 0x00	; 0
    69c0:	50 e0       	ldi	r21, 0x00	; 0
    69c2:	ae 17       	cp	r26, r30
    69c4:	bf 07       	cpc	r27, r31
    69c6:	50 f4       	brcc	.+20     	; 0x69dc <free+0x64>
    69c8:	12 96       	adiw	r26, 0x02	; 2
    69ca:	2d 91       	ld	r18, X+
    69cc:	3c 91       	ld	r19, X
    69ce:	13 97       	sbiw	r26, 0x03	; 3
    69d0:	ad 01       	movw	r20, r26
    69d2:	21 15       	cp	r18, r1
    69d4:	31 05       	cpc	r19, r1
    69d6:	09 f1       	breq	.+66     	; 0x6a1a <free+0xa2>
    69d8:	d9 01       	movw	r26, r18
    69da:	f3 cf       	rjmp	.-26     	; 0x69c2 <free+0x4a>
    69dc:	9d 01       	movw	r18, r26
    69de:	da 01       	movw	r26, r20
    69e0:	22 83       	std	Z+2, r18	; 0x02
    69e2:	33 83       	std	Z+3, r19	; 0x03
    69e4:	60 81       	ld	r22, Z
    69e6:	71 81       	ldd	r23, Z+1	; 0x01
    69e8:	86 0f       	add	r24, r22
    69ea:	97 1f       	adc	r25, r23
    69ec:	82 17       	cp	r24, r18
    69ee:	93 07       	cpc	r25, r19
    69f0:	69 f4       	brne	.+26     	; 0x6a0c <free+0x94>
    69f2:	ec 01       	movw	r28, r24
    69f4:	28 81       	ld	r18, Y
    69f6:	39 81       	ldd	r19, Y+1	; 0x01
    69f8:	26 0f       	add	r18, r22
    69fa:	37 1f       	adc	r19, r23
    69fc:	2e 5f       	subi	r18, 0xFE	; 254
    69fe:	3f 4f       	sbci	r19, 0xFF	; 255
    6a00:	20 83       	st	Z, r18
    6a02:	31 83       	std	Z+1, r19	; 0x01
    6a04:	8a 81       	ldd	r24, Y+2	; 0x02
    6a06:	9b 81       	ldd	r25, Y+3	; 0x03
    6a08:	82 83       	std	Z+2, r24	; 0x02
    6a0a:	93 83       	std	Z+3, r25	; 0x03
    6a0c:	45 2b       	or	r20, r21
    6a0e:	29 f4       	brne	.+10     	; 0x6a1a <free+0xa2>
    6a10:	e0 93 4d 26 	sts	0x264D, r30	; 0x80264d <__flp>
    6a14:	f0 93 4e 26 	sts	0x264E, r31	; 0x80264e <__flp+0x1>
    6a18:	42 c0       	rjmp	.+132    	; 0x6a9e <free+0x126>
    6a1a:	12 96       	adiw	r26, 0x02	; 2
    6a1c:	ed 93       	st	X+, r30
    6a1e:	fc 93       	st	X, r31
    6a20:	13 97       	sbiw	r26, 0x03	; 3
    6a22:	ed 01       	movw	r28, r26
    6a24:	49 91       	ld	r20, Y+
    6a26:	59 91       	ld	r21, Y+
    6a28:	9e 01       	movw	r18, r28
    6a2a:	24 0f       	add	r18, r20
    6a2c:	35 1f       	adc	r19, r21
    6a2e:	e2 17       	cp	r30, r18
    6a30:	f3 07       	cpc	r31, r19
    6a32:	71 f4       	brne	.+28     	; 0x6a50 <free+0xd8>
    6a34:	80 81       	ld	r24, Z
    6a36:	91 81       	ldd	r25, Z+1	; 0x01
    6a38:	84 0f       	add	r24, r20
    6a3a:	95 1f       	adc	r25, r21
    6a3c:	02 96       	adiw	r24, 0x02	; 2
    6a3e:	8d 93       	st	X+, r24
    6a40:	9c 93       	st	X, r25
    6a42:	11 97       	sbiw	r26, 0x01	; 1
    6a44:	82 81       	ldd	r24, Z+2	; 0x02
    6a46:	93 81       	ldd	r25, Z+3	; 0x03
    6a48:	12 96       	adiw	r26, 0x02	; 2
    6a4a:	8d 93       	st	X+, r24
    6a4c:	9c 93       	st	X, r25
    6a4e:	13 97       	sbiw	r26, 0x03	; 3
    6a50:	e0 e0       	ldi	r30, 0x00	; 0
    6a52:	f0 e0       	ldi	r31, 0x00	; 0
    6a54:	d8 01       	movw	r26, r16
    6a56:	12 96       	adiw	r26, 0x02	; 2
    6a58:	8d 91       	ld	r24, X+
    6a5a:	9c 91       	ld	r25, X
    6a5c:	13 97       	sbiw	r26, 0x03	; 3
    6a5e:	00 97       	sbiw	r24, 0x00	; 0
    6a60:	19 f0       	breq	.+6      	; 0x6a68 <free+0xf0>
    6a62:	f8 01       	movw	r30, r16
    6a64:	8c 01       	movw	r16, r24
    6a66:	f6 cf       	rjmp	.-20     	; 0x6a54 <free+0xdc>
    6a68:	8d 91       	ld	r24, X+
    6a6a:	9c 91       	ld	r25, X
    6a6c:	98 01       	movw	r18, r16
    6a6e:	2e 5f       	subi	r18, 0xFE	; 254
    6a70:	3f 4f       	sbci	r19, 0xFF	; 255
    6a72:	82 0f       	add	r24, r18
    6a74:	93 1f       	adc	r25, r19
    6a76:	20 91 4b 26 	lds	r18, 0x264B	; 0x80264b <__brkval>
    6a7a:	30 91 4c 26 	lds	r19, 0x264C	; 0x80264c <__brkval+0x1>
    6a7e:	28 17       	cp	r18, r24
    6a80:	39 07       	cpc	r19, r25
    6a82:	69 f4       	brne	.+26     	; 0x6a9e <free+0x126>
    6a84:	30 97       	sbiw	r30, 0x00	; 0
    6a86:	29 f4       	brne	.+10     	; 0x6a92 <free+0x11a>
    6a88:	10 92 4d 26 	sts	0x264D, r1	; 0x80264d <__flp>
    6a8c:	10 92 4e 26 	sts	0x264E, r1	; 0x80264e <__flp+0x1>
    6a90:	02 c0       	rjmp	.+4      	; 0x6a96 <free+0x11e>
    6a92:	12 82       	std	Z+2, r1	; 0x02
    6a94:	13 82       	std	Z+3, r1	; 0x03
    6a96:	00 93 4b 26 	sts	0x264B, r16	; 0x80264b <__brkval>
    6a9a:	10 93 4c 26 	sts	0x264C, r17	; 0x80264c <__brkval+0x1>
    6a9e:	df 91       	pop	r29
    6aa0:	cf 91       	pop	r28
    6aa2:	1f 91       	pop	r17
    6aa4:	0f 91       	pop	r16
    6aa6:	08 95       	ret

00006aa8 <memcpy>:
    6aa8:	fb 01       	movw	r30, r22
    6aaa:	dc 01       	movw	r26, r24
    6aac:	02 c0       	rjmp	.+4      	; 0x6ab2 <memcpy+0xa>
    6aae:	01 90       	ld	r0, Z+
    6ab0:	0d 92       	st	X+, r0
    6ab2:	41 50       	subi	r20, 0x01	; 1
    6ab4:	50 40       	sbci	r21, 0x00	; 0
    6ab6:	d8 f7       	brcc	.-10     	; 0x6aae <memcpy+0x6>
    6ab8:	08 95       	ret

00006aba <eeprom_read_dword>:
    6aba:	0e 94 75 35 	call	0x6aea	; 0x6aea <eeprom_mapen>
    6abe:	60 81       	ld	r22, Z
    6ac0:	71 81       	ldd	r23, Z+1	; 0x01
    6ac2:	82 81       	ldd	r24, Z+2	; 0x02
    6ac4:	93 81       	ldd	r25, Z+3	; 0x03
    6ac6:	08 95       	ret

00006ac8 <eeprom_write_dword>:
    6ac8:	24 2f       	mov	r18, r20
    6aca:	0e 94 82 35 	call	0x6b04	; 0x6b04 <eeprom_write_r18>
    6ace:	25 2f       	mov	r18, r21
    6ad0:	0e 94 82 35 	call	0x6b04	; 0x6b04 <eeprom_write_r18>
    6ad4:	0c 94 6c 35 	jmp	0x6ad8	; 0x6ad8 <eeprom_write_word>

00006ad8 <eeprom_write_word>:
    6ad8:	0e 94 81 35 	call	0x6b02	; 0x6b02 <eeprom_write_byte>
    6adc:	27 2f       	mov	r18, r23
    6ade:	0c 94 82 35 	jmp	0x6b04	; 0x6b04 <eeprom_write_r18>

00006ae2 <eeprom_read_byte>:
    6ae2:	03 d0       	rcall	.+6      	; 0x6aea <eeprom_mapen>
    6ae4:	80 81       	ld	r24, Z
    6ae6:	99 27       	eor	r25, r25
    6ae8:	08 95       	ret

00006aea <eeprom_mapen>:
    6aea:	e0 ec       	ldi	r30, 0xC0	; 192
    6aec:	f1 e0       	ldi	r31, 0x01	; 1
    6aee:	37 85       	ldd	r19, Z+15	; 0x0f
    6af0:	37 fd       	sbrc	r19, 7
    6af2:	fd cf       	rjmp	.-6      	; 0x6aee <eeprom_mapen+0x4>
    6af4:	34 85       	ldd	r19, Z+12	; 0x0c
    6af6:	38 60       	ori	r19, 0x08	; 8
    6af8:	34 87       	std	Z+12, r19	; 0x0c
    6afa:	fc 01       	movw	r30, r24
    6afc:	e0 50       	subi	r30, 0x00	; 0
    6afe:	f0 4f       	sbci	r31, 0xF0	; 240
    6b00:	08 95       	ret

00006b02 <eeprom_write_byte>:
    6b02:	26 2f       	mov	r18, r22

00006b04 <eeprom_write_r18>:
    6b04:	e0 ec       	ldi	r30, 0xC0	; 192
    6b06:	f1 e0       	ldi	r31, 0x01	; 1
    6b08:	37 85       	ldd	r19, Z+15	; 0x0f
    6b0a:	37 fd       	sbrc	r19, 7
    6b0c:	fd cf       	rjmp	.-6      	; 0x6b08 <eeprom_write_r18+0x4>
    6b0e:	34 85       	ldd	r19, Z+12	; 0x0c
    6b10:	37 7f       	andi	r19, 0xF7	; 247
    6b12:	34 87       	std	Z+12, r19	; 0x0c
    6b14:	37 85       	ldd	r19, Z+15	; 0x0f
    6b16:	31 ff       	sbrs	r19, 1
    6b18:	09 c0       	rjmp	.+18     	; 0x6b2c <eeprom_write_r18+0x28>
    6b1a:	36 e3       	ldi	r19, 0x36	; 54
    6b1c:	32 87       	std	Z+10, r19	; 0x0a
    6b1e:	38 ed       	ldi	r19, 0xD8	; 216
    6b20:	34 bf       	out	0x34, r19	; 52
    6b22:	31 e0       	ldi	r19, 0x01	; 1
    6b24:	33 87       	std	Z+11, r19	; 0x0b
    6b26:	37 85       	ldd	r19, Z+15	; 0x0f
    6b28:	37 fd       	sbrc	r19, 7
    6b2a:	fd cf       	rjmp	.-6      	; 0x6b26 <eeprom_write_r18+0x22>
    6b2c:	33 e3       	ldi	r19, 0x33	; 51
    6b2e:	32 87       	std	Z+10, r19	; 0x0a
    6b30:	80 83       	st	Z, r24
    6b32:	91 83       	std	Z+1, r25	; 0x01
    6b34:	12 82       	std	Z+2, r1	; 0x02
    6b36:	24 83       	std	Z+4, r18	; 0x04
    6b38:	25 e3       	ldi	r18, 0x35	; 53
    6b3a:	22 87       	std	Z+10, r18	; 0x0a
    6b3c:	28 ed       	ldi	r18, 0xD8	; 216
    6b3e:	31 e0       	ldi	r19, 0x01	; 1
    6b40:	24 bf       	out	0x34, r18	; 52
    6b42:	33 87       	std	Z+11, r19	; 0x0b
    6b44:	01 96       	adiw	r24, 0x01	; 1
    6b46:	08 95       	ret

00006b48 <__do_global_dtors>:
    6b48:	12 e0       	ldi	r17, 0x02	; 2
    6b4a:	cc e8       	ldi	r28, 0x8C	; 140
    6b4c:	d2 e0       	ldi	r29, 0x02	; 2
    6b4e:	00 e0       	ldi	r16, 0x00	; 0
    6b50:	06 c0       	rjmp	.+12     	; 0x6b5e <__do_global_dtors+0x16>
    6b52:	80 2f       	mov	r24, r16
    6b54:	fe 01       	movw	r30, r28
    6b56:	0e 94 05 34 	call	0x680a	; 0x680a <__tablejump2__>
    6b5a:	21 96       	adiw	r28, 0x01	; 1
    6b5c:	01 1d       	adc	r16, r1
    6b5e:	cd 38       	cpi	r28, 0x8D	; 141
    6b60:	d1 07       	cpc	r29, r17
    6b62:	80 e0       	ldi	r24, 0x00	; 0
    6b64:	08 07       	cpc	r16, r24
    6b66:	a9 f7       	brne	.-22     	; 0x6b52 <__do_global_dtors+0xa>
    6b68:	f8 94       	cli

00006b6a <__stop_program>:
    6b6a:	ff cf       	rjmp	.-2      	; 0x6b6a <__stop_program>
