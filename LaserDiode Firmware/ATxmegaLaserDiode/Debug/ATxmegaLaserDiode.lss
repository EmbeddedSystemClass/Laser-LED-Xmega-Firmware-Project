
ATxmegaLaserDiode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006a32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002bc  00802000  00006a32  00006ac6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002f6  008022bc  008022bc  00006d82  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006d82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006db4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c50  00000000  00000000  00006df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00017eba  00000000  00000000  00007a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000657e  00000000  00000000  0001f8fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005e43  00000000  00000000  00025e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000038b0  00000000  00000000  0002bcc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000090e5  00000000  00000000  0002f570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a512  00000000  00000000  00038655  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b70  00000000  00000000  00042b67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c4 02 	jmp	0x588	; 0x588 <__dtors_end>
       4:	0c 94 74 12 	jmp	0x24e8	; 0x24e8 <__vector_1>
       8:	0c 94 a5 12 	jmp	0x254a	; 0x254a <__vector_2>
       c:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__vector_3>
      10:	0c 94 07 13 	jmp	0x260e	; 0x260e <__vector_4>
      14:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__vector_5>
      18:	0c 94 69 13 	jmp	0x26d2	; 0x26d2 <__vector_6>
      1c:	0c 94 9a 13 	jmp	0x2734	; 0x2734 <__vector_7>
      20:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <__vector_8>
      24:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__vector_9>
      28:	0c 94 2d 14 	jmp	0x285a	; 0x285a <__vector_10>
      2c:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__vector_11>
      30:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__vector_12>
      34:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <__vector_13>
      38:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__vector_14>
      3c:	0c 94 22 15 	jmp	0x2a44	; 0x2a44 <__vector_15>
      40:	0c 94 53 15 	jmp	0x2aa6	; 0x2aa6 <__vector_16>
      44:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__vector_17>
      48:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <__vector_18>
      4c:	0c 94 e6 15 	jmp	0x2bcc	; 0x2bcc <__vector_19>
      50:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <__vector_20>
      54:	0c 94 48 16 	jmp	0x2c90	; 0x2c90 <__vector_21>
      58:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <__vector_22>
      5c:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__vector_23>
      60:	0c 94 db 16 	jmp	0x2db6	; 0x2db6 <__vector_24>
      64:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <__vector_25>
      68:	0c 94 3d 17 	jmp	0x2e7a	; 0x2e7a <__vector_26>
      6c:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <__vector_27>
      70:	0c 94 9f 17 	jmp	0x2f3e	; 0x2f3e <__vector_28>
      74:	0c 94 d0 17 	jmp	0x2fa0	; 0x2fa0 <__vector_29>
      78:	0c 94 01 18 	jmp	0x3002	; 0x3002 <__vector_30>
      7c:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__vector_31>
      80:	0c 94 63 18 	jmp	0x30c6	; 0x30c6 <__vector_32>
      84:	0c 94 94 18 	jmp	0x3128	; 0x3128 <__vector_33>
      88:	0c 94 c5 18 	jmp	0x318a	; 0x318a <__vector_34>
      8c:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__vector_35>
      90:	0c 94 27 19 	jmp	0x324e	; 0x324e <__vector_36>
      94:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <__vector_37>
      98:	0c 94 89 19 	jmp	0x3312	; 0x3312 <__vector_38>
      9c:	0c 94 ba 19 	jmp	0x3374	; 0x3374 <__vector_39>
      a0:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <__vector_40>
      a4:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__vector_41>
      a8:	0c 94 4d 1a 	jmp	0x349a	; 0x349a <__vector_42>
      ac:	0c 94 7e 1a 	jmp	0x34fc	; 0x34fc <__vector_43>
      b0:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__vector_44>
      b4:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <__vector_45>
      b8:	0c 94 11 1b 	jmp	0x3622	; 0x3622 <__vector_46>
      bc:	0c 94 42 1b 	jmp	0x3684	; 0x3684 <__vector_47>
      c0:	0c 94 73 1b 	jmp	0x36e6	; 0x36e6 <__vector_48>
      c4:	0c 94 a4 1b 	jmp	0x3748	; 0x3748 <__vector_49>
      c8:	0c 94 d5 1b 	jmp	0x37aa	; 0x37aa <__vector_50>
      cc:	0c 94 06 1c 	jmp	0x380c	; 0x380c <__vector_51>
      d0:	0c 94 37 1c 	jmp	0x386e	; 0x386e <__vector_52>
      d4:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__vector_53>
      d8:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <__vector_54>
      dc:	0c 94 ca 1c 	jmp	0x3994	; 0x3994 <__vector_55>
      e0:	0c 94 fb 1c 	jmp	0x39f6	; 0x39f6 <__vector_56>
      e4:	0c 94 2c 1d 	jmp	0x3a58	; 0x3a58 <__vector_57>
      e8:	0c 94 5d 1d 	jmp	0x3aba	; 0x3aba <__vector_58>
      ec:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__vector_59>
      f0:	0c 94 bf 1d 	jmp	0x3b7e	; 0x3b7e <__vector_60>
      f4:	0c 94 f0 1d 	jmp	0x3be0	; 0x3be0 <__vector_61>
      f8:	0c 94 21 1e 	jmp	0x3c42	; 0x3c42 <__vector_62>
      fc:	0c 94 52 1e 	jmp	0x3ca4	; 0x3ca4 <__vector_63>
     100:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <__vector_64>
     104:	0c 94 b4 1e 	jmp	0x3d68	; 0x3d68 <__vector_65>
     108:	0c 94 e5 1e 	jmp	0x3dca	; 0x3dca <__vector_66>
     10c:	0c 94 16 1f 	jmp	0x3e2c	; 0x3e2c <__vector_67>
     110:	0c 94 47 1f 	jmp	0x3e8e	; 0x3e8e <__vector_68>
     114:	0c 94 78 1f 	jmp	0x3ef0	; 0x3ef0 <__vector_69>
     118:	0c 94 a9 1f 	jmp	0x3f52	; 0x3f52 <__vector_70>
     11c:	0c 94 da 1f 	jmp	0x3fb4	; 0x3fb4 <__vector_71>
     120:	0c 94 0b 20 	jmp	0x4016	; 0x4016 <__vector_72>
     124:	0c 94 3c 20 	jmp	0x4078	; 0x4078 <__vector_73>
     128:	0c 94 6d 20 	jmp	0x40da	; 0x40da <__vector_74>
     12c:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__bad_interrupt>
     130:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__bad_interrupt>
     134:	0c 94 9e 20 	jmp	0x413c	; 0x413c <__vector_77>
     138:	0c 94 cf 20 	jmp	0x419e	; 0x419e <__vector_78>
     13c:	0c 94 00 21 	jmp	0x4200	; 0x4200 <__vector_79>
     140:	0c 94 31 21 	jmp	0x4262	; 0x4262 <__vector_80>
     144:	0c 94 62 21 	jmp	0x42c4	; 0x42c4 <__vector_81>
     148:	0c 94 93 21 	jmp	0x4326	; 0x4326 <__vector_82>
     14c:	0c 94 c4 21 	jmp	0x4388	; 0x4388 <__vector_83>
     150:	0c 94 f5 21 	jmp	0x43ea	; 0x43ea <__vector_84>
     154:	0c 94 26 22 	jmp	0x444c	; 0x444c <__vector_85>
     158:	0c 94 57 22 	jmp	0x44ae	; 0x44ae <__vector_86>
     15c:	0c 94 88 22 	jmp	0x4510	; 0x4510 <__vector_87>
     160:	0c 94 b9 22 	jmp	0x4572	; 0x4572 <__vector_88>
     164:	0c 94 ea 22 	jmp	0x45d4	; 0x45d4 <__vector_89>
     168:	0c 94 1b 23 	jmp	0x4636	; 0x4636 <__vector_90>
     16c:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__vector_91>
     170:	0c 94 7d 23 	jmp	0x46fa	; 0x46fa <__vector_92>
     174:	0c 94 ae 23 	jmp	0x475c	; 0x475c <__vector_93>
     178:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__bad_interrupt>
     17c:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__bad_interrupt>
     180:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__bad_interrupt>
     184:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__bad_interrupt>
     188:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__bad_interrupt>
     18c:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__bad_interrupt>
     190:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__bad_interrupt>
     194:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__bad_interrupt>
     198:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__bad_interrupt>
     19c:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__bad_interrupt>
     1a0:	0c 94 df 23 	jmp	0x47be	; 0x47be <__vector_104>
     1a4:	0c 94 10 24 	jmp	0x4820	; 0x4820 <__vector_105>
     1a8:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__bad_interrupt>
     1ac:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__bad_interrupt>
     1b0:	0c 94 41 24 	jmp	0x4882	; 0x4882 <__vector_108>
     1b4:	0c 94 72 24 	jmp	0x48e4	; 0x48e4 <__vector_109>
     1b8:	0c 94 a3 24 	jmp	0x4946	; 0x4946 <__vector_110>
     1bc:	0c 94 d4 24 	jmp	0x49a8	; 0x49a8 <__vector_111>
     1c0:	0c 94 05 25 	jmp	0x4a0a	; 0x4a0a <__vector_112>
     1c4:	0c 94 36 25 	jmp	0x4a6c	; 0x4a6c <__vector_113>
     1c8:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__bad_interrupt>
     1cc:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__bad_interrupt>
     1d0:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__bad_interrupt>
     1d4:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__bad_interrupt>
     1d8:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__bad_interrupt>
     1dc:	0c 94 67 25 	jmp	0x4ace	; 0x4ace <__vector_119>
     1e0:	0c 94 98 25 	jmp	0x4b30	; 0x4b30 <__vector_120>
     1e4:	0c 94 c9 25 	jmp	0x4b92	; 0x4b92 <__vector_121>
     1e8:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__bad_interrupt>
     1ec:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__bad_interrupt>
     1f0:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__bad_interrupt>
     1f4:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__bad_interrupt>
     1f8:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__bad_interrupt>
     1fc:	0c 04       	cpc	r0, r12
     1fe:	56 04       	cpc	r5, r6
     200:	56 04       	cpc	r5, r6
     202:	56 04       	cpc	r5, r6
     204:	56 04       	cpc	r5, r6
     206:	56 04       	cpc	r5, r6
     208:	56 04       	cpc	r5, r6
     20a:	0f 04       	cpc	r0, r15
     20c:	43 04       	cpc	r4, r3
     20e:	56 04       	cpc	r5, r6
     210:	13 04       	cpc	r1, r3
     212:	56 04       	cpc	r5, r6
     214:	17 04       	cpc	r1, r7
     216:	56 04       	cpc	r5, r6
     218:	1b 04       	cpc	r1, r11
     21a:	56 04       	cpc	r5, r6
     21c:	1f 04       	cpc	r1, r15
     21e:	56 04       	cpc	r5, r6
     220:	56 04       	cpc	r5, r6
     222:	56 04       	cpc	r5, r6
     224:	56 04       	cpc	r5, r6
     226:	56 04       	cpc	r5, r6
     228:	23 04       	cpc	r2, r3
     22a:	27 04       	cpc	r2, r7
     22c:	2b 04       	cpc	r2, r11
     22e:	2f 04       	cpc	r2, r15
     230:	3b 04       	cpc	r3, r11
     232:	56 04       	cpc	r5, r6
     234:	33 04       	cpc	r3, r3
     236:	56 04       	cpc	r5, r6
     238:	3f 04       	cpc	r3, r15
     23a:	56 04       	cpc	r5, r6
     23c:	56 04       	cpc	r5, r6
     23e:	56 04       	cpc	r5, r6
     240:	56 04       	cpc	r5, r6
     242:	56 04       	cpc	r5, r6
     244:	56 04       	cpc	r5, r6
     246:	37 04       	cpc	r3, r7
     248:	56 04       	cpc	r5, r6
     24a:	4f 04       	cpc	r4, r15
     24c:	47 04       	cpc	r4, r7
     24e:	4b 04       	cpc	r4, r11
     250:	56 04       	cpc	r5, r6
     252:	56 04       	cpc	r5, r6
     254:	56 04       	cpc	r5, r6
     256:	56 04       	cpc	r5, r6
     258:	56 04       	cpc	r5, r6
     25a:	53 04       	cpc	r5, r3
     25c:	7a 04       	cpc	r7, r10
     25e:	80 04       	cpc	r8, r0
     260:	86 04       	cpc	r8, r6
     262:	8c 04       	cpc	r8, r12
     264:	92 04       	cpc	r9, r2
     266:	98 04       	cpc	r9, r8
     268:	9e 04       	cpc	r9, r14
     26a:	a4 04       	cpc	r10, r4
     26c:	1a 05       	cpc	r17, r10
     26e:	b1 04       	cpc	r11, r1
     270:	b7 04       	cpc	r11, r7
     272:	bd 04       	cpc	r11, r13
     274:	c3 04       	cpc	r12, r3
     276:	c9 04       	cpc	r12, r9
     278:	cf 04       	cpc	r12, r15
     27a:	d5 04       	cpc	r13, r5
     27c:	db 04       	cpc	r13, r11
     27e:	e1 04       	cpc	r14, r1
     280:	5c 0a       	sbc	r5, r28
     282:	cd 0f       	add	r28, r29
     284:	92 0b       	sbc	r25, r18
     286:	65 0a       	sbc	r6, r21
     288:	7e 0c       	add	r7, r14
     28a:	d0 0c       	add	r13, r0
     28c:	d0 0c       	add	r13, r0
     28e:	08 0c       	add	r0, r8
     290:	8f 0e       	add	r8, r31
     292:	d6 0e       	add	r13, r22
     294:	0c 0f       	add	r16, r28
     296:	40 0f       	add	r20, r16
     298:	46 0f       	add	r20, r22
     29a:	7e 0f       	add	r23, r30
     29c:	ab 0f       	add	r26, r27
     29e:	c8 0f       	add	r28, r24
     2a0:	3f 0e       	add	r3, r31
     2a2:	95 0d       	add	r25, r5
     2a4:	e7 0d       	add	r30, r7
     2a6:	0f 29       	or	r16, r15
     2a8:	0f 29       	or	r16, r15
     2aa:	17 29       	or	r17, r7
     2ac:	1f 29       	or	r17, r15
     2ae:	26 29       	or	r18, r6
     2b0:	75 29       	or	r23, r5
     2b2:	7c 29       	or	r23, r12
     2b4:	a8 29       	or	r26, r8
     2b6:	a8 29       	or	r26, r8
     2b8:	a7 29       	or	r26, r7
     2ba:	a7 29       	or	r26, r7

000002bc <__trampolines_start>:
     2bc:	0c 94 16 28 	jmp	0x502c	; 0x502c <_ZN16CMBEventsHandler13FillVarDataRqEjj>
     2c0:	0c 94 2f 2b 	jmp	0x565e	; 0x565e <_ZN10CDGUSUSART14IsTransmittingEv>
     2c4:	0c 94 94 2f 	jmp	0x5f28	; 0x5f28 <_ZN7CTimerD8SetCOMPAEj>
     2c8:	0c 94 79 2f 	jmp	0x5ef2	; 0x5ef2 <_ZN7CTimerD4StopEv>
     2cc:	0c 94 07 2f 	jmp	0x5e0e	; 0x5e0e <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     2d0:	0c 94 28 30 	jmp	0x6050	; 0x6050 <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     2d4:	0c 94 34 31 	jmp	0x6268	; 0x6268 <_ZN7CTimerF8SetCOMPCEj>
     2d8:	0c 94 f0 2f 	jmp	0x5fe0	; 0x5fe0 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     2dc:	0c 94 2f 31 	jmp	0x625e	; 0x625e <_ZN7CTimerF8SetCOMPBEj>
     2e0:	0c 94 de 2f 	jmp	0x5fbc	; 0x5fbc <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     2e4:	0c 94 4f 2b 	jmp	0x569e	; 0x569e <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>
     2e8:	0c 94 13 2e 	jmp	0x5c26	; 0x5c26 <_ZN7CTimerC8SetCOMPBEj>
     2ec:	0c 94 86 04 	jmp	0x90c	; 0x90c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x5e>
     2f0:	0c 94 39 31 	jmp	0x6272	; 0x6272 <_ZN7CTimerF8SetCOMPDEj>
     2f4:	0c 94 02 30 	jmp	0x6004	; 0x6004 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     2f8:	0c 94 a8 29 	jmp	0x5350	; 0x5350 <_ZN9CMBSender13OnReceiveByteEh+0x154>
     2fc:	0c 94 7e 27 	jmp	0x4efc	; 0x4efc <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>
     300:	0c 94 27 04 	jmp	0x84e	; 0x84e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x72>
     304:	0c 94 4c 30 	jmp	0x6098	; 0x6098 <_ZN8CTimerD14StopEv>
     308:	0c 94 0c 0f 	jmp	0x1e18	; 0x1e18 <_ZN16CLaserControlApp3RunEv+0x9d4>
     30c:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x186>
     310:	0c 94 72 28 	jmp	0x50e4	; 0x50e4 <_ZN9CMBSender18OnRegisterReceivedEhPhh>
     314:	0c 94 37 2a 	jmp	0x546e	; 0x546e <_ZN9CMBSender18OnUSARTTxInterruptEPv>
     318:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <_ZN16CLaserControlApp12OnINT0StaticEPv>
     31c:	0c 94 4b 04 	jmp	0x896	; 0x896 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xba>
     320:	0c 94 8c 04 	jmp	0x918	; 0x918 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x6a>
     324:	0c 94 88 2f 	jmp	0x5f10	; 0x5f10 <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>
     328:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <_ZN16CLaserControlApp3RunEv+0x8da>
     32c:	0c 94 ce 2e 	jmp	0x5d9c	; 0x5d9c <_ZN8CTimerC15ResetEv>
     330:	0c 94 3f 30 	jmp	0x607e	; 0x607e <_ZN8CTimerD15StartEj>
     334:	0c 94 a8 2f 	jmp	0x5f50	; 0x5f50 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     338:	0c 94 b1 04 	jmp	0x962	; 0x962 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xb4>
     33c:	0c 94 d8 2e 	jmp	0x5db0	; 0x5db0 <_ZN8CTimerC113EnableChannelE19TIMER_CHANNELS_ENUM>
     340:	0c 94 29 2b 	jmp	0x5652	; 0x5652 <_ZN10CDGUSUSART15GetReceivedByteEv>
     344:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xfc>
     348:	0c 94 74 31 	jmp	0x62e8	; 0x62e8 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     34c:	0c 94 37 2b 	jmp	0x566e	; 0x566e <_ZN10CDGUSUSART11IsReceivingEv>
     350:	0c 94 92 04 	jmp	0x924	; 0x924 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x76>
     354:	0c 94 fb 2d 	jmp	0x5bf6	; 0x5bf6 <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>
     358:	0c 94 43 04 	jmp	0x886	; 0x886 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xaa>
     35c:	0c 94 1c 31 	jmp	0x6238	; 0x6238 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>
     360:	0c 94 39 28 	jmp	0x5072	; 0x5072 <_ZN16CMBEventsHandler15AllocateBuffersEjj>
     364:	0c 94 c9 04 	jmp	0x992	; 0x992 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xe4>
     368:	0c 94 2a 31 	jmp	0x6254	; 0x6254 <_ZN7CTimerF8SetCOMPAEj>
     36c:	0c 94 cc 2f 	jmp	0x5f98	; 0x5f98 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     370:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <_ZN4CSPI16StaticOnTransmitEPv>
     374:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <_ZN16CLaserControlApp3RunEv+0x86>
     378:	0c 94 2b 04 	jmp	0x856	; 0x856 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x7a>
     37c:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <_ZN7CTimerD8SetCOMPCEj>
     380:	0c 94 99 2f 	jmp	0x5f32	; 0x5f32 <_ZN7CTimerD8SetCOMPBEj>
     384:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xd0>
     388:	0c 94 1b 04 	jmp	0x836	; 0x836 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x5a>
     38c:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <_ZN16CLaserControlApp3RunEv+0x968>
     390:	0c 94 a7 29 	jmp	0x534e	; 0x534e <_ZN9CMBSender13OnReceiveByteEh+0x152>
     394:	0c 94 a4 04 	jmp	0x948	; 0x948 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x9a>
     398:	0c 94 81 2f 	jmp	0x5f02	; 0x5f02 <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>
     39c:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <_ZN16CLaserControlApp3RunEv+0x2e0>
     3a0:	0c 94 80 04 	jmp	0x900	; 0x900 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x52>
     3a4:	0c 94 7e 0f 	jmp	0x1efc	; 0x1efc <_ZN16CLaserControlApp3RunEv+0xab8>
     3a8:	0c 94 46 2b 	jmp	0x568c	; 0x568c <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>
     3ac:	0c 94 7b 30 	jmp	0x60f6	; 0x60f6 <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     3b0:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>
     3b4:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x46>
     3b8:	0c 94 40 0f 	jmp	0x1e80	; 0x1e80 <_ZN16CLaserControlApp3RunEv+0xa3c>
     3bc:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x108>
     3c0:	0c 94 6c 30 	jmp	0x60d8	; 0x60d8 <_ZN8CTimerD19SetPeriodEj>
     3c4:	0c 94 33 04 	jmp	0x866	; 0x866 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x8a>
     3c8:	0c 94 19 2f 	jmp	0x5e32	; 0x5e32 <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     3cc:	0c 94 17 29 	jmp	0x522e	; 0x522e <_ZN9CMBSender13OnReceiveByteEh+0x32>
     3d0:	0c 94 ce 27 	jmp	0x4f9c	; 0x4f9c <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>
     3d4:	0c 94 09 2e 	jmp	0x5c12	; 0x5c12 <_ZN7CTimerC9SetPeriodEj>
     3d8:	0c 94 c8 0f 	jmp	0x1f90	; 0x1f90 <_ZN16CLaserControlApp3RunEv+0xb4c>
     3dc:	0c 94 23 04 	jmp	0x846	; 0x846 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x6a>
     3e0:	0c 94 d0 0c 	jmp	0x19a0	; 0x19a0 <_ZN16CLaserControlApp3RunEv+0x55c>
     3e4:	0c 94 61 2b 	jmp	0x56c2	; 0x56c2 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>
     3e8:	0c 94 a2 08 	jmp	0x1144	; 0x1144 <_GLOBAL__sub_I_timer>
     3ec:	0c 94 26 29 	jmp	0x524c	; 0x524c <_ZN9CMBSender13OnReceiveByteEh+0x50>
     3f0:	0c 94 fa 25 	jmp	0x4bf4	; 0x4bf4 <__cxa_pure_virtual>
     3f4:	0c 94 54 30 	jmp	0x60a8	; 0x60a8 <_ZN8CTimerD15ResetEv>
     3f8:	0c 94 02 2e 	jmp	0x5c04	; 0x5c04 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>
     3fc:	0c 94 0c 04 	jmp	0x818	; 0x818 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x3c>
     400:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <_ZN16CLaserControlApp19OnPWMTimerOVFStaticEPv>
     404:	0c 94 62 31 	jmp	0x62c4	; 0x62c4 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     408:	0c 94 a3 2f 	jmp	0x5f46	; 0x5f46 <_ZN7CTimerD8SetCOMPDEj>
     40c:	0c 94 3e 31 	jmp	0x627c	; 0x627c <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     410:	0c 94 8f 2f 	jmp	0x5f1e	; 0x5f1e <_ZN7CTimerD9SetPeriodEj>
     414:	0c 94 58 2e 	jmp	0x5cb0	; 0x5cb0 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     418:	0c 94 86 31 	jmp	0x630c	; 0x630c <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     41c:	0c 94 a2 2e 	jmp	0x5d44	; 0x5d44 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     420:	0c 94 cb 2d 	jmp	0x5b96	; 0x5b96 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     424:	0c 94 0d 31 	jmp	0x621a	; 0x621a <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
     428:	0c 94 ab 29 	jmp	0x5356	; 0x5356 <_ZN9CMBSender18OnUSARTRxInterruptEPv>
     42c:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <_ZN16CLaserControlApp3RunEv+0xb56>
     430:	0c 94 cf 04 	jmp	0x99e	; 0x99e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xf0>
     434:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xca>
     438:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <_ZN16CLaserControlApp3RunEv+0x78a>
     43c:	0c 94 50 31 	jmp	0x62a0	; 0x62a0 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     440:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <_ZN16CLaserControlApp3RunEv+0xa48>
     444:	0c 94 9f 30 	jmp	0x613e	; 0x613e <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     448:	0c 94 d2 29 	jmp	0x53a4	; 0x53a4 <_ZN9CMBSender18OnTimeoutInterruptEPv>
     44c:	0c 94 98 04 	jmp	0x930	; 0x930 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x82>
     450:	0c 94 6a 2e 	jmp	0x5cd4	; 0x5cd4 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     454:	0c 94 2a 26 	jmp	0x4c54	; 0x4c54 <_GLOBAL__sub_D_dacSPI>
     458:	0c 94 bd 04 	jmp	0x97a	; 0x97a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xcc>
     45c:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <_GLOBAL__sub_D_timer>
     460:	0c 94 07 31 	jmp	0x620e	; 0x620e <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
     464:	0c 94 d7 30 	jmp	0x61ae	; 0x61ae <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     468:	0c 94 63 28 	jmp	0x50c6	; 0x50c6 <_ZN9CMBSender18OnVariableReceivedEjPjj>
     46c:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     470:	0c 94 c3 04 	jmp	0x986	; 0x986 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xd8>
     474:	0c 94 25 31 	jmp	0x624a	; 0x624a <_ZN7CTimerF9SetPeriodEj>
     478:	0c 94 ba 2f 	jmp	0x5f74	; 0x5f74 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     47c:	0c 94 fd 25 	jmp	0x4bfa	; 0x4bfa <_GLOBAL__sub_I_dacSPI>
     480:	0c 94 58 2b 	jmp	0x56b0	; 0x56b0 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>
     484:	0c 94 95 0d 	jmp	0x1b2a	; 0x1b2a <_ZN16CLaserControlApp3RunEv+0x6e6>
     488:	0c 94 7c 29 	jmp	0x52f8	; 0x52f8 <_ZN9CMBSender13OnReceiveByteEh+0xfc>
     48c:	0c 94 5e 30 	jmp	0x60bc	; 0x60bc <_ZN8CTimerD113EnableChannelE19TIMER_CHANNELS_ENUM>
     490:	0c 94 0f 29 	jmp	0x521e	; 0x521e <_ZN9CMBSender13OnReceiveByteEh+0x22>
     494:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>
     498:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <_ZN16CLaserControlApp3RunEv+0xb12>
     49c:	0c 94 76 30 	jmp	0x60ec	; 0x60ec <_ZN8CTimerD18SetCOMPBEj>
     4a0:	0c 94 3b 04 	jmp	0x876	; 0x876 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x9a>
     4a4:	0c 94 af 27 	jmp	0x4f5e	; 0x4f5e <_ZN16CMBEventsHandler13FillRegDataRqEhh>
     4a8:	0c 94 f0 2e 	jmp	0x5de0	; 0x5de0 <_ZN8CTimerC18SetCOMPBEj>
     4ac:	0c 94 f2 30 	jmp	0x61e4	; 0x61e4 <_ZN7CTimerF5StartEj>
     4b0:	0c 94 df 2e 	jmp	0x5dbe	; 0x5dbe <_ZN8CTimerC114DisableChannelE19TIMER_CHANNELS_ENUM>
     4b4:	0c 94 65 30 	jmp	0x60ca	; 0x60ca <_ZN8CTimerD114DisableChannelE19TIMER_CHANNELS_ENUM>
     4b8:	0c 94 98 31 	jmp	0x6330	; 0x6330 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     4bc:	0c 94 18 2e 	jmp	0x5c30	; 0x5c30 <_ZN7CTimerC8SetCOMPCEj>
     4c0:	0c 94 49 06 	jmp	0xc92	; 0xc92 <_ZN16CLaserControlApp22OnLaserTimerStopStaticEPv>
     4c4:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <_ZN7CTimerC4StopEv>
     4c8:	0c 94 e6 2d 	jmp	0x5bcc	; 0x5bcc <_ZN7CTimerC5StartEj>
     4cc:	0c 94 37 04 	jmp	0x86e	; 0x86e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x92>
     4d0:	0c 94 51 06 	jmp	0xca2	; 0xca2 <_ZN16CLaserControlApp19OnPWMTimerCMPStaticEPv>
     4d4:	0c 94 75 29 	jmp	0x52ea	; 0x52ea <_ZN9CMBSender13OnReceiveByteEh+0xee>
     4d8:	0c 94 9e 04 	jmp	0x93c	; 0x93c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x8e>
     4dc:	0c 94 ee 2a 	jmp	0x55dc	; 0x55dc <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
     4e0:	0c 94 f5 2e 	jmp	0x5dea	; 0x5dea <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     4e4:	0c 94 4f 04 	jmp	0x89e	; 0x89e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xc2>
     4e8:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>
     4ec:	0c 94 eb 2a 	jmp	0x55d6	; 0x55d6 <_ZN9CMBSender21OnTransactionCallbackEPhj>
     4f0:	0c 94 47 04 	jmp	0x88e	; 0x88e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xb2>
     4f4:	0c 94 13 04 	jmp	0x826	; 0x826 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x4a>
     4f8:	0c 94 34 2e 	jmp	0x5c68	; 0x5c68 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     4fc:	0c 94 71 30 	jmp	0x60e2	; 0x60e2 <_ZN8CTimerD18SetCOMPAEj>
     500:	0c 94 b1 30 	jmp	0x6162	; 0x6162 <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     504:	0c 94 7e 0c 	jmp	0x18fc	; 0x18fc <_ZN16CLaserControlApp3RunEv+0x4b8>
     508:	0c 94 2b 2f 	jmp	0x5e56	; 0x5e56 <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     50c:	0c 94 14 31 	jmp	0x6228	; 0x6228 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
     510:	0c 94 0e 2e 	jmp	0x5c1c	; 0x5c1c <_ZN7CTimerC8SetCOMPAEj>
     514:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <_ZN16CLaserControlApp3RunEv+0x3cc>
     518:	0c 94 e6 2e 	jmp	0x5dcc	; 0x5dcc <_ZN8CTimerC19SetPeriodEj>
     51c:	0c 94 7c 2e 	jmp	0x5cf8	; 0x5cf8 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     520:	0c 94 c6 2e 	jmp	0x5d8c	; 0x5d8c <_ZN8CTimerC14StopEv>
     524:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <_ZN16CLaserControlApp3RunEv+0x83a>
     528:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <_ZN16CLaserControlApp3RunEv+0x74>
     52c:	0c 94 22 2e 	jmp	0x5c44	; 0x5c44 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     530:	0c 94 3e 2b 	jmp	0x567c	; 0x567c <_ZN10CDGUSUSART11IsDataEmptyEv>
     534:	0c 94 eb 2e 	jmp	0x5dd6	; 0x5dd6 <_ZN8CTimerC18SetCOMPAEj>
     538:	0c 94 6c 2f 	jmp	0x5ed8	; 0x5ed8 <_ZN7CTimerD5StartEj>
     53c:	0c 94 46 2e 	jmp	0x5c8c	; 0x5c8c <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     540:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x114>
     544:	0c 94 17 04 	jmp	0x82e	; 0x82e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x52>
     548:	0c 94 ed 03 	jmp	0x7da	; 0x7da <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>
     54c:	0c 94 b9 2e 	jmp	0x5d72	; 0x5d72 <_ZN8CTimerC15StartEj>
     550:	0c 94 1d 2e 	jmp	0x5c3a	; 0x5c3a <_ZN7CTimerC8SetCOMPDEj>
     554:	0c 94 b7 04 	jmp	0x96e	; 0x96e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xc0>
     558:	0c 94 2c 2b 	jmp	0x5658	; 0x5658 <_ZN10CDGUSUSART19SetTransmittingByteEh>
     55c:	0c 94 3f 04 	jmp	0x87e	; 0x87e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xa2>
     560:	0c 94 0d 11 	jmp	0x221a	; 0x221a <_ZN16CLaserControlApp13OnTimerStaticEPv>
     564:	0c 94 54 28 	jmp	0x50a8	; 0x50a8 <_ZN16CMBEventsHandler11FreeBuffersEv>
     568:	0c 94 2f 04 	jmp	0x85e	; 0x85e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x82>
     56c:	0c 94 8d 30 	jmp	0x611a	; 0x611a <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     570:	0c 94 0f 04 	jmp	0x81e	; 0x81e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x42>
     574:	0c 94 ff 30 	jmp	0x61fe	; 0x61fe <_ZN7CTimerF4StopEv>
     578:	0c 94 1f 04 	jmp	0x83e	; 0x83e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x62>
     57c:	0c 94 1f 29 	jmp	0x523e	; 0x523e <_ZN9CMBSender13OnReceiveByteEh+0x42>

00000580 <__ctors_start>:
     580:	a2 08       	sbc	r10, r2
     582:	fd 25       	eor	r31, r13

00000584 <__ctors_end>:
     584:	ab 08       	sbc	r10, r11
     586:	2a 26       	eor	r2, r26

00000588 <__dtors_end>:
     588:	11 24       	eor	r1, r1
     58a:	1f be       	out	0x3f, r1	; 63
     58c:	cf ef       	ldi	r28, 0xFF	; 255
     58e:	cd bf       	out	0x3d, r28	; 61
     590:	df e3       	ldi	r29, 0x3F	; 63
     592:	de bf       	out	0x3e, r29	; 62
     594:	00 e0       	ldi	r16, 0x00	; 0
     596:	0c bf       	out	0x3c, r16	; 60

00000598 <__do_copy_data>:
     598:	12 e2       	ldi	r17, 0x22	; 34
     59a:	a0 e0       	ldi	r26, 0x00	; 0
     59c:	b0 e2       	ldi	r27, 0x20	; 32
     59e:	e2 e3       	ldi	r30, 0x32	; 50
     5a0:	fa e6       	ldi	r31, 0x6A	; 106
     5a2:	00 e0       	ldi	r16, 0x00	; 0
     5a4:	0b bf       	out	0x3b, r16	; 59
     5a6:	02 c0       	rjmp	.+4      	; 0x5ac <__do_copy_data+0x14>
     5a8:	07 90       	elpm	r0, Z+
     5aa:	0d 92       	st	X+, r0
     5ac:	ac 3b       	cpi	r26, 0xBC	; 188
     5ae:	b1 07       	cpc	r27, r17
     5b0:	d9 f7       	brne	.-10     	; 0x5a8 <__do_copy_data+0x10>

000005b2 <__do_clear_bss>:
     5b2:	25 e2       	ldi	r18, 0x25	; 37
     5b4:	ac eb       	ldi	r26, 0xBC	; 188
     5b6:	b2 e2       	ldi	r27, 0x22	; 34
     5b8:	01 c0       	rjmp	.+2      	; 0x5bc <.do_clear_bss_start>

000005ba <.do_clear_bss_loop>:
     5ba:	1d 92       	st	X+, r1

000005bc <.do_clear_bss_start>:
     5bc:	a2 3b       	cpi	r26, 0xB2	; 178
     5be:	b2 07       	cpc	r27, r18
     5c0:	e1 f7       	brne	.-8      	; 0x5ba <.do_clear_bss_loop>

000005c2 <__do_global_ctors>:
     5c2:	12 e0       	ldi	r17, 0x02	; 2
     5c4:	c2 ec       	ldi	r28, 0xC2	; 194
     5c6:	d2 e0       	ldi	r29, 0x02	; 2
     5c8:	00 e0       	ldi	r16, 0x00	; 0
     5ca:	06 c0       	rjmp	.+12     	; 0x5d8 <__do_global_ctors+0x16>
     5cc:	21 97       	sbiw	r28, 0x01	; 1
     5ce:	01 09       	sbc	r16, r1
     5d0:	80 2f       	mov	r24, r16
     5d2:	fe 01       	movw	r30, r28
     5d4:	0e 94 68 33 	call	0x66d0	; 0x66d0 <__tablejump2__>
     5d8:	c0 3c       	cpi	r28, 0xC0	; 192
     5da:	d1 07       	cpc	r29, r17
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	08 07       	cpc	r16, r24
     5e0:	a9 f7       	brne	.-22     	; 0x5cc <__do_global_ctors+0xa>
     5e2:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <main>
     5e6:	0c 94 07 35 	jmp	0x6a0e	; 0x6a0e <__do_global_dtors>

000005ea <__bad_interrupt>:
     5ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005ee <_ZN13CDGUSDatabaseC1Ev>:
	// Read from SRAM
	m_cpSender->StartMODBUSVariableTransaction(vp_addres, length);
	m_cpSender->WaitMODBUSTransmitter();
	m_cpSender->WaitMODBUSListener();
	data_transaction = (uint16_t*)data;
}
     5ee:	08 95       	ret

000005f0 <_ZN13CDGUSDatabaseD1Ev>:
     5f0:	08 95       	ret

000005f2 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>:
     5f2:	fc 01       	movw	r30, r24
     5f4:	62 83       	std	Z+2, r22	; 0x02
     5f6:	73 83       	std	Z+3, r23	; 0x03
     5f8:	94 2f       	mov	r25, r20
     5fa:	85 2f       	mov	r24, r21
     5fc:	84 83       	std	Z+4, r24	; 0x04
     5fe:	95 83       	std	Z+5, r25	; 0x05
     600:	46 83       	std	Z+6, r20	; 0x06
     602:	57 83       	std	Z+7, r21	; 0x07
     604:	10 82       	st	Z, r1
     606:	11 82       	std	Z+1, r1	; 0x01
     608:	08 95       	ret

0000060a <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>:

void CDGUSDatabase::MapDatabaseToWrite(uint16_t vp, uint32_t addr, uint16_t length)
{
     60a:	8f 92       	push	r8
     60c:	9f 92       	push	r9
     60e:	af 92       	push	r10
     610:	bf 92       	push	r11
     612:	ef 92       	push	r14
     614:	ff 92       	push	r15
     616:	0f 93       	push	r16
     618:	1f 93       	push	r17
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	cd b7       	in	r28, 0x3d	; 61
     620:	de b7       	in	r29, 0x3e	; 62
     622:	2a 97       	sbiw	r28, 0x0a	; 10
     624:	cd bf       	out	0x3d, r28	; 61
     626:	de bf       	out	0x3e, r29	; 62
     628:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     62a:	8a e5       	ldi	r24, 0x5A	; 90
     62c:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0x50;
     62e:	80 e5       	ldi	r24, 0x50	; 80
     630:	8a 83       	std	Y+2, r24	; 0x02
	//FLASH.addr = swap32(addr);
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     632:	85 2e       	mov	r8, r21
     634:	99 24       	eor	r9, r9
     636:	aa 24       	eor	r10, r10
     638:	bb 24       	eor	r11, r11
     63a:	b2 2f       	mov	r27, r18
     63c:	aa 27       	eor	r26, r26
     63e:	99 27       	eor	r25, r25
     640:	88 27       	eor	r24, r24
     642:	88 29       	or	r24, r8
     644:	99 29       	or	r25, r9
     646:	aa 29       	or	r26, r10
     648:	bb 29       	or	r27, r11
     64a:	49 01       	movw	r8, r18
     64c:	5a 01       	movw	r10, r20
     64e:	88 24       	eor	r8, r8
     650:	aa 24       	eor	r10, r10
     652:	bb 24       	eor	r11, r11
     654:	ba 2c       	mov	r11, r10
     656:	a9 2c       	mov	r10, r9
     658:	98 2c       	mov	r9, r8
     65a:	88 24       	eor	r8, r8
     65c:	88 29       	or	r24, r8
     65e:	99 29       	or	r25, r9
     660:	aa 29       	or	r26, r10
     662:	bb 29       	or	r27, r11
     664:	49 01       	movw	r8, r18
     666:	5a 01       	movw	r10, r20
     668:	88 24       	eor	r8, r8
     66a:	99 24       	eor	r9, r9
     66c:	bb 24       	eor	r11, r11
     66e:	89 2c       	mov	r8, r9
     670:	9a 2c       	mov	r9, r10
     672:	ab 2c       	mov	r10, r11
     674:	bb 24       	eor	r11, r11
     676:	88 29       	or	r24, r8
     678:	99 29       	or	r25, r9
     67a:	aa 29       	or	r26, r10
     67c:	bb 29       	or	r27, r11
     67e:	8b 83       	std	Y+3, r24	; 0x03
     680:	9c 83       	std	Y+4, r25	; 0x04
     682:	ad 83       	std	Y+5, r26	; 0x05
     684:	be 83       	std	Y+6, r27	; 0x06
	//FLASH.addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) | ((addr & 0xff0000) << 8) | ((addr & 0xff000000) >> 8);
	//FLASH.addr = addr;
	FLASH.vp = (vp >> 8) | (vp << 8);
     686:	76 27       	eor	r23, r22
     688:	67 27       	eor	r22, r23
     68a:	76 27       	eor	r23, r22
     68c:	6f 83       	std	Y+7, r22	; 0x07
     68e:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     690:	10 27       	eor	r17, r16
     692:	01 27       	eor	r16, r17
     694:	10 27       	eor	r17, r16
     696:	09 87       	std	Y+9, r16	; 0x09
     698:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     69a:	2a e0       	ldi	r18, 0x0A	; 10
     69c:	ae 01       	movw	r20, r28
     69e:	4f 5f       	subi	r20, 0xFF	; 255
     6a0:	5f 4f       	sbci	r21, 0xFF	; 255
     6a2:	66 e5       	ldi	r22, 0x56	; 86
     6a4:	f7 01       	movw	r30, r14
     6a6:	82 81       	ldd	r24, Z+2	; 0x02
     6a8:	93 81       	ldd	r25, Z+3	; 0x03
     6aa:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     6ae:	f7 01       	movw	r30, r14
     6b0:	82 81       	ldd	r24, Z+2	; 0x02
     6b2:	93 81       	ldd	r25, Z+3	; 0x03
     6b4:	0e 94 9d 2a 	call	0x553a	; 0x553a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     6b8:	2a 96       	adiw	r28, 0x0a	; 10
     6ba:	cd bf       	out	0x3d, r28	; 61
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	ff 90       	pop	r15
     6c8:	ef 90       	pop	r14
     6ca:	bf 90       	pop	r11
     6cc:	af 90       	pop	r10
     6ce:	9f 90       	pop	r9
     6d0:	8f 90       	pop	r8
     6d2:	08 95       	ret

000006d4 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>:

void CDGUSDatabase::MapDatabaseToRead(uint16_t vp, uint32_t addr, uint16_t length)
{
     6d4:	8f 92       	push	r8
     6d6:	9f 92       	push	r9
     6d8:	af 92       	push	r10
     6da:	bf 92       	push	r11
     6dc:	ef 92       	push	r14
     6de:	ff 92       	push	r15
     6e0:	0f 93       	push	r16
     6e2:	1f 93       	push	r17
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	2a 97       	sbiw	r28, 0x0a	; 10
     6ee:	cd bf       	out	0x3d, r28	; 61
     6f0:	de bf       	out	0x3e, r29	; 62
     6f2:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     6f4:	8a e5       	ldi	r24, 0x5A	; 90
     6f6:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0xA0;
     6f8:	80 ea       	ldi	r24, 0xA0	; 160
     6fa:	8a 83       	std	Y+2, r24	; 0x02
	//FLASH.addr = swap32(addr);
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     6fc:	85 2e       	mov	r8, r21
     6fe:	99 24       	eor	r9, r9
     700:	aa 24       	eor	r10, r10
     702:	bb 24       	eor	r11, r11
     704:	b2 2f       	mov	r27, r18
     706:	aa 27       	eor	r26, r26
     708:	99 27       	eor	r25, r25
     70a:	88 27       	eor	r24, r24
     70c:	88 29       	or	r24, r8
     70e:	99 29       	or	r25, r9
     710:	aa 29       	or	r26, r10
     712:	bb 29       	or	r27, r11
     714:	49 01       	movw	r8, r18
     716:	5a 01       	movw	r10, r20
     718:	88 24       	eor	r8, r8
     71a:	aa 24       	eor	r10, r10
     71c:	bb 24       	eor	r11, r11
     71e:	ba 2c       	mov	r11, r10
     720:	a9 2c       	mov	r10, r9
     722:	98 2c       	mov	r9, r8
     724:	88 24       	eor	r8, r8
     726:	88 29       	or	r24, r8
     728:	99 29       	or	r25, r9
     72a:	aa 29       	or	r26, r10
     72c:	bb 29       	or	r27, r11
     72e:	49 01       	movw	r8, r18
     730:	5a 01       	movw	r10, r20
     732:	88 24       	eor	r8, r8
     734:	99 24       	eor	r9, r9
     736:	bb 24       	eor	r11, r11
     738:	89 2c       	mov	r8, r9
     73a:	9a 2c       	mov	r9, r10
     73c:	ab 2c       	mov	r10, r11
     73e:	bb 24       	eor	r11, r11
     740:	88 29       	or	r24, r8
     742:	99 29       	or	r25, r9
     744:	aa 29       	or	r26, r10
     746:	bb 29       	or	r27, r11
     748:	8b 83       	std	Y+3, r24	; 0x03
     74a:	9c 83       	std	Y+4, r25	; 0x04
     74c:	ad 83       	std	Y+5, r26	; 0x05
     74e:	be 83       	std	Y+6, r27	; 0x06
	//FLASH.addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) | ((addr & 0xff0000) << 8) | ((addr & 0xff000000) >> 8);
	//FLASH.addr = addr;
	FLASH.vp = (vp >> 8) | (vp << 8);
     750:	76 27       	eor	r23, r22
     752:	67 27       	eor	r22, r23
     754:	76 27       	eor	r23, r22
     756:	6f 83       	std	Y+7, r22	; 0x07
     758:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     75a:	10 27       	eor	r17, r16
     75c:	01 27       	eor	r16, r17
     75e:	10 27       	eor	r17, r16
     760:	09 87       	std	Y+9, r16	; 0x09
     762:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     764:	2a e0       	ldi	r18, 0x0A	; 10
     766:	ae 01       	movw	r20, r28
     768:	4f 5f       	subi	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	66 e5       	ldi	r22, 0x56	; 86
     76e:	f7 01       	movw	r30, r14
     770:	82 81       	ldd	r24, Z+2	; 0x02
     772:	93 81       	ldd	r25, Z+3	; 0x03
     774:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     778:	f7 01       	movw	r30, r14
     77a:	82 81       	ldd	r24, Z+2	; 0x02
     77c:	93 81       	ldd	r25, Z+3	; 0x03
     77e:	0e 94 9d 2a 	call	0x553a	; 0x553a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     782:	2a 96       	adiw	r28, 0x0a	; 10
     784:	cd bf       	out	0x3d, r28	; 61
     786:	de bf       	out	0x3e, r29	; 62
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	ff 90       	pop	r15
     792:	ef 90       	pop	r14
     794:	bf 90       	pop	r11
     796:	af 90       	pop	r10
     798:	9f 90       	pop	r9
     79a:	8f 90       	pop	r8
     79c:	08 95       	ret

0000079e <_ZN13CDGUSDatabase5UnMapEv>:

void CDGUSDatabase::UnMap()
{
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	1f 92       	push	r1
     7a8:	cd b7       	in	r28, 0x3d	; 61
     7aa:	de b7       	in	r29, 0x3e	; 62
     7ac:	8c 01       	movw	r16, r24
	uint8_t en = 0x00;
     7ae:	19 82       	std	Y+1, r1	; 0x01
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&en, sizeof(en));
     7b0:	21 e0       	ldi	r18, 0x01	; 1
     7b2:	ae 01       	movw	r20, r28
     7b4:	4f 5f       	subi	r20, 0xFF	; 255
     7b6:	5f 4f       	sbci	r21, 0xFF	; 255
     7b8:	66 e5       	ldi	r22, 0x56	; 86
     7ba:	fc 01       	movw	r30, r24
     7bc:	82 81       	ldd	r24, Z+2	; 0x02
     7be:	93 81       	ldd	r25, Z+3	; 0x03
     7c0:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     7c4:	f8 01       	movw	r30, r16
     7c6:	82 81       	ldd	r24, Z+2	; 0x02
     7c8:	93 81       	ldd	r25, Z+3	; 0x03
     7ca:	0e 94 9d 2a 	call	0x553a	; 0x553a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     7ce:	0f 90       	pop	r0
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	08 95       	ret

000007da <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
	laserBoard.PWMOff();
}

void CLaserControlApp::OnPWMTimerCMP()
{
	laserBoard.PWMOn();
     7da:	08 95       	ret

000007dc <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
     7dc:	dc 01       	movw	r26, r24
     7de:	63 30       	cpi	r22, 0x03	; 3
     7e0:	31 f4       	brne	.+12     	; 0x7ee <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x12>
     7e2:	fa 01       	movw	r30, r20
     7e4:	81 81       	ldd	r24, Z+1	; 0x01
     7e6:	1e 96       	adiw	r26, 0x0e	; 14
     7e8:	8c 93       	st	X, r24
     7ea:	1e 97       	sbiw	r26, 0x0e	; 14
     7ec:	06 c0       	rjmp	.+12     	; 0x7fa <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
     7ee:	66 35       	cpi	r22, 0x56	; 86
     7f0:	21 f4       	brne	.+8      	; 0x7fa <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x1e>
     7f2:	fa 01       	movw	r30, r20
     7f4:	80 81       	ld	r24, Z
     7f6:	80 93 bd 22 	sts	0x22BD, r24
     7fa:	1e 96       	adiw	r26, 0x0e	; 14
     7fc:	4c 91       	ld	r20, X
     7fe:	1e 97       	sbiw	r26, 0x0e	; 14
     800:	50 e0       	ldi	r21, 0x00	; 0
     802:	40 33       	cpi	r20, 0x30	; 48
     804:	51 05       	cpc	r21, r1
     806:	08 f0       	brcs	.+2      	; 0x80a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x2e>
     808:	51 c0       	rjmp	.+162    	; 0x8ac <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xd0>
     80a:	fa 01       	movw	r30, r20
     80c:	88 27       	eor	r24, r24
     80e:	e2 50       	subi	r30, 0x02	; 2
     810:	ff 4f       	sbci	r31, 0xFF	; 255
     812:	8f 4f       	sbci	r24, 0xFF	; 255
     814:	0c 94 68 33 	jmp	0x66d0	; 0x66d0 <__tablejump2__>
     818:	1c 96       	adiw	r26, 0x0c	; 12
     81a:	1c 92       	st	X, r1
     81c:	08 95       	ret
     81e:	82 e0       	ldi	r24, 0x02	; 2
     820:	1c 96       	adiw	r26, 0x0c	; 12
     822:	8c 93       	st	X, r24
     824:	08 95       	ret
     826:	83 e0       	ldi	r24, 0x03	; 3
     828:	1c 96       	adiw	r26, 0x0c	; 12
     82a:	8c 93       	st	X, r24
     82c:	08 95       	ret
     82e:	84 e0       	ldi	r24, 0x04	; 4
     830:	1c 96       	adiw	r26, 0x0c	; 12
     832:	8c 93       	st	X, r24
     834:	08 95       	ret
     836:	85 e0       	ldi	r24, 0x05	; 5
     838:	1c 96       	adiw	r26, 0x0c	; 12
     83a:	8c 93       	st	X, r24
     83c:	08 95       	ret
     83e:	86 e0       	ldi	r24, 0x06	; 6
     840:	1c 96       	adiw	r26, 0x0c	; 12
     842:	8c 93       	st	X, r24
     844:	08 95       	ret
     846:	8a e0       	ldi	r24, 0x0A	; 10
     848:	1c 96       	adiw	r26, 0x0c	; 12
     84a:	8c 93       	st	X, r24
     84c:	08 95       	ret
     84e:	8a e0       	ldi	r24, 0x0A	; 10
     850:	1c 96       	adiw	r26, 0x0c	; 12
     852:	8c 93       	st	X, r24
     854:	08 95       	ret
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	1c 96       	adiw	r26, 0x0c	; 12
     85a:	8c 93       	st	X, r24
     85c:	08 95       	ret
     85e:	88 e0       	ldi	r24, 0x08	; 8
     860:	1c 96       	adiw	r26, 0x0c	; 12
     862:	8c 93       	st	X, r24
     864:	08 95       	ret
     866:	8d e0       	ldi	r24, 0x0D	; 13
     868:	1c 96       	adiw	r26, 0x0c	; 12
     86a:	8c 93       	st	X, r24
     86c:	08 95       	ret
     86e:	8e e0       	ldi	r24, 0x0E	; 14
     870:	1c 96       	adiw	r26, 0x0c	; 12
     872:	8c 93       	st	X, r24
     874:	08 95       	ret
     876:	8c e0       	ldi	r24, 0x0C	; 12
     878:	1c 96       	adiw	r26, 0x0c	; 12
     87a:	8c 93       	st	X, r24
     87c:	08 95       	ret
     87e:	8f e0       	ldi	r24, 0x0F	; 15
     880:	1c 96       	adiw	r26, 0x0c	; 12
     882:	8c 93       	st	X, r24
     884:	08 95       	ret
     886:	80 e1       	ldi	r24, 0x10	; 16
     888:	1c 96       	adiw	r26, 0x0c	; 12
     88a:	8c 93       	st	X, r24
     88c:	08 95       	ret
     88e:	81 e1       	ldi	r24, 0x11	; 17
     890:	1c 96       	adiw	r26, 0x0c	; 12
     892:	8c 93       	st	X, r24
     894:	08 95       	ret
     896:	82 e1       	ldi	r24, 0x12	; 18
     898:	1c 96       	adiw	r26, 0x0c	; 12
     89a:	8c 93       	st	X, r24
     89c:	08 95       	ret
     89e:	87 e0       	ldi	r24, 0x07	; 7
     8a0:	1c 96       	adiw	r26, 0x0c	; 12
     8a2:	8c 93       	st	X, r24
     8a4:	08 95       	ret
     8a6:	8b e0       	ldi	r24, 0x0B	; 11
     8a8:	1c 96       	adiw	r26, 0x0c	; 12
     8aa:	8c 93       	st	X, r24
     8ac:	08 95       	ret

000008ae <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:
     8ae:	cf 92       	push	r12
     8b0:	df 92       	push	r13
     8b2:	ef 92       	push	r14
     8b4:	ff 92       	push	r15
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	7c 01       	movw	r14, r24
     8c0:	eb 01       	movw	r28, r22
     8c2:	8a 01       	movw	r16, r20
     8c4:	69 01       	movw	r12, r18
     8c6:	fa 01       	movw	r30, r20
     8c8:	80 81       	ld	r24, Z
     8ca:	91 81       	ldd	r25, Z+1	; 0x01
     8cc:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_Z4swapj>
     8d0:	9c 01       	movw	r18, r24
     8d2:	f2 e0       	ldi	r31, 0x02	; 2
     8d4:	cf 16       	cp	r12, r31
     8d6:	d1 04       	cpc	r13, r1
     8d8:	09 f0       	breq	.+2      	; 0x8dc <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x2e>
     8da:	79 c0       	rjmp	.+242    	; 0x9ce <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x120>
     8dc:	fe 01       	movw	r30, r28
     8de:	31 97       	sbiw	r30, 0x01	; 1
     8e0:	e2 31       	cpi	r30, 0x12	; 18
     8e2:	f1 05       	cpc	r31, r1
     8e4:	08 f0       	brcs	.+2      	; 0x8e8 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x3a>
     8e6:	a6 c0       	rjmp	.+332    	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x186>
     8e8:	88 27       	eor	r24, r24
     8ea:	e2 5d       	subi	r30, 0xD2	; 210
     8ec:	fe 4f       	sbci	r31, 0xFE	; 254
     8ee:	8f 4f       	sbci	r24, 0xFF	; 255
     8f0:	0c 94 68 33 	jmp	0x66d0	; 0x66d0 <__tablejump2__>
     8f4:	f7 01       	movw	r30, r14
     8f6:	e0 5c       	subi	r30, 0xC0	; 192
     8f8:	ff 4f       	sbci	r31, 0xFF	; 255
     8fa:	20 83       	st	Z, r18
     8fc:	31 83       	std	Z+1, r19	; 0x01
     8fe:	9a c0       	rjmp	.+308    	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x186>
     900:	f7 01       	movw	r30, r14
     902:	ee 5b       	subi	r30, 0xBE	; 190
     904:	ff 4f       	sbci	r31, 0xFF	; 255
     906:	20 83       	st	Z, r18
     908:	31 83       	std	Z+1, r19	; 0x01
     90a:	94 c0       	rjmp	.+296    	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x186>
     90c:	f7 01       	movw	r30, r14
     90e:	ec 5b       	subi	r30, 0xBC	; 188
     910:	ff 4f       	sbci	r31, 0xFF	; 255
     912:	20 83       	st	Z, r18
     914:	31 83       	std	Z+1, r19	; 0x01
     916:	8e c0       	rjmp	.+284    	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x186>
     918:	f7 01       	movw	r30, r14
     91a:	ea 5b       	subi	r30, 0xBA	; 186
     91c:	ff 4f       	sbci	r31, 0xFF	; 255
     91e:	20 83       	st	Z, r18
     920:	31 83       	std	Z+1, r19	; 0x01
     922:	88 c0       	rjmp	.+272    	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x186>
     924:	f7 01       	movw	r30, r14
     926:	e8 5b       	subi	r30, 0xB8	; 184
     928:	ff 4f       	sbci	r31, 0xFF	; 255
     92a:	20 83       	st	Z, r18
     92c:	31 83       	std	Z+1, r19	; 0x01
     92e:	82 c0       	rjmp	.+260    	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x186>
     930:	f7 01       	movw	r30, r14
     932:	e6 5b       	subi	r30, 0xB6	; 182
     934:	ff 4f       	sbci	r31, 0xFF	; 255
     936:	20 83       	st	Z, r18
     938:	31 83       	std	Z+1, r19	; 0x01
     93a:	7c c0       	rjmp	.+248    	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x186>
     93c:	f7 01       	movw	r30, r14
     93e:	e4 5b       	subi	r30, 0xB4	; 180
     940:	ff 4f       	sbci	r31, 0xFF	; 255
     942:	20 83       	st	Z, r18
     944:	31 83       	std	Z+1, r19	; 0x01
     946:	76 c0       	rjmp	.+236    	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x186>
     948:	f8 01       	movw	r30, r16
     94a:	60 81       	ld	r22, Z
     94c:	71 81       	ldd	r23, Z+1	; 0x01
     94e:	82 81       	ldd	r24, Z+2	; 0x02
     950:	93 81       	ldd	r25, Z+3	; 0x03
     952:	0e 94 dd 11 	call	0x23ba	; 0x23ba <_Z6swap32m>
     956:	f7 01       	movw	r30, r14
     958:	64 af       	std	Z+60, r22	; 0x3c
     95a:	75 af       	std	Z+61, r23	; 0x3d
     95c:	86 af       	std	Z+62, r24	; 0x3e
     95e:	97 af       	std	Z+63, r25	; 0x3f
     960:	69 c0       	rjmp	.+210    	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x186>
     962:	f7 01       	movw	r30, r14
     964:	ee 5a       	subi	r30, 0xAE	; 174
     966:	ff 4f       	sbci	r31, 0xFF	; 255
     968:	20 83       	st	Z, r18
     96a:	31 83       	std	Z+1, r19	; 0x01
     96c:	63 c0       	rjmp	.+198    	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x186>
     96e:	f7 01       	movw	r30, r14
     970:	ec 5a       	subi	r30, 0xAC	; 172
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	20 83       	st	Z, r18
     976:	31 83       	std	Z+1, r19	; 0x01
     978:	5d c0       	rjmp	.+186    	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x186>
     97a:	f7 01       	movw	r30, r14
     97c:	ea 5a       	subi	r30, 0xAA	; 170
     97e:	ff 4f       	sbci	r31, 0xFF	; 255
     980:	20 83       	st	Z, r18
     982:	31 83       	std	Z+1, r19	; 0x01
     984:	57 c0       	rjmp	.+174    	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x186>
     986:	f7 01       	movw	r30, r14
     988:	e8 5a       	subi	r30, 0xA8	; 168
     98a:	ff 4f       	sbci	r31, 0xFF	; 255
     98c:	20 83       	st	Z, r18
     98e:	31 83       	std	Z+1, r19	; 0x01
     990:	51 c0       	rjmp	.+162    	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x186>
     992:	f7 01       	movw	r30, r14
     994:	e6 5a       	subi	r30, 0xA6	; 166
     996:	ff 4f       	sbci	r31, 0xFF	; 255
     998:	20 83       	st	Z, r18
     99a:	31 83       	std	Z+1, r19	; 0x01
     99c:	4b c0       	rjmp	.+150    	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x186>
     99e:	f7 01       	movw	r30, r14
     9a0:	e4 5a       	subi	r30, 0xA4	; 164
     9a2:	ff 4f       	sbci	r31, 0xFF	; 255
     9a4:	20 83       	st	Z, r18
     9a6:	31 83       	std	Z+1, r19	; 0x01
     9a8:	45 c0       	rjmp	.+138    	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x186>
     9aa:	f7 01       	movw	r30, r14
     9ac:	e2 5a       	subi	r30, 0xA2	; 162
     9ae:	ff 4f       	sbci	r31, 0xFF	; 255
     9b0:	20 83       	st	Z, r18
     9b2:	31 83       	std	Z+1, r19	; 0x01
     9b4:	3f c0       	rjmp	.+126    	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x186>
     9b6:	f7 01       	movw	r30, r14
     9b8:	e0 5a       	subi	r30, 0xA0	; 160
     9ba:	ff 4f       	sbci	r31, 0xFF	; 255
     9bc:	20 83       	st	Z, r18
     9be:	31 83       	std	Z+1, r19	; 0x01
     9c0:	39 c0       	rjmp	.+114    	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x186>
     9c2:	f7 01       	movw	r30, r14
     9c4:	ee 59       	subi	r30, 0x9E	; 158
     9c6:	ff 4f       	sbci	r31, 0xFF	; 255
     9c8:	20 83       	st	Z, r18
     9ca:	31 83       	std	Z+1, r19	; 0x01
     9cc:	33 c0       	rjmp	.+102    	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x186>
     9ce:	c1 30       	cpi	r28, 0x01	; 1
     9d0:	d1 05       	cpc	r29, r1
     9d2:	51 f4       	brne	.+20     	; 0x9e8 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x13a>
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	a6 01       	movw	r20, r12
     9da:	b8 01       	movw	r22, r16
     9dc:	c7 01       	movw	r24, r14
     9de:	80 5c       	subi	r24, 0xC0	; 192
     9e0:	9f 4f       	sbci	r25, 0xFF	; 255
     9e2:	0e 94 a3 11 	call	0x2346	; 0x2346 <_Z11ConvertDataPvS_jj>
     9e6:	26 c0       	rjmp	.+76     	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x186>
     9e8:	c5 30       	cpi	r28, 0x05	; 5
     9ea:	d1 05       	cpc	r29, r1
     9ec:	49 f4       	brne	.+18     	; 0xa00 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x152>
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	a6 01       	movw	r20, r12
     9f4:	b8 01       	movw	r22, r16
     9f6:	c7 01       	movw	r24, r14
     9f8:	8e 96       	adiw	r24, 0x2e	; 46
     9fa:	0e 94 a3 11 	call	0x2346	; 0x2346 <_Z11ConvertDataPvS_jj>
     9fe:	1a c0       	rjmp	.+52     	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x186>
     a00:	22 97       	sbiw	r28, 0x02	; 2
     a02:	c1 f4       	brne	.+48     	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x186>
     a04:	f7 01       	movw	r30, r14
     a06:	85 85       	ldd	r24, Z+13	; 0x0d
     a08:	86 30       	cpi	r24, 0x06	; 6
     a0a:	90 f4       	brcc	.+36     	; 0xa30 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x182>
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	9c 01       	movw	r18, r24
     a10:	22 0f       	add	r18, r18
     a12:	33 1f       	adc	r19, r19
     a14:	82 0f       	add	r24, r18
     a16:	93 1f       	adc	r25, r19
     a18:	88 0f       	add	r24, r24
     a1a:	99 1f       	adc	r25, r25
     a1c:	46 96       	adiw	r24, 0x16	; 22
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	a6 01       	movw	r20, r12
     a24:	b8 01       	movw	r22, r16
     a26:	8e 0d       	add	r24, r14
     a28:	9f 1d       	adc	r25, r15
     a2a:	0e 94 a3 11 	call	0x2346	; 0x2346 <_Z11ConvertDataPvS_jj>
     a2e:	02 c0       	rjmp	.+4      	; 0xa34 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x186>
     a30:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <_ZN11CLaserBoard4BeepEv>
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	ff 90       	pop	r15
     a3e:	ef 90       	pop	r14
     a40:	df 90       	pop	r13
     a42:	cf 90       	pop	r12
     a44:	08 95       	ret

00000a46 <_ZN16CLaserControlAppC1Ev>:
     a46:	26 e7       	ldi	r18, 0x76	; 118
     a48:	31 e2       	ldi	r19, 0x21	; 33
     a4a:	fc 01       	movw	r30, r24
     a4c:	20 83       	st	Z, r18
     a4e:	31 83       	std	Z+1, r19	; 0x01
     a50:	08 95       	ret

00000a52 <_ZN16CLaserControlAppD1Ev>:
     a52:	26 e7       	ldi	r18, 0x76	; 118
     a54:	31 e2       	ldi	r19, 0x21	; 33
     a56:	fc 01       	movw	r30, r24
     a58:	20 83       	st	Z, r18
     a5a:	31 83       	std	Z+1, r19	; 0x01
     a5c:	0e 94 62 28 	call	0x50c4	; 0x50c4 <_ZN16CMBEventsHandlerD1Ev>
     a60:	08 95       	ret

00000a62 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>:
     a62:	4f 92       	push	r4
     a64:	5f 92       	push	r5
     a66:	6f 92       	push	r6
     a68:	7f 92       	push	r7
     a6a:	8f 92       	push	r8
     a6c:	9f 92       	push	r9
     a6e:	af 92       	push	r10
     a70:	bf 92       	push	r11
     a72:	cf 92       	push	r12
     a74:	df 92       	push	r13
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	00 d0       	rcall	.+0      	; 0xa84 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT+0x22>
     a84:	00 d0       	rcall	.+0      	; 0xa86 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT+0x24>
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
     a8a:	7c 01       	movw	r14, r24
     a8c:	8b 01       	movw	r16, r22
     a8e:	fb 01       	movw	r30, r22
     a90:	80 80       	ld	r8, Z
     a92:	91 80       	ldd	r9, Z+1	; 0x01
     a94:	88 ee       	ldi	r24, 0xE8	; 232
     a96:	93 e0       	ldi	r25, 0x03	; 3
     a98:	b4 01       	movw	r22, r8
     a9a:	0e 94 ff 32 	call	0x65fe	; 0x65fe <__udivmodhi4>
     a9e:	5b 01       	movw	r10, r22
     aa0:	22 81       	ldd	r18, Z+2	; 0x02
     aa2:	33 81       	ldd	r19, Z+3	; 0x03
     aa4:	a8 ee       	ldi	r26, 0xE8	; 232
     aa6:	b3 e0       	ldi	r27, 0x03	; 3
     aa8:	0e 94 70 33 	call	0x66e0	; 0x66e0 <__umulhisi3>
     aac:	95 01       	movw	r18, r10
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	50 e0       	ldi	r21, 0x00	; 0
     ab2:	0e 94 27 33 	call	0x664e	; 0x664e <__udivmodsi4>
     ab6:	29 01       	movw	r4, r18
     ab8:	3a 01       	movw	r6, r20
     aba:	f8 01       	movw	r30, r16
     abc:	c4 80       	ldd	r12, Z+4	; 0x04
     abe:	d5 80       	ldd	r13, Z+5	; 0x05
     ac0:	8a e6       	ldi	r24, 0x6A	; 106
     ac2:	98 e1       	ldi	r25, 0x18	; 24
     ac4:	b4 01       	movw	r22, r8
     ac6:	0e 94 ff 32 	call	0x65fe	; 0x65fe <__udivmodhi4>
     aca:	8b 01       	movw	r16, r22
     acc:	00 0f       	add	r16, r16
     ace:	11 1f       	adc	r17, r17
     ad0:	66 0f       	add	r22, r22
     ad2:	77 1f       	adc	r23, r23
     ad4:	66 0f       	add	r22, r22
     ad6:	77 1f       	adc	r23, r23
     ad8:	66 0f       	add	r22, r22
     ada:	77 1f       	adc	r23, r23
     adc:	06 0f       	add	r16, r22
     ade:	17 1f       	adc	r17, r23
     ae0:	f7 01       	movw	r30, r14
     ae2:	04 ab       	std	Z+52, r16	; 0x34
     ae4:	15 ab       	std	Z+53, r17	; 0x35
     ae6:	d8 01       	movw	r26, r16
     ae8:	a3 01       	movw	r20, r6
     aea:	92 01       	movw	r18, r4
     aec:	0e 94 7f 33 	call	0x66fe	; 0x66fe <__muluhisi3>
     af0:	28 ee       	ldi	r18, 0xE8	; 232
     af2:	33 e0       	ldi	r19, 0x03	; 3
     af4:	40 e0       	ldi	r20, 0x00	; 0
     af6:	50 e0       	ldi	r21, 0x00	; 0
     af8:	0e 94 27 33 	call	0x664e	; 0x664e <__udivmodsi4>
     afc:	02 1b       	sub	r16, r18
     afe:	13 0b       	sbc	r17, r19
     b00:	f7 01       	movw	r30, r14
     b02:	06 ab       	std	Z+54, r16	; 0x36
     b04:	17 ab       	std	Z+55, r17	; 0x37
     b06:	a0 ae       	std	Z+56, r10	; 0x38
     b08:	b1 ae       	std	Z+57, r11	; 0x39
     b0a:	88 ec       	ldi	r24, 0xC8	; 200
     b0c:	8c 9d       	mul	r24, r12
     b0e:	90 01       	movw	r18, r0
     b10:	8d 9d       	mul	r24, r13
     b12:	30 0d       	add	r19, r0
     b14:	11 24       	eor	r1, r1
     b16:	36 95       	lsr	r19
     b18:	27 95       	ror	r18
     b1a:	36 95       	lsr	r19
     b1c:	27 95       	ror	r18
     b1e:	ab e7       	ldi	r26, 0x7B	; 123
     b20:	b4 e1       	ldi	r27, 0x14	; 20
     b22:	0e 94 70 33 	call	0x66e0	; 0x66e0 <__umulhisi3>
     b26:	8c 01       	movw	r16, r24
     b28:	16 95       	lsr	r17
     b2a:	07 95       	ror	r16
     b2c:	09 83       	std	Y+1, r16	; 0x01
     b2e:	1a 83       	std	Y+2, r17	; 0x02
     b30:	96 01       	movw	r18, r12
     b32:	a8 ec       	ldi	r26, 0xC8	; 200
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	0e 94 70 33 	call	0x66e0	; 0x66e0 <__umulhisi3>
     b3a:	9b 01       	movw	r18, r22
     b3c:	ac 01       	movw	r20, r24
     b3e:	c3 01       	movw	r24, r6
     b40:	b2 01       	movw	r22, r4
     b42:	0e 94 ef 32 	call	0x65de	; 0x65de <__mulsi3>
     b46:	20 ea       	ldi	r18, 0xA0	; 160
     b48:	36 e8       	ldi	r19, 0x86	; 134
     b4a:	41 e0       	ldi	r20, 0x01	; 1
     b4c:	50 e0       	ldi	r21, 0x00	; 0
     b4e:	0e 94 27 33 	call	0x664e	; 0x664e <__udivmodsi4>
     b52:	12 2f       	mov	r17, r18
     b54:	82 2f       	mov	r24, r18
     b56:	93 2f       	mov	r25, r19
     b58:	8b 83       	std	Y+3, r24	; 0x03
     b5a:	9c 83       	std	Y+4, r25	; 0x04
     b5c:	c3 01       	movw	r24, r6
     b5e:	b2 01       	movw	r22, r4
     b60:	2a e0       	ldi	r18, 0x0A	; 10
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	40 e0       	ldi	r20, 0x00	; 0
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	0e 94 27 33 	call	0x664e	; 0x664e <__udivmodsi4>
     b6c:	62 2f       	mov	r22, r18
     b6e:	82 2f       	mov	r24, r18
     b70:	93 2f       	mov	r25, r19
     b72:	8d 83       	std	Y+5, r24	; 0x05
     b74:	9e 83       	std	Y+6, r25	; 0x06
     b76:	20 2f       	mov	r18, r16
     b78:	3a 81       	ldd	r19, Y+2	; 0x02
     b7a:	41 2f       	mov	r20, r17
     b7c:	5c 81       	ldd	r21, Y+4	; 0x04
     b7e:	7e 81       	ldd	r23, Y+6	; 0x06
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	26 96       	adiw	r28, 0x06	; 6
     b86:	cd bf       	out	0x3d, r28	; 61
     b88:	de bf       	out	0x3e, r29	; 62
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	ff 90       	pop	r15
     b94:	ef 90       	pop	r14
     b96:	df 90       	pop	r13
     b98:	cf 90       	pop	r12
     b9a:	bf 90       	pop	r11
     b9c:	af 90       	pop	r10
     b9e:	9f 90       	pop	r9
     ba0:	8f 90       	pop	r8
     ba2:	7f 90       	pop	r7
     ba4:	6f 90       	pop	r6
     ba6:	5f 90       	pop	r5
     ba8:	4f 90       	pop	r4
     baa:	08 95       	ret

00000bac <_ZN16CLaserControlApp11GetVariableEjj>:
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
     bb0:	ec 01       	movw	r28, r24
     bb2:	cc 58       	subi	r28, 0x8C	; 140
     bb4:	df 4f       	sbci	r29, 0xFF	; 255
     bb6:	88 81       	ld	r24, Y
     bb8:	99 81       	ldd	r25, Y+1	; 0x01
     bba:	0e 94 b4 2a 	call	0x5568	; 0x5568 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
     bbe:	88 81       	ld	r24, Y
     bc0:	99 81       	ldd	r25, Y+1	; 0x01
     bc2:	0e 94 9d 2a 	call	0x553a	; 0x553a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     bc6:	88 81       	ld	r24, Y
     bc8:	99 81       	ldd	r25, Y+1	; 0x01
     bca:	0e 94 3a 2a 	call	0x5474	; 0x5474 <_ZN9CMBSender18WaitMODBUSListenerEv>
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	08 95       	ret

00000bd4 <_ZN16CLaserControlApp11SetVariableEjPjj>:
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	ec 01       	movw	r28, r24
     bda:	cc 58       	subi	r28, 0x8C	; 140
     bdc:	df 4f       	sbci	r29, 0xFF	; 255
     bde:	88 81       	ld	r24, Y
     be0:	99 81       	ldd	r25, Y+1	; 0x01
     be2:	0e 94 6f 2a 	call	0x54de	; 0x54de <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
     be6:	88 81       	ld	r24, Y
     be8:	99 81       	ldd	r25, Y+1	; 0x01
     bea:	0e 94 9d 2a 	call	0x553a	; 0x553a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	08 95       	ret

00000bf4 <_ZN16CLaserControlApp12SetPictureIdEj>:
     bf4:	0f 93       	push	r16
     bf6:	1f 93       	push	r17
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	1f 92       	push	r1
     bfe:	1f 92       	push	r1
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	8c 01       	movw	r16, r24
     c06:	cb 01       	movw	r24, r22
     c08:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_Z4swapj>
     c0c:	89 83       	std	Y+1, r24	; 0x01
     c0e:	9a 83       	std	Y+2, r25	; 0x02
     c10:	0c 58       	subi	r16, 0x8C	; 140
     c12:	1f 4f       	sbci	r17, 0xFF	; 255
     c14:	22 e0       	ldi	r18, 0x02	; 2
     c16:	ae 01       	movw	r20, r28
     c18:	4f 5f       	subi	r20, 0xFF	; 255
     c1a:	5f 4f       	sbci	r21, 0xFF	; 255
     c1c:	63 e0       	ldi	r22, 0x03	; 3
     c1e:	f8 01       	movw	r30, r16
     c20:	80 81       	ld	r24, Z
     c22:	91 81       	ldd	r25, Z+1	; 0x01
     c24:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
     c28:	f8 01       	movw	r30, r16
     c2a:	80 81       	ld	r24, Z
     c2c:	91 81       	ldd	r25, Z+1	; 0x01
     c2e:	0e 94 9d 2a 	call	0x553a	; 0x553a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
     c32:	0f 90       	pop	r0
     c34:	0f 90       	pop	r0
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	08 95       	ret

00000c40 <_ZN16CLaserControlApp12OnLaserTimerEv>:
     c40:	fc 01       	movw	r30, r24
     c42:	84 ad       	ldd	r24, Z+60	; 0x3c
     c44:	95 ad       	ldd	r25, Z+61	; 0x3d
     c46:	a6 ad       	ldd	r26, Z+62	; 0x3e
     c48:	b7 ad       	ldd	r27, Z+63	; 0x3f
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	a1 1d       	adc	r26, r1
     c4e:	b1 1d       	adc	r27, r1
     c50:	84 af       	std	Z+60, r24	; 0x3c
     c52:	95 af       	std	Z+61, r25	; 0x3d
     c54:	a6 af       	std	Z+62, r26	; 0x3e
     c56:	b7 af       	std	Z+63, r27	; 0x3f
     c58:	40 ad       	ldd	r20, Z+56	; 0x38
     c5a:	51 ad       	ldd	r21, Z+57	; 0x39
     c5c:	45 36       	cpi	r20, 0x65	; 101
     c5e:	51 05       	cpc	r21, r1
     c60:	50 f0       	brcs	.+20     	; 0xc76 <_ZN16CLaserControlApp12OnLaserTimerEv+0x36>
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	42 e3       	ldi	r20, 0x32	; 50
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	64 ef       	ldi	r22, 0xF4	; 244
     c6a:	71 e0       	ldi	r23, 0x01	; 1
     c6c:	8d e6       	ldi	r24, 0x6D	; 109
     c6e:	95 e2       	ldi	r25, 0x25	; 37
     c70:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <_ZN12CSoundPlayer10SoundStartEjjh>
     c74:	09 c0       	rjmp	.+18     	; 0xc88 <_ZN16CLaserControlApp12OnLaserTimerEv+0x48>
     c76:	56 95       	lsr	r21
     c78:	47 95       	ror	r20
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	64 ef       	ldi	r22, 0xF4	; 244
     c7e:	71 e0       	ldi	r23, 0x01	; 1
     c80:	8d e6       	ldi	r24, 0x6D	; 109
     c82:	95 e2       	ldi	r25, 0x25	; 37
     c84:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <_ZN12CSoundPlayer10SoundStartEjjh>
     c88:	8d e6       	ldi	r24, 0x6D	; 109
     c8a:	95 e2       	ldi	r25, 0x25	; 37
     c8c:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <_ZN12CSoundPlayer9SoundStopEv>
     c90:	08 95       	ret

00000c92 <_ZN16CLaserControlApp22OnLaserTimerStopStaticEPv>:
     c92:	0e 94 20 06 	call	0xc40	; 0xc40 <_ZN16CLaserControlApp12OnLaserTimerEv>
     c96:	08 95       	ret

00000c98 <_ZN16CLaserControlApp19OnPWMTimerOVFStaticEPv>:
	//laserBoard.Relay1Off();
}

void CLaserControlApp::OnPWMTimerOVF()
{
	laserBoard.PWMOff();
     c98:	8e e6       	ldi	r24, 0x6E	; 110
     c9a:	95 e2       	ldi	r25, 0x25	; 37
     c9c:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <_ZN11CLaserBoard6PWMOffEv>
     ca0:	08 95       	ret

00000ca2 <_ZN16CLaserControlApp19OnPWMTimerCMPStaticEPv>:
}

void CLaserControlApp::OnPWMTimerCMP()
{
	laserBoard.PWMOn();
     ca2:	8e e6       	ldi	r24, 0x6E	; 110
     ca4:	95 e2       	ldi	r25, 0x25	; 37
     ca6:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <_ZN11CLaserBoard5PWMOnEv>
     caa:	08 95       	ret

00000cac <_ZN16CLaserControlApp13MelaninPresetEj>:
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnINT0();
}

void CLaserControlApp::MelaninPreset(uint16_t melanin)
{
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	ec 01       	movw	r28, r24
	Profile = PROFILE_DEFAULT;
     cb6:	1d 86       	std	Y+13, r1	; 0x0d
	laserDiodeData.mode = Profile;
     cb8:	fc 01       	movw	r30, r24
     cba:	e0 5c       	subi	r30, 0xC0	; 192
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	10 82       	st	Z, r1
     cc0:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.laserprofile.Frequency = 3;
     cc2:	32 96       	adiw	r30, 0x02	; 2
     cc4:	83 e0       	ldi	r24, 0x03	; 3
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	80 83       	st	Z, r24
     cca:	91 83       	std	Z+1, r25	; 0x01
	if (melanin < 10)
     ccc:	6a 30       	cpi	r22, 0x0A	; 10
     cce:	71 05       	cpc	r23, r1
     cd0:	70 f4       	brcc	.+28     	; 0xcee <_ZN16CLaserControlApp13MelaninPresetEj+0x42>
	{
		laserDiodeData.phototype = 1;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	72 96       	adiw	r30, 0x12	; 18
     cd8:	80 83       	st	Z, r24
     cda:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 60;
     cdc:	8c e3       	ldi	r24, 0x3C	; 60
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	8c 8b       	std	Y+20, r24	; 0x14
     ce2:	9d 8b       	std	Y+21, r25	; 0x15
		m_wMaxEnergy = 97;
     ce4:	81 e6       	ldi	r24, 0x61	; 97
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	8a 8b       	std	Y+18, r24	; 0x12
     cea:	9b 8b       	std	Y+19, r25	; 0x13
     cec:	5b c0       	rjmp	.+182    	; 0xda4 <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 20)
     cee:	64 31       	cpi	r22, 0x14	; 20
     cf0:	71 05       	cpc	r23, r1
     cf2:	80 f4       	brcc	.+32     	; 0xd14 <_ZN16CLaserControlApp13MelaninPresetEj+0x68>
	{
		laserDiodeData.phototype = 2;
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	fe 01       	movw	r30, r28
     cfa:	ec 5a       	subi	r30, 0xAC	; 172
     cfc:	ff 4f       	sbci	r31, 0xFF	; 255
     cfe:	80 83       	st	Z, r24
     d00:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 60;
     d02:	8c e3       	ldi	r24, 0x3C	; 60
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	8c 8b       	std	Y+20, r24	; 0x14
     d08:	9d 8b       	std	Y+21, r25	; 0x15
		m_wMaxEnergy = 97;
     d0a:	81 e6       	ldi	r24, 0x61	; 97
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	8a 8b       	std	Y+18, r24	; 0x12
     d10:	9b 8b       	std	Y+19, r25	; 0x13
     d12:	48 c0       	rjmp	.+144    	; 0xda4 <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 35)
     d14:	63 32       	cpi	r22, 0x23	; 35
     d16:	71 05       	cpc	r23, r1
     d18:	80 f4       	brcc	.+32     	; 0xd3a <_ZN16CLaserControlApp13MelaninPresetEj+0x8e>
	{
		laserDiodeData.phototype = 3;
     d1a:	83 e0       	ldi	r24, 0x03	; 3
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	fe 01       	movw	r30, r28
     d20:	ec 5a       	subi	r30, 0xAC	; 172
     d22:	ff 4f       	sbci	r31, 0xFF	; 255
     d24:	80 83       	st	Z, r24
     d26:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 60;
     d28:	8c e3       	ldi	r24, 0x3C	; 60
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	8c 8b       	std	Y+20, r24	; 0x14
     d2e:	9d 8b       	std	Y+21, r25	; 0x15
		m_wMaxEnergy = 97;
     d30:	81 e6       	ldi	r24, 0x61	; 97
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	8a 8b       	std	Y+18, r24	; 0x12
     d36:	9b 8b       	std	Y+19, r25	; 0x13
     d38:	35 c0       	rjmp	.+106    	; 0xda4 <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 49)
     d3a:	61 33       	cpi	r22, 0x31	; 49
     d3c:	71 05       	cpc	r23, r1
     d3e:	80 f4       	brcc	.+32     	; 0xd60 <_ZN16CLaserControlApp13MelaninPresetEj+0xb4>
	{
		laserDiodeData.phototype = 4;
     d40:	84 e0       	ldi	r24, 0x04	; 4
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	fe 01       	movw	r30, r28
     d46:	ec 5a       	subi	r30, 0xAC	; 172
     d48:	ff 4f       	sbci	r31, 0xFF	; 255
     d4a:	80 83       	st	Z, r24
     d4c:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 100;
     d4e:	84 e6       	ldi	r24, 0x64	; 100
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	8c 8b       	std	Y+20, r24	; 0x14
     d54:	9d 8b       	std	Y+21, r25	; 0x15
		m_wMaxEnergy = 97;
     d56:	81 e6       	ldi	r24, 0x61	; 97
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	8a 8b       	std	Y+18, r24	; 0x12
     d5c:	9b 8b       	std	Y+19, r25	; 0x13
     d5e:	22 c0       	rjmp	.+68     	; 0xda4 <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	if (melanin < 72)
     d60:	68 34       	cpi	r22, 0x48	; 72
     d62:	71 05       	cpc	r23, r1
     d64:	80 f4       	brcc	.+32     	; 0xd86 <_ZN16CLaserControlApp13MelaninPresetEj+0xda>
	{
		laserDiodeData.phototype = 5;
     d66:	85 e0       	ldi	r24, 0x05	; 5
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	fe 01       	movw	r30, r28
     d6c:	ec 5a       	subi	r30, 0xAC	; 172
     d6e:	ff 4f       	sbci	r31, 0xFF	; 255
     d70:	80 83       	st	Z, r24
     d72:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 100;
     d74:	84 e6       	ldi	r24, 0x64	; 100
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	8c 8b       	std	Y+20, r24	; 0x14
     d7a:	9d 8b       	std	Y+21, r25	; 0x15
		m_wMaxEnergy = 90;
     d7c:	8a e5       	ldi	r24, 0x5A	; 90
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	8a 8b       	std	Y+18, r24	; 0x12
     d82:	9b 8b       	std	Y+19, r25	; 0x13
     d84:	0f c0       	rjmp	.+30     	; 0xda4 <_ZN16CLaserControlApp13MelaninPresetEj+0xf8>
	}
	else
	{
		laserDiodeData.phototype = 6;
     d86:	86 e0       	ldi	r24, 0x06	; 6
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	fe 01       	movw	r30, r28
     d8c:	ec 5a       	subi	r30, 0xAC	; 172
     d8e:	ff 4f       	sbci	r31, 0xFF	; 255
     d90:	80 83       	st	Z, r24
     d92:	91 83       	std	Z+1, r25	; 0x01
		m_wMaxDuration = 100;
     d94:	84 e6       	ldi	r24, 0x64	; 100
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	8c 8b       	std	Y+20, r24	; 0x14
     d9a:	9d 8b       	std	Y+21, r25	; 0x15
		m_wMaxEnergy = 87;
     d9c:	87 e5       	ldi	r24, 0x57	; 87
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	8a 8b       	std	Y+18, r24	; 0x12
     da2:	9b 8b       	std	Y+19, r25	; 0x13
	}
	
	laserDiodeData.laserprofile.EnergyPercent = 100;//m_wMaxEnergy;
     da4:	fe 01       	movw	r30, r28
     da6:	ea 5b       	subi	r30, 0xBA	; 186
     da8:	ff 4f       	sbci	r31, 0xFF	; 255
     daa:	84 e6       	ldi	r24, 0x64	; 100
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	80 83       	st	Z, r24
     db0:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.laserprofile.Duration = m_wMaxDuration;
     db2:	8c 89       	ldd	r24, Y+20	; 0x14
     db4:	9d 89       	ldd	r25, Y+21	; 0x15
     db6:	32 97       	sbiw	r30, 0x02	; 2
     db8:	80 83       	st	Z, r24
     dba:	91 83       	std	Z+1, r25	; 0x01
	
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile]);
     dbc:	8e 01       	movw	r16, r28
     dbe:	08 5b       	subi	r16, 0xB8	; 184
     dc0:	1f 4f       	sbci	r17, 0xFF	; 255
     dc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	bc 01       	movw	r22, r24
     dc8:	66 0f       	add	r22, r22
     dca:	77 1f       	adc	r23, r23
     dcc:	68 0f       	add	r22, r24
     dce:	79 1f       	adc	r23, r25
     dd0:	66 0f       	add	r22, r22
     dd2:	77 1f       	adc	r23, r23
     dd4:	6a 5e       	subi	r22, 0xEA	; 234
     dd6:	7f 4f       	sbci	r23, 0xFF	; 255
     dd8:	6c 0f       	add	r22, r28
     dda:	7d 1f       	adc	r23, r29
     ddc:	ce 01       	movw	r24, r28
     dde:	0e 94 31 05 	call	0xa62	; 0xa62 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
     de2:	f8 01       	movw	r30, r16
     de4:	20 83       	st	Z, r18
     de6:	31 83       	std	Z+1, r19	; 0x01
     de8:	42 83       	std	Z+2, r20	; 0x02
     dea:	53 83       	std	Z+3, r21	; 0x03
     dec:	64 83       	std	Z+4, r22	; 0x04
     dee:	75 83       	std	Z+5, r23	; 0x05
	laserPower = m_structLaserProfile[Profile].EnergyPercent;
     df0:	8d 85       	ldd	r24, Y+13	; 0x0d
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	fc 01       	movw	r30, r24
     df6:	ee 0f       	add	r30, r30
     df8:	ff 1f       	adc	r31, r31
     dfa:	e8 0f       	add	r30, r24
     dfc:	f9 1f       	adc	r31, r25
     dfe:	ee 0f       	add	r30, r30
     e00:	ff 1f       	adc	r31, r31
     e02:	ec 0f       	add	r30, r28
     e04:	fd 1f       	adc	r31, r29
     e06:	82 8d       	ldd	r24, Z+26	; 0x1a
     e08:	93 8d       	ldd	r25, Z+27	; 0x1b
     e0a:	8a af       	std	Y+58, r24	; 0x3a
     e0c:	9b af       	std	Y+59, r25	; 0x3b
}
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	0f 91       	pop	r16
     e16:	08 95       	ret

00000e18 <_ZN16CLaserControlApp15PhototypePresetEj>:

void CLaserControlApp::PhototypePreset(uint16_t phototype)
{
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	ec 01       	movw	r28, r24
	Profile = PROFILE_DEFAULT;
     e22:	1d 86       	std	Y+13, r1	; 0x0d
	laserDiodeData.mode = Profile;
     e24:	fc 01       	movw	r30, r24
     e26:	e0 5c       	subi	r30, 0xC0	; 192
     e28:	ff 4f       	sbci	r31, 0xFF	; 255
     e2a:	10 82       	st	Z, r1
     e2c:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.laserprofile.Frequency = 3;
     e2e:	32 96       	adiw	r30, 0x02	; 2
     e30:	83 e0       	ldi	r24, 0x03	; 3
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	80 83       	st	Z, r24
     e36:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.phototype = phototype;
     e38:	72 96       	adiw	r30, 0x12	; 18
     e3a:	60 83       	st	Z, r22
     e3c:	71 83       	std	Z+1, r23	; 0x01
	
	switch (phototype)
     e3e:	63 30       	cpi	r22, 0x03	; 3
     e40:	71 05       	cpc	r23, r1
     e42:	91 f1       	breq	.+100    	; 0xea8 <_ZN16CLaserControlApp15PhototypePresetEj+0x90>
     e44:	38 f4       	brcc	.+14     	; 0xe54 <_ZN16CLaserControlApp15PhototypePresetEj+0x3c>
     e46:	61 30       	cpi	r22, 0x01	; 1
     e48:	71 05       	cpc	r23, r1
     e4a:	71 f0       	breq	.+28     	; 0xe68 <_ZN16CLaserControlApp15PhototypePresetEj+0x50>
     e4c:	62 30       	cpi	r22, 0x02	; 2
     e4e:	71 05       	cpc	r23, r1
     e50:	d9 f0       	breq	.+54     	; 0xe88 <_ZN16CLaserControlApp15PhototypePresetEj+0x70>
     e52:	69 c0       	rjmp	.+210    	; 0xf26 <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
     e54:	65 30       	cpi	r22, 0x05	; 5
     e56:	71 05       	cpc	r23, r1
     e58:	09 f4       	brne	.+2      	; 0xe5c <_ZN16CLaserControlApp15PhototypePresetEj+0x44>
     e5a:	46 c0       	rjmp	.+140    	; 0xee8 <_ZN16CLaserControlApp15PhototypePresetEj+0xd0>
     e5c:	a8 f1       	brcs	.+106    	; 0xec8 <_ZN16CLaserControlApp15PhototypePresetEj+0xb0>
     e5e:	66 30       	cpi	r22, 0x06	; 6
     e60:	71 05       	cpc	r23, r1
     e62:	09 f4       	brne	.+2      	; 0xe66 <_ZN16CLaserControlApp15PhototypePresetEj+0x4e>
     e64:	51 c0       	rjmp	.+162    	; 0xf08 <_ZN16CLaserControlApp15PhototypePresetEj+0xf0>
     e66:	5f c0       	rjmp	.+190    	; 0xf26 <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
	{
		case 1:
		{
			laserDiodeData.melanin = 5;
     e68:	85 e0       	ldi	r24, 0x05	; 5
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	fe 01       	movw	r30, r28
     e6e:	ee 5a       	subi	r30, 0xAE	; 174
     e70:	ff 4f       	sbci	r31, 0xFF	; 255
     e72:	80 83       	st	Z, r24
     e74:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 60;
     e76:	8c e3       	ldi	r24, 0x3C	; 60
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	8c 8b       	std	Y+20, r24	; 0x14
     e7c:	9d 8b       	std	Y+21, r25	; 0x15
			m_wMaxEnergy = 97;
     e7e:	81 e6       	ldi	r24, 0x61	; 97
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	8a 8b       	std	Y+18, r24	; 0x12
     e84:	9b 8b       	std	Y+19, r25	; 0x13
		}
		break;
     e86:	4f c0       	rjmp	.+158    	; 0xf26 <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 2:
		{
			laserDiodeData.melanin = 14;
     e88:	8e e0       	ldi	r24, 0x0E	; 14
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	fe 01       	movw	r30, r28
     e8e:	ee 5a       	subi	r30, 0xAE	; 174
     e90:	ff 4f       	sbci	r31, 0xFF	; 255
     e92:	80 83       	st	Z, r24
     e94:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 60;
     e96:	8c e3       	ldi	r24, 0x3C	; 60
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	8c 8b       	std	Y+20, r24	; 0x14
     e9c:	9d 8b       	std	Y+21, r25	; 0x15
			m_wMaxEnergy = 97;
     e9e:	81 e6       	ldi	r24, 0x61	; 97
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	8a 8b       	std	Y+18, r24	; 0x12
     ea4:	9b 8b       	std	Y+19, r25	; 0x13
		}
		break;
     ea6:	3f c0       	rjmp	.+126    	; 0xf26 <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 3:
		{
			laserDiodeData.melanin = 27;
     ea8:	8b e1       	ldi	r24, 0x1B	; 27
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	fe 01       	movw	r30, r28
     eae:	ee 5a       	subi	r30, 0xAE	; 174
     eb0:	ff 4f       	sbci	r31, 0xFF	; 255
     eb2:	80 83       	st	Z, r24
     eb4:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 60;
     eb6:	8c e3       	ldi	r24, 0x3C	; 60
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	8c 8b       	std	Y+20, r24	; 0x14
     ebc:	9d 8b       	std	Y+21, r25	; 0x15
			m_wMaxEnergy = 97;
     ebe:	81 e6       	ldi	r24, 0x61	; 97
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	8a 8b       	std	Y+18, r24	; 0x12
     ec4:	9b 8b       	std	Y+19, r25	; 0x13
		}
		break;
     ec6:	2f c0       	rjmp	.+94     	; 0xf26 <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 4:
		{
			laserDiodeData.melanin = 41;
     ec8:	89 e2       	ldi	r24, 0x29	; 41
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	fe 01       	movw	r30, r28
     ece:	ee 5a       	subi	r30, 0xAE	; 174
     ed0:	ff 4f       	sbci	r31, 0xFF	; 255
     ed2:	80 83       	st	Z, r24
     ed4:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 100;
     ed6:	84 e6       	ldi	r24, 0x64	; 100
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	8c 8b       	std	Y+20, r24	; 0x14
     edc:	9d 8b       	std	Y+21, r25	; 0x15
			m_wMaxEnergy = 97;
     ede:	81 e6       	ldi	r24, 0x61	; 97
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	8a 8b       	std	Y+18, r24	; 0x12
     ee4:	9b 8b       	std	Y+19, r25	; 0x13
		}
		break;
     ee6:	1f c0       	rjmp	.+62     	; 0xf26 <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 5:
		{
			laserDiodeData.melanin = 61;
     ee8:	8d e3       	ldi	r24, 0x3D	; 61
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	fe 01       	movw	r30, r28
     eee:	ee 5a       	subi	r30, 0xAE	; 174
     ef0:	ff 4f       	sbci	r31, 0xFF	; 255
     ef2:	80 83       	st	Z, r24
     ef4:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 100;
     ef6:	84 e6       	ldi	r24, 0x64	; 100
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	8c 8b       	std	Y+20, r24	; 0x14
     efc:	9d 8b       	std	Y+21, r25	; 0x15
			m_wMaxEnergy = 90;
     efe:	8a e5       	ldi	r24, 0x5A	; 90
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	8a 8b       	std	Y+18, r24	; 0x12
     f04:	9b 8b       	std	Y+19, r25	; 0x13
		}
		break;
     f06:	0f c0       	rjmp	.+30     	; 0xf26 <_ZN16CLaserControlApp15PhototypePresetEj+0x10e>
		case 6:
		{
			laserDiodeData.melanin = 85;
     f08:	85 e5       	ldi	r24, 0x55	; 85
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	fe 01       	movw	r30, r28
     f0e:	ee 5a       	subi	r30, 0xAE	; 174
     f10:	ff 4f       	sbci	r31, 0xFF	; 255
     f12:	80 83       	st	Z, r24
     f14:	91 83       	std	Z+1, r25	; 0x01
			m_wMaxDuration = 100;
     f16:	84 e6       	ldi	r24, 0x64	; 100
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	8c 8b       	std	Y+20, r24	; 0x14
     f1c:	9d 8b       	std	Y+21, r25	; 0x15
			m_wMaxEnergy = 87;
     f1e:	87 e5       	ldi	r24, 0x57	; 87
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	8a 8b       	std	Y+18, r24	; 0x12
     f24:	9b 8b       	std	Y+19, r25	; 0x13
		}
	}
	
	laserDiodeData.laserprofile.EnergyPercent = 100;//m_wMaxEnergy;
     f26:	fe 01       	movw	r30, r28
     f28:	ea 5b       	subi	r30, 0xBA	; 186
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	84 e6       	ldi	r24, 0x64	; 100
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	80 83       	st	Z, r24
     f32:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.laserprofile.Duration = m_wMaxDuration;
     f34:	8c 89       	ldd	r24, Y+20	; 0x14
     f36:	9d 89       	ldd	r25, Y+21	; 0x15
     f38:	32 97       	sbiw	r30, 0x02	; 2
     f3a:	80 83       	st	Z, r24
     f3c:	91 83       	std	Z+1, r25	; 0x01
	
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile]);
     f3e:	8e 01       	movw	r16, r28
     f40:	08 5b       	subi	r16, 0xB8	; 184
     f42:	1f 4f       	sbci	r17, 0xFF	; 255
     f44:	be 01       	movw	r22, r28
     f46:	6a 5e       	subi	r22, 0xEA	; 234
     f48:	7f 4f       	sbci	r23, 0xFF	; 255
     f4a:	ce 01       	movw	r24, r28
     f4c:	0e 94 31 05 	call	0xa62	; 0xa62 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
     f50:	f8 01       	movw	r30, r16
     f52:	20 83       	st	Z, r18
     f54:	31 83       	std	Z+1, r19	; 0x01
     f56:	42 83       	std	Z+2, r20	; 0x02
     f58:	53 83       	std	Z+3, r21	; 0x03
     f5a:	64 83       	std	Z+4, r22	; 0x04
     f5c:	75 83       	std	Z+5, r23	; 0x05
	laserPower = m_structLaserProfile[Profile].EnergyPercent;
     f5e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	fc 01       	movw	r30, r24
     f64:	ee 0f       	add	r30, r30
     f66:	ff 1f       	adc	r31, r31
     f68:	e8 0f       	add	r30, r24
     f6a:	f9 1f       	adc	r31, r25
     f6c:	ee 0f       	add	r30, r30
     f6e:	ff 1f       	adc	r31, r31
     f70:	ec 0f       	add	r30, r28
     f72:	fd 1f       	adc	r31, r29
     f74:	82 8d       	ldd	r24, Z+26	; 0x1a
     f76:	93 8d       	ldd	r25, Z+27	; 0x1b
     f78:	8a af       	std	Y+58, r24	; 0x3a
     f7a:	9b af       	std	Y+59, r25	; 0x3b
}
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	1f 91       	pop	r17
     f82:	0f 91       	pop	r16
     f84:	08 95       	ret

00000f86 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM>:

bool CLaserControlApp::CheckLimits(uint16_t &freq, uint16_t &duration, APP_PROFILE mode)
{
     f86:	af 92       	push	r10
     f88:	bf 92       	push	r11
     f8a:	cf 92       	push	r12
     f8c:	df 92       	push	r13
     f8e:	ef 92       	push	r14
     f90:	ff 92       	push	r15
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	ec 01       	movw	r28, r24
     f9c:	8b 01       	movw	r16, r22
     f9e:	7a 01       	movw	r14, r20
	//MaxDurationTable
	//TableNum
	//PowerTable
	//bool update = false;
	
	switch (mode)
     fa0:	22 30       	cpi	r18, 0x02	; 2
     fa2:	b1 f0       	breq	.+44     	; 0xfd0 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x4a>
     fa4:	18 f4       	brcc	.+6      	; 0xfac <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x26>
     fa6:	21 30       	cpi	r18, 0x01	; 1
     fa8:	31 f0       	breq	.+12     	; 0xfb6 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x30>
     faa:	58 c0       	rjmp	.+176    	; 0x105c <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
     fac:	23 30       	cpi	r18, 0x03	; 3
     fae:	39 f1       	breq	.+78     	; 0xffe <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x78>
     fb0:	24 30       	cpi	r18, 0x04	; 4
     fb2:	e9 f1       	breq	.+122    	; 0x102e <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xa8>
     fb4:	53 c0       	rjmp	.+166    	; 0x105c <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
	{
		case PROFILE_DEFAULT:
		break;
		case PROFILE_SINGLE:
			if (freq != 1)
     fb6:	db 01       	movw	r26, r22
     fb8:	8d 91       	ld	r24, X+
     fba:	9c 91       	ld	r25, X
     fbc:	11 97       	sbiw	r26, 0x01	; 1
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x3e>
     fc2:	4c c0       	rjmp	.+152    	; 0x105c <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 1;
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	8d 93       	st	X+, r24
     fca:	9c 93       	st	X, r25
				update = true;
     fcc:	88 8b       	std	Y+16, r24	; 0x10
     fce:	46 c0       	rjmp	.+140    	; 0x105c <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			}
			break;
		case PROFILE_SLOW:
			if (freq > 3)
     fd0:	fb 01       	movw	r30, r22
     fd2:	80 81       	ld	r24, Z
     fd4:	91 81       	ldd	r25, Z+1	; 0x01
     fd6:	04 97       	sbiw	r24, 0x04	; 4
     fd8:	30 f0       	brcs	.+12     	; 0xfe6 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x60>
			{
				freq = 3;
     fda:	83 e0       	ldi	r24, 0x03	; 3
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	80 83       	st	Z, r24
     fe0:	91 83       	std	Z+1, r25	; 0x01
				update = true;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	88 8b       	std	Y+16, r24	; 0x10
			}
			if (freq < 1)
     fe6:	d8 01       	movw	r26, r16
     fe8:	8d 91       	ld	r24, X+
     fea:	9c 91       	ld	r25, X
     fec:	11 97       	sbiw	r26, 0x01	; 1
     fee:	89 2b       	or	r24, r25
     ff0:	a9 f5       	brne	.+106    	; 0x105c <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 1;
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	8d 93       	st	X+, r24
     ff8:	9c 93       	st	X, r25
				update = true;
     ffa:	88 8b       	std	Y+16, r24	; 0x10
     ffc:	2f c0       	rjmp	.+94     	; 0x105c <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			}
			break;
		case PROFILE_MEDIUM:
			if (freq > 6)
     ffe:	fb 01       	movw	r30, r22
    1000:	80 81       	ld	r24, Z
    1002:	91 81       	ldd	r25, Z+1	; 0x01
    1004:	07 97       	sbiw	r24, 0x07	; 7
    1006:	30 f0       	brcs	.+12     	; 0x1014 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x8e>
			{
				freq = 6;
    1008:	86 e0       	ldi	r24, 0x06	; 6
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	80 83       	st	Z, r24
    100e:	91 83       	std	Z+1, r25	; 0x01
				update = true;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	88 8b       	std	Y+16, r24	; 0x10
			}
			if (freq < 4)
    1014:	d8 01       	movw	r26, r16
    1016:	8d 91       	ld	r24, X+
    1018:	9c 91       	ld	r25, X
    101a:	11 97       	sbiw	r26, 0x01	; 1
    101c:	04 97       	sbiw	r24, 0x04	; 4
    101e:	f0 f4       	brcc	.+60     	; 0x105c <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 4;
    1020:	84 e0       	ldi	r24, 0x04	; 4
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	8d 93       	st	X+, r24
    1026:	9c 93       	st	X, r25
				update = true;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	88 8b       	std	Y+16, r24	; 0x10
    102c:	17 c0       	rjmp	.+46     	; 0x105c <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			}
			break;
		case PROFILE_FAST:
			if (freq > 10)
    102e:	fb 01       	movw	r30, r22
    1030:	80 81       	ld	r24, Z
    1032:	91 81       	ldd	r25, Z+1	; 0x01
    1034:	0b 97       	sbiw	r24, 0x0b	; 11
    1036:	30 f0       	brcs	.+12     	; 0x1044 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xbe>
			{
				freq = 10;
    1038:	8a e0       	ldi	r24, 0x0A	; 10
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	80 83       	st	Z, r24
    103e:	91 83       	std	Z+1, r25	; 0x01
				update = true;
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	88 8b       	std	Y+16, r24	; 0x10
			}
			if (freq < 7)
    1044:	d8 01       	movw	r26, r16
    1046:	8d 91       	ld	r24, X+
    1048:	9c 91       	ld	r25, X
    104a:	11 97       	sbiw	r26, 0x01	; 1
    104c:	07 97       	sbiw	r24, 0x07	; 7
    104e:	30 f4       	brcc	.+12     	; 0x105c <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0xd6>
			{
				freq = 7;
    1050:	87 e0       	ldi	r24, 0x07	; 7
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	8d 93       	st	X+, r24
    1056:	9c 93       	st	X, r25
				update = true;
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	88 8b       	std	Y+16, r24	; 0x10
			}
			break;
	}
	
	//freq = min(max(1, freq), 10);
	uint16_t MinD = MinDurationTable[freq];
    105c:	f8 01       	movw	r30, r16
    105e:	20 81       	ld	r18, Z
    1060:	31 81       	ldd	r19, Z+1	; 0x01
    1062:	22 0f       	add	r18, r18
    1064:	33 1f       	adc	r19, r19
    1066:	f9 01       	movw	r30, r18
    1068:	e2 5f       	subi	r30, 0xF2	; 242
    106a:	fe 4d       	sbci	r31, 0xDE	; 222
    106c:	c0 80       	ld	r12, Z
    106e:	d1 80       	ldd	r13, Z+1	; 0x01
	uint16_t MaxD = MaxDurationTable[freq];
    1070:	f9 01       	movw	r30, r18
    1072:	e8 50       	subi	r30, 0x08	; 8
    1074:	ff 4d       	sbci	r31, 0xDF	; 223
    1076:	01 90       	ld	r0, Z+
    1078:	f0 81       	ld	r31, Z
    107a:	e0 2d       	mov	r30, r0
	uint16_t Delta = (MaxD - MinD) / (TableNum[freq] - 1);
    107c:	cf 01       	movw	r24, r30
    107e:	8c 19       	sub	r24, r12
    1080:	9d 09       	sbc	r25, r13
    1082:	d9 01       	movw	r26, r18
    1084:	ae 51       	subi	r26, 0x1E	; 30
    1086:	bf 4d       	sbci	r27, 0xDF	; 223
    1088:	6d 91       	ld	r22, X+
    108a:	7c 91       	ld	r23, X
    108c:	61 50       	subi	r22, 0x01	; 1
    108e:	71 09       	sbc	r23, r1
    1090:	0e 94 ff 32 	call	0x65fe	; 0x65fe <__udivmodhi4>
	
	if (duration < MinD)
    1094:	d7 01       	movw	r26, r14
    1096:	8d 91       	ld	r24, X+
    1098:	9c 91       	ld	r25, X
    109a:	11 97       	sbiw	r26, 0x01	; 1
    109c:	8c 15       	cp	r24, r12
    109e:	9d 05       	cpc	r25, r13
    10a0:	20 f4       	brcc	.+8      	; 0x10aa <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x124>
	{
		duration = MinD;
    10a2:	cd 92       	st	X+, r12
    10a4:	dc 92       	st	X, r13
		update = true;
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	88 8b       	std	Y+16, r24	; 0x10
	}
	
	if (duration > MaxD)
    10aa:	d7 01       	movw	r26, r14
    10ac:	8d 91       	ld	r24, X+
    10ae:	9c 91       	ld	r25, X
    10b0:	11 97       	sbiw	r26, 0x01	; 1
    10b2:	e8 17       	cp	r30, r24
    10b4:	f9 07       	cpc	r31, r25
    10b6:	20 f4       	brcc	.+8      	; 0x10c0 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM+0x13a>
	{
		duration = MaxD;
    10b8:	ed 93       	st	X+, r30
    10ba:	fc 93       	st	X, r31
		update = true;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	88 8b       	std	Y+16, r24	; 0x10
	}
	
	uint16_t index = (duration - MinD) / Delta;
	index = min(max(0, index), TableNum[freq] - 1);
    10c0:	d8 01       	movw	r26, r16
    10c2:	ed 91       	ld	r30, X+
    10c4:	fc 91       	ld	r31, X
    10c6:	ee 0f       	add	r30, r30
    10c8:	ff 1f       	adc	r31, r31
    10ca:	ee 51       	subi	r30, 0x1E	; 30
    10cc:	ff 4d       	sbci	r31, 0xDF	; 223
    10ce:	a0 80       	ld	r10, Z
    10d0:	b1 80       	ldd	r11, Z+1	; 0x01
    10d2:	b1 e0       	ldi	r27, 0x01	; 1
    10d4:	ab 1a       	sub	r10, r27
    10d6:	b1 08       	sbc	r11, r1
	{
		duration = MaxD;
		update = true;
	}
	
	uint16_t index = (duration - MinD) / Delta;
    10d8:	f7 01       	movw	r30, r14
    10da:	80 81       	ld	r24, Z
    10dc:	91 81       	ldd	r25, Z+1	; 0x01
    10de:	8c 19       	sub	r24, r12
    10e0:	9d 09       	sbc	r25, r13
    10e2:	0e 94 ff 32 	call	0x65fe	; 0x65fe <__udivmodhi4>
	index = min(max(0, index), TableNum[freq] - 1);
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <_Z3maxjj>
    10ee:	b5 01       	movw	r22, r10
    10f0:	0e 94 cf 11 	call	0x239e	; 0x239e <_Z3minjj>
	
	m_wMaxEnergy = PowerTable[11 * (freq - 1) + index] / 5;
    10f4:	d8 01       	movw	r26, r16
    10f6:	4d 91       	ld	r20, X+
    10f8:	5c 91       	ld	r21, X
    10fa:	6b e0       	ldi	r22, 0x0B	; 11
    10fc:	64 9f       	mul	r22, r20
    10fe:	90 01       	movw	r18, r0
    1100:	65 9f       	mul	r22, r21
    1102:	30 0d       	add	r19, r0
    1104:	11 24       	eor	r1, r1
    1106:	82 0f       	add	r24, r18
    1108:	93 1f       	adc	r25, r19
    110a:	fc 01       	movw	r30, r24
    110c:	ee 0f       	add	r30, r30
    110e:	ff 1f       	adc	r31, r31
    1110:	e0 51       	subi	r30, 0x10	; 16
    1112:	f0 4e       	sbci	r31, 0xE0	; 224
    1114:	20 81       	ld	r18, Z
    1116:	31 81       	ldd	r19, Z+1	; 0x01
    1118:	ad ec       	ldi	r26, 0xCD	; 205
    111a:	bc ec       	ldi	r27, 0xCC	; 204
    111c:	0e 94 70 33 	call	0x66e0	; 0x66e0 <__umulhisi3>
    1120:	96 95       	lsr	r25
    1122:	87 95       	ror	r24
    1124:	96 95       	lsr	r25
    1126:	87 95       	ror	r24
    1128:	8a 8b       	std	Y+18, r24	; 0x12
    112a:	9b 8b       	std	Y+19, r25	; 0x13
	
	return update;
    112c:	88 89       	ldd	r24, Y+16	; 0x10
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	1f 91       	pop	r17
    1134:	0f 91       	pop	r16
    1136:	ff 90       	pop	r15
    1138:	ef 90       	pop	r14
    113a:	df 90       	pop	r13
    113c:	cf 90       	pop	r12
    113e:	bf 90       	pop	r11
    1140:	af 90       	pop	r10
    1142:	08 95       	ret

00001144 <_GLOBAL__sub_I_timer>:
#include "CDGUSDatabase.h"
#include <string.h>
#include <util/delay.h>
#include <avr/eeprom.h>

CTimerC timer;
    1144:	81 ec       	ldi	r24, 0xC1	; 193
    1146:	92 e2       	ldi	r25, 0x22	; 34
    1148:	0e 94 8e 2e 	call	0x5d1c	; 0x5d1c <_ZN7CTimerCC1Ev>
CTimerF laserTimer;
    114c:	8e eb       	ldi	r24, 0xBE	; 190
    114e:	92 e2       	ldi	r25, 0x22	; 34
    1150:	0e 94 aa 31 	call	0x6354	; 0x6354 <_ZN7CTimerFC1Ev>
    1154:	08 95       	ret

00001156 <_GLOBAL__sub_D_timer>:
    1156:	8e eb       	ldi	r24, 0xBE	; 190
    1158:	92 e2       	ldi	r25, 0x22	; 34
    115a:	0e 94 b6 31 	call	0x636c	; 0x636c <_ZN7CTimerFD1Ev>
#include "CDGUSDatabase.h"
#include <string.h>
#include <util/delay.h>
#include <avr/eeprom.h>

CTimerC timer;
    115e:	81 ec       	ldi	r24, 0xC1	; 193
    1160:	92 e2       	ldi	r25, 0x22	; 34
    1162:	0e 94 9a 2e 	call	0x5d34	; 0x5d34 <_ZN7CTimerCD1Ev>
    1166:	08 95       	ret

00001168 <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
    1168:	cf 92       	push	r12
    116a:	df 92       	push	r13
    116c:	ef 92       	push	r14
    116e:	ff 92       	push	r15
    1170:	0f 93       	push	r16
    1172:	1f 93       	push	r17
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	ec 01       	movw	r28, r24
	// GUI class initialization
	m_cpSender = sender;
    117a:	fc 01       	movw	r30, r24
    117c:	ec 58       	subi	r30, 0x8C	; 140
    117e:	ff 4f       	sbci	r31, 0xFF	; 255
    1180:	60 83       	st	Z, r22
    1182:	71 83       	std	Z+1, r23	; 0x01
	
	// Initialize prepare timer
	timer.Initialize(WGM_Normal, CS_DIV256);
    1184:	46 e0       	ldi	r20, 0x06	; 6
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	81 ec       	ldi	r24, 0xC1	; 193
    118a:	92 e2       	ldi	r25, 0x22	; 34
    118c:	0e 94 cb 2d 	call	0x5b96	; 0x5b96 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timer.SetPeriod(25000); // Every 10 ms
    1190:	68 ea       	ldi	r22, 0xA8	; 168
    1192:	71 e6       	ldi	r23, 0x61	; 97
    1194:	81 ec       	ldi	r24, 0xC1	; 193
    1196:	92 e2       	ldi	r25, 0x22	; 34
    1198:	0e 94 09 2e 	call	0x5c12	; 0x5c12 <_ZN7CTimerC9SetPeriodEj>
	timer.SetOVFCallback(OnTimerStatic, this, TC_OVFINTLVL_LO_gc); // Enable interrupt
    119c:	21 e0       	ldi	r18, 0x01	; 1
    119e:	ae 01       	movw	r20, r28
    11a0:	6d e0       	ldi	r22, 0x0D	; 13
    11a2:	71 e1       	ldi	r23, 0x11	; 17
    11a4:	81 ec       	ldi	r24, 0xC1	; 193
    11a6:	92 e2       	ldi	r25, 0x22	; 34
    11a8:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	//timer.Start(25000);
	
	// Set global variables
	PIC_ID = 0;
    11ac:	1e 86       	std	Y+14, r1	; 0x0e
	update = false;
    11ae:	18 8a       	std	Y+16, r1	; 0x10
	prepare = false;
    11b0:	19 8a       	std	Y+17, r1	; 0x11
	m_wSetMin = 1;
    11b2:	6e 01       	movw	r12, r28
    11b4:	8c e6       	ldi	r24, 0x6C	; 108
    11b6:	c8 0e       	add	r12, r24
    11b8:	d1 1c       	adc	r13, r1
    11ba:	21 e0       	ldi	r18, 0x01	; 1
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	f6 01       	movw	r30, r12
    11c0:	20 83       	st	Z, r18
    11c2:	31 83       	std	Z+1, r19	; 0x01
	m_wSetSec = 40;
    11c4:	7e 01       	movw	r14, r28
    11c6:	fe e6       	ldi	r31, 0x6E	; 110
    11c8:	ef 0e       	add	r14, r31
    11ca:	f1 1c       	adc	r15, r1
    11cc:	88 e2       	ldi	r24, 0x28	; 40
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	f7 01       	movw	r30, r14
    11d2:	80 83       	st	Z, r24
    11d4:	91 83       	std	Z+1, r25	; 0x01
	m_wMillSec = 0;
    11d6:	34 97       	sbiw	r30, 0x04	; 4
    11d8:	10 82       	st	Z, r1
    11da:	11 82       	std	Z+1, r1	; 0x01
	m_wMinutes = m_wSetMin;
    11dc:	f6 01       	movw	r30, r12
    11de:	40 81       	ld	r20, Z
    11e0:	51 81       	ldd	r21, Z+1	; 0x01
    11e2:	36 97       	sbiw	r30, 0x06	; 6
    11e4:	40 83       	st	Z, r20
    11e6:	51 83       	std	Z+1, r21	; 0x01
	m_wSeconds = m_wSetSec;
    11e8:	f7 01       	movw	r30, r14
    11ea:	40 81       	ld	r20, Z
    11ec:	51 81       	ldd	r21, Z+1	; 0x01
    11ee:	36 97       	sbiw	r30, 0x06	; 6
    11f0:	40 83       	st	Z, r20
    11f2:	51 83       	std	Z+1, r21	; 0x01
	m_wDeadTime = 0;
    11f4:	3a 96       	adiw	r30, 0x0a	; 10
    11f6:	10 82       	st	Z, r1
    11f8:	11 82       	std	Z+1, r1	; 0x01
	
	// Fast profile
	m_structLaserProfile[PROFILE_FAST].Frequency = 10;			// 10 Hz
    11fa:	4a e0       	ldi	r20, 0x0A	; 10
    11fc:	50 e0       	ldi	r21, 0x00	; 0
    11fe:	4e a7       	std	Y+46, r20	; 0x2e
    1200:	5f a7       	std	Y+47, r21	; 0x2f
	m_structLaserProfile[PROFILE_FAST].Duration  = 40;			// ms
    1202:	88 ab       	std	Y+48, r24	; 0x30
    1204:	99 ab       	std	Y+49, r25	; 0x31
	m_structLaserProfile[PROFILE_FAST].EnergyPercent = 100;		// W
    1206:	84 e6       	ldi	r24, 0x64	; 100
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	8a ab       	std	Y+50, r24	; 0x32
    120c:	9b ab       	std	Y+51, r25	; 0x33
	
	// Medium profile
	m_structLaserProfile[PROFILE_MEDIUM].Frequency = 5;			// 10 Hz
    120e:	45 e0       	ldi	r20, 0x05	; 5
    1210:	50 e0       	ldi	r21, 0x00	; 0
    1212:	48 a7       	std	Y+40, r20	; 0x28
    1214:	59 a7       	std	Y+41, r21	; 0x29
	m_structLaserProfile[PROFILE_MEDIUM].Duration  = 80;		// ms
    1216:	40 e5       	ldi	r20, 0x50	; 80
    1218:	50 e0       	ldi	r21, 0x00	; 0
    121a:	4a a7       	std	Y+42, r20	; 0x2a
    121c:	5b a7       	std	Y+43, r21	; 0x2b
	m_structLaserProfile[PROFILE_MEDIUM].EnergyPercent = 100;	// W
    121e:	8c a7       	std	Y+44, r24	; 0x2c
    1220:	9d a7       	std	Y+45, r25	; 0x2d
	
	// Slow profile
	m_structLaserProfile[PROFILE_SLOW].Frequency = 2;			// 10 Hz
    1222:	42 e0       	ldi	r20, 0x02	; 2
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	4a a3       	std	Y+34, r20	; 0x22
    1228:	5b a3       	std	Y+35, r21	; 0x23
	m_structLaserProfile[PROFILE_SLOW].Duration  = 120;			// ma
    122a:	48 e7       	ldi	r20, 0x78	; 120
    122c:	50 e0       	ldi	r21, 0x00	; 0
    122e:	4c a3       	std	Y+36, r20	; 0x24
    1230:	5d a3       	std	Y+37, r21	; 0x25
	m_structLaserProfile[PROFILE_SLOW].EnergyPercent = 100;		// W
    1232:	8e a3       	std	Y+38, r24	; 0x26
    1234:	9f a3       	std	Y+39, r25	; 0x27
	
	// Single profile
	m_structLaserProfile[PROFILE_SINGLE].Frequency = 1;			// 10 Hz
    1236:	2c 8f       	std	Y+28, r18	; 0x1c
    1238:	3d 8f       	std	Y+29, r19	; 0x1d
	m_structLaserProfile[PROFILE_SINGLE].Duration  = 100;		// ms
    123a:	8e 8f       	std	Y+30, r24	; 0x1e
    123c:	9f 8f       	std	Y+31, r25	; 0x1f
	m_structLaserProfile[PROFILE_SINGLE].EnergyPercent = 100;	// W
    123e:	88 a3       	std	Y+32, r24	; 0x20
    1240:	99 a3       	std	Y+33, r25	; 0x21
	
	// Current profile
	Profile = PROFILE_FAST;
    1242:	84 e0       	ldi	r24, 0x04	; 4
    1244:	8d 87       	std	Y+13, r24	; 0x0d
	
	// Set all laser settings
	laserCounter = eeprom_read_dword((uint32_t*)LASER_CNT_EEPROMADDR);
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	0e 94 c0 34 	call	0x6980	; 0x6980 <eeprom_read_dword>
    124e:	6c af       	std	Y+60, r22	; 0x3c
    1250:	7d af       	std	Y+61, r23	; 0x3d
    1252:	8e af       	std	Y+62, r24	; 0x3e
    1254:	9f af       	std	Y+63, r25	; 0x3f
	laserDiodeData.mode = Profile;
    1256:	fe 01       	movw	r30, r28
    1258:	e0 5c       	subi	r30, 0xC0	; 192
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	84 e0       	ldi	r24, 0x04	; 4
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	80 83       	st	Z, r24
    1262:	91 83       	std	Z+1, r25	; 0x01
	memcpy((void*)&laserDiodeData.laserprofile, (void*)&m_structLaserProfile[PROFILE_FAST], sizeof(DGUS_LASERPROFILE));
    1264:	be 01       	movw	r22, r28
    1266:	62 5d       	subi	r22, 0xD2	; 210
    1268:	7f 4f       	sbci	r23, 0xFF	; 255
    126a:	de 01       	movw	r26, r28
    126c:	ae 5b       	subi	r26, 0xBE	; 190
    126e:	bf 4f       	sbci	r27, 0xFF	; 255
    1270:	86 e0       	ldi	r24, 0x06	; 6
    1272:	fb 01       	movw	r30, r22
    1274:	01 90       	ld	r0, Z+
    1276:	0d 92       	st	X+, r0
    1278:	8a 95       	dec	r24
    127a:	e1 f7       	brne	.-8      	; 0x1274 <_ZN16CLaserControlApp10InitializeEP9CMBSender+0x10c>
	laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[PROFILE_FAST]);
    127c:	8e 01       	movw	r16, r28
    127e:	08 5b       	subi	r16, 0xB8	; 184
    1280:	1f 4f       	sbci	r17, 0xFF	; 255
    1282:	ce 01       	movw	r24, r28
    1284:	0e 94 31 05 	call	0xa62	; 0xa62 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
    1288:	f8 01       	movw	r30, r16
    128a:	20 83       	st	Z, r18
    128c:	31 83       	std	Z+1, r19	; 0x01
    128e:	42 83       	std	Z+2, r20	; 0x02
    1290:	53 83       	std	Z+3, r21	; 0x03
    1292:	64 83       	std	Z+4, r22	; 0x04
    1294:	75 83       	std	Z+5, r23	; 0x05
	laserDiodeData.timer.timer_minutes = m_wSetMin;
    1296:	f6 01       	movw	r30, r12
    1298:	80 81       	ld	r24, Z
    129a:	91 81       	ldd	r25, Z+1	; 0x01
    129c:	70 97       	sbiw	r30, 0x10	; 16
    129e:	80 83       	st	Z, r24
    12a0:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.timer.timer_seconds = m_wSetSec;
    12a2:	f7 01       	movw	r30, r14
    12a4:	80 81       	ld	r24, Z
    12a6:	91 81       	ldd	r25, Z+1	; 0x01
    12a8:	70 97       	sbiw	r30, 0x10	; 16
    12aa:	80 83       	st	Z, r24
    12ac:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.PulseCounter = swap32(laserCounter);
    12ae:	6c ad       	ldd	r22, Y+60	; 0x3c
    12b0:	7d ad       	ldd	r23, Y+61	; 0x3d
    12b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    12b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    12b6:	0e 94 dd 11 	call	0x23ba	; 0x23ba <_Z6swap32m>
    12ba:	fe 01       	movw	r30, r28
    12bc:	e2 5b       	subi	r30, 0xB2	; 178
    12be:	ff 4f       	sbci	r31, 0xFF	; 255
    12c0:	60 83       	st	Z, r22
    12c2:	71 83       	std	Z+1, r23	; 0x01
    12c4:	82 83       	std	Z+2, r24	; 0x02
    12c6:	93 83       	std	Z+3, r25	; 0x03
	laserDiodeData.melanin = 0;
    12c8:	34 96       	adiw	r30, 0x04	; 4
    12ca:	10 82       	st	Z, r1
    12cc:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.phototype = 0;
    12ce:	32 96       	adiw	r30, 0x02	; 2
    12d0:	10 82       	st	Z, r1
    12d2:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.temperature = temperature;
    12d4:	32 96       	adiw	r30, 0x02	; 2
    12d6:	80 91 f4 24 	lds	r24, 0x24F4
    12da:	90 91 f5 24 	lds	r25, 0x24F5
    12de:	80 83       	st	Z, r24
    12e0:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.cooling = 3;
    12e2:	32 96       	adiw	r30, 0x02	; 2
    12e4:	83 e0       	ldi	r24, 0x03	; 3
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	80 83       	st	Z, r24
    12ea:	91 83       	std	Z+1, r25	; 0x01
	laserDiodeData.flow = 0;
    12ec:	32 96       	adiw	r30, 0x02	; 2
    12ee:	10 82       	st	Z, r1
    12f0:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.DatabasePageOffset = 0;
    12f2:	36 96       	adiw	r30, 0x06	; 6
    12f4:	10 82       	st	Z, r1
    12f6:	11 82       	std	Z+1, r1	; 0x01
	laserDiodeData.DatabaseSelectionIndex = 13;
    12f8:	32 96       	adiw	r30, 0x02	; 2
    12fa:	8d e0       	ldi	r24, 0x0D	; 13
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	80 83       	st	Z, r24
    1300:	91 83       	std	Z+1, r25	; 0x01
	
	// Initialize Laser timer
	laserTimer.Initialize(WGM_SingleSlopePWM, CS_DIV1024);
    1302:	47 e0       	ldi	r20, 0x07	; 7
    1304:	63 e0       	ldi	r22, 0x03	; 3
    1306:	8e eb       	ldi	r24, 0xBE	; 190
    1308:	92 e2       	ldi	r25, 0x22	; 34
    130a:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	laserTimer.SetPeriod(laserTimerPeriod);		// 10 Hz
    130e:	6c a9       	ldd	r22, Y+52	; 0x34
    1310:	7d a9       	ldd	r23, Y+53	; 0x35
    1312:	8e eb       	ldi	r24, 0xBE	; 190
    1314:	92 e2       	ldi	r25, 0x22	; 34
    1316:	0e 94 25 31 	call	0x624a	; 0x624a <_ZN7CTimerF9SetPeriodEj>
	laserTimer.SetCOMPA(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
    131a:	6e a9       	ldd	r22, Y+54	; 0x36
    131c:	7f a9       	ldd	r23, Y+55	; 0x37
    131e:	8e eb       	ldi	r24, 0xBE	; 190
    1320:	92 e2       	ldi	r25, 0x22	; 34
    1322:	0e 94 2a 31 	call	0x6254	; 0x6254 <_ZN7CTimerF8SetCOMPAEj>
	laserTimer.SetCOMPB(laserTimerDutyCycle);	// 50 ms, 50% duty cycle
    1326:	6e a9       	ldd	r22, Y+54	; 0x36
    1328:	7f a9       	ldd	r23, Y+55	; 0x37
    132a:	8e eb       	ldi	r24, 0xBE	; 190
    132c:	92 e2       	ldi	r25, 0x22	; 34
    132e:	0e 94 2f 31 	call	0x625e	; 0x625e <_ZN7CTimerF8SetCOMPBEj>
	laserTimer.SetOVFCallback(OnLaserTimerStopStatic, this, TC_OVFINTLVL_LO_gc);
    1332:	21 e0       	ldi	r18, 0x01	; 1
    1334:	ae 01       	movw	r20, r28
    1336:	69 e4       	ldi	r22, 0x49	; 73
    1338:	76 e0       	ldi	r23, 0x06	; 6
    133a:	8e eb       	ldi	r24, 0xBE	; 190
    133c:	92 e2       	ldi	r25, 0x22	; 34
    133e:	0e 94 3e 31 	call	0x627c	; 0x627c <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	laserTimer.SetCOMPACallback(OnLaserTimerStatic, this, TC_CCAINTLVL_LO_gc);
    1342:	21 e0       	ldi	r18, 0x01	; 1
    1344:	ae 01       	movw	r20, r28
    1346:	6f e1       	ldi	r22, 0x1F	; 31
    1348:	7a e0       	ldi	r23, 0x0A	; 10
    134a:	8e eb       	ldi	r24, 0xBE	; 190
    134c:	92 e2       	ldi	r25, 0x22	; 34
    134e:	0e 94 62 31 	call	0x62c4	; 0x62c4 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
	laserTimer.EnableChannel(TIMER_CHANNEL_A);	// Enable Laser TTL Gate
    1352:	60 e1       	ldi	r22, 0x10	; 16
    1354:	8e eb       	ldi	r24, 0xBE	; 190
    1356:	92 e2       	ldi	r25, 0x22	; 34
    1358:	0e 94 07 31 	call	0x620e	; 0x620e <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.EnableChannel(TIMER_CHANNEL_B);	// Enable Laser TTL Gate
    135c:	60 e2       	ldi	r22, 0x20	; 32
    135e:	8e eb       	ldi	r24, 0xBE	; 190
    1360:	92 e2       	ldi	r25, 0x22	; 34
    1362:	0e 94 07 31 	call	0x620e	; 0x620e <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
    1366:	60 e1       	ldi	r22, 0x10	; 16
    1368:	8e eb       	ldi	r24, 0xBE	; 190
    136a:	92 e2       	ldi	r25, 0x22	; 34
    136c:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	laserTimer.ChannelSet(TIMER_CHANNEL_B);
    1370:	60 e2       	ldi	r22, 0x20	; 32
    1372:	8e eb       	ldi	r24, 0xBE	; 190
    1374:	92 e2       	ldi	r25, 0x22	; 34
    1376:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
}
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	1f 91       	pop	r17
    1380:	0f 91       	pop	r16
    1382:	ff 90       	pop	r15
    1384:	ef 90       	pop	r14
    1386:	df 90       	pop	r13
    1388:	cf 90       	pop	r12
    138a:	08 95       	ret

0000138c <_ZN16CLaserControlApp5StartEv>:

void CLaserControlApp::Start()
{	
    138c:	ef 92       	push	r14
    138e:	ff 92       	push	r15
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	1f 92       	push	r1
    139a:	1f 92       	push	r1
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	7c 01       	movw	r14, r24
	// Startup DGUS initialization
	uint16_t pic_id = swap(PICID_MAINMENU);
    13a2:	83 e0       	ldi	r24, 0x03	; 3
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <_Z4swapj>
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	9a 83       	std	Y+2, r25	; 0x02
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    13ae:	87 01       	movw	r16, r14
    13b0:	0c 58       	subi	r16, 0x8C	; 140
    13b2:	1f 4f       	sbci	r17, 0xFF	; 255
    13b4:	22 e0       	ldi	r18, 0x02	; 2
    13b6:	ae 01       	movw	r20, r28
    13b8:	4f 5f       	subi	r20, 0xFF	; 255
    13ba:	5f 4f       	sbci	r21, 0xFF	; 255
    13bc:	63 e0       	ldi	r22, 0x03	; 3
    13be:	f8 01       	movw	r30, r16
    13c0:	80 81       	ld	r24, Z
    13c2:	91 81       	ldd	r25, Z+1	; 0x01
    13c4:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
    13c8:	f8 01       	movw	r30, r16
    13ca:	80 81       	ld	r24, Z
    13cc:	91 81       	ldd	r25, Z+1	; 0x01
    13ce:	0e 94 9d 2a 	call	0x553a	; 0x553a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	// Setup variables
	m_cpSender->WriteDataToSRAMAsync(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
    13d2:	a7 01       	movw	r20, r14
    13d4:	40 5c       	subi	r20, 0xC0	; 192
    13d6:	5f 4f       	sbci	r21, 0xFF	; 255
    13d8:	26 e2       	ldi	r18, 0x26	; 38
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	61 e0       	ldi	r22, 0x01	; 1
    13de:	70 e0       	ldi	r23, 0x00	; 0
    13e0:	f8 01       	movw	r30, r16
    13e2:	80 81       	ld	r24, Z
    13e4:	91 81       	ldd	r25, Z+1	; 0x01
    13e6:	0e 94 6f 2a 	call	0x54de	; 0x54de <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
    13ea:	f8 01       	movw	r30, r16
    13ec:	80 81       	ld	r24, Z
    13ee:	91 81       	ldd	r25, Z+1	; 0x01
    13f0:	0e 94 9d 2a 	call	0x553a	; 0x553a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	timer.Start(25000);
    13f4:	68 ea       	ldi	r22, 0xA8	; 168
    13f6:	71 e6       	ldi	r23, 0x61	; 97
    13f8:	81 ec       	ldi	r24, 0xC1	; 193
    13fa:	92 e2       	ldi	r25, 0x22	; 34
    13fc:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <_ZN7CTimerC5StartEj>
	
	state = APP_WORKSETUP;
    1400:	83 e0       	ldi	r24, 0x03	; 3
    1402:	f7 01       	movw	r30, r14
    1404:	84 87       	std	Z+12, r24	; 0x0c
}
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	1f 91       	pop	r17
    1410:	0f 91       	pop	r16
    1412:	ff 90       	pop	r15
    1414:	ef 90       	pop	r14
    1416:	08 95       	ret

00001418 <_ZN16CLaserControlApp16OnLaserTimerStopEv>:
	player.SoundStop();
}

void CLaserControlApp::OnLaserTimerStop()
{	
	if (Profile == PROFILE_SINGLE)
    1418:	fc 01       	movw	r30, r24
    141a:	85 85       	ldd	r24, Z+13	; 0x0d
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	71 f4       	brne	.+28     	; 0x143c <_ZN16CLaserControlApp16OnLaserTimerStopEv+0x24>
	{
		laserTimer.Stop();
    1420:	8e eb       	ldi	r24, 0xBE	; 190
    1422:	92 e2       	ldi	r25, 0x22	; 34
    1424:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN7CTimerF4StopEv>
		laserTimer.ChannelSet(TIMER_CHANNEL_A);
    1428:	60 e1       	ldi	r22, 0x10	; 16
    142a:	8e eb       	ldi	r24, 0xBE	; 190
    142c:	92 e2       	ldi	r25, 0x22	; 34
    142e:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
		laserTimer.ChannelSet(TIMER_CHANNEL_B);
    1432:	60 e2       	ldi	r22, 0x20	; 32
    1434:	8e eb       	ldi	r24, 0xBE	; 190
    1436:	92 e2       	ldi	r25, 0x22	; 34
    1438:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
    143c:	08 95       	ret

0000143e <_ZN16CLaserControlApp18OnLaserTimerStaticEPv>:
}

void CLaserControlApp::OnLaserTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnLaserTimerStop();
    143e:	0e 94 0c 0a 	call	0x1418	; 0x1418 <_ZN16CLaserControlApp16OnLaserTimerStopEv>
    1442:	08 95       	ret

00001444 <_ZN16CLaserControlApp3RunEv>:
{

}

void CLaserControlApp::Run()
{	
    1444:	af 92       	push	r10
    1446:	bf 92       	push	r11
    1448:	cf 92       	push	r12
    144a:	df 92       	push	r13
    144c:	ef 92       	push	r14
    144e:	ff 92       	push	r15
    1450:	0f 93       	push	r16
    1452:	1f 93       	push	r17
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	00 d0       	rcall	.+0      	; 0x145a <_ZN16CLaserControlApp3RunEv+0x16>
    145a:	00 d0       	rcall	.+0      	; 0x145c <_ZN16CLaserControlApp3RunEv+0x18>
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	7c 01       	movw	r14, r24
	// Get PIC ID
	m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
    1462:	8c 01       	movw	r16, r24
    1464:	0c 58       	subi	r16, 0x8C	; 140
    1466:	1f 4f       	sbci	r17, 0xFF	; 255
    1468:	42 e0       	ldi	r20, 0x02	; 2
    146a:	63 e0       	ldi	r22, 0x03	; 3
    146c:	f8 01       	movw	r30, r16
    146e:	80 81       	ld	r24, Z
    1470:	91 81       	ldd	r25, Z+1	; 0x01
    1472:	0e 94 ae 2a 	call	0x555c	; 0x555c <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
	m_cpSender->WaitMODBUSTransmitter();
    1476:	f8 01       	movw	r30, r16
    1478:	80 81       	ld	r24, Z
    147a:	91 81       	ldd	r25, Z+1	; 0x01
    147c:	0e 94 9d 2a 	call	0x553a	; 0x553a <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WaitMODBUSListener();
    1480:	f8 01       	movw	r30, r16
    1482:	80 81       	ld	r24, Z
    1484:	91 81       	ldd	r25, Z+1	; 0x01
    1486:	0e 94 3a 2a 	call	0x5474	; 0x5474 <_ZN9CMBSender18WaitMODBUSListenerEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    148a:	ff ef       	ldi	r31, 0xFF	; 255
    148c:	29 ef       	ldi	r18, 0xF9	; 249
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	f1 50       	subi	r31, 0x01	; 1
    1492:	20 40       	sbci	r18, 0x00	; 0
    1494:	80 40       	sbci	r24, 0x00	; 0
    1496:	e1 f7       	brne	.-8      	; 0x1490 <_ZN16CLaserControlApp3RunEv+0x4c>
    1498:	00 c0       	rjmp	.+0      	; 0x149a <_ZN16CLaserControlApp3RunEv+0x56>
    149a:	00 00       	nop
	
	_delay_ms(10);
	
	switch (state)
    149c:	f7 01       	movw	r30, r14
    149e:	84 85       	ldd	r24, Z+12	; 0x0c
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	83 31       	cpi	r24, 0x13	; 19
    14a4:	91 05       	cpc	r25, r1
    14a6:	08 f0       	brcs	.+2      	; 0x14aa <_ZN16CLaserControlApp3RunEv+0x66>
    14a8:	78 c5       	rjmp	.+2800   	; 0x1f9a <_ZN16CLaserControlApp3RunEv+0xb56>
    14aa:	fc 01       	movw	r30, r24
    14ac:	88 27       	eor	r24, r24
    14ae:	e0 5c       	subi	r30, 0xC0	; 192
    14b0:	fe 4f       	sbci	r31, 0xFE	; 254
    14b2:	8f 4f       	sbci	r24, 0xFF	; 255
    14b4:	0c 94 68 33 	jmp	0x66d0	; 0x66d0 <__tablejump2__>
	{		
		// DGUS State
		case APP_LOGO:
			{
				SetPictureId(PICID_MAINMENU);
    14b8:	63 e0       	ldi	r22, 0x03	; 3
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	c7 01       	movw	r24, r14
    14be:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN16CLaserControlApp12SetPictureIdEj>
				state = APP_WORKIDLE;
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	f7 01       	movw	r30, r14
    14c6:	84 87       	std	Z+12, r24	; 0x0c
			}
		break;
    14c8:	6c c5       	rjmp	.+2776   	; 0x1fa2 <_ZN16CLaserControlApp3RunEv+0xb5e>
		case APP_WORKSETUP:
			{
				uint16_t melanin = laserDiodeData.melanin;
    14ca:	f7 01       	movw	r30, r14
    14cc:	ee 5a       	subi	r30, 0xAE	; 174
    14ce:	ff 4f       	sbci	r31, 0xFF	; 255
    14d0:	c0 80       	ld	r12, Z
    14d2:	d1 80       	ldd	r13, Z+1	; 0x01
				uint16_t phototype = laserDiodeData.phototype;
    14d4:	32 96       	adiw	r30, 0x02	; 2
    14d6:	00 81       	ld	r16, Z
    14d8:	11 81       	ldd	r17, Z+1	; 0x01
				
				GetVariable(STRUCT_ADDR_LASERPROFILE_DATA, sizeof(DGUS_LASERPROFILE));
    14da:	46 e0       	ldi	r20, 0x06	; 6
    14dc:	50 e0       	ldi	r21, 0x00	; 0
    14de:	62 e0       	ldi	r22, 0x02	; 2
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	c7 01       	movw	r24, r14
    14e4:	0e 94 d6 05 	call	0xbac	; 0xbac <_ZN16CLaserControlApp11GetVariableEjj>
    14e8:	ff ef       	ldi	r31, 0xFF	; 255
    14ea:	29 ef       	ldi	r18, 0xF9	; 249
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	f1 50       	subi	r31, 0x01	; 1
    14f0:	20 40       	sbci	r18, 0x00	; 0
    14f2:	80 40       	sbci	r24, 0x00	; 0
    14f4:	e1 f7       	brne	.-8      	; 0x14ee <_ZN16CLaserControlApp3RunEv+0xaa>
    14f6:	00 c0       	rjmp	.+0      	; 0x14f8 <_ZN16CLaserControlApp3RunEv+0xb4>
    14f8:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_COOLING, 2);
    14fa:	42 e0       	ldi	r20, 0x02	; 2
    14fc:	50 e0       	ldi	r21, 0x00	; 0
    14fe:	6d e0       	ldi	r22, 0x0D	; 13
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	c7 01       	movw	r24, r14
    1504:	0e 94 d6 05 	call	0xbac	; 0xbac <_ZN16CLaserControlApp11GetVariableEjj>
    1508:	9f ef       	ldi	r25, 0xFF	; 255
    150a:	e9 ef       	ldi	r30, 0xF9	; 249
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	91 50       	subi	r25, 0x01	; 1
    1510:	e0 40       	sbci	r30, 0x00	; 0
    1512:	f0 40       	sbci	r31, 0x00	; 0
    1514:	e1 f7       	brne	.-8      	; 0x150e <_ZN16CLaserControlApp3RunEv+0xca>
    1516:	00 c0       	rjmp	.+0      	; 0x1518 <_ZN16CLaserControlApp3RunEv+0xd4>
    1518:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_MODE, 2);
    151a:	42 e0       	ldi	r20, 0x02	; 2
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	61 e0       	ldi	r22, 0x01	; 1
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	c7 01       	movw	r24, r14
    1524:	0e 94 d6 05 	call	0xbac	; 0xbac <_ZN16CLaserControlApp11GetVariableEjj>
    1528:	2f ef       	ldi	r18, 0xFF	; 255
    152a:	89 ef       	ldi	r24, 0xF9	; 249
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	21 50       	subi	r18, 0x01	; 1
    1530:	80 40       	sbci	r24, 0x00	; 0
    1532:	90 40       	sbci	r25, 0x00	; 0
    1534:	e1 f7       	brne	.-8      	; 0x152e <_ZN16CLaserControlApp3RunEv+0xea>
    1536:	00 c0       	rjmp	.+0      	; 0x1538 <_ZN16CLaserControlApp3RunEv+0xf4>
    1538:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_MELANIN, 2);
    153a:	42 e0       	ldi	r20, 0x02	; 2
    153c:	50 e0       	ldi	r21, 0x00	; 0
    153e:	6a e0       	ldi	r22, 0x0A	; 10
    1540:	70 e0       	ldi	r23, 0x00	; 0
    1542:	c7 01       	movw	r24, r14
    1544:	0e 94 d6 05 	call	0xbac	; 0xbac <_ZN16CLaserControlApp11GetVariableEjj>
    1548:	ef ef       	ldi	r30, 0xFF	; 255
    154a:	f9 ef       	ldi	r31, 0xF9	; 249
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	e1 50       	subi	r30, 0x01	; 1
    1550:	f0 40       	sbci	r31, 0x00	; 0
    1552:	20 40       	sbci	r18, 0x00	; 0
    1554:	e1 f7       	brne	.-8      	; 0x154e <_ZN16CLaserControlApp3RunEv+0x10a>
    1556:	00 c0       	rjmp	.+0      	; 0x1558 <_ZN16CLaserControlApp3RunEv+0x114>
    1558:	00 00       	nop
				_delay_ms(10);
				GetVariable(VARIABLE_ADDR_PHOTOTYPE, 2);
    155a:	42 e0       	ldi	r20, 0x02	; 2
    155c:	50 e0       	ldi	r21, 0x00	; 0
    155e:	6b e0       	ldi	r22, 0x0B	; 11
    1560:	70 e0       	ldi	r23, 0x00	; 0
    1562:	c7 01       	movw	r24, r14
    1564:	0e 94 d6 05 	call	0xbac	; 0xbac <_ZN16CLaserControlApp11GetVariableEjj>
    1568:	8f ef       	ldi	r24, 0xFF	; 255
    156a:	99 ef       	ldi	r25, 0xF9	; 249
    156c:	e0 e0       	ldi	r30, 0x00	; 0
    156e:	81 50       	subi	r24, 0x01	; 1
    1570:	90 40       	sbci	r25, 0x00	; 0
    1572:	e0 40       	sbci	r30, 0x00	; 0
    1574:	e1 f7       	brne	.-8      	; 0x156e <_ZN16CLaserControlApp3RunEv+0x12a>
    1576:	00 c0       	rjmp	.+0      	; 0x1578 <_ZN16CLaserControlApp3RunEv+0x134>
    1578:	00 00       	nop
				_delay_ms(10);
				
				laserDiodeData.temperature = temperature;
    157a:	80 91 f4 24 	lds	r24, 0x24F4
    157e:	90 91 f5 24 	lds	r25, 0x24F5
    1582:	f7 01       	movw	r30, r14
    1584:	ea 5a       	subi	r30, 0xAA	; 170
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	80 83       	st	Z, r24
    158a:	91 83       	std	Z+1, r25	; 0x01
				laserDiodeData.flow = m_wFlow;
    158c:	57 01       	movw	r10, r14
    158e:	f0 e7       	ldi	r31, 0x70	; 112
    1590:	af 0e       	add	r10, r31
    1592:	b1 1c       	adc	r11, r1
    1594:	f5 01       	movw	r30, r10
    1596:	80 81       	ld	r24, Z
    1598:	91 81       	ldd	r25, Z+1	; 0x01
    159a:	76 97       	sbiw	r30, 0x16	; 22
    159c:	80 83       	st	Z, r24
    159e:	91 83       	std	Z+1, r25	; 0x01
				SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
    15a0:	22 e0       	ldi	r18, 0x02	; 2
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	44 ef       	ldi	r20, 0xF4	; 244
    15a6:	54 e2       	ldi	r21, 0x24	; 36
    15a8:	6c e0       	ldi	r22, 0x0C	; 12
    15aa:	70 e0       	ldi	r23, 0x00	; 0
    15ac:	c7 01       	movw	r24, r14
    15ae:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
				if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
    15b2:	f5 01       	movw	r30, r10
    15b4:	80 81       	ld	r24, Z
    15b6:	91 81       	ldd	r25, Z+1	; 0x01
    15b8:	44 97       	sbiw	r24, 0x14	; 20
    15ba:	28 f4       	brcc	.+10     	; 0x15c6 <_ZN16CLaserControlApp3RunEv+0x182>
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	3c 97       	sbiw	r30, 0x0c	; 12
    15c2:	80 83       	st	Z, r24
    15c4:	91 83       	std	Z+1, r25	; 0x01
				if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    15c6:	f7 01       	movw	r30, r14
    15c8:	e0 59       	subi	r30, 0x90	; 144
    15ca:	ff 4f       	sbci	r31, 0xFF	; 255
    15cc:	80 81       	ld	r24, Z
    15ce:	91 81       	ldd	r25, Z+1	; 0x01
    15d0:	44 97       	sbiw	r24, 0x14	; 20
    15d2:	28 f0       	brcs	.+10     	; 0x15de <_ZN16CLaserControlApp3RunEv+0x19a>
    15d4:	80 81       	ld	r24, Z
    15d6:	91 81       	ldd	r25, Z+1	; 0x01
    15d8:	89 97       	sbiw	r24, 0x29	; 41
    15da:	08 f4       	brcc	.+2      	; 0x15de <_ZN16CLaserControlApp3RunEv+0x19a>
    15dc:	00 c5       	rjmp	.+2560   	; 0x1fde <_ZN16CLaserControlApp3RunEv+0xb9a>
				if (m_wFlow > 40) laserDiodeData.coolIcon = 3;
    15de:	f7 01       	movw	r30, r14
    15e0:	e0 59       	subi	r30, 0x90	; 144
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	80 81       	ld	r24, Z
    15e6:	91 81       	ldd	r25, Z+1	; 0x01
    15e8:	89 97       	sbiw	r24, 0x29	; 41
    15ea:	28 f0       	brcs	.+10     	; 0x15f6 <_ZN16CLaserControlApp3RunEv+0x1b2>
    15ec:	83 e0       	ldi	r24, 0x03	; 3
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	3c 97       	sbiw	r30, 0x0c	; 12
    15f2:	80 83       	st	Z, r24
    15f4:	91 83       	std	Z+1, r25	; 0x01
				SetVariable(VARIABLE_ADDR_COOLICON, (uint16_t*)&laserDiodeData.coolIcon, 2);
    15f6:	22 e0       	ldi	r18, 0x02	; 2
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	a7 01       	movw	r20, r14
    15fc:	4c 59       	subi	r20, 0x9C	; 156
    15fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1600:	63 e1       	ldi	r22, 0x13	; 19
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	c7 01       	movw	r24, r14
    1606:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
				SetVariable(VARIABLE_ADDR_FLOW, (uint16_t*)&m_wFlow, 2);
    160a:	22 e0       	ldi	r18, 0x02	; 2
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	a7 01       	movw	r20, r14
    1610:	40 59       	subi	r20, 0x90	; 144
    1612:	5f 4f       	sbci	r21, 0xFF	; 255
    1614:	6e e0       	ldi	r22, 0x0E	; 14
    1616:	70 e0       	ldi	r23, 0x00	; 0
    1618:	c7 01       	movw	r24, r14
    161a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
				
				if (phototype != laserDiodeData.phototype)
    161e:	f7 01       	movw	r30, r14
    1620:	ec 5a       	subi	r30, 0xAC	; 172
    1622:	ff 4f       	sbci	r31, 0xFF	; 255
    1624:	60 81       	ld	r22, Z
    1626:	71 81       	ldd	r23, Z+1	; 0x01
    1628:	60 17       	cp	r22, r16
    162a:	71 07       	cpc	r23, r17
    162c:	39 f0       	breq	.+14     	; 0x163c <_ZN16CLaserControlApp3RunEv+0x1f8>
				{
					PhototypePreset(laserDiodeData.phototype);
    162e:	c7 01       	movw	r24, r14
    1630:	0e 94 0c 07 	call	0xe18	; 0xe18 <_ZN16CLaserControlApp15PhototypePresetEj>
					update = true;
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	f7 01       	movw	r30, r14
    1638:	80 8b       	std	Z+16, r24	; 0x10
    163a:	4f c0       	rjmp	.+158    	; 0x16da <_ZN16CLaserControlApp3RunEv+0x296>
				}
				else
				if (melanin != laserDiodeData.melanin)
    163c:	f7 01       	movw	r30, r14
    163e:	ee 5a       	subi	r30, 0xAE	; 174
    1640:	ff 4f       	sbci	r31, 0xFF	; 255
    1642:	60 81       	ld	r22, Z
    1644:	71 81       	ldd	r23, Z+1	; 0x01
    1646:	6c 15       	cp	r22, r12
    1648:	7d 05       	cpc	r23, r13
    164a:	39 f0       	breq	.+14     	; 0x165a <_ZN16CLaserControlApp3RunEv+0x216>
				{
					MelaninPreset(laserDiodeData.melanin);
    164c:	c7 01       	movw	r24, r14
    164e:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN16CLaserControlApp13MelaninPresetEj>
					update = true;
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	f7 01       	movw	r30, r14
    1656:	80 8b       	std	Z+16, r24	; 0x10
    1658:	40 c0       	rjmp	.+128    	; 0x16da <_ZN16CLaserControlApp3RunEv+0x296>
				}
				else
				{
					APP_PROFILE prof = (APP_PROFILE)laserDiodeData.mode;
    165a:	f7 01       	movw	r30, r14
    165c:	e0 5c       	subi	r30, 0xC0	; 192
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	80 81       	ld	r24, Z
					if (Profile != prof)	{update = true; Profile = prof;}
    1662:	f7 01       	movw	r30, r14
    1664:	95 85       	ldd	r25, Z+13	; 0x0d
    1666:	98 17       	cp	r25, r24
    1668:	19 f0       	breq	.+6      	; 0x1670 <_ZN16CLaserControlApp3RunEv+0x22c>
    166a:	91 e0       	ldi	r25, 0x01	; 1
    166c:	90 8b       	std	Z+16, r25	; 0x10
    166e:	85 87       	std	Z+13, r24	; 0x0d
				
					memcpy((void*)&laserDiodeData.laserprofile, (void*)&m_structLaserProfile[Profile], sizeof(laserDiodeData.laserprofile));
    1670:	f7 01       	movw	r30, r14
    1672:	85 85       	ldd	r24, Z+13	; 0x0d
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	bc 01       	movw	r22, r24
    1678:	66 0f       	add	r22, r22
    167a:	77 1f       	adc	r23, r23
    167c:	68 0f       	add	r22, r24
    167e:	79 1f       	adc	r23, r25
    1680:	66 0f       	add	r22, r22
    1682:	77 1f       	adc	r23, r23
    1684:	6a 5e       	subi	r22, 0xEA	; 234
    1686:	7f 4f       	sbci	r23, 0xFF	; 255
    1688:	6e 0d       	add	r22, r14
    168a:	7f 1d       	adc	r23, r15
    168c:	86 e0       	ldi	r24, 0x06	; 6
    168e:	fb 01       	movw	r30, r22
    1690:	d7 01       	movw	r26, r14
    1692:	ae 5b       	subi	r26, 0xBE	; 190
    1694:	bf 4f       	sbci	r27, 0xFF	; 255
    1696:	01 90       	ld	r0, Z+
    1698:	0d 92       	st	X+, r0
    169a:	8a 95       	dec	r24
    169c:	e1 f7       	brne	.-8      	; 0x1696 <_ZN16CLaserControlApp3RunEv+0x252>
					laserDiodeData.lasersettings = CalculateLaserSettings((DGUS_LASERPROFILE*)&m_structLaserProfile[Profile]);
    169e:	87 01       	movw	r16, r14
    16a0:	08 5b       	subi	r16, 0xB8	; 184
    16a2:	1f 4f       	sbci	r17, 0xFF	; 255
    16a4:	c7 01       	movw	r24, r14
    16a6:	0e 94 31 05 	call	0xa62	; 0xa62 <_ZN16CLaserControlApp22CalculateLaserSettingsEP24DGUS_LASERPROFILE_STRUCT>
    16aa:	f8 01       	movw	r30, r16
    16ac:	20 83       	st	Z, r18
    16ae:	31 83       	std	Z+1, r19	; 0x01
    16b0:	42 83       	std	Z+2, r20	; 0x02
    16b2:	53 83       	std	Z+3, r21	; 0x03
    16b4:	64 83       	std	Z+4, r22	; 0x04
    16b6:	75 83       	std	Z+5, r23	; 0x05
					laserPower = m_structLaserProfile[Profile].EnergyPercent;
    16b8:	f7 01       	movw	r30, r14
    16ba:	85 85       	ldd	r24, Z+13	; 0x0d
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	fc 01       	movw	r30, r24
    16c0:	ee 0f       	add	r30, r30
    16c2:	ff 1f       	adc	r31, r31
    16c4:	e8 0f       	add	r30, r24
    16c6:	f9 1f       	adc	r31, r25
    16c8:	ee 0f       	add	r30, r30
    16ca:	ff 1f       	adc	r31, r31
    16cc:	ee 0d       	add	r30, r14
    16ce:	ff 1d       	adc	r31, r15
    16d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    16d2:	93 8d       	ldd	r25, Z+27	; 0x1b
    16d4:	f7 01       	movw	r30, r14
    16d6:	82 af       	std	Z+58, r24	; 0x3a
    16d8:	93 af       	std	Z+59, r25	; 0x3b
				}
				
				update = CheckLimits(laserDiodeData.laserprofile.Frequency, laserDiodeData.laserprofile.Duration, Profile);
    16da:	f7 01       	movw	r30, r14
    16dc:	25 85       	ldd	r18, Z+13	; 0x0d
    16de:	a7 01       	movw	r20, r14
    16e0:	4c 5b       	subi	r20, 0xBC	; 188
    16e2:	5f 4f       	sbci	r21, 0xFF	; 255
    16e4:	b7 01       	movw	r22, r14
    16e6:	6e 5b       	subi	r22, 0xBE	; 190
    16e8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ea:	c7 01       	movw	r24, r14
    16ec:	0e 94 c3 07 	call	0xf86	; 0xf86 <_ZN16CLaserControlApp11CheckLimitsERjS0_16APP_PROFILE_ENUM>
    16f0:	f7 01       	movw	r30, r14
    16f2:	80 8b       	std	Z+16, r24	; 0x10
				
				laserPower = m_wMaxEnergy * laserPower / 100;
    16f4:	42 89       	ldd	r20, Z+18	; 0x12
    16f6:	53 89       	ldd	r21, Z+19	; 0x13
    16f8:	82 ad       	ldd	r24, Z+58	; 0x3a
    16fa:	93 ad       	ldd	r25, Z+59	; 0x3b
    16fc:	48 9f       	mul	r20, r24
    16fe:	90 01       	movw	r18, r0
    1700:	49 9f       	mul	r20, r25
    1702:	30 0d       	add	r19, r0
    1704:	58 9f       	mul	r21, r24
    1706:	30 0d       	add	r19, r0
    1708:	11 24       	eor	r1, r1
    170a:	36 95       	lsr	r19
    170c:	27 95       	ror	r18
    170e:	36 95       	lsr	r19
    1710:	27 95       	ror	r18
    1712:	ab e7       	ldi	r26, 0x7B	; 123
    1714:	b4 e1       	ldi	r27, 0x14	; 20
    1716:	0e 94 70 33 	call	0x66e0	; 0x66e0 <__umulhisi3>
    171a:	96 95       	lsr	r25
    171c:	87 95       	ror	r24
    171e:	82 af       	std	Z+58, r24	; 0x3a
    1720:	93 af       	std	Z+59, r25	; 0x3b
				}*/
				
				//SetVariable(STRUCT_ADDR_LASERPROFILE_DATA, (uint16_t*)&m_structLaserProfile[Profile],  sizeof(DGUS_LASERPROFILE));
				//SetVariable(STRUCT_ADDR_LASERPROSETTINGS_DATA, (uint16_t*)&laserDiodeData.lasersettings,  sizeof(DGUS_LASERSETTINGS));
			}
		break;
    1722:	3f c4       	rjmp	.+2174   	; 0x1fa2 <_ZN16CLaserControlApp3RunEv+0xb5e>
		case APP_WORKPREPARE:
			{
				DGUS_PREPARETIMER timervar;
				
				SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
    1724:	22 e0       	ldi	r18, 0x02	; 2
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	44 ef       	ldi	r20, 0xF4	; 244
    172a:	54 e2       	ldi	r21, 0x24	; 36
    172c:	6c e0       	ldi	r22, 0x0C	; 12
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	c7 01       	movw	r24, r14
    1732:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
				if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
    1736:	f7 01       	movw	r30, r14
    1738:	e0 59       	subi	r30, 0x90	; 144
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	80 81       	ld	r24, Z
    173e:	91 81       	ldd	r25, Z+1	; 0x01
    1740:	44 97       	sbiw	r24, 0x14	; 20
    1742:	28 f4       	brcc	.+10     	; 0x174e <_ZN16CLaserControlApp3RunEv+0x30a>
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	3c 97       	sbiw	r30, 0x0c	; 12
    174a:	80 83       	st	Z, r24
    174c:	91 83       	std	Z+1, r25	; 0x01
				if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    174e:	f7 01       	movw	r30, r14
    1750:	e0 59       	subi	r30, 0x90	; 144
    1752:	ff 4f       	sbci	r31, 0xFF	; 255
    1754:	80 81       	ld	r24, Z
    1756:	91 81       	ldd	r25, Z+1	; 0x01
    1758:	44 97       	sbiw	r24, 0x14	; 20
    175a:	28 f0       	brcs	.+10     	; 0x1766 <_ZN16CLaserControlApp3RunEv+0x322>
    175c:	80 81       	ld	r24, Z
    175e:	91 81       	ldd	r25, Z+1	; 0x01
    1760:	89 97       	sbiw	r24, 0x29	; 41
    1762:	08 f4       	brcc	.+2      	; 0x1766 <_ZN16CLaserControlApp3RunEv+0x322>
    1764:	44 c4       	rjmp	.+2184   	; 0x1fee <_ZN16CLaserControlApp3RunEv+0xbaa>
				if (m_wFlow > 40) laserDiodeData.coolIcon = 3;
    1766:	f7 01       	movw	r30, r14
    1768:	e0 59       	subi	r30, 0x90	; 144
    176a:	ff 4f       	sbci	r31, 0xFF	; 255
    176c:	80 81       	ld	r24, Z
    176e:	91 81       	ldd	r25, Z+1	; 0x01
    1770:	89 97       	sbiw	r24, 0x29	; 41
    1772:	28 f0       	brcs	.+10     	; 0x177e <_ZN16CLaserControlApp3RunEv+0x33a>
    1774:	83 e0       	ldi	r24, 0x03	; 3
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	3c 97       	sbiw	r30, 0x0c	; 12
    177a:	80 83       	st	Z, r24
    177c:	91 83       	std	Z+1, r25	; 0x01
				SetVariable(VARIABLE_ADDR_COOLICON, (uint16_t*)&laserDiodeData.coolIcon, 2);
    177e:	22 e0       	ldi	r18, 0x02	; 2
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	a7 01       	movw	r20, r14
    1784:	4c 59       	subi	r20, 0x9C	; 156
    1786:	5f 4f       	sbci	r21, 0xFF	; 255
    1788:	63 e1       	ldi	r22, 0x13	; 19
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	c7 01       	movw	r24, r14
    178e:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
				SetVariable(VARIABLE_ADDR_FLOW, (uint16_t*)&m_wFlow, 2);
    1792:	22 e0       	ldi	r18, 0x02	; 2
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	a7 01       	movw	r20, r14
    1798:	40 59       	subi	r20, 0x90	; 144
    179a:	5f 4f       	sbci	r21, 0xFF	; 255
    179c:	6e e0       	ldi	r22, 0x0E	; 14
    179e:	70 e0       	ldi	r23, 0x00	; 0
    17a0:	c7 01       	movw	r24, r14
    17a2:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
				
				if (prepare)
    17a6:	f7 01       	movw	r30, r14
    17a8:	81 89       	ldd	r24, Z+17	; 0x11
    17aa:	88 23       	and	r24, r24
    17ac:	b1 f0       	breq	.+44     	; 0x17da <_ZN16CLaserControlApp3RunEv+0x396>
				{
					timervar.timer_minutes = m_wMinutes;
    17ae:	ea 59       	subi	r30, 0x9A	; 154
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	80 81       	ld	r24, Z
    17b4:	91 81       	ldd	r25, Z+1	; 0x01
    17b6:	89 83       	std	Y+1, r24	; 0x01
    17b8:	9a 83       	std	Y+2, r25	; 0x02
					timervar.timer_seconds = m_wSeconds;
    17ba:	32 96       	adiw	r30, 0x02	; 2
    17bc:	80 81       	ld	r24, Z
    17be:	91 81       	ldd	r25, Z+1	; 0x01
    17c0:	8b 83       	std	Y+3, r24	; 0x03
    17c2:	9c 83       	std	Y+4, r25	; 0x04
					SetVariable(STRUCT_ADDR_PREPARETIMER_DATA, (uint16_t*)&timervar, sizeof(timervar));
    17c4:	24 e0       	ldi	r18, 0x04	; 4
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	ae 01       	movw	r20, r28
    17ca:	4f 5f       	subi	r20, 0xFF	; 255
    17cc:	5f 4f       	sbci	r21, 0xFF	; 255
    17ce:	6f e0       	ldi	r22, 0x0F	; 15
    17d0:	70 e0       	ldi	r23, 0x00	; 0
    17d2:	c7 01       	movw	r24, r14
    17d4:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
    17d8:	e4 c3       	rjmp	.+1992   	; 0x1fa2 <_ZN16CLaserControlApp3RunEv+0xb5e>
				}
				else
				{
					SetVariable(STRUCT_ADDR_LASERPROFILE_DATA, (uint16_t*)&m_structLaserProfile[Profile], sizeof(DGUS_LASERPROFILE));
    17da:	f7 01       	movw	r30, r14
    17dc:	85 85       	ldd	r24, Z+13	; 0x0d
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	ac 01       	movw	r20, r24
    17e2:	44 0f       	add	r20, r20
    17e4:	55 1f       	adc	r21, r21
    17e6:	48 0f       	add	r20, r24
    17e8:	59 1f       	adc	r21, r25
    17ea:	44 0f       	add	r20, r20
    17ec:	55 1f       	adc	r21, r21
    17ee:	4a 5e       	subi	r20, 0xEA	; 234
    17f0:	5f 4f       	sbci	r21, 0xFF	; 255
    17f2:	4e 0d       	add	r20, r14
    17f4:	5f 1d       	adc	r21, r15
    17f6:	26 e0       	ldi	r18, 0x06	; 6
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	62 e0       	ldi	r22, 0x02	; 2
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	c7 01       	movw	r24, r14
    1800:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
					SetPictureId(PICID_WORK_READY);	
    1804:	6c e0       	ldi	r22, 0x0C	; 12
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	c7 01       	movw	r24, r14
    180a:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN16CLaserControlApp12SetPictureIdEj>
				}
			}
		break;
    180e:	c9 c3       	rjmp	.+1938   	; 0x1fa2 <_ZN16CLaserControlApp3RunEv+0xb5e>
		case APP_WORKTEMPERWAIT:
			{
				DGUS_PREPARETIMER timervar;
				timervar.timer_minutes = temperature / 10;
    1810:	80 91 f4 24 	lds	r24, 0x24F4
    1814:	90 91 f5 24 	lds	r25, 0x24F5
    1818:	6a e0       	ldi	r22, 0x0A	; 10
    181a:	70 e0       	ldi	r23, 0x00	; 0
    181c:	0e 94 13 33 	call	0x6626	; 0x6626 <__divmodhi4>
    1820:	69 83       	std	Y+1, r22	; 0x01
    1822:	7a 83       	std	Y+2, r23	; 0x02
				timervar.timer_seconds = temperature % 10;
    1824:	8b 83       	std	Y+3, r24	; 0x03
    1826:	9c 83       	std	Y+4, r25	; 0x04
				
				SetVariable(STRUCT_ADDR_PREPARETIMER_DATA, (uint16_t*)&timervar, sizeof(timervar));
    1828:	24 e0       	ldi	r18, 0x04	; 4
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	ae 01       	movw	r20, r28
    182e:	4f 5f       	subi	r20, 0xFF	; 255
    1830:	5f 4f       	sbci	r21, 0xFF	; 255
    1832:	6f e0       	ldi	r22, 0x0F	; 15
    1834:	70 e0       	ldi	r23, 0x00	; 0
    1836:	c7 01       	movw	r24, r14
    1838:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
				SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
    183c:	22 e0       	ldi	r18, 0x02	; 2
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	44 ef       	ldi	r20, 0xF4	; 244
    1842:	54 e2       	ldi	r21, 0x24	; 36
    1844:	6c e0       	ldi	r22, 0x0C	; 12
    1846:	70 e0       	ldi	r23, 0x00	; 0
    1848:	c7 01       	movw	r24, r14
    184a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
				if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
    184e:	f7 01       	movw	r30, r14
    1850:	e0 59       	subi	r30, 0x90	; 144
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	80 81       	ld	r24, Z
    1856:	91 81       	ldd	r25, Z+1	; 0x01
    1858:	44 97       	sbiw	r24, 0x14	; 20
    185a:	28 f4       	brcc	.+10     	; 0x1866 <_ZN16CLaserControlApp3RunEv+0x422>
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	3c 97       	sbiw	r30, 0x0c	; 12
    1862:	80 83       	st	Z, r24
    1864:	91 83       	std	Z+1, r25	; 0x01
				if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    1866:	f7 01       	movw	r30, r14
    1868:	e0 59       	subi	r30, 0x90	; 144
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	80 81       	ld	r24, Z
    186e:	91 81       	ldd	r25, Z+1	; 0x01
    1870:	44 97       	sbiw	r24, 0x14	; 20
    1872:	28 f0       	brcs	.+10     	; 0x187e <_ZN16CLaserControlApp3RunEv+0x43a>
    1874:	80 81       	ld	r24, Z
    1876:	91 81       	ldd	r25, Z+1	; 0x01
    1878:	89 97       	sbiw	r24, 0x29	; 41
    187a:	08 f4       	brcc	.+2      	; 0x187e <_ZN16CLaserControlApp3RunEv+0x43a>
    187c:	c0 c3       	rjmp	.+1920   	; 0x1ffe <_ZN16CLaserControlApp3RunEv+0xbba>
				if (m_wFlow > 40) laserDiodeData.coolIcon = 3;
    187e:	f7 01       	movw	r30, r14
    1880:	e0 59       	subi	r30, 0x90	; 144
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	80 81       	ld	r24, Z
    1886:	91 81       	ldd	r25, Z+1	; 0x01
    1888:	89 97       	sbiw	r24, 0x29	; 41
    188a:	28 f0       	brcs	.+10     	; 0x1896 <_ZN16CLaserControlApp3RunEv+0x452>
    188c:	83 e0       	ldi	r24, 0x03	; 3
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	3c 97       	sbiw	r30, 0x0c	; 12
    1892:	80 83       	st	Z, r24
    1894:	91 83       	std	Z+1, r25	; 0x01
				SetVariable(VARIABLE_ADDR_COOLICON, (uint16_t*)&laserDiodeData.coolIcon, 2);
    1896:	22 e0       	ldi	r18, 0x02	; 2
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	a7 01       	movw	r20, r14
    189c:	4c 59       	subi	r20, 0x9C	; 156
    189e:	5f 4f       	sbci	r21, 0xFF	; 255
    18a0:	63 e1       	ldi	r22, 0x13	; 19
    18a2:	70 e0       	ldi	r23, 0x00	; 0
    18a4:	c7 01       	movw	r24, r14
    18a6:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
				SetVariable(VARIABLE_ADDR_FLOW, (uint16_t*)&m_wFlow, 2);
    18aa:	22 e0       	ldi	r18, 0x02	; 2
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	a7 01       	movw	r20, r14
    18b0:	40 59       	subi	r20, 0x90	; 144
    18b2:	5f 4f       	sbci	r21, 0xFF	; 255
    18b4:	6e e0       	ldi	r22, 0x0E	; 14
    18b6:	70 e0       	ldi	r23, 0x00	; 0
    18b8:	c7 01       	movw	r24, r14
    18ba:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
				
				m_wMinutes = m_wSetMin;
    18be:	f7 01       	movw	r30, r14
    18c0:	e4 59       	subi	r30, 0x94	; 148
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	80 81       	ld	r24, Z
    18c6:	91 81       	ldd	r25, Z+1	; 0x01
    18c8:	36 97       	sbiw	r30, 0x06	; 6
    18ca:	80 83       	st	Z, r24
    18cc:	91 83       	std	Z+1, r25	; 0x01
				m_wSeconds = m_wSetSec;
    18ce:	38 96       	adiw	r30, 0x08	; 8
    18d0:	80 81       	ld	r24, Z
    18d2:	91 81       	ldd	r25, Z+1	; 0x01
    18d4:	36 97       	sbiw	r30, 0x06	; 6
    18d6:	80 83       	st	Z, r24
    18d8:	91 83       	std	Z+1, r25	; 0x01
				prepare = true;
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	f7 01       	movw	r30, r14
    18de:	81 8b       	std	Z+17, r24	; 0x11
				
				if (temperature < 290)
    18e0:	80 91 f4 24 	lds	r24, 0x24F4
    18e4:	90 91 f5 24 	lds	r25, 0x24F5
    18e8:	82 32       	cpi	r24, 0x22	; 34
    18ea:	91 40       	sbci	r25, 0x01	; 1
    18ec:	0c f0       	brlt	.+2      	; 0x18f0 <_ZN16CLaserControlApp3RunEv+0x4ac>
    18ee:	59 c3       	rjmp	.+1714   	; 0x1fa2 <_ZN16CLaserControlApp3RunEv+0xb5e>
					SetPictureId(PICID_WORK_PREPARE);
    18f0:	67 e0       	ldi	r22, 0x07	; 7
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	c7 01       	movw	r24, r14
    18f6:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    18fa:	53 c3       	rjmp	.+1702   	; 0x1fa2 <_ZN16CLaserControlApp3RunEv+0xb5e>
		case APP_WORKREADY:
			{
				SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
    18fc:	22 e0       	ldi	r18, 0x02	; 2
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	44 ef       	ldi	r20, 0xF4	; 244
    1902:	54 e2       	ldi	r21, 0x24	; 36
    1904:	6c e0       	ldi	r22, 0x0C	; 12
    1906:	70 e0       	ldi	r23, 0x00	; 0
    1908:	c7 01       	movw	r24, r14
    190a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
				if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
    190e:	f7 01       	movw	r30, r14
    1910:	e0 59       	subi	r30, 0x90	; 144
    1912:	ff 4f       	sbci	r31, 0xFF	; 255
    1914:	80 81       	ld	r24, Z
    1916:	91 81       	ldd	r25, Z+1	; 0x01
    1918:	44 97       	sbiw	r24, 0x14	; 20
    191a:	28 f4       	brcc	.+10     	; 0x1926 <_ZN16CLaserControlApp3RunEv+0x4e2>
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	3c 97       	sbiw	r30, 0x0c	; 12
    1922:	80 83       	st	Z, r24
    1924:	91 83       	std	Z+1, r25	; 0x01
				if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    1926:	f7 01       	movw	r30, r14
    1928:	e0 59       	subi	r30, 0x90	; 144
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	80 81       	ld	r24, Z
    192e:	91 81       	ldd	r25, Z+1	; 0x01
    1930:	44 97       	sbiw	r24, 0x14	; 20
    1932:	28 f0       	brcs	.+10     	; 0x193e <_ZN16CLaserControlApp3RunEv+0x4fa>
    1934:	80 81       	ld	r24, Z
    1936:	91 81       	ldd	r25, Z+1	; 0x01
    1938:	89 97       	sbiw	r24, 0x29	; 41
    193a:	08 f4       	brcc	.+2      	; 0x193e <_ZN16CLaserControlApp3RunEv+0x4fa>
    193c:	68 c3       	rjmp	.+1744   	; 0x200e <_ZN16CLaserControlApp3RunEv+0xbca>
				if (m_wFlow > 40) laserDiodeData.coolIcon = 3;
    193e:	f7 01       	movw	r30, r14
    1940:	e0 59       	subi	r30, 0x90	; 144
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	80 81       	ld	r24, Z
    1946:	91 81       	ldd	r25, Z+1	; 0x01
    1948:	89 97       	sbiw	r24, 0x29	; 41
    194a:	28 f0       	brcs	.+10     	; 0x1956 <_ZN16CLaserControlApp3RunEv+0x512>
    194c:	83 e0       	ldi	r24, 0x03	; 3
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	3c 97       	sbiw	r30, 0x0c	; 12
    1952:	80 83       	st	Z, r24
    1954:	91 83       	std	Z+1, r25	; 0x01
				SetVariable(VARIABLE_ADDR_COOLICON, (uint16_t*)&laserDiodeData.coolIcon, 2);
    1956:	22 e0       	ldi	r18, 0x02	; 2
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	a7 01       	movw	r20, r14
    195c:	4c 59       	subi	r20, 0x9C	; 156
    195e:	5f 4f       	sbci	r21, 0xFF	; 255
    1960:	63 e1       	ldi	r22, 0x13	; 19
    1962:	70 e0       	ldi	r23, 0x00	; 0
    1964:	c7 01       	movw	r24, r14
    1966:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
				SetVariable(VARIABLE_ADDR_FLOW, (uint16_t*)&m_wFlow, 2);
    196a:	22 e0       	ldi	r18, 0x02	; 2
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	a7 01       	movw	r20, r14
    1970:	40 59       	subi	r20, 0x90	; 144
    1972:	5f 4f       	sbci	r21, 0xFF	; 255
    1974:	6e e0       	ldi	r22, 0x0E	; 14
    1976:	70 e0       	ldi	r23, 0x00	; 0
    1978:	c7 01       	movw	r24, r14
    197a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
				
				if (temperature > 300)
    197e:	80 91 f4 24 	lds	r24, 0x24F4
    1982:	90 91 f5 24 	lds	r25, 0x24F5
    1986:	8d 32       	cpi	r24, 0x2D	; 45
    1988:	91 40       	sbci	r25, 0x01	; 1
    198a:	0c f4       	brge	.+2      	; 0x198e <_ZN16CLaserControlApp3RunEv+0x54a>
    198c:	0a c3       	rjmp	.+1556   	; 0x1fa2 <_ZN16CLaserControlApp3RunEv+0xb5e>
				{
					SetPictureId(PICID_WORK_ERRORHEATING);
    198e:	69 e2       	ldi	r22, 0x29	; 41
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	c7 01       	movw	r24, r14
    1994:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN16CLaserControlApp12SetPictureIdEj>
					PIC_ID_last = PIC_ID;
    1998:	f7 01       	movw	r30, r14
    199a:	86 85       	ldd	r24, Z+14	; 0x0e
    199c:	87 87       	std	Z+15, r24	; 0x0f
    199e:	01 c3       	rjmp	.+1538   	; 0x1fa2 <_ZN16CLaserControlApp3RunEv+0xb5e>
			}
		break;
		case APP_WORKLIGHT:
		case APP_WORKPOWERON:
			{
				SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
    19a0:	22 e0       	ldi	r18, 0x02	; 2
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	44 ef       	ldi	r20, 0xF4	; 244
    19a6:	54 e2       	ldi	r21, 0x24	; 36
    19a8:	6c e0       	ldi	r22, 0x0C	; 12
    19aa:	70 e0       	ldi	r23, 0x00	; 0
    19ac:	c7 01       	movw	r24, r14
    19ae:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
				if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
    19b2:	f7 01       	movw	r30, r14
    19b4:	e0 59       	subi	r30, 0x90	; 144
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	80 81       	ld	r24, Z
    19ba:	91 81       	ldd	r25, Z+1	; 0x01
    19bc:	44 97       	sbiw	r24, 0x14	; 20
    19be:	28 f4       	brcc	.+10     	; 0x19ca <_ZN16CLaserControlApp3RunEv+0x586>
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	3c 97       	sbiw	r30, 0x0c	; 12
    19c6:	80 83       	st	Z, r24
    19c8:	91 83       	std	Z+1, r25	; 0x01
				if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    19ca:	f7 01       	movw	r30, r14
    19cc:	e0 59       	subi	r30, 0x90	; 144
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	80 81       	ld	r24, Z
    19d2:	91 81       	ldd	r25, Z+1	; 0x01
    19d4:	44 97       	sbiw	r24, 0x14	; 20
    19d6:	28 f0       	brcs	.+10     	; 0x19e2 <_ZN16CLaserControlApp3RunEv+0x59e>
    19d8:	80 81       	ld	r24, Z
    19da:	91 81       	ldd	r25, Z+1	; 0x01
    19dc:	89 97       	sbiw	r24, 0x29	; 41
    19de:	08 f4       	brcc	.+2      	; 0x19e2 <_ZN16CLaserControlApp3RunEv+0x59e>
    19e0:	1e c3       	rjmp	.+1596   	; 0x201e <_ZN16CLaserControlApp3RunEv+0xbda>
				if (m_wFlow > 40) laserDiodeData.coolIcon = 3;
    19e2:	f7 01       	movw	r30, r14
    19e4:	e0 59       	subi	r30, 0x90	; 144
    19e6:	ff 4f       	sbci	r31, 0xFF	; 255
    19e8:	80 81       	ld	r24, Z
    19ea:	91 81       	ldd	r25, Z+1	; 0x01
    19ec:	89 97       	sbiw	r24, 0x29	; 41
    19ee:	28 f0       	brcs	.+10     	; 0x19fa <_ZN16CLaserControlApp3RunEv+0x5b6>
    19f0:	83 e0       	ldi	r24, 0x03	; 3
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	3c 97       	sbiw	r30, 0x0c	; 12
    19f6:	80 83       	st	Z, r24
    19f8:	91 83       	std	Z+1, r25	; 0x01
				SetVariable(VARIABLE_ADDR_COOLICON, (uint16_t*)&laserDiodeData.coolIcon, 2);
    19fa:	22 e0       	ldi	r18, 0x02	; 2
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	a7 01       	movw	r20, r14
    1a00:	4c 59       	subi	r20, 0x9C	; 156
    1a02:	5f 4f       	sbci	r21, 0xFF	; 255
    1a04:	63 e1       	ldi	r22, 0x13	; 19
    1a06:	70 e0       	ldi	r23, 0x00	; 0
    1a08:	c7 01       	movw	r24, r14
    1a0a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
				SetVariable(VARIABLE_ADDR_FLOW, (uint16_t*)&m_wFlow, 2);
    1a0e:	22 e0       	ldi	r18, 0x02	; 2
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	a7 01       	movw	r20, r14
    1a14:	40 59       	subi	r20, 0x90	; 144
    1a16:	5f 4f       	sbci	r21, 0xFF	; 255
    1a18:	6e e0       	ldi	r22, 0x0E	; 14
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	c7 01       	movw	r24, r14
    1a1e:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
				
				uint16_t data = ((uint16_t)((laserPower * 640) / 63)) << 2;  // (laserPower * 1024) / 1000)
    1a22:	f7 01       	movw	r30, r14
    1a24:	82 ad       	ldd	r24, Z+58	; 0x3a
    1a26:	93 ad       	ldd	r25, Z+59	; 0x3b
    1a28:	ac 01       	movw	r20, r24
    1a2a:	56 95       	lsr	r21
    1a2c:	54 2f       	mov	r21, r20
    1a2e:	44 27       	eor	r20, r20
    1a30:	57 95       	ror	r21
    1a32:	47 95       	ror	r20
    1a34:	98 2f       	mov	r25, r24
    1a36:	88 27       	eor	r24, r24
    1a38:	99 0f       	add	r25, r25
    1a3a:	48 0f       	add	r20, r24
    1a3c:	59 1f       	adc	r21, r25
    1a3e:	9a 01       	movw	r18, r20
    1a40:	a1 e1       	ldi	r26, 0x11	; 17
    1a42:	b4 e0       	ldi	r27, 0x04	; 4
    1a44:	0e 94 70 33 	call	0x66e0	; 0x66e0 <__umulhisi3>
    1a48:	48 1b       	sub	r20, r24
    1a4a:	59 0b       	sbc	r21, r25
    1a4c:	56 95       	lsr	r21
    1a4e:	47 95       	ror	r20
    1a50:	84 0f       	add	r24, r20
    1a52:	95 1f       	adc	r25, r21
    1a54:	96 95       	lsr	r25
    1a56:	87 95       	ror	r24
    1a58:	92 95       	swap	r25
    1a5a:	82 95       	swap	r24
    1a5c:	8f 70       	andi	r24, 0x0F	; 15
    1a5e:	89 27       	eor	r24, r25
    1a60:	9f 70       	andi	r25, 0x0F	; 15
    1a62:	89 27       	eor	r24, r25
    1a64:	88 0f       	add	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	8d 83       	std	Y+5, r24	; 0x05
    1a6e:	9e 83       	std	Y+6, r25	; 0x06
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    1a70:	42 e0       	ldi	r20, 0x02	; 2
    1a72:	50 e0       	ldi	r21, 0x00	; 0
    1a74:	be 01       	movw	r22, r28
    1a76:	6b 5f       	subi	r22, 0xFB	; 251
    1a78:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7a:	88 ea       	ldi	r24, 0xA8	; 168
    1a7c:	95 e2       	ldi	r25, 0x25	; 37
    1a7e:	0e 94 24 12 	call	0x2448	; 0x2448 <_ZN4CSPI4SendEPhj>
							
				if (!laserBoard.Footswitch())
    1a82:	8e e6       	ldi	r24, 0x6E	; 110
    1a84:	95 e2       	ldi	r25, 0x25	; 37
    1a86:	0e 94 4b 2d 	call	0x5a96	; 0x5a96 <_ZN11CLaserBoard10FootswitchEv>
    1a8a:	81 11       	cpse	r24, r1
    1a8c:	0d c0       	rjmp	.+26     	; 0x1aa8 <_ZN16CLaserControlApp3RunEv+0x664>
				{
					if (state != APP_WORKLIGHT)
    1a8e:	f7 01       	movw	r30, r14
    1a90:	84 85       	ldd	r24, Z+12	; 0x0c
    1a92:	86 30       	cpi	r24, 0x06	; 6
    1a94:	a9 f0       	breq	.+42     	; 0x1ac0 <_ZN16CLaserControlApp3RunEv+0x67c>
					{
						SetPictureId(PICID_WORK_STARTED);
    1a96:	60 e1       	ldi	r22, 0x10	; 16
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	c7 01       	movw	r24, r14
    1a9c:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN16CLaserControlApp12SetPictureIdEj>
						state = APP_WORKLIGHT;
    1aa0:	86 e0       	ldi	r24, 0x06	; 6
    1aa2:	f7 01       	movw	r30, r14
    1aa4:	84 87       	std	Z+12, r24	; 0x0c
    1aa6:	0c c0       	rjmp	.+24     	; 0x1ac0 <_ZN16CLaserControlApp3RunEv+0x67c>
					}
				}
				else
				{
					if (state != APP_WORKPOWERON)
    1aa8:	f7 01       	movw	r30, r14
    1aaa:	84 85       	ldd	r24, Z+12	; 0x0c
    1aac:	85 30       	cpi	r24, 0x05	; 5
    1aae:	41 f0       	breq	.+16     	; 0x1ac0 <_ZN16CLaserControlApp3RunEv+0x67c>
					{
						SetPictureId(PICID_WORK_POWERON);
    1ab0:	6e e0       	ldi	r22, 0x0E	; 14
    1ab2:	70 e0       	ldi	r23, 0x00	; 0
    1ab4:	c7 01       	movw	r24, r14
    1ab6:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN16CLaserControlApp12SetPictureIdEj>
						state = APP_WORKPOWERON;
    1aba:	85 e0       	ldi	r24, 0x05	; 5
    1abc:	f7 01       	movw	r30, r14
    1abe:	84 87       	std	Z+12, r24	; 0x0c
					}
				}
			
				uint32_t cnt = swap32(laserCounter);
    1ac0:	f7 01       	movw	r30, r14
    1ac2:	64 ad       	ldd	r22, Z+60	; 0x3c
    1ac4:	75 ad       	ldd	r23, Z+61	; 0x3d
    1ac6:	86 ad       	ldd	r24, Z+62	; 0x3e
    1ac8:	97 ad       	ldd	r25, Z+63	; 0x3f
    1aca:	0e 94 dd 11 	call	0x23ba	; 0x23ba <_Z6swap32m>
    1ace:	69 83       	std	Y+1, r22	; 0x01
    1ad0:	7a 83       	std	Y+2, r23	; 0x02
    1ad2:	8b 83       	std	Y+3, r24	; 0x03
    1ad4:	9c 83       	std	Y+4, r25	; 0x04
				SetVariable(VARIABLE_ADDR_LASERCNT, (uint16_t*)&cnt,  4);
    1ad6:	24 e0       	ldi	r18, 0x04	; 4
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	ae 01       	movw	r20, r28
    1adc:	4f 5f       	subi	r20, 0xFF	; 255
    1ade:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae0:	68 e0       	ldi	r22, 0x08	; 8
    1ae2:	70 e0       	ldi	r23, 0x00	; 0
    1ae4:	c7 01       	movw	r24, r14
    1ae6:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
				
				if (temperature > 300)
    1aea:	80 91 f4 24 	lds	r24, 0x24F4
    1aee:	90 91 f5 24 	lds	r25, 0x24F5
    1af2:	8d 32       	cpi	r24, 0x2D	; 45
    1af4:	91 40       	sbci	r25, 0x01	; 1
    1af6:	44 f0       	brlt	.+16     	; 0x1b08 <_ZN16CLaserControlApp3RunEv+0x6c4>
				{
					SetPictureId(PICID_WORK_ERRORHEATING);
    1af8:	69 e2       	ldi	r22, 0x29	; 41
    1afa:	70 e0       	ldi	r23, 0x00	; 0
    1afc:	c7 01       	movw	r24, r14
    1afe:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN16CLaserControlApp12SetPictureIdEj>
					PIC_ID_last = PIC_ID;
    1b02:	f7 01       	movw	r30, r14
    1b04:	86 85       	ldd	r24, Z+14	; 0x0e
    1b06:	87 87       	std	Z+15, r24	; 0x0f
				}
#ifdef FLOW_CONTROL
				if (m_wFlow < 30)
    1b08:	f7 01       	movw	r30, r14
    1b0a:	e0 59       	subi	r30, 0x90	; 144
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	80 81       	ld	r24, Z
    1b10:	91 81       	ldd	r25, Z+1	; 0x01
    1b12:	4e 97       	sbiw	r24, 0x1e	; 30
    1b14:	08 f0       	brcs	.+2      	; 0x1b18 <_ZN16CLaserControlApp3RunEv+0x6d4>
    1b16:	45 c2       	rjmp	.+1162   	; 0x1fa2 <_ZN16CLaserControlApp3RunEv+0xb5e>
				{
					SetPictureId(PICID_WORK_ERRORFLOW);
    1b18:	68 e2       	ldi	r22, 0x28	; 40
    1b1a:	70 e0       	ldi	r23, 0x00	; 0
    1b1c:	c7 01       	movw	r24, r14
    1b1e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN16CLaserControlApp12SetPictureIdEj>
					PIC_ID_last = PIC_ID;
    1b22:	f7 01       	movw	r30, r14
    1b24:	86 85       	ldd	r24, Z+14	; 0x0e
    1b26:	87 87       	std	Z+15, r24	; 0x0f
				}
#endif
			}
		break;
    1b28:	3c c2       	rjmp	.+1144   	; 0x1fa2 <_ZN16CLaserControlApp3RunEv+0xb5e>
		case APP_FLOWERR:
			SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
    1b2a:	22 e0       	ldi	r18, 0x02	; 2
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	44 ef       	ldi	r20, 0xF4	; 244
    1b30:	54 e2       	ldi	r21, 0x24	; 36
    1b32:	6c e0       	ldi	r22, 0x0C	; 12
    1b34:	70 e0       	ldi	r23, 0x00	; 0
    1b36:	c7 01       	movw	r24, r14
    1b38:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
			if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
    1b3c:	f7 01       	movw	r30, r14
    1b3e:	e0 59       	subi	r30, 0x90	; 144
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	80 81       	ld	r24, Z
    1b44:	91 81       	ldd	r25, Z+1	; 0x01
    1b46:	44 97       	sbiw	r24, 0x14	; 20
    1b48:	28 f4       	brcc	.+10     	; 0x1b54 <_ZN16CLaserControlApp3RunEv+0x710>
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	3c 97       	sbiw	r30, 0x0c	; 12
    1b50:	80 83       	st	Z, r24
    1b52:	91 83       	std	Z+1, r25	; 0x01
			if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    1b54:	f7 01       	movw	r30, r14
    1b56:	e0 59       	subi	r30, 0x90	; 144
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	80 81       	ld	r24, Z
    1b5c:	91 81       	ldd	r25, Z+1	; 0x01
    1b5e:	44 97       	sbiw	r24, 0x14	; 20
    1b60:	28 f0       	brcs	.+10     	; 0x1b6c <_ZN16CLaserControlApp3RunEv+0x728>
    1b62:	80 81       	ld	r24, Z
    1b64:	91 81       	ldd	r25, Z+1	; 0x01
    1b66:	89 97       	sbiw	r24, 0x29	; 41
    1b68:	08 f4       	brcc	.+2      	; 0x1b6c <_ZN16CLaserControlApp3RunEv+0x728>
    1b6a:	61 c2       	rjmp	.+1218   	; 0x202e <_ZN16CLaserControlApp3RunEv+0xbea>
			if (m_wFlow > 40) laserDiodeData.coolIcon = 3;
    1b6c:	f7 01       	movw	r30, r14
    1b6e:	e0 59       	subi	r30, 0x90	; 144
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	80 81       	ld	r24, Z
    1b74:	91 81       	ldd	r25, Z+1	; 0x01
    1b76:	89 97       	sbiw	r24, 0x29	; 41
    1b78:	28 f0       	brcs	.+10     	; 0x1b84 <_ZN16CLaserControlApp3RunEv+0x740>
    1b7a:	83 e0       	ldi	r24, 0x03	; 3
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	3c 97       	sbiw	r30, 0x0c	; 12
    1b80:	80 83       	st	Z, r24
    1b82:	91 83       	std	Z+1, r25	; 0x01
			SetVariable(VARIABLE_ADDR_COOLICON, (uint16_t*)&laserDiodeData.coolIcon, 2);
    1b84:	22 e0       	ldi	r18, 0x02	; 2
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	a7 01       	movw	r20, r14
    1b8a:	4c 59       	subi	r20, 0x9C	; 156
    1b8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b8e:	63 e1       	ldi	r22, 0x13	; 19
    1b90:	70 e0       	ldi	r23, 0x00	; 0
    1b92:	c7 01       	movw	r24, r14
    1b94:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
			SetVariable(VARIABLE_ADDR_FLOW, (uint16_t*)&m_wFlow, 2);
    1b98:	22 e0       	ldi	r18, 0x02	; 2
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	87 01       	movw	r16, r14
    1b9e:	00 59       	subi	r16, 0x90	; 144
    1ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba2:	a8 01       	movw	r20, r16
    1ba4:	6e e0       	ldi	r22, 0x0E	; 14
    1ba6:	70 e0       	ldi	r23, 0x00	; 0
    1ba8:	c7 01       	movw	r24, r14
    1baa:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
			
			laserBoard.LaserPowerOff();
    1bae:	8e e6       	ldi	r24, 0x6E	; 110
    1bb0:	95 e2       	ldi	r25, 0x25	; 37
    1bb2:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <_ZN11CLaserBoard13LaserPowerOffEv>
			
			if (m_wFlow > 60)
    1bb6:	f8 01       	movw	r30, r16
    1bb8:	80 81       	ld	r24, Z
    1bba:	91 81       	ldd	r25, Z+1	; 0x01
    1bbc:	cd 97       	sbiw	r24, 0x3d	; 61
    1bbe:	08 f4       	brcc	.+2      	; 0x1bc2 <_ZN16CLaserControlApp3RunEv+0x77e>
    1bc0:	f0 c1       	rjmp	.+992    	; 0x1fa2 <_ZN16CLaserControlApp3RunEv+0xb5e>
				SetPictureId(PICID_WORKOnReady);
    1bc2:	69 e1       	ldi	r22, 0x19	; 25
    1bc4:	70 e0       	ldi	r23, 0x00	; 0
    1bc6:	c7 01       	movw	r24, r14
    1bc8:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN16CLaserControlApp12SetPictureIdEj>
    1bcc:	ea c1       	rjmp	.+980    	; 0x1fa2 <_ZN16CLaserControlApp3RunEv+0xb5e>
		break;
		case APP_TEMPERERR:
			SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
    1bce:	22 e0       	ldi	r18, 0x02	; 2
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	44 ef       	ldi	r20, 0xF4	; 244
    1bd4:	54 e2       	ldi	r21, 0x24	; 36
    1bd6:	6c e0       	ldi	r22, 0x0C	; 12
    1bd8:	70 e0       	ldi	r23, 0x00	; 0
    1bda:	c7 01       	movw	r24, r14
    1bdc:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
			if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
    1be0:	f7 01       	movw	r30, r14
    1be2:	e0 59       	subi	r30, 0x90	; 144
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	80 81       	ld	r24, Z
    1be8:	91 81       	ldd	r25, Z+1	; 0x01
    1bea:	44 97       	sbiw	r24, 0x14	; 20
    1bec:	28 f4       	brcc	.+10     	; 0x1bf8 <_ZN16CLaserControlApp3RunEv+0x7b4>
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	3c 97       	sbiw	r30, 0x0c	; 12
    1bf4:	80 83       	st	Z, r24
    1bf6:	91 83       	std	Z+1, r25	; 0x01
			if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    1bf8:	f7 01       	movw	r30, r14
    1bfa:	e0 59       	subi	r30, 0x90	; 144
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	80 81       	ld	r24, Z
    1c00:	91 81       	ldd	r25, Z+1	; 0x01
    1c02:	44 97       	sbiw	r24, 0x14	; 20
    1c04:	28 f0       	brcs	.+10     	; 0x1c10 <_ZN16CLaserControlApp3RunEv+0x7cc>
    1c06:	80 81       	ld	r24, Z
    1c08:	91 81       	ldd	r25, Z+1	; 0x01
    1c0a:	89 97       	sbiw	r24, 0x29	; 41
    1c0c:	08 f4       	brcc	.+2      	; 0x1c10 <_ZN16CLaserControlApp3RunEv+0x7cc>
    1c0e:	17 c2       	rjmp	.+1070   	; 0x203e <_ZN16CLaserControlApp3RunEv+0xbfa>
			if (m_wFlow > 40) laserDiodeData.coolIcon = 3;
    1c10:	f7 01       	movw	r30, r14
    1c12:	e0 59       	subi	r30, 0x90	; 144
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	80 81       	ld	r24, Z
    1c18:	91 81       	ldd	r25, Z+1	; 0x01
    1c1a:	89 97       	sbiw	r24, 0x29	; 41
    1c1c:	28 f0       	brcs	.+10     	; 0x1c28 <_ZN16CLaserControlApp3RunEv+0x7e4>
    1c1e:	83 e0       	ldi	r24, 0x03	; 3
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	3c 97       	sbiw	r30, 0x0c	; 12
    1c24:	80 83       	st	Z, r24
    1c26:	91 83       	std	Z+1, r25	; 0x01
			SetVariable(VARIABLE_ADDR_COOLICON, (uint16_t*)&laserDiodeData.coolIcon, 2);
    1c28:	22 e0       	ldi	r18, 0x02	; 2
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	a7 01       	movw	r20, r14
    1c2e:	4c 59       	subi	r20, 0x9C	; 156
    1c30:	5f 4f       	sbci	r21, 0xFF	; 255
    1c32:	63 e1       	ldi	r22, 0x13	; 19
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	c7 01       	movw	r24, r14
    1c38:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
			SetVariable(VARIABLE_ADDR_FLOW, (uint16_t*)&m_wFlow, 2);
    1c3c:	22 e0       	ldi	r18, 0x02	; 2
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	a7 01       	movw	r20, r14
    1c42:	40 59       	subi	r20, 0x90	; 144
    1c44:	5f 4f       	sbci	r21, 0xFF	; 255
    1c46:	6e e0       	ldi	r22, 0x0E	; 14
    1c48:	70 e0       	ldi	r23, 0x00	; 0
    1c4a:	c7 01       	movw	r24, r14
    1c4c:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
			
			laserBoard.LaserPowerOff();
    1c50:	8e e6       	ldi	r24, 0x6E	; 110
    1c52:	95 e2       	ldi	r25, 0x25	; 37
    1c54:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <_ZN11CLaserBoard13LaserPowerOffEv>
			
			prepare = false;
    1c58:	f7 01       	movw	r30, r14
    1c5a:	11 8a       	std	Z+17, r1	; 0x11
			if (temperature < 290)
    1c5c:	80 91 f4 24 	lds	r24, 0x24F4
    1c60:	90 91 f5 24 	lds	r25, 0x24F5
    1c64:	82 32       	cpi	r24, 0x22	; 34
    1c66:	91 40       	sbci	r25, 0x01	; 1
    1c68:	0c f0       	brlt	.+2      	; 0x1c6c <_ZN16CLaserControlApp3RunEv+0x828>
    1c6a:	9b c1       	rjmp	.+822    	; 0x1fa2 <_ZN16CLaserControlApp3RunEv+0xb5e>
			{
				prepare = true;
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	f7 01       	movw	r30, r14
    1c70:	81 8b       	std	Z+17, r24	; 0x11
				SetPictureId(PIC_ID_last);
    1c72:	67 85       	ldd	r22, Z+15	; 0x0f
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	c7 01       	movw	r24, r14
    1c78:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN16CLaserControlApp12SetPictureIdEj>
    1c7c:	92 c1       	rjmp	.+804    	; 0x1fa2 <_ZN16CLaserControlApp3RunEv+0xb5e>
			}
		break;
		case APP_POWERERR:
			SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
    1c7e:	22 e0       	ldi	r18, 0x02	; 2
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	44 ef       	ldi	r20, 0xF4	; 244
    1c84:	54 e2       	ldi	r21, 0x24	; 36
    1c86:	6c e0       	ldi	r22, 0x0C	; 12
    1c88:	70 e0       	ldi	r23, 0x00	; 0
    1c8a:	c7 01       	movw	r24, r14
    1c8c:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
			if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
    1c90:	f7 01       	movw	r30, r14
    1c92:	e0 59       	subi	r30, 0x90	; 144
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	80 81       	ld	r24, Z
    1c98:	91 81       	ldd	r25, Z+1	; 0x01
    1c9a:	44 97       	sbiw	r24, 0x14	; 20
    1c9c:	28 f4       	brcc	.+10     	; 0x1ca8 <_ZN16CLaserControlApp3RunEv+0x864>
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	3c 97       	sbiw	r30, 0x0c	; 12
    1ca4:	80 83       	st	Z, r24
    1ca6:	91 83       	std	Z+1, r25	; 0x01
			if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    1ca8:	f7 01       	movw	r30, r14
    1caa:	e0 59       	subi	r30, 0x90	; 144
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	80 81       	ld	r24, Z
    1cb0:	91 81       	ldd	r25, Z+1	; 0x01
    1cb2:	44 97       	sbiw	r24, 0x14	; 20
    1cb4:	28 f0       	brcs	.+10     	; 0x1cc0 <_ZN16CLaserControlApp3RunEv+0x87c>
    1cb6:	80 81       	ld	r24, Z
    1cb8:	91 81       	ldd	r25, Z+1	; 0x01
    1cba:	89 97       	sbiw	r24, 0x29	; 41
    1cbc:	08 f4       	brcc	.+2      	; 0x1cc0 <_ZN16CLaserControlApp3RunEv+0x87c>
    1cbe:	c7 c1       	rjmp	.+910    	; 0x204e <_ZN16CLaserControlApp3RunEv+0xc0a>
			if (m_wFlow > 40) laserDiodeData.coolIcon = 3;
    1cc0:	f7 01       	movw	r30, r14
    1cc2:	e0 59       	subi	r30, 0x90	; 144
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	80 81       	ld	r24, Z
    1cc8:	91 81       	ldd	r25, Z+1	; 0x01
    1cca:	89 97       	sbiw	r24, 0x29	; 41
    1ccc:	28 f0       	brcs	.+10     	; 0x1cd8 <_ZN16CLaserControlApp3RunEv+0x894>
    1cce:	83 e0       	ldi	r24, 0x03	; 3
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	3c 97       	sbiw	r30, 0x0c	; 12
    1cd4:	80 83       	st	Z, r24
    1cd6:	91 83       	std	Z+1, r25	; 0x01
			SetVariable(VARIABLE_ADDR_COOLICON, (uint16_t*)&laserDiodeData.coolIcon, 2);
    1cd8:	22 e0       	ldi	r18, 0x02	; 2
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	a7 01       	movw	r20, r14
    1cde:	4c 59       	subi	r20, 0x9C	; 156
    1ce0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce2:	63 e1       	ldi	r22, 0x13	; 19
    1ce4:	70 e0       	ldi	r23, 0x00	; 0
    1ce6:	c7 01       	movw	r24, r14
    1ce8:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
			SetVariable(VARIABLE_ADDR_FLOW, (uint16_t*)&m_wFlow, 2);
    1cec:	22 e0       	ldi	r18, 0x02	; 2
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	a7 01       	movw	r20, r14
    1cf2:	40 59       	subi	r20, 0x90	; 144
    1cf4:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf6:	6e e0       	ldi	r22, 0x0E	; 14
    1cf8:	70 e0       	ldi	r23, 0x00	; 0
    1cfa:	c7 01       	movw	r24, r14
    1cfc:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
			
			laserBoard.LaserPowerOff();
    1d00:	8e e6       	ldi	r24, 0x6E	; 110
    1d02:	95 e2       	ldi	r25, 0x25	; 37
    1d04:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <_ZN11CLaserBoard13LaserPowerOffEv>
			
			if ((PORTD.IN & PIN5_bm) != 0)
    1d08:	80 91 68 06 	lds	r24, 0x0668
    1d0c:	85 ff       	sbrs	r24, 5
    1d0e:	49 c1       	rjmp	.+658    	; 0x1fa2 <_ZN16CLaserControlApp3RunEv+0xb5e>
				SetPictureId(PIC_ID_last);
    1d10:	f7 01       	movw	r30, r14
    1d12:	67 85       	ldd	r22, Z+15	; 0x0f
    1d14:	70 e0       	ldi	r23, 0x00	; 0
    1d16:	c7 01       	movw	r24, r14
    1d18:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN16CLaserControlApp12SetPictureIdEj>
    1d1c:	42 c1       	rjmp	.+644    	; 0x1fa2 <_ZN16CLaserControlApp3RunEv+0xb5e>
		
		// Commands
		case APP_WORKOnReady:
			{
				//laserBoard.Relay2On();
				laserBoard.LaserPowerOn();
    1d1e:	8e e6       	ldi	r24, 0x6E	; 110
    1d20:	95 e2       	ldi	r25, 0x25	; 37
    1d22:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN11CLaserBoard12LaserPowerOnEv>
				
				uint16_t coolpwm = laserDiodeData.cooling * 204;
    1d26:	f7 01       	movw	r30, r14
    1d28:	e8 5a       	subi	r30, 0xA8	; 168
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	80 81       	ld	r24, Z
    1d2e:	91 81       	ldd	r25, Z+1	; 0x01
    1d30:	2c ec       	ldi	r18, 0xCC	; 204
    1d32:	28 9f       	mul	r18, r24
    1d34:	b0 01       	movw	r22, r0
    1d36:	29 9f       	mul	r18, r25
    1d38:	70 0d       	add	r23, r0
    1d3a:	11 24       	eor	r1, r1
				pwmtimer.SetCOMPA(coolpwm);
    1d3c:	8f e9       	ldi	r24, 0x9F	; 159
    1d3e:	95 e2       	ldi	r25, 0x25	; 37
    1d40:	0e 94 71 30 	call	0x60e2	; 0x60e2 <_ZN8CTimerD18SetCOMPAEj>
				pwmtimer.Start(1024);
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	74 e0       	ldi	r23, 0x04	; 4
    1d48:	8f e9       	ldi	r24, 0x9F	; 159
    1d4a:	95 e2       	ldi	r25, 0x25	; 37
    1d4c:	0e 94 3f 30 	call	0x607e	; 0x607e <_ZN8CTimerD15StartEj>
				
				prepare = true;
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	f7 01       	movw	r30, r14
    1d54:	81 8b       	std	Z+17, r24	; 0x11
				m_wMinutes = m_wSetMin;
    1d56:	e4 59       	subi	r30, 0x94	; 148
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	80 81       	ld	r24, Z
    1d5c:	91 81       	ldd	r25, Z+1	; 0x01
    1d5e:	36 97       	sbiw	r30, 0x06	; 6
    1d60:	80 83       	st	Z, r24
    1d62:	91 83       	std	Z+1, r25	; 0x01
				m_wSeconds = m_wSetSec;
    1d64:	38 96       	adiw	r30, 0x08	; 8
    1d66:	80 81       	ld	r24, Z
    1d68:	91 81       	ldd	r25, Z+1	; 0x01
    1d6a:	36 97       	sbiw	r30, 0x06	; 6
    1d6c:	80 83       	st	Z, r24
    1d6e:	91 83       	std	Z+1, r25	; 0x01

#ifdef FLOW_CONTROL				
				if (m_wFlow < 30)
    1d70:	38 96       	adiw	r30, 0x08	; 8
    1d72:	80 81       	ld	r24, Z
    1d74:	91 81       	ldd	r25, Z+1	; 0x01
    1d76:	4e 97       	sbiw	r24, 0x1e	; 30
    1d78:	30 f4       	brcc	.+12     	; 0x1d86 <_ZN16CLaserControlApp3RunEv+0x942>
				{
					SetPictureId(PICID_WORK_ERRORFLOW);
    1d7a:	68 e2       	ldi	r22, 0x28	; 40
    1d7c:	70 e0       	ldi	r23, 0x00	; 0
    1d7e:	c7 01       	movw	r24, r14
    1d80:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN16CLaserControlApp12SetPictureIdEj>
    1d84:	0e c1       	rjmp	.+540    	; 0x1fa2 <_ZN16CLaserControlApp3RunEv+0xb5e>
				}
				else				
#endif
				if (temperature > 290)
    1d86:	80 91 f4 24 	lds	r24, 0x24F4
    1d8a:	90 91 f5 24 	lds	r25, 0x24F5
    1d8e:	83 32       	cpi	r24, 0x23	; 35
    1d90:	91 40       	sbci	r25, 0x01	; 1
    1d92:	34 f0       	brlt	.+12     	; 0x1da0 <_ZN16CLaserControlApp3RunEv+0x95c>
				{
					SetPictureId(PICID_WORK_TEMPERWAIT);
    1d94:	67 e2       	ldi	r22, 0x27	; 39
    1d96:	70 e0       	ldi	r23, 0x00	; 0
    1d98:	c7 01       	movw	r24, r14
    1d9a:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN16CLaserControlApp12SetPictureIdEj>
    1d9e:	01 c1       	rjmp	.+514    	; 0x1fa2 <_ZN16CLaserControlApp3RunEv+0xb5e>
				}
				else
					SetPictureId(PICID_WORK_PREPARE);
    1da0:	67 e0       	ldi	r22, 0x07	; 7
    1da2:	70 e0       	ldi	r23, 0x00	; 0
    1da4:	c7 01       	movw	r24, r14
    1da6:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN16CLaserControlApp12SetPictureIdEj>
    1daa:	fb c0       	rjmp	.+502    	; 0x1fa2 <_ZN16CLaserControlApp3RunEv+0xb5e>
			}
		break;
		case APP_WORKOnPowerOn:
			{
				uint16_t data = ((uint16_t)((laserPower * 640) / 63)) << 2;  // (laserPower * 1024) / 1000)
    1dac:	f7 01       	movw	r30, r14
    1dae:	82 ad       	ldd	r24, Z+58	; 0x3a
    1db0:	93 ad       	ldd	r25, Z+59	; 0x3b
    1db2:	ac 01       	movw	r20, r24
    1db4:	56 95       	lsr	r21
    1db6:	54 2f       	mov	r21, r20
    1db8:	44 27       	eor	r20, r20
    1dba:	57 95       	ror	r21
    1dbc:	47 95       	ror	r20
    1dbe:	98 2f       	mov	r25, r24
    1dc0:	88 27       	eor	r24, r24
    1dc2:	99 0f       	add	r25, r25
    1dc4:	48 0f       	add	r20, r24
    1dc6:	59 1f       	adc	r21, r25
    1dc8:	9a 01       	movw	r18, r20
    1dca:	a1 e1       	ldi	r26, 0x11	; 17
    1dcc:	b4 e0       	ldi	r27, 0x04	; 4
    1dce:	0e 94 70 33 	call	0x66e0	; 0x66e0 <__umulhisi3>
    1dd2:	48 1b       	sub	r20, r24
    1dd4:	59 0b       	sbc	r21, r25
    1dd6:	56 95       	lsr	r21
    1dd8:	47 95       	ror	r20
    1dda:	84 0f       	add	r24, r20
    1ddc:	95 1f       	adc	r25, r21
    1dde:	96 95       	lsr	r25
    1de0:	87 95       	ror	r24
    1de2:	92 95       	swap	r25
    1de4:	82 95       	swap	r24
    1de6:	8f 70       	andi	r24, 0x0F	; 15
    1de8:	89 27       	eor	r24, r25
    1dea:	9f 70       	andi	r25, 0x0F	; 15
    1dec:	89 27       	eor	r24, r25
    1dee:	88 0f       	add	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	88 0f       	add	r24, r24
    1df4:	99 1f       	adc	r25, r25
    1df6:	89 83       	std	Y+1, r24	; 0x01
    1df8:	9a 83       	std	Y+2, r25	; 0x02
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    1dfa:	42 e0       	ldi	r20, 0x02	; 2
    1dfc:	50 e0       	ldi	r21, 0x00	; 0
    1dfe:	be 01       	movw	r22, r28
    1e00:	6f 5f       	subi	r22, 0xFF	; 255
    1e02:	7f 4f       	sbci	r23, 0xFF	; 255
    1e04:	88 ea       	ldi	r24, 0xA8	; 168
    1e06:	95 e2       	ldi	r25, 0x25	; 37
    1e08:	0e 94 24 12 	call	0x2448	; 0x2448 <_ZN4CSPI4SendEPhj>
				
				SetPictureId(PICID_WORK_POWERON);
    1e0c:	6e e0       	ldi	r22, 0x0E	; 14
    1e0e:	70 e0       	ldi	r23, 0x00	; 0
    1e10:	c7 01       	movw	r24, r14
    1e12:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    1e16:	c5 c0       	rjmp	.+394    	; 0x1fa2 <_ZN16CLaserControlApp3RunEv+0xb5e>
		case APP_WORKOnPowerOff:
			{
				SetPictureId(PICID_WORK_IDLE);
    1e18:	6a e0       	ldi	r22, 0x0A	; 10
    1e1a:	70 e0       	ldi	r23, 0x00	; 0
    1e1c:	c7 01       	movw	r24, r14
    1e1e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN16CLaserControlApp12SetPictureIdEj>
				
				laserTimer.Stop();
    1e22:	8e eb       	ldi	r24, 0xBE	; 190
    1e24:	92 e2       	ldi	r25, 0x22	; 34
    1e26:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
    1e2a:	60 e1       	ldi	r22, 0x10	; 16
    1e2c:	8e eb       	ldi	r24, 0xBE	; 190
    1e2e:	92 e2       	ldi	r25, 0x22	; 34
    1e30:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
    1e34:	60 e2       	ldi	r22, 0x20	; 32
    1e36:	8e eb       	ldi	r24, 0xBE	; 190
    1e38:	92 e2       	ldi	r25, 0x22	; 34
    1e3a:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserBoard.LaserPowerOff();
    1e3e:	8e e6       	ldi	r24, 0x6E	; 110
    1e40:	95 e2       	ldi	r25, 0x25	; 37
    1e42:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <_ZN11CLaserBoard13LaserPowerOffEv>
				pwmtimer.Stop();
    1e46:	8f e9       	ldi	r24, 0x9F	; 159
    1e48:	95 e2       	ldi	r25, 0x25	; 37
    1e4a:	0e 94 4c 30 	call	0x6098	; 0x6098 <_ZN8CTimerD14StopEv>
				laserBoard.PWMOn(); // Cooling off
    1e4e:	8e e6       	ldi	r24, 0x6E	; 110
    1e50:	95 e2       	ldi	r25, 0x25	; 37
    1e52:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <_ZN11CLaserBoard5PWMOnEv>
				eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, laserCounter);
    1e56:	f7 01       	movw	r30, r14
    1e58:	44 ad       	ldd	r20, Z+60	; 0x3c
    1e5a:	55 ad       	ldd	r21, Z+61	; 0x3d
    1e5c:	66 ad       	ldd	r22, Z+62	; 0x3e
    1e5e:	77 ad       	ldd	r23, Z+63	; 0x3f
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	0e 94 c7 34 	call	0x698e	; 0x698e <eeprom_write_dword>
				//laserBoard.Relay2Off();
				
				uint16_t data = 0;
    1e68:	19 82       	std	Y+1, r1	; 0x01
    1e6a:	1a 82       	std	Y+2, r1	; 0x02
				dacSPI.Send((uint8_t*)&data, sizeof(data));
    1e6c:	42 e0       	ldi	r20, 0x02	; 2
    1e6e:	50 e0       	ldi	r21, 0x00	; 0
    1e70:	be 01       	movw	r22, r28
    1e72:	6f 5f       	subi	r22, 0xFF	; 255
    1e74:	7f 4f       	sbci	r23, 0xFF	; 255
    1e76:	88 ea       	ldi	r24, 0xA8	; 168
    1e78:	95 e2       	ldi	r25, 0x25	; 37
    1e7a:	0e 94 24 12 	call	0x2448	; 0x2448 <_ZN4CSPI4SendEPhj>
			}
		break;
    1e7e:	91 c0       	rjmp	.+290    	; 0x1fa2 <_ZN16CLaserControlApp3RunEv+0xb5e>
		case APP_OnPhototypeSelect:
			{
				SetPictureId(PICID_WORK_IDLE);
    1e80:	6a e0       	ldi	r22, 0x0A	; 10
    1e82:	70 e0       	ldi	r23, 0x00	; 0
    1e84:	c7 01       	movw	r24, r14
    1e86:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN16CLaserControlApp12SetPictureIdEj>
			}
		break;
    1e8a:	8b c0       	rjmp	.+278    	; 0x1fa2 <_ZN16CLaserControlApp3RunEv+0xb5e>
		
		// Database
		case APP_DATABASE:
			GetVariable(VARIABLE_ADDR_DATAOFFS, 2);
    1e8c:	42 e0       	ldi	r20, 0x02	; 2
    1e8e:	50 e0       	ldi	r21, 0x00	; 0
    1e90:	61 e1       	ldi	r22, 0x11	; 17
    1e92:	70 e0       	ldi	r23, 0x00	; 0
    1e94:	c7 01       	movw	r24, r14
    1e96:	0e 94 d6 05 	call	0xbac	; 0xbac <_ZN16CLaserControlApp11GetVariableEjj>
    1e9a:	ff ef       	ldi	r31, 0xFF	; 255
    1e9c:	21 ee       	ldi	r18, 0xE1	; 225
    1e9e:	84 e0       	ldi	r24, 0x04	; 4
    1ea0:	f1 50       	subi	r31, 0x01	; 1
    1ea2:	20 40       	sbci	r18, 0x00	; 0
    1ea4:	80 40       	sbci	r24, 0x00	; 0
    1ea6:	e1 f7       	brne	.-8      	; 0x1ea0 <_ZN16CLaserControlApp3RunEv+0xa5c>
    1ea8:	00 c0       	rjmp	.+0      	; 0x1eaa <_ZN16CLaserControlApp3RunEv+0xa66>
    1eaa:	00 00       	nop
			_delay_ms(50);
			GetVariable(VARIABLE_ADDR_DATAINDEX, 2);
    1eac:	42 e0       	ldi	r20, 0x02	; 2
    1eae:	50 e0       	ldi	r21, 0x00	; 0
    1eb0:	62 e1       	ldi	r22, 0x12	; 18
    1eb2:	70 e0       	ldi	r23, 0x00	; 0
    1eb4:	c7 01       	movw	r24, r14
    1eb6:	0e 94 d6 05 	call	0xbac	; 0xbac <_ZN16CLaserControlApp11GetVariableEjj>
    1eba:	9f ef       	ldi	r25, 0xFF	; 255
    1ebc:	e1 ee       	ldi	r30, 0xE1	; 225
    1ebe:	f4 e0       	ldi	r31, 0x04	; 4
    1ec0:	91 50       	subi	r25, 0x01	; 1
    1ec2:	e0 40       	sbci	r30, 0x00	; 0
    1ec4:	f0 40       	sbci	r31, 0x00	; 0
    1ec6:	e1 f7       	brne	.-8      	; 0x1ec0 <_ZN16CLaserControlApp3RunEv+0xa7c>
    1ec8:	00 c0       	rjmp	.+0      	; 0x1eca <_ZN16CLaserControlApp3RunEv+0xa86>
    1eca:	00 00       	nop
			_delay_ms(50);
			
			Database.MapDatabaseToRead(VARIABLE_ADDR_DATABASE, DGUS_DATABASE_ADDR + (uint32_t)laserDiodeData.DatabasePageOffset * (uint32_t)PROFILE_SIZE, 0x0C00);
    1ecc:	f7 01       	movw	r30, r14
    1ece:	e0 5a       	subi	r30, 0xA0	; 160
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	20 81       	ld	r18, Z
    1ed4:	31 81       	ldd	r19, Z+1	; 0x01
    1ed6:	c9 01       	movw	r24, r18
    1ed8:	a0 e0       	ldi	r26, 0x00	; 0
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	90 51       	subi	r25, 0x10	; 16
    1ede:	af 4f       	sbci	r26, 0xFF	; 255
    1ee0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ee2:	22 27       	eor	r18, r18
    1ee4:	38 2f       	mov	r19, r24
    1ee6:	49 2f       	mov	r20, r25
    1ee8:	5a 2f       	mov	r21, r26
    1eea:	00 e0       	ldi	r16, 0x00	; 0
    1eec:	1c e0       	ldi	r17, 0x0C	; 12
    1eee:	60 e0       	ldi	r22, 0x00	; 0
    1ef0:	71 e0       	ldi	r23, 0x01	; 1
    1ef2:	85 e9       	ldi	r24, 0x95	; 149
    1ef4:	95 e2       	ldi	r25, 0x25	; 37
    1ef6:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
				_delay_ms(500);
				
				uint16_t index = 13;
				SetVariable(VARIABLE_ADDR_DATAINDEX, &index, 2);
			}*/
		break;
    1efa:	53 c0       	rjmp	.+166    	; 0x1fa2 <_ZN16CLaserControlApp3RunEv+0xb5e>
    1efc:	2f ef       	ldi	r18, 0xFF	; 255
    1efe:	87 ea       	ldi	r24, 0xA7	; 167
    1f00:	91 e6       	ldi	r25, 0x61	; 97
    1f02:	21 50       	subi	r18, 0x01	; 1
    1f04:	80 40       	sbci	r24, 0x00	; 0
    1f06:	90 40       	sbci	r25, 0x00	; 0
    1f08:	e1 f7       	brne	.-8      	; 0x1f02 <_ZN16CLaserControlApp3RunEv+0xabe>
    1f0a:	00 c0       	rjmp	.+0      	; 0x1f0c <_ZN16CLaserControlApp3RunEv+0xac8>
    1f0c:	00 00       	nop
		case APP_READPROFILE:
			_delay_ms(1000);
			
			GetVariable(VARIABLE_ADDR_DATAINDEX, 2);
    1f0e:	42 e0       	ldi	r20, 0x02	; 2
    1f10:	50 e0       	ldi	r21, 0x00	; 0
    1f12:	62 e1       	ldi	r22, 0x12	; 18
    1f14:	70 e0       	ldi	r23, 0x00	; 0
    1f16:	c7 01       	movw	r24, r14
    1f18:	0e 94 d6 05 	call	0xbac	; 0xbac <_ZN16CLaserControlApp11GetVariableEjj>
			
			Database.MapDatabaseToRead(
				VARIABLE_ADDR_PROFILE, 
				DGUS_DATABASE_ADDR + (uint32_t)(laserDiodeData.DatabasePageOffset + laserDiodeData.DatabaseSelectionIndex) * (uint32_t)PROFILE_SIZE, 0x0100);
    1f1c:	f7 01       	movw	r30, r14
    1f1e:	ee 59       	subi	r30, 0x9E	; 158
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	20 81       	ld	r18, Z
    1f24:	31 81       	ldd	r19, Z+1	; 0x01
    1f26:	32 97       	sbiw	r30, 0x02	; 2
    1f28:	80 81       	ld	r24, Z
    1f2a:	91 81       	ldd	r25, Z+1	; 0x01
    1f2c:	28 0f       	add	r18, r24
    1f2e:	39 1f       	adc	r19, r25
    1f30:	c9 01       	movw	r24, r18
    1f32:	a0 e0       	ldi	r26, 0x00	; 0
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	90 51       	subi	r25, 0x10	; 16
    1f38:	af 4f       	sbci	r26, 0xFF	; 255
    1f3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f3c:	22 27       	eor	r18, r18
    1f3e:	38 2f       	mov	r19, r24
    1f40:	49 2f       	mov	r20, r25
    1f42:	5a 2f       	mov	r21, r26
    1f44:	00 e0       	ldi	r16, 0x00	; 0
    1f46:	11 e0       	ldi	r17, 0x01	; 1
    1f48:	60 e0       	ldi	r22, 0x00	; 0
    1f4a:	7d e0       	ldi	r23, 0x0D	; 13
    1f4c:	85 e9       	ldi	r24, 0x95	; 149
    1f4e:	95 e2       	ldi	r25, 0x25	; 37
    1f50:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
		break;
    1f54:	26 c0       	rjmp	.+76     	; 0x1fa2 <_ZN16CLaserControlApp3RunEv+0xb5e>
		case APP_SAVEPROFILE:
			Database.MapDatabaseToWrite(
				VARIABLE_ADDR_PROFILE,
				DGUS_DATABASE_ADDR + (uint32_t)(laserDiodeData.DatabasePageOffset + laserDiodeData.DatabaseSelectionIndex) * (uint32_t)PROFILE_SIZE, 0x0100);
    1f56:	f7 01       	movw	r30, r14
    1f58:	ee 59       	subi	r30, 0x9E	; 158
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	20 81       	ld	r18, Z
    1f5e:	31 81       	ldd	r19, Z+1	; 0x01
    1f60:	32 97       	sbiw	r30, 0x02	; 2
    1f62:	80 81       	ld	r24, Z
    1f64:	91 81       	ldd	r25, Z+1	; 0x01
    1f66:	28 0f       	add	r18, r24
    1f68:	39 1f       	adc	r19, r25
    1f6a:	c9 01       	movw	r24, r18
    1f6c:	a0 e0       	ldi	r26, 0x00	; 0
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	90 51       	subi	r25, 0x10	; 16
    1f72:	af 4f       	sbci	r26, 0xFF	; 255
    1f74:	bf 4f       	sbci	r27, 0xFF	; 255
    1f76:	22 27       	eor	r18, r18
    1f78:	38 2f       	mov	r19, r24
    1f7a:	49 2f       	mov	r20, r25
    1f7c:	5a 2f       	mov	r21, r26
    1f7e:	00 e0       	ldi	r16, 0x00	; 0
    1f80:	11 e0       	ldi	r17, 0x01	; 1
    1f82:	60 e0       	ldi	r22, 0x00	; 0
    1f84:	7d e0       	ldi	r23, 0x0D	; 13
    1f86:	85 e9       	ldi	r24, 0x95	; 149
    1f88:	95 e2       	ldi	r25, 0x25	; 37
    1f8a:	0e 94 05 03 	call	0x60a	; 0x60a <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>
		break;
    1f8e:	09 c0       	rjmp	.+18     	; 0x1fa2 <_ZN16CLaserControlApp3RunEv+0xb5e>
		case APP_UNMAPDATABASE:
			Database.UnMap();
    1f90:	85 e9       	ldi	r24, 0x95	; 149
    1f92:	95 e2       	ldi	r25, 0x25	; 37
    1f94:	0e 94 cf 03 	call	0x79e	; 0x79e <_ZN13CDGUSDatabase5UnMapEv>
		break;
    1f98:	04 c0       	rjmp	.+8      	; 0x1fa2 <_ZN16CLaserControlApp3RunEv+0xb5e>
		default:
			Database.UnMap();
    1f9a:	85 e9       	ldi	r24, 0x95	; 149
    1f9c:	95 e2       	ldi	r25, 0x25	; 37
    1f9e:	0e 94 cf 03 	call	0x79e	; 0x79e <_ZN13CDGUSDatabase5UnMapEv>
	}
	
	/*if ((Profile != APP_WORKPREPARE) && (Profile != APP_WORKTEMPERWAIT))
		prepare = false;*/
	
	if ((PORTD.IN & PIN5_bm) == 0)
    1fa2:	80 91 68 06 	lds	r24, 0x0668
    1fa6:	85 fd       	sbrc	r24, 5
    1fa8:	08 c0       	rjmp	.+16     	; 0x1fba <_ZN16CLaserControlApp3RunEv+0xb76>
		{
			PIC_ID_last = PIC_ID;
    1faa:	f7 01       	movw	r30, r14
    1fac:	86 85       	ldd	r24, Z+14	; 0x0e
    1fae:	87 87       	std	Z+15, r24	; 0x0f
			SetPictureId(PICID_WORK_ERROR1);
    1fb0:	68 e0       	ldi	r22, 0x08	; 8
    1fb2:	70 e0       	ldi	r23, 0x00	; 0
    1fb4:	c7 01       	movw	r24, r14
    1fb6:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN16CLaserControlApp12SetPictureIdEj>
		}
	
	if (update)
    1fba:	f7 01       	movw	r30, r14
    1fbc:	80 89       	ldd	r24, Z+16	; 0x10
    1fbe:	88 23       	and	r24, r24
    1fc0:	09 f4       	brne	.+2      	; 0x1fc4 <_ZN16CLaserControlApp3RunEv+0xb80>
    1fc2:	4d c0       	rjmp	.+154    	; 0x205e <_ZN16CLaserControlApp3RunEv+0xc1a>
	{		
		/*SetVariable(STRUCT_ADDR_LASERPROFILE_DATA, (uint16_t*)&m_structLaserProfile[Profile], sizeof(DGUS_LASERPROFILE));
		SetVariable(STRUCT_ADDR_LASERPROSETTINGS_DATA, (uint16_t*)&laserDiodeData.lasersettings,  sizeof(DGUS_LASERSETTINGS));*/
		SetVariable(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
    1fc4:	a7 01       	movw	r20, r14
    1fc6:	40 5c       	subi	r20, 0xC0	; 192
    1fc8:	5f 4f       	sbci	r21, 0xFF	; 255
    1fca:	26 e2       	ldi	r18, 0x26	; 38
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	61 e0       	ldi	r22, 0x01	; 1
    1fd0:	70 e0       	ldi	r23, 0x00	; 0
    1fd2:	c7 01       	movw	r24, r14
    1fd4:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN16CLaserControlApp11SetVariableEjPjj>
		update = false;
    1fd8:	f7 01       	movw	r30, r14
    1fda:	10 8a       	std	Z+16, r1	; 0x10
    1fdc:	40 c0       	rjmp	.+128    	; 0x205e <_ZN16CLaserControlApp3RunEv+0xc1a>
				
				laserDiodeData.temperature = temperature;
				laserDiodeData.flow = m_wFlow;
				SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
				if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
				if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    1fde:	82 e0       	ldi	r24, 0x02	; 2
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	f7 01       	movw	r30, r14
    1fe4:	ec 59       	subi	r30, 0x9C	; 156
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	80 83       	st	Z, r24
    1fea:	91 83       	std	Z+1, r25	; 0x01
    1fec:	f8 ca       	rjmp	.-2576   	; 0x15de <_ZN16CLaserControlApp3RunEv+0x19a>
			{
				DGUS_PREPARETIMER timervar;
				
				SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
				if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
				if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    1fee:	82 e0       	ldi	r24, 0x02	; 2
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	f7 01       	movw	r30, r14
    1ff4:	ec 59       	subi	r30, 0x9C	; 156
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	80 83       	st	Z, r24
    1ffa:	91 83       	std	Z+1, r25	; 0x01
    1ffc:	b4 cb       	rjmp	.-2200   	; 0x1766 <_ZN16CLaserControlApp3RunEv+0x322>
				timervar.timer_seconds = temperature % 10;
				
				SetVariable(STRUCT_ADDR_PREPARETIMER_DATA, (uint16_t*)&timervar, sizeof(timervar));
				SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
				if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
				if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    1ffe:	82 e0       	ldi	r24, 0x02	; 2
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	f7 01       	movw	r30, r14
    2004:	ec 59       	subi	r30, 0x9C	; 156
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	80 83       	st	Z, r24
    200a:	91 83       	std	Z+1, r25	; 0x01
    200c:	38 cc       	rjmp	.-1936   	; 0x187e <_ZN16CLaserControlApp3RunEv+0x43a>
		break;
		case APP_WORKREADY:
			{
				SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
				if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
				if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    200e:	82 e0       	ldi	r24, 0x02	; 2
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	f7 01       	movw	r30, r14
    2014:	ec 59       	subi	r30, 0x9C	; 156
    2016:	ff 4f       	sbci	r31, 0xFF	; 255
    2018:	80 83       	st	Z, r24
    201a:	91 83       	std	Z+1, r25	; 0x01
    201c:	90 cc       	rjmp	.-1760   	; 0x193e <_ZN16CLaserControlApp3RunEv+0x4fa>
		case APP_WORKLIGHT:
		case APP_WORKPOWERON:
			{
				SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
				if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
				if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    201e:	82 e0       	ldi	r24, 0x02	; 2
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	f7 01       	movw	r30, r14
    2024:	ec 59       	subi	r30, 0x9C	; 156
    2026:	ff 4f       	sbci	r31, 0xFF	; 255
    2028:	80 83       	st	Z, r24
    202a:	91 83       	std	Z+1, r25	; 0x01
    202c:	da cc       	rjmp	.-1612   	; 0x19e2 <_ZN16CLaserControlApp3RunEv+0x59e>
			}
		break;
		case APP_FLOWERR:
			SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
			if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
			if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    202e:	82 e0       	ldi	r24, 0x02	; 2
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	f7 01       	movw	r30, r14
    2034:	ec 59       	subi	r30, 0x9C	; 156
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	80 83       	st	Z, r24
    203a:	91 83       	std	Z+1, r25	; 0x01
    203c:	97 cd       	rjmp	.-1234   	; 0x1b6c <_ZN16CLaserControlApp3RunEv+0x728>
				SetPictureId(PICID_WORKOnReady);
		break;
		case APP_TEMPERERR:
			SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
			if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
			if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	f7 01       	movw	r30, r14
    2044:	ec 59       	subi	r30, 0x9C	; 156
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	80 83       	st	Z, r24
    204a:	91 83       	std	Z+1, r25	; 0x01
    204c:	e1 cd       	rjmp	.-1086   	; 0x1c10 <_ZN16CLaserControlApp3RunEv+0x7cc>
			}
		break;
		case APP_POWERERR:
			SetVariable(VARIABLE_ADDR_TEMPER, (uint16_t*)&temperature, 2);
			if (m_wFlow < 20) laserDiodeData.coolIcon = 1;
			if (m_wFlow >= 20 && m_wFlow <= 40) laserDiodeData.coolIcon = 2;
    204e:	82 e0       	ldi	r24, 0x02	; 2
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	f7 01       	movw	r30, r14
    2054:	ec 59       	subi	r30, 0x9C	; 156
    2056:	ff 4f       	sbci	r31, 0xFF	; 255
    2058:	80 83       	st	Z, r24
    205a:	91 83       	std	Z+1, r25	; 0x01
    205c:	31 ce       	rjmp	.-926    	; 0x1cc0 <_ZN16CLaserControlApp3RunEv+0x87c>
		/*SetVariable(STRUCT_ADDR_LASERPROFILE_DATA, (uint16_t*)&m_structLaserProfile[Profile], sizeof(DGUS_LASERPROFILE));
		SetVariable(STRUCT_ADDR_LASERPROSETTINGS_DATA, (uint16_t*)&laserDiodeData.lasersettings,  sizeof(DGUS_LASERSETTINGS));*/
		SetVariable(STRUCT_ADDR_LASERDIODE_DATA, (uint16_t*)&laserDiodeData, sizeof(DGUS_LASERDIODE));
		update = false;
	}
}
    205e:	26 96       	adiw	r28, 0x06	; 6
    2060:	cd bf       	out	0x3d, r28	; 61
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	df 91       	pop	r29
    2066:	cf 91       	pop	r28
    2068:	1f 91       	pop	r17
    206a:	0f 91       	pop	r16
    206c:	ff 90       	pop	r15
    206e:	ef 90       	pop	r14
    2070:	df 90       	pop	r13
    2072:	cf 90       	pop	r12
    2074:	bf 90       	pop	r11
    2076:	af 90       	pop	r10
    2078:	08 95       	ret

0000207a <_ZN16CLaserControlApp7OnTimerEv>:
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic, 2);
	m_cpSender->WaitMODBUSTransmitter();
}

void CLaserControlApp::OnTimer()
{
    207a:	cf 93       	push	r28
    207c:	df 93       	push	r29
    207e:	ec 01       	movw	r28, r24
	if (m_wDeadTime != 0)
    2080:	fc 01       	movw	r30, r24
    2082:	ee 58       	subi	r30, 0x8E	; 142
    2084:	ff 4f       	sbci	r31, 0xFF	; 255
    2086:	80 81       	ld	r24, Z
    2088:	91 81       	ldd	r25, Z+1	; 0x01
    208a:	89 2b       	or	r24, r25
    208c:	29 f0       	breq	.+10     	; 0x2098 <_ZN16CLaserControlApp7OnTimerEv+0x1e>
		m_wDeadTime--;
    208e:	80 81       	ld	r24, Z
    2090:	91 81       	ldd	r25, Z+1	; 0x01
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	80 83       	st	Z, r24
    2096:	91 83       	std	Z+1, r25	; 0x01
		
	if (prepare)
    2098:	89 89       	ldd	r24, Y+17	; 0x11
    209a:	88 23       	and	r24, r24
    209c:	09 f4       	brne	.+2      	; 0x20a0 <_ZN16CLaserControlApp7OnTimerEv+0x26>
    209e:	8c c0       	rjmp	.+280    	; 0x21b8 <_ZN16CLaserControlApp7OnTimerEv+0x13e>
	{
		if (m_wMillSec == 0)
    20a0:	fe 01       	movw	r30, r28
    20a2:	e6 59       	subi	r30, 0x96	; 150
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	80 81       	ld	r24, Z
    20a8:	91 81       	ldd	r25, Z+1	; 0x01
    20aa:	89 2b       	or	r24, r25
    20ac:	09 f0       	breq	.+2      	; 0x20b0 <_ZN16CLaserControlApp7OnTimerEv+0x36>
    20ae:	7c c0       	rjmp	.+248    	; 0x21a8 <_ZN16CLaserControlApp7OnTimerEv+0x12e>
		{
			m_wFlow = (TCC1.CNT * 10) / 8;
    20b0:	80 91 60 08 	lds	r24, 0x0860
    20b4:	90 91 61 08 	lds	r25, 0x0861
    20b8:	9c 01       	movw	r18, r24
    20ba:	22 0f       	add	r18, r18
    20bc:	33 1f       	adc	r19, r19
    20be:	88 0f       	add	r24, r24
    20c0:	99 1f       	adc	r25, r25
    20c2:	88 0f       	add	r24, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	88 0f       	add	r24, r24
    20c8:	99 1f       	adc	r25, r25
    20ca:	82 0f       	add	r24, r18
    20cc:	93 1f       	adc	r25, r19
    20ce:	96 95       	lsr	r25
    20d0:	87 95       	ror	r24
    20d2:	96 95       	lsr	r25
    20d4:	87 95       	ror	r24
    20d6:	96 95       	lsr	r25
    20d8:	87 95       	ror	r24
    20da:	36 96       	adiw	r30, 0x06	; 6
    20dc:	80 83       	st	Z, r24
    20de:	91 83       	std	Z+1, r25	; 0x01
			flowtimer.Reset();
    20e0:	82 ea       	ldi	r24, 0xA2	; 162
    20e2:	95 e2       	ldi	r25, 0x25	; 37
    20e4:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <_ZN8CTimerC15ResetEv>
			
			if (m_wSeconds == 0)
    20e8:	fe 01       	movw	r30, r28
    20ea:	e8 59       	subi	r30, 0x98	; 152
    20ec:	ff 4f       	sbci	r31, 0xFF	; 255
    20ee:	80 81       	ld	r24, Z
    20f0:	91 81       	ldd	r25, Z+1	; 0x01
    20f2:	89 2b       	or	r24, r25
    20f4:	09 f0       	breq	.+2      	; 0x20f8 <_ZN16CLaserControlApp7OnTimerEv+0x7e>
    20f6:	4b c0       	rjmp	.+150    	; 0x218e <_ZN16CLaserControlApp7OnTimerEv+0x114>
			{
				if (m_wMinutes == 0)
    20f8:	32 97       	sbiw	r30, 0x02	; 2
    20fa:	80 81       	ld	r24, Z
    20fc:	91 81       	ldd	r25, Z+1	; 0x01
    20fe:	89 2b       	or	r24, r25
    2100:	c9 f5       	brne	.+114    	; 0x2174 <_ZN16CLaserControlApp7OnTimerEv+0xfa>
				{
					if (Profile == APP_WORKREADY)
    2102:	8d 85       	ldd	r24, Y+13	; 0x0d
    2104:	84 30       	cpi	r24, 0x04	; 4
    2106:	a1 f5       	brne	.+104    	; 0x2170 <_ZN16CLaserControlApp7OnTimerEv+0xf6>
					{
						/*player.SoundStart(1000, 1000, 2);
						player.SoundStop();*/
						player.SoundStart(261, 100, 2);
    2108:	22 e0       	ldi	r18, 0x02	; 2
    210a:	44 e6       	ldi	r20, 0x64	; 100
    210c:	50 e0       	ldi	r21, 0x00	; 0
    210e:	65 e0       	ldi	r22, 0x05	; 5
    2110:	71 e0       	ldi	r23, 0x01	; 1
    2112:	8d e6       	ldi	r24, 0x6D	; 109
    2114:	95 e2       	ldi	r25, 0x25	; 37
    2116:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    211a:	8d e6       	ldi	r24, 0x6D	; 109
    211c:	95 e2       	ldi	r25, 0x25	; 37
    211e:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(294, 100, 2);
    2122:	22 e0       	ldi	r18, 0x02	; 2
    2124:	44 e6       	ldi	r20, 0x64	; 100
    2126:	50 e0       	ldi	r21, 0x00	; 0
    2128:	66 e2       	ldi	r22, 0x26	; 38
    212a:	71 e0       	ldi	r23, 0x01	; 1
    212c:	8d e6       	ldi	r24, 0x6D	; 109
    212e:	95 e2       	ldi	r25, 0x25	; 37
    2130:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    2134:	8d e6       	ldi	r24, 0x6D	; 109
    2136:	95 e2       	ldi	r25, 0x25	; 37
    2138:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(329, 100, 2);
    213c:	22 e0       	ldi	r18, 0x02	; 2
    213e:	44 e6       	ldi	r20, 0x64	; 100
    2140:	50 e0       	ldi	r21, 0x00	; 0
    2142:	69 e4       	ldi	r22, 0x49	; 73
    2144:	71 e0       	ldi	r23, 0x01	; 1
    2146:	8d e6       	ldi	r24, 0x6D	; 109
    2148:	95 e2       	ldi	r25, 0x25	; 37
    214a:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    214e:	8d e6       	ldi	r24, 0x6D	; 109
    2150:	95 e2       	ldi	r25, 0x25	; 37
    2152:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <_ZN12CSoundPlayer9SoundStopEv>
						player.SoundStart(349, 100, 2);
    2156:	22 e0       	ldi	r18, 0x02	; 2
    2158:	44 e6       	ldi	r20, 0x64	; 100
    215a:	50 e0       	ldi	r21, 0x00	; 0
    215c:	6d e5       	ldi	r22, 0x5D	; 93
    215e:	71 e0       	ldi	r23, 0x01	; 1
    2160:	8d e6       	ldi	r24, 0x6D	; 109
    2162:	95 e2       	ldi	r25, 0x25	; 37
    2164:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    2168:	8d e6       	ldi	r24, 0x6D	; 109
    216a:	95 e2       	ldi	r25, 0x25	; 37
    216c:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <_ZN12CSoundPlayer9SoundStopEv>
}

void CLaserControlApp::OnTimeout()
{
	//timer.Stop();
	prepare = false;
    2170:	19 8a       	std	Y+17, r1	; 0x11
    2172:	50 c0       	rjmp	.+160    	; 0x2214 <_ZN16CLaserControlApp7OnTimerEv+0x19a>
					OnTimeout();
					
					//player.beep(1000, 1000);
					return;
				}
				m_wSeconds = 60;
    2174:	8c e3       	ldi	r24, 0x3C	; 60
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	fe 01       	movw	r30, r28
    217a:	e8 59       	subi	r30, 0x98	; 152
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	80 83       	st	Z, r24
    2180:	91 83       	std	Z+1, r25	; 0x01
				m_wMinutes--;
    2182:	32 97       	sbiw	r30, 0x02	; 2
    2184:	80 81       	ld	r24, Z
    2186:	91 81       	ldd	r25, Z+1	; 0x01
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	80 83       	st	Z, r24
    218c:	91 83       	std	Z+1, r25	; 0x01
			}
			m_wMillSec = 100; // Every 10 ms
    218e:	84 e6       	ldi	r24, 0x64	; 100
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	fe 01       	movw	r30, r28
    2194:	e6 59       	subi	r30, 0x96	; 150
    2196:	ff 4f       	sbci	r31, 0xFF	; 255
    2198:	80 83       	st	Z, r24
    219a:	91 83       	std	Z+1, r25	; 0x01
			m_wSeconds--;
    219c:	32 97       	sbiw	r30, 0x02	; 2
    219e:	80 81       	ld	r24, Z
    21a0:	91 81       	ldd	r25, Z+1	; 0x01
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	80 83       	st	Z, r24
    21a6:	91 83       	std	Z+1, r25	; 0x01
				player.SoundStart(1000, 25, 2);
				player.SoundStop();
				//player.beep(1000, 25);
			}*/
		}
		m_wMillSec-=10;
    21a8:	c6 59       	subi	r28, 0x96	; 150
    21aa:	df 4f       	sbci	r29, 0xFF	; 255
    21ac:	88 81       	ld	r24, Y
    21ae:	99 81       	ldd	r25, Y+1	; 0x01
    21b0:	0a 97       	sbiw	r24, 0x0a	; 10
    21b2:	88 83       	st	Y, r24
    21b4:	99 83       	std	Y+1, r25	; 0x01
    21b6:	2e c0       	rjmp	.+92     	; 0x2214 <_ZN16CLaserControlApp7OnTimerEv+0x19a>
	}
	else
	{
		if (m_wMillSec == 0)
    21b8:	fe 01       	movw	r30, r28
    21ba:	e6 59       	subi	r30, 0x96	; 150
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	80 81       	ld	r24, Z
    21c0:	91 81       	ldd	r25, Z+1	; 0x01
    21c2:	89 2b       	or	r24, r25
    21c4:	01 f5       	brne	.+64     	; 0x2206 <_ZN16CLaserControlApp7OnTimerEv+0x18c>
		{
			m_wMillSec = 100;
    21c6:	84 e6       	ldi	r24, 0x64	; 100
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	80 83       	st	Z, r24
    21cc:	91 83       	std	Z+1, r25	; 0x01
			
			m_wFlow = (TCC1.CNT * 10) / 8;
    21ce:	80 91 60 08 	lds	r24, 0x0860
    21d2:	90 91 61 08 	lds	r25, 0x0861
    21d6:	9c 01       	movw	r18, r24
    21d8:	22 0f       	add	r18, r18
    21da:	33 1f       	adc	r19, r19
    21dc:	88 0f       	add	r24, r24
    21de:	99 1f       	adc	r25, r25
    21e0:	88 0f       	add	r24, r24
    21e2:	99 1f       	adc	r25, r25
    21e4:	88 0f       	add	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	82 0f       	add	r24, r18
    21ea:	93 1f       	adc	r25, r19
    21ec:	96 95       	lsr	r25
    21ee:	87 95       	ror	r24
    21f0:	96 95       	lsr	r25
    21f2:	87 95       	ror	r24
    21f4:	96 95       	lsr	r25
    21f6:	87 95       	ror	r24
    21f8:	36 96       	adiw	r30, 0x06	; 6
    21fa:	80 83       	st	Z, r24
    21fc:	91 83       	std	Z+1, r25	; 0x01
			flowtimer.Reset();
    21fe:	82 ea       	ldi	r24, 0xA2	; 162
    2200:	95 e2       	ldi	r25, 0x25	; 37
    2202:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <_ZN8CTimerC15ResetEv>
		}
		m_wMillSec-=10;
    2206:	c6 59       	subi	r28, 0x96	; 150
    2208:	df 4f       	sbci	r29, 0xFF	; 255
    220a:	88 81       	ld	r24, Y
    220c:	99 81       	ldd	r25, Y+1	; 0x01
    220e:	0a 97       	sbiw	r24, 0x0a	; 10
    2210:	88 83       	st	Y, r24
    2212:	99 83       	std	Y+1, r25	; 0x01
	}
}
    2214:	df 91       	pop	r29
    2216:	cf 91       	pop	r28
    2218:	08 95       	ret

0000221a <_ZN16CLaserControlApp13OnTimerStaticEPv>:
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnTimer();
    221a:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN16CLaserControlApp7OnTimerEv>
    221e:	08 95       	ret

00002220 <_ZN16CLaserControlApp6OnINT0Ev>:
{
	laserBoard.PWMOn();
}

void CLaserControlApp::OnINT0()
{
    2220:	cf 93       	push	r28
    2222:	df 93       	push	r29
    2224:	fc 01       	movw	r30, r24
	static bool isstarted = false;
	
	switch (state)
    2226:	94 85       	ldd	r25, Z+12	; 0x0c
    2228:	95 50       	subi	r25, 0x05	; 5
    222a:	92 30       	cpi	r25, 0x02	; 2
    222c:	08 f0       	brcs	.+2      	; 0x2230 <_ZN16CLaserControlApp6OnINT0Ev+0x10>
    222e:	85 c0       	rjmp	.+266    	; 0x233a <_ZN16CLaserControlApp6OnINT0Ev+0x11a>
    2230:	ef 01       	movw	r28, r30
	{
		case APP_WORKLIGHT:
		case APP_WORKPOWERON:
		{
			if ((PORTC.IN & 0x01) == 0)
    2232:	80 91 48 06 	lds	r24, 0x0648
    2236:	80 fd       	sbrc	r24, 0
    2238:	6a c0       	rjmp	.+212    	; 0x230e <_ZN16CLaserControlApp6OnINT0Ev+0xee>
			{				
				if ((!isstarted) && (m_wDeadTime == 0))
    223a:	80 91 bc 22 	lds	r24, 0x22BC
    223e:	81 11       	cpse	r24, r1
    2240:	7c c0       	rjmp	.+248    	; 0x233a <_ZN16CLaserControlApp6OnINT0Ev+0x11a>
    2242:	ee 58       	subi	r30, 0x8E	; 142
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	80 81       	ld	r24, Z
    2248:	91 81       	ldd	r25, Z+1	; 0x01
    224a:	89 2b       	or	r24, r25
    224c:	09 f4       	brne	.+2      	; 0x2250 <_ZN16CLaserControlApp6OnINT0Ev+0x30>
    224e:	70 c0       	rjmp	.+224    	; 0x2330 <_ZN16CLaserControlApp6OnINT0Ev+0x110>
    2250:	74 c0       	rjmp	.+232    	; 0x233a <_ZN16CLaserControlApp6OnINT0Ev+0x11a>
				{
					if (Profile == PROFILE_SINGLE)
					{
						m_wDeadTime = 10;
    2252:	8a e0       	ldi	r24, 0x0A	; 10
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	fe 01       	movw	r30, r28
    2258:	ee 58       	subi	r30, 0x8E	; 142
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	80 83       	st	Z, r24
    225e:	91 83       	std	Z+1, r25	; 0x01
						
						laserCounter++;
    2260:	8c ad       	ldd	r24, Y+60	; 0x3c
    2262:	9d ad       	ldd	r25, Y+61	; 0x3d
    2264:	ae ad       	ldd	r26, Y+62	; 0x3e
    2266:	bf ad       	ldd	r27, Y+63	; 0x3f
    2268:	01 96       	adiw	r24, 0x01	; 1
    226a:	a1 1d       	adc	r26, r1
    226c:	b1 1d       	adc	r27, r1
    226e:	8c af       	std	Y+60, r24	; 0x3c
    2270:	9d af       	std	Y+61, r25	; 0x3d
    2272:	ae af       	std	Y+62, r26	; 0x3e
    2274:	bf af       	std	Y+63, r27	; 0x3f
						
						if (laserTimerDutyCyclems > 100)
    2276:	48 ad       	ldd	r20, Y+56	; 0x38
    2278:	59 ad       	ldd	r21, Y+57	; 0x39
    227a:	45 36       	cpi	r20, 0x65	; 101
    227c:	51 05       	cpc	r21, r1
    227e:	50 f0       	brcs	.+20     	; 0x2294 <_ZN16CLaserControlApp6OnINT0Ev+0x74>
							player.SoundStart(500, 50, 0);
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	42 e3       	ldi	r20, 0x32	; 50
    2284:	50 e0       	ldi	r21, 0x00	; 0
    2286:	64 ef       	ldi	r22, 0xF4	; 244
    2288:	71 e0       	ldi	r23, 0x01	; 1
    228a:	8d e6       	ldi	r24, 0x6D	; 109
    228c:	95 e2       	ldi	r25, 0x25	; 37
    228e:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <_ZN12CSoundPlayer10SoundStartEjjh>
    2292:	09 c0       	rjmp	.+18     	; 0x22a6 <_ZN16CLaserControlApp6OnINT0Ev+0x86>
						else
							player.SoundStart(500, laserTimerDutyCyclems/2, 0);
    2294:	56 95       	lsr	r21
    2296:	47 95       	ror	r20
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	64 ef       	ldi	r22, 0xF4	; 244
    229c:	71 e0       	ldi	r23, 0x01	; 1
    229e:	8d e6       	ldi	r24, 0x6D	; 109
    22a0:	95 e2       	ldi	r25, 0x25	; 37
    22a2:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <_ZN12CSoundPlayer10SoundStartEjjh>
						player.SoundStop();
    22a6:	8d e6       	ldi	r24, 0x6D	; 109
    22a8:	95 e2       	ldi	r25, 0x25	; 37
    22aa:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <_ZN12CSoundPlayer9SoundStopEv>
					}
						
					if (laserTimerDutyCycle != 0)
    22ae:	8e a9       	ldd	r24, Y+54	; 0x36
    22b0:	9f a9       	ldd	r25, Y+55	; 0x37
    22b2:	00 97       	sbiw	r24, 0x00	; 0
    22b4:	29 f0       	breq	.+10     	; 0x22c0 <_ZN16CLaserControlApp6OnINT0Ev+0xa0>
						TCF0.CNT = laserTimerDutyCycle - 1;
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	80 93 20 0b 	sts	0x0B20, r24
    22bc:	90 93 21 0b 	sts	0x0B21, r25
						
					laserTimer.SetCOMPA(laserTimerDutyCycle);
    22c0:	6e a9       	ldd	r22, Y+54	; 0x36
    22c2:	7f a9       	ldd	r23, Y+55	; 0x37
    22c4:	8e eb       	ldi	r24, 0xBE	; 190
    22c6:	92 e2       	ldi	r25, 0x22	; 34
    22c8:	0e 94 2a 31 	call	0x6254	; 0x6254 <_ZN7CTimerF8SetCOMPAEj>
					laserTimer.SetCOMPB(laserTimerDutyCycle);
    22cc:	6e a9       	ldd	r22, Y+54	; 0x36
    22ce:	7f a9       	ldd	r23, Y+55	; 0x37
    22d0:	8e eb       	ldi	r24, 0xBE	; 190
    22d2:	92 e2       	ldi	r25, 0x22	; 34
    22d4:	0e 94 2f 31 	call	0x625e	; 0x625e <_ZN7CTimerF8SetCOMPBEj>
					laserTimer.Start(laserTimerPeriod);
    22d8:	6c a9       	ldd	r22, Y+52	; 0x34
    22da:	7d a9       	ldd	r23, Y+53	; 0x35
    22dc:	8e eb       	ldi	r24, 0xBE	; 190
    22de:	92 e2       	ldi	r25, 0x22	; 34
    22e0:	0e 94 f2 30 	call	0x61e4	; 0x61e4 <_ZN7CTimerF5StartEj>
					
					if (Profile == PROFILE_SINGLE)
    22e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e6:	81 30       	cpi	r24, 0x01	; 1
    22e8:	49 f4       	brne	.+18     	; 0x22fc <_ZN16CLaserControlApp6OnINT0Ev+0xdc>
    22ea:	2f ef       	ldi	r18, 0xFF	; 255
    22ec:	87 e8       	ldi	r24, 0x87	; 135
    22ee:	93 e1       	ldi	r25, 0x13	; 19
    22f0:	21 50       	subi	r18, 0x01	; 1
    22f2:	80 40       	sbci	r24, 0x00	; 0
    22f4:	90 40       	sbci	r25, 0x00	; 0
    22f6:	e1 f7       	brne	.-8      	; 0x22f0 <_ZN16CLaserControlApp6OnINT0Ev+0xd0>
    22f8:	00 c0       	rjmp	.+0      	; 0x22fa <_ZN16CLaserControlApp6OnINT0Ev+0xda>
    22fa:	00 00       	nop
						_delay_ms(200);
					
					PORTC.INTFLAGS &= ~0x01;
    22fc:	e0 e4       	ldi	r30, 0x40	; 64
    22fe:	f6 e0       	ldi	r31, 0x06	; 6
    2300:	84 85       	ldd	r24, Z+12	; 0x0c
    2302:	8e 7f       	andi	r24, 0xFE	; 254
    2304:	84 87       	std	Z+12, r24	; 0x0c
					
					isstarted = true;
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	80 93 bc 22 	sts	0x22BC, r24
    230c:	16 c0       	rjmp	.+44     	; 0x233a <_ZN16CLaserControlApp6OnINT0Ev+0x11a>
					state = APP_WORKLIGHT;
				}*/
			}
			else
			{
				isstarted = false;
    230e:	10 92 bc 22 	sts	0x22BC, r1
				
				laserTimer.Stop();
    2312:	8e eb       	ldi	r24, 0xBE	; 190
    2314:	92 e2       	ldi	r25, 0x22	; 34
    2316:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_ZN7CTimerF4StopEv>
				laserTimer.ChannelSet(TIMER_CHANNEL_A);
    231a:	60 e1       	ldi	r22, 0x10	; 16
    231c:	8e eb       	ldi	r24, 0xBE	; 190
    231e:	92 e2       	ldi	r25, 0x22	; 34
    2320:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
				laserTimer.ChannelSet(TIMER_CHANNEL_B);
    2324:	60 e2       	ldi	r22, 0x20	; 32
    2326:	8e eb       	ldi	r24, 0xBE	; 190
    2328:	92 e2       	ldi	r25, 0x22	; 34
    232a:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
    232e:	05 c0       	rjmp	.+10     	; 0x233a <_ZN16CLaserControlApp6OnINT0Ev+0x11a>
		{
			if ((PORTC.IN & 0x01) == 0)
			{				
				if ((!isstarted) && (m_wDeadTime == 0))
				{
					if (Profile == PROFILE_SINGLE)
    2330:	8d 85       	ldd	r24, Y+13	; 0x0d
    2332:	81 30       	cpi	r24, 0x01	; 1
    2334:	09 f0       	breq	.+2      	; 0x2338 <_ZN16CLaserControlApp6OnINT0Ev+0x118>
    2336:	bb cf       	rjmp	.-138    	; 0x22ae <_ZN16CLaserControlApp6OnINT0Ev+0x8e>
    2338:	8c cf       	rjmp	.-232    	; 0x2252 <_ZN16CLaserControlApp6OnINT0Ev+0x32>
		}
		break;
		default:
		break;
	}
}
    233a:	df 91       	pop	r29
    233c:	cf 91       	pop	r28
    233e:	08 95       	ret

00002340 <_ZN16CLaserControlApp12OnINT0StaticEPv>:
}

void CLaserControlApp::OnINT0Static(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnINT0();
    2340:	0e 94 10 11 	call	0x2220	; 0x2220 <_ZN16CLaserControlApp6OnINT0Ev>
    2344:	08 95       	ret

00002346 <_Z11ConvertDataPvS_jj>:
    2346:	cf 92       	push	r12
    2348:	df 92       	push	r13
    234a:	ef 92       	push	r14
    234c:	ff 92       	push	r15
    234e:	0f 93       	push	r16
    2350:	1f 93       	push	r17
    2352:	cf 93       	push	r28
    2354:	df 93       	push	r29
    2356:	7c 01       	movw	r14, r24
    2358:	8a 01       	movw	r16, r20
    235a:	41 15       	cp	r20, r1
    235c:	51 05       	cpc	r21, r1
    235e:	b1 f0       	breq	.+44     	; 0x238c <_Z11ConvertDataPvS_jj+0x46>
    2360:	6b 01       	movw	r12, r22
    2362:	c4 0e       	add	r12, r20
    2364:	d5 1e       	adc	r13, r21
    2366:	eb 01       	movw	r28, r22
    2368:	26 1b       	sub	r18, r22
    236a:	37 0b       	sbc	r19, r23
    236c:	c9 01       	movw	r24, r18
    236e:	8c 0f       	add	r24, r28
    2370:	9d 1f       	adc	r25, r29
    2372:	b8 01       	movw	r22, r16
    2374:	0e 94 ff 32 	call	0x65fe	; 0x65fe <__udivmodhi4>
    2378:	fc 01       	movw	r30, r24
    237a:	41 e0       	ldi	r20, 0x01	; 1
    237c:	e4 27       	eor	r30, r20
    237e:	ee 0d       	add	r30, r14
    2380:	ff 1d       	adc	r31, r15
    2382:	89 91       	ld	r24, Y+
    2384:	80 83       	st	Z, r24
    2386:	cc 15       	cp	r28, r12
    2388:	dd 05       	cpc	r29, r13
    238a:	81 f7       	brne	.-32     	; 0x236c <_Z11ConvertDataPvS_jj+0x26>
    238c:	df 91       	pop	r29
    238e:	cf 91       	pop	r28
    2390:	1f 91       	pop	r17
    2392:	0f 91       	pop	r16
    2394:	ff 90       	pop	r15
    2396:	ef 90       	pop	r14
    2398:	df 90       	pop	r13
    239a:	cf 90       	pop	r12
    239c:	08 95       	ret

0000239e <_Z3minjj>:
    239e:	68 17       	cp	r22, r24
    23a0:	79 07       	cpc	r23, r25
    23a2:	08 f4       	brcc	.+2      	; 0x23a6 <_Z3minjj+0x8>
    23a4:	cb 01       	movw	r24, r22
    23a6:	08 95       	ret

000023a8 <_Z3maxjj>:
    23a8:	86 17       	cp	r24, r22
    23aa:	97 07       	cpc	r25, r23
    23ac:	08 f4       	brcc	.+2      	; 0x23b0 <_Z3maxjj+0x8>
    23ae:	cb 01       	movw	r24, r22
    23b0:	08 95       	ret

000023b2 <_Z4swapj>:
    23b2:	98 27       	eor	r25, r24
    23b4:	89 27       	eor	r24, r25
    23b6:	98 27       	eor	r25, r24
    23b8:	08 95       	ret

000023ba <_Z6swap32m>:
    23ba:	9b 01       	movw	r18, r22
    23bc:	bc 01       	movw	r22, r24
    23be:	c9 01       	movw	r24, r18
    23c0:	08 95       	ret

000023c2 <_ZN4CSPIC1Ev>:
	SPIE.DATA = buffer[--rx_pos];
}

void CSPI::SendByte(uint8_t data)
{
	SPIE.DATA = data;
    23c2:	08 95       	ret

000023c4 <_ZN4CSPID1Ev>:
    23c4:	08 95       	ret

000023c6 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>:
    23c6:	ef 92       	push	r14
    23c8:	0f 93       	push	r16
    23ca:	1f 93       	push	r17
    23cc:	cf 93       	push	r28
    23ce:	df 93       	push	r29
    23d0:	ec 01       	movw	r28, r24
    23d2:	e0 e8       	ldi	r30, 0x80	; 128
    23d4:	f6 e0       	ldi	r31, 0x06	; 6
    23d6:	90 eb       	ldi	r25, 0xB0	; 176
    23d8:	91 83       	std	Z+1, r25	; 0x01
    23da:	80 ec       	ldi	r24, 0xC0	; 192
    23dc:	84 8b       	std	Z+20, r24	; 0x14
    23de:	85 8b       	std	Z+21, r24	; 0x15
    23e0:	87 8b       	std	Z+23, r24	; 0x17
    23e2:	95 83       	std	Z+5, r25	; 0x05
    23e4:	61 11       	cpse	r22, r1
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x26>
    23e8:	80 e4       	ldi	r24, 0x40	; 64
    23ea:	01 c0       	rjmp	.+2      	; 0x23ee <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x28>
    23ec:	80 e5       	ldi	r24, 0x50	; 80
    23ee:	01 11       	cpse	r16, r1
    23f0:	02 c0       	rjmp	.+4      	; 0x23f6 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x30>
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	01 c0       	rjmp	.+2      	; 0x23f8 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x32>
    23f6:	30 e8       	ldi	r19, 0x80	; 128
    23f8:	41 11       	cpse	r20, r1
    23fa:	02 c0       	rjmp	.+4      	; 0x2400 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x3a>
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	01 c0       	rjmp	.+2      	; 0x2402 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x3c>
    2400:	90 e2       	ldi	r25, 0x20	; 32
    2402:	22 0f       	add	r18, r18
    2404:	22 0f       	add	r18, r18
    2406:	e2 2a       	or	r14, r18
    2408:	e8 2a       	or	r14, r24
    240a:	e3 2a       	or	r14, r19
    240c:	e9 2a       	or	r14, r25
    240e:	00 ec       	ldi	r16, 0xC0	; 192
    2410:	1a e0       	ldi	r17, 0x0A	; 10
    2412:	f8 01       	movw	r30, r16
    2414:	e0 82       	st	Z, r14
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	91 e0       	ldi	r25, 0x01	; 1
    241a:	0e 94 8a 33 	call	0x6714	; 0x6714 <malloc>
    241e:	88 83       	st	Y, r24
    2420:	99 83       	std	Y+1, r25	; 0x01
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	f8 01       	movw	r30, r16
    2426:	81 83       	std	Z+1, r24	; 0x01
    2428:	8c e5       	ldi	r24, 0x5C	; 92
    242a:	92 e1       	ldi	r25, 0x12	; 18
    242c:	80 93 36 23 	sts	0x2336, r24
    2430:	90 93 37 23 	sts	0x2337, r25
    2434:	c0 93 2c 24 	sts	0x242C, r28
    2438:	d0 93 2d 24 	sts	0x242D, r29
    243c:	df 91       	pop	r29
    243e:	cf 91       	pop	r28
    2440:	1f 91       	pop	r17
    2442:	0f 91       	pop	r16
    2444:	ef 90       	pop	r14
    2446:	08 95       	ret

00002448 <_ZN4CSPI4SendEPhj>:
    2448:	cf 93       	push	r28
    244a:	df 93       	push	r29
    244c:	ec 01       	movw	r28, r24
    244e:	4a 83       	std	Y+2, r20	; 0x02
    2450:	5b 83       	std	Y+3, r21	; 0x03
    2452:	4c 83       	std	Y+4, r20	; 0x04
    2454:	5d 83       	std	Y+5, r21	; 0x05
    2456:	88 81       	ld	r24, Y
    2458:	99 81       	ldd	r25, Y+1	; 0x01
    245a:	0e 94 b7 34 	call	0x696e	; 0x696e <memcpy>
    245e:	80 e1       	ldi	r24, 0x10	; 16
    2460:	80 93 86 06 	sts	0x0686, r24
    2464:	88 81       	ld	r24, Y
    2466:	99 81       	ldd	r25, Y+1	; 0x01
    2468:	4a 81       	ldd	r20, Y+2	; 0x02
    246a:	5b 81       	ldd	r21, Y+3	; 0x03
    246c:	9a 01       	movw	r18, r20
    246e:	21 50       	subi	r18, 0x01	; 1
    2470:	31 09       	sbc	r19, r1
    2472:	2a 83       	std	Y+2, r18	; 0x02
    2474:	3b 83       	std	Y+3, r19	; 0x03
    2476:	fc 01       	movw	r30, r24
    2478:	e2 0f       	add	r30, r18
    247a:	f3 1f       	adc	r31, r19
    247c:	80 81       	ld	r24, Z
    247e:	80 93 c3 0a 	sts	0x0AC3, r24
    2482:	df 91       	pop	r29
    2484:	cf 91       	pop	r28
    2486:	08 95       	ret

00002488 <_ZN4CSPI10OnTransmitEv>:
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
}

void CSPI::OnTransmit()
{
    2488:	fc 01       	movw	r30, r24
	if (rx_pos != 0)
    248a:	82 81       	ldd	r24, Z+2	; 0x02
    248c:	93 81       	ldd	r25, Z+3	; 0x03
    248e:	89 2b       	or	r24, r25
    2490:	79 f0       	breq	.+30     	; 0x24b0 <_ZN4CSPI10OnTransmitEv+0x28>
		SPIE.DATA = buffer[--rx_pos];
    2492:	40 81       	ld	r20, Z
    2494:	51 81       	ldd	r21, Z+1	; 0x01
    2496:	22 81       	ldd	r18, Z+2	; 0x02
    2498:	33 81       	ldd	r19, Z+3	; 0x03
    249a:	c9 01       	movw	r24, r18
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	82 83       	std	Z+2, r24	; 0x02
    24a0:	93 83       	std	Z+3, r25	; 0x03
    24a2:	fa 01       	movw	r30, r20
    24a4:	e8 0f       	add	r30, r24
    24a6:	f9 1f       	adc	r31, r25
    24a8:	80 81       	ld	r24, Z
    24aa:	80 93 c3 0a 	sts	0x0AC3, r24
    24ae:	08 95       	ret
	else
		PORTE.OUTSET = PIN4_bm;
    24b0:	80 e1       	ldi	r24, 0x10	; 16
    24b2:	80 93 85 06 	sts	0x0685, r24
    24b6:	08 95       	ret

000024b8 <_ZN4CSPI16StaticOnTransmitEPv>:
}

void CSPI::StaticOnTransmit(void* sender)
{
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
    24b8:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4CSPI10OnTransmitEv>
    24bc:	08 95       	ret

000024be <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
    24be:	2c e8       	ldi	r18, 0x8C	; 140
    24c0:	31 e2       	ldi	r19, 0x21	; 33
    24c2:	fc 01       	movw	r30, r24
    24c4:	20 83       	st	Z, r18
    24c6:	31 83       	std	Z+1, r19	; 0x01
    24c8:	08 95       	ret

000024ca <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
    24ca:	08 95       	ret

000024cc <_ZN7CTimer1C1Ev>:


#include "CTimer1.h"

// default constructor
CTimer1::CTimer1()
    24cc:	20 eb       	ldi	r18, 0xB0	; 176
    24ce:	31 e2       	ldi	r19, 0x21	; 33
    24d0:	fc 01       	movw	r30, r24
    24d2:	20 83       	st	Z, r18
    24d4:	31 83       	std	Z+1, r19	; 0x01
    24d6:	08 95       	ret

000024d8 <_ZN7CTimer1D1Ev>:
{
} //CTimer1

// default destructor
CTimer1::~CTimer1()
    24d8:	08 95       	ret

000024da <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
    24da:	2e ec       	ldi	r18, 0xCE	; 206
    24dc:	31 e2       	ldi	r19, 0x21	; 33
    24de:	fc 01       	movw	r30, r24
    24e0:	20 83       	st	Z, r18
    24e2:	31 83       	std	Z+1, r19	; 0x01
    24e4:	08 95       	ret

000024e6 <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
    24e6:	08 95       	ret

000024e8 <__vector_1>:
		if (InterruptFuncTable[vector_id##_num] != 0)										\
		(*(InterruptFuncTable[vector_id##_num]))(InterruptSenderTable[vector_id##_num]);	\
	}

/* OSC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(OSC_OSCF_vect)      /* External Oscillator Failure Interrupt (NMI) */
    24e8:	1f 92       	push	r1
    24ea:	0f 92       	push	r0
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	0f 92       	push	r0
    24f0:	11 24       	eor	r1, r1
    24f2:	0b b6       	in	r0, 0x3b	; 59
    24f4:	0f 92       	push	r0
    24f6:	2f 93       	push	r18
    24f8:	3f 93       	push	r19
    24fa:	4f 93       	push	r20
    24fc:	5f 93       	push	r21
    24fe:	6f 93       	push	r22
    2500:	7f 93       	push	r23
    2502:	8f 93       	push	r24
    2504:	9f 93       	push	r25
    2506:	af 93       	push	r26
    2508:	bf 93       	push	r27
    250a:	ef 93       	push	r30
    250c:	ff 93       	push	r31
    250e:	e0 91 c6 22 	lds	r30, 0x22C6
    2512:	f0 91 c7 22 	lds	r31, 0x22C7
    2516:	30 97       	sbiw	r30, 0x00	; 0
    2518:	29 f0       	breq	.+10     	; 0x2524 <__vector_1+0x3c>
    251a:	80 91 bc 23 	lds	r24, 0x23BC
    251e:	90 91 bd 23 	lds	r25, 0x23BD
    2522:	19 95       	eicall
    2524:	ff 91       	pop	r31
    2526:	ef 91       	pop	r30
    2528:	bf 91       	pop	r27
    252a:	af 91       	pop	r26
    252c:	9f 91       	pop	r25
    252e:	8f 91       	pop	r24
    2530:	7f 91       	pop	r23
    2532:	6f 91       	pop	r22
    2534:	5f 91       	pop	r21
    2536:	4f 91       	pop	r20
    2538:	3f 91       	pop	r19
    253a:	2f 91       	pop	r18
    253c:	0f 90       	pop	r0
    253e:	0b be       	out	0x3b, r0	; 59
    2540:	0f 90       	pop	r0
    2542:	0f be       	out	0x3f, r0	; 63
    2544:	0f 90       	pop	r0
    2546:	1f 90       	pop	r1
    2548:	18 95       	reti

0000254a <__vector_2>:

/* PORTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT0_vect)      /* External Interrupt 0 */
    254a:	1f 92       	push	r1
    254c:	0f 92       	push	r0
    254e:	0f b6       	in	r0, 0x3f	; 63
    2550:	0f 92       	push	r0
    2552:	11 24       	eor	r1, r1
    2554:	0b b6       	in	r0, 0x3b	; 59
    2556:	0f 92       	push	r0
    2558:	2f 93       	push	r18
    255a:	3f 93       	push	r19
    255c:	4f 93       	push	r20
    255e:	5f 93       	push	r21
    2560:	6f 93       	push	r22
    2562:	7f 93       	push	r23
    2564:	8f 93       	push	r24
    2566:	9f 93       	push	r25
    2568:	af 93       	push	r26
    256a:	bf 93       	push	r27
    256c:	ef 93       	push	r30
    256e:	ff 93       	push	r31
    2570:	e0 91 c8 22 	lds	r30, 0x22C8
    2574:	f0 91 c9 22 	lds	r31, 0x22C9
    2578:	30 97       	sbiw	r30, 0x00	; 0
    257a:	29 f0       	breq	.+10     	; 0x2586 <__vector_2+0x3c>
    257c:	80 91 be 23 	lds	r24, 0x23BE
    2580:	90 91 bf 23 	lds	r25, 0x23BF
    2584:	19 95       	eicall
    2586:	ff 91       	pop	r31
    2588:	ef 91       	pop	r30
    258a:	bf 91       	pop	r27
    258c:	af 91       	pop	r26
    258e:	9f 91       	pop	r25
    2590:	8f 91       	pop	r24
    2592:	7f 91       	pop	r23
    2594:	6f 91       	pop	r22
    2596:	5f 91       	pop	r21
    2598:	4f 91       	pop	r20
    259a:	3f 91       	pop	r19
    259c:	2f 91       	pop	r18
    259e:	0f 90       	pop	r0
    25a0:	0b be       	out	0x3b, r0	; 59
    25a2:	0f 90       	pop	r0
    25a4:	0f be       	out	0x3f, r0	; 63
    25a6:	0f 90       	pop	r0
    25a8:	1f 90       	pop	r1
    25aa:	18 95       	reti

000025ac <__vector_3>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT1_vect)      /* External Interrupt 1 */
    25ac:	1f 92       	push	r1
    25ae:	0f 92       	push	r0
    25b0:	0f b6       	in	r0, 0x3f	; 63
    25b2:	0f 92       	push	r0
    25b4:	11 24       	eor	r1, r1
    25b6:	0b b6       	in	r0, 0x3b	; 59
    25b8:	0f 92       	push	r0
    25ba:	2f 93       	push	r18
    25bc:	3f 93       	push	r19
    25be:	4f 93       	push	r20
    25c0:	5f 93       	push	r21
    25c2:	6f 93       	push	r22
    25c4:	7f 93       	push	r23
    25c6:	8f 93       	push	r24
    25c8:	9f 93       	push	r25
    25ca:	af 93       	push	r26
    25cc:	bf 93       	push	r27
    25ce:	ef 93       	push	r30
    25d0:	ff 93       	push	r31
    25d2:	e0 91 ca 22 	lds	r30, 0x22CA
    25d6:	f0 91 cb 22 	lds	r31, 0x22CB
    25da:	30 97       	sbiw	r30, 0x00	; 0
    25dc:	29 f0       	breq	.+10     	; 0x25e8 <__vector_3+0x3c>
    25de:	80 91 c0 23 	lds	r24, 0x23C0
    25e2:	90 91 c1 23 	lds	r25, 0x23C1
    25e6:	19 95       	eicall
    25e8:	ff 91       	pop	r31
    25ea:	ef 91       	pop	r30
    25ec:	bf 91       	pop	r27
    25ee:	af 91       	pop	r26
    25f0:	9f 91       	pop	r25
    25f2:	8f 91       	pop	r24
    25f4:	7f 91       	pop	r23
    25f6:	6f 91       	pop	r22
    25f8:	5f 91       	pop	r21
    25fa:	4f 91       	pop	r20
    25fc:	3f 91       	pop	r19
    25fe:	2f 91       	pop	r18
    2600:	0f 90       	pop	r0
    2602:	0b be       	out	0x3b, r0	; 59
    2604:	0f 90       	pop	r0
    2606:	0f be       	out	0x3f, r0	; 63
    2608:	0f 90       	pop	r0
    260a:	1f 90       	pop	r1
    260c:	18 95       	reti

0000260e <__vector_4>:

/* PORTR interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT0_vect)      /* External Interrupt 0 */
    260e:	1f 92       	push	r1
    2610:	0f 92       	push	r0
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	0f 92       	push	r0
    2616:	11 24       	eor	r1, r1
    2618:	0b b6       	in	r0, 0x3b	; 59
    261a:	0f 92       	push	r0
    261c:	2f 93       	push	r18
    261e:	3f 93       	push	r19
    2620:	4f 93       	push	r20
    2622:	5f 93       	push	r21
    2624:	6f 93       	push	r22
    2626:	7f 93       	push	r23
    2628:	8f 93       	push	r24
    262a:	9f 93       	push	r25
    262c:	af 93       	push	r26
    262e:	bf 93       	push	r27
    2630:	ef 93       	push	r30
    2632:	ff 93       	push	r31
    2634:	e0 91 cc 22 	lds	r30, 0x22CC
    2638:	f0 91 cd 22 	lds	r31, 0x22CD
    263c:	30 97       	sbiw	r30, 0x00	; 0
    263e:	29 f0       	breq	.+10     	; 0x264a <__vector_4+0x3c>
    2640:	80 91 c2 23 	lds	r24, 0x23C2
    2644:	90 91 c3 23 	lds	r25, 0x23C3
    2648:	19 95       	eicall
    264a:	ff 91       	pop	r31
    264c:	ef 91       	pop	r30
    264e:	bf 91       	pop	r27
    2650:	af 91       	pop	r26
    2652:	9f 91       	pop	r25
    2654:	8f 91       	pop	r24
    2656:	7f 91       	pop	r23
    2658:	6f 91       	pop	r22
    265a:	5f 91       	pop	r21
    265c:	4f 91       	pop	r20
    265e:	3f 91       	pop	r19
    2660:	2f 91       	pop	r18
    2662:	0f 90       	pop	r0
    2664:	0b be       	out	0x3b, r0	; 59
    2666:	0f 90       	pop	r0
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	0f 90       	pop	r0
    266c:	1f 90       	pop	r1
    266e:	18 95       	reti

00002670 <__vector_5>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT1_vect)      /* External Interrupt 1 */
    2670:	1f 92       	push	r1
    2672:	0f 92       	push	r0
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	0f 92       	push	r0
    2678:	11 24       	eor	r1, r1
    267a:	0b b6       	in	r0, 0x3b	; 59
    267c:	0f 92       	push	r0
    267e:	2f 93       	push	r18
    2680:	3f 93       	push	r19
    2682:	4f 93       	push	r20
    2684:	5f 93       	push	r21
    2686:	6f 93       	push	r22
    2688:	7f 93       	push	r23
    268a:	8f 93       	push	r24
    268c:	9f 93       	push	r25
    268e:	af 93       	push	r26
    2690:	bf 93       	push	r27
    2692:	ef 93       	push	r30
    2694:	ff 93       	push	r31
    2696:	e0 91 ce 22 	lds	r30, 0x22CE
    269a:	f0 91 cf 22 	lds	r31, 0x22CF
    269e:	30 97       	sbiw	r30, 0x00	; 0
    26a0:	29 f0       	breq	.+10     	; 0x26ac <__vector_5+0x3c>
    26a2:	80 91 c4 23 	lds	r24, 0x23C4
    26a6:	90 91 c5 23 	lds	r25, 0x23C5
    26aa:	19 95       	eicall
    26ac:	ff 91       	pop	r31
    26ae:	ef 91       	pop	r30
    26b0:	bf 91       	pop	r27
    26b2:	af 91       	pop	r26
    26b4:	9f 91       	pop	r25
    26b6:	8f 91       	pop	r24
    26b8:	7f 91       	pop	r23
    26ba:	6f 91       	pop	r22
    26bc:	5f 91       	pop	r21
    26be:	4f 91       	pop	r20
    26c0:	3f 91       	pop	r19
    26c2:	2f 91       	pop	r18
    26c4:	0f 90       	pop	r0
    26c6:	0b be       	out	0x3b, r0	; 59
    26c8:	0f 90       	pop	r0
    26ca:	0f be       	out	0x3f, r0	; 63
    26cc:	0f 90       	pop	r0
    26ce:	1f 90       	pop	r1
    26d0:	18 95       	reti

000026d2 <__vector_6>:

/* DMA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH0_vect)      /* Channel 0 Interrupt */
    26d2:	1f 92       	push	r1
    26d4:	0f 92       	push	r0
    26d6:	0f b6       	in	r0, 0x3f	; 63
    26d8:	0f 92       	push	r0
    26da:	11 24       	eor	r1, r1
    26dc:	0b b6       	in	r0, 0x3b	; 59
    26de:	0f 92       	push	r0
    26e0:	2f 93       	push	r18
    26e2:	3f 93       	push	r19
    26e4:	4f 93       	push	r20
    26e6:	5f 93       	push	r21
    26e8:	6f 93       	push	r22
    26ea:	7f 93       	push	r23
    26ec:	8f 93       	push	r24
    26ee:	9f 93       	push	r25
    26f0:	af 93       	push	r26
    26f2:	bf 93       	push	r27
    26f4:	ef 93       	push	r30
    26f6:	ff 93       	push	r31
    26f8:	e0 91 d0 22 	lds	r30, 0x22D0
    26fc:	f0 91 d1 22 	lds	r31, 0x22D1
    2700:	30 97       	sbiw	r30, 0x00	; 0
    2702:	29 f0       	breq	.+10     	; 0x270e <__vector_6+0x3c>
    2704:	80 91 c6 23 	lds	r24, 0x23C6
    2708:	90 91 c7 23 	lds	r25, 0x23C7
    270c:	19 95       	eicall
    270e:	ff 91       	pop	r31
    2710:	ef 91       	pop	r30
    2712:	bf 91       	pop	r27
    2714:	af 91       	pop	r26
    2716:	9f 91       	pop	r25
    2718:	8f 91       	pop	r24
    271a:	7f 91       	pop	r23
    271c:	6f 91       	pop	r22
    271e:	5f 91       	pop	r21
    2720:	4f 91       	pop	r20
    2722:	3f 91       	pop	r19
    2724:	2f 91       	pop	r18
    2726:	0f 90       	pop	r0
    2728:	0b be       	out	0x3b, r0	; 59
    272a:	0f 90       	pop	r0
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	0f 90       	pop	r0
    2730:	1f 90       	pop	r1
    2732:	18 95       	reti

00002734 <__vector_7>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH1_vect)      /* Channel 1 Interrupt */
    2734:	1f 92       	push	r1
    2736:	0f 92       	push	r0
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	0f 92       	push	r0
    273c:	11 24       	eor	r1, r1
    273e:	0b b6       	in	r0, 0x3b	; 59
    2740:	0f 92       	push	r0
    2742:	2f 93       	push	r18
    2744:	3f 93       	push	r19
    2746:	4f 93       	push	r20
    2748:	5f 93       	push	r21
    274a:	6f 93       	push	r22
    274c:	7f 93       	push	r23
    274e:	8f 93       	push	r24
    2750:	9f 93       	push	r25
    2752:	af 93       	push	r26
    2754:	bf 93       	push	r27
    2756:	ef 93       	push	r30
    2758:	ff 93       	push	r31
    275a:	e0 91 d2 22 	lds	r30, 0x22D2
    275e:	f0 91 d3 22 	lds	r31, 0x22D3
    2762:	30 97       	sbiw	r30, 0x00	; 0
    2764:	29 f0       	breq	.+10     	; 0x2770 <__vector_7+0x3c>
    2766:	80 91 c8 23 	lds	r24, 0x23C8
    276a:	90 91 c9 23 	lds	r25, 0x23C9
    276e:	19 95       	eicall
    2770:	ff 91       	pop	r31
    2772:	ef 91       	pop	r30
    2774:	bf 91       	pop	r27
    2776:	af 91       	pop	r26
    2778:	9f 91       	pop	r25
    277a:	8f 91       	pop	r24
    277c:	7f 91       	pop	r23
    277e:	6f 91       	pop	r22
    2780:	5f 91       	pop	r21
    2782:	4f 91       	pop	r20
    2784:	3f 91       	pop	r19
    2786:	2f 91       	pop	r18
    2788:	0f 90       	pop	r0
    278a:	0b be       	out	0x3b, r0	; 59
    278c:	0f 90       	pop	r0
    278e:	0f be       	out	0x3f, r0	; 63
    2790:	0f 90       	pop	r0
    2792:	1f 90       	pop	r1
    2794:	18 95       	reti

00002796 <__vector_8>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH2_vect)      /* Channel 2 Interrupt */
    2796:	1f 92       	push	r1
    2798:	0f 92       	push	r0
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	0f 92       	push	r0
    279e:	11 24       	eor	r1, r1
    27a0:	0b b6       	in	r0, 0x3b	; 59
    27a2:	0f 92       	push	r0
    27a4:	2f 93       	push	r18
    27a6:	3f 93       	push	r19
    27a8:	4f 93       	push	r20
    27aa:	5f 93       	push	r21
    27ac:	6f 93       	push	r22
    27ae:	7f 93       	push	r23
    27b0:	8f 93       	push	r24
    27b2:	9f 93       	push	r25
    27b4:	af 93       	push	r26
    27b6:	bf 93       	push	r27
    27b8:	ef 93       	push	r30
    27ba:	ff 93       	push	r31
    27bc:	e0 91 d4 22 	lds	r30, 0x22D4
    27c0:	f0 91 d5 22 	lds	r31, 0x22D5
    27c4:	30 97       	sbiw	r30, 0x00	; 0
    27c6:	29 f0       	breq	.+10     	; 0x27d2 <__vector_8+0x3c>
    27c8:	80 91 ca 23 	lds	r24, 0x23CA
    27cc:	90 91 cb 23 	lds	r25, 0x23CB
    27d0:	19 95       	eicall
    27d2:	ff 91       	pop	r31
    27d4:	ef 91       	pop	r30
    27d6:	bf 91       	pop	r27
    27d8:	af 91       	pop	r26
    27da:	9f 91       	pop	r25
    27dc:	8f 91       	pop	r24
    27de:	7f 91       	pop	r23
    27e0:	6f 91       	pop	r22
    27e2:	5f 91       	pop	r21
    27e4:	4f 91       	pop	r20
    27e6:	3f 91       	pop	r19
    27e8:	2f 91       	pop	r18
    27ea:	0f 90       	pop	r0
    27ec:	0b be       	out	0x3b, r0	; 59
    27ee:	0f 90       	pop	r0
    27f0:	0f be       	out	0x3f, r0	; 63
    27f2:	0f 90       	pop	r0
    27f4:	1f 90       	pop	r1
    27f6:	18 95       	reti

000027f8 <__vector_9>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH3_vect)      /* Channel 3 Interrupt */
    27f8:	1f 92       	push	r1
    27fa:	0f 92       	push	r0
    27fc:	0f b6       	in	r0, 0x3f	; 63
    27fe:	0f 92       	push	r0
    2800:	11 24       	eor	r1, r1
    2802:	0b b6       	in	r0, 0x3b	; 59
    2804:	0f 92       	push	r0
    2806:	2f 93       	push	r18
    2808:	3f 93       	push	r19
    280a:	4f 93       	push	r20
    280c:	5f 93       	push	r21
    280e:	6f 93       	push	r22
    2810:	7f 93       	push	r23
    2812:	8f 93       	push	r24
    2814:	9f 93       	push	r25
    2816:	af 93       	push	r26
    2818:	bf 93       	push	r27
    281a:	ef 93       	push	r30
    281c:	ff 93       	push	r31
    281e:	e0 91 d6 22 	lds	r30, 0x22D6
    2822:	f0 91 d7 22 	lds	r31, 0x22D7
    2826:	30 97       	sbiw	r30, 0x00	; 0
    2828:	29 f0       	breq	.+10     	; 0x2834 <__vector_9+0x3c>
    282a:	80 91 cc 23 	lds	r24, 0x23CC
    282e:	90 91 cd 23 	lds	r25, 0x23CD
    2832:	19 95       	eicall
    2834:	ff 91       	pop	r31
    2836:	ef 91       	pop	r30
    2838:	bf 91       	pop	r27
    283a:	af 91       	pop	r26
    283c:	9f 91       	pop	r25
    283e:	8f 91       	pop	r24
    2840:	7f 91       	pop	r23
    2842:	6f 91       	pop	r22
    2844:	5f 91       	pop	r21
    2846:	4f 91       	pop	r20
    2848:	3f 91       	pop	r19
    284a:	2f 91       	pop	r18
    284c:	0f 90       	pop	r0
    284e:	0b be       	out	0x3b, r0	; 59
    2850:	0f 90       	pop	r0
    2852:	0f be       	out	0x3f, r0	; 63
    2854:	0f 90       	pop	r0
    2856:	1f 90       	pop	r1
    2858:	18 95       	reti

0000285a <__vector_10>:

/* RTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_OVF_vect)      /* Overflow Interrupt */
    285a:	1f 92       	push	r1
    285c:	0f 92       	push	r0
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	0f 92       	push	r0
    2862:	11 24       	eor	r1, r1
    2864:	0b b6       	in	r0, 0x3b	; 59
    2866:	0f 92       	push	r0
    2868:	2f 93       	push	r18
    286a:	3f 93       	push	r19
    286c:	4f 93       	push	r20
    286e:	5f 93       	push	r21
    2870:	6f 93       	push	r22
    2872:	7f 93       	push	r23
    2874:	8f 93       	push	r24
    2876:	9f 93       	push	r25
    2878:	af 93       	push	r26
    287a:	bf 93       	push	r27
    287c:	ef 93       	push	r30
    287e:	ff 93       	push	r31
    2880:	e0 91 d8 22 	lds	r30, 0x22D8
    2884:	f0 91 d9 22 	lds	r31, 0x22D9
    2888:	30 97       	sbiw	r30, 0x00	; 0
    288a:	29 f0       	breq	.+10     	; 0x2896 <__vector_10+0x3c>
    288c:	80 91 ce 23 	lds	r24, 0x23CE
    2890:	90 91 cf 23 	lds	r25, 0x23CF
    2894:	19 95       	eicall
    2896:	ff 91       	pop	r31
    2898:	ef 91       	pop	r30
    289a:	bf 91       	pop	r27
    289c:	af 91       	pop	r26
    289e:	9f 91       	pop	r25
    28a0:	8f 91       	pop	r24
    28a2:	7f 91       	pop	r23
    28a4:	6f 91       	pop	r22
    28a6:	5f 91       	pop	r21
    28a8:	4f 91       	pop	r20
    28aa:	3f 91       	pop	r19
    28ac:	2f 91       	pop	r18
    28ae:	0f 90       	pop	r0
    28b0:	0b be       	out	0x3b, r0	; 59
    28b2:	0f 90       	pop	r0
    28b4:	0f be       	out	0x3f, r0	; 63
    28b6:	0f 90       	pop	r0
    28b8:	1f 90       	pop	r1
    28ba:	18 95       	reti

000028bc <__vector_11>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_COMP_vect)      /* Compare Interrupt */
    28bc:	1f 92       	push	r1
    28be:	0f 92       	push	r0
    28c0:	0f b6       	in	r0, 0x3f	; 63
    28c2:	0f 92       	push	r0
    28c4:	11 24       	eor	r1, r1
    28c6:	0b b6       	in	r0, 0x3b	; 59
    28c8:	0f 92       	push	r0
    28ca:	2f 93       	push	r18
    28cc:	3f 93       	push	r19
    28ce:	4f 93       	push	r20
    28d0:	5f 93       	push	r21
    28d2:	6f 93       	push	r22
    28d4:	7f 93       	push	r23
    28d6:	8f 93       	push	r24
    28d8:	9f 93       	push	r25
    28da:	af 93       	push	r26
    28dc:	bf 93       	push	r27
    28de:	ef 93       	push	r30
    28e0:	ff 93       	push	r31
    28e2:	e0 91 da 22 	lds	r30, 0x22DA
    28e6:	f0 91 db 22 	lds	r31, 0x22DB
    28ea:	30 97       	sbiw	r30, 0x00	; 0
    28ec:	29 f0       	breq	.+10     	; 0x28f8 <__vector_11+0x3c>
    28ee:	80 91 d0 23 	lds	r24, 0x23D0
    28f2:	90 91 d1 23 	lds	r25, 0x23D1
    28f6:	19 95       	eicall
    28f8:	ff 91       	pop	r31
    28fa:	ef 91       	pop	r30
    28fc:	bf 91       	pop	r27
    28fe:	af 91       	pop	r26
    2900:	9f 91       	pop	r25
    2902:	8f 91       	pop	r24
    2904:	7f 91       	pop	r23
    2906:	6f 91       	pop	r22
    2908:	5f 91       	pop	r21
    290a:	4f 91       	pop	r20
    290c:	3f 91       	pop	r19
    290e:	2f 91       	pop	r18
    2910:	0f 90       	pop	r0
    2912:	0b be       	out	0x3b, r0	; 59
    2914:	0f 90       	pop	r0
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	0f 90       	pop	r0
    291a:	1f 90       	pop	r1
    291c:	18 95       	reti

0000291e <__vector_12>:

/* TWIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIS_vect)      /* TWI Slave Interrupt */
    291e:	1f 92       	push	r1
    2920:	0f 92       	push	r0
    2922:	0f b6       	in	r0, 0x3f	; 63
    2924:	0f 92       	push	r0
    2926:	11 24       	eor	r1, r1
    2928:	0b b6       	in	r0, 0x3b	; 59
    292a:	0f 92       	push	r0
    292c:	2f 93       	push	r18
    292e:	3f 93       	push	r19
    2930:	4f 93       	push	r20
    2932:	5f 93       	push	r21
    2934:	6f 93       	push	r22
    2936:	7f 93       	push	r23
    2938:	8f 93       	push	r24
    293a:	9f 93       	push	r25
    293c:	af 93       	push	r26
    293e:	bf 93       	push	r27
    2940:	ef 93       	push	r30
    2942:	ff 93       	push	r31
    2944:	e0 91 dc 22 	lds	r30, 0x22DC
    2948:	f0 91 dd 22 	lds	r31, 0x22DD
    294c:	30 97       	sbiw	r30, 0x00	; 0
    294e:	29 f0       	breq	.+10     	; 0x295a <__vector_12+0x3c>
    2950:	80 91 d2 23 	lds	r24, 0x23D2
    2954:	90 91 d3 23 	lds	r25, 0x23D3
    2958:	19 95       	eicall
    295a:	ff 91       	pop	r31
    295c:	ef 91       	pop	r30
    295e:	bf 91       	pop	r27
    2960:	af 91       	pop	r26
    2962:	9f 91       	pop	r25
    2964:	8f 91       	pop	r24
    2966:	7f 91       	pop	r23
    2968:	6f 91       	pop	r22
    296a:	5f 91       	pop	r21
    296c:	4f 91       	pop	r20
    296e:	3f 91       	pop	r19
    2970:	2f 91       	pop	r18
    2972:	0f 90       	pop	r0
    2974:	0b be       	out	0x3b, r0	; 59
    2976:	0f 90       	pop	r0
    2978:	0f be       	out	0x3f, r0	; 63
    297a:	0f 90       	pop	r0
    297c:	1f 90       	pop	r1
    297e:	18 95       	reti

00002980 <__vector_13>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIM_vect)      /* TWI Master Interrupt */
    2980:	1f 92       	push	r1
    2982:	0f 92       	push	r0
    2984:	0f b6       	in	r0, 0x3f	; 63
    2986:	0f 92       	push	r0
    2988:	11 24       	eor	r1, r1
    298a:	0b b6       	in	r0, 0x3b	; 59
    298c:	0f 92       	push	r0
    298e:	2f 93       	push	r18
    2990:	3f 93       	push	r19
    2992:	4f 93       	push	r20
    2994:	5f 93       	push	r21
    2996:	6f 93       	push	r22
    2998:	7f 93       	push	r23
    299a:	8f 93       	push	r24
    299c:	9f 93       	push	r25
    299e:	af 93       	push	r26
    29a0:	bf 93       	push	r27
    29a2:	ef 93       	push	r30
    29a4:	ff 93       	push	r31
    29a6:	e0 91 de 22 	lds	r30, 0x22DE
    29aa:	f0 91 df 22 	lds	r31, 0x22DF
    29ae:	30 97       	sbiw	r30, 0x00	; 0
    29b0:	29 f0       	breq	.+10     	; 0x29bc <__vector_13+0x3c>
    29b2:	80 91 d4 23 	lds	r24, 0x23D4
    29b6:	90 91 d5 23 	lds	r25, 0x23D5
    29ba:	19 95       	eicall
    29bc:	ff 91       	pop	r31
    29be:	ef 91       	pop	r30
    29c0:	bf 91       	pop	r27
    29c2:	af 91       	pop	r26
    29c4:	9f 91       	pop	r25
    29c6:	8f 91       	pop	r24
    29c8:	7f 91       	pop	r23
    29ca:	6f 91       	pop	r22
    29cc:	5f 91       	pop	r21
    29ce:	4f 91       	pop	r20
    29d0:	3f 91       	pop	r19
    29d2:	2f 91       	pop	r18
    29d4:	0f 90       	pop	r0
    29d6:	0b be       	out	0x3b, r0	; 59
    29d8:	0f 90       	pop	r0
    29da:	0f be       	out	0x3f, r0	; 63
    29dc:	0f 90       	pop	r0
    29de:	1f 90       	pop	r1
    29e0:	18 95       	reti

000029e2 <__vector_14>:

/* TCC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_OVF_vect)      /* Overflow Interrupt */
    29e2:	1f 92       	push	r1
    29e4:	0f 92       	push	r0
    29e6:	0f b6       	in	r0, 0x3f	; 63
    29e8:	0f 92       	push	r0
    29ea:	11 24       	eor	r1, r1
    29ec:	0b b6       	in	r0, 0x3b	; 59
    29ee:	0f 92       	push	r0
    29f0:	2f 93       	push	r18
    29f2:	3f 93       	push	r19
    29f4:	4f 93       	push	r20
    29f6:	5f 93       	push	r21
    29f8:	6f 93       	push	r22
    29fa:	7f 93       	push	r23
    29fc:	8f 93       	push	r24
    29fe:	9f 93       	push	r25
    2a00:	af 93       	push	r26
    2a02:	bf 93       	push	r27
    2a04:	ef 93       	push	r30
    2a06:	ff 93       	push	r31
    2a08:	e0 91 e0 22 	lds	r30, 0x22E0
    2a0c:	f0 91 e1 22 	lds	r31, 0x22E1
    2a10:	30 97       	sbiw	r30, 0x00	; 0
    2a12:	29 f0       	breq	.+10     	; 0x2a1e <__vector_14+0x3c>
    2a14:	80 91 d6 23 	lds	r24, 0x23D6
    2a18:	90 91 d7 23 	lds	r25, 0x23D7
    2a1c:	19 95       	eicall
    2a1e:	ff 91       	pop	r31
    2a20:	ef 91       	pop	r30
    2a22:	bf 91       	pop	r27
    2a24:	af 91       	pop	r26
    2a26:	9f 91       	pop	r25
    2a28:	8f 91       	pop	r24
    2a2a:	7f 91       	pop	r23
    2a2c:	6f 91       	pop	r22
    2a2e:	5f 91       	pop	r21
    2a30:	4f 91       	pop	r20
    2a32:	3f 91       	pop	r19
    2a34:	2f 91       	pop	r18
    2a36:	0f 90       	pop	r0
    2a38:	0b be       	out	0x3b, r0	; 59
    2a3a:	0f 90       	pop	r0
    2a3c:	0f be       	out	0x3f, r0	; 63
    2a3e:	0f 90       	pop	r0
    2a40:	1f 90       	pop	r1
    2a42:	18 95       	reti

00002a44 <__vector_15>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_ERR_vect)      /* Error Interrupt */
    2a44:	1f 92       	push	r1
    2a46:	0f 92       	push	r0
    2a48:	0f b6       	in	r0, 0x3f	; 63
    2a4a:	0f 92       	push	r0
    2a4c:	11 24       	eor	r1, r1
    2a4e:	0b b6       	in	r0, 0x3b	; 59
    2a50:	0f 92       	push	r0
    2a52:	2f 93       	push	r18
    2a54:	3f 93       	push	r19
    2a56:	4f 93       	push	r20
    2a58:	5f 93       	push	r21
    2a5a:	6f 93       	push	r22
    2a5c:	7f 93       	push	r23
    2a5e:	8f 93       	push	r24
    2a60:	9f 93       	push	r25
    2a62:	af 93       	push	r26
    2a64:	bf 93       	push	r27
    2a66:	ef 93       	push	r30
    2a68:	ff 93       	push	r31
    2a6a:	e0 91 e2 22 	lds	r30, 0x22E2
    2a6e:	f0 91 e3 22 	lds	r31, 0x22E3
    2a72:	30 97       	sbiw	r30, 0x00	; 0
    2a74:	29 f0       	breq	.+10     	; 0x2a80 <__vector_15+0x3c>
    2a76:	80 91 d8 23 	lds	r24, 0x23D8
    2a7a:	90 91 d9 23 	lds	r25, 0x23D9
    2a7e:	19 95       	eicall
    2a80:	ff 91       	pop	r31
    2a82:	ef 91       	pop	r30
    2a84:	bf 91       	pop	r27
    2a86:	af 91       	pop	r26
    2a88:	9f 91       	pop	r25
    2a8a:	8f 91       	pop	r24
    2a8c:	7f 91       	pop	r23
    2a8e:	6f 91       	pop	r22
    2a90:	5f 91       	pop	r21
    2a92:	4f 91       	pop	r20
    2a94:	3f 91       	pop	r19
    2a96:	2f 91       	pop	r18
    2a98:	0f 90       	pop	r0
    2a9a:	0b be       	out	0x3b, r0	; 59
    2a9c:	0f 90       	pop	r0
    2a9e:	0f be       	out	0x3f, r0	; 63
    2aa0:	0f 90       	pop	r0
    2aa2:	1f 90       	pop	r1
    2aa4:	18 95       	reti

00002aa6 <__vector_16>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCA_vect)      /* Compare or Capture A Interrupt */
    2aa6:	1f 92       	push	r1
    2aa8:	0f 92       	push	r0
    2aaa:	0f b6       	in	r0, 0x3f	; 63
    2aac:	0f 92       	push	r0
    2aae:	11 24       	eor	r1, r1
    2ab0:	0b b6       	in	r0, 0x3b	; 59
    2ab2:	0f 92       	push	r0
    2ab4:	2f 93       	push	r18
    2ab6:	3f 93       	push	r19
    2ab8:	4f 93       	push	r20
    2aba:	5f 93       	push	r21
    2abc:	6f 93       	push	r22
    2abe:	7f 93       	push	r23
    2ac0:	8f 93       	push	r24
    2ac2:	9f 93       	push	r25
    2ac4:	af 93       	push	r26
    2ac6:	bf 93       	push	r27
    2ac8:	ef 93       	push	r30
    2aca:	ff 93       	push	r31
    2acc:	e0 91 e4 22 	lds	r30, 0x22E4
    2ad0:	f0 91 e5 22 	lds	r31, 0x22E5
    2ad4:	30 97       	sbiw	r30, 0x00	; 0
    2ad6:	29 f0       	breq	.+10     	; 0x2ae2 <__vector_16+0x3c>
    2ad8:	80 91 da 23 	lds	r24, 0x23DA
    2adc:	90 91 db 23 	lds	r25, 0x23DB
    2ae0:	19 95       	eicall
    2ae2:	ff 91       	pop	r31
    2ae4:	ef 91       	pop	r30
    2ae6:	bf 91       	pop	r27
    2ae8:	af 91       	pop	r26
    2aea:	9f 91       	pop	r25
    2aec:	8f 91       	pop	r24
    2aee:	7f 91       	pop	r23
    2af0:	6f 91       	pop	r22
    2af2:	5f 91       	pop	r21
    2af4:	4f 91       	pop	r20
    2af6:	3f 91       	pop	r19
    2af8:	2f 91       	pop	r18
    2afa:	0f 90       	pop	r0
    2afc:	0b be       	out	0x3b, r0	; 59
    2afe:	0f 90       	pop	r0
    2b00:	0f be       	out	0x3f, r0	; 63
    2b02:	0f 90       	pop	r0
    2b04:	1f 90       	pop	r1
    2b06:	18 95       	reti

00002b08 <__vector_17>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCB_vect)      /* Compare or Capture B Interrupt */
    2b08:	1f 92       	push	r1
    2b0a:	0f 92       	push	r0
    2b0c:	0f b6       	in	r0, 0x3f	; 63
    2b0e:	0f 92       	push	r0
    2b10:	11 24       	eor	r1, r1
    2b12:	0b b6       	in	r0, 0x3b	; 59
    2b14:	0f 92       	push	r0
    2b16:	2f 93       	push	r18
    2b18:	3f 93       	push	r19
    2b1a:	4f 93       	push	r20
    2b1c:	5f 93       	push	r21
    2b1e:	6f 93       	push	r22
    2b20:	7f 93       	push	r23
    2b22:	8f 93       	push	r24
    2b24:	9f 93       	push	r25
    2b26:	af 93       	push	r26
    2b28:	bf 93       	push	r27
    2b2a:	ef 93       	push	r30
    2b2c:	ff 93       	push	r31
    2b2e:	e0 91 e6 22 	lds	r30, 0x22E6
    2b32:	f0 91 e7 22 	lds	r31, 0x22E7
    2b36:	30 97       	sbiw	r30, 0x00	; 0
    2b38:	29 f0       	breq	.+10     	; 0x2b44 <__vector_17+0x3c>
    2b3a:	80 91 dc 23 	lds	r24, 0x23DC
    2b3e:	90 91 dd 23 	lds	r25, 0x23DD
    2b42:	19 95       	eicall
    2b44:	ff 91       	pop	r31
    2b46:	ef 91       	pop	r30
    2b48:	bf 91       	pop	r27
    2b4a:	af 91       	pop	r26
    2b4c:	9f 91       	pop	r25
    2b4e:	8f 91       	pop	r24
    2b50:	7f 91       	pop	r23
    2b52:	6f 91       	pop	r22
    2b54:	5f 91       	pop	r21
    2b56:	4f 91       	pop	r20
    2b58:	3f 91       	pop	r19
    2b5a:	2f 91       	pop	r18
    2b5c:	0f 90       	pop	r0
    2b5e:	0b be       	out	0x3b, r0	; 59
    2b60:	0f 90       	pop	r0
    2b62:	0f be       	out	0x3f, r0	; 63
    2b64:	0f 90       	pop	r0
    2b66:	1f 90       	pop	r1
    2b68:	18 95       	reti

00002b6a <__vector_18>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCC_vect)      /* Compare or Capture C Interrupt */
    2b6a:	1f 92       	push	r1
    2b6c:	0f 92       	push	r0
    2b6e:	0f b6       	in	r0, 0x3f	; 63
    2b70:	0f 92       	push	r0
    2b72:	11 24       	eor	r1, r1
    2b74:	0b b6       	in	r0, 0x3b	; 59
    2b76:	0f 92       	push	r0
    2b78:	2f 93       	push	r18
    2b7a:	3f 93       	push	r19
    2b7c:	4f 93       	push	r20
    2b7e:	5f 93       	push	r21
    2b80:	6f 93       	push	r22
    2b82:	7f 93       	push	r23
    2b84:	8f 93       	push	r24
    2b86:	9f 93       	push	r25
    2b88:	af 93       	push	r26
    2b8a:	bf 93       	push	r27
    2b8c:	ef 93       	push	r30
    2b8e:	ff 93       	push	r31
    2b90:	e0 91 e8 22 	lds	r30, 0x22E8
    2b94:	f0 91 e9 22 	lds	r31, 0x22E9
    2b98:	30 97       	sbiw	r30, 0x00	; 0
    2b9a:	29 f0       	breq	.+10     	; 0x2ba6 <__vector_18+0x3c>
    2b9c:	80 91 de 23 	lds	r24, 0x23DE
    2ba0:	90 91 df 23 	lds	r25, 0x23DF
    2ba4:	19 95       	eicall
    2ba6:	ff 91       	pop	r31
    2ba8:	ef 91       	pop	r30
    2baa:	bf 91       	pop	r27
    2bac:	af 91       	pop	r26
    2bae:	9f 91       	pop	r25
    2bb0:	8f 91       	pop	r24
    2bb2:	7f 91       	pop	r23
    2bb4:	6f 91       	pop	r22
    2bb6:	5f 91       	pop	r21
    2bb8:	4f 91       	pop	r20
    2bba:	3f 91       	pop	r19
    2bbc:	2f 91       	pop	r18
    2bbe:	0f 90       	pop	r0
    2bc0:	0b be       	out	0x3b, r0	; 59
    2bc2:	0f 90       	pop	r0
    2bc4:	0f be       	out	0x3f, r0	; 63
    2bc6:	0f 90       	pop	r0
    2bc8:	1f 90       	pop	r1
    2bca:	18 95       	reti

00002bcc <__vector_19>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCD_vect)      /* Compare or Capture D Interrupt */
    2bcc:	1f 92       	push	r1
    2bce:	0f 92       	push	r0
    2bd0:	0f b6       	in	r0, 0x3f	; 63
    2bd2:	0f 92       	push	r0
    2bd4:	11 24       	eor	r1, r1
    2bd6:	0b b6       	in	r0, 0x3b	; 59
    2bd8:	0f 92       	push	r0
    2bda:	2f 93       	push	r18
    2bdc:	3f 93       	push	r19
    2bde:	4f 93       	push	r20
    2be0:	5f 93       	push	r21
    2be2:	6f 93       	push	r22
    2be4:	7f 93       	push	r23
    2be6:	8f 93       	push	r24
    2be8:	9f 93       	push	r25
    2bea:	af 93       	push	r26
    2bec:	bf 93       	push	r27
    2bee:	ef 93       	push	r30
    2bf0:	ff 93       	push	r31
    2bf2:	e0 91 ea 22 	lds	r30, 0x22EA
    2bf6:	f0 91 eb 22 	lds	r31, 0x22EB
    2bfa:	30 97       	sbiw	r30, 0x00	; 0
    2bfc:	29 f0       	breq	.+10     	; 0x2c08 <__vector_19+0x3c>
    2bfe:	80 91 e0 23 	lds	r24, 0x23E0
    2c02:	90 91 e1 23 	lds	r25, 0x23E1
    2c06:	19 95       	eicall
    2c08:	ff 91       	pop	r31
    2c0a:	ef 91       	pop	r30
    2c0c:	bf 91       	pop	r27
    2c0e:	af 91       	pop	r26
    2c10:	9f 91       	pop	r25
    2c12:	8f 91       	pop	r24
    2c14:	7f 91       	pop	r23
    2c16:	6f 91       	pop	r22
    2c18:	5f 91       	pop	r21
    2c1a:	4f 91       	pop	r20
    2c1c:	3f 91       	pop	r19
    2c1e:	2f 91       	pop	r18
    2c20:	0f 90       	pop	r0
    2c22:	0b be       	out	0x3b, r0	; 59
    2c24:	0f 90       	pop	r0
    2c26:	0f be       	out	0x3f, r0	; 63
    2c28:	0f 90       	pop	r0
    2c2a:	1f 90       	pop	r1
    2c2c:	18 95       	reti

00002c2e <__vector_20>:

/* TCC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_OVF_vect)      /* Overflow Interrupt */
    2c2e:	1f 92       	push	r1
    2c30:	0f 92       	push	r0
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	0f 92       	push	r0
    2c36:	11 24       	eor	r1, r1
    2c38:	0b b6       	in	r0, 0x3b	; 59
    2c3a:	0f 92       	push	r0
    2c3c:	2f 93       	push	r18
    2c3e:	3f 93       	push	r19
    2c40:	4f 93       	push	r20
    2c42:	5f 93       	push	r21
    2c44:	6f 93       	push	r22
    2c46:	7f 93       	push	r23
    2c48:	8f 93       	push	r24
    2c4a:	9f 93       	push	r25
    2c4c:	af 93       	push	r26
    2c4e:	bf 93       	push	r27
    2c50:	ef 93       	push	r30
    2c52:	ff 93       	push	r31
    2c54:	e0 91 ec 22 	lds	r30, 0x22EC
    2c58:	f0 91 ed 22 	lds	r31, 0x22ED
    2c5c:	30 97       	sbiw	r30, 0x00	; 0
    2c5e:	29 f0       	breq	.+10     	; 0x2c6a <__vector_20+0x3c>
    2c60:	80 91 e2 23 	lds	r24, 0x23E2
    2c64:	90 91 e3 23 	lds	r25, 0x23E3
    2c68:	19 95       	eicall
    2c6a:	ff 91       	pop	r31
    2c6c:	ef 91       	pop	r30
    2c6e:	bf 91       	pop	r27
    2c70:	af 91       	pop	r26
    2c72:	9f 91       	pop	r25
    2c74:	8f 91       	pop	r24
    2c76:	7f 91       	pop	r23
    2c78:	6f 91       	pop	r22
    2c7a:	5f 91       	pop	r21
    2c7c:	4f 91       	pop	r20
    2c7e:	3f 91       	pop	r19
    2c80:	2f 91       	pop	r18
    2c82:	0f 90       	pop	r0
    2c84:	0b be       	out	0x3b, r0	; 59
    2c86:	0f 90       	pop	r0
    2c88:	0f be       	out	0x3f, r0	; 63
    2c8a:	0f 90       	pop	r0
    2c8c:	1f 90       	pop	r1
    2c8e:	18 95       	reti

00002c90 <__vector_21>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_ERR_vect)      /* Error Interrupt */
    2c90:	1f 92       	push	r1
    2c92:	0f 92       	push	r0
    2c94:	0f b6       	in	r0, 0x3f	; 63
    2c96:	0f 92       	push	r0
    2c98:	11 24       	eor	r1, r1
    2c9a:	0b b6       	in	r0, 0x3b	; 59
    2c9c:	0f 92       	push	r0
    2c9e:	2f 93       	push	r18
    2ca0:	3f 93       	push	r19
    2ca2:	4f 93       	push	r20
    2ca4:	5f 93       	push	r21
    2ca6:	6f 93       	push	r22
    2ca8:	7f 93       	push	r23
    2caa:	8f 93       	push	r24
    2cac:	9f 93       	push	r25
    2cae:	af 93       	push	r26
    2cb0:	bf 93       	push	r27
    2cb2:	ef 93       	push	r30
    2cb4:	ff 93       	push	r31
    2cb6:	e0 91 ee 22 	lds	r30, 0x22EE
    2cba:	f0 91 ef 22 	lds	r31, 0x22EF
    2cbe:	30 97       	sbiw	r30, 0x00	; 0
    2cc0:	29 f0       	breq	.+10     	; 0x2ccc <__vector_21+0x3c>
    2cc2:	80 91 e4 23 	lds	r24, 0x23E4
    2cc6:	90 91 e5 23 	lds	r25, 0x23E5
    2cca:	19 95       	eicall
    2ccc:	ff 91       	pop	r31
    2cce:	ef 91       	pop	r30
    2cd0:	bf 91       	pop	r27
    2cd2:	af 91       	pop	r26
    2cd4:	9f 91       	pop	r25
    2cd6:	8f 91       	pop	r24
    2cd8:	7f 91       	pop	r23
    2cda:	6f 91       	pop	r22
    2cdc:	5f 91       	pop	r21
    2cde:	4f 91       	pop	r20
    2ce0:	3f 91       	pop	r19
    2ce2:	2f 91       	pop	r18
    2ce4:	0f 90       	pop	r0
    2ce6:	0b be       	out	0x3b, r0	; 59
    2ce8:	0f 90       	pop	r0
    2cea:	0f be       	out	0x3f, r0	; 63
    2cec:	0f 90       	pop	r0
    2cee:	1f 90       	pop	r1
    2cf0:	18 95       	reti

00002cf2 <__vector_22>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCA_vect)      /* Compare or Capture A Interrupt */
    2cf2:	1f 92       	push	r1
    2cf4:	0f 92       	push	r0
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	0f 92       	push	r0
    2cfa:	11 24       	eor	r1, r1
    2cfc:	0b b6       	in	r0, 0x3b	; 59
    2cfe:	0f 92       	push	r0
    2d00:	2f 93       	push	r18
    2d02:	3f 93       	push	r19
    2d04:	4f 93       	push	r20
    2d06:	5f 93       	push	r21
    2d08:	6f 93       	push	r22
    2d0a:	7f 93       	push	r23
    2d0c:	8f 93       	push	r24
    2d0e:	9f 93       	push	r25
    2d10:	af 93       	push	r26
    2d12:	bf 93       	push	r27
    2d14:	ef 93       	push	r30
    2d16:	ff 93       	push	r31
    2d18:	e0 91 f0 22 	lds	r30, 0x22F0
    2d1c:	f0 91 f1 22 	lds	r31, 0x22F1
    2d20:	30 97       	sbiw	r30, 0x00	; 0
    2d22:	29 f0       	breq	.+10     	; 0x2d2e <__vector_22+0x3c>
    2d24:	80 91 e6 23 	lds	r24, 0x23E6
    2d28:	90 91 e7 23 	lds	r25, 0x23E7
    2d2c:	19 95       	eicall
    2d2e:	ff 91       	pop	r31
    2d30:	ef 91       	pop	r30
    2d32:	bf 91       	pop	r27
    2d34:	af 91       	pop	r26
    2d36:	9f 91       	pop	r25
    2d38:	8f 91       	pop	r24
    2d3a:	7f 91       	pop	r23
    2d3c:	6f 91       	pop	r22
    2d3e:	5f 91       	pop	r21
    2d40:	4f 91       	pop	r20
    2d42:	3f 91       	pop	r19
    2d44:	2f 91       	pop	r18
    2d46:	0f 90       	pop	r0
    2d48:	0b be       	out	0x3b, r0	; 59
    2d4a:	0f 90       	pop	r0
    2d4c:	0f be       	out	0x3f, r0	; 63
    2d4e:	0f 90       	pop	r0
    2d50:	1f 90       	pop	r1
    2d52:	18 95       	reti

00002d54 <__vector_23>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCB_vect)      /* Compare or Capture B Interrupt */
    2d54:	1f 92       	push	r1
    2d56:	0f 92       	push	r0
    2d58:	0f b6       	in	r0, 0x3f	; 63
    2d5a:	0f 92       	push	r0
    2d5c:	11 24       	eor	r1, r1
    2d5e:	0b b6       	in	r0, 0x3b	; 59
    2d60:	0f 92       	push	r0
    2d62:	2f 93       	push	r18
    2d64:	3f 93       	push	r19
    2d66:	4f 93       	push	r20
    2d68:	5f 93       	push	r21
    2d6a:	6f 93       	push	r22
    2d6c:	7f 93       	push	r23
    2d6e:	8f 93       	push	r24
    2d70:	9f 93       	push	r25
    2d72:	af 93       	push	r26
    2d74:	bf 93       	push	r27
    2d76:	ef 93       	push	r30
    2d78:	ff 93       	push	r31
    2d7a:	e0 91 f2 22 	lds	r30, 0x22F2
    2d7e:	f0 91 f3 22 	lds	r31, 0x22F3
    2d82:	30 97       	sbiw	r30, 0x00	; 0
    2d84:	29 f0       	breq	.+10     	; 0x2d90 <__vector_23+0x3c>
    2d86:	80 91 e8 23 	lds	r24, 0x23E8
    2d8a:	90 91 e9 23 	lds	r25, 0x23E9
    2d8e:	19 95       	eicall
    2d90:	ff 91       	pop	r31
    2d92:	ef 91       	pop	r30
    2d94:	bf 91       	pop	r27
    2d96:	af 91       	pop	r26
    2d98:	9f 91       	pop	r25
    2d9a:	8f 91       	pop	r24
    2d9c:	7f 91       	pop	r23
    2d9e:	6f 91       	pop	r22
    2da0:	5f 91       	pop	r21
    2da2:	4f 91       	pop	r20
    2da4:	3f 91       	pop	r19
    2da6:	2f 91       	pop	r18
    2da8:	0f 90       	pop	r0
    2daa:	0b be       	out	0x3b, r0	; 59
    2dac:	0f 90       	pop	r0
    2dae:	0f be       	out	0x3f, r0	; 63
    2db0:	0f 90       	pop	r0
    2db2:	1f 90       	pop	r1
    2db4:	18 95       	reti

00002db6 <__vector_24>:

/* SPIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIC_INT_vect)      /* SPI Interrupt */
    2db6:	1f 92       	push	r1
    2db8:	0f 92       	push	r0
    2dba:	0f b6       	in	r0, 0x3f	; 63
    2dbc:	0f 92       	push	r0
    2dbe:	11 24       	eor	r1, r1
    2dc0:	0b b6       	in	r0, 0x3b	; 59
    2dc2:	0f 92       	push	r0
    2dc4:	2f 93       	push	r18
    2dc6:	3f 93       	push	r19
    2dc8:	4f 93       	push	r20
    2dca:	5f 93       	push	r21
    2dcc:	6f 93       	push	r22
    2dce:	7f 93       	push	r23
    2dd0:	8f 93       	push	r24
    2dd2:	9f 93       	push	r25
    2dd4:	af 93       	push	r26
    2dd6:	bf 93       	push	r27
    2dd8:	ef 93       	push	r30
    2dda:	ff 93       	push	r31
    2ddc:	e0 91 f4 22 	lds	r30, 0x22F4
    2de0:	f0 91 f5 22 	lds	r31, 0x22F5
    2de4:	30 97       	sbiw	r30, 0x00	; 0
    2de6:	29 f0       	breq	.+10     	; 0x2df2 <__vector_24+0x3c>
    2de8:	80 91 ea 23 	lds	r24, 0x23EA
    2dec:	90 91 eb 23 	lds	r25, 0x23EB
    2df0:	19 95       	eicall
    2df2:	ff 91       	pop	r31
    2df4:	ef 91       	pop	r30
    2df6:	bf 91       	pop	r27
    2df8:	af 91       	pop	r26
    2dfa:	9f 91       	pop	r25
    2dfc:	8f 91       	pop	r24
    2dfe:	7f 91       	pop	r23
    2e00:	6f 91       	pop	r22
    2e02:	5f 91       	pop	r21
    2e04:	4f 91       	pop	r20
    2e06:	3f 91       	pop	r19
    2e08:	2f 91       	pop	r18
    2e0a:	0f 90       	pop	r0
    2e0c:	0b be       	out	0x3b, r0	; 59
    2e0e:	0f 90       	pop	r0
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	0f 90       	pop	r0
    2e14:	1f 90       	pop	r1
    2e16:	18 95       	reti

00002e18 <__vector_25>:

/* USARTC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_RXC_vect)      /* Reception Complete Interrupt */
    2e18:	1f 92       	push	r1
    2e1a:	0f 92       	push	r0
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	0f 92       	push	r0
    2e20:	11 24       	eor	r1, r1
    2e22:	0b b6       	in	r0, 0x3b	; 59
    2e24:	0f 92       	push	r0
    2e26:	2f 93       	push	r18
    2e28:	3f 93       	push	r19
    2e2a:	4f 93       	push	r20
    2e2c:	5f 93       	push	r21
    2e2e:	6f 93       	push	r22
    2e30:	7f 93       	push	r23
    2e32:	8f 93       	push	r24
    2e34:	9f 93       	push	r25
    2e36:	af 93       	push	r26
    2e38:	bf 93       	push	r27
    2e3a:	ef 93       	push	r30
    2e3c:	ff 93       	push	r31
    2e3e:	e0 91 f6 22 	lds	r30, 0x22F6
    2e42:	f0 91 f7 22 	lds	r31, 0x22F7
    2e46:	30 97       	sbiw	r30, 0x00	; 0
    2e48:	29 f0       	breq	.+10     	; 0x2e54 <__vector_25+0x3c>
    2e4a:	80 91 ec 23 	lds	r24, 0x23EC
    2e4e:	90 91 ed 23 	lds	r25, 0x23ED
    2e52:	19 95       	eicall
    2e54:	ff 91       	pop	r31
    2e56:	ef 91       	pop	r30
    2e58:	bf 91       	pop	r27
    2e5a:	af 91       	pop	r26
    2e5c:	9f 91       	pop	r25
    2e5e:	8f 91       	pop	r24
    2e60:	7f 91       	pop	r23
    2e62:	6f 91       	pop	r22
    2e64:	5f 91       	pop	r21
    2e66:	4f 91       	pop	r20
    2e68:	3f 91       	pop	r19
    2e6a:	2f 91       	pop	r18
    2e6c:	0f 90       	pop	r0
    2e6e:	0b be       	out	0x3b, r0	; 59
    2e70:	0f 90       	pop	r0
    2e72:	0f be       	out	0x3f, r0	; 63
    2e74:	0f 90       	pop	r0
    2e76:	1f 90       	pop	r1
    2e78:	18 95       	reti

00002e7a <__vector_26>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_DRE_vect)      /* Data Register Empty Interrupt */
    2e7a:	1f 92       	push	r1
    2e7c:	0f 92       	push	r0
    2e7e:	0f b6       	in	r0, 0x3f	; 63
    2e80:	0f 92       	push	r0
    2e82:	11 24       	eor	r1, r1
    2e84:	0b b6       	in	r0, 0x3b	; 59
    2e86:	0f 92       	push	r0
    2e88:	2f 93       	push	r18
    2e8a:	3f 93       	push	r19
    2e8c:	4f 93       	push	r20
    2e8e:	5f 93       	push	r21
    2e90:	6f 93       	push	r22
    2e92:	7f 93       	push	r23
    2e94:	8f 93       	push	r24
    2e96:	9f 93       	push	r25
    2e98:	af 93       	push	r26
    2e9a:	bf 93       	push	r27
    2e9c:	ef 93       	push	r30
    2e9e:	ff 93       	push	r31
    2ea0:	e0 91 f8 22 	lds	r30, 0x22F8
    2ea4:	f0 91 f9 22 	lds	r31, 0x22F9
    2ea8:	30 97       	sbiw	r30, 0x00	; 0
    2eaa:	29 f0       	breq	.+10     	; 0x2eb6 <__vector_26+0x3c>
    2eac:	80 91 ee 23 	lds	r24, 0x23EE
    2eb0:	90 91 ef 23 	lds	r25, 0x23EF
    2eb4:	19 95       	eicall
    2eb6:	ff 91       	pop	r31
    2eb8:	ef 91       	pop	r30
    2eba:	bf 91       	pop	r27
    2ebc:	af 91       	pop	r26
    2ebe:	9f 91       	pop	r25
    2ec0:	8f 91       	pop	r24
    2ec2:	7f 91       	pop	r23
    2ec4:	6f 91       	pop	r22
    2ec6:	5f 91       	pop	r21
    2ec8:	4f 91       	pop	r20
    2eca:	3f 91       	pop	r19
    2ecc:	2f 91       	pop	r18
    2ece:	0f 90       	pop	r0
    2ed0:	0b be       	out	0x3b, r0	; 59
    2ed2:	0f 90       	pop	r0
    2ed4:	0f be       	out	0x3f, r0	; 63
    2ed6:	0f 90       	pop	r0
    2ed8:	1f 90       	pop	r1
    2eda:	18 95       	reti

00002edc <__vector_27>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_TXC_vect)      /* Transmission Complete Interrupt */
    2edc:	1f 92       	push	r1
    2ede:	0f 92       	push	r0
    2ee0:	0f b6       	in	r0, 0x3f	; 63
    2ee2:	0f 92       	push	r0
    2ee4:	11 24       	eor	r1, r1
    2ee6:	0b b6       	in	r0, 0x3b	; 59
    2ee8:	0f 92       	push	r0
    2eea:	2f 93       	push	r18
    2eec:	3f 93       	push	r19
    2eee:	4f 93       	push	r20
    2ef0:	5f 93       	push	r21
    2ef2:	6f 93       	push	r22
    2ef4:	7f 93       	push	r23
    2ef6:	8f 93       	push	r24
    2ef8:	9f 93       	push	r25
    2efa:	af 93       	push	r26
    2efc:	bf 93       	push	r27
    2efe:	ef 93       	push	r30
    2f00:	ff 93       	push	r31
    2f02:	e0 91 fa 22 	lds	r30, 0x22FA
    2f06:	f0 91 fb 22 	lds	r31, 0x22FB
    2f0a:	30 97       	sbiw	r30, 0x00	; 0
    2f0c:	29 f0       	breq	.+10     	; 0x2f18 <__vector_27+0x3c>
    2f0e:	80 91 f0 23 	lds	r24, 0x23F0
    2f12:	90 91 f1 23 	lds	r25, 0x23F1
    2f16:	19 95       	eicall
    2f18:	ff 91       	pop	r31
    2f1a:	ef 91       	pop	r30
    2f1c:	bf 91       	pop	r27
    2f1e:	af 91       	pop	r26
    2f20:	9f 91       	pop	r25
    2f22:	8f 91       	pop	r24
    2f24:	7f 91       	pop	r23
    2f26:	6f 91       	pop	r22
    2f28:	5f 91       	pop	r21
    2f2a:	4f 91       	pop	r20
    2f2c:	3f 91       	pop	r19
    2f2e:	2f 91       	pop	r18
    2f30:	0f 90       	pop	r0
    2f32:	0b be       	out	0x3b, r0	; 59
    2f34:	0f 90       	pop	r0
    2f36:	0f be       	out	0x3f, r0	; 63
    2f38:	0f 90       	pop	r0
    2f3a:	1f 90       	pop	r1
    2f3c:	18 95       	reti

00002f3e <__vector_28>:

/* USARTC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_RXC_vect)      /* Reception Complete Interrupt */
    2f3e:	1f 92       	push	r1
    2f40:	0f 92       	push	r0
    2f42:	0f b6       	in	r0, 0x3f	; 63
    2f44:	0f 92       	push	r0
    2f46:	11 24       	eor	r1, r1
    2f48:	0b b6       	in	r0, 0x3b	; 59
    2f4a:	0f 92       	push	r0
    2f4c:	2f 93       	push	r18
    2f4e:	3f 93       	push	r19
    2f50:	4f 93       	push	r20
    2f52:	5f 93       	push	r21
    2f54:	6f 93       	push	r22
    2f56:	7f 93       	push	r23
    2f58:	8f 93       	push	r24
    2f5a:	9f 93       	push	r25
    2f5c:	af 93       	push	r26
    2f5e:	bf 93       	push	r27
    2f60:	ef 93       	push	r30
    2f62:	ff 93       	push	r31
    2f64:	e0 91 fc 22 	lds	r30, 0x22FC
    2f68:	f0 91 fd 22 	lds	r31, 0x22FD
    2f6c:	30 97       	sbiw	r30, 0x00	; 0
    2f6e:	29 f0       	breq	.+10     	; 0x2f7a <__vector_28+0x3c>
    2f70:	80 91 f2 23 	lds	r24, 0x23F2
    2f74:	90 91 f3 23 	lds	r25, 0x23F3
    2f78:	19 95       	eicall
    2f7a:	ff 91       	pop	r31
    2f7c:	ef 91       	pop	r30
    2f7e:	bf 91       	pop	r27
    2f80:	af 91       	pop	r26
    2f82:	9f 91       	pop	r25
    2f84:	8f 91       	pop	r24
    2f86:	7f 91       	pop	r23
    2f88:	6f 91       	pop	r22
    2f8a:	5f 91       	pop	r21
    2f8c:	4f 91       	pop	r20
    2f8e:	3f 91       	pop	r19
    2f90:	2f 91       	pop	r18
    2f92:	0f 90       	pop	r0
    2f94:	0b be       	out	0x3b, r0	; 59
    2f96:	0f 90       	pop	r0
    2f98:	0f be       	out	0x3f, r0	; 63
    2f9a:	0f 90       	pop	r0
    2f9c:	1f 90       	pop	r1
    2f9e:	18 95       	reti

00002fa0 <__vector_29>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_DRE_vect)      /* Data Register Empty Interrupt */
    2fa0:	1f 92       	push	r1
    2fa2:	0f 92       	push	r0
    2fa4:	0f b6       	in	r0, 0x3f	; 63
    2fa6:	0f 92       	push	r0
    2fa8:	11 24       	eor	r1, r1
    2faa:	0b b6       	in	r0, 0x3b	; 59
    2fac:	0f 92       	push	r0
    2fae:	2f 93       	push	r18
    2fb0:	3f 93       	push	r19
    2fb2:	4f 93       	push	r20
    2fb4:	5f 93       	push	r21
    2fb6:	6f 93       	push	r22
    2fb8:	7f 93       	push	r23
    2fba:	8f 93       	push	r24
    2fbc:	9f 93       	push	r25
    2fbe:	af 93       	push	r26
    2fc0:	bf 93       	push	r27
    2fc2:	ef 93       	push	r30
    2fc4:	ff 93       	push	r31
    2fc6:	e0 91 fe 22 	lds	r30, 0x22FE
    2fca:	f0 91 ff 22 	lds	r31, 0x22FF
    2fce:	30 97       	sbiw	r30, 0x00	; 0
    2fd0:	29 f0       	breq	.+10     	; 0x2fdc <__vector_29+0x3c>
    2fd2:	80 91 f4 23 	lds	r24, 0x23F4
    2fd6:	90 91 f5 23 	lds	r25, 0x23F5
    2fda:	19 95       	eicall
    2fdc:	ff 91       	pop	r31
    2fde:	ef 91       	pop	r30
    2fe0:	bf 91       	pop	r27
    2fe2:	af 91       	pop	r26
    2fe4:	9f 91       	pop	r25
    2fe6:	8f 91       	pop	r24
    2fe8:	7f 91       	pop	r23
    2fea:	6f 91       	pop	r22
    2fec:	5f 91       	pop	r21
    2fee:	4f 91       	pop	r20
    2ff0:	3f 91       	pop	r19
    2ff2:	2f 91       	pop	r18
    2ff4:	0f 90       	pop	r0
    2ff6:	0b be       	out	0x3b, r0	; 59
    2ff8:	0f 90       	pop	r0
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	0f 90       	pop	r0
    2ffe:	1f 90       	pop	r1
    3000:	18 95       	reti

00003002 <__vector_30>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_TXC_vect)      /* Transmission Complete Interrupt */
    3002:	1f 92       	push	r1
    3004:	0f 92       	push	r0
    3006:	0f b6       	in	r0, 0x3f	; 63
    3008:	0f 92       	push	r0
    300a:	11 24       	eor	r1, r1
    300c:	0b b6       	in	r0, 0x3b	; 59
    300e:	0f 92       	push	r0
    3010:	2f 93       	push	r18
    3012:	3f 93       	push	r19
    3014:	4f 93       	push	r20
    3016:	5f 93       	push	r21
    3018:	6f 93       	push	r22
    301a:	7f 93       	push	r23
    301c:	8f 93       	push	r24
    301e:	9f 93       	push	r25
    3020:	af 93       	push	r26
    3022:	bf 93       	push	r27
    3024:	ef 93       	push	r30
    3026:	ff 93       	push	r31
    3028:	e0 91 00 23 	lds	r30, 0x2300
    302c:	f0 91 01 23 	lds	r31, 0x2301
    3030:	30 97       	sbiw	r30, 0x00	; 0
    3032:	29 f0       	breq	.+10     	; 0x303e <__vector_30+0x3c>
    3034:	80 91 f6 23 	lds	r24, 0x23F6
    3038:	90 91 f7 23 	lds	r25, 0x23F7
    303c:	19 95       	eicall
    303e:	ff 91       	pop	r31
    3040:	ef 91       	pop	r30
    3042:	bf 91       	pop	r27
    3044:	af 91       	pop	r26
    3046:	9f 91       	pop	r25
    3048:	8f 91       	pop	r24
    304a:	7f 91       	pop	r23
    304c:	6f 91       	pop	r22
    304e:	5f 91       	pop	r21
    3050:	4f 91       	pop	r20
    3052:	3f 91       	pop	r19
    3054:	2f 91       	pop	r18
    3056:	0f 90       	pop	r0
    3058:	0b be       	out	0x3b, r0	; 59
    305a:	0f 90       	pop	r0
    305c:	0f be       	out	0x3f, r0	; 63
    305e:	0f 90       	pop	r0
    3060:	1f 90       	pop	r1
    3062:	18 95       	reti

00003064 <__vector_31>:

/* AES interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(AES_INT_vect)      /* AES Interrupt */
    3064:	1f 92       	push	r1
    3066:	0f 92       	push	r0
    3068:	0f b6       	in	r0, 0x3f	; 63
    306a:	0f 92       	push	r0
    306c:	11 24       	eor	r1, r1
    306e:	0b b6       	in	r0, 0x3b	; 59
    3070:	0f 92       	push	r0
    3072:	2f 93       	push	r18
    3074:	3f 93       	push	r19
    3076:	4f 93       	push	r20
    3078:	5f 93       	push	r21
    307a:	6f 93       	push	r22
    307c:	7f 93       	push	r23
    307e:	8f 93       	push	r24
    3080:	9f 93       	push	r25
    3082:	af 93       	push	r26
    3084:	bf 93       	push	r27
    3086:	ef 93       	push	r30
    3088:	ff 93       	push	r31
    308a:	e0 91 02 23 	lds	r30, 0x2302
    308e:	f0 91 03 23 	lds	r31, 0x2303
    3092:	30 97       	sbiw	r30, 0x00	; 0
    3094:	29 f0       	breq	.+10     	; 0x30a0 <__vector_31+0x3c>
    3096:	80 91 f8 23 	lds	r24, 0x23F8
    309a:	90 91 f9 23 	lds	r25, 0x23F9
    309e:	19 95       	eicall
    30a0:	ff 91       	pop	r31
    30a2:	ef 91       	pop	r30
    30a4:	bf 91       	pop	r27
    30a6:	af 91       	pop	r26
    30a8:	9f 91       	pop	r25
    30aa:	8f 91       	pop	r24
    30ac:	7f 91       	pop	r23
    30ae:	6f 91       	pop	r22
    30b0:	5f 91       	pop	r21
    30b2:	4f 91       	pop	r20
    30b4:	3f 91       	pop	r19
    30b6:	2f 91       	pop	r18
    30b8:	0f 90       	pop	r0
    30ba:	0b be       	out	0x3b, r0	; 59
    30bc:	0f 90       	pop	r0
    30be:	0f be       	out	0x3f, r0	; 63
    30c0:	0f 90       	pop	r0
    30c2:	1f 90       	pop	r1
    30c4:	18 95       	reti

000030c6 <__vector_32>:

/* NVM interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_EE_vect)      /* EE Interrupt */
    30c6:	1f 92       	push	r1
    30c8:	0f 92       	push	r0
    30ca:	0f b6       	in	r0, 0x3f	; 63
    30cc:	0f 92       	push	r0
    30ce:	11 24       	eor	r1, r1
    30d0:	0b b6       	in	r0, 0x3b	; 59
    30d2:	0f 92       	push	r0
    30d4:	2f 93       	push	r18
    30d6:	3f 93       	push	r19
    30d8:	4f 93       	push	r20
    30da:	5f 93       	push	r21
    30dc:	6f 93       	push	r22
    30de:	7f 93       	push	r23
    30e0:	8f 93       	push	r24
    30e2:	9f 93       	push	r25
    30e4:	af 93       	push	r26
    30e6:	bf 93       	push	r27
    30e8:	ef 93       	push	r30
    30ea:	ff 93       	push	r31
    30ec:	e0 91 04 23 	lds	r30, 0x2304
    30f0:	f0 91 05 23 	lds	r31, 0x2305
    30f4:	30 97       	sbiw	r30, 0x00	; 0
    30f6:	29 f0       	breq	.+10     	; 0x3102 <__vector_32+0x3c>
    30f8:	80 91 fa 23 	lds	r24, 0x23FA
    30fc:	90 91 fb 23 	lds	r25, 0x23FB
    3100:	19 95       	eicall
    3102:	ff 91       	pop	r31
    3104:	ef 91       	pop	r30
    3106:	bf 91       	pop	r27
    3108:	af 91       	pop	r26
    310a:	9f 91       	pop	r25
    310c:	8f 91       	pop	r24
    310e:	7f 91       	pop	r23
    3110:	6f 91       	pop	r22
    3112:	5f 91       	pop	r21
    3114:	4f 91       	pop	r20
    3116:	3f 91       	pop	r19
    3118:	2f 91       	pop	r18
    311a:	0f 90       	pop	r0
    311c:	0b be       	out	0x3b, r0	; 59
    311e:	0f 90       	pop	r0
    3120:	0f be       	out	0x3f, r0	; 63
    3122:	0f 90       	pop	r0
    3124:	1f 90       	pop	r1
    3126:	18 95       	reti

00003128 <__vector_33>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_SPM_vect)      /* SPM Interrupt */
    3128:	1f 92       	push	r1
    312a:	0f 92       	push	r0
    312c:	0f b6       	in	r0, 0x3f	; 63
    312e:	0f 92       	push	r0
    3130:	11 24       	eor	r1, r1
    3132:	0b b6       	in	r0, 0x3b	; 59
    3134:	0f 92       	push	r0
    3136:	2f 93       	push	r18
    3138:	3f 93       	push	r19
    313a:	4f 93       	push	r20
    313c:	5f 93       	push	r21
    313e:	6f 93       	push	r22
    3140:	7f 93       	push	r23
    3142:	8f 93       	push	r24
    3144:	9f 93       	push	r25
    3146:	af 93       	push	r26
    3148:	bf 93       	push	r27
    314a:	ef 93       	push	r30
    314c:	ff 93       	push	r31
    314e:	e0 91 06 23 	lds	r30, 0x2306
    3152:	f0 91 07 23 	lds	r31, 0x2307
    3156:	30 97       	sbiw	r30, 0x00	; 0
    3158:	29 f0       	breq	.+10     	; 0x3164 <__vector_33+0x3c>
    315a:	80 91 fc 23 	lds	r24, 0x23FC
    315e:	90 91 fd 23 	lds	r25, 0x23FD
    3162:	19 95       	eicall
    3164:	ff 91       	pop	r31
    3166:	ef 91       	pop	r30
    3168:	bf 91       	pop	r27
    316a:	af 91       	pop	r26
    316c:	9f 91       	pop	r25
    316e:	8f 91       	pop	r24
    3170:	7f 91       	pop	r23
    3172:	6f 91       	pop	r22
    3174:	5f 91       	pop	r21
    3176:	4f 91       	pop	r20
    3178:	3f 91       	pop	r19
    317a:	2f 91       	pop	r18
    317c:	0f 90       	pop	r0
    317e:	0b be       	out	0x3b, r0	; 59
    3180:	0f 90       	pop	r0
    3182:	0f be       	out	0x3f, r0	; 63
    3184:	0f 90       	pop	r0
    3186:	1f 90       	pop	r1
    3188:	18 95       	reti

0000318a <__vector_34>:

/* PORTB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT0_vect)      /* External Interrupt 0 */
    318a:	1f 92       	push	r1
    318c:	0f 92       	push	r0
    318e:	0f b6       	in	r0, 0x3f	; 63
    3190:	0f 92       	push	r0
    3192:	11 24       	eor	r1, r1
    3194:	0b b6       	in	r0, 0x3b	; 59
    3196:	0f 92       	push	r0
    3198:	2f 93       	push	r18
    319a:	3f 93       	push	r19
    319c:	4f 93       	push	r20
    319e:	5f 93       	push	r21
    31a0:	6f 93       	push	r22
    31a2:	7f 93       	push	r23
    31a4:	8f 93       	push	r24
    31a6:	9f 93       	push	r25
    31a8:	af 93       	push	r26
    31aa:	bf 93       	push	r27
    31ac:	ef 93       	push	r30
    31ae:	ff 93       	push	r31
    31b0:	e0 91 08 23 	lds	r30, 0x2308
    31b4:	f0 91 09 23 	lds	r31, 0x2309
    31b8:	30 97       	sbiw	r30, 0x00	; 0
    31ba:	29 f0       	breq	.+10     	; 0x31c6 <__vector_34+0x3c>
    31bc:	80 91 fe 23 	lds	r24, 0x23FE
    31c0:	90 91 ff 23 	lds	r25, 0x23FF
    31c4:	19 95       	eicall
    31c6:	ff 91       	pop	r31
    31c8:	ef 91       	pop	r30
    31ca:	bf 91       	pop	r27
    31cc:	af 91       	pop	r26
    31ce:	9f 91       	pop	r25
    31d0:	8f 91       	pop	r24
    31d2:	7f 91       	pop	r23
    31d4:	6f 91       	pop	r22
    31d6:	5f 91       	pop	r21
    31d8:	4f 91       	pop	r20
    31da:	3f 91       	pop	r19
    31dc:	2f 91       	pop	r18
    31de:	0f 90       	pop	r0
    31e0:	0b be       	out	0x3b, r0	; 59
    31e2:	0f 90       	pop	r0
    31e4:	0f be       	out	0x3f, r0	; 63
    31e6:	0f 90       	pop	r0
    31e8:	1f 90       	pop	r1
    31ea:	18 95       	reti

000031ec <__vector_35>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT1_vect)      /* External Interrupt 1 */
    31ec:	1f 92       	push	r1
    31ee:	0f 92       	push	r0
    31f0:	0f b6       	in	r0, 0x3f	; 63
    31f2:	0f 92       	push	r0
    31f4:	11 24       	eor	r1, r1
    31f6:	0b b6       	in	r0, 0x3b	; 59
    31f8:	0f 92       	push	r0
    31fa:	2f 93       	push	r18
    31fc:	3f 93       	push	r19
    31fe:	4f 93       	push	r20
    3200:	5f 93       	push	r21
    3202:	6f 93       	push	r22
    3204:	7f 93       	push	r23
    3206:	8f 93       	push	r24
    3208:	9f 93       	push	r25
    320a:	af 93       	push	r26
    320c:	bf 93       	push	r27
    320e:	ef 93       	push	r30
    3210:	ff 93       	push	r31
    3212:	e0 91 0a 23 	lds	r30, 0x230A
    3216:	f0 91 0b 23 	lds	r31, 0x230B
    321a:	30 97       	sbiw	r30, 0x00	; 0
    321c:	29 f0       	breq	.+10     	; 0x3228 <__vector_35+0x3c>
    321e:	80 91 00 24 	lds	r24, 0x2400
    3222:	90 91 01 24 	lds	r25, 0x2401
    3226:	19 95       	eicall
    3228:	ff 91       	pop	r31
    322a:	ef 91       	pop	r30
    322c:	bf 91       	pop	r27
    322e:	af 91       	pop	r26
    3230:	9f 91       	pop	r25
    3232:	8f 91       	pop	r24
    3234:	7f 91       	pop	r23
    3236:	6f 91       	pop	r22
    3238:	5f 91       	pop	r21
    323a:	4f 91       	pop	r20
    323c:	3f 91       	pop	r19
    323e:	2f 91       	pop	r18
    3240:	0f 90       	pop	r0
    3242:	0b be       	out	0x3b, r0	; 59
    3244:	0f 90       	pop	r0
    3246:	0f be       	out	0x3f, r0	; 63
    3248:	0f 90       	pop	r0
    324a:	1f 90       	pop	r1
    324c:	18 95       	reti

0000324e <__vector_36>:

/* ACB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC0_vect)      /* AC0 Interrupt */
    324e:	1f 92       	push	r1
    3250:	0f 92       	push	r0
    3252:	0f b6       	in	r0, 0x3f	; 63
    3254:	0f 92       	push	r0
    3256:	11 24       	eor	r1, r1
    3258:	0b b6       	in	r0, 0x3b	; 59
    325a:	0f 92       	push	r0
    325c:	2f 93       	push	r18
    325e:	3f 93       	push	r19
    3260:	4f 93       	push	r20
    3262:	5f 93       	push	r21
    3264:	6f 93       	push	r22
    3266:	7f 93       	push	r23
    3268:	8f 93       	push	r24
    326a:	9f 93       	push	r25
    326c:	af 93       	push	r26
    326e:	bf 93       	push	r27
    3270:	ef 93       	push	r30
    3272:	ff 93       	push	r31
    3274:	e0 91 0c 23 	lds	r30, 0x230C
    3278:	f0 91 0d 23 	lds	r31, 0x230D
    327c:	30 97       	sbiw	r30, 0x00	; 0
    327e:	29 f0       	breq	.+10     	; 0x328a <__vector_36+0x3c>
    3280:	80 91 02 24 	lds	r24, 0x2402
    3284:	90 91 03 24 	lds	r25, 0x2403
    3288:	19 95       	eicall
    328a:	ff 91       	pop	r31
    328c:	ef 91       	pop	r30
    328e:	bf 91       	pop	r27
    3290:	af 91       	pop	r26
    3292:	9f 91       	pop	r25
    3294:	8f 91       	pop	r24
    3296:	7f 91       	pop	r23
    3298:	6f 91       	pop	r22
    329a:	5f 91       	pop	r21
    329c:	4f 91       	pop	r20
    329e:	3f 91       	pop	r19
    32a0:	2f 91       	pop	r18
    32a2:	0f 90       	pop	r0
    32a4:	0b be       	out	0x3b, r0	; 59
    32a6:	0f 90       	pop	r0
    32a8:	0f be       	out	0x3f, r0	; 63
    32aa:	0f 90       	pop	r0
    32ac:	1f 90       	pop	r1
    32ae:	18 95       	reti

000032b0 <__vector_37>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC1_vect)      /* AC1 Interrupt */
    32b0:	1f 92       	push	r1
    32b2:	0f 92       	push	r0
    32b4:	0f b6       	in	r0, 0x3f	; 63
    32b6:	0f 92       	push	r0
    32b8:	11 24       	eor	r1, r1
    32ba:	0b b6       	in	r0, 0x3b	; 59
    32bc:	0f 92       	push	r0
    32be:	2f 93       	push	r18
    32c0:	3f 93       	push	r19
    32c2:	4f 93       	push	r20
    32c4:	5f 93       	push	r21
    32c6:	6f 93       	push	r22
    32c8:	7f 93       	push	r23
    32ca:	8f 93       	push	r24
    32cc:	9f 93       	push	r25
    32ce:	af 93       	push	r26
    32d0:	bf 93       	push	r27
    32d2:	ef 93       	push	r30
    32d4:	ff 93       	push	r31
    32d6:	e0 91 0e 23 	lds	r30, 0x230E
    32da:	f0 91 0f 23 	lds	r31, 0x230F
    32de:	30 97       	sbiw	r30, 0x00	; 0
    32e0:	29 f0       	breq	.+10     	; 0x32ec <__vector_37+0x3c>
    32e2:	80 91 04 24 	lds	r24, 0x2404
    32e6:	90 91 05 24 	lds	r25, 0x2405
    32ea:	19 95       	eicall
    32ec:	ff 91       	pop	r31
    32ee:	ef 91       	pop	r30
    32f0:	bf 91       	pop	r27
    32f2:	af 91       	pop	r26
    32f4:	9f 91       	pop	r25
    32f6:	8f 91       	pop	r24
    32f8:	7f 91       	pop	r23
    32fa:	6f 91       	pop	r22
    32fc:	5f 91       	pop	r21
    32fe:	4f 91       	pop	r20
    3300:	3f 91       	pop	r19
    3302:	2f 91       	pop	r18
    3304:	0f 90       	pop	r0
    3306:	0b be       	out	0x3b, r0	; 59
    3308:	0f 90       	pop	r0
    330a:	0f be       	out	0x3f, r0	; 63
    330c:	0f 90       	pop	r0
    330e:	1f 90       	pop	r1
    3310:	18 95       	reti

00003312 <__vector_38>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_ACW_vect)      /* ACW Window Mode Interrupt */
    3312:	1f 92       	push	r1
    3314:	0f 92       	push	r0
    3316:	0f b6       	in	r0, 0x3f	; 63
    3318:	0f 92       	push	r0
    331a:	11 24       	eor	r1, r1
    331c:	0b b6       	in	r0, 0x3b	; 59
    331e:	0f 92       	push	r0
    3320:	2f 93       	push	r18
    3322:	3f 93       	push	r19
    3324:	4f 93       	push	r20
    3326:	5f 93       	push	r21
    3328:	6f 93       	push	r22
    332a:	7f 93       	push	r23
    332c:	8f 93       	push	r24
    332e:	9f 93       	push	r25
    3330:	af 93       	push	r26
    3332:	bf 93       	push	r27
    3334:	ef 93       	push	r30
    3336:	ff 93       	push	r31
    3338:	e0 91 10 23 	lds	r30, 0x2310
    333c:	f0 91 11 23 	lds	r31, 0x2311
    3340:	30 97       	sbiw	r30, 0x00	; 0
    3342:	29 f0       	breq	.+10     	; 0x334e <__vector_38+0x3c>
    3344:	80 91 06 24 	lds	r24, 0x2406
    3348:	90 91 07 24 	lds	r25, 0x2407
    334c:	19 95       	eicall
    334e:	ff 91       	pop	r31
    3350:	ef 91       	pop	r30
    3352:	bf 91       	pop	r27
    3354:	af 91       	pop	r26
    3356:	9f 91       	pop	r25
    3358:	8f 91       	pop	r24
    335a:	7f 91       	pop	r23
    335c:	6f 91       	pop	r22
    335e:	5f 91       	pop	r21
    3360:	4f 91       	pop	r20
    3362:	3f 91       	pop	r19
    3364:	2f 91       	pop	r18
    3366:	0f 90       	pop	r0
    3368:	0b be       	out	0x3b, r0	; 59
    336a:	0f 90       	pop	r0
    336c:	0f be       	out	0x3f, r0	; 63
    336e:	0f 90       	pop	r0
    3370:	1f 90       	pop	r1
    3372:	18 95       	reti

00003374 <__vector_39>:

/* ADCB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH0_vect)      /* Interrupt 0 */
    3374:	1f 92       	push	r1
    3376:	0f 92       	push	r0
    3378:	0f b6       	in	r0, 0x3f	; 63
    337a:	0f 92       	push	r0
    337c:	11 24       	eor	r1, r1
    337e:	0b b6       	in	r0, 0x3b	; 59
    3380:	0f 92       	push	r0
    3382:	2f 93       	push	r18
    3384:	3f 93       	push	r19
    3386:	4f 93       	push	r20
    3388:	5f 93       	push	r21
    338a:	6f 93       	push	r22
    338c:	7f 93       	push	r23
    338e:	8f 93       	push	r24
    3390:	9f 93       	push	r25
    3392:	af 93       	push	r26
    3394:	bf 93       	push	r27
    3396:	ef 93       	push	r30
    3398:	ff 93       	push	r31
    339a:	e0 91 12 23 	lds	r30, 0x2312
    339e:	f0 91 13 23 	lds	r31, 0x2313
    33a2:	30 97       	sbiw	r30, 0x00	; 0
    33a4:	29 f0       	breq	.+10     	; 0x33b0 <__vector_39+0x3c>
    33a6:	80 91 08 24 	lds	r24, 0x2408
    33aa:	90 91 09 24 	lds	r25, 0x2409
    33ae:	19 95       	eicall
    33b0:	ff 91       	pop	r31
    33b2:	ef 91       	pop	r30
    33b4:	bf 91       	pop	r27
    33b6:	af 91       	pop	r26
    33b8:	9f 91       	pop	r25
    33ba:	8f 91       	pop	r24
    33bc:	7f 91       	pop	r23
    33be:	6f 91       	pop	r22
    33c0:	5f 91       	pop	r21
    33c2:	4f 91       	pop	r20
    33c4:	3f 91       	pop	r19
    33c6:	2f 91       	pop	r18
    33c8:	0f 90       	pop	r0
    33ca:	0b be       	out	0x3b, r0	; 59
    33cc:	0f 90       	pop	r0
    33ce:	0f be       	out	0x3f, r0	; 63
    33d0:	0f 90       	pop	r0
    33d2:	1f 90       	pop	r1
    33d4:	18 95       	reti

000033d6 <__vector_40>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH1_vect)      /* Interrupt 1 */
    33d6:	1f 92       	push	r1
    33d8:	0f 92       	push	r0
    33da:	0f b6       	in	r0, 0x3f	; 63
    33dc:	0f 92       	push	r0
    33de:	11 24       	eor	r1, r1
    33e0:	0b b6       	in	r0, 0x3b	; 59
    33e2:	0f 92       	push	r0
    33e4:	2f 93       	push	r18
    33e6:	3f 93       	push	r19
    33e8:	4f 93       	push	r20
    33ea:	5f 93       	push	r21
    33ec:	6f 93       	push	r22
    33ee:	7f 93       	push	r23
    33f0:	8f 93       	push	r24
    33f2:	9f 93       	push	r25
    33f4:	af 93       	push	r26
    33f6:	bf 93       	push	r27
    33f8:	ef 93       	push	r30
    33fa:	ff 93       	push	r31
    33fc:	e0 91 14 23 	lds	r30, 0x2314
    3400:	f0 91 15 23 	lds	r31, 0x2315
    3404:	30 97       	sbiw	r30, 0x00	; 0
    3406:	29 f0       	breq	.+10     	; 0x3412 <__vector_40+0x3c>
    3408:	80 91 0a 24 	lds	r24, 0x240A
    340c:	90 91 0b 24 	lds	r25, 0x240B
    3410:	19 95       	eicall
    3412:	ff 91       	pop	r31
    3414:	ef 91       	pop	r30
    3416:	bf 91       	pop	r27
    3418:	af 91       	pop	r26
    341a:	9f 91       	pop	r25
    341c:	8f 91       	pop	r24
    341e:	7f 91       	pop	r23
    3420:	6f 91       	pop	r22
    3422:	5f 91       	pop	r21
    3424:	4f 91       	pop	r20
    3426:	3f 91       	pop	r19
    3428:	2f 91       	pop	r18
    342a:	0f 90       	pop	r0
    342c:	0b be       	out	0x3b, r0	; 59
    342e:	0f 90       	pop	r0
    3430:	0f be       	out	0x3f, r0	; 63
    3432:	0f 90       	pop	r0
    3434:	1f 90       	pop	r1
    3436:	18 95       	reti

00003438 <__vector_41>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH2_vect)      /* Interrupt 2 */
    3438:	1f 92       	push	r1
    343a:	0f 92       	push	r0
    343c:	0f b6       	in	r0, 0x3f	; 63
    343e:	0f 92       	push	r0
    3440:	11 24       	eor	r1, r1
    3442:	0b b6       	in	r0, 0x3b	; 59
    3444:	0f 92       	push	r0
    3446:	2f 93       	push	r18
    3448:	3f 93       	push	r19
    344a:	4f 93       	push	r20
    344c:	5f 93       	push	r21
    344e:	6f 93       	push	r22
    3450:	7f 93       	push	r23
    3452:	8f 93       	push	r24
    3454:	9f 93       	push	r25
    3456:	af 93       	push	r26
    3458:	bf 93       	push	r27
    345a:	ef 93       	push	r30
    345c:	ff 93       	push	r31
    345e:	e0 91 16 23 	lds	r30, 0x2316
    3462:	f0 91 17 23 	lds	r31, 0x2317
    3466:	30 97       	sbiw	r30, 0x00	; 0
    3468:	29 f0       	breq	.+10     	; 0x3474 <__vector_41+0x3c>
    346a:	80 91 0c 24 	lds	r24, 0x240C
    346e:	90 91 0d 24 	lds	r25, 0x240D
    3472:	19 95       	eicall
    3474:	ff 91       	pop	r31
    3476:	ef 91       	pop	r30
    3478:	bf 91       	pop	r27
    347a:	af 91       	pop	r26
    347c:	9f 91       	pop	r25
    347e:	8f 91       	pop	r24
    3480:	7f 91       	pop	r23
    3482:	6f 91       	pop	r22
    3484:	5f 91       	pop	r21
    3486:	4f 91       	pop	r20
    3488:	3f 91       	pop	r19
    348a:	2f 91       	pop	r18
    348c:	0f 90       	pop	r0
    348e:	0b be       	out	0x3b, r0	; 59
    3490:	0f 90       	pop	r0
    3492:	0f be       	out	0x3f, r0	; 63
    3494:	0f 90       	pop	r0
    3496:	1f 90       	pop	r1
    3498:	18 95       	reti

0000349a <__vector_42>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH3_vect)      /* Interrupt 3 */
    349a:	1f 92       	push	r1
    349c:	0f 92       	push	r0
    349e:	0f b6       	in	r0, 0x3f	; 63
    34a0:	0f 92       	push	r0
    34a2:	11 24       	eor	r1, r1
    34a4:	0b b6       	in	r0, 0x3b	; 59
    34a6:	0f 92       	push	r0
    34a8:	2f 93       	push	r18
    34aa:	3f 93       	push	r19
    34ac:	4f 93       	push	r20
    34ae:	5f 93       	push	r21
    34b0:	6f 93       	push	r22
    34b2:	7f 93       	push	r23
    34b4:	8f 93       	push	r24
    34b6:	9f 93       	push	r25
    34b8:	af 93       	push	r26
    34ba:	bf 93       	push	r27
    34bc:	ef 93       	push	r30
    34be:	ff 93       	push	r31
    34c0:	e0 91 18 23 	lds	r30, 0x2318
    34c4:	f0 91 19 23 	lds	r31, 0x2319
    34c8:	30 97       	sbiw	r30, 0x00	; 0
    34ca:	29 f0       	breq	.+10     	; 0x34d6 <__vector_42+0x3c>
    34cc:	80 91 0e 24 	lds	r24, 0x240E
    34d0:	90 91 0f 24 	lds	r25, 0x240F
    34d4:	19 95       	eicall
    34d6:	ff 91       	pop	r31
    34d8:	ef 91       	pop	r30
    34da:	bf 91       	pop	r27
    34dc:	af 91       	pop	r26
    34de:	9f 91       	pop	r25
    34e0:	8f 91       	pop	r24
    34e2:	7f 91       	pop	r23
    34e4:	6f 91       	pop	r22
    34e6:	5f 91       	pop	r21
    34e8:	4f 91       	pop	r20
    34ea:	3f 91       	pop	r19
    34ec:	2f 91       	pop	r18
    34ee:	0f 90       	pop	r0
    34f0:	0b be       	out	0x3b, r0	; 59
    34f2:	0f 90       	pop	r0
    34f4:	0f be       	out	0x3f, r0	; 63
    34f6:	0f 90       	pop	r0
    34f8:	1f 90       	pop	r1
    34fa:	18 95       	reti

000034fc <__vector_43>:

/* PORTE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT0_vect)      /* External Interrupt 0 */
    34fc:	1f 92       	push	r1
    34fe:	0f 92       	push	r0
    3500:	0f b6       	in	r0, 0x3f	; 63
    3502:	0f 92       	push	r0
    3504:	11 24       	eor	r1, r1
    3506:	0b b6       	in	r0, 0x3b	; 59
    3508:	0f 92       	push	r0
    350a:	2f 93       	push	r18
    350c:	3f 93       	push	r19
    350e:	4f 93       	push	r20
    3510:	5f 93       	push	r21
    3512:	6f 93       	push	r22
    3514:	7f 93       	push	r23
    3516:	8f 93       	push	r24
    3518:	9f 93       	push	r25
    351a:	af 93       	push	r26
    351c:	bf 93       	push	r27
    351e:	ef 93       	push	r30
    3520:	ff 93       	push	r31
    3522:	e0 91 1a 23 	lds	r30, 0x231A
    3526:	f0 91 1b 23 	lds	r31, 0x231B
    352a:	30 97       	sbiw	r30, 0x00	; 0
    352c:	29 f0       	breq	.+10     	; 0x3538 <__vector_43+0x3c>
    352e:	80 91 10 24 	lds	r24, 0x2410
    3532:	90 91 11 24 	lds	r25, 0x2411
    3536:	19 95       	eicall
    3538:	ff 91       	pop	r31
    353a:	ef 91       	pop	r30
    353c:	bf 91       	pop	r27
    353e:	af 91       	pop	r26
    3540:	9f 91       	pop	r25
    3542:	8f 91       	pop	r24
    3544:	7f 91       	pop	r23
    3546:	6f 91       	pop	r22
    3548:	5f 91       	pop	r21
    354a:	4f 91       	pop	r20
    354c:	3f 91       	pop	r19
    354e:	2f 91       	pop	r18
    3550:	0f 90       	pop	r0
    3552:	0b be       	out	0x3b, r0	; 59
    3554:	0f 90       	pop	r0
    3556:	0f be       	out	0x3f, r0	; 63
    3558:	0f 90       	pop	r0
    355a:	1f 90       	pop	r1
    355c:	18 95       	reti

0000355e <__vector_44>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT1_vect)      /* External Interrupt 1 */
    355e:	1f 92       	push	r1
    3560:	0f 92       	push	r0
    3562:	0f b6       	in	r0, 0x3f	; 63
    3564:	0f 92       	push	r0
    3566:	11 24       	eor	r1, r1
    3568:	0b b6       	in	r0, 0x3b	; 59
    356a:	0f 92       	push	r0
    356c:	2f 93       	push	r18
    356e:	3f 93       	push	r19
    3570:	4f 93       	push	r20
    3572:	5f 93       	push	r21
    3574:	6f 93       	push	r22
    3576:	7f 93       	push	r23
    3578:	8f 93       	push	r24
    357a:	9f 93       	push	r25
    357c:	af 93       	push	r26
    357e:	bf 93       	push	r27
    3580:	ef 93       	push	r30
    3582:	ff 93       	push	r31
    3584:	e0 91 1c 23 	lds	r30, 0x231C
    3588:	f0 91 1d 23 	lds	r31, 0x231D
    358c:	30 97       	sbiw	r30, 0x00	; 0
    358e:	29 f0       	breq	.+10     	; 0x359a <__vector_44+0x3c>
    3590:	80 91 12 24 	lds	r24, 0x2412
    3594:	90 91 13 24 	lds	r25, 0x2413
    3598:	19 95       	eicall
    359a:	ff 91       	pop	r31
    359c:	ef 91       	pop	r30
    359e:	bf 91       	pop	r27
    35a0:	af 91       	pop	r26
    35a2:	9f 91       	pop	r25
    35a4:	8f 91       	pop	r24
    35a6:	7f 91       	pop	r23
    35a8:	6f 91       	pop	r22
    35aa:	5f 91       	pop	r21
    35ac:	4f 91       	pop	r20
    35ae:	3f 91       	pop	r19
    35b0:	2f 91       	pop	r18
    35b2:	0f 90       	pop	r0
    35b4:	0b be       	out	0x3b, r0	; 59
    35b6:	0f 90       	pop	r0
    35b8:	0f be       	out	0x3f, r0	; 63
    35ba:	0f 90       	pop	r0
    35bc:	1f 90       	pop	r1
    35be:	18 95       	reti

000035c0 <__vector_45>:

/* TWIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIS_vect)      /* TWI Slave Interrupt */
    35c0:	1f 92       	push	r1
    35c2:	0f 92       	push	r0
    35c4:	0f b6       	in	r0, 0x3f	; 63
    35c6:	0f 92       	push	r0
    35c8:	11 24       	eor	r1, r1
    35ca:	0b b6       	in	r0, 0x3b	; 59
    35cc:	0f 92       	push	r0
    35ce:	2f 93       	push	r18
    35d0:	3f 93       	push	r19
    35d2:	4f 93       	push	r20
    35d4:	5f 93       	push	r21
    35d6:	6f 93       	push	r22
    35d8:	7f 93       	push	r23
    35da:	8f 93       	push	r24
    35dc:	9f 93       	push	r25
    35de:	af 93       	push	r26
    35e0:	bf 93       	push	r27
    35e2:	ef 93       	push	r30
    35e4:	ff 93       	push	r31
    35e6:	e0 91 1e 23 	lds	r30, 0x231E
    35ea:	f0 91 1f 23 	lds	r31, 0x231F
    35ee:	30 97       	sbiw	r30, 0x00	; 0
    35f0:	29 f0       	breq	.+10     	; 0x35fc <__vector_45+0x3c>
    35f2:	80 91 14 24 	lds	r24, 0x2414
    35f6:	90 91 15 24 	lds	r25, 0x2415
    35fa:	19 95       	eicall
    35fc:	ff 91       	pop	r31
    35fe:	ef 91       	pop	r30
    3600:	bf 91       	pop	r27
    3602:	af 91       	pop	r26
    3604:	9f 91       	pop	r25
    3606:	8f 91       	pop	r24
    3608:	7f 91       	pop	r23
    360a:	6f 91       	pop	r22
    360c:	5f 91       	pop	r21
    360e:	4f 91       	pop	r20
    3610:	3f 91       	pop	r19
    3612:	2f 91       	pop	r18
    3614:	0f 90       	pop	r0
    3616:	0b be       	out	0x3b, r0	; 59
    3618:	0f 90       	pop	r0
    361a:	0f be       	out	0x3f, r0	; 63
    361c:	0f 90       	pop	r0
    361e:	1f 90       	pop	r1
    3620:	18 95       	reti

00003622 <__vector_46>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIM_vect)		/* TWI Master Interrupt */
    3622:	1f 92       	push	r1
    3624:	0f 92       	push	r0
    3626:	0f b6       	in	r0, 0x3f	; 63
    3628:	0f 92       	push	r0
    362a:	11 24       	eor	r1, r1
    362c:	0b b6       	in	r0, 0x3b	; 59
    362e:	0f 92       	push	r0
    3630:	2f 93       	push	r18
    3632:	3f 93       	push	r19
    3634:	4f 93       	push	r20
    3636:	5f 93       	push	r21
    3638:	6f 93       	push	r22
    363a:	7f 93       	push	r23
    363c:	8f 93       	push	r24
    363e:	9f 93       	push	r25
    3640:	af 93       	push	r26
    3642:	bf 93       	push	r27
    3644:	ef 93       	push	r30
    3646:	ff 93       	push	r31
    3648:	e0 91 20 23 	lds	r30, 0x2320
    364c:	f0 91 21 23 	lds	r31, 0x2321
    3650:	30 97       	sbiw	r30, 0x00	; 0
    3652:	29 f0       	breq	.+10     	; 0x365e <__vector_46+0x3c>
    3654:	80 91 16 24 	lds	r24, 0x2416
    3658:	90 91 17 24 	lds	r25, 0x2417
    365c:	19 95       	eicall
    365e:	ff 91       	pop	r31
    3660:	ef 91       	pop	r30
    3662:	bf 91       	pop	r27
    3664:	af 91       	pop	r26
    3666:	9f 91       	pop	r25
    3668:	8f 91       	pop	r24
    366a:	7f 91       	pop	r23
    366c:	6f 91       	pop	r22
    366e:	5f 91       	pop	r21
    3670:	4f 91       	pop	r20
    3672:	3f 91       	pop	r19
    3674:	2f 91       	pop	r18
    3676:	0f 90       	pop	r0
    3678:	0b be       	out	0x3b, r0	; 59
    367a:	0f 90       	pop	r0
    367c:	0f be       	out	0x3f, r0	; 63
    367e:	0f 90       	pop	r0
    3680:	1f 90       	pop	r1
    3682:	18 95       	reti

00003684 <__vector_47>:

/* TCE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_OVF_vect)      /* Overflow Interrupt */
    3684:	1f 92       	push	r1
    3686:	0f 92       	push	r0
    3688:	0f b6       	in	r0, 0x3f	; 63
    368a:	0f 92       	push	r0
    368c:	11 24       	eor	r1, r1
    368e:	0b b6       	in	r0, 0x3b	; 59
    3690:	0f 92       	push	r0
    3692:	2f 93       	push	r18
    3694:	3f 93       	push	r19
    3696:	4f 93       	push	r20
    3698:	5f 93       	push	r21
    369a:	6f 93       	push	r22
    369c:	7f 93       	push	r23
    369e:	8f 93       	push	r24
    36a0:	9f 93       	push	r25
    36a2:	af 93       	push	r26
    36a4:	bf 93       	push	r27
    36a6:	ef 93       	push	r30
    36a8:	ff 93       	push	r31
    36aa:	e0 91 22 23 	lds	r30, 0x2322
    36ae:	f0 91 23 23 	lds	r31, 0x2323
    36b2:	30 97       	sbiw	r30, 0x00	; 0
    36b4:	29 f0       	breq	.+10     	; 0x36c0 <__vector_47+0x3c>
    36b6:	80 91 18 24 	lds	r24, 0x2418
    36ba:	90 91 19 24 	lds	r25, 0x2419
    36be:	19 95       	eicall
    36c0:	ff 91       	pop	r31
    36c2:	ef 91       	pop	r30
    36c4:	bf 91       	pop	r27
    36c6:	af 91       	pop	r26
    36c8:	9f 91       	pop	r25
    36ca:	8f 91       	pop	r24
    36cc:	7f 91       	pop	r23
    36ce:	6f 91       	pop	r22
    36d0:	5f 91       	pop	r21
    36d2:	4f 91       	pop	r20
    36d4:	3f 91       	pop	r19
    36d6:	2f 91       	pop	r18
    36d8:	0f 90       	pop	r0
    36da:	0b be       	out	0x3b, r0	; 59
    36dc:	0f 90       	pop	r0
    36de:	0f be       	out	0x3f, r0	; 63
    36e0:	0f 90       	pop	r0
    36e2:	1f 90       	pop	r1
    36e4:	18 95       	reti

000036e6 <__vector_48>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_ERR_vect)      /* Error Interrupt */
    36e6:	1f 92       	push	r1
    36e8:	0f 92       	push	r0
    36ea:	0f b6       	in	r0, 0x3f	; 63
    36ec:	0f 92       	push	r0
    36ee:	11 24       	eor	r1, r1
    36f0:	0b b6       	in	r0, 0x3b	; 59
    36f2:	0f 92       	push	r0
    36f4:	2f 93       	push	r18
    36f6:	3f 93       	push	r19
    36f8:	4f 93       	push	r20
    36fa:	5f 93       	push	r21
    36fc:	6f 93       	push	r22
    36fe:	7f 93       	push	r23
    3700:	8f 93       	push	r24
    3702:	9f 93       	push	r25
    3704:	af 93       	push	r26
    3706:	bf 93       	push	r27
    3708:	ef 93       	push	r30
    370a:	ff 93       	push	r31
    370c:	e0 91 24 23 	lds	r30, 0x2324
    3710:	f0 91 25 23 	lds	r31, 0x2325
    3714:	30 97       	sbiw	r30, 0x00	; 0
    3716:	29 f0       	breq	.+10     	; 0x3722 <__vector_48+0x3c>
    3718:	80 91 1a 24 	lds	r24, 0x241A
    371c:	90 91 1b 24 	lds	r25, 0x241B
    3720:	19 95       	eicall
    3722:	ff 91       	pop	r31
    3724:	ef 91       	pop	r30
    3726:	bf 91       	pop	r27
    3728:	af 91       	pop	r26
    372a:	9f 91       	pop	r25
    372c:	8f 91       	pop	r24
    372e:	7f 91       	pop	r23
    3730:	6f 91       	pop	r22
    3732:	5f 91       	pop	r21
    3734:	4f 91       	pop	r20
    3736:	3f 91       	pop	r19
    3738:	2f 91       	pop	r18
    373a:	0f 90       	pop	r0
    373c:	0b be       	out	0x3b, r0	; 59
    373e:	0f 90       	pop	r0
    3740:	0f be       	out	0x3f, r0	; 63
    3742:	0f 90       	pop	r0
    3744:	1f 90       	pop	r1
    3746:	18 95       	reti

00003748 <__vector_49>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCA_vect)      /* Compare or Capture A Interrupt */
    3748:	1f 92       	push	r1
    374a:	0f 92       	push	r0
    374c:	0f b6       	in	r0, 0x3f	; 63
    374e:	0f 92       	push	r0
    3750:	11 24       	eor	r1, r1
    3752:	0b b6       	in	r0, 0x3b	; 59
    3754:	0f 92       	push	r0
    3756:	2f 93       	push	r18
    3758:	3f 93       	push	r19
    375a:	4f 93       	push	r20
    375c:	5f 93       	push	r21
    375e:	6f 93       	push	r22
    3760:	7f 93       	push	r23
    3762:	8f 93       	push	r24
    3764:	9f 93       	push	r25
    3766:	af 93       	push	r26
    3768:	bf 93       	push	r27
    376a:	ef 93       	push	r30
    376c:	ff 93       	push	r31
    376e:	e0 91 26 23 	lds	r30, 0x2326
    3772:	f0 91 27 23 	lds	r31, 0x2327
    3776:	30 97       	sbiw	r30, 0x00	; 0
    3778:	29 f0       	breq	.+10     	; 0x3784 <__vector_49+0x3c>
    377a:	80 91 1c 24 	lds	r24, 0x241C
    377e:	90 91 1d 24 	lds	r25, 0x241D
    3782:	19 95       	eicall
    3784:	ff 91       	pop	r31
    3786:	ef 91       	pop	r30
    3788:	bf 91       	pop	r27
    378a:	af 91       	pop	r26
    378c:	9f 91       	pop	r25
    378e:	8f 91       	pop	r24
    3790:	7f 91       	pop	r23
    3792:	6f 91       	pop	r22
    3794:	5f 91       	pop	r21
    3796:	4f 91       	pop	r20
    3798:	3f 91       	pop	r19
    379a:	2f 91       	pop	r18
    379c:	0f 90       	pop	r0
    379e:	0b be       	out	0x3b, r0	; 59
    37a0:	0f 90       	pop	r0
    37a2:	0f be       	out	0x3f, r0	; 63
    37a4:	0f 90       	pop	r0
    37a6:	1f 90       	pop	r1
    37a8:	18 95       	reti

000037aa <__vector_50>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCB_vect)      /* Compare or Capture B Interrupt */
    37aa:	1f 92       	push	r1
    37ac:	0f 92       	push	r0
    37ae:	0f b6       	in	r0, 0x3f	; 63
    37b0:	0f 92       	push	r0
    37b2:	11 24       	eor	r1, r1
    37b4:	0b b6       	in	r0, 0x3b	; 59
    37b6:	0f 92       	push	r0
    37b8:	2f 93       	push	r18
    37ba:	3f 93       	push	r19
    37bc:	4f 93       	push	r20
    37be:	5f 93       	push	r21
    37c0:	6f 93       	push	r22
    37c2:	7f 93       	push	r23
    37c4:	8f 93       	push	r24
    37c6:	9f 93       	push	r25
    37c8:	af 93       	push	r26
    37ca:	bf 93       	push	r27
    37cc:	ef 93       	push	r30
    37ce:	ff 93       	push	r31
    37d0:	e0 91 28 23 	lds	r30, 0x2328
    37d4:	f0 91 29 23 	lds	r31, 0x2329
    37d8:	30 97       	sbiw	r30, 0x00	; 0
    37da:	29 f0       	breq	.+10     	; 0x37e6 <__vector_50+0x3c>
    37dc:	80 91 1e 24 	lds	r24, 0x241E
    37e0:	90 91 1f 24 	lds	r25, 0x241F
    37e4:	19 95       	eicall
    37e6:	ff 91       	pop	r31
    37e8:	ef 91       	pop	r30
    37ea:	bf 91       	pop	r27
    37ec:	af 91       	pop	r26
    37ee:	9f 91       	pop	r25
    37f0:	8f 91       	pop	r24
    37f2:	7f 91       	pop	r23
    37f4:	6f 91       	pop	r22
    37f6:	5f 91       	pop	r21
    37f8:	4f 91       	pop	r20
    37fa:	3f 91       	pop	r19
    37fc:	2f 91       	pop	r18
    37fe:	0f 90       	pop	r0
    3800:	0b be       	out	0x3b, r0	; 59
    3802:	0f 90       	pop	r0
    3804:	0f be       	out	0x3f, r0	; 63
    3806:	0f 90       	pop	r0
    3808:	1f 90       	pop	r1
    380a:	18 95       	reti

0000380c <__vector_51>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCC_vect)      /* Compare or Capture C Interrupt */
    380c:	1f 92       	push	r1
    380e:	0f 92       	push	r0
    3810:	0f b6       	in	r0, 0x3f	; 63
    3812:	0f 92       	push	r0
    3814:	11 24       	eor	r1, r1
    3816:	0b b6       	in	r0, 0x3b	; 59
    3818:	0f 92       	push	r0
    381a:	2f 93       	push	r18
    381c:	3f 93       	push	r19
    381e:	4f 93       	push	r20
    3820:	5f 93       	push	r21
    3822:	6f 93       	push	r22
    3824:	7f 93       	push	r23
    3826:	8f 93       	push	r24
    3828:	9f 93       	push	r25
    382a:	af 93       	push	r26
    382c:	bf 93       	push	r27
    382e:	ef 93       	push	r30
    3830:	ff 93       	push	r31
    3832:	e0 91 2a 23 	lds	r30, 0x232A
    3836:	f0 91 2b 23 	lds	r31, 0x232B
    383a:	30 97       	sbiw	r30, 0x00	; 0
    383c:	29 f0       	breq	.+10     	; 0x3848 <__vector_51+0x3c>
    383e:	80 91 20 24 	lds	r24, 0x2420
    3842:	90 91 21 24 	lds	r25, 0x2421
    3846:	19 95       	eicall
    3848:	ff 91       	pop	r31
    384a:	ef 91       	pop	r30
    384c:	bf 91       	pop	r27
    384e:	af 91       	pop	r26
    3850:	9f 91       	pop	r25
    3852:	8f 91       	pop	r24
    3854:	7f 91       	pop	r23
    3856:	6f 91       	pop	r22
    3858:	5f 91       	pop	r21
    385a:	4f 91       	pop	r20
    385c:	3f 91       	pop	r19
    385e:	2f 91       	pop	r18
    3860:	0f 90       	pop	r0
    3862:	0b be       	out	0x3b, r0	; 59
    3864:	0f 90       	pop	r0
    3866:	0f be       	out	0x3f, r0	; 63
    3868:	0f 90       	pop	r0
    386a:	1f 90       	pop	r1
    386c:	18 95       	reti

0000386e <__vector_52>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCD_vect)      /* Compare or Capture D Interrupt */
    386e:	1f 92       	push	r1
    3870:	0f 92       	push	r0
    3872:	0f b6       	in	r0, 0x3f	; 63
    3874:	0f 92       	push	r0
    3876:	11 24       	eor	r1, r1
    3878:	0b b6       	in	r0, 0x3b	; 59
    387a:	0f 92       	push	r0
    387c:	2f 93       	push	r18
    387e:	3f 93       	push	r19
    3880:	4f 93       	push	r20
    3882:	5f 93       	push	r21
    3884:	6f 93       	push	r22
    3886:	7f 93       	push	r23
    3888:	8f 93       	push	r24
    388a:	9f 93       	push	r25
    388c:	af 93       	push	r26
    388e:	bf 93       	push	r27
    3890:	ef 93       	push	r30
    3892:	ff 93       	push	r31
    3894:	e0 91 2c 23 	lds	r30, 0x232C
    3898:	f0 91 2d 23 	lds	r31, 0x232D
    389c:	30 97       	sbiw	r30, 0x00	; 0
    389e:	29 f0       	breq	.+10     	; 0x38aa <__vector_52+0x3c>
    38a0:	80 91 22 24 	lds	r24, 0x2422
    38a4:	90 91 23 24 	lds	r25, 0x2423
    38a8:	19 95       	eicall
    38aa:	ff 91       	pop	r31
    38ac:	ef 91       	pop	r30
    38ae:	bf 91       	pop	r27
    38b0:	af 91       	pop	r26
    38b2:	9f 91       	pop	r25
    38b4:	8f 91       	pop	r24
    38b6:	7f 91       	pop	r23
    38b8:	6f 91       	pop	r22
    38ba:	5f 91       	pop	r21
    38bc:	4f 91       	pop	r20
    38be:	3f 91       	pop	r19
    38c0:	2f 91       	pop	r18
    38c2:	0f 90       	pop	r0
    38c4:	0b be       	out	0x3b, r0	; 59
    38c6:	0f 90       	pop	r0
    38c8:	0f be       	out	0x3f, r0	; 63
    38ca:	0f 90       	pop	r0
    38cc:	1f 90       	pop	r1
    38ce:	18 95       	reti

000038d0 <__vector_53>:

/* TCE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_OVF_vect)      /* Overflow Interrupt */
    38d0:	1f 92       	push	r1
    38d2:	0f 92       	push	r0
    38d4:	0f b6       	in	r0, 0x3f	; 63
    38d6:	0f 92       	push	r0
    38d8:	11 24       	eor	r1, r1
    38da:	0b b6       	in	r0, 0x3b	; 59
    38dc:	0f 92       	push	r0
    38de:	2f 93       	push	r18
    38e0:	3f 93       	push	r19
    38e2:	4f 93       	push	r20
    38e4:	5f 93       	push	r21
    38e6:	6f 93       	push	r22
    38e8:	7f 93       	push	r23
    38ea:	8f 93       	push	r24
    38ec:	9f 93       	push	r25
    38ee:	af 93       	push	r26
    38f0:	bf 93       	push	r27
    38f2:	ef 93       	push	r30
    38f4:	ff 93       	push	r31
    38f6:	e0 91 2e 23 	lds	r30, 0x232E
    38fa:	f0 91 2f 23 	lds	r31, 0x232F
    38fe:	30 97       	sbiw	r30, 0x00	; 0
    3900:	29 f0       	breq	.+10     	; 0x390c <__vector_53+0x3c>
    3902:	80 91 24 24 	lds	r24, 0x2424
    3906:	90 91 25 24 	lds	r25, 0x2425
    390a:	19 95       	eicall
    390c:	ff 91       	pop	r31
    390e:	ef 91       	pop	r30
    3910:	bf 91       	pop	r27
    3912:	af 91       	pop	r26
    3914:	9f 91       	pop	r25
    3916:	8f 91       	pop	r24
    3918:	7f 91       	pop	r23
    391a:	6f 91       	pop	r22
    391c:	5f 91       	pop	r21
    391e:	4f 91       	pop	r20
    3920:	3f 91       	pop	r19
    3922:	2f 91       	pop	r18
    3924:	0f 90       	pop	r0
    3926:	0b be       	out	0x3b, r0	; 59
    3928:	0f 90       	pop	r0
    392a:	0f be       	out	0x3f, r0	; 63
    392c:	0f 90       	pop	r0
    392e:	1f 90       	pop	r1
    3930:	18 95       	reti

00003932 <__vector_54>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_ERR_vect)      /* Error Interrupt */
    3932:	1f 92       	push	r1
    3934:	0f 92       	push	r0
    3936:	0f b6       	in	r0, 0x3f	; 63
    3938:	0f 92       	push	r0
    393a:	11 24       	eor	r1, r1
    393c:	0b b6       	in	r0, 0x3b	; 59
    393e:	0f 92       	push	r0
    3940:	2f 93       	push	r18
    3942:	3f 93       	push	r19
    3944:	4f 93       	push	r20
    3946:	5f 93       	push	r21
    3948:	6f 93       	push	r22
    394a:	7f 93       	push	r23
    394c:	8f 93       	push	r24
    394e:	9f 93       	push	r25
    3950:	af 93       	push	r26
    3952:	bf 93       	push	r27
    3954:	ef 93       	push	r30
    3956:	ff 93       	push	r31
    3958:	e0 91 30 23 	lds	r30, 0x2330
    395c:	f0 91 31 23 	lds	r31, 0x2331
    3960:	30 97       	sbiw	r30, 0x00	; 0
    3962:	29 f0       	breq	.+10     	; 0x396e <__vector_54+0x3c>
    3964:	80 91 26 24 	lds	r24, 0x2426
    3968:	90 91 27 24 	lds	r25, 0x2427
    396c:	19 95       	eicall
    396e:	ff 91       	pop	r31
    3970:	ef 91       	pop	r30
    3972:	bf 91       	pop	r27
    3974:	af 91       	pop	r26
    3976:	9f 91       	pop	r25
    3978:	8f 91       	pop	r24
    397a:	7f 91       	pop	r23
    397c:	6f 91       	pop	r22
    397e:	5f 91       	pop	r21
    3980:	4f 91       	pop	r20
    3982:	3f 91       	pop	r19
    3984:	2f 91       	pop	r18
    3986:	0f 90       	pop	r0
    3988:	0b be       	out	0x3b, r0	; 59
    398a:	0f 90       	pop	r0
    398c:	0f be       	out	0x3f, r0	; 63
    398e:	0f 90       	pop	r0
    3990:	1f 90       	pop	r1
    3992:	18 95       	reti

00003994 <__vector_55>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCA_vect)      /* Compare or Capture A Interrupt */
    3994:	1f 92       	push	r1
    3996:	0f 92       	push	r0
    3998:	0f b6       	in	r0, 0x3f	; 63
    399a:	0f 92       	push	r0
    399c:	11 24       	eor	r1, r1
    399e:	0b b6       	in	r0, 0x3b	; 59
    39a0:	0f 92       	push	r0
    39a2:	2f 93       	push	r18
    39a4:	3f 93       	push	r19
    39a6:	4f 93       	push	r20
    39a8:	5f 93       	push	r21
    39aa:	6f 93       	push	r22
    39ac:	7f 93       	push	r23
    39ae:	8f 93       	push	r24
    39b0:	9f 93       	push	r25
    39b2:	af 93       	push	r26
    39b4:	bf 93       	push	r27
    39b6:	ef 93       	push	r30
    39b8:	ff 93       	push	r31
    39ba:	e0 91 32 23 	lds	r30, 0x2332
    39be:	f0 91 33 23 	lds	r31, 0x2333
    39c2:	30 97       	sbiw	r30, 0x00	; 0
    39c4:	29 f0       	breq	.+10     	; 0x39d0 <__vector_55+0x3c>
    39c6:	80 91 28 24 	lds	r24, 0x2428
    39ca:	90 91 29 24 	lds	r25, 0x2429
    39ce:	19 95       	eicall
    39d0:	ff 91       	pop	r31
    39d2:	ef 91       	pop	r30
    39d4:	bf 91       	pop	r27
    39d6:	af 91       	pop	r26
    39d8:	9f 91       	pop	r25
    39da:	8f 91       	pop	r24
    39dc:	7f 91       	pop	r23
    39de:	6f 91       	pop	r22
    39e0:	5f 91       	pop	r21
    39e2:	4f 91       	pop	r20
    39e4:	3f 91       	pop	r19
    39e6:	2f 91       	pop	r18
    39e8:	0f 90       	pop	r0
    39ea:	0b be       	out	0x3b, r0	; 59
    39ec:	0f 90       	pop	r0
    39ee:	0f be       	out	0x3f, r0	; 63
    39f0:	0f 90       	pop	r0
    39f2:	1f 90       	pop	r1
    39f4:	18 95       	reti

000039f6 <__vector_56>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCB_vect)      /* Compare or Capture B Interrupt */
    39f6:	1f 92       	push	r1
    39f8:	0f 92       	push	r0
    39fa:	0f b6       	in	r0, 0x3f	; 63
    39fc:	0f 92       	push	r0
    39fe:	11 24       	eor	r1, r1
    3a00:	0b b6       	in	r0, 0x3b	; 59
    3a02:	0f 92       	push	r0
    3a04:	2f 93       	push	r18
    3a06:	3f 93       	push	r19
    3a08:	4f 93       	push	r20
    3a0a:	5f 93       	push	r21
    3a0c:	6f 93       	push	r22
    3a0e:	7f 93       	push	r23
    3a10:	8f 93       	push	r24
    3a12:	9f 93       	push	r25
    3a14:	af 93       	push	r26
    3a16:	bf 93       	push	r27
    3a18:	ef 93       	push	r30
    3a1a:	ff 93       	push	r31
    3a1c:	e0 91 34 23 	lds	r30, 0x2334
    3a20:	f0 91 35 23 	lds	r31, 0x2335
    3a24:	30 97       	sbiw	r30, 0x00	; 0
    3a26:	29 f0       	breq	.+10     	; 0x3a32 <__vector_56+0x3c>
    3a28:	80 91 2a 24 	lds	r24, 0x242A
    3a2c:	90 91 2b 24 	lds	r25, 0x242B
    3a30:	19 95       	eicall
    3a32:	ff 91       	pop	r31
    3a34:	ef 91       	pop	r30
    3a36:	bf 91       	pop	r27
    3a38:	af 91       	pop	r26
    3a3a:	9f 91       	pop	r25
    3a3c:	8f 91       	pop	r24
    3a3e:	7f 91       	pop	r23
    3a40:	6f 91       	pop	r22
    3a42:	5f 91       	pop	r21
    3a44:	4f 91       	pop	r20
    3a46:	3f 91       	pop	r19
    3a48:	2f 91       	pop	r18
    3a4a:	0f 90       	pop	r0
    3a4c:	0b be       	out	0x3b, r0	; 59
    3a4e:	0f 90       	pop	r0
    3a50:	0f be       	out	0x3f, r0	; 63
    3a52:	0f 90       	pop	r0
    3a54:	1f 90       	pop	r1
    3a56:	18 95       	reti

00003a58 <__vector_57>:

/* SPIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIE_INT_vect)      /* SPI Interrupt */
    3a58:	1f 92       	push	r1
    3a5a:	0f 92       	push	r0
    3a5c:	0f b6       	in	r0, 0x3f	; 63
    3a5e:	0f 92       	push	r0
    3a60:	11 24       	eor	r1, r1
    3a62:	0b b6       	in	r0, 0x3b	; 59
    3a64:	0f 92       	push	r0
    3a66:	2f 93       	push	r18
    3a68:	3f 93       	push	r19
    3a6a:	4f 93       	push	r20
    3a6c:	5f 93       	push	r21
    3a6e:	6f 93       	push	r22
    3a70:	7f 93       	push	r23
    3a72:	8f 93       	push	r24
    3a74:	9f 93       	push	r25
    3a76:	af 93       	push	r26
    3a78:	bf 93       	push	r27
    3a7a:	ef 93       	push	r30
    3a7c:	ff 93       	push	r31
    3a7e:	e0 91 36 23 	lds	r30, 0x2336
    3a82:	f0 91 37 23 	lds	r31, 0x2337
    3a86:	30 97       	sbiw	r30, 0x00	; 0
    3a88:	29 f0       	breq	.+10     	; 0x3a94 <__vector_57+0x3c>
    3a8a:	80 91 2c 24 	lds	r24, 0x242C
    3a8e:	90 91 2d 24 	lds	r25, 0x242D
    3a92:	19 95       	eicall
    3a94:	ff 91       	pop	r31
    3a96:	ef 91       	pop	r30
    3a98:	bf 91       	pop	r27
    3a9a:	af 91       	pop	r26
    3a9c:	9f 91       	pop	r25
    3a9e:	8f 91       	pop	r24
    3aa0:	7f 91       	pop	r23
    3aa2:	6f 91       	pop	r22
    3aa4:	5f 91       	pop	r21
    3aa6:	4f 91       	pop	r20
    3aa8:	3f 91       	pop	r19
    3aaa:	2f 91       	pop	r18
    3aac:	0f 90       	pop	r0
    3aae:	0b be       	out	0x3b, r0	; 59
    3ab0:	0f 90       	pop	r0
    3ab2:	0f be       	out	0x3f, r0	; 63
    3ab4:	0f 90       	pop	r0
    3ab6:	1f 90       	pop	r1
    3ab8:	18 95       	reti

00003aba <__vector_58>:

/* USARTE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_RXC_vect)      /* Reception Complete Interrupt */
    3aba:	1f 92       	push	r1
    3abc:	0f 92       	push	r0
    3abe:	0f b6       	in	r0, 0x3f	; 63
    3ac0:	0f 92       	push	r0
    3ac2:	11 24       	eor	r1, r1
    3ac4:	0b b6       	in	r0, 0x3b	; 59
    3ac6:	0f 92       	push	r0
    3ac8:	2f 93       	push	r18
    3aca:	3f 93       	push	r19
    3acc:	4f 93       	push	r20
    3ace:	5f 93       	push	r21
    3ad0:	6f 93       	push	r22
    3ad2:	7f 93       	push	r23
    3ad4:	8f 93       	push	r24
    3ad6:	9f 93       	push	r25
    3ad8:	af 93       	push	r26
    3ada:	bf 93       	push	r27
    3adc:	ef 93       	push	r30
    3ade:	ff 93       	push	r31
    3ae0:	e0 91 38 23 	lds	r30, 0x2338
    3ae4:	f0 91 39 23 	lds	r31, 0x2339
    3ae8:	30 97       	sbiw	r30, 0x00	; 0
    3aea:	29 f0       	breq	.+10     	; 0x3af6 <__vector_58+0x3c>
    3aec:	80 91 2e 24 	lds	r24, 0x242E
    3af0:	90 91 2f 24 	lds	r25, 0x242F
    3af4:	19 95       	eicall
    3af6:	ff 91       	pop	r31
    3af8:	ef 91       	pop	r30
    3afa:	bf 91       	pop	r27
    3afc:	af 91       	pop	r26
    3afe:	9f 91       	pop	r25
    3b00:	8f 91       	pop	r24
    3b02:	7f 91       	pop	r23
    3b04:	6f 91       	pop	r22
    3b06:	5f 91       	pop	r21
    3b08:	4f 91       	pop	r20
    3b0a:	3f 91       	pop	r19
    3b0c:	2f 91       	pop	r18
    3b0e:	0f 90       	pop	r0
    3b10:	0b be       	out	0x3b, r0	; 59
    3b12:	0f 90       	pop	r0
    3b14:	0f be       	out	0x3f, r0	; 63
    3b16:	0f 90       	pop	r0
    3b18:	1f 90       	pop	r1
    3b1a:	18 95       	reti

00003b1c <__vector_59>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_DRE_vect)      /* Data Register Empty Interrupt */
    3b1c:	1f 92       	push	r1
    3b1e:	0f 92       	push	r0
    3b20:	0f b6       	in	r0, 0x3f	; 63
    3b22:	0f 92       	push	r0
    3b24:	11 24       	eor	r1, r1
    3b26:	0b b6       	in	r0, 0x3b	; 59
    3b28:	0f 92       	push	r0
    3b2a:	2f 93       	push	r18
    3b2c:	3f 93       	push	r19
    3b2e:	4f 93       	push	r20
    3b30:	5f 93       	push	r21
    3b32:	6f 93       	push	r22
    3b34:	7f 93       	push	r23
    3b36:	8f 93       	push	r24
    3b38:	9f 93       	push	r25
    3b3a:	af 93       	push	r26
    3b3c:	bf 93       	push	r27
    3b3e:	ef 93       	push	r30
    3b40:	ff 93       	push	r31
    3b42:	e0 91 3a 23 	lds	r30, 0x233A
    3b46:	f0 91 3b 23 	lds	r31, 0x233B
    3b4a:	30 97       	sbiw	r30, 0x00	; 0
    3b4c:	29 f0       	breq	.+10     	; 0x3b58 <__vector_59+0x3c>
    3b4e:	80 91 30 24 	lds	r24, 0x2430
    3b52:	90 91 31 24 	lds	r25, 0x2431
    3b56:	19 95       	eicall
    3b58:	ff 91       	pop	r31
    3b5a:	ef 91       	pop	r30
    3b5c:	bf 91       	pop	r27
    3b5e:	af 91       	pop	r26
    3b60:	9f 91       	pop	r25
    3b62:	8f 91       	pop	r24
    3b64:	7f 91       	pop	r23
    3b66:	6f 91       	pop	r22
    3b68:	5f 91       	pop	r21
    3b6a:	4f 91       	pop	r20
    3b6c:	3f 91       	pop	r19
    3b6e:	2f 91       	pop	r18
    3b70:	0f 90       	pop	r0
    3b72:	0b be       	out	0x3b, r0	; 59
    3b74:	0f 90       	pop	r0
    3b76:	0f be       	out	0x3f, r0	; 63
    3b78:	0f 90       	pop	r0
    3b7a:	1f 90       	pop	r1
    3b7c:	18 95       	reti

00003b7e <__vector_60>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_TXC_vect)      /* Transmission Complete Interrupt */
    3b7e:	1f 92       	push	r1
    3b80:	0f 92       	push	r0
    3b82:	0f b6       	in	r0, 0x3f	; 63
    3b84:	0f 92       	push	r0
    3b86:	11 24       	eor	r1, r1
    3b88:	0b b6       	in	r0, 0x3b	; 59
    3b8a:	0f 92       	push	r0
    3b8c:	2f 93       	push	r18
    3b8e:	3f 93       	push	r19
    3b90:	4f 93       	push	r20
    3b92:	5f 93       	push	r21
    3b94:	6f 93       	push	r22
    3b96:	7f 93       	push	r23
    3b98:	8f 93       	push	r24
    3b9a:	9f 93       	push	r25
    3b9c:	af 93       	push	r26
    3b9e:	bf 93       	push	r27
    3ba0:	ef 93       	push	r30
    3ba2:	ff 93       	push	r31
    3ba4:	e0 91 3c 23 	lds	r30, 0x233C
    3ba8:	f0 91 3d 23 	lds	r31, 0x233D
    3bac:	30 97       	sbiw	r30, 0x00	; 0
    3bae:	29 f0       	breq	.+10     	; 0x3bba <__vector_60+0x3c>
    3bb0:	80 91 32 24 	lds	r24, 0x2432
    3bb4:	90 91 33 24 	lds	r25, 0x2433
    3bb8:	19 95       	eicall
    3bba:	ff 91       	pop	r31
    3bbc:	ef 91       	pop	r30
    3bbe:	bf 91       	pop	r27
    3bc0:	af 91       	pop	r26
    3bc2:	9f 91       	pop	r25
    3bc4:	8f 91       	pop	r24
    3bc6:	7f 91       	pop	r23
    3bc8:	6f 91       	pop	r22
    3bca:	5f 91       	pop	r21
    3bcc:	4f 91       	pop	r20
    3bce:	3f 91       	pop	r19
    3bd0:	2f 91       	pop	r18
    3bd2:	0f 90       	pop	r0
    3bd4:	0b be       	out	0x3b, r0	; 59
    3bd6:	0f 90       	pop	r0
    3bd8:	0f be       	out	0x3f, r0	; 63
    3bda:	0f 90       	pop	r0
    3bdc:	1f 90       	pop	r1
    3bde:	18 95       	reti

00003be0 <__vector_61>:

/* USARTE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_RXC_vect)      /* Reception Complete Interrupt */
    3be0:	1f 92       	push	r1
    3be2:	0f 92       	push	r0
    3be4:	0f b6       	in	r0, 0x3f	; 63
    3be6:	0f 92       	push	r0
    3be8:	11 24       	eor	r1, r1
    3bea:	0b b6       	in	r0, 0x3b	; 59
    3bec:	0f 92       	push	r0
    3bee:	2f 93       	push	r18
    3bf0:	3f 93       	push	r19
    3bf2:	4f 93       	push	r20
    3bf4:	5f 93       	push	r21
    3bf6:	6f 93       	push	r22
    3bf8:	7f 93       	push	r23
    3bfa:	8f 93       	push	r24
    3bfc:	9f 93       	push	r25
    3bfe:	af 93       	push	r26
    3c00:	bf 93       	push	r27
    3c02:	ef 93       	push	r30
    3c04:	ff 93       	push	r31
    3c06:	e0 91 3e 23 	lds	r30, 0x233E
    3c0a:	f0 91 3f 23 	lds	r31, 0x233F
    3c0e:	30 97       	sbiw	r30, 0x00	; 0
    3c10:	29 f0       	breq	.+10     	; 0x3c1c <__vector_61+0x3c>
    3c12:	80 91 34 24 	lds	r24, 0x2434
    3c16:	90 91 35 24 	lds	r25, 0x2435
    3c1a:	19 95       	eicall
    3c1c:	ff 91       	pop	r31
    3c1e:	ef 91       	pop	r30
    3c20:	bf 91       	pop	r27
    3c22:	af 91       	pop	r26
    3c24:	9f 91       	pop	r25
    3c26:	8f 91       	pop	r24
    3c28:	7f 91       	pop	r23
    3c2a:	6f 91       	pop	r22
    3c2c:	5f 91       	pop	r21
    3c2e:	4f 91       	pop	r20
    3c30:	3f 91       	pop	r19
    3c32:	2f 91       	pop	r18
    3c34:	0f 90       	pop	r0
    3c36:	0b be       	out	0x3b, r0	; 59
    3c38:	0f 90       	pop	r0
    3c3a:	0f be       	out	0x3f, r0	; 63
    3c3c:	0f 90       	pop	r0
    3c3e:	1f 90       	pop	r1
    3c40:	18 95       	reti

00003c42 <__vector_62>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_DRE_vect)      /* Data Register Empty Interrupt */
    3c42:	1f 92       	push	r1
    3c44:	0f 92       	push	r0
    3c46:	0f b6       	in	r0, 0x3f	; 63
    3c48:	0f 92       	push	r0
    3c4a:	11 24       	eor	r1, r1
    3c4c:	0b b6       	in	r0, 0x3b	; 59
    3c4e:	0f 92       	push	r0
    3c50:	2f 93       	push	r18
    3c52:	3f 93       	push	r19
    3c54:	4f 93       	push	r20
    3c56:	5f 93       	push	r21
    3c58:	6f 93       	push	r22
    3c5a:	7f 93       	push	r23
    3c5c:	8f 93       	push	r24
    3c5e:	9f 93       	push	r25
    3c60:	af 93       	push	r26
    3c62:	bf 93       	push	r27
    3c64:	ef 93       	push	r30
    3c66:	ff 93       	push	r31
    3c68:	e0 91 40 23 	lds	r30, 0x2340
    3c6c:	f0 91 41 23 	lds	r31, 0x2341
    3c70:	30 97       	sbiw	r30, 0x00	; 0
    3c72:	29 f0       	breq	.+10     	; 0x3c7e <__vector_62+0x3c>
    3c74:	80 91 36 24 	lds	r24, 0x2436
    3c78:	90 91 37 24 	lds	r25, 0x2437
    3c7c:	19 95       	eicall
    3c7e:	ff 91       	pop	r31
    3c80:	ef 91       	pop	r30
    3c82:	bf 91       	pop	r27
    3c84:	af 91       	pop	r26
    3c86:	9f 91       	pop	r25
    3c88:	8f 91       	pop	r24
    3c8a:	7f 91       	pop	r23
    3c8c:	6f 91       	pop	r22
    3c8e:	5f 91       	pop	r21
    3c90:	4f 91       	pop	r20
    3c92:	3f 91       	pop	r19
    3c94:	2f 91       	pop	r18
    3c96:	0f 90       	pop	r0
    3c98:	0b be       	out	0x3b, r0	; 59
    3c9a:	0f 90       	pop	r0
    3c9c:	0f be       	out	0x3f, r0	; 63
    3c9e:	0f 90       	pop	r0
    3ca0:	1f 90       	pop	r1
    3ca2:	18 95       	reti

00003ca4 <__vector_63>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_TXC_vect)      /* Transmission Complete Interrupt */
    3ca4:	1f 92       	push	r1
    3ca6:	0f 92       	push	r0
    3ca8:	0f b6       	in	r0, 0x3f	; 63
    3caa:	0f 92       	push	r0
    3cac:	11 24       	eor	r1, r1
    3cae:	0b b6       	in	r0, 0x3b	; 59
    3cb0:	0f 92       	push	r0
    3cb2:	2f 93       	push	r18
    3cb4:	3f 93       	push	r19
    3cb6:	4f 93       	push	r20
    3cb8:	5f 93       	push	r21
    3cba:	6f 93       	push	r22
    3cbc:	7f 93       	push	r23
    3cbe:	8f 93       	push	r24
    3cc0:	9f 93       	push	r25
    3cc2:	af 93       	push	r26
    3cc4:	bf 93       	push	r27
    3cc6:	ef 93       	push	r30
    3cc8:	ff 93       	push	r31
    3cca:	e0 91 42 23 	lds	r30, 0x2342
    3cce:	f0 91 43 23 	lds	r31, 0x2343
    3cd2:	30 97       	sbiw	r30, 0x00	; 0
    3cd4:	29 f0       	breq	.+10     	; 0x3ce0 <__vector_63+0x3c>
    3cd6:	80 91 38 24 	lds	r24, 0x2438
    3cda:	90 91 39 24 	lds	r25, 0x2439
    3cde:	19 95       	eicall
    3ce0:	ff 91       	pop	r31
    3ce2:	ef 91       	pop	r30
    3ce4:	bf 91       	pop	r27
    3ce6:	af 91       	pop	r26
    3ce8:	9f 91       	pop	r25
    3cea:	8f 91       	pop	r24
    3cec:	7f 91       	pop	r23
    3cee:	6f 91       	pop	r22
    3cf0:	5f 91       	pop	r21
    3cf2:	4f 91       	pop	r20
    3cf4:	3f 91       	pop	r19
    3cf6:	2f 91       	pop	r18
    3cf8:	0f 90       	pop	r0
    3cfa:	0b be       	out	0x3b, r0	; 59
    3cfc:	0f 90       	pop	r0
    3cfe:	0f be       	out	0x3f, r0	; 63
    3d00:	0f 90       	pop	r0
    3d02:	1f 90       	pop	r1
    3d04:	18 95       	reti

00003d06 <__vector_64>:

/* PORTD interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT0_vect)      /* External Interrupt 0 */
    3d06:	1f 92       	push	r1
    3d08:	0f 92       	push	r0
    3d0a:	0f b6       	in	r0, 0x3f	; 63
    3d0c:	0f 92       	push	r0
    3d0e:	11 24       	eor	r1, r1
    3d10:	0b b6       	in	r0, 0x3b	; 59
    3d12:	0f 92       	push	r0
    3d14:	2f 93       	push	r18
    3d16:	3f 93       	push	r19
    3d18:	4f 93       	push	r20
    3d1a:	5f 93       	push	r21
    3d1c:	6f 93       	push	r22
    3d1e:	7f 93       	push	r23
    3d20:	8f 93       	push	r24
    3d22:	9f 93       	push	r25
    3d24:	af 93       	push	r26
    3d26:	bf 93       	push	r27
    3d28:	ef 93       	push	r30
    3d2a:	ff 93       	push	r31
    3d2c:	e0 91 44 23 	lds	r30, 0x2344
    3d30:	f0 91 45 23 	lds	r31, 0x2345
    3d34:	30 97       	sbiw	r30, 0x00	; 0
    3d36:	29 f0       	breq	.+10     	; 0x3d42 <__vector_64+0x3c>
    3d38:	80 91 3a 24 	lds	r24, 0x243A
    3d3c:	90 91 3b 24 	lds	r25, 0x243B
    3d40:	19 95       	eicall
    3d42:	ff 91       	pop	r31
    3d44:	ef 91       	pop	r30
    3d46:	bf 91       	pop	r27
    3d48:	af 91       	pop	r26
    3d4a:	9f 91       	pop	r25
    3d4c:	8f 91       	pop	r24
    3d4e:	7f 91       	pop	r23
    3d50:	6f 91       	pop	r22
    3d52:	5f 91       	pop	r21
    3d54:	4f 91       	pop	r20
    3d56:	3f 91       	pop	r19
    3d58:	2f 91       	pop	r18
    3d5a:	0f 90       	pop	r0
    3d5c:	0b be       	out	0x3b, r0	; 59
    3d5e:	0f 90       	pop	r0
    3d60:	0f be       	out	0x3f, r0	; 63
    3d62:	0f 90       	pop	r0
    3d64:	1f 90       	pop	r1
    3d66:	18 95       	reti

00003d68 <__vector_65>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT1_vect)      /* External Interrupt 1 */
    3d68:	1f 92       	push	r1
    3d6a:	0f 92       	push	r0
    3d6c:	0f b6       	in	r0, 0x3f	; 63
    3d6e:	0f 92       	push	r0
    3d70:	11 24       	eor	r1, r1
    3d72:	0b b6       	in	r0, 0x3b	; 59
    3d74:	0f 92       	push	r0
    3d76:	2f 93       	push	r18
    3d78:	3f 93       	push	r19
    3d7a:	4f 93       	push	r20
    3d7c:	5f 93       	push	r21
    3d7e:	6f 93       	push	r22
    3d80:	7f 93       	push	r23
    3d82:	8f 93       	push	r24
    3d84:	9f 93       	push	r25
    3d86:	af 93       	push	r26
    3d88:	bf 93       	push	r27
    3d8a:	ef 93       	push	r30
    3d8c:	ff 93       	push	r31
    3d8e:	e0 91 46 23 	lds	r30, 0x2346
    3d92:	f0 91 47 23 	lds	r31, 0x2347
    3d96:	30 97       	sbiw	r30, 0x00	; 0
    3d98:	29 f0       	breq	.+10     	; 0x3da4 <__vector_65+0x3c>
    3d9a:	80 91 3c 24 	lds	r24, 0x243C
    3d9e:	90 91 3d 24 	lds	r25, 0x243D
    3da2:	19 95       	eicall
    3da4:	ff 91       	pop	r31
    3da6:	ef 91       	pop	r30
    3da8:	bf 91       	pop	r27
    3daa:	af 91       	pop	r26
    3dac:	9f 91       	pop	r25
    3dae:	8f 91       	pop	r24
    3db0:	7f 91       	pop	r23
    3db2:	6f 91       	pop	r22
    3db4:	5f 91       	pop	r21
    3db6:	4f 91       	pop	r20
    3db8:	3f 91       	pop	r19
    3dba:	2f 91       	pop	r18
    3dbc:	0f 90       	pop	r0
    3dbe:	0b be       	out	0x3b, r0	; 59
    3dc0:	0f 90       	pop	r0
    3dc2:	0f be       	out	0x3f, r0	; 63
    3dc4:	0f 90       	pop	r0
    3dc6:	1f 90       	pop	r1
    3dc8:	18 95       	reti

00003dca <__vector_66>:

/* PORTA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT0_vect)      /* External Interrupt 0 */
    3dca:	1f 92       	push	r1
    3dcc:	0f 92       	push	r0
    3dce:	0f b6       	in	r0, 0x3f	; 63
    3dd0:	0f 92       	push	r0
    3dd2:	11 24       	eor	r1, r1
    3dd4:	0b b6       	in	r0, 0x3b	; 59
    3dd6:	0f 92       	push	r0
    3dd8:	2f 93       	push	r18
    3dda:	3f 93       	push	r19
    3ddc:	4f 93       	push	r20
    3dde:	5f 93       	push	r21
    3de0:	6f 93       	push	r22
    3de2:	7f 93       	push	r23
    3de4:	8f 93       	push	r24
    3de6:	9f 93       	push	r25
    3de8:	af 93       	push	r26
    3dea:	bf 93       	push	r27
    3dec:	ef 93       	push	r30
    3dee:	ff 93       	push	r31
    3df0:	e0 91 48 23 	lds	r30, 0x2348
    3df4:	f0 91 49 23 	lds	r31, 0x2349
    3df8:	30 97       	sbiw	r30, 0x00	; 0
    3dfa:	29 f0       	breq	.+10     	; 0x3e06 <__vector_66+0x3c>
    3dfc:	80 91 3e 24 	lds	r24, 0x243E
    3e00:	90 91 3f 24 	lds	r25, 0x243F
    3e04:	19 95       	eicall
    3e06:	ff 91       	pop	r31
    3e08:	ef 91       	pop	r30
    3e0a:	bf 91       	pop	r27
    3e0c:	af 91       	pop	r26
    3e0e:	9f 91       	pop	r25
    3e10:	8f 91       	pop	r24
    3e12:	7f 91       	pop	r23
    3e14:	6f 91       	pop	r22
    3e16:	5f 91       	pop	r21
    3e18:	4f 91       	pop	r20
    3e1a:	3f 91       	pop	r19
    3e1c:	2f 91       	pop	r18
    3e1e:	0f 90       	pop	r0
    3e20:	0b be       	out	0x3b, r0	; 59
    3e22:	0f 90       	pop	r0
    3e24:	0f be       	out	0x3f, r0	; 63
    3e26:	0f 90       	pop	r0
    3e28:	1f 90       	pop	r1
    3e2a:	18 95       	reti

00003e2c <__vector_67>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT1_vect)      /* External Interrupt 1 */
    3e2c:	1f 92       	push	r1
    3e2e:	0f 92       	push	r0
    3e30:	0f b6       	in	r0, 0x3f	; 63
    3e32:	0f 92       	push	r0
    3e34:	11 24       	eor	r1, r1
    3e36:	0b b6       	in	r0, 0x3b	; 59
    3e38:	0f 92       	push	r0
    3e3a:	2f 93       	push	r18
    3e3c:	3f 93       	push	r19
    3e3e:	4f 93       	push	r20
    3e40:	5f 93       	push	r21
    3e42:	6f 93       	push	r22
    3e44:	7f 93       	push	r23
    3e46:	8f 93       	push	r24
    3e48:	9f 93       	push	r25
    3e4a:	af 93       	push	r26
    3e4c:	bf 93       	push	r27
    3e4e:	ef 93       	push	r30
    3e50:	ff 93       	push	r31
    3e52:	e0 91 4a 23 	lds	r30, 0x234A
    3e56:	f0 91 4b 23 	lds	r31, 0x234B
    3e5a:	30 97       	sbiw	r30, 0x00	; 0
    3e5c:	29 f0       	breq	.+10     	; 0x3e68 <__vector_67+0x3c>
    3e5e:	80 91 40 24 	lds	r24, 0x2440
    3e62:	90 91 41 24 	lds	r25, 0x2441
    3e66:	19 95       	eicall
    3e68:	ff 91       	pop	r31
    3e6a:	ef 91       	pop	r30
    3e6c:	bf 91       	pop	r27
    3e6e:	af 91       	pop	r26
    3e70:	9f 91       	pop	r25
    3e72:	8f 91       	pop	r24
    3e74:	7f 91       	pop	r23
    3e76:	6f 91       	pop	r22
    3e78:	5f 91       	pop	r21
    3e7a:	4f 91       	pop	r20
    3e7c:	3f 91       	pop	r19
    3e7e:	2f 91       	pop	r18
    3e80:	0f 90       	pop	r0
    3e82:	0b be       	out	0x3b, r0	; 59
    3e84:	0f 90       	pop	r0
    3e86:	0f be       	out	0x3f, r0	; 63
    3e88:	0f 90       	pop	r0
    3e8a:	1f 90       	pop	r1
    3e8c:	18 95       	reti

00003e8e <__vector_68>:

/* ACA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC0_vect)      /* AC0 Interrupt */
    3e8e:	1f 92       	push	r1
    3e90:	0f 92       	push	r0
    3e92:	0f b6       	in	r0, 0x3f	; 63
    3e94:	0f 92       	push	r0
    3e96:	11 24       	eor	r1, r1
    3e98:	0b b6       	in	r0, 0x3b	; 59
    3e9a:	0f 92       	push	r0
    3e9c:	2f 93       	push	r18
    3e9e:	3f 93       	push	r19
    3ea0:	4f 93       	push	r20
    3ea2:	5f 93       	push	r21
    3ea4:	6f 93       	push	r22
    3ea6:	7f 93       	push	r23
    3ea8:	8f 93       	push	r24
    3eaa:	9f 93       	push	r25
    3eac:	af 93       	push	r26
    3eae:	bf 93       	push	r27
    3eb0:	ef 93       	push	r30
    3eb2:	ff 93       	push	r31
    3eb4:	e0 91 4c 23 	lds	r30, 0x234C
    3eb8:	f0 91 4d 23 	lds	r31, 0x234D
    3ebc:	30 97       	sbiw	r30, 0x00	; 0
    3ebe:	29 f0       	breq	.+10     	; 0x3eca <__vector_68+0x3c>
    3ec0:	80 91 42 24 	lds	r24, 0x2442
    3ec4:	90 91 43 24 	lds	r25, 0x2443
    3ec8:	19 95       	eicall
    3eca:	ff 91       	pop	r31
    3ecc:	ef 91       	pop	r30
    3ece:	bf 91       	pop	r27
    3ed0:	af 91       	pop	r26
    3ed2:	9f 91       	pop	r25
    3ed4:	8f 91       	pop	r24
    3ed6:	7f 91       	pop	r23
    3ed8:	6f 91       	pop	r22
    3eda:	5f 91       	pop	r21
    3edc:	4f 91       	pop	r20
    3ede:	3f 91       	pop	r19
    3ee0:	2f 91       	pop	r18
    3ee2:	0f 90       	pop	r0
    3ee4:	0b be       	out	0x3b, r0	; 59
    3ee6:	0f 90       	pop	r0
    3ee8:	0f be       	out	0x3f, r0	; 63
    3eea:	0f 90       	pop	r0
    3eec:	1f 90       	pop	r1
    3eee:	18 95       	reti

00003ef0 <__vector_69>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC1_vect)      /* AC1 Interrupt */
    3ef0:	1f 92       	push	r1
    3ef2:	0f 92       	push	r0
    3ef4:	0f b6       	in	r0, 0x3f	; 63
    3ef6:	0f 92       	push	r0
    3ef8:	11 24       	eor	r1, r1
    3efa:	0b b6       	in	r0, 0x3b	; 59
    3efc:	0f 92       	push	r0
    3efe:	2f 93       	push	r18
    3f00:	3f 93       	push	r19
    3f02:	4f 93       	push	r20
    3f04:	5f 93       	push	r21
    3f06:	6f 93       	push	r22
    3f08:	7f 93       	push	r23
    3f0a:	8f 93       	push	r24
    3f0c:	9f 93       	push	r25
    3f0e:	af 93       	push	r26
    3f10:	bf 93       	push	r27
    3f12:	ef 93       	push	r30
    3f14:	ff 93       	push	r31
    3f16:	e0 91 4e 23 	lds	r30, 0x234E
    3f1a:	f0 91 4f 23 	lds	r31, 0x234F
    3f1e:	30 97       	sbiw	r30, 0x00	; 0
    3f20:	29 f0       	breq	.+10     	; 0x3f2c <__vector_69+0x3c>
    3f22:	80 91 44 24 	lds	r24, 0x2444
    3f26:	90 91 45 24 	lds	r25, 0x2445
    3f2a:	19 95       	eicall
    3f2c:	ff 91       	pop	r31
    3f2e:	ef 91       	pop	r30
    3f30:	bf 91       	pop	r27
    3f32:	af 91       	pop	r26
    3f34:	9f 91       	pop	r25
    3f36:	8f 91       	pop	r24
    3f38:	7f 91       	pop	r23
    3f3a:	6f 91       	pop	r22
    3f3c:	5f 91       	pop	r21
    3f3e:	4f 91       	pop	r20
    3f40:	3f 91       	pop	r19
    3f42:	2f 91       	pop	r18
    3f44:	0f 90       	pop	r0
    3f46:	0b be       	out	0x3b, r0	; 59
    3f48:	0f 90       	pop	r0
    3f4a:	0f be       	out	0x3f, r0	; 63
    3f4c:	0f 90       	pop	r0
    3f4e:	1f 90       	pop	r1
    3f50:	18 95       	reti

00003f52 <__vector_70>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_ACW_vect)      /* ACW Window Mode Interrupt */
    3f52:	1f 92       	push	r1
    3f54:	0f 92       	push	r0
    3f56:	0f b6       	in	r0, 0x3f	; 63
    3f58:	0f 92       	push	r0
    3f5a:	11 24       	eor	r1, r1
    3f5c:	0b b6       	in	r0, 0x3b	; 59
    3f5e:	0f 92       	push	r0
    3f60:	2f 93       	push	r18
    3f62:	3f 93       	push	r19
    3f64:	4f 93       	push	r20
    3f66:	5f 93       	push	r21
    3f68:	6f 93       	push	r22
    3f6a:	7f 93       	push	r23
    3f6c:	8f 93       	push	r24
    3f6e:	9f 93       	push	r25
    3f70:	af 93       	push	r26
    3f72:	bf 93       	push	r27
    3f74:	ef 93       	push	r30
    3f76:	ff 93       	push	r31
    3f78:	e0 91 50 23 	lds	r30, 0x2350
    3f7c:	f0 91 51 23 	lds	r31, 0x2351
    3f80:	30 97       	sbiw	r30, 0x00	; 0
    3f82:	29 f0       	breq	.+10     	; 0x3f8e <__vector_70+0x3c>
    3f84:	80 91 46 24 	lds	r24, 0x2446
    3f88:	90 91 47 24 	lds	r25, 0x2447
    3f8c:	19 95       	eicall
    3f8e:	ff 91       	pop	r31
    3f90:	ef 91       	pop	r30
    3f92:	bf 91       	pop	r27
    3f94:	af 91       	pop	r26
    3f96:	9f 91       	pop	r25
    3f98:	8f 91       	pop	r24
    3f9a:	7f 91       	pop	r23
    3f9c:	6f 91       	pop	r22
    3f9e:	5f 91       	pop	r21
    3fa0:	4f 91       	pop	r20
    3fa2:	3f 91       	pop	r19
    3fa4:	2f 91       	pop	r18
    3fa6:	0f 90       	pop	r0
    3fa8:	0b be       	out	0x3b, r0	; 59
    3faa:	0f 90       	pop	r0
    3fac:	0f be       	out	0x3f, r0	; 63
    3fae:	0f 90       	pop	r0
    3fb0:	1f 90       	pop	r1
    3fb2:	18 95       	reti

00003fb4 <__vector_71>:

/* ADCA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH0_vect)      /* Interrupt 0 */
    3fb4:	1f 92       	push	r1
    3fb6:	0f 92       	push	r0
    3fb8:	0f b6       	in	r0, 0x3f	; 63
    3fba:	0f 92       	push	r0
    3fbc:	11 24       	eor	r1, r1
    3fbe:	0b b6       	in	r0, 0x3b	; 59
    3fc0:	0f 92       	push	r0
    3fc2:	2f 93       	push	r18
    3fc4:	3f 93       	push	r19
    3fc6:	4f 93       	push	r20
    3fc8:	5f 93       	push	r21
    3fca:	6f 93       	push	r22
    3fcc:	7f 93       	push	r23
    3fce:	8f 93       	push	r24
    3fd0:	9f 93       	push	r25
    3fd2:	af 93       	push	r26
    3fd4:	bf 93       	push	r27
    3fd6:	ef 93       	push	r30
    3fd8:	ff 93       	push	r31
    3fda:	e0 91 52 23 	lds	r30, 0x2352
    3fde:	f0 91 53 23 	lds	r31, 0x2353
    3fe2:	30 97       	sbiw	r30, 0x00	; 0
    3fe4:	29 f0       	breq	.+10     	; 0x3ff0 <__vector_71+0x3c>
    3fe6:	80 91 48 24 	lds	r24, 0x2448
    3fea:	90 91 49 24 	lds	r25, 0x2449
    3fee:	19 95       	eicall
    3ff0:	ff 91       	pop	r31
    3ff2:	ef 91       	pop	r30
    3ff4:	bf 91       	pop	r27
    3ff6:	af 91       	pop	r26
    3ff8:	9f 91       	pop	r25
    3ffa:	8f 91       	pop	r24
    3ffc:	7f 91       	pop	r23
    3ffe:	6f 91       	pop	r22
    4000:	5f 91       	pop	r21
    4002:	4f 91       	pop	r20
    4004:	3f 91       	pop	r19
    4006:	2f 91       	pop	r18
    4008:	0f 90       	pop	r0
    400a:	0b be       	out	0x3b, r0	; 59
    400c:	0f 90       	pop	r0
    400e:	0f be       	out	0x3f, r0	; 63
    4010:	0f 90       	pop	r0
    4012:	1f 90       	pop	r1
    4014:	18 95       	reti

00004016 <__vector_72>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH1_vect)      /* Interrupt 1 */
    4016:	1f 92       	push	r1
    4018:	0f 92       	push	r0
    401a:	0f b6       	in	r0, 0x3f	; 63
    401c:	0f 92       	push	r0
    401e:	11 24       	eor	r1, r1
    4020:	0b b6       	in	r0, 0x3b	; 59
    4022:	0f 92       	push	r0
    4024:	2f 93       	push	r18
    4026:	3f 93       	push	r19
    4028:	4f 93       	push	r20
    402a:	5f 93       	push	r21
    402c:	6f 93       	push	r22
    402e:	7f 93       	push	r23
    4030:	8f 93       	push	r24
    4032:	9f 93       	push	r25
    4034:	af 93       	push	r26
    4036:	bf 93       	push	r27
    4038:	ef 93       	push	r30
    403a:	ff 93       	push	r31
    403c:	e0 91 54 23 	lds	r30, 0x2354
    4040:	f0 91 55 23 	lds	r31, 0x2355
    4044:	30 97       	sbiw	r30, 0x00	; 0
    4046:	29 f0       	breq	.+10     	; 0x4052 <__vector_72+0x3c>
    4048:	80 91 4a 24 	lds	r24, 0x244A
    404c:	90 91 4b 24 	lds	r25, 0x244B
    4050:	19 95       	eicall
    4052:	ff 91       	pop	r31
    4054:	ef 91       	pop	r30
    4056:	bf 91       	pop	r27
    4058:	af 91       	pop	r26
    405a:	9f 91       	pop	r25
    405c:	8f 91       	pop	r24
    405e:	7f 91       	pop	r23
    4060:	6f 91       	pop	r22
    4062:	5f 91       	pop	r21
    4064:	4f 91       	pop	r20
    4066:	3f 91       	pop	r19
    4068:	2f 91       	pop	r18
    406a:	0f 90       	pop	r0
    406c:	0b be       	out	0x3b, r0	; 59
    406e:	0f 90       	pop	r0
    4070:	0f be       	out	0x3f, r0	; 63
    4072:	0f 90       	pop	r0
    4074:	1f 90       	pop	r1
    4076:	18 95       	reti

00004078 <__vector_73>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH2_vect)      /* Interrupt 2 */
    4078:	1f 92       	push	r1
    407a:	0f 92       	push	r0
    407c:	0f b6       	in	r0, 0x3f	; 63
    407e:	0f 92       	push	r0
    4080:	11 24       	eor	r1, r1
    4082:	0b b6       	in	r0, 0x3b	; 59
    4084:	0f 92       	push	r0
    4086:	2f 93       	push	r18
    4088:	3f 93       	push	r19
    408a:	4f 93       	push	r20
    408c:	5f 93       	push	r21
    408e:	6f 93       	push	r22
    4090:	7f 93       	push	r23
    4092:	8f 93       	push	r24
    4094:	9f 93       	push	r25
    4096:	af 93       	push	r26
    4098:	bf 93       	push	r27
    409a:	ef 93       	push	r30
    409c:	ff 93       	push	r31
    409e:	e0 91 56 23 	lds	r30, 0x2356
    40a2:	f0 91 57 23 	lds	r31, 0x2357
    40a6:	30 97       	sbiw	r30, 0x00	; 0
    40a8:	29 f0       	breq	.+10     	; 0x40b4 <__vector_73+0x3c>
    40aa:	80 91 4c 24 	lds	r24, 0x244C
    40ae:	90 91 4d 24 	lds	r25, 0x244D
    40b2:	19 95       	eicall
    40b4:	ff 91       	pop	r31
    40b6:	ef 91       	pop	r30
    40b8:	bf 91       	pop	r27
    40ba:	af 91       	pop	r26
    40bc:	9f 91       	pop	r25
    40be:	8f 91       	pop	r24
    40c0:	7f 91       	pop	r23
    40c2:	6f 91       	pop	r22
    40c4:	5f 91       	pop	r21
    40c6:	4f 91       	pop	r20
    40c8:	3f 91       	pop	r19
    40ca:	2f 91       	pop	r18
    40cc:	0f 90       	pop	r0
    40ce:	0b be       	out	0x3b, r0	; 59
    40d0:	0f 90       	pop	r0
    40d2:	0f be       	out	0x3f, r0	; 63
    40d4:	0f 90       	pop	r0
    40d6:	1f 90       	pop	r1
    40d8:	18 95       	reti

000040da <__vector_74>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH3_vect)      /* Interrupt 3 */
    40da:	1f 92       	push	r1
    40dc:	0f 92       	push	r0
    40de:	0f b6       	in	r0, 0x3f	; 63
    40e0:	0f 92       	push	r0
    40e2:	11 24       	eor	r1, r1
    40e4:	0b b6       	in	r0, 0x3b	; 59
    40e6:	0f 92       	push	r0
    40e8:	2f 93       	push	r18
    40ea:	3f 93       	push	r19
    40ec:	4f 93       	push	r20
    40ee:	5f 93       	push	r21
    40f0:	6f 93       	push	r22
    40f2:	7f 93       	push	r23
    40f4:	8f 93       	push	r24
    40f6:	9f 93       	push	r25
    40f8:	af 93       	push	r26
    40fa:	bf 93       	push	r27
    40fc:	ef 93       	push	r30
    40fe:	ff 93       	push	r31
    4100:	e0 91 58 23 	lds	r30, 0x2358
    4104:	f0 91 59 23 	lds	r31, 0x2359
    4108:	30 97       	sbiw	r30, 0x00	; 0
    410a:	29 f0       	breq	.+10     	; 0x4116 <__vector_74+0x3c>
    410c:	80 91 4e 24 	lds	r24, 0x244E
    4110:	90 91 4f 24 	lds	r25, 0x244F
    4114:	19 95       	eicall
    4116:	ff 91       	pop	r31
    4118:	ef 91       	pop	r30
    411a:	bf 91       	pop	r27
    411c:	af 91       	pop	r26
    411e:	9f 91       	pop	r25
    4120:	8f 91       	pop	r24
    4122:	7f 91       	pop	r23
    4124:	6f 91       	pop	r22
    4126:	5f 91       	pop	r21
    4128:	4f 91       	pop	r20
    412a:	3f 91       	pop	r19
    412c:	2f 91       	pop	r18
    412e:	0f 90       	pop	r0
    4130:	0b be       	out	0x3b, r0	; 59
    4132:	0f 90       	pop	r0
    4134:	0f be       	out	0x3f, r0	; 63
    4136:	0f 90       	pop	r0
    4138:	1f 90       	pop	r1
    413a:	18 95       	reti

0000413c <__vector_77>:

/* TCD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_OVF_vect)      /* Overflow Interrupt */
    413c:	1f 92       	push	r1
    413e:	0f 92       	push	r0
    4140:	0f b6       	in	r0, 0x3f	; 63
    4142:	0f 92       	push	r0
    4144:	11 24       	eor	r1, r1
    4146:	0b b6       	in	r0, 0x3b	; 59
    4148:	0f 92       	push	r0
    414a:	2f 93       	push	r18
    414c:	3f 93       	push	r19
    414e:	4f 93       	push	r20
    4150:	5f 93       	push	r21
    4152:	6f 93       	push	r22
    4154:	7f 93       	push	r23
    4156:	8f 93       	push	r24
    4158:	9f 93       	push	r25
    415a:	af 93       	push	r26
    415c:	bf 93       	push	r27
    415e:	ef 93       	push	r30
    4160:	ff 93       	push	r31
    4162:	e0 91 5e 23 	lds	r30, 0x235E
    4166:	f0 91 5f 23 	lds	r31, 0x235F
    416a:	30 97       	sbiw	r30, 0x00	; 0
    416c:	29 f0       	breq	.+10     	; 0x4178 <__vector_77+0x3c>
    416e:	80 91 54 24 	lds	r24, 0x2454
    4172:	90 91 55 24 	lds	r25, 0x2455
    4176:	19 95       	eicall
    4178:	ff 91       	pop	r31
    417a:	ef 91       	pop	r30
    417c:	bf 91       	pop	r27
    417e:	af 91       	pop	r26
    4180:	9f 91       	pop	r25
    4182:	8f 91       	pop	r24
    4184:	7f 91       	pop	r23
    4186:	6f 91       	pop	r22
    4188:	5f 91       	pop	r21
    418a:	4f 91       	pop	r20
    418c:	3f 91       	pop	r19
    418e:	2f 91       	pop	r18
    4190:	0f 90       	pop	r0
    4192:	0b be       	out	0x3b, r0	; 59
    4194:	0f 90       	pop	r0
    4196:	0f be       	out	0x3f, r0	; 63
    4198:	0f 90       	pop	r0
    419a:	1f 90       	pop	r1
    419c:	18 95       	reti

0000419e <__vector_78>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_ERR_vect)      /* Error Interrupt */
    419e:	1f 92       	push	r1
    41a0:	0f 92       	push	r0
    41a2:	0f b6       	in	r0, 0x3f	; 63
    41a4:	0f 92       	push	r0
    41a6:	11 24       	eor	r1, r1
    41a8:	0b b6       	in	r0, 0x3b	; 59
    41aa:	0f 92       	push	r0
    41ac:	2f 93       	push	r18
    41ae:	3f 93       	push	r19
    41b0:	4f 93       	push	r20
    41b2:	5f 93       	push	r21
    41b4:	6f 93       	push	r22
    41b6:	7f 93       	push	r23
    41b8:	8f 93       	push	r24
    41ba:	9f 93       	push	r25
    41bc:	af 93       	push	r26
    41be:	bf 93       	push	r27
    41c0:	ef 93       	push	r30
    41c2:	ff 93       	push	r31
    41c4:	e0 91 60 23 	lds	r30, 0x2360
    41c8:	f0 91 61 23 	lds	r31, 0x2361
    41cc:	30 97       	sbiw	r30, 0x00	; 0
    41ce:	29 f0       	breq	.+10     	; 0x41da <__vector_78+0x3c>
    41d0:	80 91 56 24 	lds	r24, 0x2456
    41d4:	90 91 57 24 	lds	r25, 0x2457
    41d8:	19 95       	eicall
    41da:	ff 91       	pop	r31
    41dc:	ef 91       	pop	r30
    41de:	bf 91       	pop	r27
    41e0:	af 91       	pop	r26
    41e2:	9f 91       	pop	r25
    41e4:	8f 91       	pop	r24
    41e6:	7f 91       	pop	r23
    41e8:	6f 91       	pop	r22
    41ea:	5f 91       	pop	r21
    41ec:	4f 91       	pop	r20
    41ee:	3f 91       	pop	r19
    41f0:	2f 91       	pop	r18
    41f2:	0f 90       	pop	r0
    41f4:	0b be       	out	0x3b, r0	; 59
    41f6:	0f 90       	pop	r0
    41f8:	0f be       	out	0x3f, r0	; 63
    41fa:	0f 90       	pop	r0
    41fc:	1f 90       	pop	r1
    41fe:	18 95       	reti

00004200 <__vector_79>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCA_vect)      /* Compare or Capture A Interrupt */
    4200:	1f 92       	push	r1
    4202:	0f 92       	push	r0
    4204:	0f b6       	in	r0, 0x3f	; 63
    4206:	0f 92       	push	r0
    4208:	11 24       	eor	r1, r1
    420a:	0b b6       	in	r0, 0x3b	; 59
    420c:	0f 92       	push	r0
    420e:	2f 93       	push	r18
    4210:	3f 93       	push	r19
    4212:	4f 93       	push	r20
    4214:	5f 93       	push	r21
    4216:	6f 93       	push	r22
    4218:	7f 93       	push	r23
    421a:	8f 93       	push	r24
    421c:	9f 93       	push	r25
    421e:	af 93       	push	r26
    4220:	bf 93       	push	r27
    4222:	ef 93       	push	r30
    4224:	ff 93       	push	r31
    4226:	e0 91 62 23 	lds	r30, 0x2362
    422a:	f0 91 63 23 	lds	r31, 0x2363
    422e:	30 97       	sbiw	r30, 0x00	; 0
    4230:	29 f0       	breq	.+10     	; 0x423c <__vector_79+0x3c>
    4232:	80 91 58 24 	lds	r24, 0x2458
    4236:	90 91 59 24 	lds	r25, 0x2459
    423a:	19 95       	eicall
    423c:	ff 91       	pop	r31
    423e:	ef 91       	pop	r30
    4240:	bf 91       	pop	r27
    4242:	af 91       	pop	r26
    4244:	9f 91       	pop	r25
    4246:	8f 91       	pop	r24
    4248:	7f 91       	pop	r23
    424a:	6f 91       	pop	r22
    424c:	5f 91       	pop	r21
    424e:	4f 91       	pop	r20
    4250:	3f 91       	pop	r19
    4252:	2f 91       	pop	r18
    4254:	0f 90       	pop	r0
    4256:	0b be       	out	0x3b, r0	; 59
    4258:	0f 90       	pop	r0
    425a:	0f be       	out	0x3f, r0	; 63
    425c:	0f 90       	pop	r0
    425e:	1f 90       	pop	r1
    4260:	18 95       	reti

00004262 <__vector_80>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCB_vect)      /* Compare or Capture B Interrupt */
    4262:	1f 92       	push	r1
    4264:	0f 92       	push	r0
    4266:	0f b6       	in	r0, 0x3f	; 63
    4268:	0f 92       	push	r0
    426a:	11 24       	eor	r1, r1
    426c:	0b b6       	in	r0, 0x3b	; 59
    426e:	0f 92       	push	r0
    4270:	2f 93       	push	r18
    4272:	3f 93       	push	r19
    4274:	4f 93       	push	r20
    4276:	5f 93       	push	r21
    4278:	6f 93       	push	r22
    427a:	7f 93       	push	r23
    427c:	8f 93       	push	r24
    427e:	9f 93       	push	r25
    4280:	af 93       	push	r26
    4282:	bf 93       	push	r27
    4284:	ef 93       	push	r30
    4286:	ff 93       	push	r31
    4288:	e0 91 64 23 	lds	r30, 0x2364
    428c:	f0 91 65 23 	lds	r31, 0x2365
    4290:	30 97       	sbiw	r30, 0x00	; 0
    4292:	29 f0       	breq	.+10     	; 0x429e <__vector_80+0x3c>
    4294:	80 91 5a 24 	lds	r24, 0x245A
    4298:	90 91 5b 24 	lds	r25, 0x245B
    429c:	19 95       	eicall
    429e:	ff 91       	pop	r31
    42a0:	ef 91       	pop	r30
    42a2:	bf 91       	pop	r27
    42a4:	af 91       	pop	r26
    42a6:	9f 91       	pop	r25
    42a8:	8f 91       	pop	r24
    42aa:	7f 91       	pop	r23
    42ac:	6f 91       	pop	r22
    42ae:	5f 91       	pop	r21
    42b0:	4f 91       	pop	r20
    42b2:	3f 91       	pop	r19
    42b4:	2f 91       	pop	r18
    42b6:	0f 90       	pop	r0
    42b8:	0b be       	out	0x3b, r0	; 59
    42ba:	0f 90       	pop	r0
    42bc:	0f be       	out	0x3f, r0	; 63
    42be:	0f 90       	pop	r0
    42c0:	1f 90       	pop	r1
    42c2:	18 95       	reti

000042c4 <__vector_81>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCC_vect)      /* Compare or Capture C Interrupt */
    42c4:	1f 92       	push	r1
    42c6:	0f 92       	push	r0
    42c8:	0f b6       	in	r0, 0x3f	; 63
    42ca:	0f 92       	push	r0
    42cc:	11 24       	eor	r1, r1
    42ce:	0b b6       	in	r0, 0x3b	; 59
    42d0:	0f 92       	push	r0
    42d2:	2f 93       	push	r18
    42d4:	3f 93       	push	r19
    42d6:	4f 93       	push	r20
    42d8:	5f 93       	push	r21
    42da:	6f 93       	push	r22
    42dc:	7f 93       	push	r23
    42de:	8f 93       	push	r24
    42e0:	9f 93       	push	r25
    42e2:	af 93       	push	r26
    42e4:	bf 93       	push	r27
    42e6:	ef 93       	push	r30
    42e8:	ff 93       	push	r31
    42ea:	e0 91 66 23 	lds	r30, 0x2366
    42ee:	f0 91 67 23 	lds	r31, 0x2367
    42f2:	30 97       	sbiw	r30, 0x00	; 0
    42f4:	29 f0       	breq	.+10     	; 0x4300 <__vector_81+0x3c>
    42f6:	80 91 5c 24 	lds	r24, 0x245C
    42fa:	90 91 5d 24 	lds	r25, 0x245D
    42fe:	19 95       	eicall
    4300:	ff 91       	pop	r31
    4302:	ef 91       	pop	r30
    4304:	bf 91       	pop	r27
    4306:	af 91       	pop	r26
    4308:	9f 91       	pop	r25
    430a:	8f 91       	pop	r24
    430c:	7f 91       	pop	r23
    430e:	6f 91       	pop	r22
    4310:	5f 91       	pop	r21
    4312:	4f 91       	pop	r20
    4314:	3f 91       	pop	r19
    4316:	2f 91       	pop	r18
    4318:	0f 90       	pop	r0
    431a:	0b be       	out	0x3b, r0	; 59
    431c:	0f 90       	pop	r0
    431e:	0f be       	out	0x3f, r0	; 63
    4320:	0f 90       	pop	r0
    4322:	1f 90       	pop	r1
    4324:	18 95       	reti

00004326 <__vector_82>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCD_vect)      /* Compare or Capture D Interrupt */
    4326:	1f 92       	push	r1
    4328:	0f 92       	push	r0
    432a:	0f b6       	in	r0, 0x3f	; 63
    432c:	0f 92       	push	r0
    432e:	11 24       	eor	r1, r1
    4330:	0b b6       	in	r0, 0x3b	; 59
    4332:	0f 92       	push	r0
    4334:	2f 93       	push	r18
    4336:	3f 93       	push	r19
    4338:	4f 93       	push	r20
    433a:	5f 93       	push	r21
    433c:	6f 93       	push	r22
    433e:	7f 93       	push	r23
    4340:	8f 93       	push	r24
    4342:	9f 93       	push	r25
    4344:	af 93       	push	r26
    4346:	bf 93       	push	r27
    4348:	ef 93       	push	r30
    434a:	ff 93       	push	r31
    434c:	e0 91 68 23 	lds	r30, 0x2368
    4350:	f0 91 69 23 	lds	r31, 0x2369
    4354:	30 97       	sbiw	r30, 0x00	; 0
    4356:	29 f0       	breq	.+10     	; 0x4362 <__vector_82+0x3c>
    4358:	80 91 5e 24 	lds	r24, 0x245E
    435c:	90 91 5f 24 	lds	r25, 0x245F
    4360:	19 95       	eicall
    4362:	ff 91       	pop	r31
    4364:	ef 91       	pop	r30
    4366:	bf 91       	pop	r27
    4368:	af 91       	pop	r26
    436a:	9f 91       	pop	r25
    436c:	8f 91       	pop	r24
    436e:	7f 91       	pop	r23
    4370:	6f 91       	pop	r22
    4372:	5f 91       	pop	r21
    4374:	4f 91       	pop	r20
    4376:	3f 91       	pop	r19
    4378:	2f 91       	pop	r18
    437a:	0f 90       	pop	r0
    437c:	0b be       	out	0x3b, r0	; 59
    437e:	0f 90       	pop	r0
    4380:	0f be       	out	0x3f, r0	; 63
    4382:	0f 90       	pop	r0
    4384:	1f 90       	pop	r1
    4386:	18 95       	reti

00004388 <__vector_83>:

/* TCD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_OVF_vect)      /* Overflow Interrupt */
    4388:	1f 92       	push	r1
    438a:	0f 92       	push	r0
    438c:	0f b6       	in	r0, 0x3f	; 63
    438e:	0f 92       	push	r0
    4390:	11 24       	eor	r1, r1
    4392:	0b b6       	in	r0, 0x3b	; 59
    4394:	0f 92       	push	r0
    4396:	2f 93       	push	r18
    4398:	3f 93       	push	r19
    439a:	4f 93       	push	r20
    439c:	5f 93       	push	r21
    439e:	6f 93       	push	r22
    43a0:	7f 93       	push	r23
    43a2:	8f 93       	push	r24
    43a4:	9f 93       	push	r25
    43a6:	af 93       	push	r26
    43a8:	bf 93       	push	r27
    43aa:	ef 93       	push	r30
    43ac:	ff 93       	push	r31
    43ae:	e0 91 6a 23 	lds	r30, 0x236A
    43b2:	f0 91 6b 23 	lds	r31, 0x236B
    43b6:	30 97       	sbiw	r30, 0x00	; 0
    43b8:	29 f0       	breq	.+10     	; 0x43c4 <__vector_83+0x3c>
    43ba:	80 91 60 24 	lds	r24, 0x2460
    43be:	90 91 61 24 	lds	r25, 0x2461
    43c2:	19 95       	eicall
    43c4:	ff 91       	pop	r31
    43c6:	ef 91       	pop	r30
    43c8:	bf 91       	pop	r27
    43ca:	af 91       	pop	r26
    43cc:	9f 91       	pop	r25
    43ce:	8f 91       	pop	r24
    43d0:	7f 91       	pop	r23
    43d2:	6f 91       	pop	r22
    43d4:	5f 91       	pop	r21
    43d6:	4f 91       	pop	r20
    43d8:	3f 91       	pop	r19
    43da:	2f 91       	pop	r18
    43dc:	0f 90       	pop	r0
    43de:	0b be       	out	0x3b, r0	; 59
    43e0:	0f 90       	pop	r0
    43e2:	0f be       	out	0x3f, r0	; 63
    43e4:	0f 90       	pop	r0
    43e6:	1f 90       	pop	r1
    43e8:	18 95       	reti

000043ea <__vector_84>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_ERR_vect)      /* Error Interrupt */
    43ea:	1f 92       	push	r1
    43ec:	0f 92       	push	r0
    43ee:	0f b6       	in	r0, 0x3f	; 63
    43f0:	0f 92       	push	r0
    43f2:	11 24       	eor	r1, r1
    43f4:	0b b6       	in	r0, 0x3b	; 59
    43f6:	0f 92       	push	r0
    43f8:	2f 93       	push	r18
    43fa:	3f 93       	push	r19
    43fc:	4f 93       	push	r20
    43fe:	5f 93       	push	r21
    4400:	6f 93       	push	r22
    4402:	7f 93       	push	r23
    4404:	8f 93       	push	r24
    4406:	9f 93       	push	r25
    4408:	af 93       	push	r26
    440a:	bf 93       	push	r27
    440c:	ef 93       	push	r30
    440e:	ff 93       	push	r31
    4410:	e0 91 6c 23 	lds	r30, 0x236C
    4414:	f0 91 6d 23 	lds	r31, 0x236D
    4418:	30 97       	sbiw	r30, 0x00	; 0
    441a:	29 f0       	breq	.+10     	; 0x4426 <__vector_84+0x3c>
    441c:	80 91 62 24 	lds	r24, 0x2462
    4420:	90 91 63 24 	lds	r25, 0x2463
    4424:	19 95       	eicall
    4426:	ff 91       	pop	r31
    4428:	ef 91       	pop	r30
    442a:	bf 91       	pop	r27
    442c:	af 91       	pop	r26
    442e:	9f 91       	pop	r25
    4430:	8f 91       	pop	r24
    4432:	7f 91       	pop	r23
    4434:	6f 91       	pop	r22
    4436:	5f 91       	pop	r21
    4438:	4f 91       	pop	r20
    443a:	3f 91       	pop	r19
    443c:	2f 91       	pop	r18
    443e:	0f 90       	pop	r0
    4440:	0b be       	out	0x3b, r0	; 59
    4442:	0f 90       	pop	r0
    4444:	0f be       	out	0x3f, r0	; 63
    4446:	0f 90       	pop	r0
    4448:	1f 90       	pop	r1
    444a:	18 95       	reti

0000444c <__vector_85>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCA_vect)      /* Compare or Capture A Interrupt */
    444c:	1f 92       	push	r1
    444e:	0f 92       	push	r0
    4450:	0f b6       	in	r0, 0x3f	; 63
    4452:	0f 92       	push	r0
    4454:	11 24       	eor	r1, r1
    4456:	0b b6       	in	r0, 0x3b	; 59
    4458:	0f 92       	push	r0
    445a:	2f 93       	push	r18
    445c:	3f 93       	push	r19
    445e:	4f 93       	push	r20
    4460:	5f 93       	push	r21
    4462:	6f 93       	push	r22
    4464:	7f 93       	push	r23
    4466:	8f 93       	push	r24
    4468:	9f 93       	push	r25
    446a:	af 93       	push	r26
    446c:	bf 93       	push	r27
    446e:	ef 93       	push	r30
    4470:	ff 93       	push	r31
    4472:	e0 91 6e 23 	lds	r30, 0x236E
    4476:	f0 91 6f 23 	lds	r31, 0x236F
    447a:	30 97       	sbiw	r30, 0x00	; 0
    447c:	29 f0       	breq	.+10     	; 0x4488 <__vector_85+0x3c>
    447e:	80 91 64 24 	lds	r24, 0x2464
    4482:	90 91 65 24 	lds	r25, 0x2465
    4486:	19 95       	eicall
    4488:	ff 91       	pop	r31
    448a:	ef 91       	pop	r30
    448c:	bf 91       	pop	r27
    448e:	af 91       	pop	r26
    4490:	9f 91       	pop	r25
    4492:	8f 91       	pop	r24
    4494:	7f 91       	pop	r23
    4496:	6f 91       	pop	r22
    4498:	5f 91       	pop	r21
    449a:	4f 91       	pop	r20
    449c:	3f 91       	pop	r19
    449e:	2f 91       	pop	r18
    44a0:	0f 90       	pop	r0
    44a2:	0b be       	out	0x3b, r0	; 59
    44a4:	0f 90       	pop	r0
    44a6:	0f be       	out	0x3f, r0	; 63
    44a8:	0f 90       	pop	r0
    44aa:	1f 90       	pop	r1
    44ac:	18 95       	reti

000044ae <__vector_86>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCB_vect)      /* Compare or Capture B Interrupt */
    44ae:	1f 92       	push	r1
    44b0:	0f 92       	push	r0
    44b2:	0f b6       	in	r0, 0x3f	; 63
    44b4:	0f 92       	push	r0
    44b6:	11 24       	eor	r1, r1
    44b8:	0b b6       	in	r0, 0x3b	; 59
    44ba:	0f 92       	push	r0
    44bc:	2f 93       	push	r18
    44be:	3f 93       	push	r19
    44c0:	4f 93       	push	r20
    44c2:	5f 93       	push	r21
    44c4:	6f 93       	push	r22
    44c6:	7f 93       	push	r23
    44c8:	8f 93       	push	r24
    44ca:	9f 93       	push	r25
    44cc:	af 93       	push	r26
    44ce:	bf 93       	push	r27
    44d0:	ef 93       	push	r30
    44d2:	ff 93       	push	r31
    44d4:	e0 91 70 23 	lds	r30, 0x2370
    44d8:	f0 91 71 23 	lds	r31, 0x2371
    44dc:	30 97       	sbiw	r30, 0x00	; 0
    44de:	29 f0       	breq	.+10     	; 0x44ea <__vector_86+0x3c>
    44e0:	80 91 66 24 	lds	r24, 0x2466
    44e4:	90 91 67 24 	lds	r25, 0x2467
    44e8:	19 95       	eicall
    44ea:	ff 91       	pop	r31
    44ec:	ef 91       	pop	r30
    44ee:	bf 91       	pop	r27
    44f0:	af 91       	pop	r26
    44f2:	9f 91       	pop	r25
    44f4:	8f 91       	pop	r24
    44f6:	7f 91       	pop	r23
    44f8:	6f 91       	pop	r22
    44fa:	5f 91       	pop	r21
    44fc:	4f 91       	pop	r20
    44fe:	3f 91       	pop	r19
    4500:	2f 91       	pop	r18
    4502:	0f 90       	pop	r0
    4504:	0b be       	out	0x3b, r0	; 59
    4506:	0f 90       	pop	r0
    4508:	0f be       	out	0x3f, r0	; 63
    450a:	0f 90       	pop	r0
    450c:	1f 90       	pop	r1
    450e:	18 95       	reti

00004510 <__vector_87>:

/* SPID interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPID_INT_vect)      /* SPI Interrupt */
    4510:	1f 92       	push	r1
    4512:	0f 92       	push	r0
    4514:	0f b6       	in	r0, 0x3f	; 63
    4516:	0f 92       	push	r0
    4518:	11 24       	eor	r1, r1
    451a:	0b b6       	in	r0, 0x3b	; 59
    451c:	0f 92       	push	r0
    451e:	2f 93       	push	r18
    4520:	3f 93       	push	r19
    4522:	4f 93       	push	r20
    4524:	5f 93       	push	r21
    4526:	6f 93       	push	r22
    4528:	7f 93       	push	r23
    452a:	8f 93       	push	r24
    452c:	9f 93       	push	r25
    452e:	af 93       	push	r26
    4530:	bf 93       	push	r27
    4532:	ef 93       	push	r30
    4534:	ff 93       	push	r31
    4536:	e0 91 72 23 	lds	r30, 0x2372
    453a:	f0 91 73 23 	lds	r31, 0x2373
    453e:	30 97       	sbiw	r30, 0x00	; 0
    4540:	29 f0       	breq	.+10     	; 0x454c <__vector_87+0x3c>
    4542:	80 91 68 24 	lds	r24, 0x2468
    4546:	90 91 69 24 	lds	r25, 0x2469
    454a:	19 95       	eicall
    454c:	ff 91       	pop	r31
    454e:	ef 91       	pop	r30
    4550:	bf 91       	pop	r27
    4552:	af 91       	pop	r26
    4554:	9f 91       	pop	r25
    4556:	8f 91       	pop	r24
    4558:	7f 91       	pop	r23
    455a:	6f 91       	pop	r22
    455c:	5f 91       	pop	r21
    455e:	4f 91       	pop	r20
    4560:	3f 91       	pop	r19
    4562:	2f 91       	pop	r18
    4564:	0f 90       	pop	r0
    4566:	0b be       	out	0x3b, r0	; 59
    4568:	0f 90       	pop	r0
    456a:	0f be       	out	0x3f, r0	; 63
    456c:	0f 90       	pop	r0
    456e:	1f 90       	pop	r1
    4570:	18 95       	reti

00004572 <__vector_88>:

/* USARTD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_RXC_vect)      /* Reception Complete Interrupt */
    4572:	1f 92       	push	r1
    4574:	0f 92       	push	r0
    4576:	0f b6       	in	r0, 0x3f	; 63
    4578:	0f 92       	push	r0
    457a:	11 24       	eor	r1, r1
    457c:	0b b6       	in	r0, 0x3b	; 59
    457e:	0f 92       	push	r0
    4580:	2f 93       	push	r18
    4582:	3f 93       	push	r19
    4584:	4f 93       	push	r20
    4586:	5f 93       	push	r21
    4588:	6f 93       	push	r22
    458a:	7f 93       	push	r23
    458c:	8f 93       	push	r24
    458e:	9f 93       	push	r25
    4590:	af 93       	push	r26
    4592:	bf 93       	push	r27
    4594:	ef 93       	push	r30
    4596:	ff 93       	push	r31
    4598:	e0 91 74 23 	lds	r30, 0x2374
    459c:	f0 91 75 23 	lds	r31, 0x2375
    45a0:	30 97       	sbiw	r30, 0x00	; 0
    45a2:	29 f0       	breq	.+10     	; 0x45ae <__vector_88+0x3c>
    45a4:	80 91 6a 24 	lds	r24, 0x246A
    45a8:	90 91 6b 24 	lds	r25, 0x246B
    45ac:	19 95       	eicall
    45ae:	ff 91       	pop	r31
    45b0:	ef 91       	pop	r30
    45b2:	bf 91       	pop	r27
    45b4:	af 91       	pop	r26
    45b6:	9f 91       	pop	r25
    45b8:	8f 91       	pop	r24
    45ba:	7f 91       	pop	r23
    45bc:	6f 91       	pop	r22
    45be:	5f 91       	pop	r21
    45c0:	4f 91       	pop	r20
    45c2:	3f 91       	pop	r19
    45c4:	2f 91       	pop	r18
    45c6:	0f 90       	pop	r0
    45c8:	0b be       	out	0x3b, r0	; 59
    45ca:	0f 90       	pop	r0
    45cc:	0f be       	out	0x3f, r0	; 63
    45ce:	0f 90       	pop	r0
    45d0:	1f 90       	pop	r1
    45d2:	18 95       	reti

000045d4 <__vector_89>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_DRE_vect)      /* Data Register Empty Interrupt */
    45d4:	1f 92       	push	r1
    45d6:	0f 92       	push	r0
    45d8:	0f b6       	in	r0, 0x3f	; 63
    45da:	0f 92       	push	r0
    45dc:	11 24       	eor	r1, r1
    45de:	0b b6       	in	r0, 0x3b	; 59
    45e0:	0f 92       	push	r0
    45e2:	2f 93       	push	r18
    45e4:	3f 93       	push	r19
    45e6:	4f 93       	push	r20
    45e8:	5f 93       	push	r21
    45ea:	6f 93       	push	r22
    45ec:	7f 93       	push	r23
    45ee:	8f 93       	push	r24
    45f0:	9f 93       	push	r25
    45f2:	af 93       	push	r26
    45f4:	bf 93       	push	r27
    45f6:	ef 93       	push	r30
    45f8:	ff 93       	push	r31
    45fa:	e0 91 76 23 	lds	r30, 0x2376
    45fe:	f0 91 77 23 	lds	r31, 0x2377
    4602:	30 97       	sbiw	r30, 0x00	; 0
    4604:	29 f0       	breq	.+10     	; 0x4610 <__vector_89+0x3c>
    4606:	80 91 6c 24 	lds	r24, 0x246C
    460a:	90 91 6d 24 	lds	r25, 0x246D
    460e:	19 95       	eicall
    4610:	ff 91       	pop	r31
    4612:	ef 91       	pop	r30
    4614:	bf 91       	pop	r27
    4616:	af 91       	pop	r26
    4618:	9f 91       	pop	r25
    461a:	8f 91       	pop	r24
    461c:	7f 91       	pop	r23
    461e:	6f 91       	pop	r22
    4620:	5f 91       	pop	r21
    4622:	4f 91       	pop	r20
    4624:	3f 91       	pop	r19
    4626:	2f 91       	pop	r18
    4628:	0f 90       	pop	r0
    462a:	0b be       	out	0x3b, r0	; 59
    462c:	0f 90       	pop	r0
    462e:	0f be       	out	0x3f, r0	; 63
    4630:	0f 90       	pop	r0
    4632:	1f 90       	pop	r1
    4634:	18 95       	reti

00004636 <__vector_90>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_TXC_vect)      /* Transmission Complete Interrupt */
    4636:	1f 92       	push	r1
    4638:	0f 92       	push	r0
    463a:	0f b6       	in	r0, 0x3f	; 63
    463c:	0f 92       	push	r0
    463e:	11 24       	eor	r1, r1
    4640:	0b b6       	in	r0, 0x3b	; 59
    4642:	0f 92       	push	r0
    4644:	2f 93       	push	r18
    4646:	3f 93       	push	r19
    4648:	4f 93       	push	r20
    464a:	5f 93       	push	r21
    464c:	6f 93       	push	r22
    464e:	7f 93       	push	r23
    4650:	8f 93       	push	r24
    4652:	9f 93       	push	r25
    4654:	af 93       	push	r26
    4656:	bf 93       	push	r27
    4658:	ef 93       	push	r30
    465a:	ff 93       	push	r31
    465c:	e0 91 78 23 	lds	r30, 0x2378
    4660:	f0 91 79 23 	lds	r31, 0x2379
    4664:	30 97       	sbiw	r30, 0x00	; 0
    4666:	29 f0       	breq	.+10     	; 0x4672 <__vector_90+0x3c>
    4668:	80 91 6e 24 	lds	r24, 0x246E
    466c:	90 91 6f 24 	lds	r25, 0x246F
    4670:	19 95       	eicall
    4672:	ff 91       	pop	r31
    4674:	ef 91       	pop	r30
    4676:	bf 91       	pop	r27
    4678:	af 91       	pop	r26
    467a:	9f 91       	pop	r25
    467c:	8f 91       	pop	r24
    467e:	7f 91       	pop	r23
    4680:	6f 91       	pop	r22
    4682:	5f 91       	pop	r21
    4684:	4f 91       	pop	r20
    4686:	3f 91       	pop	r19
    4688:	2f 91       	pop	r18
    468a:	0f 90       	pop	r0
    468c:	0b be       	out	0x3b, r0	; 59
    468e:	0f 90       	pop	r0
    4690:	0f be       	out	0x3f, r0	; 63
    4692:	0f 90       	pop	r0
    4694:	1f 90       	pop	r1
    4696:	18 95       	reti

00004698 <__vector_91>:

/* USARTD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_RXC_vect)      /* Reception Complete Interrupt */
    4698:	1f 92       	push	r1
    469a:	0f 92       	push	r0
    469c:	0f b6       	in	r0, 0x3f	; 63
    469e:	0f 92       	push	r0
    46a0:	11 24       	eor	r1, r1
    46a2:	0b b6       	in	r0, 0x3b	; 59
    46a4:	0f 92       	push	r0
    46a6:	2f 93       	push	r18
    46a8:	3f 93       	push	r19
    46aa:	4f 93       	push	r20
    46ac:	5f 93       	push	r21
    46ae:	6f 93       	push	r22
    46b0:	7f 93       	push	r23
    46b2:	8f 93       	push	r24
    46b4:	9f 93       	push	r25
    46b6:	af 93       	push	r26
    46b8:	bf 93       	push	r27
    46ba:	ef 93       	push	r30
    46bc:	ff 93       	push	r31
    46be:	e0 91 7a 23 	lds	r30, 0x237A
    46c2:	f0 91 7b 23 	lds	r31, 0x237B
    46c6:	30 97       	sbiw	r30, 0x00	; 0
    46c8:	29 f0       	breq	.+10     	; 0x46d4 <__vector_91+0x3c>
    46ca:	80 91 70 24 	lds	r24, 0x2470
    46ce:	90 91 71 24 	lds	r25, 0x2471
    46d2:	19 95       	eicall
    46d4:	ff 91       	pop	r31
    46d6:	ef 91       	pop	r30
    46d8:	bf 91       	pop	r27
    46da:	af 91       	pop	r26
    46dc:	9f 91       	pop	r25
    46de:	8f 91       	pop	r24
    46e0:	7f 91       	pop	r23
    46e2:	6f 91       	pop	r22
    46e4:	5f 91       	pop	r21
    46e6:	4f 91       	pop	r20
    46e8:	3f 91       	pop	r19
    46ea:	2f 91       	pop	r18
    46ec:	0f 90       	pop	r0
    46ee:	0b be       	out	0x3b, r0	; 59
    46f0:	0f 90       	pop	r0
    46f2:	0f be       	out	0x3f, r0	; 63
    46f4:	0f 90       	pop	r0
    46f6:	1f 90       	pop	r1
    46f8:	18 95       	reti

000046fa <__vector_92>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_DRE_vect)      /* Data Register Empty Interrupt */
    46fa:	1f 92       	push	r1
    46fc:	0f 92       	push	r0
    46fe:	0f b6       	in	r0, 0x3f	; 63
    4700:	0f 92       	push	r0
    4702:	11 24       	eor	r1, r1
    4704:	0b b6       	in	r0, 0x3b	; 59
    4706:	0f 92       	push	r0
    4708:	2f 93       	push	r18
    470a:	3f 93       	push	r19
    470c:	4f 93       	push	r20
    470e:	5f 93       	push	r21
    4710:	6f 93       	push	r22
    4712:	7f 93       	push	r23
    4714:	8f 93       	push	r24
    4716:	9f 93       	push	r25
    4718:	af 93       	push	r26
    471a:	bf 93       	push	r27
    471c:	ef 93       	push	r30
    471e:	ff 93       	push	r31
    4720:	e0 91 7c 23 	lds	r30, 0x237C
    4724:	f0 91 7d 23 	lds	r31, 0x237D
    4728:	30 97       	sbiw	r30, 0x00	; 0
    472a:	29 f0       	breq	.+10     	; 0x4736 <__vector_92+0x3c>
    472c:	80 91 72 24 	lds	r24, 0x2472
    4730:	90 91 73 24 	lds	r25, 0x2473
    4734:	19 95       	eicall
    4736:	ff 91       	pop	r31
    4738:	ef 91       	pop	r30
    473a:	bf 91       	pop	r27
    473c:	af 91       	pop	r26
    473e:	9f 91       	pop	r25
    4740:	8f 91       	pop	r24
    4742:	7f 91       	pop	r23
    4744:	6f 91       	pop	r22
    4746:	5f 91       	pop	r21
    4748:	4f 91       	pop	r20
    474a:	3f 91       	pop	r19
    474c:	2f 91       	pop	r18
    474e:	0f 90       	pop	r0
    4750:	0b be       	out	0x3b, r0	; 59
    4752:	0f 90       	pop	r0
    4754:	0f be       	out	0x3f, r0	; 63
    4756:	0f 90       	pop	r0
    4758:	1f 90       	pop	r1
    475a:	18 95       	reti

0000475c <__vector_93>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_TXC_vect)      /* Transmission Complete Interrupt */
    475c:	1f 92       	push	r1
    475e:	0f 92       	push	r0
    4760:	0f b6       	in	r0, 0x3f	; 63
    4762:	0f 92       	push	r0
    4764:	11 24       	eor	r1, r1
    4766:	0b b6       	in	r0, 0x3b	; 59
    4768:	0f 92       	push	r0
    476a:	2f 93       	push	r18
    476c:	3f 93       	push	r19
    476e:	4f 93       	push	r20
    4770:	5f 93       	push	r21
    4772:	6f 93       	push	r22
    4774:	7f 93       	push	r23
    4776:	8f 93       	push	r24
    4778:	9f 93       	push	r25
    477a:	af 93       	push	r26
    477c:	bf 93       	push	r27
    477e:	ef 93       	push	r30
    4780:	ff 93       	push	r31
    4782:	e0 91 7e 23 	lds	r30, 0x237E
    4786:	f0 91 7f 23 	lds	r31, 0x237F
    478a:	30 97       	sbiw	r30, 0x00	; 0
    478c:	29 f0       	breq	.+10     	; 0x4798 <__vector_93+0x3c>
    478e:	80 91 74 24 	lds	r24, 0x2474
    4792:	90 91 75 24 	lds	r25, 0x2475
    4796:	19 95       	eicall
    4798:	ff 91       	pop	r31
    479a:	ef 91       	pop	r30
    479c:	bf 91       	pop	r27
    479e:	af 91       	pop	r26
    47a0:	9f 91       	pop	r25
    47a2:	8f 91       	pop	r24
    47a4:	7f 91       	pop	r23
    47a6:	6f 91       	pop	r22
    47a8:	5f 91       	pop	r21
    47aa:	4f 91       	pop	r20
    47ac:	3f 91       	pop	r19
    47ae:	2f 91       	pop	r18
    47b0:	0f 90       	pop	r0
    47b2:	0b be       	out	0x3b, r0	; 59
    47b4:	0f 90       	pop	r0
    47b6:	0f be       	out	0x3f, r0	; 63
    47b8:	0f 90       	pop	r0
    47ba:	1f 90       	pop	r1
    47bc:	18 95       	reti

000047be <__vector_104>:

/* PORTF interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT0_vect)      /* External Interrupt 0 */
    47be:	1f 92       	push	r1
    47c0:	0f 92       	push	r0
    47c2:	0f b6       	in	r0, 0x3f	; 63
    47c4:	0f 92       	push	r0
    47c6:	11 24       	eor	r1, r1
    47c8:	0b b6       	in	r0, 0x3b	; 59
    47ca:	0f 92       	push	r0
    47cc:	2f 93       	push	r18
    47ce:	3f 93       	push	r19
    47d0:	4f 93       	push	r20
    47d2:	5f 93       	push	r21
    47d4:	6f 93       	push	r22
    47d6:	7f 93       	push	r23
    47d8:	8f 93       	push	r24
    47da:	9f 93       	push	r25
    47dc:	af 93       	push	r26
    47de:	bf 93       	push	r27
    47e0:	ef 93       	push	r30
    47e2:	ff 93       	push	r31
    47e4:	e0 91 94 23 	lds	r30, 0x2394
    47e8:	f0 91 95 23 	lds	r31, 0x2395
    47ec:	30 97       	sbiw	r30, 0x00	; 0
    47ee:	29 f0       	breq	.+10     	; 0x47fa <__vector_104+0x3c>
    47f0:	80 91 8a 24 	lds	r24, 0x248A
    47f4:	90 91 8b 24 	lds	r25, 0x248B
    47f8:	19 95       	eicall
    47fa:	ff 91       	pop	r31
    47fc:	ef 91       	pop	r30
    47fe:	bf 91       	pop	r27
    4800:	af 91       	pop	r26
    4802:	9f 91       	pop	r25
    4804:	8f 91       	pop	r24
    4806:	7f 91       	pop	r23
    4808:	6f 91       	pop	r22
    480a:	5f 91       	pop	r21
    480c:	4f 91       	pop	r20
    480e:	3f 91       	pop	r19
    4810:	2f 91       	pop	r18
    4812:	0f 90       	pop	r0
    4814:	0b be       	out	0x3b, r0	; 59
    4816:	0f 90       	pop	r0
    4818:	0f be       	out	0x3f, r0	; 63
    481a:	0f 90       	pop	r0
    481c:	1f 90       	pop	r1
    481e:	18 95       	reti

00004820 <__vector_105>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT1_vect)      /* External Interrupt 1 */
    4820:	1f 92       	push	r1
    4822:	0f 92       	push	r0
    4824:	0f b6       	in	r0, 0x3f	; 63
    4826:	0f 92       	push	r0
    4828:	11 24       	eor	r1, r1
    482a:	0b b6       	in	r0, 0x3b	; 59
    482c:	0f 92       	push	r0
    482e:	2f 93       	push	r18
    4830:	3f 93       	push	r19
    4832:	4f 93       	push	r20
    4834:	5f 93       	push	r21
    4836:	6f 93       	push	r22
    4838:	7f 93       	push	r23
    483a:	8f 93       	push	r24
    483c:	9f 93       	push	r25
    483e:	af 93       	push	r26
    4840:	bf 93       	push	r27
    4842:	ef 93       	push	r30
    4844:	ff 93       	push	r31
    4846:	e0 91 96 23 	lds	r30, 0x2396
    484a:	f0 91 97 23 	lds	r31, 0x2397
    484e:	30 97       	sbiw	r30, 0x00	; 0
    4850:	29 f0       	breq	.+10     	; 0x485c <__vector_105+0x3c>
    4852:	80 91 8c 24 	lds	r24, 0x248C
    4856:	90 91 8d 24 	lds	r25, 0x248D
    485a:	19 95       	eicall
    485c:	ff 91       	pop	r31
    485e:	ef 91       	pop	r30
    4860:	bf 91       	pop	r27
    4862:	af 91       	pop	r26
    4864:	9f 91       	pop	r25
    4866:	8f 91       	pop	r24
    4868:	7f 91       	pop	r23
    486a:	6f 91       	pop	r22
    486c:	5f 91       	pop	r21
    486e:	4f 91       	pop	r20
    4870:	3f 91       	pop	r19
    4872:	2f 91       	pop	r18
    4874:	0f 90       	pop	r0
    4876:	0b be       	out	0x3b, r0	; 59
    4878:	0f 90       	pop	r0
    487a:	0f be       	out	0x3f, r0	; 63
    487c:	0f 90       	pop	r0
    487e:	1f 90       	pop	r1
    4880:	18 95       	reti

00004882 <__vector_108>:

/* TCF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_OVF_vect)      /* Overflow Interrupt */
    4882:	1f 92       	push	r1
    4884:	0f 92       	push	r0
    4886:	0f b6       	in	r0, 0x3f	; 63
    4888:	0f 92       	push	r0
    488a:	11 24       	eor	r1, r1
    488c:	0b b6       	in	r0, 0x3b	; 59
    488e:	0f 92       	push	r0
    4890:	2f 93       	push	r18
    4892:	3f 93       	push	r19
    4894:	4f 93       	push	r20
    4896:	5f 93       	push	r21
    4898:	6f 93       	push	r22
    489a:	7f 93       	push	r23
    489c:	8f 93       	push	r24
    489e:	9f 93       	push	r25
    48a0:	af 93       	push	r26
    48a2:	bf 93       	push	r27
    48a4:	ef 93       	push	r30
    48a6:	ff 93       	push	r31
    48a8:	e0 91 9c 23 	lds	r30, 0x239C
    48ac:	f0 91 9d 23 	lds	r31, 0x239D
    48b0:	30 97       	sbiw	r30, 0x00	; 0
    48b2:	29 f0       	breq	.+10     	; 0x48be <__vector_108+0x3c>
    48b4:	80 91 92 24 	lds	r24, 0x2492
    48b8:	90 91 93 24 	lds	r25, 0x2493
    48bc:	19 95       	eicall
    48be:	ff 91       	pop	r31
    48c0:	ef 91       	pop	r30
    48c2:	bf 91       	pop	r27
    48c4:	af 91       	pop	r26
    48c6:	9f 91       	pop	r25
    48c8:	8f 91       	pop	r24
    48ca:	7f 91       	pop	r23
    48cc:	6f 91       	pop	r22
    48ce:	5f 91       	pop	r21
    48d0:	4f 91       	pop	r20
    48d2:	3f 91       	pop	r19
    48d4:	2f 91       	pop	r18
    48d6:	0f 90       	pop	r0
    48d8:	0b be       	out	0x3b, r0	; 59
    48da:	0f 90       	pop	r0
    48dc:	0f be       	out	0x3f, r0	; 63
    48de:	0f 90       	pop	r0
    48e0:	1f 90       	pop	r1
    48e2:	18 95       	reti

000048e4 <__vector_109>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_ERR_vect)      /* Error Interrupt */
    48e4:	1f 92       	push	r1
    48e6:	0f 92       	push	r0
    48e8:	0f b6       	in	r0, 0x3f	; 63
    48ea:	0f 92       	push	r0
    48ec:	11 24       	eor	r1, r1
    48ee:	0b b6       	in	r0, 0x3b	; 59
    48f0:	0f 92       	push	r0
    48f2:	2f 93       	push	r18
    48f4:	3f 93       	push	r19
    48f6:	4f 93       	push	r20
    48f8:	5f 93       	push	r21
    48fa:	6f 93       	push	r22
    48fc:	7f 93       	push	r23
    48fe:	8f 93       	push	r24
    4900:	9f 93       	push	r25
    4902:	af 93       	push	r26
    4904:	bf 93       	push	r27
    4906:	ef 93       	push	r30
    4908:	ff 93       	push	r31
    490a:	e0 91 9e 23 	lds	r30, 0x239E
    490e:	f0 91 9f 23 	lds	r31, 0x239F
    4912:	30 97       	sbiw	r30, 0x00	; 0
    4914:	29 f0       	breq	.+10     	; 0x4920 <__vector_109+0x3c>
    4916:	80 91 94 24 	lds	r24, 0x2494
    491a:	90 91 95 24 	lds	r25, 0x2495
    491e:	19 95       	eicall
    4920:	ff 91       	pop	r31
    4922:	ef 91       	pop	r30
    4924:	bf 91       	pop	r27
    4926:	af 91       	pop	r26
    4928:	9f 91       	pop	r25
    492a:	8f 91       	pop	r24
    492c:	7f 91       	pop	r23
    492e:	6f 91       	pop	r22
    4930:	5f 91       	pop	r21
    4932:	4f 91       	pop	r20
    4934:	3f 91       	pop	r19
    4936:	2f 91       	pop	r18
    4938:	0f 90       	pop	r0
    493a:	0b be       	out	0x3b, r0	; 59
    493c:	0f 90       	pop	r0
    493e:	0f be       	out	0x3f, r0	; 63
    4940:	0f 90       	pop	r0
    4942:	1f 90       	pop	r1
    4944:	18 95       	reti

00004946 <__vector_110>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCA_vect)      /* Compare or Capture A Interrupt */
    4946:	1f 92       	push	r1
    4948:	0f 92       	push	r0
    494a:	0f b6       	in	r0, 0x3f	; 63
    494c:	0f 92       	push	r0
    494e:	11 24       	eor	r1, r1
    4950:	0b b6       	in	r0, 0x3b	; 59
    4952:	0f 92       	push	r0
    4954:	2f 93       	push	r18
    4956:	3f 93       	push	r19
    4958:	4f 93       	push	r20
    495a:	5f 93       	push	r21
    495c:	6f 93       	push	r22
    495e:	7f 93       	push	r23
    4960:	8f 93       	push	r24
    4962:	9f 93       	push	r25
    4964:	af 93       	push	r26
    4966:	bf 93       	push	r27
    4968:	ef 93       	push	r30
    496a:	ff 93       	push	r31
    496c:	e0 91 a0 23 	lds	r30, 0x23A0
    4970:	f0 91 a1 23 	lds	r31, 0x23A1
    4974:	30 97       	sbiw	r30, 0x00	; 0
    4976:	29 f0       	breq	.+10     	; 0x4982 <__vector_110+0x3c>
    4978:	80 91 96 24 	lds	r24, 0x2496
    497c:	90 91 97 24 	lds	r25, 0x2497
    4980:	19 95       	eicall
    4982:	ff 91       	pop	r31
    4984:	ef 91       	pop	r30
    4986:	bf 91       	pop	r27
    4988:	af 91       	pop	r26
    498a:	9f 91       	pop	r25
    498c:	8f 91       	pop	r24
    498e:	7f 91       	pop	r23
    4990:	6f 91       	pop	r22
    4992:	5f 91       	pop	r21
    4994:	4f 91       	pop	r20
    4996:	3f 91       	pop	r19
    4998:	2f 91       	pop	r18
    499a:	0f 90       	pop	r0
    499c:	0b be       	out	0x3b, r0	; 59
    499e:	0f 90       	pop	r0
    49a0:	0f be       	out	0x3f, r0	; 63
    49a2:	0f 90       	pop	r0
    49a4:	1f 90       	pop	r1
    49a6:	18 95       	reti

000049a8 <__vector_111>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCB_vect)      /* Compare or Capture B Interrupt */
    49a8:	1f 92       	push	r1
    49aa:	0f 92       	push	r0
    49ac:	0f b6       	in	r0, 0x3f	; 63
    49ae:	0f 92       	push	r0
    49b0:	11 24       	eor	r1, r1
    49b2:	0b b6       	in	r0, 0x3b	; 59
    49b4:	0f 92       	push	r0
    49b6:	2f 93       	push	r18
    49b8:	3f 93       	push	r19
    49ba:	4f 93       	push	r20
    49bc:	5f 93       	push	r21
    49be:	6f 93       	push	r22
    49c0:	7f 93       	push	r23
    49c2:	8f 93       	push	r24
    49c4:	9f 93       	push	r25
    49c6:	af 93       	push	r26
    49c8:	bf 93       	push	r27
    49ca:	ef 93       	push	r30
    49cc:	ff 93       	push	r31
    49ce:	e0 91 a2 23 	lds	r30, 0x23A2
    49d2:	f0 91 a3 23 	lds	r31, 0x23A3
    49d6:	30 97       	sbiw	r30, 0x00	; 0
    49d8:	29 f0       	breq	.+10     	; 0x49e4 <__vector_111+0x3c>
    49da:	80 91 98 24 	lds	r24, 0x2498
    49de:	90 91 99 24 	lds	r25, 0x2499
    49e2:	19 95       	eicall
    49e4:	ff 91       	pop	r31
    49e6:	ef 91       	pop	r30
    49e8:	bf 91       	pop	r27
    49ea:	af 91       	pop	r26
    49ec:	9f 91       	pop	r25
    49ee:	8f 91       	pop	r24
    49f0:	7f 91       	pop	r23
    49f2:	6f 91       	pop	r22
    49f4:	5f 91       	pop	r21
    49f6:	4f 91       	pop	r20
    49f8:	3f 91       	pop	r19
    49fa:	2f 91       	pop	r18
    49fc:	0f 90       	pop	r0
    49fe:	0b be       	out	0x3b, r0	; 59
    4a00:	0f 90       	pop	r0
    4a02:	0f be       	out	0x3f, r0	; 63
    4a04:	0f 90       	pop	r0
    4a06:	1f 90       	pop	r1
    4a08:	18 95       	reti

00004a0a <__vector_112>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCC_vect)      /* Compare or Capture C Interrupt */
    4a0a:	1f 92       	push	r1
    4a0c:	0f 92       	push	r0
    4a0e:	0f b6       	in	r0, 0x3f	; 63
    4a10:	0f 92       	push	r0
    4a12:	11 24       	eor	r1, r1
    4a14:	0b b6       	in	r0, 0x3b	; 59
    4a16:	0f 92       	push	r0
    4a18:	2f 93       	push	r18
    4a1a:	3f 93       	push	r19
    4a1c:	4f 93       	push	r20
    4a1e:	5f 93       	push	r21
    4a20:	6f 93       	push	r22
    4a22:	7f 93       	push	r23
    4a24:	8f 93       	push	r24
    4a26:	9f 93       	push	r25
    4a28:	af 93       	push	r26
    4a2a:	bf 93       	push	r27
    4a2c:	ef 93       	push	r30
    4a2e:	ff 93       	push	r31
    4a30:	e0 91 a4 23 	lds	r30, 0x23A4
    4a34:	f0 91 a5 23 	lds	r31, 0x23A5
    4a38:	30 97       	sbiw	r30, 0x00	; 0
    4a3a:	29 f0       	breq	.+10     	; 0x4a46 <__vector_112+0x3c>
    4a3c:	80 91 9a 24 	lds	r24, 0x249A
    4a40:	90 91 9b 24 	lds	r25, 0x249B
    4a44:	19 95       	eicall
    4a46:	ff 91       	pop	r31
    4a48:	ef 91       	pop	r30
    4a4a:	bf 91       	pop	r27
    4a4c:	af 91       	pop	r26
    4a4e:	9f 91       	pop	r25
    4a50:	8f 91       	pop	r24
    4a52:	7f 91       	pop	r23
    4a54:	6f 91       	pop	r22
    4a56:	5f 91       	pop	r21
    4a58:	4f 91       	pop	r20
    4a5a:	3f 91       	pop	r19
    4a5c:	2f 91       	pop	r18
    4a5e:	0f 90       	pop	r0
    4a60:	0b be       	out	0x3b, r0	; 59
    4a62:	0f 90       	pop	r0
    4a64:	0f be       	out	0x3f, r0	; 63
    4a66:	0f 90       	pop	r0
    4a68:	1f 90       	pop	r1
    4a6a:	18 95       	reti

00004a6c <__vector_113>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCD_vect)      /* Compare or Capture D Interrupt */
    4a6c:	1f 92       	push	r1
    4a6e:	0f 92       	push	r0
    4a70:	0f b6       	in	r0, 0x3f	; 63
    4a72:	0f 92       	push	r0
    4a74:	11 24       	eor	r1, r1
    4a76:	0b b6       	in	r0, 0x3b	; 59
    4a78:	0f 92       	push	r0
    4a7a:	2f 93       	push	r18
    4a7c:	3f 93       	push	r19
    4a7e:	4f 93       	push	r20
    4a80:	5f 93       	push	r21
    4a82:	6f 93       	push	r22
    4a84:	7f 93       	push	r23
    4a86:	8f 93       	push	r24
    4a88:	9f 93       	push	r25
    4a8a:	af 93       	push	r26
    4a8c:	bf 93       	push	r27
    4a8e:	ef 93       	push	r30
    4a90:	ff 93       	push	r31
    4a92:	e0 91 a6 23 	lds	r30, 0x23A6
    4a96:	f0 91 a7 23 	lds	r31, 0x23A7
    4a9a:	30 97       	sbiw	r30, 0x00	; 0
    4a9c:	29 f0       	breq	.+10     	; 0x4aa8 <__vector_113+0x3c>
    4a9e:	80 91 9c 24 	lds	r24, 0x249C
    4aa2:	90 91 9d 24 	lds	r25, 0x249D
    4aa6:	19 95       	eicall
    4aa8:	ff 91       	pop	r31
    4aaa:	ef 91       	pop	r30
    4aac:	bf 91       	pop	r27
    4aae:	af 91       	pop	r26
    4ab0:	9f 91       	pop	r25
    4ab2:	8f 91       	pop	r24
    4ab4:	7f 91       	pop	r23
    4ab6:	6f 91       	pop	r22
    4ab8:	5f 91       	pop	r21
    4aba:	4f 91       	pop	r20
    4abc:	3f 91       	pop	r19
    4abe:	2f 91       	pop	r18
    4ac0:	0f 90       	pop	r0
    4ac2:	0b be       	out	0x3b, r0	; 59
    4ac4:	0f 90       	pop	r0
    4ac6:	0f be       	out	0x3f, r0	; 63
    4ac8:	0f 90       	pop	r0
    4aca:	1f 90       	pop	r1
    4acc:	18 95       	reti

00004ace <__vector_119>:

/* USARTF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_RXC_vect)      /* Reception Complete Interrupt */
    4ace:	1f 92       	push	r1
    4ad0:	0f 92       	push	r0
    4ad2:	0f b6       	in	r0, 0x3f	; 63
    4ad4:	0f 92       	push	r0
    4ad6:	11 24       	eor	r1, r1
    4ad8:	0b b6       	in	r0, 0x3b	; 59
    4ada:	0f 92       	push	r0
    4adc:	2f 93       	push	r18
    4ade:	3f 93       	push	r19
    4ae0:	4f 93       	push	r20
    4ae2:	5f 93       	push	r21
    4ae4:	6f 93       	push	r22
    4ae6:	7f 93       	push	r23
    4ae8:	8f 93       	push	r24
    4aea:	9f 93       	push	r25
    4aec:	af 93       	push	r26
    4aee:	bf 93       	push	r27
    4af0:	ef 93       	push	r30
    4af2:	ff 93       	push	r31
    4af4:	e0 91 b2 23 	lds	r30, 0x23B2
    4af8:	f0 91 b3 23 	lds	r31, 0x23B3
    4afc:	30 97       	sbiw	r30, 0x00	; 0
    4afe:	29 f0       	breq	.+10     	; 0x4b0a <__vector_119+0x3c>
    4b00:	80 91 a8 24 	lds	r24, 0x24A8
    4b04:	90 91 a9 24 	lds	r25, 0x24A9
    4b08:	19 95       	eicall
    4b0a:	ff 91       	pop	r31
    4b0c:	ef 91       	pop	r30
    4b0e:	bf 91       	pop	r27
    4b10:	af 91       	pop	r26
    4b12:	9f 91       	pop	r25
    4b14:	8f 91       	pop	r24
    4b16:	7f 91       	pop	r23
    4b18:	6f 91       	pop	r22
    4b1a:	5f 91       	pop	r21
    4b1c:	4f 91       	pop	r20
    4b1e:	3f 91       	pop	r19
    4b20:	2f 91       	pop	r18
    4b22:	0f 90       	pop	r0
    4b24:	0b be       	out	0x3b, r0	; 59
    4b26:	0f 90       	pop	r0
    4b28:	0f be       	out	0x3f, r0	; 63
    4b2a:	0f 90       	pop	r0
    4b2c:	1f 90       	pop	r1
    4b2e:	18 95       	reti

00004b30 <__vector_120>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_DRE_vect)      /* Data Register Empty Interrupt */
    4b30:	1f 92       	push	r1
    4b32:	0f 92       	push	r0
    4b34:	0f b6       	in	r0, 0x3f	; 63
    4b36:	0f 92       	push	r0
    4b38:	11 24       	eor	r1, r1
    4b3a:	0b b6       	in	r0, 0x3b	; 59
    4b3c:	0f 92       	push	r0
    4b3e:	2f 93       	push	r18
    4b40:	3f 93       	push	r19
    4b42:	4f 93       	push	r20
    4b44:	5f 93       	push	r21
    4b46:	6f 93       	push	r22
    4b48:	7f 93       	push	r23
    4b4a:	8f 93       	push	r24
    4b4c:	9f 93       	push	r25
    4b4e:	af 93       	push	r26
    4b50:	bf 93       	push	r27
    4b52:	ef 93       	push	r30
    4b54:	ff 93       	push	r31
    4b56:	e0 91 b4 23 	lds	r30, 0x23B4
    4b5a:	f0 91 b5 23 	lds	r31, 0x23B5
    4b5e:	30 97       	sbiw	r30, 0x00	; 0
    4b60:	29 f0       	breq	.+10     	; 0x4b6c <__vector_120+0x3c>
    4b62:	80 91 aa 24 	lds	r24, 0x24AA
    4b66:	90 91 ab 24 	lds	r25, 0x24AB
    4b6a:	19 95       	eicall
    4b6c:	ff 91       	pop	r31
    4b6e:	ef 91       	pop	r30
    4b70:	bf 91       	pop	r27
    4b72:	af 91       	pop	r26
    4b74:	9f 91       	pop	r25
    4b76:	8f 91       	pop	r24
    4b78:	7f 91       	pop	r23
    4b7a:	6f 91       	pop	r22
    4b7c:	5f 91       	pop	r21
    4b7e:	4f 91       	pop	r20
    4b80:	3f 91       	pop	r19
    4b82:	2f 91       	pop	r18
    4b84:	0f 90       	pop	r0
    4b86:	0b be       	out	0x3b, r0	; 59
    4b88:	0f 90       	pop	r0
    4b8a:	0f be       	out	0x3f, r0	; 63
    4b8c:	0f 90       	pop	r0
    4b8e:	1f 90       	pop	r1
    4b90:	18 95       	reti

00004b92 <__vector_121>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_TXC_vect)      /* Transmission Complete Interrupt */
    4b92:	1f 92       	push	r1
    4b94:	0f 92       	push	r0
    4b96:	0f b6       	in	r0, 0x3f	; 63
    4b98:	0f 92       	push	r0
    4b9a:	11 24       	eor	r1, r1
    4b9c:	0b b6       	in	r0, 0x3b	; 59
    4b9e:	0f 92       	push	r0
    4ba0:	2f 93       	push	r18
    4ba2:	3f 93       	push	r19
    4ba4:	4f 93       	push	r20
    4ba6:	5f 93       	push	r21
    4ba8:	6f 93       	push	r22
    4baa:	7f 93       	push	r23
    4bac:	8f 93       	push	r24
    4bae:	9f 93       	push	r25
    4bb0:	af 93       	push	r26
    4bb2:	bf 93       	push	r27
    4bb4:	ef 93       	push	r30
    4bb6:	ff 93       	push	r31
    4bb8:	e0 91 b6 23 	lds	r30, 0x23B6
    4bbc:	f0 91 b7 23 	lds	r31, 0x23B7
    4bc0:	30 97       	sbiw	r30, 0x00	; 0
    4bc2:	29 f0       	breq	.+10     	; 0x4bce <__vector_121+0x3c>
    4bc4:	80 91 ac 24 	lds	r24, 0x24AC
    4bc8:	90 91 ad 24 	lds	r25, 0x24AD
    4bcc:	19 95       	eicall
    4bce:	ff 91       	pop	r31
    4bd0:	ef 91       	pop	r30
    4bd2:	bf 91       	pop	r27
    4bd4:	af 91       	pop	r26
    4bd6:	9f 91       	pop	r25
    4bd8:	8f 91       	pop	r24
    4bda:	7f 91       	pop	r23
    4bdc:	6f 91       	pop	r22
    4bde:	5f 91       	pop	r21
    4be0:	4f 91       	pop	r20
    4be2:	3f 91       	pop	r19
    4be4:	2f 91       	pop	r18
    4be6:	0f 90       	pop	r0
    4be8:	0b be       	out	0x3b, r0	; 59
    4bea:	0f 90       	pop	r0
    4bec:	0f be       	out	0x3f, r0	; 63
    4bee:	0f 90       	pop	r0
    4bf0:	1f 90       	pop	r1
    4bf2:	18 95       	reti

00004bf4 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual()
{	
	while(1)
	{
		laserBoard.BeepClassError();
    4bf4:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <_ZN11CLaserBoard14BeepClassErrorEv>
CLaserControlApp App;
CDS18B20 D18B20;

int temperature = 0;

extern "C" void __cxa_pure_virtual()
    4bf8:	fd cf       	rjmp	.-6      	; 0x4bf4 <__cxa_pure_virtual>

00004bfa <_GLOBAL__sub_I_dacSPI>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    4bfa:	88 ea       	ldi	r24, 0xA8	; 168
    4bfc:	95 e2       	ldi	r25, 0x25	; 37
    4bfe:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <_ZN4CSPIC1Ev>
CTimerD timeout;
    4c02:	85 ea       	ldi	r24, 0xA5	; 165
    4c04:	95 e2       	ldi	r25, 0x25	; 37
    4c06:	0e 94 14 30 	call	0x6028	; 0x6028 <_ZN7CTimerDC1Ev>
CTimerC1 flowtimer;
    4c0a:	82 ea       	ldi	r24, 0xA2	; 162
    4c0c:	95 e2       	ldi	r25, 0x25	; 37
    4c0e:	0e 94 3d 2f 	call	0x5e7a	; 0x5e7a <_ZN8CTimerC1C1Ev>
CTimerD1 pwmtimer;
    4c12:	8f e9       	ldi	r24, 0x9F	; 159
    4c14:	95 e2       	ldi	r25, 0x25	; 37
    4c16:	0e 94 c3 30 	call	0x6186	; 0x6186 <_ZN8CTimerD1C1Ev>
CDGUSUSART usart;
    4c1a:	8d e9       	ldi	r24, 0x9D	; 157
    4c1c:	95 e2       	ldi	r25, 0x25	; 37
    4c1e:	0e 94 6a 2b 	call	0x56d4	; 0x56d4 <_ZN10CDGUSUSARTC1Ev>
CDGUSDatabase Database;
    4c22:	85 e9       	ldi	r24, 0x95	; 149
    4c24:	95 e2       	ldi	r25, 0x25	; 37
    4c26:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_ZN13CDGUSDatabaseC1Ev>
CMBSender sender;
    4c2a:	88 e7       	ldi	r24, 0x78	; 120
    4c2c:	95 e2       	ldi	r25, 0x25	; 37
    4c2e:	0e 94 81 28 	call	0x5102	; 0x5102 <_ZN9CMBSenderC1Ev>
CLaserBoard laserBoard;
    4c32:	8e e6       	ldi	r24, 0x6E	; 110
    4c34:	95 e2       	ldi	r25, 0x25	; 37
    4c36:	0e 94 51 2c 	call	0x58a2	; 0x58a2 <_ZN11CLaserBoardC1Ev>
CSoundPlayer player;
    4c3a:	8d e6       	ldi	r24, 0x6D	; 109
    4c3c:	95 e2       	ldi	r25, 0x25	; 37
    4c3e:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <_ZN12CSoundPlayerC1Ev>
CLaserControlApp App;
    4c42:	87 ef       	ldi	r24, 0xF7	; 247
    4c44:	94 e2       	ldi	r25, 0x24	; 36
    4c46:	0e 94 23 05 	call	0xa46	; 0xa46 <_ZN16CLaserControlAppC1Ev>
CDS18B20 D18B20;
    4c4a:	86 ef       	ldi	r24, 0xF6	; 246
    4c4c:	94 e2       	ldi	r25, 0x24	; 36
    4c4e:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <_ZN8CDS18B20C1Ev>
    4c52:	08 95       	ret

00004c54 <_GLOBAL__sub_D_dacSPI>:
    4c54:	86 ef       	ldi	r24, 0xF6	; 246
    4c56:	94 e2       	ldi	r25, 0x24	; 36
    4c58:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <_ZN8CDS18B20D1Ev>
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;
    4c5c:	87 ef       	ldi	r24, 0xF7	; 247
    4c5e:	94 e2       	ldi	r25, 0x24	; 36
    4c60:	0e 94 29 05 	call	0xa52	; 0xa52 <_ZN16CLaserControlAppD1Ev>
CTimerD1 pwmtimer;
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
    4c64:	8d e6       	ldi	r24, 0x6D	; 109
    4c66:	95 e2       	ldi	r25, 0x25	; 37
    4c68:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <_ZN12CSoundPlayerD1Ev>
CTimerC1 flowtimer;
CTimerD1 pwmtimer;
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
CLaserBoard laserBoard;
    4c6c:	8e e6       	ldi	r24, 0x6E	; 110
    4c6e:	95 e2       	ldi	r25, 0x25	; 37
    4c70:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <_ZN11CLaserBoardD1Ev>
CTimerD timeout;
CTimerC1 flowtimer;
CTimerD1 pwmtimer;
CDGUSUSART usart;
CDGUSDatabase Database;
CMBSender sender;
    4c74:	88 e7       	ldi	r24, 0x78	; 120
    4c76:	95 e2       	ldi	r25, 0x25	; 37
    4c78:	0e 94 f6 28 	call	0x51ec	; 0x51ec <_ZN9CMBSenderD1Ev>
CSPI dacSPI;
CTimerD timeout;
CTimerC1 flowtimer;
CTimerD1 pwmtimer;
CDGUSUSART usart;
CDGUSDatabase Database;
    4c7c:	85 e9       	ldi	r24, 0x95	; 149
    4c7e:	95 e2       	ldi	r25, 0x25	; 37
    4c80:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN13CDGUSDatabaseD1Ev>
/* Global variables */
CSPI dacSPI;
CTimerD timeout;
CTimerC1 flowtimer;
CTimerD1 pwmtimer;
CDGUSUSART usart;
    4c84:	8d e9       	ldi	r24, 0x9D	; 157
    4c86:	95 e2       	ldi	r25, 0x25	; 37
    4c88:	0e 94 76 2b 	call	0x56ec	; 0x56ec <_ZN10CDGUSUSARTD1Ev>

/* Global variables */
CSPI dacSPI;
CTimerD timeout;
CTimerC1 flowtimer;
CTimerD1 pwmtimer;
    4c8c:	8f e9       	ldi	r24, 0x9F	; 159
    4c8e:	95 e2       	ldi	r25, 0x25	; 37
    4c90:	0e 94 cf 30 	call	0x619e	; 0x619e <_ZN8CTimerD1D1Ev>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerD timeout;
CTimerC1 flowtimer;
    4c94:	82 ea       	ldi	r24, 0xA2	; 162
    4c96:	95 e2       	ldi	r25, 0x25	; 37
    4c98:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <_ZN8CTimerC1D1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CTimerD timeout;
    4c9c:	85 ea       	ldi	r24, 0xA5	; 165
    4c9e:	95 e2       	ldi	r25, 0x25	; 37
    4ca0:	0e 94 20 30 	call	0x6040	; 0x6040 <_ZN7CTimerDD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    4ca4:	88 ea       	ldi	r24, 0xA8	; 168
    4ca6:	95 e2       	ldi	r25, 0x25	; 37
    4ca8:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <_ZN4CSPID1Ev>
    4cac:	08 95       	ret

00004cae <_Z16SystemInitializev>:
		laserBoard.BeepClassError();
	}
}

void SystemInitialize()
{
    4cae:	cf 92       	push	r12
    4cb0:	df 92       	push	r13
    4cb2:	ef 92       	push	r14
    4cb4:	ff 92       	push	r15
    4cb6:	0f 93       	push	r16
    4cb8:	1f 93       	push	r17
	//LASER_CNT_EEPROMADDR
	//eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, 0);
	
	cli();	/* Disable global interrupts */
    4cba:	f8 94       	cli
	
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTC_PIN4_gc;
    4cbc:	84 e6       	ldi	r24, 0x64	; 100
    4cbe:	80 93 80 01 	sts	0x0180, r24
	
	// Initialize modules
	laserBoard.InitializeIO();
    4cc2:	8e e6       	ldi	r24, 0x6E	; 110
    4cc4:	95 e2       	ldi	r25, 0x25	; 37
    4cc6:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <_ZN11CLaserBoard12InitializeIOEv>
	D18B20.Initialize();
    4cca:	86 ef       	ldi	r24, 0xF6	; 246
    4ccc:	94 e2       	ldi	r25, 0x24	; 36
    4cce:	0e 94 4b 2c 	call	0x5896	; 0x5896 <_ZN8CDS18B2010InitializeEv>
	// TimerE0, TimerE1
	player.Initialize();
    4cd2:	8d e6       	ldi	r24, 0x6D	; 109
    4cd4:	95 e2       	ldi	r25, 0x25	; 37
    4cd6:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <_ZN12CSoundPlayer10InitializeEv>
	// TimerD0
	timeout.Initialize(WGM_Normal, CS_DIV1024);
    4cda:	47 e0       	ldi	r20, 0x07	; 7
    4cdc:	60 e0       	ldi	r22, 0x00	; 0
    4cde:	85 ea       	ldi	r24, 0xA5	; 165
    4ce0:	95 e2       	ldi	r25, 0x25	; 37
    4ce2:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timeout.SetPeriod(31250); //1s timeout
    4ce6:	62 e1       	ldi	r22, 0x12	; 18
    4ce8:	7a e7       	ldi	r23, 0x7A	; 122
    4cea:	85 ea       	ldi	r24, 0xA5	; 165
    4cec:	95 e2       	ldi	r25, 0x25	; 37
    4cee:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <_ZN7CTimerD9SetPeriodEj>
	// TimerC1
	flowtimer.Initialize(WGM_Normal, CS_EventChannel0);
    4cf2:	48 e0       	ldi	r20, 0x08	; 8
    4cf4:	60 e0       	ldi	r22, 0x00	; 0
    4cf6:	82 ea       	ldi	r24, 0xA2	; 162
    4cf8:	95 e2       	ldi	r25, 0x25	; 37
    4cfa:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	flowtimer.SetPeriod(65535);
    4cfe:	6f ef       	ldi	r22, 0xFF	; 255
    4d00:	7f ef       	ldi	r23, 0xFF	; 255
    4d02:	82 ea       	ldi	r24, 0xA2	; 162
    4d04:	95 e2       	ldi	r25, 0x25	; 37
    4d06:	0e 94 e6 2e 	call	0x5dcc	; 0x5dcc <_ZN8CTimerC19SetPeriodEj>
	flowtimer.Start(65535);
    4d0a:	6f ef       	ldi	r22, 0xFF	; 255
    4d0c:	7f ef       	ldi	r23, 0xFF	; 255
    4d0e:	82 ea       	ldi	r24, 0xA2	; 162
    4d10:	95 e2       	ldi	r25, 0x25	; 37
    4d12:	0e 94 b9 2e 	call	0x5d72	; 0x5d72 <_ZN8CTimerC15StartEj>
	// TimerD1
	pwmtimer.Initialize(WGM_SingleSlopePWM, CS_DIV256);
    4d16:	46 e0       	ldi	r20, 0x06	; 6
    4d18:	63 e0       	ldi	r22, 0x03	; 3
    4d1a:	8f e9       	ldi	r24, 0x9F	; 159
    4d1c:	95 e2       	ldi	r25, 0x25	; 37
    4d1e:	0e 94 28 30 	call	0x6050	; 0x6050 <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	//pwmtimer.Start(1024);
	pwmtimer.SetCOMPA(512);
    4d22:	60 e0       	ldi	r22, 0x00	; 0
    4d24:	72 e0       	ldi	r23, 0x02	; 2
    4d26:	8f e9       	ldi	r24, 0x9F	; 159
    4d28:	95 e2       	ldi	r25, 0x25	; 37
    4d2a:	0e 94 71 30 	call	0x60e2	; 0x60e2 <_ZN8CTimerD18SetCOMPAEj>
	laserBoard.PWMOn();
    4d2e:	8e e6       	ldi	r24, 0x6E	; 110
    4d30:	95 e2       	ldi	r25, 0x25	; 37
    4d32:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <_ZN11CLaserBoard5PWMOnEv>
	//pwmtimer.EnableChannel(TIMER_CHANNEL_A);
	pwmtimer.SetOVFCallback(App.OnPWMTimerOVFStatic, &App, TC_OVFINTLVL_LO_gc);
    4d36:	21 e0       	ldi	r18, 0x01	; 1
    4d38:	47 ef       	ldi	r20, 0xF7	; 247
    4d3a:	54 e2       	ldi	r21, 0x24	; 36
    4d3c:	6c e4       	ldi	r22, 0x4C	; 76
    4d3e:	76 e0       	ldi	r23, 0x06	; 6
    4d40:	8f e9       	ldi	r24, 0x9F	; 159
    4d42:	95 e2       	ldi	r25, 0x25	; 37
    4d44:	0e 94 7b 30 	call	0x60f6	; 0x60f6 <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	pwmtimer.SetCOMPACallback(App.OnPWMTimerCMPStatic, &App, TC_CCAINTLVL_LO_gc);
    4d48:	21 e0       	ldi	r18, 0x01	; 1
    4d4a:	47 ef       	ldi	r20, 0xF7	; 247
    4d4c:	54 e2       	ldi	r21, 0x24	; 36
    4d4e:	61 e5       	ldi	r22, 0x51	; 81
    4d50:	76 e0       	ldi	r23, 0x06	; 6
    4d52:	8f e9       	ldi	r24, 0x9F	; 159
    4d54:	95 e2       	ldi	r25, 0x25	; 37
    4d56:	0e 94 9f 30 	call	0x613e	; 0x613e <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
	
	dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    4d5a:	0f 2e       	mov	r0, r31
    4d5c:	f3 e0       	ldi	r31, 0x03	; 3
    4d5e:	ef 2e       	mov	r14, r31
    4d60:	f0 2d       	mov	r31, r0
    4d62:	00 e0       	ldi	r16, 0x00	; 0
    4d64:	23 e0       	ldi	r18, 0x03	; 3
    4d66:	40 e0       	ldi	r20, 0x00	; 0
    4d68:	61 e0       	ldi	r22, 0x01	; 1
    4d6a:	88 ea       	ldi	r24, 0xA8	; 168
    4d6c:	95 e2       	ldi	r25, 0x25	; 37
    4d6e:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
	usart.Initialize(BAUD_115200_ERM0P1, PARITY_DISABLE, STOPBITS_1BIT, true);
    4d72:	01 e0       	ldi	r16, 0x01	; 1
    4d74:	20 e0       	ldi	r18, 0x00	; 0
    4d76:	40 e0       	ldi	r20, 0x00	; 0
    4d78:	6d e0       	ldi	r22, 0x0D	; 13
    4d7a:	8d e9       	ldi	r24, 0x9D	; 157
    4d7c:	95 e2       	ldi	r25, 0x25	; 37
    4d7e:	0e 94 ee 2a 	call	0x55dc	; 0x55dc <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
	sender.Initialize(&timeout, &usart, &App, 256, 256, 31250);
    4d82:	0f 2e       	mov	r0, r31
    4d84:	f2 e1       	ldi	r31, 0x12	; 18
    4d86:	cf 2e       	mov	r12, r31
    4d88:	fa e7       	ldi	r31, 0x7A	; 122
    4d8a:	df 2e       	mov	r13, r31
    4d8c:	f0 2d       	mov	r31, r0
    4d8e:	e1 2c       	mov	r14, r1
    4d90:	ff 24       	eor	r15, r15
    4d92:	f3 94       	inc	r15
    4d94:	00 e0       	ldi	r16, 0x00	; 0
    4d96:	11 e0       	ldi	r17, 0x01	; 1
    4d98:	27 ef       	ldi	r18, 0xF7	; 247
    4d9a:	34 e2       	ldi	r19, 0x24	; 36
    4d9c:	4d e9       	ldi	r20, 0x9D	; 157
    4d9e:	55 e2       	ldi	r21, 0x25	; 37
    4da0:	65 ea       	ldi	r22, 0xA5	; 165
    4da2:	75 e2       	ldi	r23, 0x25	; 37
    4da4:	88 e7       	ldi	r24, 0x78	; 120
    4da6:	95 e2       	ldi	r25, 0x25	; 37
    4da8:	0e 94 87 28 	call	0x510e	; 0x510e <_ZN9CMBSender10InitializeEP6CTimerP6CUSARTP16CMBEventsHandlerjjj>
	Database.Initialize(&sender, VARIABLE_ADDR_DATABASE);
    4dac:	40 e0       	ldi	r20, 0x00	; 0
    4dae:	51 e0       	ldi	r21, 0x01	; 1
    4db0:	68 e7       	ldi	r22, 0x78	; 120
    4db2:	75 e2       	ldi	r23, 0x25	; 37
    4db4:	85 e9       	ldi	r24, 0x95	; 149
    4db6:	95 e2       	ldi	r25, 0x25	; 37
    4db8:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>
	// TimerC0, TimerF0
	App.Initialize(&sender);
    4dbc:	68 e7       	ldi	r22, 0x78	; 120
    4dbe:	75 e2       	ldi	r23, 0x25	; 37
    4dc0:	87 ef       	ldi	r24, 0xF7	; 247
    4dc2:	94 e2       	ldi	r25, 0x24	; 36
    4dc4:	0e 94 b4 08 	call	0x1168	; 0x1168 <_ZN16CLaserControlApp10InitializeEP9CMBSender>
	laserBoard.InitializeClock();
    4dc8:	8e e6       	ldi	r24, 0x6E	; 110
    4dca:	95 e2       	ldi	r25, 0x25	; 37
    4dcc:	0e 94 b3 2c 	call	0x5966	; 0x5966 <_ZN11CLaserBoard15InitializeClockEv>
	
	InterruptSenderTable[PORTC_INT0_vect_num] = &App;
    4dd0:	87 ef       	ldi	r24, 0xF7	; 247
    4dd2:	94 e2       	ldi	r25, 0x24	; 36
    4dd4:	80 93 be 23 	sts	0x23BE, r24
    4dd8:	90 93 bf 23 	sts	0x23BF, r25
	InterruptFuncTable[PORTC_INT0_vect_num] = App.OnINT0Static;
    4ddc:	80 ea       	ldi	r24, 0xA0	; 160
    4dde:	91 e1       	ldi	r25, 0x11	; 17
    4de0:	80 93 c8 22 	sts	0x22C8, r24
    4de4:	90 93 c9 22 	sts	0x22C9, r25
	
	sei();	/* Enable global interrupts */
    4de8:	78 94       	sei
}
    4dea:	1f 91       	pop	r17
    4dec:	0f 91       	pop	r16
    4dee:	ff 90       	pop	r15
    4df0:	ef 90       	pop	r14
    4df2:	df 90       	pop	r13
    4df4:	cf 90       	pop	r12
    4df6:	08 95       	ret

00004df8 <main>:

DGUS_PROFILE empty_record;
	 
int main(void)
{
    4df8:	cf 93       	push	r28
    4dfa:	df 93       	push	r29
    4dfc:	cd b7       	in	r28, 0x3d	; 61
    4dfe:	de b7       	in	r29, 0x3e	; 62
    4e00:	60 97       	sbiw	r28, 0x10	; 16
    4e02:	cd bf       	out	0x3d, r28	; 61
    4e04:	de bf       	out	0x3e, r29	; 62
	//eeprom_write_dword((uint32_t*)LASER_CNT_EEPROMADDR, 0);
	// Initialization system
	SystemInitialize();
    4e06:	0e 94 57 26 	call	0x4cae	; 0x4cae <_Z16SystemInitializev>
	
	float x = 0.0f;
	char empty_name[] = "Empty\0";
    4e0a:	87 e0       	ldi	r24, 0x07	; 7
    4e0c:	e4 e6       	ldi	r30, 0x64	; 100
    4e0e:	f1 e2       	ldi	r31, 0x21	; 33
    4e10:	de 01       	movw	r26, r28
    4e12:	18 96       	adiw	r26, 0x08	; 8
    4e14:	01 90       	ld	r0, Z+
    4e16:	0d 92       	st	X+, r0
    4e18:	8a 95       	dec	r24
    4e1a:	e1 f7       	brne	.-8      	; 0x4e14 <main+0x1c>
	char empty_time[] = "00:00\0";
    4e1c:	87 e0       	ldi	r24, 0x07	; 7
    4e1e:	eb e6       	ldi	r30, 0x6B	; 107
    4e20:	f1 e2       	ldi	r31, 0x21	; 33
    4e22:	de 01       	movw	r26, r28
    4e24:	11 96       	adiw	r26, 0x01	; 1
    4e26:	01 90       	ld	r0, Z+
    4e28:	0d 92       	st	X+, r0
    4e2a:	8a 95       	dec	r24
    4e2c:	e1 f7       	brne	.-8      	; 0x4e26 <main+0x2e>
	
	empty_record.ID = 0;
    4e2e:	10 92 b0 24 	sts	0x24B0, r1
    4e32:	10 92 b1 24 	sts	0x24B1, r1
	ConvertData(empty_record.Name, empty_name, 6, 0);
    4e36:	20 e0       	ldi	r18, 0x00	; 0
    4e38:	30 e0       	ldi	r19, 0x00	; 0
    4e3a:	46 e0       	ldi	r20, 0x06	; 6
    4e3c:	50 e0       	ldi	r21, 0x00	; 0
    4e3e:	be 01       	movw	r22, r28
    4e40:	68 5f       	subi	r22, 0xF8	; 248
    4e42:	7f 4f       	sbci	r23, 0xFF	; 255
    4e44:	82 eb       	ldi	r24, 0xB2	; 178
    4e46:	94 e2       	ldi	r25, 0x24	; 36
    4e48:	0e 94 a3 11 	call	0x2346	; 0x2346 <_Z11ConvertDataPvS_jj>
	ConvertData(empty_record.Time, empty_time, 6, 0);
    4e4c:	20 e0       	ldi	r18, 0x00	; 0
    4e4e:	30 e0       	ldi	r19, 0x00	; 0
    4e50:	46 e0       	ldi	r20, 0x06	; 6
    4e52:	50 e0       	ldi	r21, 0x00	; 0
    4e54:	be 01       	movw	r22, r28
    4e56:	6f 5f       	subi	r22, 0xFF	; 255
    4e58:	7f 4f       	sbci	r23, 0xFF	; 255
    4e5a:	82 ed       	ldi	r24, 0xD2	; 210
    4e5c:	94 e2       	ldi	r25, 0x24	; 36
    4e5e:	0e 94 a3 11 	call	0x2346	; 0x2346 <_Z11ConvertDataPvS_jj>
	empty_record.Power = 0;
    4e62:	10 92 f2 24 	sts	0x24F2, r1
    4e66:	10 92 f3 24 	sts	0x24F3, r1
    4e6a:	2a ea       	ldi	r18, 0xAA	; 170
    4e6c:	36 ee       	ldi	r19, 0xE6	; 230
    4e6e:	86 e9       	ldi	r24, 0x96	; 150
    4e70:	91 e0       	ldi	r25, 0x01	; 1
    4e72:	21 50       	subi	r18, 0x01	; 1
    4e74:	30 40       	sbci	r19, 0x00	; 0
    4e76:	80 40       	sbci	r24, 0x00	; 0
    4e78:	90 40       	sbci	r25, 0x00	; 0
    4e7a:	d9 f7       	brne	.-10     	; 0x4e72 <main+0x7a>
    4e7c:	00 00       	nop
	}*/
	
	// Startup delay (Beep "Imperial March")
	//player.Play();
	_delay_ms(5000);
	laserBoard.Relay1On();
    4e7e:	8e e6       	ldi	r24, 0x6E	; 110
    4e80:	95 e2       	ldi	r25, 0x25	; 37
    4e82:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <_ZN11CLaserBoard8Relay1OnEv>
    4e86:	2f ef       	ldi	r18, 0xFF	; 255
    4e88:	33 ec       	ldi	r19, 0xC3	; 195
    4e8a:	89 e0       	ldi	r24, 0x09	; 9
    4e8c:	21 50       	subi	r18, 0x01	; 1
    4e8e:	30 40       	sbci	r19, 0x00	; 0
    4e90:	80 40       	sbci	r24, 0x00	; 0
    4e92:	e1 f7       	brne	.-8      	; 0x4e8c <main+0x94>
    4e94:	00 c0       	rjmp	.+0      	; 0x4e96 <main+0x9e>
    4e96:	00 00       	nop
	_delay_ms(100);
	//laserBoard.Relay1Off();
	
	uint16_t data = 0;
    4e98:	1f 86       	std	Y+15, r1	; 0x0f
    4e9a:	18 8a       	std	Y+16, r1	; 0x10
	dacSPI.Send((uint8_t*)&data, sizeof(data));
    4e9c:	42 e0       	ldi	r20, 0x02	; 2
    4e9e:	50 e0       	ldi	r21, 0x00	; 0
    4ea0:	be 01       	movw	r22, r28
    4ea2:	61 5f       	subi	r22, 0xF1	; 241
    4ea4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ea6:	88 ea       	ldi	r24, 0xA8	; 168
    4ea8:	95 e2       	ldi	r25, 0x25	; 37
    4eaa:	0e 94 24 12 	call	0x2448	; 0x2448 <_ZN4CSPI4SendEPhj>
	
	// Initialize application GUI
	App.Start();
    4eae:	87 ef       	ldi	r24, 0xF7	; 247
    4eb0:	94 e2       	ldi	r25, 0x24	; 36
    4eb2:	0e 94 c6 09 	call	0x138c	; 0x138c <_ZN16CLaserControlApp5StartEv>
    while (1) 
    {
		// Loop delay
		//_delay_ms(1);
		
		laserBoard.PortCheck();
    4eb6:	8e e6       	ldi	r24, 0x6E	; 110
    4eb8:	95 e2       	ldi	r25, 0x25	; 37
    4eba:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <_ZN11CLaserBoard9PortCheckEv>
		
		// Process application
		//static uint16_t prs = 0;
		//if ((prs++ % 5) == 0)
		{
			App.Run();
    4ebe:	87 ef       	ldi	r24, 0xF7	; 247
    4ec0:	94 e2       	ldi	r25, 0x24	; 36
    4ec2:	0e 94 22 0a 	call	0x1444	; 0x1444 <_ZN16CLaserControlApp3RunEv>
			
			//while (dacSPI.transmitterState() > 0);
			//dacSPI.Deinitialize();
			//_delay_ms(1);
			temperature = D18B20.temp_18b20();
    4ec6:	86 ef       	ldi	r24, 0xF6	; 246
    4ec8:	94 e2       	ldi	r25, 0x24	; 36
    4eca:	0e 94 07 2c 	call	0x580e	; 0x580e <_ZN8CDS18B2010temp_18b20Ev>
    4ece:	80 93 f4 24 	sts	0x24F4, r24
    4ed2:	90 93 f5 24 	sts	0x24F5, r25
			//_delay_ms(1);
			//dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
			
			if (temperature > 265)
    4ed6:	8a 30       	cpi	r24, 0x0A	; 10
    4ed8:	91 40       	sbci	r25, 0x01	; 1
    4eda:	24 f0       	brlt	.+8      	; 0x4ee4 <main+0xec>
				laserBoard.Relay2On();
    4edc:	8e e6       	ldi	r24, 0x6E	; 110
    4ede:	95 e2       	ldi	r25, 0x25	; 37
    4ee0:	0e 94 f4 2c 	call	0x59e8	; 0x59e8 <_ZN11CLaserBoard8Relay2OnEv>
			
			if (temperature <255)
    4ee4:	80 91 f4 24 	lds	r24, 0x24F4
    4ee8:	90 91 f5 24 	lds	r25, 0x24F5
    4eec:	8f 3f       	cpi	r24, 0xFF	; 255
    4eee:	91 05       	cpc	r25, r1
    4ef0:	14 f7       	brge	.-60     	; 0x4eb6 <main+0xbe>
				laserBoard.Relay2Off();			
    4ef2:	8e e6       	ldi	r24, 0x6E	; 110
    4ef4:	95 e2       	ldi	r25, 0x25	; 37
    4ef6:	0e 94 f8 2c 	call	0x59f0	; 0x59f0 <_ZN11CLaserBoard9Relay2OffEv>
    4efa:	dd cf       	rjmp	.-70     	; 0x4eb6 <main+0xbe>

00004efc <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
	free(tx_buffer);
}

// local methods
void CMBEventsHandler::FillRegDataTx(uint8_t addr, uint8_t* data, uint8_t length)
{
    4efc:	cf 93       	push	r28
    4efe:	df 93       	push	r29
    4f00:	ec 01       	movw	r28, r24
		// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4f02:	ec 81       	ldd	r30, Y+4	; 0x04
    4f04:	fd 81       	ldd	r31, Y+5	; 0x05
    4f06:	8a ea       	ldi	r24, 0xAA	; 170
    4f08:	80 83       	st	Z, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4f0a:	ec 81       	ldd	r30, Y+4	; 0x04
    4f0c:	fd 81       	ldd	r31, Y+5	; 0x05
    4f0e:	8c ec       	ldi	r24, 0xCC	; 204
    4f10:	81 83       	std	Z+1, r24	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 4; //CMD (1) + DATA(length) + CRC(2) + ADDR(1)
#else
	tx_buffer[2] = length + 2; //CMD (1) + DATA(length) + ADDR(1)
    4f12:	ec 81       	ldd	r30, Y+4	; 0x04
    4f14:	fd 81       	ldd	r31, Y+5	; 0x05
    4f16:	82 e0       	ldi	r24, 0x02	; 2
    4f18:	82 0f       	add	r24, r18
    4f1a:	82 83       	std	Z+2, r24	; 0x02
#endif
	tx_buffer[3] = 0x80;	// Frame command
    4f1c:	ec 81       	ldd	r30, Y+4	; 0x04
    4f1e:	fd 81       	ldd	r31, Y+5	; 0x05
    4f20:	80 e8       	ldi	r24, 0x80	; 128
    4f22:	83 83       	std	Z+3, r24	; 0x03
	tx_buffer[4] = addr;	// Register address
    4f24:	ec 81       	ldd	r30, Y+4	; 0x04
    4f26:	fd 81       	ldd	r31, Y+5	; 0x05
    4f28:	64 83       	std	Z+4, r22	; 0x04
	tx_frame_length = length + 5;
    4f2a:	85 e0       	ldi	r24, 0x05	; 5
    4f2c:	82 0f       	add	r24, r18
    4f2e:	89 87       	std	Y+9, r24	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    4f30:	30 e0       	ldi	r19, 0x00	; 0
    4f32:	21 15       	cp	r18, r1
    4f34:	31 05       	cpc	r19, r1
    4f36:	81 f0       	breq	.+32     	; 0x4f58 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x5c>
    4f38:	da 01       	movw	r26, r20
    4f3a:	42 0f       	add	r20, r18
    4f3c:	53 1f       	adc	r21, r19
    4f3e:	65 e0       	ldi	r22, 0x05	; 5
    4f40:	70 e0       	ldi	r23, 0x00	; 0
		tx_buffer[i+5] = data[i];
    4f42:	9d 91       	ld	r25, X+
    4f44:	ec 81       	ldd	r30, Y+4	; 0x04
    4f46:	fd 81       	ldd	r31, Y+5	; 0x05
    4f48:	e6 0f       	add	r30, r22
    4f4a:	f7 1f       	adc	r31, r23
    4f4c:	90 83       	st	Z, r25
    4f4e:	6f 5f       	subi	r22, 0xFF	; 255
    4f50:	7f 4f       	sbci	r23, 0xFF	; 255
	tx_buffer[3] = 0x80;	// Frame command
	tx_buffer[4] = addr;	// Register address
	tx_frame_length = length + 5;
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    4f52:	a4 17       	cp	r26, r20
    4f54:	b5 07       	cpc	r27, r21
    4f56:	a9 f7       	brne	.-22     	; 0x4f42 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length]   = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	tx_frame_length = length + 7;
#endif
}
    4f58:	df 91       	pop	r29
    4f5a:	cf 91       	pop	r28
    4f5c:	08 95       	ret

00004f5e <_ZN16CMBEventsHandler13FillRegDataRqEhh>:

void CMBEventsHandler::FillRegDataRq(uint8_t addr, uint8_t length)
{
    4f5e:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4f60:	a4 81       	ldd	r26, Z+4	; 0x04
    4f62:	b5 81       	ldd	r27, Z+5	; 0x05
    4f64:	8a ea       	ldi	r24, 0xAA	; 170
    4f66:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4f68:	a4 81       	ldd	r26, Z+4	; 0x04
    4f6a:	b5 81       	ldd	r27, Z+5	; 0x05
    4f6c:	8c ec       	ldi	r24, 0xCC	; 204
    4f6e:	11 96       	adiw	r26, 0x01	; 1
    4f70:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 5; //CMD(1) + DATA(2) + CRC(2)
#else
	tx_buffer[2] = 3; //CMD(1) + DATA(2)
    4f72:	a4 81       	ldd	r26, Z+4	; 0x04
    4f74:	b5 81       	ldd	r27, Z+5	; 0x05
    4f76:	83 e0       	ldi	r24, 0x03	; 3
    4f78:	12 96       	adiw	r26, 0x02	; 2
    4f7a:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x81;	// Frame command
    4f7c:	a4 81       	ldd	r26, Z+4	; 0x04
    4f7e:	b5 81       	ldd	r27, Z+5	; 0x05
    4f80:	81 e8       	ldi	r24, 0x81	; 129
    4f82:	13 96       	adiw	r26, 0x03	; 3
    4f84:	8c 93       	st	X, r24
	tx_buffer[4] = addr;	// Register address
    4f86:	a4 81       	ldd	r26, Z+4	; 0x04
    4f88:	b5 81       	ldd	r27, Z+5	; 0x05
    4f8a:	14 96       	adiw	r26, 0x04	; 4
    4f8c:	6c 93       	st	X, r22
	tx_buffer[5] = length;	// Data
    4f8e:	a4 81       	ldd	r26, Z+4	; 0x04
    4f90:	b5 81       	ldd	r27, Z+5	; 0x05
    4f92:	15 96       	adiw	r26, 0x05	; 5
    4f94:	4c 93       	st	X, r20
	tx_frame_length = 6;
    4f96:	86 e0       	ldi	r24, 0x06	; 6
    4f98:	81 87       	std	Z+9, r24	; 0x09
    4f9a:	08 95       	ret

00004f9c <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	tx_frame_length = length + 8;
#endif
}

void CMBEventsHandler::FillVarDataTx(uint16_t addr, uint16_t* data, uint16_t length)
{
    4f9c:	0f 93       	push	r16
    4f9e:	1f 93       	push	r17
    4fa0:	cf 93       	push	r28
    4fa2:	df 93       	push	r29
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4fa4:	dc 01       	movw	r26, r24
    4fa6:	14 96       	adiw	r26, 0x04	; 4
    4fa8:	ed 91       	ld	r30, X+
    4faa:	fc 91       	ld	r31, X
    4fac:	15 97       	sbiw	r26, 0x05	; 5
    4fae:	aa ea       	ldi	r26, 0xAA	; 170
    4fb0:	a0 83       	st	Z, r26
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4fb2:	ec 01       	movw	r28, r24
    4fb4:	ec 81       	ldd	r30, Y+4	; 0x04
    4fb6:	fd 81       	ldd	r31, Y+5	; 0x05
    4fb8:	ac ec       	ldi	r26, 0xCC	; 204
    4fba:	a1 83       	std	Z+1, r26	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 5; //CMD (1) + DATA(length * 2) + CRC(2) + ADDR(2)
#else
	tx_buffer[2] = length + 3; //CMD (1) + DATA(length * 2) + ADDR(2)
    4fbc:	ec 81       	ldd	r30, Y+4	; 0x04
    4fbe:	fd 81       	ldd	r31, Y+5	; 0x05
    4fc0:	a3 e0       	ldi	r26, 0x03	; 3
    4fc2:	a2 0f       	add	r26, r18
    4fc4:	a2 83       	std	Z+2, r26	; 0x02
#endif
	tx_buffer[3] = 0x82;	// Frame command
    4fc6:	ec 81       	ldd	r30, Y+4	; 0x04
    4fc8:	fd 81       	ldd	r31, Y+5	; 0x05
    4fca:	a2 e8       	ldi	r26, 0x82	; 130
    4fcc:	a3 83       	std	Z+3, r26	; 0x03
	tx_buffer[4] = addr >> 8;
    4fce:	ec 81       	ldd	r30, Y+4	; 0x04
    4fd0:	fd 81       	ldd	r31, Y+5	; 0x05
    4fd2:	74 83       	std	Z+4, r23	; 0x04
	tx_buffer[5] = addr & 0xff;
    4fd4:	ec 81       	ldd	r30, Y+4	; 0x04
    4fd6:	fd 81       	ldd	r31, Y+5	; 0x05
    4fd8:	65 83       	std	Z+5, r22	; 0x05
	tx_frame_length = length + 6;
    4fda:	66 e0       	ldi	r22, 0x06	; 6
    4fdc:	62 0f       	add	r22, r18
    4fde:	69 87       	std	Y+9, r22	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    4fe0:	36 95       	lsr	r19
    4fe2:	27 95       	ror	r18
    4fe4:	21 15       	cp	r18, r1
    4fe6:	31 05       	cpc	r19, r1
    4fe8:	e1 f0       	breq	.+56     	; 0x5022 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x86>
    4fea:	e4 2f       	mov	r30, r20
    4fec:	f5 2f       	mov	r31, r21
    4fee:	2d 5f       	subi	r18, 0xFD	; 253
    4ff0:	3f 4f       	sbci	r19, 0xFF	; 255
    4ff2:	22 0f       	add	r18, r18
    4ff4:	33 1f       	adc	r19, r19
    4ff6:	46 e0       	ldi	r20, 0x06	; 6
    4ff8:	50 e0       	ldi	r21, 0x00	; 0
	{
		tx_buffer[6 + i*2 + 0] = data[i] >> 8;
    4ffa:	ec 01       	movw	r28, r24
    4ffc:	ac 81       	ldd	r26, Y+4	; 0x04
    4ffe:	bd 81       	ldd	r27, Y+5	; 0x05
    5000:	a4 0f       	add	r26, r20
    5002:	b5 1f       	adc	r27, r21
    5004:	61 81       	ldd	r22, Z+1	; 0x01
    5006:	6c 93       	st	X, r22
		tx_buffer[6 + i*2 + 1] = data[i] & 0xff;
    5008:	ac 81       	ldd	r26, Y+4	; 0x04
    500a:	bd 81       	ldd	r27, Y+5	; 0x05
    500c:	a4 0f       	add	r26, r20
    500e:	b5 1f       	adc	r27, r21
    5010:	60 81       	ld	r22, Z
    5012:	32 96       	adiw	r30, 0x02	; 2
    5014:	11 96       	adiw	r26, 0x01	; 1
    5016:	6c 93       	st	X, r22
    5018:	4e 5f       	subi	r20, 0xFE	; 254
    501a:	5f 4f       	sbci	r21, 0xFF	; 255
	tx_buffer[4] = addr >> 8;
	tx_buffer[5] = addr & 0xff;
	tx_frame_length = length + 6;
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    501c:	42 17       	cp	r20, r18
    501e:	53 07       	cpc	r21, r19
    5020:	61 f7       	brne	.-40     	; 0x4ffa <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x5e>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length] = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	this->tx_frame_length = length * 2 + 8;
#endif
}
    5022:	df 91       	pop	r29
    5024:	cf 91       	pop	r28
    5026:	1f 91       	pop	r17
    5028:	0f 91       	pop	r16
    502a:	08 95       	ret

0000502c <_ZN16CMBEventsHandler13FillVarDataRqEjj>:

void CMBEventsHandler::FillVarDataRq(uint16_t addr, uint16_t length)
{
    502c:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    502e:	a4 81       	ldd	r26, Z+4	; 0x04
    5030:	b5 81       	ldd	r27, Z+5	; 0x05
    5032:	8a ea       	ldi	r24, 0xAA	; 170
    5034:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    5036:	a4 81       	ldd	r26, Z+4	; 0x04
    5038:	b5 81       	ldd	r27, Z+5	; 0x05
    503a:	8c ec       	ldi	r24, 0xCC	; 204
    503c:	11 96       	adiw	r26, 0x01	; 1
    503e:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 6; //CMD(1) + DATA(3) + CRC(2)
#else
	tx_buffer[2] = 4; //CMD(1) + DATA(3)
    5040:	a4 81       	ldd	r26, Z+4	; 0x04
    5042:	b5 81       	ldd	r27, Z+5	; 0x05
    5044:	84 e0       	ldi	r24, 0x04	; 4
    5046:	12 96       	adiw	r26, 0x02	; 2
    5048:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x83;				// Frame command
    504a:	a4 81       	ldd	r26, Z+4	; 0x04
    504c:	b5 81       	ldd	r27, Z+5	; 0x05
    504e:	83 e8       	ldi	r24, 0x83	; 131
    5050:	13 96       	adiw	r26, 0x03	; 3
    5052:	8c 93       	st	X, r24
	tx_buffer[4] = addr >> 8;			// Register address
    5054:	a4 81       	ldd	r26, Z+4	; 0x04
    5056:	b5 81       	ldd	r27, Z+5	; 0x05
    5058:	14 96       	adiw	r26, 0x04	; 4
    505a:	7c 93       	st	X, r23
	tx_buffer[5] = addr & 0xff;			// Register address
    505c:	a4 81       	ldd	r26, Z+4	; 0x04
    505e:	b5 81       	ldd	r27, Z+5	; 0x05
    5060:	15 96       	adiw	r26, 0x05	; 5
    5062:	6c 93       	st	X, r22
	tx_buffer[6] = length;				// Data
    5064:	a4 81       	ldd	r26, Z+4	; 0x04
    5066:	b5 81       	ldd	r27, Z+5	; 0x05
    5068:	16 96       	adiw	r26, 0x06	; 6
    506a:	4c 93       	st	X, r20
	tx_frame_length = 7;
    506c:	87 e0       	ldi	r24, 0x07	; 7
    506e:	81 87       	std	Z+9, r24	; 0x09
    5070:	08 95       	ret

00005072 <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
CMBEventsHandler::~CMBEventsHandler()
{
} //~CMBProtocol

void CMBEventsHandler::AllocateBuffers(uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    5072:	0f 93       	push	r16
    5074:	1f 93       	push	r17
    5076:	cf 93       	push	r28
    5078:	df 93       	push	r29
    507a:	ec 01       	movw	r28, r24
    507c:	cb 01       	movw	r24, r22
    507e:	8a 01       	movw	r16, r20
	rx_bufferSize = rx_bufSize;
    5080:	6f 83       	std	Y+7, r22	; 0x07
    5082:	78 87       	std	Y+8, r23	; 0x08
	tx_bufferSize = tx_bufSize;
    5084:	4a 87       	std	Y+10, r20	; 0x0a
    5086:	5b 87       	std	Y+11, r21	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    5088:	0e 94 8a 33 	call	0x6714	; 0x6714 <malloc>
    508c:	8a 83       	std	Y+2, r24	; 0x02
    508e:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    5090:	c8 01       	movw	r24, r16
    5092:	0e 94 8a 33 	call	0x6714	; 0x6714 <malloc>
    5096:	8c 83       	std	Y+4, r24	; 0x04
    5098:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_frame_length  = 0x00;
    509a:	19 86       	std	Y+9, r1	; 0x09
	rx_frame_length  = 0x00;
    509c:	1e 82       	std	Y+6, r1	; 0x06
}
    509e:	df 91       	pop	r29
    50a0:	cf 91       	pop	r28
    50a2:	1f 91       	pop	r17
    50a4:	0f 91       	pop	r16
    50a6:	08 95       	ret

000050a8 <_ZN16CMBEventsHandler11FreeBuffersEv>:

void CMBEventsHandler::FreeBuffers()
{
    50a8:	cf 93       	push	r28
    50aa:	df 93       	push	r29
    50ac:	ec 01       	movw	r28, r24
	free(rx_buffer);
    50ae:	8a 81       	ldd	r24, Y+2	; 0x02
    50b0:	9b 81       	ldd	r25, Y+3	; 0x03
    50b2:	0e 94 1f 34 	call	0x683e	; 0x683e <free>
	free(tx_buffer);
    50b6:	8c 81       	ldd	r24, Y+4	; 0x04
    50b8:	9d 81       	ldd	r25, Y+5	; 0x05
    50ba:	0e 94 1f 34 	call	0x683e	; 0x683e <free>
}
    50be:	df 91       	pop	r29
    50c0:	cf 91       	pop	r28
    50c2:	08 95       	ret

000050c4 <_ZN16CMBEventsHandlerD1Ev>:

#include "CMBProtocol.h"
#include <avr/io.h>
#include <util/crc16.h>

CMBEventsHandler::~CMBEventsHandler()
    50c4:	08 95       	ret

000050c6 <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	return Complete;
}

void CMBSender::StopMODBUSTransmitter()
{
	modbus_transmitter_state = tx_Idle;
    50c6:	dc 01       	movw	r26, r24
    50c8:	5b 96       	adiw	r26, 0x1b	; 27
    50ca:	8d 91       	ld	r24, X+
    50cc:	9c 91       	ld	r25, X
    50ce:	5c 97       	sbiw	r26, 0x1c	; 28
    50d0:	00 97       	sbiw	r24, 0x00	; 0
    50d2:	39 f0       	breq	.+14     	; 0x50e2 <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
    50d4:	dc 01       	movw	r26, r24
    50d6:	ed 91       	ld	r30, X+
    50d8:	fc 91       	ld	r31, X
    50da:	02 80       	ldd	r0, Z+2	; 0x02
    50dc:	f3 81       	ldd	r31, Z+3	; 0x03
    50de:	e0 2d       	mov	r30, r0
    50e0:	19 95       	eicall
    50e2:	08 95       	ret

000050e4 <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
    50e4:	dc 01       	movw	r26, r24
    50e6:	5b 96       	adiw	r26, 0x1b	; 27
    50e8:	8d 91       	ld	r24, X+
    50ea:	9c 91       	ld	r25, X
    50ec:	5c 97       	sbiw	r26, 0x1c	; 28
    50ee:	00 97       	sbiw	r24, 0x00	; 0
    50f0:	39 f0       	breq	.+14     	; 0x5100 <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
    50f2:	dc 01       	movw	r26, r24
    50f4:	ed 91       	ld	r30, X+
    50f6:	fc 91       	ld	r31, X
    50f8:	04 80       	ldd	r0, Z+4	; 0x04
    50fa:	f5 81       	ldd	r31, Z+5	; 0x05
    50fc:	e0 2d       	mov	r30, r0
    50fe:	19 95       	eicall
    5100:	08 95       	ret

00005102 <_ZN9CMBSenderC1Ev>:
    5102:	26 ee       	ldi	r18, 0xE6	; 230
    5104:	31 e2       	ldi	r19, 0x21	; 33
    5106:	fc 01       	movw	r30, r24
    5108:	20 83       	st	Z, r18
    510a:	31 83       	std	Z+1, r19	; 0x01
    510c:	08 95       	ret

0000510e <_ZN9CMBSender10InitializeEP6CTimerP6CUSARTP16CMBEventsHandlerjjj>:
    510e:	6f 92       	push	r6
    5110:	7f 92       	push	r7
    5112:	8f 92       	push	r8
    5114:	9f 92       	push	r9
    5116:	af 92       	push	r10
    5118:	bf 92       	push	r11
    511a:	cf 92       	push	r12
    511c:	df 92       	push	r13
    511e:	ef 92       	push	r14
    5120:	ff 92       	push	r15
    5122:	0f 93       	push	r16
    5124:	1f 93       	push	r17
    5126:	cf 93       	push	r28
    5128:	df 93       	push	r29
    512a:	ec 01       	movw	r28, r24
    512c:	4b 01       	movw	r8, r22
    512e:	5a 01       	movw	r10, r20
    5130:	39 01       	movw	r6, r18
    5132:	c8 01       	movw	r24, r16
    5134:	0f 83       	std	Y+7, r16	; 0x07
    5136:	18 87       	std	Y+8, r17	; 0x08
    5138:	ea 86       	std	Y+10, r14	; 0x0a
    513a:	fb 86       	std	Y+11, r15	; 0x0b
    513c:	0e 94 8a 33 	call	0x6714	; 0x6714 <malloc>
    5140:	8a 83       	std	Y+2, r24	; 0x02
    5142:	9b 83       	std	Y+3, r25	; 0x03
    5144:	c7 01       	movw	r24, r14
    5146:	0e 94 8a 33 	call	0x6714	; 0x6714 <malloc>
    514a:	8c 83       	std	Y+4, r24	; 0x04
    514c:	9d 83       	std	Y+5, r25	; 0x05
    514e:	19 8e       	std	Y+25, r1	; 0x19
    5150:	19 86       	std	Y+9, r1	; 0x09
    5152:	19 8a       	std	Y+17, r1	; 0x11
    5154:	1e 82       	std	Y+6, r1	; 0x06
    5156:	1c 8a       	std	Y+20, r1	; 0x14
    5158:	1d 8a       	std	Y+21, r1	; 0x15
    515a:	1e 8a       	std	Y+22, r1	; 0x16
    515c:	1f 8a       	std	Y+23, r1	; 0x17
    515e:	87 e0       	ldi	r24, 0x07	; 7
    5160:	88 8b       	std	Y+16, r24	; 0x10
    5162:	82 e0       	ldi	r24, 0x02	; 2
    5164:	88 8f       	std	Y+24, r24	; 0x18
    5166:	1a 8e       	std	Y+26, r1	; 0x1a
    5168:	ca 8a       	std	Y+18, r12	; 0x12
    516a:	db 8a       	std	Y+19, r13	; 0x13
    516c:	ac 86       	std	Y+12, r10	; 0x0c
    516e:	bd 86       	std	Y+13, r11	; 0x0d
    5170:	d5 01       	movw	r26, r10
    5172:	ed 91       	ld	r30, X+
    5174:	fc 91       	ld	r31, X
    5176:	04 84       	ldd	r0, Z+12	; 0x0c
    5178:	f5 85       	ldd	r31, Z+13	; 0x0d
    517a:	e0 2d       	mov	r30, r0
    517c:	4b ea       	ldi	r20, 0xAB	; 171
    517e:	59 e2       	ldi	r21, 0x29	; 41
    5180:	be 01       	movw	r22, r28
    5182:	c5 01       	movw	r24, r10
    5184:	19 95       	eicall
    5186:	d5 01       	movw	r26, r10
    5188:	ed 91       	ld	r30, X+
    518a:	fc 91       	ld	r31, X
    518c:	06 84       	ldd	r0, Z+14	; 0x0e
    518e:	f7 85       	ldd	r31, Z+15	; 0x0f
    5190:	e0 2d       	mov	r30, r0
    5192:	47 e3       	ldi	r20, 0x37	; 55
    5194:	5a e2       	ldi	r21, 0x2A	; 42
    5196:	be 01       	movw	r22, r28
    5198:	c5 01       	movw	r24, r10
    519a:	19 95       	eicall
    519c:	61 14       	cp	r6, r1
    519e:	71 04       	cpc	r7, r1
    51a0:	19 f0       	breq	.+6      	; 0x51a8 <_ZN9CMBSender10InitializeEP6CTimerP6CUSARTP16CMBEventsHandlerjjj+0x9a>
    51a2:	6b 8e       	std	Y+27, r6	; 0x1b
    51a4:	7c 8e       	std	Y+28, r7	; 0x1c
    51a6:	02 c0       	rjmp	.+4      	; 0x51ac <_ZN9CMBSender10InitializeEP6CTimerP6CUSARTP16CMBEventsHandlerjjj+0x9e>
    51a8:	cb 8f       	std	Y+27, r28	; 0x1b
    51aa:	dc 8f       	std	Y+28, r29	; 0x1c
    51ac:	8e 86       	std	Y+14, r8	; 0x0e
    51ae:	9f 86       	std	Y+15, r9	; 0x0f
    51b0:	81 14       	cp	r8, r1
    51b2:	91 04       	cpc	r9, r1
    51b4:	61 f0       	breq	.+24     	; 0x51ce <_ZN9CMBSender10InitializeEP6CTimerP6CUSARTP16CMBEventsHandlerjjj+0xc0>
    51b6:	d4 01       	movw	r26, r8
    51b8:	ed 91       	ld	r30, X+
    51ba:	fc 91       	ld	r31, X
    51bc:	04 88       	ldd	r0, Z+20	; 0x14
    51be:	f5 89       	ldd	r31, Z+21	; 0x15
    51c0:	e0 2d       	mov	r30, r0
    51c2:	21 e0       	ldi	r18, 0x01	; 1
    51c4:	ae 01       	movw	r20, r28
    51c6:	62 ed       	ldi	r22, 0xD2	; 210
    51c8:	79 e2       	ldi	r23, 0x29	; 41
    51ca:	c4 01       	movw	r24, r8
    51cc:	19 95       	eicall
    51ce:	df 91       	pop	r29
    51d0:	cf 91       	pop	r28
    51d2:	1f 91       	pop	r17
    51d4:	0f 91       	pop	r16
    51d6:	ff 90       	pop	r15
    51d8:	ef 90       	pop	r14
    51da:	df 90       	pop	r13
    51dc:	cf 90       	pop	r12
    51de:	bf 90       	pop	r11
    51e0:	af 90       	pop	r10
    51e2:	9f 90       	pop	r9
    51e4:	8f 90       	pop	r8
    51e6:	7f 90       	pop	r7
    51e8:	6f 90       	pop	r6
    51ea:	08 95       	ret

000051ec <_ZN9CMBSenderD1Ev>:
    51ec:	26 ee       	ldi	r18, 0xE6	; 230
    51ee:	31 e2       	ldi	r19, 0x21	; 33
    51f0:	fc 01       	movw	r30, r24
    51f2:	20 83       	st	Z, r18
    51f4:	31 83       	std	Z+1, r19	; 0x01
    51f6:	0e 94 62 28 	call	0x50c4	; 0x50c4 <_ZN16CMBEventsHandlerD1Ev>
    51fa:	08 95       	ret

000051fc <_ZN9CMBSender13OnReceiveByteEh>:
    51fc:	cf 93       	push	r28
    51fe:	df 93       	push	r29
    5200:	ec 01       	movw	r28, r24
    5202:	96 2f       	mov	r25, r22
    5204:	48 89       	ldd	r20, Y+16	; 0x10
    5206:	50 e0       	ldi	r21, 0x00	; 0
    5208:	4b 30       	cpi	r20, 0x0B	; 11
    520a:	51 05       	cpc	r21, r1
    520c:	08 f0       	brcs	.+2      	; 0x5210 <_ZN9CMBSender13OnReceiveByteEh+0x14>
    520e:	a0 c0       	rjmp	.+320    	; 0x5350 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    5210:	fa 01       	movw	r30, r20
    5212:	88 27       	eor	r24, r24
    5214:	ed 5a       	subi	r30, 0xAD	; 173
    5216:	fe 4f       	sbci	r31, 0xFE	; 254
    5218:	8f 4f       	sbci	r24, 0xFF	; 255
    521a:	0c 94 68 33 	jmp	0x66d0	; 0x66d0 <__tablejump2__>
    521e:	9a 3a       	cpi	r25, 0xAA	; 170
    5220:	19 f4       	brne	.+6      	; 0x5228 <_ZN9CMBSender13OnReceiveByteEh+0x2c>
    5222:	82 e0       	ldi	r24, 0x02	; 2
    5224:	88 8b       	std	Y+16, r24	; 0x10
    5226:	94 c0       	rjmp	.+296    	; 0x5350 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    5228:	81 e0       	ldi	r24, 0x01	; 1
    522a:	88 8b       	std	Y+16, r24	; 0x10
    522c:	91 c0       	rjmp	.+290    	; 0x5350 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    522e:	9c 3c       	cpi	r25, 0xCC	; 204
    5230:	19 f4       	brne	.+6      	; 0x5238 <_ZN9CMBSender13OnReceiveByteEh+0x3c>
    5232:	83 e0       	ldi	r24, 0x03	; 3
    5234:	88 8b       	std	Y+16, r24	; 0x10
    5236:	8c c0       	rjmp	.+280    	; 0x5350 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    5238:	81 e0       	ldi	r24, 0x01	; 1
    523a:	88 8b       	std	Y+16, r24	; 0x10
    523c:	89 c0       	rjmp	.+274    	; 0x5350 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    523e:	9e 83       	std	Y+6, r25	; 0x06
    5240:	19 8a       	std	Y+17, r1	; 0x11
    5242:	1e 8a       	std	Y+22, r1	; 0x16
    5244:	1f 8a       	std	Y+23, r1	; 0x17
    5246:	84 e0       	ldi	r24, 0x04	; 4
    5248:	88 8b       	std	Y+16, r24	; 0x10
    524a:	82 c0       	rjmp	.+260    	; 0x5350 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    524c:	89 89       	ldd	r24, Y+17	; 0x11
    524e:	ea 81       	ldd	r30, Y+2	; 0x02
    5250:	fb 81       	ldd	r31, Y+3	; 0x03
    5252:	e8 0f       	add	r30, r24
    5254:	f1 1d       	adc	r31, r1
    5256:	90 83       	st	Z, r25
    5258:	29 89       	ldd	r18, Y+17	; 0x11
    525a:	30 e0       	ldi	r19, 0x00	; 0
    525c:	4f 81       	ldd	r20, Y+7	; 0x07
    525e:	58 85       	ldd	r21, Y+8	; 0x08
    5260:	42 17       	cp	r20, r18
    5262:	53 07       	cpc	r21, r19
    5264:	18 f4       	brcc	.+6      	; 0x526c <_ZN9CMBSender13OnReceiveByteEh+0x70>
    5266:	89 e0       	ldi	r24, 0x09	; 9
    5268:	88 8b       	std	Y+16, r24	; 0x10
    526a:	72 c0       	rjmp	.+228    	; 0x5350 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    526c:	2e 89       	ldd	r18, Y+22	; 0x16
    526e:	3f 89       	ldd	r19, Y+23	; 0x17
    5270:	29 27       	eor	r18, r25
    5272:	92 2f       	mov	r25, r18
    5274:	92 95       	swap	r25
    5276:	92 27       	eor	r25, r18
    5278:	09 2e       	mov	r0, r25
    527a:	96 95       	lsr	r25
    527c:	96 95       	lsr	r25
    527e:	90 25       	eor	r25, r0
    5280:	09 2e       	mov	r0, r25
    5282:	96 95       	lsr	r25
    5284:	90 25       	eor	r25, r0
    5286:	97 70       	andi	r25, 0x07	; 7
    5288:	02 2e       	mov	r0, r18
    528a:	23 2f       	mov	r18, r19
    528c:	96 95       	lsr	r25
    528e:	07 94       	ror	r0
    5290:	97 95       	ror	r25
    5292:	30 2d       	mov	r19, r0
    5294:	29 27       	eor	r18, r25
    5296:	06 94       	lsr	r0
    5298:	97 95       	ror	r25
    529a:	30 25       	eor	r19, r0
    529c:	29 27       	eor	r18, r25
    529e:	2e 8b       	std	Y+22, r18	; 0x16
    52a0:	3f 8b       	std	Y+23, r19	; 0x17
    52a2:	89 89       	ldd	r24, Y+17	; 0x11
    52a4:	8f 5f       	subi	r24, 0xFF	; 255
    52a6:	89 8b       	std	Y+17, r24	; 0x11
    52a8:	49 89       	ldd	r20, Y+17	; 0x11
    52aa:	8e 81       	ldd	r24, Y+6	; 0x06
    52ac:	48 13       	cpse	r20, r24
    52ae:	50 c0       	rjmp	.+160    	; 0x5350 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    52b0:	88 e0       	ldi	r24, 0x08	; 8
    52b2:	88 8b       	std	Y+16, r24	; 0x10
    52b4:	e8 81       	ld	r30, Y
    52b6:	f9 81       	ldd	r31, Y+1	; 0x01
    52b8:	50 e0       	ldi	r21, 0x00	; 0
    52ba:	6a 81       	ldd	r22, Y+2	; 0x02
    52bc:	7b 81       	ldd	r23, Y+3	; 0x03
    52be:	01 90       	ld	r0, Z+
    52c0:	f0 81       	ld	r31, Z
    52c2:	e0 2d       	mov	r30, r0
    52c4:	ce 01       	movw	r24, r28
    52c6:	19 95       	eicall
    52c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    52ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    52cc:	00 97       	sbiw	r24, 0x00	; 0
    52ce:	09 f4       	brne	.+2      	; 0x52d2 <_ZN9CMBSender13OnReceiveByteEh+0xd6>
    52d0:	3f c0       	rjmp	.+126    	; 0x5350 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    52d2:	dc 01       	movw	r26, r24
    52d4:	ed 91       	ld	r30, X+
    52d6:	fc 91       	ld	r31, X
    52d8:	4e 81       	ldd	r20, Y+6	; 0x06
    52da:	50 e0       	ldi	r21, 0x00	; 0
    52dc:	6a 81       	ldd	r22, Y+2	; 0x02
    52de:	7b 81       	ldd	r23, Y+3	; 0x03
    52e0:	01 90       	ld	r0, Z+
    52e2:	f0 81       	ld	r31, Z
    52e4:	e0 2d       	mov	r30, r0
    52e6:	19 95       	eicall
    52e8:	33 c0       	rjmp	.+102    	; 0x5350 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    52ea:	69 2f       	mov	r22, r25
    52ec:	70 e0       	ldi	r23, 0x00	; 0
    52ee:	6c 8b       	std	Y+20, r22	; 0x14
    52f0:	7d 8b       	std	Y+21, r23	; 0x15
    52f2:	86 e0       	ldi	r24, 0x06	; 6
    52f4:	88 8b       	std	Y+16, r24	; 0x10
    52f6:	2c c0       	rjmp	.+88     	; 0x5350 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    52f8:	2c 89       	ldd	r18, Y+20	; 0x14
    52fa:	3d 89       	ldd	r19, Y+21	; 0x15
    52fc:	a9 01       	movw	r20, r18
    52fe:	59 2b       	or	r21, r25
    5300:	4c 8b       	std	Y+20, r20	; 0x14
    5302:	5d 8b       	std	Y+21, r21	; 0x15
    5304:	2e 89       	ldd	r18, Y+22	; 0x16
    5306:	3f 89       	ldd	r19, Y+23	; 0x17
    5308:	42 17       	cp	r20, r18
    530a:	53 07       	cpc	r21, r19
    530c:	e9 f4       	brne	.+58     	; 0x5348 <_ZN9CMBSender13OnReceiveByteEh+0x14c>
    530e:	88 e0       	ldi	r24, 0x08	; 8
    5310:	88 8b       	std	Y+16, r24	; 0x10
    5312:	e8 81       	ld	r30, Y
    5314:	f9 81       	ldd	r31, Y+1	; 0x01
    5316:	4e 81       	ldd	r20, Y+6	; 0x06
    5318:	50 e0       	ldi	r21, 0x00	; 0
    531a:	6a 81       	ldd	r22, Y+2	; 0x02
    531c:	7b 81       	ldd	r23, Y+3	; 0x03
    531e:	01 90       	ld	r0, Z+
    5320:	f0 81       	ld	r31, Z
    5322:	e0 2d       	mov	r30, r0
    5324:	ce 01       	movw	r24, r28
    5326:	19 95       	eicall
    5328:	8b 8d       	ldd	r24, Y+27	; 0x1b
    532a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    532c:	00 97       	sbiw	r24, 0x00	; 0
    532e:	81 f0       	breq	.+32     	; 0x5350 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    5330:	dc 01       	movw	r26, r24
    5332:	ed 91       	ld	r30, X+
    5334:	fc 91       	ld	r31, X
    5336:	4e 81       	ldd	r20, Y+6	; 0x06
    5338:	50 e0       	ldi	r21, 0x00	; 0
    533a:	6a 81       	ldd	r22, Y+2	; 0x02
    533c:	7b 81       	ldd	r23, Y+3	; 0x03
    533e:	01 90       	ld	r0, Z+
    5340:	f0 81       	ld	r31, Z
    5342:	e0 2d       	mov	r30, r0
    5344:	19 95       	eicall
    5346:	04 c0       	rjmp	.+8      	; 0x5350 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    5348:	89 e0       	ldi	r24, 0x09	; 9
    534a:	88 8b       	std	Y+16, r24	; 0x10
    534c:	01 c0       	rjmp	.+2      	; 0x5350 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    534e:	1a 8e       	std	Y+26, r1	; 0x1a
    5350:	df 91       	pop	r29
    5352:	cf 91       	pop	r28
    5354:	08 95       	ret

00005356 <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
    5356:	cf 93       	push	r28
    5358:	df 93       	push	r29
    535a:	ec 01       	movw	r28, r24
    535c:	8c 85       	ldd	r24, Y+12	; 0x0c
    535e:	9d 85       	ldd	r25, Y+13	; 0x0d
    5360:	dc 01       	movw	r26, r24
    5362:	ed 91       	ld	r30, X+
    5364:	fc 91       	ld	r31, X
    5366:	02 80       	ldd	r0, Z+2	; 0x02
    5368:	f3 81       	ldd	r31, Z+3	; 0x03
    536a:	e0 2d       	mov	r30, r0
    536c:	19 95       	eicall
    536e:	68 2f       	mov	r22, r24
    5370:	ce 01       	movw	r24, r28
    5372:	0e 94 fe 28 	call	0x51fc	; 0x51fc <_ZN9CMBSender13OnReceiveByteEh>
    5376:	df 91       	pop	r29
    5378:	cf 91       	pop	r28
    537a:	08 95       	ret

0000537c <_ZN9CMBSender9OnTimeoutEv>:
    537c:	cf 93       	push	r28
    537e:	df 93       	push	r29
    5380:	ec 01       	movw	r28, r24
    5382:	8e 85       	ldd	r24, Y+14	; 0x0e
    5384:	9f 85       	ldd	r25, Y+15	; 0x0f
    5386:	dc 01       	movw	r26, r24
    5388:	ed 91       	ld	r30, X+
    538a:	fc 91       	ld	r31, X
    538c:	04 80       	ldd	r0, Z+4	; 0x04
    538e:	f5 81       	ldd	r31, Z+5	; 0x05
    5390:	e0 2d       	mov	r30, r0
    5392:	19 95       	eicall
    5394:	88 89       	ldd	r24, Y+16	; 0x10
    5396:	88 30       	cpi	r24, 0x08	; 8
    5398:	11 f0       	breq	.+4      	; 0x539e <_ZN9CMBSender9OnTimeoutEv+0x22>
    539a:	8a e0       	ldi	r24, 0x0A	; 10
    539c:	88 8b       	std	Y+16, r24	; 0x10
    539e:	df 91       	pop	r29
    53a0:	cf 91       	pop	r28
    53a2:	08 95       	ret

000053a4 <_ZN9CMBSender18OnTimeoutInterruptEPv>:
    53a4:	0e 94 be 29 	call	0x537c	; 0x537c <_ZN9CMBSender9OnTimeoutEv>
    53a8:	08 95       	ret

000053aa <_ZN9CMBSender19StartMODBUSListenerEv>:
    53aa:	cf 93       	push	r28
    53ac:	df 93       	push	r29
    53ae:	fc 01       	movw	r30, r24
    53b0:	11 8a       	std	Z+17, r1	; 0x11
    53b2:	16 82       	std	Z+6, r1	; 0x06
    53b4:	14 8a       	std	Z+20, r1	; 0x14
    53b6:	15 8a       	std	Z+21, r1	; 0x15
    53b8:	16 8a       	std	Z+22, r1	; 0x16
    53ba:	17 8a       	std	Z+23, r1	; 0x17
    53bc:	10 8a       	std	Z+16, r1	; 0x10
    53be:	86 85       	ldd	r24, Z+14	; 0x0e
    53c0:	97 85       	ldd	r25, Z+15	; 0x0f
    53c2:	ec 01       	movw	r28, r24
    53c4:	a8 81       	ld	r26, Y
    53c6:	b9 81       	ldd	r27, Y+1	; 0x01
    53c8:	62 89       	ldd	r22, Z+18	; 0x12
    53ca:	73 89       	ldd	r23, Z+19	; 0x13
    53cc:	12 96       	adiw	r26, 0x02	; 2
    53ce:	ed 91       	ld	r30, X+
    53d0:	fc 91       	ld	r31, X
    53d2:	13 97       	sbiw	r26, 0x03	; 3
    53d4:	19 95       	eicall
    53d6:	df 91       	pop	r29
    53d8:	cf 91       	pop	r28
    53da:	08 95       	ret

000053dc <_ZN9CMBSender14OnTransmitByteEv>:
    53dc:	cf 93       	push	r28
    53de:	df 93       	push	r29
    53e0:	ec 01       	movw	r28, r24
    53e2:	88 8d       	ldd	r24, Y+24	; 0x18
    53e4:	84 30       	cpi	r24, 0x04	; 4
    53e6:	38 f4       	brcc	.+14     	; 0x53f6 <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    53e8:	82 30       	cpi	r24, 0x02	; 2
    53ea:	b8 f5       	brcc	.+110    	; 0x545a <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    53ec:	88 23       	and	r24, r24
    53ee:	31 f0       	breq	.+12     	; 0x53fc <_ZN9CMBSender14OnTransmitByteEv+0x20>
    53f0:	81 30       	cpi	r24, 0x01	; 1
    53f2:	d1 f0       	breq	.+52     	; 0x5428 <_ZN9CMBSender14OnTransmitByteEv+0x4c>
    53f4:	39 c0       	rjmp	.+114    	; 0x5468 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    53f6:	85 30       	cpi	r24, 0x05	; 5
    53f8:	81 f1       	breq	.+96     	; 0x545a <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    53fa:	36 c0       	rjmp	.+108    	; 0x5468 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    53fc:	81 e0       	ldi	r24, 0x01	; 1
    53fe:	88 8f       	std	Y+24, r24	; 0x18
    5400:	19 8e       	std	Y+25, r1	; 0x19
    5402:	8c 85       	ldd	r24, Y+12	; 0x0c
    5404:	9d 85       	ldd	r25, Y+13	; 0x0d
    5406:	29 8d       	ldd	r18, Y+25	; 0x19
    5408:	dc 01       	movw	r26, r24
    540a:	ed 91       	ld	r30, X+
    540c:	fc 91       	ld	r31, X
    540e:	ac 81       	ldd	r26, Y+4	; 0x04
    5410:	bd 81       	ldd	r27, Y+5	; 0x05
    5412:	a2 0f       	add	r26, r18
    5414:	b1 1d       	adc	r27, r1
    5416:	04 80       	ldd	r0, Z+4	; 0x04
    5418:	f5 81       	ldd	r31, Z+5	; 0x05
    541a:	e0 2d       	mov	r30, r0
    541c:	6c 91       	ld	r22, X
    541e:	19 95       	eicall
    5420:	89 8d       	ldd	r24, Y+25	; 0x19
    5422:	8f 5f       	subi	r24, 0xFF	; 255
    5424:	89 8f       	std	Y+25, r24	; 0x19
    5426:	20 c0       	rjmp	.+64     	; 0x5468 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    5428:	8c 85       	ldd	r24, Y+12	; 0x0c
    542a:	9d 85       	ldd	r25, Y+13	; 0x0d
    542c:	29 8d       	ldd	r18, Y+25	; 0x19
    542e:	dc 01       	movw	r26, r24
    5430:	ed 91       	ld	r30, X+
    5432:	fc 91       	ld	r31, X
    5434:	ac 81       	ldd	r26, Y+4	; 0x04
    5436:	bd 81       	ldd	r27, Y+5	; 0x05
    5438:	a2 0f       	add	r26, r18
    543a:	b1 1d       	adc	r27, r1
    543c:	04 80       	ldd	r0, Z+4	; 0x04
    543e:	f5 81       	ldd	r31, Z+5	; 0x05
    5440:	e0 2d       	mov	r30, r0
    5442:	6c 91       	ld	r22, X
    5444:	19 95       	eicall
    5446:	89 8d       	ldd	r24, Y+25	; 0x19
    5448:	8f 5f       	subi	r24, 0xFF	; 255
    544a:	89 8f       	std	Y+25, r24	; 0x19
    544c:	99 8d       	ldd	r25, Y+25	; 0x19
    544e:	89 85       	ldd	r24, Y+9	; 0x09
    5450:	98 13       	cpse	r25, r24
    5452:	0a c0       	rjmp	.+20     	; 0x5468 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    5454:	83 e0       	ldi	r24, 0x03	; 3
    5456:	88 8f       	std	Y+24, r24	; 0x18
    5458:	07 c0       	rjmp	.+14     	; 0x5468 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    545a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    545c:	88 23       	and	r24, r24
    545e:	19 f0       	breq	.+6      	; 0x5466 <_ZN9CMBSender14OnTransmitByteEv+0x8a>
    5460:	ce 01       	movw	r24, r28
    5462:	0e 94 d5 29 	call	0x53aa	; 0x53aa <_ZN9CMBSender19StartMODBUSListenerEv>
    5466:	1a 8e       	std	Y+26, r1	; 0x1a
    5468:	df 91       	pop	r29
    546a:	cf 91       	pop	r28
    546c:	08 95       	ret

0000546e <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
    546e:	0e 94 ee 29 	call	0x53dc	; 0x53dc <_ZN9CMBSender14OnTransmitByteEv>
    5472:	08 95       	ret

00005474 <_ZN9CMBSender18WaitMODBUSListenerEv>:
    5474:	fc 01       	movw	r30, r24
    5476:	06 c0       	rjmp	.+12     	; 0x5484 <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
    5478:	80 89       	ldd	r24, Z+16	; 0x10
    547a:	89 30       	cpi	r24, 0x09	; 9
    547c:	41 f0       	breq	.+16     	; 0x548e <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
    547e:	80 89       	ldd	r24, Z+16	; 0x10
    5480:	8a 30       	cpi	r24, 0x0A	; 10
    5482:	39 f0       	breq	.+14     	; 0x5492 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
    5484:	80 89       	ldd	r24, Z+16	; 0x10
    5486:	88 30       	cpi	r24, 0x08	; 8
    5488:	b9 f7       	brne	.-18     	; 0x5478 <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
    548a:	81 e0       	ldi	r24, 0x01	; 1
    548c:	08 95       	ret
    548e:	82 e0       	ldi	r24, 0x02	; 2
    5490:	08 95       	ret
    5492:	83 e0       	ldi	r24, 0x03	; 3
    5494:	08 95       	ret

00005496 <_ZN9CMBSender22StartMODBUSTransmitterEv>:
    5496:	cf 93       	push	r28
    5498:	df 93       	push	r29
    549a:	ec 01       	movw	r28, r24
    549c:	19 8e       	std	Y+25, r1	; 0x19
    549e:	18 8e       	std	Y+24, r1	; 0x18
    54a0:	0e 94 ee 29 	call	0x53dc	; 0x53dc <_ZN9CMBSender14OnTransmitByteEv>
    54a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    54a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    54a8:	dc 01       	movw	r26, r24
    54aa:	ed 91       	ld	r30, X+
    54ac:	fc 91       	ld	r31, X
    54ae:	6a 89       	ldd	r22, Y+18	; 0x12
    54b0:	7b 89       	ldd	r23, Y+19	; 0x13
    54b2:	02 80       	ldd	r0, Z+2	; 0x02
    54b4:	f3 81       	ldd	r31, Z+3	; 0x03
    54b6:	e0 2d       	mov	r30, r0
    54b8:	19 95       	eicall
    54ba:	df 91       	pop	r29
    54bc:	cf 91       	pop	r28
    54be:	08 95       	ret

000054c0 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
    54c0:	cf 93       	push	r28
    54c2:	df 93       	push	r29
    54c4:	ec 01       	movw	r28, r24
    54c6:	e8 81       	ld	r30, Y
    54c8:	f9 81       	ldd	r31, Y+1	; 0x01
    54ca:	02 84       	ldd	r0, Z+10	; 0x0a
    54cc:	f3 85       	ldd	r31, Z+11	; 0x0b
    54ce:	e0 2d       	mov	r30, r0
    54d0:	19 95       	eicall
    54d2:	ce 01       	movw	r24, r28
    54d4:	0e 94 4b 2a 	call	0x5496	; 0x5496 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    54d8:	df 91       	pop	r29
    54da:	cf 91       	pop	r28
    54dc:	08 95       	ret

000054de <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:
    54de:	cf 93       	push	r28
    54e0:	df 93       	push	r29
    54e2:	ec 01       	movw	r28, r24
    54e4:	e8 81       	ld	r30, Y
    54e6:	f9 81       	ldd	r31, Y+1	; 0x01
    54e8:	06 84       	ldd	r0, Z+14	; 0x0e
    54ea:	f7 85       	ldd	r31, Z+15	; 0x0f
    54ec:	e0 2d       	mov	r30, r0
    54ee:	19 95       	eicall
    54f0:	ce 01       	movw	r24, r28
    54f2:	0e 94 4b 2a 	call	0x5496	; 0x5496 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    54f6:	df 91       	pop	r29
    54f8:	cf 91       	pop	r28
    54fa:	08 95       	ret

000054fc <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:
    54fc:	cf 93       	push	r28
    54fe:	df 93       	push	r29
    5500:	ec 01       	movw	r28, r24
    5502:	e8 81       	ld	r30, Y
    5504:	f9 81       	ldd	r31, Y+1	; 0x01
    5506:	04 84       	ldd	r0, Z+12	; 0x0c
    5508:	f5 85       	ldd	r31, Z+13	; 0x0d
    550a:	e0 2d       	mov	r30, r0
    550c:	19 95       	eicall
    550e:	ce 01       	movw	r24, r28
    5510:	0e 94 4b 2a 	call	0x5496	; 0x5496 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    5514:	df 91       	pop	r29
    5516:	cf 91       	pop	r28
    5518:	08 95       	ret

0000551a <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:
    551a:	cf 93       	push	r28
    551c:	df 93       	push	r29
    551e:	ec 01       	movw	r28, r24
    5520:	e8 81       	ld	r30, Y
    5522:	f9 81       	ldd	r31, Y+1	; 0x01
    5524:	50 e0       	ldi	r21, 0x00	; 0
    5526:	00 88       	ldd	r0, Z+16	; 0x10
    5528:	f1 89       	ldd	r31, Z+17	; 0x11
    552a:	e0 2d       	mov	r30, r0
    552c:	19 95       	eicall
    552e:	ce 01       	movw	r24, r28
    5530:	0e 94 4b 2a 	call	0x5496	; 0x5496 <_ZN9CMBSender22StartMODBUSTransmitterEv>
    5534:	df 91       	pop	r29
    5536:	cf 91       	pop	r28
    5538:	08 95       	ret

0000553a <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
    553a:	fc 01       	movw	r30, r24
    553c:	06 c0       	rjmp	.+12     	; 0x554a <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
    553e:	80 8d       	ldd	r24, Z+24	; 0x18
    5540:	84 30       	cpi	r24, 0x04	; 4
    5542:	41 f0       	breq	.+16     	; 0x5554 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
    5544:	80 8d       	ldd	r24, Z+24	; 0x18
    5546:	85 30       	cpi	r24, 0x05	; 5
    5548:	39 f0       	breq	.+14     	; 0x5558 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
    554a:	80 8d       	ldd	r24, Z+24	; 0x18
    554c:	83 30       	cpi	r24, 0x03	; 3
    554e:	b9 f7       	brne	.-18     	; 0x553e <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
    5550:	81 e0       	ldi	r24, 0x01	; 1
    5552:	08 95       	ret
    5554:	82 e0       	ldi	r24, 0x02	; 2
    5556:	08 95       	ret
    5558:	83 e0       	ldi	r24, 0x03	; 3
    555a:	08 95       	ret

0000555c <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTimeout();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    555c:	21 e0       	ldi	r18, 0x01	; 1
    555e:	fc 01       	movw	r30, r24
    5560:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromRegisterAsync(addr, length);
    5562:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    5566:	08 95       	ret

00005568 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    5568:	21 e0       	ldi	r18, 0x01	; 1
    556a:	fc 01       	movw	r30, r24
    556c:	22 8f       	std	Z+26, r18	; 0x1a
	RequestDataFromSRAMAsync(addr, length);
    556e:	0e 94 8d 2a 	call	0x551a	; 0x551a <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    5572:	08 95       	ret

00005574 <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    5574:	0f 93       	push	r16
    5576:	1f 93       	push	r17
    5578:	cf 93       	push	r28
    557a:	df 93       	push	r29
    557c:	8c 01       	movw	r16, r24
    557e:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    5580:	98 81       	ld	r25, Y
    5582:	91 38       	cpi	r25, 0x81	; 129
    5584:	69 f4       	brne	.+26     	; 0x55a0 <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    5586:	d8 01       	movw	r26, r16
    5588:	ed 91       	ld	r30, X+
    558a:	fc 91       	ld	r31, X
    558c:	04 80       	ldd	r0, Z+4	; 0x04
    558e:	f5 81       	ldd	r31, Z+5	; 0x05
    5590:	e0 2d       	mov	r30, r0
    5592:	2a 81       	ldd	r18, Y+2	; 0x02
    5594:	ab 01       	movw	r20, r22
    5596:	4d 5f       	subi	r20, 0xFD	; 253
    5598:	5f 4f       	sbci	r21, 0xFF	; 255
    559a:	69 81       	ldd	r22, Y+1	; 0x01
    559c:	c8 01       	movw	r24, r16
    559e:	19 95       	eicall
	}
	if (data[0] == 0x83)
    55a0:	98 81       	ld	r25, Y
    55a2:	93 38       	cpi	r25, 0x83	; 131
    55a4:	99 f4       	brne	.+38     	; 0x55cc <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], data[3]);
    55a6:	d8 01       	movw	r26, r16
    55a8:	ed 91       	ld	r30, X+
    55aa:	fc 91       	ld	r31, X
    55ac:	2b 81       	ldd	r18, Y+3	; 0x03
    55ae:	30 e0       	ldi	r19, 0x00	; 0
    55b0:	ae 01       	movw	r20, r28
    55b2:	4c 5f       	subi	r20, 0xFC	; 252
    55b4:	5f 4f       	sbci	r21, 0xFF	; 255
    55b6:	69 81       	ldd	r22, Y+1	; 0x01
    55b8:	70 e0       	ldi	r23, 0x00	; 0
    55ba:	76 2f       	mov	r23, r22
    55bc:	66 27       	eor	r22, r22
    55be:	8a 81       	ldd	r24, Y+2	; 0x02
    55c0:	68 2b       	or	r22, r24
    55c2:	02 80       	ldd	r0, Z+2	; 0x02
    55c4:	f3 81       	ldd	r31, Z+3	; 0x03
    55c6:	e0 2d       	mov	r30, r0
    55c8:	c8 01       	movw	r24, r16
    55ca:	19 95       	eicall
	}
}
    55cc:	df 91       	pop	r29
    55ce:	cf 91       	pop	r28
    55d0:	1f 91       	pop	r17
    55d2:	0f 91       	pop	r16
    55d4:	08 95       	ret

000055d6 <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    55d6:	0e 94 ba 2a 	call	0x5574	; 0x5574 <_ZN9CMBSender18ProcessTransactionEPhj>
    55da:	08 95       	ret

000055dc <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
    55dc:	0f 93       	push	r16
	PORTD.DIRSET = PIN3_bm; // Set TX to output
    55de:	e0 e6       	ldi	r30, 0x60	; 96
    55e0:	f6 e0       	ldi	r31, 0x06	; 6
    55e2:	88 e0       	ldi	r24, 0x08	; 8
    55e4:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; // Set RX to input
    55e6:	84 e0       	ldi	r24, 0x04	; 4
    55e8:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN2CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    55ea:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
    55ec:	13 8a       	std	Z+19, r1	; 0x13
	
	// Turn on interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_LO_gc/* | USART_DREINTLVL_LO_gc*/;
    55ee:	e0 ea       	ldi	r30, 0xA0	; 160
    55f0:	f9 e0       	ldi	r31, 0x09	; 9
    55f2:	84 e1       	ldi	r24, 0x14	; 20
    55f4:	83 83       	std	Z+3, r24	; 0x03
	
	// Enable RX, TX
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    55f6:	88 e1       	ldi	r24, 0x18	; 24
    55f8:	84 83       	std	Z+4, r24	; 0x04
	
	// Double transmission speed
#ifdef U2X
	USARTD0.CTRLB |=  (1 << USART_CLK2X_bm);
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
    55fa:	84 81       	ldd	r24, Z+4	; 0x04
    55fc:	84 83       	std	Z+4, r24	; 0x04
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
    55fe:	41 30       	cpi	r20, 0x01	; 1
    5600:	19 f0       	breq	.+6      	; 0x5608 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x2c>
    5602:	42 30       	cpi	r20, 0x02	; 2
    5604:	19 f0       	breq	.+6      	; 0x560c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x30>
    5606:	04 c0       	rjmp	.+8      	; 0x5610 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
	{
		case PARITY_DISABLE:
			temp |= USART_PMODE_DISABLED_gc;
		break;
		case PARITY_EVEN:
			temp |= USART_PMODE_EVEN_gc;
    5608:	80 e2       	ldi	r24, 0x20	; 32
    560a:	03 c0       	rjmp	.+6      	; 0x5612 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
		break;
		case PARITY_ODD:
			temp |= USART_PMODE_ODD_gc;
    560c:	80 e3       	ldi	r24, 0x30	; 48
		break;
    560e:	01 c0       	rjmp	.+2      	; 0x5612 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
#endif

	// Parity param set
	uint8_t temp = 0;
    5610:	80 e0       	ldi	r24, 0x00	; 0
			temp |= USART_PMODE_ODD_gc;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
    5612:	22 23       	and	r18, r18
    5614:	19 f0       	breq	.+6      	; 0x561c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x40>
    5616:	21 30       	cpi	r18, 0x01	; 1
    5618:	19 f0       	breq	.+6      	; 0x5620 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x44>
    561a:	03 c0       	rjmp	.+6      	; 0x5622 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
	{
		case STOPBITS_1BIT:
			temp &= ~USART_SBMODE_bm;
    561c:	87 7f       	andi	r24, 0xF7	; 247
		break;
    561e:	01 c0       	rjmp	.+2      	; 0x5622 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
		case STOPBITS_2BIT:
			temp |=  USART_SBMODE_bm;
    5620:	88 60       	ori	r24, 0x08	; 8
		break;
	}
	
	// USART mode asynchronous, 8bit
	USARTD0.CTRLC = (Async?USART_CMODE_ASYNCHRONOUS_gc:USART_CMODE_SYNCHRONOUS_gc) | USART_CHSIZE_8BIT_gc | temp;
    5622:	01 11       	cpse	r16, r1
    5624:	02 c0       	rjmp	.+4      	; 0x562a <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x4e>
    5626:	93 e4       	ldi	r25, 0x43	; 67
    5628:	01 c0       	rjmp	.+2      	; 0x562c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x50>
    562a:	93 e0       	ldi	r25, 0x03	; 3
    562c:	89 2b       	or	r24, r25
    562e:	e0 ea       	ldi	r30, 0xA0	; 160
    5630:	f9 e0       	ldi	r31, 0x09	; 9
    5632:	85 83       	std	Z+5, r24	; 0x05
	
	// Set baud rate
	USARTD0.BAUDCTRLA = bsel_table[baud];
    5634:	70 e0       	ldi	r23, 0x00	; 0
    5636:	db 01       	movw	r26, r22
    5638:	ac 5b       	subi	r26, 0xBC	; 188
    563a:	be 4d       	sbci	r27, 0xDE	; 222
    563c:	8c 91       	ld	r24, X
    563e:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (((int8_t)(16 + bscale_table[baud])) << USART_BSCALE0_bp) | ((bsel_table[baud] >> 8) & 0x0F);	
    5640:	db 01       	movw	r26, r22
    5642:	ac 5d       	subi	r26, 0xDC	; 220
    5644:	be 4d       	sbci	r27, 0xDE	; 222
    5646:	8c 91       	ld	r24, X
    5648:	82 95       	swap	r24
    564a:	80 7f       	andi	r24, 0xF0	; 240
    564c:	87 83       	std	Z+7, r24	; 0x07
} //CUSART
    564e:	0f 91       	pop	r16
    5650:	08 95       	ret

00005652 <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return USARTD0.DATA;
    5652:	80 91 a0 09 	lds	r24, 0x09A0
}
    5656:	08 95       	ret

00005658 <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( ( USARTD0.STATUS & (1<<USART_DREIF_bm)) );
	USARTD0.DATA = data;
    5658:	60 93 a0 09 	sts	0x09A0, r22
    565c:	08 95       	ret

0000565e <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return !( USARTD0.STATUS & USART_TXCIF_bm);
    565e:	80 91 a1 09 	lds	r24, 0x09A1
    5662:	86 fb       	bst	r24, 6
    5664:	88 27       	eor	r24, r24
    5666:	80 f9       	bld	r24, 0
}
    5668:	91 e0       	ldi	r25, 0x01	; 1
    566a:	89 27       	eor	r24, r25
    566c:	08 95       	ret

0000566e <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return !( USARTD0.STATUS & USART_RXCIF_bm);
    566e:	80 91 a1 09 	lds	r24, 0x09A1
    5672:	80 95       	com	r24
}
    5674:	88 1f       	adc	r24, r24
    5676:	88 27       	eor	r24, r24
    5678:	88 1f       	adc	r24, r24
    567a:	08 95       	ret

0000567c <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return !( USARTD0.STATUS & USART_DREIF_bm);
    567c:	80 91 a1 09 	lds	r24, 0x09A1
    5680:	85 fb       	bst	r24, 5
    5682:	88 27       	eor	r24, r24
    5684:	80 f9       	bld	r24, 0
}
    5686:	91 e0       	ldi	r25, 0x01	; 1
    5688:	89 27       	eor	r24, r25
    568a:	08 95       	ret

0000568c <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_RXC_vect_num] = sender;
    568c:	60 93 6a 24 	sts	0x246A, r22
    5690:	70 93 6b 24 	sts	0x246B, r23
	InterruptFuncTable[USARTD0_RXC_vect_num] = callback;
    5694:	40 93 74 23 	sts	0x2374, r20
    5698:	50 93 75 23 	sts	0x2375, r21
    569c:	08 95       	ret

0000569e <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_TXC_vect_num] = sender;
    569e:	60 93 6e 24 	sts	0x246E, r22
    56a2:	70 93 6f 24 	sts	0x246F, r23
	InterruptFuncTable[USARTD0_TXC_vect_num] = callback;
    56a6:	40 93 78 23 	sts	0x2378, r20
    56aa:	50 93 79 23 	sts	0x2379, r21
    56ae:	08 95       	ret

000056b0 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMARxTrig(DMA_CH_t *dma_channel)
{
    56b0:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_RXC_gc;
    56b2:	8b e6       	ldi	r24, 0x6B	; 107
    56b4:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->SRCADDR0 = (int)&USARTD0.DATA;
    56b6:	80 ea       	ldi	r24, 0xA0	; 160
    56b8:	80 87       	std	Z+8, r24	; 0x08
	dma_channel->SRCADDR1 = (int)&USARTD0.DATA >> 8;
    56ba:	89 e0       	ldi	r24, 0x09	; 9
    56bc:	81 87       	std	Z+9, r24	; 0x09
	dma_channel->SRCADDR2 = 0;
    56be:	12 86       	std	Z+10, r1	; 0x0a
    56c0:	08 95       	ret

000056c2 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMATxTrig(DMA_CH_t *dma_channel)
{
    56c2:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_DRE_gc;
    56c4:	8c e6       	ldi	r24, 0x6C	; 108
    56c6:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->DESTADDR0 = (int)&USARTD0.DATA;
    56c8:	80 ea       	ldi	r24, 0xA0	; 160
    56ca:	84 87       	std	Z+12, r24	; 0x0c
	dma_channel->DESTADDR1 = (int)&USARTD0.DATA >> 8;
    56cc:	89 e0       	ldi	r24, 0x09	; 9
    56ce:	85 87       	std	Z+13, r24	; 0x0d
	dma_channel->DESTADDR2 = 0;
    56d0:	16 86       	std	Z+14, r1	; 0x0e
    56d2:	08 95       	ret

000056d4 <_ZN10CDGUSUSARTC1Ev>:
								true, true, true, true, true, true, true, true, true, true,
								true, true};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
    56d4:	cf 93       	push	r28
    56d6:	df 93       	push	r29
    56d8:	ec 01       	movw	r28, r24
    56da:	0e 94 6d 12 	call	0x24da	; 0x24da <_ZN6CUSARTC1Ev>
    56de:	8c ef       	ldi	r24, 0xFC	; 252
    56e0:	91 e2       	ldi	r25, 0x21	; 33
    56e2:	88 83       	st	Y, r24
    56e4:	99 83       	std	Y+1, r25	; 0x01
{
} //CDGUSUSART
    56e6:	df 91       	pop	r29
    56e8:	cf 91       	pop	r28
    56ea:	08 95       	ret

000056ec <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
    56ec:	2c ef       	ldi	r18, 0xFC	; 252
    56ee:	31 e2       	ldi	r19, 0x21	; 33
    56f0:	fc 01       	movw	r30, r24
    56f2:	20 83       	st	Z, r18
    56f4:	31 83       	std	Z+1, r19	; 0x01
    56f6:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN6CUSARTD1Ev>
    56fa:	08 95       	ret

000056fc <_ZN8CDS18B20C1Ev>:
#define F_CPU	32000000

#include <util/delay.h>

// default constructor
CDS18B20::CDS18B20()
    56fc:	08 95       	ret

000056fe <_ZN8CDS18B20D1Ev>:
{
} //CDS18B20

// default destructor
CDS18B20::~CDS18B20()
    56fe:	08 95       	ret

00005700 <_ZN8CDS18B207w1_findEv>:
{
} //~CDS18B20

bool CDS18B20::w1_find()
{
	PORTD.DIRSET = PIN7_bm;	// pull down 1-wire bus
    5700:	e0 e6       	ldi	r30, 0x60	; 96
    5702:	f6 e0       	ldi	r31, 0x06	; 6
    5704:	80 e8       	ldi	r24, 0x80	; 128
    5706:	81 83       	std	Z+1, r24	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5708:	a7 e2       	ldi	r26, 0x27	; 39
    570a:	bf e0       	ldi	r27, 0x0F	; 15
    570c:	11 97       	sbiw	r26, 0x01	; 1
    570e:	f1 f7       	brne	.-4      	; 0x570c <_ZN8CDS18B207w1_findEv+0xc>
    5710:	00 c0       	rjmp	.+0      	; 0x5712 <_ZN8CDS18B207w1_findEv+0x12>
    5712:	00 00       	nop
	_delay_us(485);			// wait for 480 us
	PORTD.DIRCLR = PIN7_bm; // 1-wire bus pull up
    5714:	82 83       	std	Z+2, r24	; 0x02
    5716:	87 e0       	ldi	r24, 0x07	; 7
    5718:	92 e0       	ldi	r25, 0x02	; 2
    571a:	01 97       	sbiw	r24, 0x01	; 1
    571c:	f1 f7       	brne	.-4      	; 0x571a <_ZN8CDS18B207w1_findEv+0x1a>
    571e:	00 c0       	rjmp	.+0      	; 0x5720 <_ZN8CDS18B207w1_findEv+0x20>
    5720:	00 00       	nop
	_delay_us(65);			// wait for 65 us
	
	bool result;
	if((PORTD.IN & PIN7_bm) == 0x00)
    5722:	80 85       	ldd	r24, Z+8	; 0x08
    5724:	af e1       	ldi	r26, 0x1F	; 31
    5726:	bd e0       	ldi	r27, 0x0D	; 13
    5728:	11 97       	sbiw	r26, 0x01	; 1
    572a:	f1 f7       	brne	.-4      	; 0x5728 <_ZN8CDS18B207w1_findEv+0x28>
    572c:	00 c0       	rjmp	.+0      	; 0x572e <_ZN8CDS18B207w1_findEv+0x2e>
    572e:	00 00       	nop
    5730:	80 95       	com	r24
	else
		result = false;
		
	_delay_us(420);			// wait 480 us
	return result;
}
    5732:	88 1f       	adc	r24, r24
    5734:	88 27       	eor	r24, r24
    5736:	88 1f       	adc	r24, r24
    5738:	08 95       	ret

0000573a <_ZN8CDS18B2010w1_sendcmdEh>:

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
    573a:	cf 93       	push	r28
    573c:	df 93       	push	r29
    573e:	80 e0       	ldi	r24, 0x00	; 0
    5740:	90 e0       	ldi	r25, 0x00	; 0
	for(unsigned char i = 0; i < 8; i++)
	{
		if((cmd & (1<<i)) == 1<<i)
    5742:	c1 e0       	ldi	r28, 0x01	; 1
    5744:	d0 e0       	ldi	r29, 0x00	; 0
    5746:	70 e0       	ldi	r23, 0x00	; 0
			_delay_us(65);
		}
		else
		{
			
			PORTD.DIRSET = PIN7_bm;
    5748:	e0 e6       	ldi	r30, 0x60	; 96
    574a:	f6 e0       	ldi	r31, 0x06	; 6
    574c:	40 e8       	ldi	r20, 0x80	; 128

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
	for(unsigned char i = 0; i < 8; i++)
	{
		if((cmd & (1<<i)) == 1<<i)
    574e:	9e 01       	movw	r18, r28
    5750:	08 2e       	mov	r0, r24
    5752:	02 c0       	rjmp	.+4      	; 0x5758 <_ZN8CDS18B2010w1_sendcmdEh+0x1e>
    5754:	22 0f       	add	r18, r18
    5756:	33 1f       	adc	r19, r19
    5758:	0a 94       	dec	r0
    575a:	e2 f7       	brpl	.-8      	; 0x5754 <_ZN8CDS18B2010w1_sendcmdEh+0x1a>
    575c:	d9 01       	movw	r26, r18
    575e:	a6 23       	and	r26, r22
    5760:	b7 23       	and	r27, r23
    5762:	2a 17       	cp	r18, r26
    5764:	3b 07       	cpc	r19, r27
    5766:	69 f4       	brne	.+26     	; 0x5782 <_ZN8CDS18B2010w1_sendcmdEh+0x48>
		{
			PORTD.DIRSET = PIN7_bm;
    5768:	41 83       	std	Z+1, r20	; 0x01
    576a:	25 e1       	ldi	r18, 0x15	; 21
    576c:	2a 95       	dec	r18
    576e:	f1 f7       	brne	.-4      	; 0x576c <_ZN8CDS18B2010w1_sendcmdEh+0x32>
    5770:	00 00       	nop
			_delay_us(2);
			PORTD.DIRCLR = PIN7_bm;
    5772:	42 83       	std	Z+2, r20	; 0x02
    5774:	a7 e0       	ldi	r26, 0x07	; 7
    5776:	b2 e0       	ldi	r27, 0x02	; 2
    5778:	11 97       	sbiw	r26, 0x01	; 1
    577a:	f1 f7       	brne	.-4      	; 0x5778 <_ZN8CDS18B2010w1_sendcmdEh+0x3e>
    577c:	00 c0       	rjmp	.+0      	; 0x577e <_ZN8CDS18B2010w1_sendcmdEh+0x44>
    577e:	00 00       	nop
    5780:	0c c0       	rjmp	.+24     	; 0x579a <_ZN8CDS18B2010w1_sendcmdEh+0x60>
			_delay_us(65);
		}
		else
		{
			
			PORTD.DIRSET = PIN7_bm;
    5782:	41 83       	std	Z+1, r20	; 0x01
    5784:	a7 e0       	ldi	r26, 0x07	; 7
    5786:	b2 e0       	ldi	r27, 0x02	; 2
    5788:	11 97       	sbiw	r26, 0x01	; 1
    578a:	f1 f7       	brne	.-4      	; 0x5788 <_ZN8CDS18B2010w1_sendcmdEh+0x4e>
    578c:	00 c0       	rjmp	.+0      	; 0x578e <_ZN8CDS18B2010w1_sendcmdEh+0x54>
    578e:	00 00       	nop
			_delay_us(65);
			PORTD.DIRCLR = PIN7_bm;
    5790:	42 83       	std	Z+2, r20	; 0x02
    5792:	b5 e3       	ldi	r27, 0x35	; 53
    5794:	ba 95       	dec	r27
    5796:	f1 f7       	brne	.-4      	; 0x5794 <_ZN8CDS18B2010w1_sendcmdEh+0x5a>
    5798:	00 00       	nop
    579a:	01 96       	adiw	r24, 0x01	; 1
	return result;
}

void CDS18B20::w1_sendcmd(unsigned char cmd)
{
	for(unsigned char i = 0; i < 8; i++)
    579c:	88 30       	cpi	r24, 0x08	; 8
    579e:	91 05       	cpc	r25, r1
    57a0:	b1 f6       	brne	.-84     	; 0x574e <_ZN8CDS18B2010w1_sendcmdEh+0x14>
			_delay_us(65);
			PORTD.DIRCLR = PIN7_bm;
			_delay_us(5);
		}
	}
}
    57a2:	df 91       	pop	r29
    57a4:	cf 91       	pop	r28
    57a6:	08 95       	ret

000057a8 <_ZN8CDS18B2015w1_receive_byteEv>:

unsigned char CDS18B20::w1_receive_byte()
{
    57a8:	20 e0       	ldi	r18, 0x00	; 0
    57aa:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char data=0;
    57ac:	80 e0       	ldi	r24, 0x00	; 0
	for(unsigned char i = 0; i < 8; i++)
	{
		PORTD.DIRSET = PIN7_bm;
    57ae:	e0 e6       	ldi	r30, 0x60	; 96
    57b0:	f6 e0       	ldi	r31, 0x06	; 6
    57b2:	90 e8       	ldi	r25, 0x80	; 128
		PORTD.DIRCLR = PIN7_bm;
		_delay_us(10);
		if((PORTD.IN & PIN7_bm) == 0x00)
			data &= ~(1<<i);
		else
			data |= 1<<i;
    57b4:	61 e0       	ldi	r22, 0x01	; 1
    57b6:	70 e0       	ldi	r23, 0x00	; 0
unsigned char CDS18B20::w1_receive_byte()
{
	unsigned char data=0;
	for(unsigned char i = 0; i < 8; i++)
	{
		PORTD.DIRSET = PIN7_bm;
    57b8:	91 83       	std	Z+1, r25	; 0x01
    57ba:	45 e1       	ldi	r20, 0x15	; 21
    57bc:	4a 95       	dec	r20
    57be:	f1 f7       	brne	.-4      	; 0x57bc <_ZN8CDS18B2015w1_receive_byteEv+0x14>
    57c0:	00 00       	nop
		_delay_us(2);
		PORTD.DIRCLR = PIN7_bm;
    57c2:	92 83       	std	Z+2, r25	; 0x02
    57c4:	aa e6       	ldi	r26, 0x6A	; 106
    57c6:	aa 95       	dec	r26
    57c8:	f1 f7       	brne	.-4      	; 0x57c6 <_ZN8CDS18B2015w1_receive_byteEv+0x1e>
    57ca:	00 c0       	rjmp	.+0      	; 0x57cc <_ZN8CDS18B2015w1_receive_byteEv+0x24>
		_delay_us(10);
		if((PORTD.IN & PIN7_bm) == 0x00)
    57cc:	40 85       	ldd	r20, Z+8	; 0x08
    57ce:	44 23       	and	r20, r20
    57d0:	54 f0       	brlt	.+20     	; 0x57e6 <_ZN8CDS18B2015w1_receive_byteEv+0x3e>
			data &= ~(1<<i);
    57d2:	ab 01       	movw	r20, r22
    57d4:	02 2e       	mov	r0, r18
    57d6:	02 c0       	rjmp	.+4      	; 0x57dc <_ZN8CDS18B2015w1_receive_byteEv+0x34>
    57d8:	44 0f       	add	r20, r20
    57da:	55 1f       	adc	r21, r21
    57dc:	0a 94       	dec	r0
    57de:	e2 f7       	brpl	.-8      	; 0x57d8 <_ZN8CDS18B2015w1_receive_byteEv+0x30>
    57e0:	40 95       	com	r20
    57e2:	84 23       	and	r24, r20
    57e4:	08 c0       	rjmp	.+16     	; 0x57f6 <_ZN8CDS18B2015w1_receive_byteEv+0x4e>
		else
			data |= 1<<i;
    57e6:	ab 01       	movw	r20, r22
    57e8:	02 2e       	mov	r0, r18
    57ea:	02 c0       	rjmp	.+4      	; 0x57f0 <_ZN8CDS18B2015w1_receive_byteEv+0x48>
    57ec:	44 0f       	add	r20, r20
    57ee:	55 1f       	adc	r21, r21
    57f0:	0a 94       	dec	r0
    57f2:	e2 f7       	brpl	.-8      	; 0x57ec <_ZN8CDS18B2015w1_receive_byteEv+0x44>
    57f4:	84 2b       	or	r24, r20
    57f6:	af e8       	ldi	r26, 0x8F	; 143
    57f8:	b1 e0       	ldi	r27, 0x01	; 1
    57fa:	11 97       	sbiw	r26, 0x01	; 1
    57fc:	f1 f7       	brne	.-4      	; 0x57fa <_ZN8CDS18B2015w1_receive_byteEv+0x52>
    57fe:	00 c0       	rjmp	.+0      	; 0x5800 <_ZN8CDS18B2015w1_receive_byteEv+0x58>
    5800:	00 00       	nop
    5802:	2f 5f       	subi	r18, 0xFF	; 255
    5804:	3f 4f       	sbci	r19, 0xFF	; 255
}

unsigned char CDS18B20::w1_receive_byte()
{
	unsigned char data=0;
	for(unsigned char i = 0; i < 8; i++)
    5806:	28 30       	cpi	r18, 0x08	; 8
    5808:	31 05       	cpc	r19, r1
    580a:	b1 f6       	brne	.-84     	; 0x57b8 <_ZN8CDS18B2015w1_receive_byteEv+0x10>
		else
			data |= 1<<i;
		_delay_us(50);
	}
	return data;
}
    580c:	08 95       	ret

0000580e <_ZN8CDS18B2010temp_18b20Ev>:

int CDS18B20::temp_18b20()
{
    580e:	1f 93       	push	r17
    5810:	cf 93       	push	r28
    5812:	df 93       	push	r29
    5814:	ec 01       	movw	r28, r24
	unsigned char data[2];
	int temp = 0;
	if(w1_find())
    5816:	0e 94 80 2b 	call	0x5700	; 0x5700 <_ZN8CDS18B207w1_findEv>
    581a:	88 23       	and	r24, r24
    581c:	b1 f1       	breq	.+108    	; 0x588a <_ZN8CDS18B2010temp_18b20Ev+0x7c>
	{
		w1_sendcmd(0xcc);	//skip ROM
    581e:	6c ec       	ldi	r22, 0xCC	; 204
    5820:	ce 01       	movw	r24, r28
    5822:	0e 94 9d 2b 	call	0x573a	; 0x573a <_ZN8CDS18B2010w1_sendcmdEh>
		w1_sendcmd(0x44);	//start conversion
    5826:	64 e4       	ldi	r22, 0x44	; 68
    5828:	ce 01       	movw	r24, r28
    582a:	0e 94 9d 2b 	call	0x573a	; 0x573a <_ZN8CDS18B2010w1_sendcmdEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    582e:	2f ef       	ldi	r18, 0xFF	; 255
    5830:	8d e3       	ldi	r24, 0x3D	; 61
    5832:	99 e4       	ldi	r25, 0x49	; 73
    5834:	21 50       	subi	r18, 0x01	; 1
    5836:	80 40       	sbci	r24, 0x00	; 0
    5838:	90 40       	sbci	r25, 0x00	; 0
    583a:	e1 f7       	brne	.-8      	; 0x5834 <_ZN8CDS18B2010temp_18b20Ev+0x26>
    583c:	00 c0       	rjmp	.+0      	; 0x583e <_ZN8CDS18B2010temp_18b20Ev+0x30>
    583e:	00 00       	nop
		_delay_ms(750);		//wait for conversion 750 ms
		w1_find();			//send Presence & Reset
    5840:	ce 01       	movw	r24, r28
    5842:	0e 94 80 2b 	call	0x5700	; 0x5700 <_ZN8CDS18B207w1_findEv>
		w1_sendcmd(0xcc);
    5846:	6c ec       	ldi	r22, 0xCC	; 204
    5848:	ce 01       	movw	r24, r28
    584a:	0e 94 9d 2b 	call	0x573a	; 0x573a <_ZN8CDS18B2010w1_sendcmdEh>
		w1_sendcmd(0xbe);	//read temperature
    584e:	6e eb       	ldi	r22, 0xBE	; 190
    5850:	ce 01       	movw	r24, r28
    5852:	0e 94 9d 2b 	call	0x573a	; 0x573a <_ZN8CDS18B2010w1_sendcmdEh>
		data[0] = w1_receive_byte();
    5856:	ce 01       	movw	r24, r28
    5858:	0e 94 d4 2b 	call	0x57a8	; 0x57a8 <_ZN8CDS18B2015w1_receive_byteEv>
    585c:	18 2f       	mov	r17, r24
		data[1] = w1_receive_byte();
    585e:	ce 01       	movw	r24, r28
    5860:	0e 94 d4 2b 	call	0x57a8	; 0x57a8 <_ZN8CDS18B2015w1_receive_byteEv>
		
		temp = data[1];
		temp = temp<<8;
    5864:	61 2f       	mov	r22, r17
    5866:	70 e0       	ldi	r23, 0x00	; 0
		temp |= data[0];
    5868:	78 2b       	or	r23, r24
		
		temp *= 0.625;
    586a:	07 2e       	mov	r0, r23
    586c:	00 0c       	add	r0, r0
    586e:	88 0b       	sbc	r24, r24
    5870:	99 0b       	sbc	r25, r25
    5872:	0e 94 f6 31 	call	0x63ec	; 0x63ec <__floatsisf>
    5876:	20 e0       	ldi	r18, 0x00	; 0
    5878:	30 e0       	ldi	r19, 0x00	; 0
    587a:	40 e2       	ldi	r20, 0x20	; 32
    587c:	5f e3       	ldi	r21, 0x3F	; 63
    587e:	0e 94 5a 32 	call	0x64b4	; 0x64b4 <__mulsf3>
    5882:	0e 94 be 31 	call	0x637c	; 0x637c <__fixsfsi>
    5886:	cb 01       	movw	r24, r22
    5888:	02 c0       	rjmp	.+4      	; 0x588e <_ZN8CDS18B2010temp_18b20Ev+0x80>
}

int CDS18B20::temp_18b20()
{
	unsigned char data[2];
	int temp = 0;
    588a:	80 e0       	ldi	r24, 0x00	; 0
    588c:	90 e0       	ldi	r25, 0x00	; 0
		
		temp *= 0.625;
	}
	
	return temp;
}
    588e:	df 91       	pop	r29
    5890:	cf 91       	pop	r28
    5892:	1f 91       	pop	r17
    5894:	08 95       	ret

00005896 <_ZN8CDS18B2010InitializeEv>:

void CDS18B20::Initialize()
{
	PORTD.OUTCLR = PIN7_bm;
    5896:	e0 e6       	ldi	r30, 0x60	; 96
    5898:	f6 e0       	ldi	r31, 0x06	; 6
    589a:	80 e8       	ldi	r24, 0x80	; 128
    589c:	86 83       	std	Z+6, r24	; 0x06
	PORTD.PIN7CTRL = PORT_OPC_TOTEM_gc;// | PORT_SRLEN_bm;
    589e:	17 8a       	std	Z+23, r1	; 0x17
    58a0:	08 95       	ret

000058a2 <_ZN11CLaserBoardC1Ev>:
	PORTD.DIRCLR = PIN4_bm;
}

void CLaserBoard::Relay1Off()
{
	PORTD.DIRSET = PIN0_bm;
    58a2:	08 95       	ret

000058a4 <_ZN11CLaserBoardD1Ev>:
    58a4:	08 95       	ret

000058a6 <_ZN11CLaserBoard12InitializeIOEv>:
    58a6:	cf 93       	push	r28
    58a8:	df 93       	push	r29
    58aa:	ec 01       	movw	r28, r24
    58ac:	e0 e4       	ldi	r30, 0x40	; 64
    58ae:	f6 e0       	ldi	r31, 0x06	; 6
    58b0:	11 82       	std	Z+1, r1	; 0x01
    58b2:	98 ea       	ldi	r25, 0xA8	; 168
    58b4:	90 8b       	std	Z+16, r25	; 0x10
    58b6:	91 8b       	std	Z+17, r25	; 0x11
    58b8:	92 8b       	std	Z+18, r25	; 0x12
    58ba:	93 8b       	std	Z+19, r25	; 0x13
    58bc:	94 8b       	std	Z+20, r25	; 0x14
    58be:	95 8b       	std	Z+21, r25	; 0x15
    58c0:	96 8b       	std	Z+22, r25	; 0x16
    58c2:	97 8b       	std	Z+23, r25	; 0x17
    58c4:	2f ef       	ldi	r18, 0xFF	; 255
    58c6:	24 83       	std	Z+4, r18	; 0x04
    58c8:	a0 e8       	ldi	r26, 0x80	; 128
    58ca:	b6 e0       	ldi	r27, 0x06	; 6
    58cc:	88 e0       	ldi	r24, 0x08	; 8
    58ce:	11 96       	adiw	r26, 0x01	; 1
    58d0:	8c 93       	st	X, r24
    58d2:	11 97       	sbiw	r26, 0x01	; 1
    58d4:	53 96       	adiw	r26, 0x13	; 19
    58d6:	1c 92       	st	X, r1
    58d8:	53 97       	sbiw	r26, 0x13	; 19
    58da:	14 96       	adiw	r26, 0x04	; 4
    58dc:	1c 92       	st	X, r1
    58de:	14 97       	sbiw	r26, 0x04	; 4
    58e0:	e0 ea       	ldi	r30, 0xA0	; 160
    58e2:	f6 e0       	ldi	r31, 0x06	; 6
    58e4:	90 ec       	ldi	r25, 0xC0	; 192
    58e6:	90 8b       	std	Z+16, r25	; 0x10
    58e8:	80 e8       	ldi	r24, 0x80	; 128
    58ea:	81 8b       	std	Z+17, r24	; 0x11
    58ec:	92 8b       	std	Z+18, r25	; 0x12
    58ee:	93 8b       	std	Z+19, r25	; 0x13
    58f0:	94 8b       	std	Z+20, r25	; 0x14
    58f2:	95 8b       	std	Z+21, r25	; 0x15
    58f4:	96 8b       	std	Z+22, r25	; 0x16
    58f6:	97 8b       	std	Z+23, r25	; 0x17
    58f8:	14 82       	std	Z+4, r1	; 0x04
    58fa:	21 83       	std	Z+1, r18	; 0x01
    58fc:	e0 e6       	ldi	r30, 0x60	; 96
    58fe:	f6 e0       	ldi	r31, 0x06	; 6
    5900:	21 e1       	ldi	r18, 0x11	; 17
    5902:	21 83       	std	Z+1, r18	; 0x01
    5904:	90 8b       	std	Z+16, r25	; 0x10
    5906:	94 8b       	std	Z+20, r25	; 0x14
    5908:	15 8a       	std	Z+21, r1	; 0x15
    590a:	14 82       	std	Z+4, r1	; 0x04
    590c:	97 e0       	ldi	r25, 0x07	; 7
    590e:	11 96       	adiw	r26, 0x01	; 1
    5910:	9c 93       	st	X, r25
    5912:	11 97       	sbiw	r26, 0x01	; 1
    5914:	50 96       	adiw	r26, 0x10	; 16
    5916:	8c 93       	st	X, r24
    5918:	50 97       	sbiw	r26, 0x10	; 16
    591a:	51 96       	adiw	r26, 0x11	; 17
    591c:	8c 93       	st	X, r24
    591e:	51 97       	sbiw	r26, 0x11	; 17
    5920:	52 96       	adiw	r26, 0x12	; 18
    5922:	8c 93       	st	X, r24
    5924:	52 97       	sbiw	r26, 0x12	; 18
    5926:	14 96       	adiw	r26, 0x04	; 4
    5928:	1c 92       	st	X, r1
    592a:	e0 ea       	ldi	r30, 0xA0	; 160
    592c:	f0 e0       	ldi	r31, 0x00	; 0
    592e:	82 81       	ldd	r24, Z+2	; 0x02
    5930:	81 60       	ori	r24, 0x01	; 1
    5932:	82 83       	std	Z+2, r24	; 0x02
    5934:	82 81       	ldd	r24, Z+2	; 0x02
    5936:	82 60       	ori	r24, 0x02	; 2
    5938:	82 83       	std	Z+2, r24	; 0x02
    593a:	82 81       	ldd	r24, Z+2	; 0x02
    593c:	84 60       	ori	r24, 0x04	; 4
    593e:	82 83       	std	Z+2, r24	; 0x02
    5940:	fe 01       	movw	r30, r28
    5942:	9e 01       	movw	r18, r28
    5944:	28 5f       	subi	r18, 0xF8	; 248
    5946:	3f 4f       	sbci	r19, 0xFF	; 255
    5948:	91 e0       	ldi	r25, 0x01	; 1
    594a:	91 93       	st	Z+, r25
    594c:	e2 17       	cp	r30, r18
    594e:	f3 07       	cpc	r31, r19
    5950:	e1 f7       	brne	.-8      	; 0x594a <_ZN11CLaserBoard12InitializeIOEv+0xa4>
    5952:	83 e0       	ldi	r24, 0x03	; 3
    5954:	88 87       	std	Y+8, r24	; 0x08
    5956:	e0 e4       	ldi	r30, 0x40	; 64
    5958:	f6 e0       	ldi	r31, 0x06	; 6
    595a:	81 e0       	ldi	r24, 0x01	; 1
    595c:	82 87       	std	Z+10, r24	; 0x0a
    595e:	81 87       	std	Z+9, r24	; 0x09
    5960:	df 91       	pop	r29
    5962:	cf 91       	pop	r28
    5964:	08 95       	ret

00005966 <_ZN11CLaserBoard15InitializeClockEv>:
    5966:	e0 e5       	ldi	r30, 0x50	; 80
    5968:	f0 e0       	ldi	r31, 0x00	; 0
    596a:	8b ec       	ldi	r24, 0xCB	; 203
    596c:	82 83       	std	Z+2, r24	; 0x02
    596e:	80 81       	ld	r24, Z
    5970:	88 60       	ori	r24, 0x08	; 8
    5972:	80 83       	st	Z, r24
    5974:	81 81       	ldd	r24, Z+1	; 0x01
    5976:	83 ff       	sbrs	r24, 3
    5978:	fd cf       	rjmp	.-6      	; 0x5974 <_ZN11CLaserBoard15InitializeClockEv+0xe>
    597a:	e0 e5       	ldi	r30, 0x50	; 80
    597c:	f0 e0       	ldi	r31, 0x00	; 0
    597e:	85 81       	ldd	r24, Z+5	; 0x05
    5980:	98 ed       	ldi	r25, 0xD8	; 216
    5982:	94 bf       	out	0x34, r25	; 52
    5984:	84 ec       	ldi	r24, 0xC4	; 196
    5986:	85 83       	std	Z+5, r24	; 0x05
    5988:	80 81       	ld	r24, Z
    598a:	80 61       	ori	r24, 0x10	; 16
    598c:	80 83       	st	Z, r24
    598e:	e0 e4       	ldi	r30, 0x40	; 64
    5990:	f0 e0       	ldi	r31, 0x00	; 0
    5992:	81 81       	ldd	r24, Z+1	; 0x01
    5994:	94 bf       	out	0x34, r25	; 52
    5996:	11 82       	std	Z+1, r1	; 0x01
    5998:	e0 e5       	ldi	r30, 0x50	; 80
    599a:	f0 e0       	ldi	r31, 0x00	; 0
    599c:	81 81       	ldd	r24, Z+1	; 0x01
    599e:	84 ff       	sbrs	r24, 4
    59a0:	fd cf       	rjmp	.-6      	; 0x599c <_ZN11CLaserBoard15InitializeClockEv+0x36>
    59a2:	e0 e4       	ldi	r30, 0x40	; 64
    59a4:	f0 e0       	ldi	r31, 0x00	; 0
    59a6:	80 81       	ld	r24, Z
    59a8:	88 7f       	andi	r24, 0xF8	; 248
    59aa:	84 60       	ori	r24, 0x04	; 4
    59ac:	98 ed       	ldi	r25, 0xD8	; 216
    59ae:	94 bf       	out	0x34, r25	; 52
    59b0:	80 83       	st	Z, r24
    59b2:	a0 e5       	ldi	r26, 0x50	; 80
    59b4:	b0 e0       	ldi	r27, 0x00	; 0
    59b6:	8c 91       	ld	r24, X
    59b8:	88 7f       	andi	r24, 0xF8	; 248
    59ba:	8c 93       	st	X, r24
    59bc:	82 81       	ldd	r24, Z+2	; 0x02
    59be:	94 bf       	out	0x34, r25	; 52
    59c0:	81 e0       	ldi	r24, 0x01	; 1
    59c2:	82 83       	std	Z+2, r24	; 0x02
    59c4:	e0 eb       	ldi	r30, 0xB0	; 176
    59c6:	f0 e0       	ldi	r31, 0x00	; 0
    59c8:	84 81       	ldd	r24, Z+4	; 0x04
    59ca:	8c 7f       	andi	r24, 0xFC	; 252
    59cc:	84 83       	std	Z+4, r24	; 0x04
    59ce:	08 95       	ret

000059d0 <_ZN11CLaserBoard5PWMOnEv>:
    59d0:	84 e0       	ldi	r24, 0x04	; 4
    59d2:	80 93 85 06 	sts	0x0685, r24
    59d6:	08 95       	ret

000059d8 <_ZN11CLaserBoard6PWMOffEv>:
    59d8:	84 e0       	ldi	r24, 0x04	; 4
    59da:	80 93 86 06 	sts	0x0686, r24
    59de:	08 95       	ret

000059e0 <_ZN11CLaserBoard8Relay1OnEv>:
    59e0:	81 e0       	ldi	r24, 0x01	; 1
    59e2:	80 93 62 06 	sts	0x0662, r24
    59e6:	08 95       	ret

000059e8 <_ZN11CLaserBoard8Relay2OnEv>:
    59e8:	80 e1       	ldi	r24, 0x10	; 16
    59ea:	80 93 62 06 	sts	0x0662, r24
    59ee:	08 95       	ret

000059f0 <_ZN11CLaserBoard9Relay2OffEv>:
}

void CLaserBoard::Relay2Off()
{
	PORTD.DIRSET = PIN4_bm;
    59f0:	80 e1       	ldi	r24, 0x10	; 16
    59f2:	80 93 61 06 	sts	0x0661, r24
    59f6:	08 95       	ret

000059f8 <_ZN11CLaserBoard12LaserPowerOnEv>:
}

void CLaserBoard::LaserPowerOn()
{
	PORTE.OUTSET = PIN1_bm;
    59f8:	82 e0       	ldi	r24, 0x02	; 2
    59fa:	80 93 85 06 	sts	0x0685, r24
    59fe:	08 95       	ret

00005a00 <_ZN11CLaserBoard13LaserPowerOffEv>:
}

void CLaserBoard::LaserPowerOff()
{
	PORTE.OUTCLR = PIN1_bm;
    5a00:	82 e0       	ldi	r24, 0x02	; 2
    5a02:	80 93 86 06 	sts	0x0686, r24
    5a06:	08 95       	ret

00005a08 <_ZN11CLaserBoard4BeepEv>:
}

void CLaserBoard::Beep()
{
	cli();
    5a08:	f8 94       	cli
    5a0a:	84 e6       	ldi	r24, 0x64	; 100
    5a0c:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 100; i++)
	{
		PORTE.OUTSET = PIN3_bm;
    5a0e:	e0 e8       	ldi	r30, 0x80	; 128
    5a10:	f6 e0       	ldi	r31, 0x06	; 6
    5a12:	28 e0       	ldi	r18, 0x08	; 8
    5a14:	25 83       	std	Z+5, r18	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5a16:	af e9       	ldi	r26, 0x9F	; 159
    5a18:	bf e0       	ldi	r27, 0x0F	; 15
    5a1a:	11 97       	sbiw	r26, 0x01	; 1
    5a1c:	f1 f7       	brne	.-4      	; 0x5a1a <_ZN11CLaserBoard4BeepEv+0x12>
    5a1e:	00 c0       	rjmp	.+0      	; 0x5a20 <_ZN11CLaserBoard4BeepEv+0x18>
    5a20:	00 00       	nop
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
    5a22:	26 83       	std	Z+6, r18	; 0x06
    5a24:	af e9       	ldi	r26, 0x9F	; 159
    5a26:	bf e0       	ldi	r27, 0x0F	; 15
    5a28:	11 97       	sbiw	r26, 0x01	; 1
    5a2a:	f1 f7       	brne	.-4      	; 0x5a28 <_ZN11CLaserBoard4BeepEv+0x20>
    5a2c:	00 c0       	rjmp	.+0      	; 0x5a2e <_ZN11CLaserBoard4BeepEv+0x26>
    5a2e:	00 00       	nop
    5a30:	01 97       	sbiw	r24, 0x01	; 1

void CLaserBoard::Beep()
{
	cli();
	
	for (int i = 0; i < 100; i++)
    5a32:	81 f7       	brne	.-32     	; 0x5a14 <_ZN11CLaserBoard4BeepEv+0xc>
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
		_delay_us(500);
	}
	
	sei();
    5a34:	78 94       	sei
    5a36:	08 95       	ret

00005a38 <_ZN11CLaserBoard14BeepClassErrorEv>:
}

void CLaserBoard::BeepClassError()
{
	cli();
    5a38:	f8 94       	cli
    5a3a:	45 e0       	ldi	r20, 0x05	; 5
    5a3c:	50 e0       	ldi	r21, 0x00	; 0
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    5a3e:	64 e6       	ldi	r22, 0x64	; 100
    5a40:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
		{
			PORTE.OUTSET = PIN3_bm;
    5a42:	e0 e8       	ldi	r30, 0x80	; 128
    5a44:	f6 e0       	ldi	r31, 0x06	; 6
    5a46:	28 e0       	ldi	r18, 0x08	; 8
    5a48:	1c c0       	rjmp	.+56     	; 0x5a82 <_ZN11CLaserBoard14BeepClassErrorEv+0x4a>
    5a4a:	25 83       	std	Z+5, r18	; 0x05
    5a4c:	af e9       	ldi	r26, 0x9F	; 159
    5a4e:	bf e0       	ldi	r27, 0x0F	; 15
    5a50:	11 97       	sbiw	r26, 0x01	; 1
    5a52:	f1 f7       	brne	.-4      	; 0x5a50 <_ZN11CLaserBoard14BeepClassErrorEv+0x18>
    5a54:	00 c0       	rjmp	.+0      	; 0x5a56 <_ZN11CLaserBoard14BeepClassErrorEv+0x1e>
    5a56:	00 00       	nop
			_delay_us(500);
			PORTE.OUTCLR = PIN3_bm;
    5a58:	26 83       	std	Z+6, r18	; 0x06
    5a5a:	af e9       	ldi	r26, 0x9F	; 159
    5a5c:	bf e0       	ldi	r27, 0x0F	; 15
    5a5e:	11 97       	sbiw	r26, 0x01	; 1
    5a60:	f1 f7       	brne	.-4      	; 0x5a5e <_ZN11CLaserBoard14BeepClassErrorEv+0x26>
    5a62:	00 c0       	rjmp	.+0      	; 0x5a64 <_ZN11CLaserBoard14BeepClassErrorEv+0x2c>
    5a64:	00 00       	nop
    5a66:	01 97       	sbiw	r24, 0x01	; 1
{
	cli();
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
    5a68:	81 f7       	brne	.-32     	; 0x5a4a <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5a6a:	bf ef       	ldi	r27, 0xFF	; 255
    5a6c:	73 ec       	ldi	r23, 0xC3	; 195
    5a6e:	89 e0       	ldi	r24, 0x09	; 9
    5a70:	b1 50       	subi	r27, 0x01	; 1
    5a72:	70 40       	sbci	r23, 0x00	; 0
    5a74:	80 40       	sbci	r24, 0x00	; 0
    5a76:	e1 f7       	brne	.-8      	; 0x5a70 <_ZN11CLaserBoard14BeepClassErrorEv+0x38>
    5a78:	00 c0       	rjmp	.+0      	; 0x5a7a <_ZN11CLaserBoard14BeepClassErrorEv+0x42>
    5a7a:	00 00       	nop
    5a7c:	41 50       	subi	r20, 0x01	; 1
    5a7e:	51 09       	sbc	r21, r1

void CLaserBoard::BeepClassError()
{
	cli();
	
	for (int j = 0; j < 5; j++)
    5a80:	19 f0       	breq	.+6      	; 0x5a88 <_ZN11CLaserBoard14BeepClassErrorEv+0x50>
	
	sei();
}

void CLaserBoard::BeepClassError()
{
    5a82:	86 2f       	mov	r24, r22
    5a84:	93 2f       	mov	r25, r19
    5a86:	e1 cf       	rjmp	.-62     	; 0x5a4a <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
			_delay_us(500);
		}
		_delay_ms(100);
	}
	
	sei();
    5a88:	78 94       	sei
    5a8a:	08 95       	ret

00005a8c <_ZN11CLaserBoard9PortCheckEv>:
		else
			Port &= ~bitpos;
		
		bitpos <<= 1;
	}*/
	Port = PORTC.IN;
    5a8c:	20 91 48 06 	lds	r18, 0x0648
    5a90:	fc 01       	movw	r30, r24
    5a92:	21 87       	std	Z+9, r18	; 0x09
    5a94:	08 95       	ret

00005a96 <_ZN11CLaserBoard10FootswitchEv>:
}

bool CLaserBoard::Footswitch()
{
	return Port & 0x01;
    5a96:	fc 01       	movw	r30, r24
    5a98:	81 85       	ldd	r24, Z+9	; 0x09
    5a9a:	81 70       	andi	r24, 0x01	; 1
    5a9c:	08 95       	ret

00005a9e <_ZN12CSoundPlayerC1Ev>:
//This function generates the square wave that makes the piezo speaker sound at a determinated frequency.
void CSoundPlayer::beep(uint16_t note, uint16_t duration)
{
	SoundStart(note, duration, 3);
	SoundStop();
}
    5a9e:	08 95       	ret

00005aa0 <_ZN12CSoundPlayerD1Ev>:
    5aa0:	08 95       	ret

00005aa2 <_ZN12CSoundPlayer19InitializeToneTimerEv>:
    5aa2:	e0 e0       	ldi	r30, 0x00	; 0
    5aa4:	fa e0       	ldi	r31, 0x0A	; 10
    5aa6:	10 82       	st	Z, r1
    5aa8:	87 e8       	ldi	r24, 0x87	; 135
    5aaa:	81 83       	std	Z+1, r24	; 0x01
    5aac:	13 82       	std	Z+3, r1	; 0x03
    5aae:	84 e2       	ldi	r24, 0x24	; 36
    5ab0:	94 ef       	ldi	r25, 0xF4	; 244
    5ab2:	86 a3       	std	Z+38, r24	; 0x26
    5ab4:	97 a3       	std	Z+39, r25	; 0x27
    5ab6:	82 e1       	ldi	r24, 0x12	; 18
    5ab8:	9a e7       	ldi	r25, 0x7A	; 122
    5aba:	86 a7       	std	Z+46, r24	; 0x2e
    5abc:	97 a7       	std	Z+47, r25	; 0x2f
    5abe:	16 82       	std	Z+6, r1	; 0x06
    5ac0:	17 82       	std	Z+7, r1	; 0x07
    5ac2:	08 95       	ret

00005ac4 <_ZN12CSoundPlayer23InitializeDurationTimerEv>:
    5ac4:	e0 e4       	ldi	r30, 0x40	; 64
    5ac6:	fa e0       	ldi	r31, 0x0A	; 10
    5ac8:	10 82       	st	Z, r1
    5aca:	11 82       	std	Z+1, r1	; 0x01
    5acc:	13 82       	std	Z+3, r1	; 0x03
    5ace:	84 e2       	ldi	r24, 0x24	; 36
    5ad0:	94 ef       	ldi	r25, 0xF4	; 244
    5ad2:	86 a3       	std	Z+38, r24	; 0x26
    5ad4:	97 a3       	std	Z+39, r25	; 0x27
    5ad6:	16 82       	std	Z+6, r1	; 0x06
    5ad8:	17 82       	std	Z+7, r1	; 0x07
    5ada:	08 95       	ret

00005adc <_ZN12CSoundPlayer10SoundStartEjjh>:
    5adc:	0f 93       	push	r16
    5ade:	1f 93       	push	r17
    5ae0:	cf 93       	push	r28
    5ae2:	8a 01       	movw	r16, r20
    5ae4:	c2 2f       	mov	r28, r18
    5ae6:	9b 01       	movw	r18, r22
    5ae8:	40 e0       	ldi	r20, 0x00	; 0
    5aea:	50 e0       	ldi	r21, 0x00	; 0
    5aec:	64 e2       	ldi	r22, 0x24	; 36
    5aee:	74 ef       	ldi	r23, 0xF4	; 244
    5af0:	80 e0       	ldi	r24, 0x00	; 0
    5af2:	90 e0       	ldi	r25, 0x00	; 0
    5af4:	0e 94 49 33 	call	0x6692	; 0x6692 <__divmodsi4>
    5af8:	b8 01       	movw	r22, r16
    5afa:	76 95       	lsr	r23
    5afc:	67 95       	ror	r22
    5afe:	ee e3       	ldi	r30, 0x3E	; 62
    5b00:	e0 9f       	mul	r30, r16
    5b02:	c0 01       	movw	r24, r0
    5b04:	e1 9f       	mul	r30, r17
    5b06:	90 0d       	add	r25, r0
    5b08:	11 24       	eor	r1, r1
    5b0a:	86 0f       	add	r24, r22
    5b0c:	97 1f       	adc	r25, r23
    5b0e:	cf 5f       	subi	r28, 0xFF	; 255
    5b10:	b9 01       	movw	r22, r18
    5b12:	02 c0       	rjmp	.+4      	; 0x5b18 <_ZN12CSoundPlayer10SoundStartEjjh+0x3c>
    5b14:	76 95       	lsr	r23
    5b16:	67 95       	ror	r22
    5b18:	ca 95       	dec	r28
    5b1a:	e2 f7       	brpl	.-8      	; 0x5b14 <_ZN12CSoundPlayer10SoundStartEjjh+0x38>
    5b1c:	e0 e0       	ldi	r30, 0x00	; 0
    5b1e:	fa e0       	ldi	r31, 0x0A	; 10
    5b20:	66 a7       	std	Z+46, r22	; 0x2e
    5b22:	77 a7       	std	Z+47, r23	; 0x2f
    5b24:	26 a3       	std	Z+38, r18	; 0x26
    5b26:	37 a3       	std	Z+39, r19	; 0x27
    5b28:	a0 e4       	ldi	r26, 0x40	; 64
    5b2a:	ba e0       	ldi	r27, 0x0A	; 10
    5b2c:	96 96       	adiw	r26, 0x26	; 38
    5b2e:	8d 93       	st	X+, r24
    5b30:	9c 93       	st	X, r25
    5b32:	97 97       	sbiw	r26, 0x27	; 39
    5b34:	86 e0       	ldi	r24, 0x06	; 6
    5b36:	80 83       	st	Z, r24
    5b38:	87 e0       	ldi	r24, 0x07	; 7
    5b3a:	8c 93       	st	X, r24
    5b3c:	cf 91       	pop	r28
    5b3e:	1f 91       	pop	r17
    5b40:	0f 91       	pop	r16
    5b42:	08 95       	ret

00005b44 <_ZN12CSoundPlayer9SoundStopEv>:
    5b44:	e0 e4       	ldi	r30, 0x40	; 64
    5b46:	fa e0       	ldi	r31, 0x0A	; 10
    5b48:	84 85       	ldd	r24, Z+12	; 0x0c
    5b4a:	80 ff       	sbrs	r24, 0
    5b4c:	fd cf       	rjmp	.-6      	; 0x5b48 <_ZN12CSoundPlayer9SoundStopEv+0x4>
    5b4e:	e0 e4       	ldi	r30, 0x40	; 64
    5b50:	fa e0       	ldi	r31, 0x0A	; 10
    5b52:	84 85       	ldd	r24, Z+12	; 0x0c
    5b54:	81 70       	andi	r24, 0x01	; 1
    5b56:	84 87       	std	Z+12, r24	; 0x0c
    5b58:	a0 e0       	ldi	r26, 0x00	; 0
    5b5a:	ba e0       	ldi	r27, 0x0A	; 10
    5b5c:	1c 92       	st	X, r1
    5b5e:	10 82       	st	Z, r1
    5b60:	10 a2       	std	Z+32, r1	; 0x20
    5b62:	11 a2       	std	Z+33, r1	; 0x21
    5b64:	90 96       	adiw	r26, 0x20	; 32
    5b66:	1d 92       	st	X+, r1
    5b68:	1c 92       	st	X, r1
    5b6a:	91 97       	sbiw	r26, 0x21	; 33
    5b6c:	2f ef       	ldi	r18, 0xFF	; 255
    5b6e:	83 ef       	ldi	r24, 0xF3	; 243
    5b70:	91 e0       	ldi	r25, 0x01	; 1
    5b72:	21 50       	subi	r18, 0x01	; 1
    5b74:	80 40       	sbci	r24, 0x00	; 0
    5b76:	90 40       	sbci	r25, 0x00	; 0
    5b78:	e1 f7       	brne	.-8      	; 0x5b72 <_ZN12CSoundPlayer9SoundStopEv+0x2e>
    5b7a:	00 c0       	rjmp	.+0      	; 0x5b7c <_ZN12CSoundPlayer9SoundStopEv+0x38>
    5b7c:	00 00       	nop
    5b7e:	08 95       	ret

00005b80 <_ZN12CSoundPlayer10InitializeEv>:

	_delay_ms(20);
} 

void CSoundPlayer::Initialize()
{
    5b80:	cf 93       	push	r28
    5b82:	df 93       	push	r29
    5b84:	ec 01       	movw	r28, r24
	InitializeToneTimer();
    5b86:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <_ZN12CSoundPlayer19InitializeToneTimerEv>
	InitializeDurationTimer();
    5b8a:	ce 01       	movw	r24, r28
    5b8c:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <_ZN12CSoundPlayer23InitializeDurationTimerEv>
}
    5b90:	df 91       	pop	r29
    5b92:	cf 91       	pop	r28
    5b94:	08 95       	ret

00005b96 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerC::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    5b96:	fc 01       	movw	r30, r24
    5b98:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5b9a:	e0 e0       	ldi	r30, 0x00	; 0
    5b9c:	f8 e0       	ldi	r31, 0x08	; 8
    5b9e:	80 81       	ld	r24, Z
    5ba0:	80 7f       	andi	r24, 0xF0	; 240
    5ba2:	80 83       	st	Z, r24
	
	// No events
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5ba4:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC0.CNT = 0;
    5ba6:	10 a2       	std	Z+32, r1	; 0x20
    5ba8:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CCA = 0;
    5baa:	10 a6       	std	Z+40, r1	; 0x28
    5bac:	11 a6       	std	Z+41, r1	; 0x29
	TCC0.CCB = 0;
    5bae:	12 a6       	std	Z+42, r1	; 0x2a
    5bb0:	13 a6       	std	Z+43, r1	; 0x2b
	TCC0.CCC = 0;
    5bb2:	14 a6       	std	Z+44, r1	; 0x2c
    5bb4:	15 a6       	std	Z+45, r1	; 0x2d
	TCC0.CCD = 0;
    5bb6:	16 a6       	std	Z+46, r1	; 0x2e
    5bb8:	17 a6       	std	Z+47, r1	; 0x2f
	TCC0.PER = 0;
    5bba:	16 a2       	std	Z+38, r1	; 0x26
    5bbc:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    5bbe:	81 81       	ldd	r24, Z+1	; 0x01
    5bc0:	88 7f       	andi	r24, 0xF8	; 248
    5bc2:	68 2b       	or	r22, r24
    5bc4:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC0.CTRLA = (TCC0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    5bc6:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    5bc8:	17 82       	std	Z+7, r1	; 0x07
    5bca:	08 95       	ret

00005bcc <_ZN7CTimerC5StartEj>:
}

void CTimerC::Start(uint16_t period)
{
	// Set period of timer
	TCC0.PER = period;
    5bcc:	e0 e0       	ldi	r30, 0x00	; 0
    5bce:	f8 e0       	ldi	r31, 0x08	; 8
    5bd0:	66 a3       	std	Z+38, r22	; 0x26
    5bd2:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    5bd4:	20 81       	ld	r18, Z
    5bd6:	20 7f       	andi	r18, 0xF0	; 240
    5bd8:	dc 01       	movw	r26, r24
    5bda:	12 96       	adiw	r26, 0x02	; 2
    5bdc:	9c 91       	ld	r25, X
    5bde:	82 2f       	mov	r24, r18
    5be0:	89 2b       	or	r24, r25
    5be2:	80 83       	st	Z, r24
    5be4:	08 95       	ret

00005be6 <_ZN7CTimerC4StopEv>:
}

void CTimerC::Stop()
{
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5be6:	e0 e0       	ldi	r30, 0x00	; 0
    5be8:	f8 e0       	ldi	r31, 0x08	; 8
    5bea:	80 81       	ld	r24, Z
    5bec:	80 7f       	andi	r24, 0xF0	; 240
    5bee:	80 83       	st	Z, r24
	TCC0.CNT = 0;
    5bf0:	10 a2       	std	Z+32, r1	; 0x20
    5bf2:	11 a2       	std	Z+33, r1	; 0x21
    5bf4:	08 95       	ret

00005bf6 <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::EnableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB = (TCC0.CTRLB & ~0xF0) | channels;
    5bf6:	e0 e0       	ldi	r30, 0x00	; 0
    5bf8:	f8 e0       	ldi	r31, 0x08	; 8
    5bfa:	81 81       	ldd	r24, Z+1	; 0x01
    5bfc:	8f 70       	andi	r24, 0x0F	; 15
    5bfe:	68 2b       	or	r22, r24
    5c00:	61 83       	std	Z+1, r22	; 0x01
    5c02:	08 95       	ret

00005c04 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::DisableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB &= ~channels;
    5c04:	e0 e0       	ldi	r30, 0x00	; 0
    5c06:	f8 e0       	ldi	r31, 0x08	; 8
    5c08:	81 81       	ldd	r24, Z+1	; 0x01
    5c0a:	60 95       	com	r22
    5c0c:	68 23       	and	r22, r24
    5c0e:	61 83       	std	Z+1, r22	; 0x01
    5c10:	08 95       	ret

00005c12 <_ZN7CTimerC9SetPeriodEj>:
}

void CTimerC::SetPeriod(uint16_t value)
{
	TCC0.PER = value;
    5c12:	60 93 26 08 	sts	0x0826, r22
    5c16:	70 93 27 08 	sts	0x0827, r23
    5c1a:	08 95       	ret

00005c1c <_ZN7CTimerC8SetCOMPAEj>:
}

void CTimerC::SetCOMPA(uint16_t value)
{
	TCC0.CCA = value;
    5c1c:	60 93 28 08 	sts	0x0828, r22
    5c20:	70 93 29 08 	sts	0x0829, r23
    5c24:	08 95       	ret

00005c26 <_ZN7CTimerC8SetCOMPBEj>:
}

void CTimerC::SetCOMPB(uint16_t value)
{
	TCC0.CCB = value;
    5c26:	60 93 2a 08 	sts	0x082A, r22
    5c2a:	70 93 2b 08 	sts	0x082B, r23
    5c2e:	08 95       	ret

00005c30 <_ZN7CTimerC8SetCOMPCEj>:
}

void CTimerC::SetCOMPC(uint16_t value)
{
	TCC0.CCC = value;
    5c30:	60 93 2c 08 	sts	0x082C, r22
    5c34:	70 93 2d 08 	sts	0x082D, r23
    5c38:	08 95       	ret

00005c3a <_ZN7CTimerC8SetCOMPDEj>:
}

void CTimerC::SetCOMPD(uint16_t value)
{
	TCC0.CCD = value;
    5c3a:	60 93 2e 08 	sts	0x082E, r22
    5c3e:	70 93 2f 08 	sts	0x082F, r23
    5c42:	08 95       	ret

00005c44 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    5c44:	61 15       	cp	r22, r1
    5c46:	71 05       	cpc	r23, r1
    5c48:	31 f0       	breq	.+12     	; 0x5c56 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    5c4a:	e0 e0       	ldi	r30, 0x00	; 0
    5c4c:	f8 e0       	ldi	r31, 0x08	; 8
    5c4e:	86 81       	ldd	r24, Z+6	; 0x06
    5c50:	83 70       	andi	r24, 0x03	; 3
    5c52:	28 2b       	or	r18, r24
    5c54:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCC0_OVF_vect_num] = func;
    5c56:	60 93 e0 22 	sts	0x22E0, r22
    5c5a:	70 93 e1 22 	sts	0x22E1, r23
	InterruptSenderTable[TCC0_OVF_vect_num] = owner;
    5c5e:	40 93 d6 23 	sts	0x23D6, r20
    5c62:	50 93 d7 23 	sts	0x23D7, r21
    5c66:	08 95       	ret

00005c68 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    5c68:	61 15       	cp	r22, r1
    5c6a:	71 05       	cpc	r23, r1
    5c6c:	31 f0       	breq	.+12     	; 0x5c7a <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    5c6e:	e0 e0       	ldi	r30, 0x00	; 0
    5c70:	f8 e0       	ldi	r31, 0x08	; 8
    5c72:	86 81       	ldd	r24, Z+6	; 0x06
    5c74:	8c 70       	andi	r24, 0x0C	; 12
    5c76:	28 2b       	or	r18, r24
    5c78:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC0_ERR_vect_num] = func;
    5c7a:	60 93 e2 22 	sts	0x22E2, r22
    5c7e:	70 93 e3 22 	sts	0x22E3, r23
	InterruptSenderTable[TCC0_ERR_vect_num] = owner;
    5c82:	40 93 d8 23 	sts	0x23D8, r20
    5c86:	50 93 d9 23 	sts	0x23D9, r21
    5c8a:	08 95       	ret

00005c8c <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    5c8c:	61 15       	cp	r22, r1
    5c8e:	71 05       	cpc	r23, r1
    5c90:	31 f0       	breq	.+12     	; 0x5c9e <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    5c92:	e0 e0       	ldi	r30, 0x00	; 0
    5c94:	f8 e0       	ldi	r31, 0x08	; 8
    5c96:	87 81       	ldd	r24, Z+7	; 0x07
    5c98:	83 70       	andi	r24, 0x03	; 3
    5c9a:	28 2b       	or	r18, r24
    5c9c:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCA_vect_num] = func;
    5c9e:	60 93 e4 22 	sts	0x22E4, r22
    5ca2:	70 93 e5 22 	sts	0x22E5, r23
	InterruptSenderTable[TCC0_CCA_vect_num] = owner;
    5ca6:	40 93 da 23 	sts	0x23DA, r20
    5caa:	50 93 db 23 	sts	0x23DB, r21
    5cae:	08 95       	ret

00005cb0 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    5cb0:	61 15       	cp	r22, r1
    5cb2:	71 05       	cpc	r23, r1
    5cb4:	31 f0       	breq	.+12     	; 0x5cc2 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    5cb6:	e0 e0       	ldi	r30, 0x00	; 0
    5cb8:	f8 e0       	ldi	r31, 0x08	; 8
    5cba:	87 81       	ldd	r24, Z+7	; 0x07
    5cbc:	8c 70       	andi	r24, 0x0C	; 12
    5cbe:	28 2b       	or	r18, r24
    5cc0:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCB_vect_num] = func;
    5cc2:	60 93 e6 22 	sts	0x22E6, r22
    5cc6:	70 93 e7 22 	sts	0x22E7, r23
	InterruptSenderTable[TCC0_CCB_vect_num] = owner;
    5cca:	40 93 dc 23 	sts	0x23DC, r20
    5cce:	50 93 dd 23 	sts	0x23DD, r21
    5cd2:	08 95       	ret

00005cd4 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerC::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    5cd4:	61 15       	cp	r22, r1
    5cd6:	71 05       	cpc	r23, r1
    5cd8:	31 f0       	breq	.+12     	; 0x5ce6 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    5cda:	e0 e0       	ldi	r30, 0x00	; 0
    5cdc:	f8 e0       	ldi	r31, 0x08	; 8
    5cde:	87 81       	ldd	r24, Z+7	; 0x07
    5ce0:	80 73       	andi	r24, 0x30	; 48
    5ce2:	28 2b       	or	r18, r24
    5ce4:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCC_vect_num] = func;
    5ce6:	60 93 e8 22 	sts	0x22E8, r22
    5cea:	70 93 e9 22 	sts	0x22E9, r23
	InterruptSenderTable[TCC0_CCC_vect_num] = owner;
    5cee:	40 93 de 23 	sts	0x23DE, r20
    5cf2:	50 93 df 23 	sts	0x23DF, r21
    5cf6:	08 95       	ret

00005cf8 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerC::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    5cf8:	61 15       	cp	r22, r1
    5cfa:	71 05       	cpc	r23, r1
    5cfc:	31 f0       	breq	.+12     	; 0x5d0a <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    5cfe:	e0 e0       	ldi	r30, 0x00	; 0
    5d00:	f8 e0       	ldi	r31, 0x08	; 8
    5d02:	87 81       	ldd	r24, Z+7	; 0x07
    5d04:	80 7c       	andi	r24, 0xC0	; 192
    5d06:	28 2b       	or	r18, r24
    5d08:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCD_vect_num] = func;
    5d0a:	60 93 ea 22 	sts	0x22EA, r22
    5d0e:	70 93 eb 22 	sts	0x22EB, r23
	InterruptSenderTable[TCC0_CCD_vect_num] = owner;
    5d12:	40 93 e0 23 	sts	0x23E0, r20
    5d16:	50 93 e1 23 	sts	0x23E1, r21
    5d1a:	08 95       	ret

00005d1c <_ZN7CTimerCC1Ev>:

#include "CTimerC.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC::CTimerC()
    5d1c:	cf 93       	push	r28
    5d1e:	df 93       	push	r29
    5d20:	ec 01       	movw	r28, r24
    5d22:	0e 94 5f 12 	call	0x24be	; 0x24be <_ZN6CTimerC1Ev>
    5d26:	84 e1       	ldi	r24, 0x14	; 20
    5d28:	92 e2       	ldi	r25, 0x22	; 34
    5d2a:	88 83       	st	Y, r24
    5d2c:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    5d2e:	df 91       	pop	r29
    5d30:	cf 91       	pop	r28
    5d32:	08 95       	ret

00005d34 <_ZN7CTimerCD1Ev>:

// default destructor
CTimerC::~CTimerC()
    5d34:	24 e1       	ldi	r18, 0x14	; 20
    5d36:	32 e2       	ldi	r19, 0x22	; 34
    5d38:	fc 01       	movw	r30, r24
    5d3a:	20 83       	st	Z, r18
    5d3c:	31 83       	std	Z+1, r19	; 0x01
    5d3e:	0e 94 65 12 	call	0x24ca	; 0x24ca <_ZN6CTimerD1Ev>
    5d42:	08 95       	ret

00005d44 <_ZN8CTimerC110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC1

// Basic timer functions
void CTimerC1::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    5d44:	fc 01       	movw	r30, r24
    5d46:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5d48:	e0 e4       	ldi	r30, 0x40	; 64
    5d4a:	f8 e0       	ldi	r31, 0x08	; 8
    5d4c:	80 81       	ld	r24, Z
    5d4e:	80 7f       	andi	r24, 0xF0	; 240
    5d50:	80 83       	st	Z, r24
	
	// No events
	TCC1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5d52:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC1.CNT = 0;
    5d54:	10 a2       	std	Z+32, r1	; 0x20
    5d56:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.CCA = 0;
    5d58:	10 a6       	std	Z+40, r1	; 0x28
    5d5a:	11 a6       	std	Z+41, r1	; 0x29
	TCC1.CCB = 0;
    5d5c:	12 a6       	std	Z+42, r1	; 0x2a
    5d5e:	13 a6       	std	Z+43, r1	; 0x2b
	TCC1.PER = 0;
    5d60:	16 a2       	std	Z+38, r1	; 0x26
    5d62:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC1.CTRLB = (TCC1.CTRLB & ~TC1_WGMODE_gm) | wgm;
    5d64:	81 81       	ldd	r24, Z+1	; 0x01
    5d66:	88 7f       	andi	r24, 0xF8	; 248
    5d68:	68 2b       	or	r22, r24
    5d6a:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC1.CTRLA = (TCC1.CTRLA & TC1_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    5d6c:	16 82       	std	Z+6, r1	; 0x06
	TCC1.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    5d6e:	17 82       	std	Z+7, r1	; 0x07
    5d70:	08 95       	ret

00005d72 <_ZN8CTimerC15StartEj>:
}

void CTimerC1::Start(uint16_t period)
{
	// Set period of timer
	TCC1.PER = period;
    5d72:	e0 e4       	ldi	r30, 0x40	; 64
    5d74:	f8 e0       	ldi	r31, 0x08	; 8
    5d76:	66 a3       	std	Z+38, r22	; 0x26
    5d78:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | clockSrc;
    5d7a:	20 81       	ld	r18, Z
    5d7c:	20 7f       	andi	r18, 0xF0	; 240
    5d7e:	dc 01       	movw	r26, r24
    5d80:	12 96       	adiw	r26, 0x02	; 2
    5d82:	9c 91       	ld	r25, X
    5d84:	82 2f       	mov	r24, r18
    5d86:	89 2b       	or	r24, r25
    5d88:	80 83       	st	Z, r24
    5d8a:	08 95       	ret

00005d8c <_ZN8CTimerC14StopEv>:
}

void CTimerC1::Stop()
{
	// Stop timer
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5d8c:	e0 e4       	ldi	r30, 0x40	; 64
    5d8e:	f8 e0       	ldi	r31, 0x08	; 8
    5d90:	80 81       	ld	r24, Z
    5d92:	80 7f       	andi	r24, 0xF0	; 240
    5d94:	80 83       	st	Z, r24
	TCC1.CNT = 0;
    5d96:	10 a2       	std	Z+32, r1	; 0x20
    5d98:	11 a2       	std	Z+33, r1	; 0x21
    5d9a:	08 95       	ret

00005d9c <_ZN8CTimerC15ResetEv>:
}

void CTimerC1::Reset()
{
	// Stop timer
	uint16_t tmp = TCC1.CTRLA;
    5d9c:	e0 e4       	ldi	r30, 0x40	; 64
    5d9e:	f8 e0       	ldi	r31, 0x08	; 8
    5da0:	90 81       	ld	r25, Z
	TCC1.CTRLA = (TCC1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5da2:	80 81       	ld	r24, Z
    5da4:	80 7f       	andi	r24, 0xF0	; 240
    5da6:	80 83       	st	Z, r24
	TCC1.CNT = 0;
    5da8:	10 a2       	std	Z+32, r1	; 0x20
    5daa:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.CTRLA = tmp;
    5dac:	90 83       	st	Z, r25
    5dae:	08 95       	ret

00005db0 <_ZN8CTimerC113EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC1::EnableChannel(TIMER_CHANNELS channels)
{
	TCC1.CTRLB = (TCC1.CTRLB & ~0xF0) | channels;
    5db0:	e0 e4       	ldi	r30, 0x40	; 64
    5db2:	f8 e0       	ldi	r31, 0x08	; 8
    5db4:	81 81       	ldd	r24, Z+1	; 0x01
    5db6:	8f 70       	andi	r24, 0x0F	; 15
    5db8:	68 2b       	or	r22, r24
    5dba:	61 83       	std	Z+1, r22	; 0x01
    5dbc:	08 95       	ret

00005dbe <_ZN8CTimerC114DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC1::DisableChannel(TIMER_CHANNELS channels)
{
	TCC1.CTRLB &= ~channels;
    5dbe:	e0 e4       	ldi	r30, 0x40	; 64
    5dc0:	f8 e0       	ldi	r31, 0x08	; 8
    5dc2:	81 81       	ldd	r24, Z+1	; 0x01
    5dc4:	60 95       	com	r22
    5dc6:	68 23       	and	r22, r24
    5dc8:	61 83       	std	Z+1, r22	; 0x01
    5dca:	08 95       	ret

00005dcc <_ZN8CTimerC19SetPeriodEj>:
}

void CTimerC1::SetPeriod(uint16_t value)
{
	TCC1.PER = value;
    5dcc:	60 93 66 08 	sts	0x0866, r22
    5dd0:	70 93 67 08 	sts	0x0867, r23
    5dd4:	08 95       	ret

00005dd6 <_ZN8CTimerC18SetCOMPAEj>:
}

void CTimerC1::SetCOMPA(uint16_t value)
{
	TCC1.CCA = value;
    5dd6:	60 93 68 08 	sts	0x0868, r22
    5dda:	70 93 69 08 	sts	0x0869, r23
    5dde:	08 95       	ret

00005de0 <_ZN8CTimerC18SetCOMPBEj>:
}

void CTimerC1::SetCOMPB(uint16_t value)
{
	TCC1.CCB = value;
    5de0:	60 93 6a 08 	sts	0x086A, r22
    5de4:	70 93 6b 08 	sts	0x086B, r23
    5de8:	08 95       	ret

00005dea <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC1::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    5dea:	61 15       	cp	r22, r1
    5dec:	71 05       	cpc	r23, r1
    5dee:	31 f0       	breq	.+12     	; 0x5dfc <_ZN8CTimerC114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
	TCC1.INTCTRLA = (TCC1.INTCTRLA & TC1_OVFINTLVL_gm) | intlvl;
    5df0:	e0 e4       	ldi	r30, 0x40	; 64
    5df2:	f8 e0       	ldi	r31, 0x08	; 8
    5df4:	86 81       	ldd	r24, Z+6	; 0x06
    5df6:	83 70       	andi	r24, 0x03	; 3
    5df8:	28 2b       	or	r18, r24
    5dfa:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC1_OVF_vect_num] = func;
    5dfc:	60 93 ec 22 	sts	0x22EC, r22
    5e00:	70 93 ed 22 	sts	0x22ED, r23
	InterruptSenderTable[TCC1_OVF_vect_num] = owner;
    5e04:	40 93 e2 23 	sts	0x23E2, r20
    5e08:	50 93 e3 23 	sts	0x23E3, r21
    5e0c:	08 95       	ret

00005e0e <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC1::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    5e0e:	61 15       	cp	r22, r1
    5e10:	71 05       	cpc	r23, r1
    5e12:	31 f0       	breq	.+12     	; 0x5e20 <_ZN8CTimerC114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
	TCC1.INTCTRLA = (TCC1.INTCTRLA & TC1_ERRINTLVL_gm) | intlvl;
    5e14:	e0 e4       	ldi	r30, 0x40	; 64
    5e16:	f8 e0       	ldi	r31, 0x08	; 8
    5e18:	86 81       	ldd	r24, Z+6	; 0x06
    5e1a:	8c 70       	andi	r24, 0x0C	; 12
    5e1c:	28 2b       	or	r18, r24
    5e1e:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC1_ERR_vect_num] = func;
    5e20:	60 93 ee 22 	sts	0x22EE, r22
    5e24:	70 93 ef 22 	sts	0x22EF, r23
	InterruptSenderTable[TCC1_ERR_vect_num] = owner;
    5e28:	40 93 e4 23 	sts	0x23E4, r20
    5e2c:	50 93 e5 23 	sts	0x23E5, r21
    5e30:	08 95       	ret

00005e32 <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC1::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    5e32:	61 15       	cp	r22, r1
    5e34:	71 05       	cpc	r23, r1
    5e36:	31 f0       	breq	.+12     	; 0x5e44 <_ZN8CTimerC116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
	TCC1.INTCTRLB = (TCC1.INTCTRLB & TC1_CCAINTLVL_gm) | intlvl;
    5e38:	e0 e4       	ldi	r30, 0x40	; 64
    5e3a:	f8 e0       	ldi	r31, 0x08	; 8
    5e3c:	87 81       	ldd	r24, Z+7	; 0x07
    5e3e:	83 70       	andi	r24, 0x03	; 3
    5e40:	28 2b       	or	r18, r24
    5e42:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC1_CCA_vect_num] = func;
    5e44:	60 93 f0 22 	sts	0x22F0, r22
    5e48:	70 93 f1 22 	sts	0x22F1, r23
	InterruptSenderTable[TCC1_CCA_vect_num] = owner;
    5e4c:	40 93 e6 23 	sts	0x23E6, r20
    5e50:	50 93 e7 23 	sts	0x23E7, r21
    5e54:	08 95       	ret

00005e56 <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC1::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    5e56:	61 15       	cp	r22, r1
    5e58:	71 05       	cpc	r23, r1
    5e5a:	31 f0       	breq	.+12     	; 0x5e68 <_ZN8CTimerC116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
	TCC1.INTCTRLB = (TCC1.INTCTRLB & TC1_CCBINTLVL_gm) | intlvl;
    5e5c:	e0 e4       	ldi	r30, 0x40	; 64
    5e5e:	f8 e0       	ldi	r31, 0x08	; 8
    5e60:	87 81       	ldd	r24, Z+7	; 0x07
    5e62:	8c 70       	andi	r24, 0x0C	; 12
    5e64:	28 2b       	or	r18, r24
    5e66:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC1_CCB_vect_num] = func;
    5e68:	60 93 f2 22 	sts	0x22F2, r22
    5e6c:	70 93 f3 22 	sts	0x22F3, r23
	InterruptSenderTable[TCC1_CCB_vect_num] = owner;
    5e70:	40 93 e8 23 	sts	0x23E8, r20
    5e74:	50 93 e9 23 	sts	0x23E9, r21
    5e78:	08 95       	ret

00005e7a <_ZN8CTimerC1C1Ev>:

#include "CTimerC1.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerC1::CTimerC1()
    5e7a:	cf 93       	push	r28
    5e7c:	df 93       	push	r29
    5e7e:	ec 01       	movw	r28, r24
    5e80:	0e 94 66 12 	call	0x24cc	; 0x24cc <_ZN7CTimer1C1Ev>
    5e84:	88 e3       	ldi	r24, 0x38	; 56
    5e86:	92 e2       	ldi	r25, 0x22	; 34
    5e88:	88 83       	st	Y, r24
    5e8a:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC1
    5e8c:	df 91       	pop	r29
    5e8e:	cf 91       	pop	r28
    5e90:	08 95       	ret

00005e92 <_ZN8CTimerC1D1Ev>:

// default destructor
CTimerC1::~CTimerC1()
    5e92:	28 e3       	ldi	r18, 0x38	; 56
    5e94:	32 e2       	ldi	r19, 0x22	; 34
    5e96:	fc 01       	movw	r30, r24
    5e98:	20 83       	st	Z, r18
    5e9a:	31 83       	std	Z+1, r19	; 0x01
    5e9c:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <_ZN7CTimer1D1Ev>
    5ea0:	08 95       	ret

00005ea2 <_ZN7CTimerD10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerD

// Basic timer functions
void CTimerD::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    5ea2:	fc 01       	movw	r30, r24
    5ea4:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5ea6:	e0 e0       	ldi	r30, 0x00	; 0
    5ea8:	f9 e0       	ldi	r31, 0x09	; 9
    5eaa:	80 81       	ld	r24, Z
    5eac:	80 7f       	andi	r24, 0xF0	; 240
    5eae:	80 83       	st	Z, r24
	
	// No events
	TCD0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    5eb0:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCD0.CNT = 0;
    5eb2:	10 a2       	std	Z+32, r1	; 0x20
    5eb4:	11 a2       	std	Z+33, r1	; 0x21
	TCD0.CCA = 0;
    5eb6:	10 a6       	std	Z+40, r1	; 0x28
    5eb8:	11 a6       	std	Z+41, r1	; 0x29
	TCD0.CCB = 0;
    5eba:	12 a6       	std	Z+42, r1	; 0x2a
    5ebc:	13 a6       	std	Z+43, r1	; 0x2b
	TCD0.CCC = 0;
    5ebe:	14 a6       	std	Z+44, r1	; 0x2c
    5ec0:	15 a6       	std	Z+45, r1	; 0x2d
	TCD0.CCD = 0;
    5ec2:	16 a6       	std	Z+46, r1	; 0x2e
    5ec4:	17 a6       	std	Z+47, r1	; 0x2f
	TCD0.PER = 0;
    5ec6:	16 a2       	std	Z+38, r1	; 0x26
    5ec8:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCD0.CTRLB = (TCD0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    5eca:	81 81       	ldd	r24, Z+1	; 0x01
    5ecc:	88 7f       	andi	r24, 0xF8	; 248
    5ece:	68 2b       	or	r22, r24
    5ed0:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCD0.CTRLA = (TCD0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCD0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    5ed2:	16 82       	std	Z+6, r1	; 0x06
	TCD0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    5ed4:	17 82       	std	Z+7, r1	; 0x07
    5ed6:	08 95       	ret

00005ed8 <_ZN7CTimerD5StartEj>:
}

void CTimerD::Start(uint16_t period)
{
	// Set period of timer
	TCD0.PER = period;
    5ed8:	e0 e0       	ldi	r30, 0x00	; 0
    5eda:	f9 e0       	ldi	r31, 0x09	; 9
    5edc:	66 a3       	std	Z+38, r22	; 0x26
    5ede:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    5ee0:	20 81       	ld	r18, Z
    5ee2:	20 7f       	andi	r18, 0xF0	; 240
    5ee4:	dc 01       	movw	r26, r24
    5ee6:	12 96       	adiw	r26, 0x02	; 2
    5ee8:	9c 91       	ld	r25, X
    5eea:	82 2f       	mov	r24, r18
    5eec:	89 2b       	or	r24, r25
    5eee:	80 83       	st	Z, r24
    5ef0:	08 95       	ret

00005ef2 <_ZN7CTimerD4StopEv>:
}

void CTimerD::Stop()
{
	// Stop timer
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    5ef2:	e0 e0       	ldi	r30, 0x00	; 0
    5ef4:	f9 e0       	ldi	r31, 0x09	; 9
    5ef6:	80 81       	ld	r24, Z
    5ef8:	80 7f       	andi	r24, 0xF0	; 240
    5efa:	80 83       	st	Z, r24
	TCD0.CNT = 0;
    5efc:	10 a2       	std	Z+32, r1	; 0x20
    5efe:	11 a2       	std	Z+33, r1	; 0x21
    5f00:	08 95       	ret

00005f02 <_ZN7CTimerD13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::EnableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB = (TCD0.CTRLB & ~0xF0) | channels;
    5f02:	e0 e0       	ldi	r30, 0x00	; 0
    5f04:	f9 e0       	ldi	r31, 0x09	; 9
    5f06:	81 81       	ldd	r24, Z+1	; 0x01
    5f08:	8f 70       	andi	r24, 0x0F	; 15
    5f0a:	68 2b       	or	r22, r24
    5f0c:	61 83       	std	Z+1, r22	; 0x01
    5f0e:	08 95       	ret

00005f10 <_ZN7CTimerD14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD::DisableChannel(TIMER_CHANNELS channels)
{
	TCD0.CTRLB &= ~channels;
    5f10:	e0 e0       	ldi	r30, 0x00	; 0
    5f12:	f9 e0       	ldi	r31, 0x09	; 9
    5f14:	81 81       	ldd	r24, Z+1	; 0x01
    5f16:	60 95       	com	r22
    5f18:	68 23       	and	r22, r24
    5f1a:	61 83       	std	Z+1, r22	; 0x01
    5f1c:	08 95       	ret

00005f1e <_ZN7CTimerD9SetPeriodEj>:
}

void CTimerD::SetPeriod(uint16_t value)
{
	TCD0.PER = value;
    5f1e:	60 93 26 09 	sts	0x0926, r22
    5f22:	70 93 27 09 	sts	0x0927, r23
    5f26:	08 95       	ret

00005f28 <_ZN7CTimerD8SetCOMPAEj>:
}

void CTimerD::SetCOMPA(uint16_t value)
{
	TCD0.CCA = value;
    5f28:	60 93 28 09 	sts	0x0928, r22
    5f2c:	70 93 29 09 	sts	0x0929, r23
    5f30:	08 95       	ret

00005f32 <_ZN7CTimerD8SetCOMPBEj>:
}

void CTimerD::SetCOMPB(uint16_t value)
{
	TCD0.CCB = value;
    5f32:	60 93 2a 09 	sts	0x092A, r22
    5f36:	70 93 2b 09 	sts	0x092B, r23
    5f3a:	08 95       	ret

00005f3c <_ZN7CTimerD8SetCOMPCEj>:
}

void CTimerD::SetCOMPC(uint16_t value)
{
	TCD0.CCC = value;
    5f3c:	60 93 2c 09 	sts	0x092C, r22
    5f40:	70 93 2d 09 	sts	0x092D, r23
    5f44:	08 95       	ret

00005f46 <_ZN7CTimerD8SetCOMPDEj>:
}

void CTimerD::SetCOMPD(uint16_t value)
{
	TCD0.CCD = value;
    5f46:	60 93 2e 09 	sts	0x092E, r22
    5f4a:	70 93 2f 09 	sts	0x092F, r23
    5f4e:	08 95       	ret

00005f50 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerD::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    5f50:	61 15       	cp	r22, r1
    5f52:	71 05       	cpc	r23, r1
    5f54:	31 f0       	breq	.+12     	; 0x5f62 <_ZN7CTimerD14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCD0.INTCTRLA = (TCD0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    5f56:	e0 e0       	ldi	r30, 0x00	; 0
    5f58:	f9 e0       	ldi	r31, 0x09	; 9
    5f5a:	86 81       	ldd	r24, Z+6	; 0x06
    5f5c:	83 70       	andi	r24, 0x03	; 3
    5f5e:	28 2b       	or	r18, r24
    5f60:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCD0_OVF_vect_num] = func;
    5f62:	60 93 5e 23 	sts	0x235E, r22
    5f66:	70 93 5f 23 	sts	0x235F, r23
	InterruptSenderTable[TCD0_OVF_vect_num] = owner;
    5f6a:	40 93 54 24 	sts	0x2454, r20
    5f6e:	50 93 55 24 	sts	0x2455, r21
    5f72:	08 95       	ret

00005f74 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerD::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    5f74:	61 15       	cp	r22, r1
    5f76:	71 05       	cpc	r23, r1
    5f78:	31 f0       	breq	.+12     	; 0x5f86 <_ZN7CTimerD14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCD0.INTCTRLA = (TCD0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    5f7a:	e0 e0       	ldi	r30, 0x00	; 0
    5f7c:	f9 e0       	ldi	r31, 0x09	; 9
    5f7e:	86 81       	ldd	r24, Z+6	; 0x06
    5f80:	8c 70       	andi	r24, 0x0C	; 12
    5f82:	28 2b       	or	r18, r24
    5f84:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD0_ERR_vect_num] = func;
    5f86:	60 93 60 23 	sts	0x2360, r22
    5f8a:	70 93 61 23 	sts	0x2361, r23
	InterruptSenderTable[TCD0_ERR_vect_num] = owner;
    5f8e:	40 93 56 24 	sts	0x2456, r20
    5f92:	50 93 57 24 	sts	0x2457, r21
    5f96:	08 95       	ret

00005f98 <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerD::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    5f98:	61 15       	cp	r22, r1
    5f9a:	71 05       	cpc	r23, r1
    5f9c:	31 f0       	breq	.+12     	; 0x5faa <_ZN7CTimerD16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCD0.INTCTRLB = (TCD0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    5f9e:	e0 e0       	ldi	r30, 0x00	; 0
    5fa0:	f9 e0       	ldi	r31, 0x09	; 9
    5fa2:	87 81       	ldd	r24, Z+7	; 0x07
    5fa4:	83 70       	andi	r24, 0x03	; 3
    5fa6:	28 2b       	or	r18, r24
    5fa8:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCA_vect_num] = func;
    5faa:	60 93 62 23 	sts	0x2362, r22
    5fae:	70 93 63 23 	sts	0x2363, r23
	InterruptSenderTable[TCD0_CCA_vect_num] = owner;
    5fb2:	40 93 58 24 	sts	0x2458, r20
    5fb6:	50 93 59 24 	sts	0x2459, r21
    5fba:	08 95       	ret

00005fbc <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerD::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    5fbc:	61 15       	cp	r22, r1
    5fbe:	71 05       	cpc	r23, r1
    5fc0:	31 f0       	breq	.+12     	; 0x5fce <_ZN7CTimerD16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCD0.INTCTRLB = (TCD0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    5fc2:	e0 e0       	ldi	r30, 0x00	; 0
    5fc4:	f9 e0       	ldi	r31, 0x09	; 9
    5fc6:	87 81       	ldd	r24, Z+7	; 0x07
    5fc8:	8c 70       	andi	r24, 0x0C	; 12
    5fca:	28 2b       	or	r18, r24
    5fcc:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD0_CCB_vect_num] = func;
    5fce:	60 93 64 23 	sts	0x2364, r22
    5fd2:	70 93 65 23 	sts	0x2365, r23
	InterruptSenderTable[TCD0_CCB_vect_num] = owner;
    5fd6:	40 93 5a 24 	sts	0x245A, r20
    5fda:	50 93 5b 24 	sts	0x245B, r21
    5fde:	08 95       	ret

00005fe0 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerD::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    5fe0:	61 15       	cp	r22, r1
    5fe2:	71 05       	cpc	r23, r1
    5fe4:	31 f0       	breq	.+12     	; 0x5ff2 <_ZN7CTimerD16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCD0.INTCTRLB = (TCD0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    5fe6:	e0 e0       	ldi	r30, 0x00	; 0
    5fe8:	f9 e0       	ldi	r31, 0x09	; 9
    5fea:	87 81       	ldd	r24, Z+7	; 0x07
    5fec:	80 73       	andi	r24, 0x30	; 48
    5fee:	28 2b       	or	r18, r24
    5ff0:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCC_vect_num] = func;
    5ff2:	60 93 66 23 	sts	0x2366, r22
    5ff6:	70 93 67 23 	sts	0x2367, r23
	InterruptSenderTable[TCD0_CCC_vect_num] = owner;
    5ffa:	40 93 5c 24 	sts	0x245C, r20
    5ffe:	50 93 5d 24 	sts	0x245D, r21
    6002:	08 95       	ret

00006004 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerD::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    6004:	61 15       	cp	r22, r1
    6006:	71 05       	cpc	r23, r1
    6008:	31 f0       	breq	.+12     	; 0x6016 <_ZN7CTimerD16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCD0.INTCTRLB = (TCD0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    600a:	e0 e0       	ldi	r30, 0x00	; 0
    600c:	f9 e0       	ldi	r31, 0x09	; 9
    600e:	87 81       	ldd	r24, Z+7	; 0x07
    6010:	80 7c       	andi	r24, 0xC0	; 192
    6012:	28 2b       	or	r18, r24
    6014:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCD0_CCD_vect_num] = func;
    6016:	60 93 68 23 	sts	0x2368, r22
    601a:	70 93 69 23 	sts	0x2369, r23
	InterruptSenderTable[TCD0_CCD_vect_num] = owner;
    601e:	40 93 5e 24 	sts	0x245E, r20
    6022:	50 93 5f 24 	sts	0x245F, r21
    6026:	08 95       	ret

00006028 <_ZN7CTimerDC1Ev>:

#include "CTimerD.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerD::CTimerD()
    6028:	cf 93       	push	r28
    602a:	df 93       	push	r29
    602c:	ec 01       	movw	r28, r24
    602e:	0e 94 5f 12 	call	0x24be	; 0x24be <_ZN6CTimerC1Ev>
    6032:	86 e5       	ldi	r24, 0x56	; 86
    6034:	92 e2       	ldi	r25, 0x22	; 34
    6036:	88 83       	st	Y, r24
    6038:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerD
    603a:	df 91       	pop	r29
    603c:	cf 91       	pop	r28
    603e:	08 95       	ret

00006040 <_ZN7CTimerDD1Ev>:

// default destructor
CTimerD::~CTimerD()
    6040:	26 e5       	ldi	r18, 0x56	; 86
    6042:	32 e2       	ldi	r19, 0x22	; 34
    6044:	fc 01       	movw	r30, r24
    6046:	20 83       	st	Z, r18
    6048:	31 83       	std	Z+1, r19	; 0x01
    604a:	0e 94 65 12 	call	0x24ca	; 0x24ca <_ZN6CTimerD1Ev>
    604e:	08 95       	ret

00006050 <_ZN8CTimerD110InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerD1

// Basic timer functions
void CTimerD1::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    6050:	fc 01       	movw	r30, r24
    6052:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    6054:	e0 e4       	ldi	r30, 0x40	; 64
    6056:	f9 e0       	ldi	r31, 0x09	; 9
    6058:	80 81       	ld	r24, Z
    605a:	80 7f       	andi	r24, 0xF0	; 240
    605c:	80 83       	st	Z, r24
	
	// No events
	TCD1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    605e:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCD1.CNT = 0;
    6060:	10 a2       	std	Z+32, r1	; 0x20
    6062:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CCA = 0;
    6064:	10 a6       	std	Z+40, r1	; 0x28
    6066:	11 a6       	std	Z+41, r1	; 0x29
	TCD1.CCB = 0;
    6068:	12 a6       	std	Z+42, r1	; 0x2a
    606a:	13 a6       	std	Z+43, r1	; 0x2b
	TCD1.PER = 0;
    606c:	16 a2       	std	Z+38, r1	; 0x26
    606e:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCD1.CTRLB = (TCD1.CTRLB & ~TC1_WGMODE_gm) | wgm;
    6070:	81 81       	ldd	r24, Z+1	; 0x01
    6072:	88 7f       	andi	r24, 0xF8	; 248
    6074:	68 2b       	or	r22, r24
    6076:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCD1.CTRLA = (TCD1.CTRLA & TC1_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCD1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    6078:	16 82       	std	Z+6, r1	; 0x06
	TCD1.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    607a:	17 82       	std	Z+7, r1	; 0x07
    607c:	08 95       	ret

0000607e <_ZN8CTimerD15StartEj>:
}

void CTimerD1::Start(uint16_t period)
{
	// Set period of timer
	TCD1.PER = period;
    607e:	e0 e4       	ldi	r30, 0x40	; 64
    6080:	f9 e0       	ldi	r31, 0x09	; 9
    6082:	66 a3       	std	Z+38, r22	; 0x26
    6084:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | clockSrc;
    6086:	20 81       	ld	r18, Z
    6088:	20 7f       	andi	r18, 0xF0	; 240
    608a:	dc 01       	movw	r26, r24
    608c:	12 96       	adiw	r26, 0x02	; 2
    608e:	9c 91       	ld	r25, X
    6090:	82 2f       	mov	r24, r18
    6092:	89 2b       	or	r24, r25
    6094:	80 83       	st	Z, r24
    6096:	08 95       	ret

00006098 <_ZN8CTimerD14StopEv>:
}

void CTimerD1::Stop()
{
	// Stop timer
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    6098:	e0 e4       	ldi	r30, 0x40	; 64
    609a:	f9 e0       	ldi	r31, 0x09	; 9
    609c:	80 81       	ld	r24, Z
    609e:	80 7f       	andi	r24, 0xF0	; 240
    60a0:	80 83       	st	Z, r24
	TCD1.CNT = 0;
    60a2:	10 a2       	std	Z+32, r1	; 0x20
    60a4:	11 a2       	std	Z+33, r1	; 0x21
    60a6:	08 95       	ret

000060a8 <_ZN8CTimerD15ResetEv>:
}

void CTimerD1::Reset()
{
	// Stop timer
	uint16_t tmp = TCD1.CTRLA;
    60a8:	e0 e4       	ldi	r30, 0x40	; 64
    60aa:	f9 e0       	ldi	r31, 0x09	; 9
    60ac:	90 81       	ld	r25, Z
	TCD1.CTRLA = (TCD1.CTRLA & ~TC1_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    60ae:	80 81       	ld	r24, Z
    60b0:	80 7f       	andi	r24, 0xF0	; 240
    60b2:	80 83       	st	Z, r24
	TCD1.CNT = 0;
    60b4:	10 a2       	std	Z+32, r1	; 0x20
    60b6:	11 a2       	std	Z+33, r1	; 0x21
	TCD1.CTRLA = tmp;
    60b8:	90 83       	st	Z, r25
    60ba:	08 95       	ret

000060bc <_ZN8CTimerD113EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD1::EnableChannel(TIMER_CHANNELS channels)
{
	TCD1.CTRLB = (TCD1.CTRLB & ~0xF0) | channels;
    60bc:	e0 e4       	ldi	r30, 0x40	; 64
    60be:	f9 e0       	ldi	r31, 0x09	; 9
    60c0:	81 81       	ldd	r24, Z+1	; 0x01
    60c2:	8f 70       	andi	r24, 0x0F	; 15
    60c4:	68 2b       	or	r22, r24
    60c6:	61 83       	std	Z+1, r22	; 0x01
    60c8:	08 95       	ret

000060ca <_ZN8CTimerD114DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerD1::DisableChannel(TIMER_CHANNELS channels)
{
	TCD1.CTRLB &= ~channels;
    60ca:	e0 e4       	ldi	r30, 0x40	; 64
    60cc:	f9 e0       	ldi	r31, 0x09	; 9
    60ce:	81 81       	ldd	r24, Z+1	; 0x01
    60d0:	60 95       	com	r22
    60d2:	68 23       	and	r22, r24
    60d4:	61 83       	std	Z+1, r22	; 0x01
    60d6:	08 95       	ret

000060d8 <_ZN8CTimerD19SetPeriodEj>:
}

void CTimerD1::SetPeriod(uint16_t value)
{
	TCD1.PER = value;
    60d8:	60 93 66 09 	sts	0x0966, r22
    60dc:	70 93 67 09 	sts	0x0967, r23
    60e0:	08 95       	ret

000060e2 <_ZN8CTimerD18SetCOMPAEj>:
}

void CTimerD1::SetCOMPA(uint16_t value)
{
	TCD1.CCA = value;
    60e2:	60 93 68 09 	sts	0x0968, r22
    60e6:	70 93 69 09 	sts	0x0969, r23
    60ea:	08 95       	ret

000060ec <_ZN8CTimerD18SetCOMPBEj>:
}

void CTimerD1::SetCOMPB(uint16_t value)
{
	TCD1.CCB = value;
    60ec:	60 93 6a 09 	sts	0x096A, r22
    60f0:	70 93 6b 09 	sts	0x096B, r23
    60f4:	08 95       	ret

000060f6 <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerD1::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    60f6:	61 15       	cp	r22, r1
    60f8:	71 05       	cpc	r23, r1
    60fa:	31 f0       	breq	.+12     	; 0x6108 <_ZN8CTimerD114SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
	TCD1.INTCTRLA = (TCD1.INTCTRLA & TC1_OVFINTLVL_gm) | intlvl;
    60fc:	e0 e4       	ldi	r30, 0x40	; 64
    60fe:	f9 e0       	ldi	r31, 0x09	; 9
    6100:	86 81       	ldd	r24, Z+6	; 0x06
    6102:	83 70       	andi	r24, 0x03	; 3
    6104:	28 2b       	or	r18, r24
    6106:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD1_OVF_vect_num] = func;
    6108:	60 93 6a 23 	sts	0x236A, r22
    610c:	70 93 6b 23 	sts	0x236B, r23
	InterruptSenderTable[TCD1_OVF_vect_num] = owner;
    6110:	40 93 60 24 	sts	0x2460, r20
    6114:	50 93 61 24 	sts	0x2461, r21
    6118:	08 95       	ret

0000611a <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerD1::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    611a:	61 15       	cp	r22, r1
    611c:	71 05       	cpc	r23, r1
    611e:	31 f0       	breq	.+12     	; 0x612c <_ZN8CTimerD114SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
	TCD1.INTCTRLA = (TCD1.INTCTRLA & TC1_ERRINTLVL_gm) | intlvl;
    6120:	e0 e4       	ldi	r30, 0x40	; 64
    6122:	f9 e0       	ldi	r31, 0x09	; 9
    6124:	86 81       	ldd	r24, Z+6	; 0x06
    6126:	8c 70       	andi	r24, 0x0C	; 12
    6128:	28 2b       	or	r18, r24
    612a:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCD1_ERR_vect_num] = func;
    612c:	60 93 6c 23 	sts	0x236C, r22
    6130:	70 93 6d 23 	sts	0x236D, r23
	InterruptSenderTable[TCD1_ERR_vect_num] = owner;
    6134:	40 93 62 24 	sts	0x2462, r20
    6138:	50 93 63 24 	sts	0x2463, r21
    613c:	08 95       	ret

0000613e <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerD1::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    613e:	61 15       	cp	r22, r1
    6140:	71 05       	cpc	r23, r1
    6142:	31 f0       	breq	.+12     	; 0x6150 <_ZN8CTimerD116SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
	TCD1.INTCTRLB = (TCD1.INTCTRLB & TC1_CCAINTLVL_gm) | intlvl;
    6144:	e0 e4       	ldi	r30, 0x40	; 64
    6146:	f9 e0       	ldi	r31, 0x09	; 9
    6148:	87 81       	ldd	r24, Z+7	; 0x07
    614a:	83 70       	andi	r24, 0x03	; 3
    614c:	28 2b       	or	r18, r24
    614e:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD1_CCA_vect_num] = func;
    6150:	60 93 6e 23 	sts	0x236E, r22
    6154:	70 93 6f 23 	sts	0x236F, r23
	InterruptSenderTable[TCD1_CCA_vect_num] = owner;
    6158:	40 93 64 24 	sts	0x2464, r20
    615c:	50 93 65 24 	sts	0x2465, r21
    6160:	08 95       	ret

00006162 <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerD1::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    6162:	61 15       	cp	r22, r1
    6164:	71 05       	cpc	r23, r1
    6166:	31 f0       	breq	.+12     	; 0x6174 <_ZN8CTimerD116SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
	TCD1.INTCTRLB = (TCD1.INTCTRLB & TC1_CCBINTLVL_gm) | intlvl;
    6168:	e0 e4       	ldi	r30, 0x40	; 64
    616a:	f9 e0       	ldi	r31, 0x09	; 9
    616c:	87 81       	ldd	r24, Z+7	; 0x07
    616e:	8c 70       	andi	r24, 0x0C	; 12
    6170:	28 2b       	or	r18, r24
    6172:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCD1_CCB_vect_num] = func;
    6174:	60 93 70 23 	sts	0x2370, r22
    6178:	70 93 71 23 	sts	0x2371, r23
	InterruptSenderTable[TCD1_CCB_vect_num] = owner;
    617c:	40 93 66 24 	sts	0x2466, r20
    6180:	50 93 67 24 	sts	0x2467, r21
    6184:	08 95       	ret

00006186 <_ZN8CTimerD1C1Ev>:

#include "CTimerD1.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerD1::CTimerD1()
    6186:	cf 93       	push	r28
    6188:	df 93       	push	r29
    618a:	ec 01       	movw	r28, r24
    618c:	0e 94 66 12 	call	0x24cc	; 0x24cc <_ZN7CTimer1C1Ev>
    6190:	8a e7       	ldi	r24, 0x7A	; 122
    6192:	92 e2       	ldi	r25, 0x22	; 34
    6194:	88 83       	st	Y, r24
    6196:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerD1
    6198:	df 91       	pop	r29
    619a:	cf 91       	pop	r28
    619c:	08 95       	ret

0000619e <_ZN8CTimerD1D1Ev>:

// default destructor
CTimerD1::~CTimerD1()
    619e:	2a e7       	ldi	r18, 0x7A	; 122
    61a0:	32 e2       	ldi	r19, 0x22	; 34
    61a2:	fc 01       	movw	r30, r24
    61a4:	20 83       	st	Z, r18
    61a6:	31 83       	std	Z+1, r19	; 0x01
    61a8:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <_ZN7CTimer1D1Ev>
    61ac:	08 95       	ret

000061ae <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerF::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    61ae:	fc 01       	movw	r30, r24
    61b0:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    61b2:	e0 e0       	ldi	r30, 0x00	; 0
    61b4:	fb e0       	ldi	r31, 0x0B	; 11
    61b6:	80 81       	ld	r24, Z
    61b8:	80 7f       	andi	r24, 0xF0	; 240
    61ba:	80 83       	st	Z, r24
	
	// No events
	TCF0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    61bc:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCF0.CNT = 0;
    61be:	10 a2       	std	Z+32, r1	; 0x20
    61c0:	11 a2       	std	Z+33, r1	; 0x21
	TCF0.CCA = 0;
    61c2:	10 a6       	std	Z+40, r1	; 0x28
    61c4:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB = 0;
    61c6:	12 a6       	std	Z+42, r1	; 0x2a
    61c8:	13 a6       	std	Z+43, r1	; 0x2b
	TCF0.CCC = 0;
    61ca:	14 a6       	std	Z+44, r1	; 0x2c
    61cc:	15 a6       	std	Z+45, r1	; 0x2d
	TCF0.CCD = 0;
    61ce:	16 a6       	std	Z+46, r1	; 0x2e
    61d0:	17 a6       	std	Z+47, r1	; 0x2f
	TCF0.PER = 0;
    61d2:	16 a2       	std	Z+38, r1	; 0x26
    61d4:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCF0.CTRLB = (TCF0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    61d6:	81 81       	ldd	r24, Z+1	; 0x01
    61d8:	88 7f       	andi	r24, 0xF8	; 248
    61da:	68 2b       	or	r22, r24
    61dc:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCF0.CTRLA = (TCF0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCF0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    61de:	16 82       	std	Z+6, r1	; 0x06
	TCF0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    61e0:	17 82       	std	Z+7, r1	; 0x07
    61e2:	08 95       	ret

000061e4 <_ZN7CTimerF5StartEj>:
}

void CTimerF::Start(uint16_t period)
{
	// Set period of timer
	TCF0.PER = period;
    61e4:	e0 e0       	ldi	r30, 0x00	; 0
    61e6:	fb e0       	ldi	r31, 0x0B	; 11
    61e8:	66 a3       	std	Z+38, r22	; 0x26
    61ea:	77 a3       	std	Z+39, r23	; 0x27
	//TCF0.CNT = 0;
	
	// Start timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    61ec:	20 81       	ld	r18, Z
    61ee:	20 7f       	andi	r18, 0xF0	; 240
    61f0:	dc 01       	movw	r26, r24
    61f2:	12 96       	adiw	r26, 0x02	; 2
    61f4:	9c 91       	ld	r25, X
    61f6:	82 2f       	mov	r24, r18
    61f8:	89 2b       	or	r24, r25
    61fa:	80 83       	st	Z, r24
    61fc:	08 95       	ret

000061fe <_ZN7CTimerF4StopEv>:
}

void CTimerF::Stop()
{
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    61fe:	e0 e0       	ldi	r30, 0x00	; 0
    6200:	fb e0       	ldi	r31, 0x0B	; 11
    6202:	80 81       	ld	r24, Z
    6204:	80 7f       	andi	r24, 0xF0	; 240
    6206:	80 83       	st	Z, r24
	TCF0.CNT = 0;
    6208:	10 a2       	std	Z+32, r1	; 0x20
    620a:	11 a2       	std	Z+33, r1	; 0x21
    620c:	08 95       	ret

0000620e <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::EnableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB |= channels;
    620e:	e0 e0       	ldi	r30, 0x00	; 0
    6210:	fb e0       	ldi	r31, 0x0B	; 11
    6212:	81 81       	ldd	r24, Z+1	; 0x01
    6214:	68 2b       	or	r22, r24
    6216:	61 83       	std	Z+1, r22	; 0x01
    6218:	08 95       	ret

0000621a <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::DisableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB &= ~channels;
    621a:	e0 e0       	ldi	r30, 0x00	; 0
    621c:	fb e0       	ldi	r31, 0x0B	; 11
    621e:	81 81       	ldd	r24, Z+1	; 0x01
    6220:	60 95       	com	r22
    6222:	68 23       	and	r22, r24
    6224:	61 83       	std	Z+1, r22	; 0x01
    6226:	08 95       	ret

00006228 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelSet(TIMER_CHANNELS channels)
{
	TCF0.CTRLC |= (channels >> 4);
    6228:	e0 e0       	ldi	r30, 0x00	; 0
    622a:	fb e0       	ldi	r31, 0x0B	; 11
    622c:	82 81       	ldd	r24, Z+2	; 0x02
    622e:	62 95       	swap	r22
    6230:	6f 70       	andi	r22, 0x0F	; 15
    6232:	68 2b       	or	r22, r24
    6234:	62 83       	std	Z+2, r22	; 0x02
    6236:	08 95       	ret

00006238 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelReset(TIMER_CHANNELS channels)
{
	TCF0.CTRLC &= ~(channels >> 4);
    6238:	e0 e0       	ldi	r30, 0x00	; 0
    623a:	fb e0       	ldi	r31, 0x0B	; 11
    623c:	82 81       	ldd	r24, Z+2	; 0x02
    623e:	62 95       	swap	r22
    6240:	6f 70       	andi	r22, 0x0F	; 15
    6242:	60 95       	com	r22
    6244:	68 23       	and	r22, r24
    6246:	62 83       	std	Z+2, r22	; 0x02
    6248:	08 95       	ret

0000624a <_ZN7CTimerF9SetPeriodEj>:
}

void CTimerF::SetPeriod(uint16_t value)
{
	TCF0.PER = value;
    624a:	60 93 26 0b 	sts	0x0B26, r22
    624e:	70 93 27 0b 	sts	0x0B27, r23
    6252:	08 95       	ret

00006254 <_ZN7CTimerF8SetCOMPAEj>:
}

void CTimerF::SetCOMPA(uint16_t value)
{
	TCF0.CCA = value;
    6254:	60 93 28 0b 	sts	0x0B28, r22
    6258:	70 93 29 0b 	sts	0x0B29, r23
    625c:	08 95       	ret

0000625e <_ZN7CTimerF8SetCOMPBEj>:
}

void CTimerF::SetCOMPB(uint16_t value)
{
	TCF0.CCB = value;
    625e:	60 93 2a 0b 	sts	0x0B2A, r22
    6262:	70 93 2b 0b 	sts	0x0B2B, r23
    6266:	08 95       	ret

00006268 <_ZN7CTimerF8SetCOMPCEj>:
}

void CTimerF::SetCOMPC(uint16_t value)
{
	TCF0.CCC = value;
    6268:	60 93 2c 0b 	sts	0x0B2C, r22
    626c:	70 93 2d 0b 	sts	0x0B2D, r23
    6270:	08 95       	ret

00006272 <_ZN7CTimerF8SetCOMPDEj>:
}

void CTimerF::SetCOMPD(uint16_t value)
{
	TCF0.CCD = value;
    6272:	60 93 2e 0b 	sts	0x0B2E, r22
    6276:	70 93 2f 0b 	sts	0x0B2F, r23
    627a:	08 95       	ret

0000627c <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerF::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    627c:	61 15       	cp	r22, r1
    627e:	71 05       	cpc	r23, r1
    6280:	31 f0       	breq	.+12     	; 0x628e <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCF0.INTCTRLA = (TCF0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    6282:	e0 e0       	ldi	r30, 0x00	; 0
    6284:	fb e0       	ldi	r31, 0x0B	; 11
    6286:	86 81       	ldd	r24, Z+6	; 0x06
    6288:	83 70       	andi	r24, 0x03	; 3
    628a:	28 2b       	or	r18, r24
    628c:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_OVF_vect_num] = func;
    628e:	60 93 9c 23 	sts	0x239C, r22
    6292:	70 93 9d 23 	sts	0x239D, r23
	InterruptSenderTable[TCF0_OVF_vect_num] = owner;
    6296:	40 93 92 24 	sts	0x2492, r20
    629a:	50 93 93 24 	sts	0x2493, r21
    629e:	08 95       	ret

000062a0 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerF::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    62a0:	61 15       	cp	r22, r1
    62a2:	71 05       	cpc	r23, r1
    62a4:	31 f0       	breq	.+12     	; 0x62b2 <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCF0.INTCTRLA = (TCF0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    62a6:	e0 e0       	ldi	r30, 0x00	; 0
    62a8:	fb e0       	ldi	r31, 0x0B	; 11
    62aa:	86 81       	ldd	r24, Z+6	; 0x06
    62ac:	8c 70       	andi	r24, 0x0C	; 12
    62ae:	28 2b       	or	r18, r24
    62b0:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_ERR_vect_num] = func;
    62b2:	60 93 9e 23 	sts	0x239E, r22
    62b6:	70 93 9f 23 	sts	0x239F, r23
	InterruptSenderTable[TCF0_ERR_vect_num] = owner;
    62ba:	40 93 94 24 	sts	0x2494, r20
    62be:	50 93 95 24 	sts	0x2495, r21
    62c2:	08 95       	ret

000062c4 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerF::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    62c4:	61 15       	cp	r22, r1
    62c6:	71 05       	cpc	r23, r1
    62c8:	31 f0       	breq	.+12     	; 0x62d6 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    62ca:	e0 e0       	ldi	r30, 0x00	; 0
    62cc:	fb e0       	ldi	r31, 0x0B	; 11
    62ce:	87 81       	ldd	r24, Z+7	; 0x07
    62d0:	83 70       	andi	r24, 0x03	; 3
    62d2:	28 2b       	or	r18, r24
    62d4:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCA_vect_num] = func;
    62d6:	60 93 a0 23 	sts	0x23A0, r22
    62da:	70 93 a1 23 	sts	0x23A1, r23
	InterruptSenderTable[TCF0_CCA_vect_num] = owner;
    62de:	40 93 96 24 	sts	0x2496, r20
    62e2:	50 93 97 24 	sts	0x2497, r21
    62e6:	08 95       	ret

000062e8 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerF::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    62e8:	61 15       	cp	r22, r1
    62ea:	71 05       	cpc	r23, r1
    62ec:	31 f0       	breq	.+12     	; 0x62fa <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    62ee:	e0 e0       	ldi	r30, 0x00	; 0
    62f0:	fb e0       	ldi	r31, 0x0B	; 11
    62f2:	87 81       	ldd	r24, Z+7	; 0x07
    62f4:	8c 70       	andi	r24, 0x0C	; 12
    62f6:	28 2b       	or	r18, r24
    62f8:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCB_vect_num] = func;
    62fa:	60 93 a2 23 	sts	0x23A2, r22
    62fe:	70 93 a3 23 	sts	0x23A3, r23
	InterruptSenderTable[TCF0_CCB_vect_num] = owner;
    6302:	40 93 98 24 	sts	0x2498, r20
    6306:	50 93 99 24 	sts	0x2499, r21
    630a:	08 95       	ret

0000630c <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerF::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    630c:	61 15       	cp	r22, r1
    630e:	71 05       	cpc	r23, r1
    6310:	31 f0       	breq	.+12     	; 0x631e <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    6312:	e0 e0       	ldi	r30, 0x00	; 0
    6314:	fb e0       	ldi	r31, 0x0B	; 11
    6316:	87 81       	ldd	r24, Z+7	; 0x07
    6318:	80 73       	andi	r24, 0x30	; 48
    631a:	28 2b       	or	r18, r24
    631c:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCC_vect_num] = func;
    631e:	60 93 a4 23 	sts	0x23A4, r22
    6322:	70 93 a5 23 	sts	0x23A5, r23
	InterruptSenderTable[TCF0_CCC_vect_num] = owner;
    6326:	40 93 9a 24 	sts	0x249A, r20
    632a:	50 93 9b 24 	sts	0x249B, r21
    632e:	08 95       	ret

00006330 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerF::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    6330:	61 15       	cp	r22, r1
    6332:	71 05       	cpc	r23, r1
    6334:	31 f0       	breq	.+12     	; 0x6342 <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    6336:	e0 e0       	ldi	r30, 0x00	; 0
    6338:	fb e0       	ldi	r31, 0x0B	; 11
    633a:	87 81       	ldd	r24, Z+7	; 0x07
    633c:	80 7c       	andi	r24, 0xC0	; 192
    633e:	28 2b       	or	r18, r24
    6340:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCD_vect_num] = func;
    6342:	60 93 a6 23 	sts	0x23A6, r22
    6346:	70 93 a7 23 	sts	0x23A7, r23
	InterruptSenderTable[TCF0_CCD_vect_num] = owner;
    634a:	40 93 9c 24 	sts	0x249C, r20
    634e:	50 93 9d 24 	sts	0x249D, r21
    6352:	08 95       	ret

00006354 <_ZN7CTimerFC1Ev>:

#include "CTimerF.h"
#include "../LaserLib/intx128.h"

// default constructor
CTimerF::CTimerF()
    6354:	cf 93       	push	r28
    6356:	df 93       	push	r29
    6358:	ec 01       	movw	r28, r24
    635a:	0e 94 5f 12 	call	0x24be	; 0x24be <_ZN6CTimerC1Ev>
    635e:	88 e9       	ldi	r24, 0x98	; 152
    6360:	92 e2       	ldi	r25, 0x22	; 34
    6362:	88 83       	st	Y, r24
    6364:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    6366:	df 91       	pop	r29
    6368:	cf 91       	pop	r28
    636a:	08 95       	ret

0000636c <_ZN7CTimerFD1Ev>:

// default destructor
CTimerF::~CTimerF()
    636c:	28 e9       	ldi	r18, 0x98	; 152
    636e:	32 e2       	ldi	r19, 0x22	; 34
    6370:	fc 01       	movw	r30, r24
    6372:	20 83       	st	Z, r18
    6374:	31 83       	std	Z+1, r19	; 0x01
    6376:	0e 94 65 12 	call	0x24ca	; 0x24ca <_ZN6CTimerD1Ev>
    637a:	08 95       	ret

0000637c <__fixsfsi>:
    637c:	0e 94 c5 31 	call	0x638a	; 0x638a <__fixunssfsi>
    6380:	68 94       	set
    6382:	b1 11       	cpse	r27, r1
    6384:	0c 94 54 32 	jmp	0x64a8	; 0x64a8 <__fp_szero>
    6388:	08 95       	ret

0000638a <__fixunssfsi>:
    638a:	0e 94 39 32 	call	0x6472	; 0x6472 <__fp_splitA>
    638e:	88 f0       	brcs	.+34     	; 0x63b2 <__fixunssfsi+0x28>
    6390:	9f 57       	subi	r25, 0x7F	; 127
    6392:	98 f0       	brcs	.+38     	; 0x63ba <__fixunssfsi+0x30>
    6394:	b9 2f       	mov	r27, r25
    6396:	99 27       	eor	r25, r25
    6398:	b7 51       	subi	r27, 0x17	; 23
    639a:	b0 f0       	brcs	.+44     	; 0x63c8 <__fixunssfsi+0x3e>
    639c:	e1 f0       	breq	.+56     	; 0x63d6 <__fixunssfsi+0x4c>
    639e:	66 0f       	add	r22, r22
    63a0:	77 1f       	adc	r23, r23
    63a2:	88 1f       	adc	r24, r24
    63a4:	99 1f       	adc	r25, r25
    63a6:	1a f0       	brmi	.+6      	; 0x63ae <__fixunssfsi+0x24>
    63a8:	ba 95       	dec	r27
    63aa:	c9 f7       	brne	.-14     	; 0x639e <__fixunssfsi+0x14>
    63ac:	14 c0       	rjmp	.+40     	; 0x63d6 <__fixunssfsi+0x4c>
    63ae:	b1 30       	cpi	r27, 0x01	; 1
    63b0:	91 f0       	breq	.+36     	; 0x63d6 <__fixunssfsi+0x4c>
    63b2:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__fp_zero>
    63b6:	b1 e0       	ldi	r27, 0x01	; 1
    63b8:	08 95       	ret
    63ba:	0c 94 53 32 	jmp	0x64a6	; 0x64a6 <__fp_zero>
    63be:	67 2f       	mov	r22, r23
    63c0:	78 2f       	mov	r23, r24
    63c2:	88 27       	eor	r24, r24
    63c4:	b8 5f       	subi	r27, 0xF8	; 248
    63c6:	39 f0       	breq	.+14     	; 0x63d6 <__fixunssfsi+0x4c>
    63c8:	b9 3f       	cpi	r27, 0xF9	; 249
    63ca:	cc f3       	brlt	.-14     	; 0x63be <__fixunssfsi+0x34>
    63cc:	86 95       	lsr	r24
    63ce:	77 95       	ror	r23
    63d0:	67 95       	ror	r22
    63d2:	b3 95       	inc	r27
    63d4:	d9 f7       	brne	.-10     	; 0x63cc <__fixunssfsi+0x42>
    63d6:	3e f4       	brtc	.+14     	; 0x63e6 <__fixunssfsi+0x5c>
    63d8:	90 95       	com	r25
    63da:	80 95       	com	r24
    63dc:	70 95       	com	r23
    63de:	61 95       	neg	r22
    63e0:	7f 4f       	sbci	r23, 0xFF	; 255
    63e2:	8f 4f       	sbci	r24, 0xFF	; 255
    63e4:	9f 4f       	sbci	r25, 0xFF	; 255
    63e6:	08 95       	ret

000063e8 <__floatunsisf>:
    63e8:	e8 94       	clt
    63ea:	09 c0       	rjmp	.+18     	; 0x63fe <__floatsisf+0x12>

000063ec <__floatsisf>:
    63ec:	97 fb       	bst	r25, 7
    63ee:	3e f4       	brtc	.+14     	; 0x63fe <__floatsisf+0x12>
    63f0:	90 95       	com	r25
    63f2:	80 95       	com	r24
    63f4:	70 95       	com	r23
    63f6:	61 95       	neg	r22
    63f8:	7f 4f       	sbci	r23, 0xFF	; 255
    63fa:	8f 4f       	sbci	r24, 0xFF	; 255
    63fc:	9f 4f       	sbci	r25, 0xFF	; 255
    63fe:	99 23       	and	r25, r25
    6400:	a9 f0       	breq	.+42     	; 0x642c <__floatsisf+0x40>
    6402:	f9 2f       	mov	r31, r25
    6404:	96 e9       	ldi	r25, 0x96	; 150
    6406:	bb 27       	eor	r27, r27
    6408:	93 95       	inc	r25
    640a:	f6 95       	lsr	r31
    640c:	87 95       	ror	r24
    640e:	77 95       	ror	r23
    6410:	67 95       	ror	r22
    6412:	b7 95       	ror	r27
    6414:	f1 11       	cpse	r31, r1
    6416:	f8 cf       	rjmp	.-16     	; 0x6408 <__floatsisf+0x1c>
    6418:	fa f4       	brpl	.+62     	; 0x6458 <__floatsisf+0x6c>
    641a:	bb 0f       	add	r27, r27
    641c:	11 f4       	brne	.+4      	; 0x6422 <__floatsisf+0x36>
    641e:	60 ff       	sbrs	r22, 0
    6420:	1b c0       	rjmp	.+54     	; 0x6458 <__floatsisf+0x6c>
    6422:	6f 5f       	subi	r22, 0xFF	; 255
    6424:	7f 4f       	sbci	r23, 0xFF	; 255
    6426:	8f 4f       	sbci	r24, 0xFF	; 255
    6428:	9f 4f       	sbci	r25, 0xFF	; 255
    642a:	16 c0       	rjmp	.+44     	; 0x6458 <__floatsisf+0x6c>
    642c:	88 23       	and	r24, r24
    642e:	11 f0       	breq	.+4      	; 0x6434 <__floatsisf+0x48>
    6430:	96 e9       	ldi	r25, 0x96	; 150
    6432:	11 c0       	rjmp	.+34     	; 0x6456 <__floatsisf+0x6a>
    6434:	77 23       	and	r23, r23
    6436:	21 f0       	breq	.+8      	; 0x6440 <__floatsisf+0x54>
    6438:	9e e8       	ldi	r25, 0x8E	; 142
    643a:	87 2f       	mov	r24, r23
    643c:	76 2f       	mov	r23, r22
    643e:	05 c0       	rjmp	.+10     	; 0x644a <__floatsisf+0x5e>
    6440:	66 23       	and	r22, r22
    6442:	71 f0       	breq	.+28     	; 0x6460 <__floatsisf+0x74>
    6444:	96 e8       	ldi	r25, 0x86	; 134
    6446:	86 2f       	mov	r24, r22
    6448:	70 e0       	ldi	r23, 0x00	; 0
    644a:	60 e0       	ldi	r22, 0x00	; 0
    644c:	2a f0       	brmi	.+10     	; 0x6458 <__floatsisf+0x6c>
    644e:	9a 95       	dec	r25
    6450:	66 0f       	add	r22, r22
    6452:	77 1f       	adc	r23, r23
    6454:	88 1f       	adc	r24, r24
    6456:	da f7       	brpl	.-10     	; 0x644e <__floatsisf+0x62>
    6458:	88 0f       	add	r24, r24
    645a:	96 95       	lsr	r25
    645c:	87 95       	ror	r24
    645e:	97 f9       	bld	r25, 7
    6460:	08 95       	ret

00006462 <__fp_split3>:
    6462:	57 fd       	sbrc	r21, 7
    6464:	90 58       	subi	r25, 0x80	; 128
    6466:	44 0f       	add	r20, r20
    6468:	55 1f       	adc	r21, r21
    646a:	59 f0       	breq	.+22     	; 0x6482 <__fp_splitA+0x10>
    646c:	5f 3f       	cpi	r21, 0xFF	; 255
    646e:	71 f0       	breq	.+28     	; 0x648c <__fp_splitA+0x1a>
    6470:	47 95       	ror	r20

00006472 <__fp_splitA>:
    6472:	88 0f       	add	r24, r24
    6474:	97 fb       	bst	r25, 7
    6476:	99 1f       	adc	r25, r25
    6478:	61 f0       	breq	.+24     	; 0x6492 <__fp_splitA+0x20>
    647a:	9f 3f       	cpi	r25, 0xFF	; 255
    647c:	79 f0       	breq	.+30     	; 0x649c <__fp_splitA+0x2a>
    647e:	87 95       	ror	r24
    6480:	08 95       	ret
    6482:	12 16       	cp	r1, r18
    6484:	13 06       	cpc	r1, r19
    6486:	14 06       	cpc	r1, r20
    6488:	55 1f       	adc	r21, r21
    648a:	f2 cf       	rjmp	.-28     	; 0x6470 <__fp_split3+0xe>
    648c:	46 95       	lsr	r20
    648e:	f1 df       	rcall	.-30     	; 0x6472 <__fp_splitA>
    6490:	08 c0       	rjmp	.+16     	; 0x64a2 <__fp_splitA+0x30>
    6492:	16 16       	cp	r1, r22
    6494:	17 06       	cpc	r1, r23
    6496:	18 06       	cpc	r1, r24
    6498:	99 1f       	adc	r25, r25
    649a:	f1 cf       	rjmp	.-30     	; 0x647e <__fp_splitA+0xc>
    649c:	86 95       	lsr	r24
    649e:	71 05       	cpc	r23, r1
    64a0:	61 05       	cpc	r22, r1
    64a2:	08 94       	sec
    64a4:	08 95       	ret

000064a6 <__fp_zero>:
    64a6:	e8 94       	clt

000064a8 <__fp_szero>:
    64a8:	bb 27       	eor	r27, r27
    64aa:	66 27       	eor	r22, r22
    64ac:	77 27       	eor	r23, r23
    64ae:	cb 01       	movw	r24, r22
    64b0:	97 f9       	bld	r25, 7
    64b2:	08 95       	ret

000064b4 <__mulsf3>:
    64b4:	0e 94 6d 32 	call	0x64da	; 0x64da <__mulsf3x>
    64b8:	0c 94 de 32 	jmp	0x65bc	; 0x65bc <__fp_round>
    64bc:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <__fp_pscA>
    64c0:	38 f0       	brcs	.+14     	; 0x64d0 <__mulsf3+0x1c>
    64c2:	0e 94 d7 32 	call	0x65ae	; 0x65ae <__fp_pscB>
    64c6:	20 f0       	brcs	.+8      	; 0x64d0 <__mulsf3+0x1c>
    64c8:	95 23       	and	r25, r21
    64ca:	11 f0       	breq	.+4      	; 0x64d0 <__mulsf3+0x1c>
    64cc:	0c 94 c7 32 	jmp	0x658e	; 0x658e <__fp_inf>
    64d0:	0c 94 cd 32 	jmp	0x659a	; 0x659a <__fp_nan>
    64d4:	11 24       	eor	r1, r1
    64d6:	0c 94 54 32 	jmp	0x64a8	; 0x64a8 <__fp_szero>

000064da <__mulsf3x>:
    64da:	0e 94 31 32 	call	0x6462	; 0x6462 <__fp_split3>
    64de:	70 f3       	brcs	.-36     	; 0x64bc <__mulsf3+0x8>

000064e0 <__mulsf3_pse>:
    64e0:	95 9f       	mul	r25, r21
    64e2:	c1 f3       	breq	.-16     	; 0x64d4 <__mulsf3+0x20>
    64e4:	95 0f       	add	r25, r21
    64e6:	50 e0       	ldi	r21, 0x00	; 0
    64e8:	55 1f       	adc	r21, r21
    64ea:	62 9f       	mul	r22, r18
    64ec:	f0 01       	movw	r30, r0
    64ee:	72 9f       	mul	r23, r18
    64f0:	bb 27       	eor	r27, r27
    64f2:	f0 0d       	add	r31, r0
    64f4:	b1 1d       	adc	r27, r1
    64f6:	63 9f       	mul	r22, r19
    64f8:	aa 27       	eor	r26, r26
    64fa:	f0 0d       	add	r31, r0
    64fc:	b1 1d       	adc	r27, r1
    64fe:	aa 1f       	adc	r26, r26
    6500:	64 9f       	mul	r22, r20
    6502:	66 27       	eor	r22, r22
    6504:	b0 0d       	add	r27, r0
    6506:	a1 1d       	adc	r26, r1
    6508:	66 1f       	adc	r22, r22
    650a:	82 9f       	mul	r24, r18
    650c:	22 27       	eor	r18, r18
    650e:	b0 0d       	add	r27, r0
    6510:	a1 1d       	adc	r26, r1
    6512:	62 1f       	adc	r22, r18
    6514:	73 9f       	mul	r23, r19
    6516:	b0 0d       	add	r27, r0
    6518:	a1 1d       	adc	r26, r1
    651a:	62 1f       	adc	r22, r18
    651c:	83 9f       	mul	r24, r19
    651e:	a0 0d       	add	r26, r0
    6520:	61 1d       	adc	r22, r1
    6522:	22 1f       	adc	r18, r18
    6524:	74 9f       	mul	r23, r20
    6526:	33 27       	eor	r19, r19
    6528:	a0 0d       	add	r26, r0
    652a:	61 1d       	adc	r22, r1
    652c:	23 1f       	adc	r18, r19
    652e:	84 9f       	mul	r24, r20
    6530:	60 0d       	add	r22, r0
    6532:	21 1d       	adc	r18, r1
    6534:	82 2f       	mov	r24, r18
    6536:	76 2f       	mov	r23, r22
    6538:	6a 2f       	mov	r22, r26
    653a:	11 24       	eor	r1, r1
    653c:	9f 57       	subi	r25, 0x7F	; 127
    653e:	50 40       	sbci	r21, 0x00	; 0
    6540:	9a f0       	brmi	.+38     	; 0x6568 <__mulsf3_pse+0x88>
    6542:	f1 f0       	breq	.+60     	; 0x6580 <__mulsf3_pse+0xa0>
    6544:	88 23       	and	r24, r24
    6546:	4a f0       	brmi	.+18     	; 0x655a <__mulsf3_pse+0x7a>
    6548:	ee 0f       	add	r30, r30
    654a:	ff 1f       	adc	r31, r31
    654c:	bb 1f       	adc	r27, r27
    654e:	66 1f       	adc	r22, r22
    6550:	77 1f       	adc	r23, r23
    6552:	88 1f       	adc	r24, r24
    6554:	91 50       	subi	r25, 0x01	; 1
    6556:	50 40       	sbci	r21, 0x00	; 0
    6558:	a9 f7       	brne	.-22     	; 0x6544 <__mulsf3_pse+0x64>
    655a:	9e 3f       	cpi	r25, 0xFE	; 254
    655c:	51 05       	cpc	r21, r1
    655e:	80 f0       	brcs	.+32     	; 0x6580 <__mulsf3_pse+0xa0>
    6560:	0c 94 c7 32 	jmp	0x658e	; 0x658e <__fp_inf>
    6564:	0c 94 54 32 	jmp	0x64a8	; 0x64a8 <__fp_szero>
    6568:	5f 3f       	cpi	r21, 0xFF	; 255
    656a:	e4 f3       	brlt	.-8      	; 0x6564 <__mulsf3_pse+0x84>
    656c:	98 3e       	cpi	r25, 0xE8	; 232
    656e:	d4 f3       	brlt	.-12     	; 0x6564 <__mulsf3_pse+0x84>
    6570:	86 95       	lsr	r24
    6572:	77 95       	ror	r23
    6574:	67 95       	ror	r22
    6576:	b7 95       	ror	r27
    6578:	f7 95       	ror	r31
    657a:	e7 95       	ror	r30
    657c:	9f 5f       	subi	r25, 0xFF	; 255
    657e:	c1 f7       	brne	.-16     	; 0x6570 <__mulsf3_pse+0x90>
    6580:	fe 2b       	or	r31, r30
    6582:	88 0f       	add	r24, r24
    6584:	91 1d       	adc	r25, r1
    6586:	96 95       	lsr	r25
    6588:	87 95       	ror	r24
    658a:	97 f9       	bld	r25, 7
    658c:	08 95       	ret

0000658e <__fp_inf>:
    658e:	97 f9       	bld	r25, 7
    6590:	9f 67       	ori	r25, 0x7F	; 127
    6592:	80 e8       	ldi	r24, 0x80	; 128
    6594:	70 e0       	ldi	r23, 0x00	; 0
    6596:	60 e0       	ldi	r22, 0x00	; 0
    6598:	08 95       	ret

0000659a <__fp_nan>:
    659a:	9f ef       	ldi	r25, 0xFF	; 255
    659c:	80 ec       	ldi	r24, 0xC0	; 192
    659e:	08 95       	ret

000065a0 <__fp_pscA>:
    65a0:	00 24       	eor	r0, r0
    65a2:	0a 94       	dec	r0
    65a4:	16 16       	cp	r1, r22
    65a6:	17 06       	cpc	r1, r23
    65a8:	18 06       	cpc	r1, r24
    65aa:	09 06       	cpc	r0, r25
    65ac:	08 95       	ret

000065ae <__fp_pscB>:
    65ae:	00 24       	eor	r0, r0
    65b0:	0a 94       	dec	r0
    65b2:	12 16       	cp	r1, r18
    65b4:	13 06       	cpc	r1, r19
    65b6:	14 06       	cpc	r1, r20
    65b8:	05 06       	cpc	r0, r21
    65ba:	08 95       	ret

000065bc <__fp_round>:
    65bc:	09 2e       	mov	r0, r25
    65be:	03 94       	inc	r0
    65c0:	00 0c       	add	r0, r0
    65c2:	11 f4       	brne	.+4      	; 0x65c8 <__fp_round+0xc>
    65c4:	88 23       	and	r24, r24
    65c6:	52 f0       	brmi	.+20     	; 0x65dc <__fp_round+0x20>
    65c8:	bb 0f       	add	r27, r27
    65ca:	40 f4       	brcc	.+16     	; 0x65dc <__fp_round+0x20>
    65cc:	bf 2b       	or	r27, r31
    65ce:	11 f4       	brne	.+4      	; 0x65d4 <__fp_round+0x18>
    65d0:	60 ff       	sbrs	r22, 0
    65d2:	04 c0       	rjmp	.+8      	; 0x65dc <__fp_round+0x20>
    65d4:	6f 5f       	subi	r22, 0xFF	; 255
    65d6:	7f 4f       	sbci	r23, 0xFF	; 255
    65d8:	8f 4f       	sbci	r24, 0xFF	; 255
    65da:	9f 4f       	sbci	r25, 0xFF	; 255
    65dc:	08 95       	ret

000065de <__mulsi3>:
    65de:	db 01       	movw	r26, r22
    65e0:	8f 93       	push	r24
    65e2:	9f 93       	push	r25
    65e4:	0e 94 7f 33 	call	0x66fe	; 0x66fe <__muluhisi3>
    65e8:	bf 91       	pop	r27
    65ea:	af 91       	pop	r26
    65ec:	a2 9f       	mul	r26, r18
    65ee:	80 0d       	add	r24, r0
    65f0:	91 1d       	adc	r25, r1
    65f2:	a3 9f       	mul	r26, r19
    65f4:	90 0d       	add	r25, r0
    65f6:	b2 9f       	mul	r27, r18
    65f8:	90 0d       	add	r25, r0
    65fa:	11 24       	eor	r1, r1
    65fc:	08 95       	ret

000065fe <__udivmodhi4>:
    65fe:	aa 1b       	sub	r26, r26
    6600:	bb 1b       	sub	r27, r27
    6602:	51 e1       	ldi	r21, 0x11	; 17
    6604:	07 c0       	rjmp	.+14     	; 0x6614 <__udivmodhi4_ep>

00006606 <__udivmodhi4_loop>:
    6606:	aa 1f       	adc	r26, r26
    6608:	bb 1f       	adc	r27, r27
    660a:	a6 17       	cp	r26, r22
    660c:	b7 07       	cpc	r27, r23
    660e:	10 f0       	brcs	.+4      	; 0x6614 <__udivmodhi4_ep>
    6610:	a6 1b       	sub	r26, r22
    6612:	b7 0b       	sbc	r27, r23

00006614 <__udivmodhi4_ep>:
    6614:	88 1f       	adc	r24, r24
    6616:	99 1f       	adc	r25, r25
    6618:	5a 95       	dec	r21
    661a:	a9 f7       	brne	.-22     	; 0x6606 <__udivmodhi4_loop>
    661c:	80 95       	com	r24
    661e:	90 95       	com	r25
    6620:	bc 01       	movw	r22, r24
    6622:	cd 01       	movw	r24, r26
    6624:	08 95       	ret

00006626 <__divmodhi4>:
    6626:	97 fb       	bst	r25, 7
    6628:	07 2e       	mov	r0, r23
    662a:	16 f4       	brtc	.+4      	; 0x6630 <__divmodhi4+0xa>
    662c:	00 94       	com	r0
    662e:	07 d0       	rcall	.+14     	; 0x663e <__divmodhi4_neg1>
    6630:	77 fd       	sbrc	r23, 7
    6632:	09 d0       	rcall	.+18     	; 0x6646 <__divmodhi4_neg2>
    6634:	0e 94 ff 32 	call	0x65fe	; 0x65fe <__udivmodhi4>
    6638:	07 fc       	sbrc	r0, 7
    663a:	05 d0       	rcall	.+10     	; 0x6646 <__divmodhi4_neg2>
    663c:	3e f4       	brtc	.+14     	; 0x664c <__divmodhi4_exit>

0000663e <__divmodhi4_neg1>:
    663e:	90 95       	com	r25
    6640:	81 95       	neg	r24
    6642:	9f 4f       	sbci	r25, 0xFF	; 255
    6644:	08 95       	ret

00006646 <__divmodhi4_neg2>:
    6646:	70 95       	com	r23
    6648:	61 95       	neg	r22
    664a:	7f 4f       	sbci	r23, 0xFF	; 255

0000664c <__divmodhi4_exit>:
    664c:	08 95       	ret

0000664e <__udivmodsi4>:
    664e:	a1 e2       	ldi	r26, 0x21	; 33
    6650:	1a 2e       	mov	r1, r26
    6652:	aa 1b       	sub	r26, r26
    6654:	bb 1b       	sub	r27, r27
    6656:	fd 01       	movw	r30, r26
    6658:	0d c0       	rjmp	.+26     	; 0x6674 <__udivmodsi4_ep>

0000665a <__udivmodsi4_loop>:
    665a:	aa 1f       	adc	r26, r26
    665c:	bb 1f       	adc	r27, r27
    665e:	ee 1f       	adc	r30, r30
    6660:	ff 1f       	adc	r31, r31
    6662:	a2 17       	cp	r26, r18
    6664:	b3 07       	cpc	r27, r19
    6666:	e4 07       	cpc	r30, r20
    6668:	f5 07       	cpc	r31, r21
    666a:	20 f0       	brcs	.+8      	; 0x6674 <__udivmodsi4_ep>
    666c:	a2 1b       	sub	r26, r18
    666e:	b3 0b       	sbc	r27, r19
    6670:	e4 0b       	sbc	r30, r20
    6672:	f5 0b       	sbc	r31, r21

00006674 <__udivmodsi4_ep>:
    6674:	66 1f       	adc	r22, r22
    6676:	77 1f       	adc	r23, r23
    6678:	88 1f       	adc	r24, r24
    667a:	99 1f       	adc	r25, r25
    667c:	1a 94       	dec	r1
    667e:	69 f7       	brne	.-38     	; 0x665a <__udivmodsi4_loop>
    6680:	60 95       	com	r22
    6682:	70 95       	com	r23
    6684:	80 95       	com	r24
    6686:	90 95       	com	r25
    6688:	9b 01       	movw	r18, r22
    668a:	ac 01       	movw	r20, r24
    668c:	bd 01       	movw	r22, r26
    668e:	cf 01       	movw	r24, r30
    6690:	08 95       	ret

00006692 <__divmodsi4>:
    6692:	05 2e       	mov	r0, r21
    6694:	97 fb       	bst	r25, 7
    6696:	1e f4       	brtc	.+6      	; 0x669e <__divmodsi4+0xc>
    6698:	00 94       	com	r0
    669a:	0e 94 60 33 	call	0x66c0	; 0x66c0 <__negsi2>
    669e:	57 fd       	sbrc	r21, 7
    66a0:	07 d0       	rcall	.+14     	; 0x66b0 <__divmodsi4_neg2>
    66a2:	0e 94 27 33 	call	0x664e	; 0x664e <__udivmodsi4>
    66a6:	07 fc       	sbrc	r0, 7
    66a8:	03 d0       	rcall	.+6      	; 0x66b0 <__divmodsi4_neg2>
    66aa:	4e f4       	brtc	.+18     	; 0x66be <__divmodsi4_exit>
    66ac:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__negsi2>

000066b0 <__divmodsi4_neg2>:
    66b0:	50 95       	com	r21
    66b2:	40 95       	com	r20
    66b4:	30 95       	com	r19
    66b6:	21 95       	neg	r18
    66b8:	3f 4f       	sbci	r19, 0xFF	; 255
    66ba:	4f 4f       	sbci	r20, 0xFF	; 255
    66bc:	5f 4f       	sbci	r21, 0xFF	; 255

000066be <__divmodsi4_exit>:
    66be:	08 95       	ret

000066c0 <__negsi2>:
    66c0:	90 95       	com	r25
    66c2:	80 95       	com	r24
    66c4:	70 95       	com	r23
    66c6:	61 95       	neg	r22
    66c8:	7f 4f       	sbci	r23, 0xFF	; 255
    66ca:	8f 4f       	sbci	r24, 0xFF	; 255
    66cc:	9f 4f       	sbci	r25, 0xFF	; 255
    66ce:	08 95       	ret

000066d0 <__tablejump2__>:
    66d0:	ee 0f       	add	r30, r30
    66d2:	ff 1f       	adc	r31, r31
    66d4:	88 1f       	adc	r24, r24
    66d6:	8b bf       	out	0x3b, r24	; 59
    66d8:	07 90       	elpm	r0, Z+
    66da:	f6 91       	elpm	r31, Z
    66dc:	e0 2d       	mov	r30, r0
    66de:	19 94       	eijmp

000066e0 <__umulhisi3>:
    66e0:	a2 9f       	mul	r26, r18
    66e2:	b0 01       	movw	r22, r0
    66e4:	b3 9f       	mul	r27, r19
    66e6:	c0 01       	movw	r24, r0
    66e8:	a3 9f       	mul	r26, r19
    66ea:	70 0d       	add	r23, r0
    66ec:	81 1d       	adc	r24, r1
    66ee:	11 24       	eor	r1, r1
    66f0:	91 1d       	adc	r25, r1
    66f2:	b2 9f       	mul	r27, r18
    66f4:	70 0d       	add	r23, r0
    66f6:	81 1d       	adc	r24, r1
    66f8:	11 24       	eor	r1, r1
    66fa:	91 1d       	adc	r25, r1
    66fc:	08 95       	ret

000066fe <__muluhisi3>:
    66fe:	0e 94 70 33 	call	0x66e0	; 0x66e0 <__umulhisi3>
    6702:	a5 9f       	mul	r26, r21
    6704:	90 0d       	add	r25, r0
    6706:	b4 9f       	mul	r27, r20
    6708:	90 0d       	add	r25, r0
    670a:	a4 9f       	mul	r26, r20
    670c:	80 0d       	add	r24, r0
    670e:	91 1d       	adc	r25, r1
    6710:	11 24       	eor	r1, r1
    6712:	08 95       	ret

00006714 <malloc>:
    6714:	cf 93       	push	r28
    6716:	df 93       	push	r29
    6718:	82 30       	cpi	r24, 0x02	; 2
    671a:	91 05       	cpc	r25, r1
    671c:	10 f4       	brcc	.+4      	; 0x6722 <malloc+0xe>
    671e:	82 e0       	ldi	r24, 0x02	; 2
    6720:	90 e0       	ldi	r25, 0x00	; 0
    6722:	e0 91 b0 25 	lds	r30, 0x25B0
    6726:	f0 91 b1 25 	lds	r31, 0x25B1
    672a:	20 e0       	ldi	r18, 0x00	; 0
    672c:	30 e0       	ldi	r19, 0x00	; 0
    672e:	c0 e0       	ldi	r28, 0x00	; 0
    6730:	d0 e0       	ldi	r29, 0x00	; 0
    6732:	30 97       	sbiw	r30, 0x00	; 0
    6734:	11 f1       	breq	.+68     	; 0x677a <malloc+0x66>
    6736:	40 81       	ld	r20, Z
    6738:	51 81       	ldd	r21, Z+1	; 0x01
    673a:	48 17       	cp	r20, r24
    673c:	59 07       	cpc	r21, r25
    673e:	c0 f0       	brcs	.+48     	; 0x6770 <malloc+0x5c>
    6740:	48 17       	cp	r20, r24
    6742:	59 07       	cpc	r21, r25
    6744:	61 f4       	brne	.+24     	; 0x675e <malloc+0x4a>
    6746:	82 81       	ldd	r24, Z+2	; 0x02
    6748:	93 81       	ldd	r25, Z+3	; 0x03
    674a:	20 97       	sbiw	r28, 0x00	; 0
    674c:	19 f0       	breq	.+6      	; 0x6754 <malloc+0x40>
    674e:	8a 83       	std	Y+2, r24	; 0x02
    6750:	9b 83       	std	Y+3, r25	; 0x03
    6752:	2b c0       	rjmp	.+86     	; 0x67aa <malloc+0x96>
    6754:	80 93 b0 25 	sts	0x25B0, r24
    6758:	90 93 b1 25 	sts	0x25B1, r25
    675c:	26 c0       	rjmp	.+76     	; 0x67aa <malloc+0x96>
    675e:	21 15       	cp	r18, r1
    6760:	31 05       	cpc	r19, r1
    6762:	19 f0       	breq	.+6      	; 0x676a <malloc+0x56>
    6764:	42 17       	cp	r20, r18
    6766:	53 07       	cpc	r21, r19
    6768:	18 f4       	brcc	.+6      	; 0x6770 <malloc+0x5c>
    676a:	9a 01       	movw	r18, r20
    676c:	be 01       	movw	r22, r28
    676e:	df 01       	movw	r26, r30
    6770:	ef 01       	movw	r28, r30
    6772:	02 80       	ldd	r0, Z+2	; 0x02
    6774:	f3 81       	ldd	r31, Z+3	; 0x03
    6776:	e0 2d       	mov	r30, r0
    6778:	dc cf       	rjmp	.-72     	; 0x6732 <malloc+0x1e>
    677a:	21 15       	cp	r18, r1
    677c:	31 05       	cpc	r19, r1
    677e:	09 f1       	breq	.+66     	; 0x67c2 <malloc+0xae>
    6780:	28 1b       	sub	r18, r24
    6782:	39 0b       	sbc	r19, r25
    6784:	24 30       	cpi	r18, 0x04	; 4
    6786:	31 05       	cpc	r19, r1
    6788:	90 f4       	brcc	.+36     	; 0x67ae <malloc+0x9a>
    678a:	12 96       	adiw	r26, 0x02	; 2
    678c:	8d 91       	ld	r24, X+
    678e:	9c 91       	ld	r25, X
    6790:	13 97       	sbiw	r26, 0x03	; 3
    6792:	61 15       	cp	r22, r1
    6794:	71 05       	cpc	r23, r1
    6796:	21 f0       	breq	.+8      	; 0x67a0 <malloc+0x8c>
    6798:	fb 01       	movw	r30, r22
    679a:	82 83       	std	Z+2, r24	; 0x02
    679c:	93 83       	std	Z+3, r25	; 0x03
    679e:	04 c0       	rjmp	.+8      	; 0x67a8 <malloc+0x94>
    67a0:	80 93 b0 25 	sts	0x25B0, r24
    67a4:	90 93 b1 25 	sts	0x25B1, r25
    67a8:	fd 01       	movw	r30, r26
    67aa:	32 96       	adiw	r30, 0x02	; 2
    67ac:	44 c0       	rjmp	.+136    	; 0x6836 <malloc+0x122>
    67ae:	fd 01       	movw	r30, r26
    67b0:	e2 0f       	add	r30, r18
    67b2:	f3 1f       	adc	r31, r19
    67b4:	81 93       	st	Z+, r24
    67b6:	91 93       	st	Z+, r25
    67b8:	22 50       	subi	r18, 0x02	; 2
    67ba:	31 09       	sbc	r19, r1
    67bc:	2d 93       	st	X+, r18
    67be:	3c 93       	st	X, r19
    67c0:	3a c0       	rjmp	.+116    	; 0x6836 <malloc+0x122>
    67c2:	20 91 ae 25 	lds	r18, 0x25AE
    67c6:	30 91 af 25 	lds	r19, 0x25AF
    67ca:	23 2b       	or	r18, r19
    67cc:	41 f4       	brne	.+16     	; 0x67de <malloc+0xca>
    67ce:	20 91 02 20 	lds	r18, 0x2002
    67d2:	30 91 03 20 	lds	r19, 0x2003
    67d6:	20 93 ae 25 	sts	0x25AE, r18
    67da:	30 93 af 25 	sts	0x25AF, r19
    67de:	20 91 00 20 	lds	r18, 0x2000
    67e2:	30 91 01 20 	lds	r19, 0x2001
    67e6:	21 15       	cp	r18, r1
    67e8:	31 05       	cpc	r19, r1
    67ea:	41 f4       	brne	.+16     	; 0x67fc <malloc+0xe8>
    67ec:	2d b7       	in	r18, 0x3d	; 61
    67ee:	3e b7       	in	r19, 0x3e	; 62
    67f0:	40 91 04 20 	lds	r20, 0x2004
    67f4:	50 91 05 20 	lds	r21, 0x2005
    67f8:	24 1b       	sub	r18, r20
    67fa:	35 0b       	sbc	r19, r21
    67fc:	e0 91 ae 25 	lds	r30, 0x25AE
    6800:	f0 91 af 25 	lds	r31, 0x25AF
    6804:	e2 17       	cp	r30, r18
    6806:	f3 07       	cpc	r31, r19
    6808:	a0 f4       	brcc	.+40     	; 0x6832 <malloc+0x11e>
    680a:	2e 1b       	sub	r18, r30
    680c:	3f 0b       	sbc	r19, r31
    680e:	28 17       	cp	r18, r24
    6810:	39 07       	cpc	r19, r25
    6812:	78 f0       	brcs	.+30     	; 0x6832 <malloc+0x11e>
    6814:	ac 01       	movw	r20, r24
    6816:	4e 5f       	subi	r20, 0xFE	; 254
    6818:	5f 4f       	sbci	r21, 0xFF	; 255
    681a:	24 17       	cp	r18, r20
    681c:	35 07       	cpc	r19, r21
    681e:	48 f0       	brcs	.+18     	; 0x6832 <malloc+0x11e>
    6820:	4e 0f       	add	r20, r30
    6822:	5f 1f       	adc	r21, r31
    6824:	40 93 ae 25 	sts	0x25AE, r20
    6828:	50 93 af 25 	sts	0x25AF, r21
    682c:	81 93       	st	Z+, r24
    682e:	91 93       	st	Z+, r25
    6830:	02 c0       	rjmp	.+4      	; 0x6836 <malloc+0x122>
    6832:	e0 e0       	ldi	r30, 0x00	; 0
    6834:	f0 e0       	ldi	r31, 0x00	; 0
    6836:	cf 01       	movw	r24, r30
    6838:	df 91       	pop	r29
    683a:	cf 91       	pop	r28
    683c:	08 95       	ret

0000683e <free>:
    683e:	0f 93       	push	r16
    6840:	1f 93       	push	r17
    6842:	cf 93       	push	r28
    6844:	df 93       	push	r29
    6846:	00 97       	sbiw	r24, 0x00	; 0
    6848:	09 f4       	brne	.+2      	; 0x684c <free+0xe>
    684a:	8c c0       	rjmp	.+280    	; 0x6964 <free+0x126>
    684c:	fc 01       	movw	r30, r24
    684e:	32 97       	sbiw	r30, 0x02	; 2
    6850:	12 82       	std	Z+2, r1	; 0x02
    6852:	13 82       	std	Z+3, r1	; 0x03
    6854:	00 91 b0 25 	lds	r16, 0x25B0
    6858:	10 91 b1 25 	lds	r17, 0x25B1
    685c:	01 15       	cp	r16, r1
    685e:	11 05       	cpc	r17, r1
    6860:	81 f4       	brne	.+32     	; 0x6882 <free+0x44>
    6862:	20 81       	ld	r18, Z
    6864:	31 81       	ldd	r19, Z+1	; 0x01
    6866:	82 0f       	add	r24, r18
    6868:	93 1f       	adc	r25, r19
    686a:	20 91 ae 25 	lds	r18, 0x25AE
    686e:	30 91 af 25 	lds	r19, 0x25AF
    6872:	28 17       	cp	r18, r24
    6874:	39 07       	cpc	r19, r25
    6876:	79 f5       	brne	.+94     	; 0x68d6 <free+0x98>
    6878:	e0 93 ae 25 	sts	0x25AE, r30
    687c:	f0 93 af 25 	sts	0x25AF, r31
    6880:	71 c0       	rjmp	.+226    	; 0x6964 <free+0x126>
    6882:	d8 01       	movw	r26, r16
    6884:	40 e0       	ldi	r20, 0x00	; 0
    6886:	50 e0       	ldi	r21, 0x00	; 0
    6888:	ae 17       	cp	r26, r30
    688a:	bf 07       	cpc	r27, r31
    688c:	50 f4       	brcc	.+20     	; 0x68a2 <free+0x64>
    688e:	12 96       	adiw	r26, 0x02	; 2
    6890:	2d 91       	ld	r18, X+
    6892:	3c 91       	ld	r19, X
    6894:	13 97       	sbiw	r26, 0x03	; 3
    6896:	ad 01       	movw	r20, r26
    6898:	21 15       	cp	r18, r1
    689a:	31 05       	cpc	r19, r1
    689c:	09 f1       	breq	.+66     	; 0x68e0 <free+0xa2>
    689e:	d9 01       	movw	r26, r18
    68a0:	f3 cf       	rjmp	.-26     	; 0x6888 <free+0x4a>
    68a2:	9d 01       	movw	r18, r26
    68a4:	da 01       	movw	r26, r20
    68a6:	22 83       	std	Z+2, r18	; 0x02
    68a8:	33 83       	std	Z+3, r19	; 0x03
    68aa:	60 81       	ld	r22, Z
    68ac:	71 81       	ldd	r23, Z+1	; 0x01
    68ae:	86 0f       	add	r24, r22
    68b0:	97 1f       	adc	r25, r23
    68b2:	82 17       	cp	r24, r18
    68b4:	93 07       	cpc	r25, r19
    68b6:	69 f4       	brne	.+26     	; 0x68d2 <free+0x94>
    68b8:	ec 01       	movw	r28, r24
    68ba:	28 81       	ld	r18, Y
    68bc:	39 81       	ldd	r19, Y+1	; 0x01
    68be:	26 0f       	add	r18, r22
    68c0:	37 1f       	adc	r19, r23
    68c2:	2e 5f       	subi	r18, 0xFE	; 254
    68c4:	3f 4f       	sbci	r19, 0xFF	; 255
    68c6:	20 83       	st	Z, r18
    68c8:	31 83       	std	Z+1, r19	; 0x01
    68ca:	8a 81       	ldd	r24, Y+2	; 0x02
    68cc:	9b 81       	ldd	r25, Y+3	; 0x03
    68ce:	82 83       	std	Z+2, r24	; 0x02
    68d0:	93 83       	std	Z+3, r25	; 0x03
    68d2:	45 2b       	or	r20, r21
    68d4:	29 f4       	brne	.+10     	; 0x68e0 <free+0xa2>
    68d6:	e0 93 b0 25 	sts	0x25B0, r30
    68da:	f0 93 b1 25 	sts	0x25B1, r31
    68de:	42 c0       	rjmp	.+132    	; 0x6964 <free+0x126>
    68e0:	12 96       	adiw	r26, 0x02	; 2
    68e2:	ed 93       	st	X+, r30
    68e4:	fc 93       	st	X, r31
    68e6:	13 97       	sbiw	r26, 0x03	; 3
    68e8:	ed 01       	movw	r28, r26
    68ea:	49 91       	ld	r20, Y+
    68ec:	59 91       	ld	r21, Y+
    68ee:	9e 01       	movw	r18, r28
    68f0:	24 0f       	add	r18, r20
    68f2:	35 1f       	adc	r19, r21
    68f4:	e2 17       	cp	r30, r18
    68f6:	f3 07       	cpc	r31, r19
    68f8:	71 f4       	brne	.+28     	; 0x6916 <free+0xd8>
    68fa:	80 81       	ld	r24, Z
    68fc:	91 81       	ldd	r25, Z+1	; 0x01
    68fe:	84 0f       	add	r24, r20
    6900:	95 1f       	adc	r25, r21
    6902:	02 96       	adiw	r24, 0x02	; 2
    6904:	8d 93       	st	X+, r24
    6906:	9c 93       	st	X, r25
    6908:	11 97       	sbiw	r26, 0x01	; 1
    690a:	82 81       	ldd	r24, Z+2	; 0x02
    690c:	93 81       	ldd	r25, Z+3	; 0x03
    690e:	12 96       	adiw	r26, 0x02	; 2
    6910:	8d 93       	st	X+, r24
    6912:	9c 93       	st	X, r25
    6914:	13 97       	sbiw	r26, 0x03	; 3
    6916:	e0 e0       	ldi	r30, 0x00	; 0
    6918:	f0 e0       	ldi	r31, 0x00	; 0
    691a:	d8 01       	movw	r26, r16
    691c:	12 96       	adiw	r26, 0x02	; 2
    691e:	8d 91       	ld	r24, X+
    6920:	9c 91       	ld	r25, X
    6922:	13 97       	sbiw	r26, 0x03	; 3
    6924:	00 97       	sbiw	r24, 0x00	; 0
    6926:	19 f0       	breq	.+6      	; 0x692e <free+0xf0>
    6928:	f8 01       	movw	r30, r16
    692a:	8c 01       	movw	r16, r24
    692c:	f6 cf       	rjmp	.-20     	; 0x691a <free+0xdc>
    692e:	8d 91       	ld	r24, X+
    6930:	9c 91       	ld	r25, X
    6932:	98 01       	movw	r18, r16
    6934:	2e 5f       	subi	r18, 0xFE	; 254
    6936:	3f 4f       	sbci	r19, 0xFF	; 255
    6938:	82 0f       	add	r24, r18
    693a:	93 1f       	adc	r25, r19
    693c:	20 91 ae 25 	lds	r18, 0x25AE
    6940:	30 91 af 25 	lds	r19, 0x25AF
    6944:	28 17       	cp	r18, r24
    6946:	39 07       	cpc	r19, r25
    6948:	69 f4       	brne	.+26     	; 0x6964 <free+0x126>
    694a:	30 97       	sbiw	r30, 0x00	; 0
    694c:	29 f4       	brne	.+10     	; 0x6958 <free+0x11a>
    694e:	10 92 b0 25 	sts	0x25B0, r1
    6952:	10 92 b1 25 	sts	0x25B1, r1
    6956:	02 c0       	rjmp	.+4      	; 0x695c <free+0x11e>
    6958:	12 82       	std	Z+2, r1	; 0x02
    695a:	13 82       	std	Z+3, r1	; 0x03
    695c:	00 93 ae 25 	sts	0x25AE, r16
    6960:	10 93 af 25 	sts	0x25AF, r17
    6964:	df 91       	pop	r29
    6966:	cf 91       	pop	r28
    6968:	1f 91       	pop	r17
    696a:	0f 91       	pop	r16
    696c:	08 95       	ret

0000696e <memcpy>:
    696e:	fb 01       	movw	r30, r22
    6970:	dc 01       	movw	r26, r24
    6972:	02 c0       	rjmp	.+4      	; 0x6978 <memcpy+0xa>
    6974:	01 90       	ld	r0, Z+
    6976:	0d 92       	st	X+, r0
    6978:	41 50       	subi	r20, 0x01	; 1
    697a:	50 40       	sbci	r21, 0x00	; 0
    697c:	d8 f7       	brcc	.-10     	; 0x6974 <memcpy+0x6>
    697e:	08 95       	ret

00006980 <eeprom_read_dword>:
    6980:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <eeprom_mapen>
    6984:	60 81       	ld	r22, Z
    6986:	71 81       	ldd	r23, Z+1	; 0x01
    6988:	82 81       	ldd	r24, Z+2	; 0x02
    698a:	93 81       	ldd	r25, Z+3	; 0x03
    698c:	08 95       	ret

0000698e <eeprom_write_dword>:
    698e:	24 2f       	mov	r18, r20
    6990:	0e 94 e5 34 	call	0x69ca	; 0x69ca <eeprom_write_r18>
    6994:	25 2f       	mov	r18, r21
    6996:	0e 94 e5 34 	call	0x69ca	; 0x69ca <eeprom_write_r18>
    699a:	0c 94 cf 34 	jmp	0x699e	; 0x699e <eeprom_write_word>

0000699e <eeprom_write_word>:
    699e:	0e 94 e4 34 	call	0x69c8	; 0x69c8 <eeprom_write_byte>
    69a2:	27 2f       	mov	r18, r23
    69a4:	0c 94 e5 34 	jmp	0x69ca	; 0x69ca <eeprom_write_r18>

000069a8 <eeprom_read_byte>:
    69a8:	03 d0       	rcall	.+6      	; 0x69b0 <eeprom_mapen>
    69aa:	80 81       	ld	r24, Z
    69ac:	99 27       	eor	r25, r25
    69ae:	08 95       	ret

000069b0 <eeprom_mapen>:
    69b0:	e0 ec       	ldi	r30, 0xC0	; 192
    69b2:	f1 e0       	ldi	r31, 0x01	; 1
    69b4:	37 85       	ldd	r19, Z+15	; 0x0f
    69b6:	37 fd       	sbrc	r19, 7
    69b8:	fd cf       	rjmp	.-6      	; 0x69b4 <eeprom_mapen+0x4>
    69ba:	34 85       	ldd	r19, Z+12	; 0x0c
    69bc:	38 60       	ori	r19, 0x08	; 8
    69be:	34 87       	std	Z+12, r19	; 0x0c
    69c0:	fc 01       	movw	r30, r24
    69c2:	e0 50       	subi	r30, 0x00	; 0
    69c4:	f0 4f       	sbci	r31, 0xF0	; 240
    69c6:	08 95       	ret

000069c8 <eeprom_write_byte>:
    69c8:	26 2f       	mov	r18, r22

000069ca <eeprom_write_r18>:
    69ca:	e0 ec       	ldi	r30, 0xC0	; 192
    69cc:	f1 e0       	ldi	r31, 0x01	; 1
    69ce:	37 85       	ldd	r19, Z+15	; 0x0f
    69d0:	37 fd       	sbrc	r19, 7
    69d2:	fd cf       	rjmp	.-6      	; 0x69ce <eeprom_write_r18+0x4>
    69d4:	34 85       	ldd	r19, Z+12	; 0x0c
    69d6:	37 7f       	andi	r19, 0xF7	; 247
    69d8:	34 87       	std	Z+12, r19	; 0x0c
    69da:	37 85       	ldd	r19, Z+15	; 0x0f
    69dc:	31 ff       	sbrs	r19, 1
    69de:	09 c0       	rjmp	.+18     	; 0x69f2 <eeprom_write_r18+0x28>
    69e0:	36 e3       	ldi	r19, 0x36	; 54
    69e2:	32 87       	std	Z+10, r19	; 0x0a
    69e4:	38 ed       	ldi	r19, 0xD8	; 216
    69e6:	34 bf       	out	0x34, r19	; 52
    69e8:	31 e0       	ldi	r19, 0x01	; 1
    69ea:	33 87       	std	Z+11, r19	; 0x0b
    69ec:	37 85       	ldd	r19, Z+15	; 0x0f
    69ee:	37 fd       	sbrc	r19, 7
    69f0:	fd cf       	rjmp	.-6      	; 0x69ec <eeprom_write_r18+0x22>
    69f2:	33 e3       	ldi	r19, 0x33	; 51
    69f4:	32 87       	std	Z+10, r19	; 0x0a
    69f6:	80 83       	st	Z, r24
    69f8:	91 83       	std	Z+1, r25	; 0x01
    69fa:	12 82       	std	Z+2, r1	; 0x02
    69fc:	24 83       	std	Z+4, r18	; 0x04
    69fe:	25 e3       	ldi	r18, 0x35	; 53
    6a00:	22 87       	std	Z+10, r18	; 0x0a
    6a02:	28 ed       	ldi	r18, 0xD8	; 216
    6a04:	31 e0       	ldi	r19, 0x01	; 1
    6a06:	24 bf       	out	0x34, r18	; 52
    6a08:	33 87       	std	Z+11, r19	; 0x0b
    6a0a:	01 96       	adiw	r24, 0x01	; 1
    6a0c:	08 95       	ret

00006a0e <__do_global_dtors>:
    6a0e:	12 e0       	ldi	r17, 0x02	; 2
    6a10:	c2 ec       	ldi	r28, 0xC2	; 194
    6a12:	d2 e0       	ldi	r29, 0x02	; 2
    6a14:	00 e0       	ldi	r16, 0x00	; 0
    6a16:	06 c0       	rjmp	.+12     	; 0x6a24 <__do_global_dtors+0x16>
    6a18:	80 2f       	mov	r24, r16
    6a1a:	fe 01       	movw	r30, r28
    6a1c:	0e 94 68 33 	call	0x66d0	; 0x66d0 <__tablejump2__>
    6a20:	21 96       	adiw	r28, 0x01	; 1
    6a22:	01 1d       	adc	r16, r1
    6a24:	c4 3c       	cpi	r28, 0xC4	; 196
    6a26:	d1 07       	cpc	r29, r17
    6a28:	80 e0       	ldi	r24, 0x00	; 0
    6a2a:	08 07       	cpc	r16, r24
    6a2c:	a9 f7       	brne	.-22     	; 0x6a18 <__do_global_dtors+0xa>
    6a2e:	f8 94       	cli

00006a30 <__stop_program>:
    6a30:	ff cf       	rjmp	.-2      	; 0x6a30 <__stop_program>
