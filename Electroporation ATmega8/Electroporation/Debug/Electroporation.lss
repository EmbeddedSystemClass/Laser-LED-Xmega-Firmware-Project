
Electroporation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  00800060  00001f22  00001fb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a0  0080012c  0080012c  00002082  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002082  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000020b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000618  00000000  00000000  000020f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000074bc  00000000  00000000  00002708  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c84  00000000  00000000  00009bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019bf  00000000  00000000  0000b848  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000012d4  00000000  00000000  0000d208  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000026ee  00000000  00000000  0000e4dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000035fc  00000000  00000000  00010bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000558  00000000  00000000  000141c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4d c0       	rjmp	.+154    	; 0x9c <__dtors_end>
       2:	50 c7       	rjmp	.+3744   	; 0xea4 <__vector_1>
       4:	7c c7       	rjmp	.+3832   	; 0xefe <__vector_2>
       6:	a8 c7       	rjmp	.+3920   	; 0xf58 <__vector_3>
       8:	d4 c7       	rjmp	.+4008   	; 0xfb2 <__vector_4>
       a:	00 c8       	rjmp	.-4096   	; 0xfffff00c <__eeprom_end+0xff7ef00c>
       c:	2c c8       	rjmp	.-4008   	; 0xfffff066 <__eeprom_end+0xff7ef066>
       e:	58 c8       	rjmp	.-3920   	; 0xfffff0c0 <__eeprom_end+0xff7ef0c0>
      10:	84 c8       	rjmp	.-3832   	; 0xfffff11a <__eeprom_end+0xff7ef11a>
      12:	b0 c8       	rjmp	.-3744   	; 0xfffff174 <__eeprom_end+0xff7ef174>
      14:	dc c8       	rjmp	.-3656   	; 0xfffff1ce <__eeprom_end+0xff7ef1ce>
      16:	08 c9       	rjmp	.-3568   	; 0xfffff228 <__eeprom_end+0xff7ef228>
      18:	34 c9       	rjmp	.-3480   	; 0xfffff282 <__eeprom_end+0xff7ef282>
      1a:	60 c9       	rjmp	.-3392   	; 0xfffff2dc <__eeprom_end+0xff7ef2dc>
      1c:	8c c9       	rjmp	.-3304   	; 0xfffff336 <__eeprom_end+0xff7ef336>
      1e:	b8 c9       	rjmp	.-3216   	; 0xfffff390 <__eeprom_end+0xff7ef390>
      20:	e4 c9       	rjmp	.-3128   	; 0xfffff3ea <__eeprom_end+0xff7ef3ea>
      22:	10 ca       	rjmp	.-3040   	; 0xfffff444 <__eeprom_end+0xff7ef444>
      24:	3c ca       	rjmp	.-2952   	; 0xfffff49e <__eeprom_end+0xff7ef49e>
      26:	30 c1       	rjmp	.+608    	; 0x288 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x28>
      28:	55 c1       	rjmp	.+682    	; 0x2d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
      2a:	54 c1       	rjmp	.+680    	; 0x2d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
      2c:	53 c1       	rjmp	.+678    	; 0x2d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
      2e:	52 c1       	rjmp	.+676    	; 0x2d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
      30:	51 c1       	rjmp	.+674    	; 0x2d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
      32:	50 c1       	rjmp	.+672    	; 0x2d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
      34:	4f c1       	rjmp	.+670    	; 0x2d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
      36:	4e c1       	rjmp	.+668    	; 0x2d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
      38:	4d c1       	rjmp	.+666    	; 0x2d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
      3a:	4c c1       	rjmp	.+664    	; 0x2d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
      3c:	4b c1       	rjmp	.+662    	; 0x2d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
      3e:	4a c1       	rjmp	.+660    	; 0x2d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
      40:	49 c1       	rjmp	.+658    	; 0x2d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
      42:	48 c1       	rjmp	.+656    	; 0x2d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
      44:	47 c1       	rjmp	.+654    	; 0x2d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
      46:	46 c1       	rjmp	.+652    	; 0x2d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
      48:	45 c1       	rjmp	.+650    	; 0x2d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
      4a:	44 c1       	rjmp	.+648    	; 0x2d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
      4c:	43 c1       	rjmp	.+646    	; 0x2d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
      4e:	42 c1       	rjmp	.+644    	; 0x2d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
      50:	41 c1       	rjmp	.+642    	; 0x2d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
      52:	40 c1       	rjmp	.+640    	; 0x2d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
      54:	1c c1       	rjmp	.+568    	; 0x28e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x2e>
      56:	3e c1       	rjmp	.+636    	; 0x2d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
      58:	1e c1       	rjmp	.+572    	; 0x296 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x36>
      5a:	3c c1       	rjmp	.+632    	; 0x2d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
      5c:	3b c1       	rjmp	.+630    	; 0x2d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
      5e:	23 c1       	rjmp	.+582    	; 0x2a6 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x46>
      60:	32 c1       	rjmp	.+612    	; 0x2c6 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x66>
      62:	25 c1       	rjmp	.+586    	; 0x2ae <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x4e>
      64:	28 c1       	rjmp	.+592    	; 0x2b6 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x56>
      66:	2b c1       	rjmp	.+598    	; 0x2be <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x5e>
      68:	1a c1       	rjmp	.+564    	; 0x29e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x3e>
      6a:	31 c1       	rjmp	.+610    	; 0x2ce <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x6e>
      6c:	b5 c2       	rjmp	.+1386   	; 0x5d8 <_ZN16CLaserControlApp3RunEv+0x84>
      6e:	b7 c2       	rjmp	.+1390   	; 0x5de <_ZN16CLaserControlApp3RunEv+0x8a>
      70:	ca c3       	rjmp	.+1940   	; 0x806 <_ZN16CLaserControlApp3RunEv+0x2b2>
      72:	f9 c3       	rjmp	.+2034   	; 0x866 <_ZN16CLaserControlApp3RunEv+0x312>
      74:	b1 c4       	rjmp	.+2402   	; 0x9d8 <_ZN16CLaserControlApp3RunEv+0x484>
      76:	e9 c4       	rjmp	.+2514   	; 0xa4a <_ZN16CLaserControlApp3RunEv+0x4f6>
      78:	76 c5       	rjmp	.+2796   	; 0xb66 <_ZN16CLaserControlApp3RunEv+0x612>
      7a:	0c c5       	rjmp	.+2584   	; 0xa94 <_ZN16CLaserControlApp3RunEv+0x540>
      7c:	92 c5       	rjmp	.+2852   	; 0xba2 <_ZN16CLaserControlApp3RunEv+0x64e>
      7e:	be c5       	rjmp	.+2940   	; 0xbfc <_ZN16CLaserControlApp3RunEv+0x6a8>
      80:	e4 c5       	rjmp	.+3016   	; 0xc4a <_ZN16CLaserControlApp3RunEv+0x6f6>
      82:	59 cc       	rjmp	.-1870   	; 0xfffff936 <__eeprom_end+0xff7ef936>
      84:	58 cc       	rjmp	.-1872   	; 0xfffff936 <__eeprom_end+0xff7ef936>
      86:	5f cc       	rjmp	.-1858   	; 0xfffff946 <__eeprom_end+0xff7ef946>
      88:	66 cc       	rjmp	.-1844   	; 0xfffff956 <__eeprom_end+0xff7ef956>
      8a:	70 cc       	rjmp	.-1824   	; 0xfffff96c <__eeprom_end+0xff7ef96c>
      8c:	c7 cc       	rjmp	.-1650   	; 0xfffffa1c <__eeprom_end+0xff7efa1c>
      8e:	cd cc       	rjmp	.-1638   	; 0xfffffa2a <__eeprom_end+0xff7efa2a>
      90:	f8 cc       	rjmp	.-1552   	; 0xfffffa82 <__eeprom_end+0xff7efa82>
      92:	f7 cc       	rjmp	.-1554   	; 0xfffffa82 <__eeprom_end+0xff7efa82>
      94:	f5 cc       	rjmp	.-1558   	; 0xfffffa80 <__eeprom_end+0xff7efa80>
      96:	f4 cc       	rjmp	.-1560   	; 0xfffffa80 <__eeprom_end+0xff7efa80>

00000098 <__ctors_start>:
      98:	7d 0a       	sbc	r7, r29

0000009a <__ctors_end>:
      9a:	93 0a       	sbc	r9, r19

0000009c <__dtors_end>:
      9c:	11 24       	eor	r1, r1
      9e:	1f be       	out	0x3f, r1	; 63
      a0:	cf e5       	ldi	r28, 0x5F	; 95
      a2:	d4 e0       	ldi	r29, 0x04	; 4
      a4:	de bf       	out	0x3e, r29	; 62
      a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
      a8:	11 e0       	ldi	r17, 0x01	; 1
      aa:	a0 e6       	ldi	r26, 0x60	; 96
      ac:	b0 e0       	ldi	r27, 0x00	; 0
      ae:	e2 e2       	ldi	r30, 0x22	; 34
      b0:	ff e1       	ldi	r31, 0x1F	; 31
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x10>
      b4:	05 90       	lpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	ac 32       	cpi	r26, 0x2C	; 44
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0xc>

000000be <__do_clear_bss>:
      be:	21 e0       	ldi	r18, 0x01	; 1
      c0:	ac e2       	ldi	r26, 0x2C	; 44
      c2:	b1 e0       	ldi	r27, 0x01	; 1
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	ac 3c       	cpi	r26, 0xCC	; 204
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>

000000ce <__do_global_ctors>:
      ce:	10 e0       	ldi	r17, 0x00	; 0
      d0:	cd e4       	ldi	r28, 0x4D	; 77
      d2:	d0 e0       	ldi	r29, 0x00	; 0
      d4:	03 c0       	rjmp	.+6      	; 0xdc <__do_global_ctors+0xe>
      d6:	21 97       	sbiw	r28, 0x01	; 1
      d8:	fe 01       	movw	r30, r28
      da:	e4 dd       	rcall	.-1080   	; 0xfffffca4 <__eeprom_end+0xff7efca4>
      dc:	cc 34       	cpi	r28, 0x4C	; 76
      de:	d1 07       	cpc	r29, r17
      e0:	d1 f7       	brne	.-12     	; 0xd6 <__do_global_ctors+0x8>
      e2:	8f da       	rcall	.-2786   	; 0xfffff602 <__eeprom_end+0xff7ef602>
      e4:	12 cf       	rjmp	.-476    	; 0xffffff0a <__eeprom_end+0xff7eff0a>

000000e6 <_ZN13CDGUSDatabaseC1Ev>:
	m_cpSender->WaitMODBUSTransmitter();
	
	_delay_ms(400);
	
	//WriteDisable();
}
      e6:	08 95       	ret

000000e8 <_ZN13CDGUSDatabaseD1Ev>:
      e8:	08 95       	ret

000000ea <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
      ea:	0f 93       	push	r16
	DDRD |= 0x02; // PD1 - output
      ec:	89 9a       	sbi	0x11, 1	; 17
	DDRD &= 0xFE; // PD0 - input
      ee:	88 98       	cbi	0x11, 0	; 17
	PORTD |= 0x0;
      f0:	82 b3       	in	r24, 0x12	; 18
      f2:	82 bb       	out	0x12, r24	; 18
	
	// Control and status register
#ifdef U2X
	UCSRA = (1 << U2X);
      f4:	82 e0       	ldi	r24, 0x02	; 2
      f6:	8b b9       	out	0x0b, r24	; 11
	UCSRA = (0 << U2X);
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
      f8:	41 30       	cpi	r20, 0x01	; 1
      fa:	19 f0       	breq	.+6      	; 0x102 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x18>
      fc:	42 30       	cpi	r20, 0x02	; 2
      fe:	19 f0       	breq	.+6      	; 0x106 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x1c>
     100:	04 c0       	rjmp	.+8      	; 0x10a <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x20>
	{
		case DISABLE:
			temp |= PARITY_DISABLED;
		break;
		case EVEN:
			temp |= PARITY_EVEN;
     102:	80 e2       	ldi	r24, 0x20	; 32
     104:	03 c0       	rjmp	.+6      	; 0x10c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x22>
		break;
		case ODD:
			temp |= PARITY_ODD;
     106:	80 e3       	ldi	r24, 0x30	; 48
		break;
     108:	01 c0       	rjmp	.+2      	; 0x10c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x22>
#else
	UCSRA = (0 << U2X);
#endif

	// Parity param set
	uint8_t temp = 0;
     10a:	80 e0       	ldi	r24, 0x00	; 0
			temp |= PARITY_ODD;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
     10c:	21 30       	cpi	r18, 0x01	; 1
     10e:	09 f4       	brne	.+2      	; 0x112 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x28>
	{
		case STOP_1BIT:
			temp |= STOPBITS_1BIT;
		break;
		case STOP_2BIT:
			temp |= STOPBITS_2BIT;
     110:	88 60       	ori	r24, 0x08	; 8
		break;
	}

	// Configure USART
	UCSRB = (1 << RXCIE) | (1 << TXCIE) | (1 << RXEN) | (1 << TXEN);
     112:	98 ed       	ldi	r25, 0xD8	; 216
     114:	9a b9       	out	0x0a, r25	; 10
	UCSRC = ((Async?0:1) << UMSEL) | temp | (3 << UCSZ0); // 8 bit
     116:	01 11       	cpse	r16, r1
     118:	02 c0       	rjmp	.+4      	; 0x11e <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
     11a:	90 e4       	ldi	r25, 0x40	; 64
     11c:	01 c0       	rjmp	.+2      	; 0x120 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	86 60       	ori	r24, 0x06	; 6
     122:	89 2b       	or	r24, r25
     124:	80 bd       	out	0x20, r24	; 32
	
	// Set baud rate
	uint16_t UBRR = ubrr_table[baud];
     126:	e6 2f       	mov	r30, r22
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	ee 0f       	add	r30, r30
     12c:	ff 1f       	adc	r31, r31
     12e:	ea 59       	subi	r30, 0x9A	; 154
     130:	ff 4f       	sbci	r31, 0xFF	; 255
     132:	90 81       	ld	r25, Z
     134:	81 81       	ldd	r24, Z+1	; 0x01
	UBRRL = (uint8_t)(UBRR & 0xff);
     136:	99 b9       	out	0x09, r25	; 9
	UBRRH = (uint8_t)(UBRR >> 8);
     138:	80 bd       	out	0x20, r24	; 32
} //CUSART
     13a:	0f 91       	pop	r16
     13c:	08 95       	ret

0000013e <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return UDR;
     13e:	8c b1       	in	r24, 0x0c	; 12
}
     140:	08 95       	ret

00000142 <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( !( UCSRA & (1<<UDRE)) );
	UDR = data;
     142:	6c b9       	out	0x0c, r22	; 12
     144:	08 95       	ret

00000146 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USART_RXC_vect_num] = sender;
     146:	70 93 6c 01 	sts	0x016C, r23
     14a:	60 93 6b 01 	sts	0x016B, r22
	InterruptFuncTable[USART_RXC_vect_num] = callback;
     14e:	50 93 46 01 	sts	0x0146, r21
     152:	40 93 45 01 	sts	0x0145, r20
     156:	08 95       	ret

00000158 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USART_TXC_vect_num] = sender;
     158:	70 93 70 01 	sts	0x0170, r23
     15c:	60 93 6f 01 	sts	0x016F, r22
	InterruptFuncTable[USART_TXC_vect_num] = callback;
     160:	50 93 4a 01 	sts	0x014A, r21
     164:	40 93 49 01 	sts	0x0149, r20
     168:	08 95       	ret

0000016a <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return (UCSRA & (1<<TXC)) == 0;
     16a:	8b b1       	in	r24, 0x0b	; 11
     16c:	86 fb       	bst	r24, 6
     16e:	88 27       	eor	r24, r24
     170:	80 f9       	bld	r24, 0
}
     172:	91 e0       	ldi	r25, 0x01	; 1
     174:	89 27       	eor	r24, r25
     176:	08 95       	ret

00000178 <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return (UCSRA & (1<<RXC)) == 0;
     178:	8b b1       	in	r24, 0x0b	; 11
     17a:	80 95       	com	r24
}
     17c:	88 1f       	adc	r24, r24
     17e:	88 27       	eor	r24, r24
     180:	88 1f       	adc	r24, r24
     182:	08 95       	ret

00000184 <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return (UCSRA & (1<<UDRE)) == 0;
     184:	8b b1       	in	r24, 0x0b	; 11
     186:	85 fb       	bst	r24, 5
     188:	88 27       	eor	r24, r24
     18a:	80 f9       	bld	r24, 0
}
     18c:	91 e0       	ldi	r25, 0x01	; 1
     18e:	89 27       	eor	r24, r25
     190:	08 95       	ret

00000192 <_ZN10CDGUSUSARTC1Ev>:
#else
uint16_t ubrr_table[14] = {416u, 207u, 103u, 68u, 51u, 34u, 25u, 16u, 12u, 8u, 3u, 3u, 1u, 0u};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
     196:	ec 01       	movw	r28, r24
     198:	7e d6       	rcall	.+3324   	; 0xe96 <_ZN6CUSARTC1Ev>
     19a:	89 e8       	ldi	r24, 0x89	; 137
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	99 83       	std	Y+1, r25	; 0x01
     1a0:	88 83       	st	Y, r24
{
} //CDGUSUSART
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	08 95       	ret

000001a8 <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
     1a8:	29 e8       	ldi	r18, 0x89	; 137
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	fc 01       	movw	r30, r24
     1ae:	31 83       	std	Z+1, r19	; 0x01
     1b0:	20 83       	st	Z, r18
     1b2:	77 d6       	rcall	.+3310   	; 0xea2 <_ZN6CUSARTD1Ev>
     1b4:	08 95       	ret

000001b6 <_ZN11CLaserBoardC1Ev>:
#include <avr/interrupt.h>
#include <avr/io.h>
#include <util/delay.h>

// default constructor
CLaserBoard::CLaserBoard()
     1b6:	08 95       	ret

000001b8 <_ZN11CLaserBoardD1Ev>:
{
} //CLaserBoard

// default destructor
CLaserBoard::~CLaserBoard()
     1b8:	08 95       	ret

000001ba <_ZN11CLaserBoard8Relay1OnEv>:
	OCR1B = 0xff;
}

void CLaserBoard::Relay1On()
{
	PORTC |= (1 << PC1);
     1ba:	a9 9a       	sbi	0x15, 1	; 21
     1bc:	08 95       	ret

000001be <_ZN11CLaserBoard8Relay2OnEv>:
}

void CLaserBoard::Relay2On()
{
	PORTD |= (1 << PD7);
     1be:	97 9a       	sbi	0x12, 7	; 18
     1c0:	08 95       	ret

000001c2 <_ZN11CLaserBoard9Relay1OffEv>:
}

void CLaserBoard::Relay1Off()
{
	PORTC &= ~(1 << PC1);
     1c2:	a9 98       	cbi	0x15, 1	; 21
     1c4:	08 95       	ret

000001c6 <_ZN11CLaserBoard9Relay2OffEv>:
}

void CLaserBoard::Relay2Off()
{
	PORTD &= ~(1 << PD7);
     1c6:	97 98       	cbi	0x12, 7	; 18
     1c8:	08 95       	ret

000001ca <_ZN11CLaserBoard14SPI_MasterInitEv>:
}

void CLaserBoard::SPI_MasterInit()
{
	DDRB = (1 << PB3) | (1 << PB2) | (1 << PB5) | (1 << PB1);
     1ca:	8e e2       	ldi	r24, 0x2E	; 46
     1cc:	87 bb       	out	0x17, r24	; 23
	PORTB = 0;
     1ce:	18 ba       	out	0x18, r1	; 24
	
	SPSR = 0;
     1d0:	1e b8       	out	0x0e, r1	; 14
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << CPOL) /*| (1 << CPHA)*/ | (1 << SPR1) | (1 << SPR0) /*| (1 << DORD)*/;
     1d2:	8b e5       	ldi	r24, 0x5B	; 91
     1d4:	8d b9       	out	0x0d, r24	; 13
     1d6:	08 95       	ret

000001d8 <_ZN11CLaserBoard10Init_RelayEv>:
} //~CLaserBoard

// Initialize GPIO
void CLaserBoard::Init_Relay()
{
	PORTC = 0;
     1d8:	15 ba       	out	0x15, r1	; 21
	PORTD = 0;
     1da:	12 ba       	out	0x12, r1	; 18
	DDRC = (1 << PC1);
     1dc:	22 e0       	ldi	r18, 0x02	; 2
     1de:	24 bb       	out	0x14, r18	; 20
	DDRD = (1 << PD7);
     1e0:	20 e8       	ldi	r18, 0x80	; 128
     1e2:	21 bb       	out	0x11, r18	; 17
	
	SPI_MasterInit();
     1e4:	f2 df       	rcall	.-28     	; 0x1ca <_ZN11CLaserBoard14SPI_MasterInitEv>
	
	// Timer 1
	PORTB &= ~(1 << PB1);
     1e6:	c1 98       	cbi	0x18, 1	; 24
	DDRB |= (1 << PB1);
     1e8:	b9 9a       	sbi	0x17, 1	; 23
	
	TCCR1A = (1 << WGM10) | (1 << WGM11) | (1 << COM1A1); // 8bit PWM phase correct non-inverting mode, OCA connected
     1ea:	83 e8       	ldi	r24, 0x83	; 131
     1ec:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << WGM12) | (1 << CS10); // no prescaling
     1ee:	89 e0       	ldi	r24, 0x09	; 9
     1f0:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << TOIE1); // Enable Overflow interrupt
     1f2:	89 b7       	in	r24, 0x39	; 57
     1f4:	84 60       	ori	r24, 0x04	; 4
     1f6:	89 bf       	out	0x39, r24	; 57
	
	OCR1A = 0xff;
     1f8:	8f ef       	ldi	r24, 0xFF	; 255
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	9b bd       	out	0x2b, r25	; 43
     1fe:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 0xff;
     200:	99 bd       	out	0x29, r25	; 41
     202:	88 bd       	out	0x28, r24	; 40
     204:	08 95       	ret

00000206 <_ZN11CLaserBoard18SPI_MasterTransmitEc>:
}

void CLaserBoard::SPI_MasterTransmit(char data)
{
	/* Start transmission */
	SPDR = data;
     206:	6f b9       	out	0x0f, r22	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
     208:	77 9b       	sbis	0x0e, 7	; 14
     20a:	fe cf       	rjmp	.-4      	; 0x208 <_ZN11CLaserBoard18SPI_MasterTransmitEc+0x2>
	;
}
     20c:	08 95       	ret

0000020e <_ZN11CLaserBoard11SetDACValueEj>:

void CLaserBoard::SetDACValue(uint16_t data)
{
     20e:	0f 93       	push	r16
     210:	1f 93       	push	r17
     212:	cf 93       	push	r28
     214:	8c 01       	movw	r16, r24
     216:	c6 2f       	mov	r28, r22
	PORTB |= (1 << PB2);
     218:	c2 9a       	sbi	0x18, 2	; 24
	
	SPI_MasterTransmit(~(uint8_t)(data >> 8));
     21a:	67 2f       	mov	r22, r23
     21c:	60 95       	com	r22
     21e:	f3 df       	rcall	.-26     	; 0x206 <_ZN11CLaserBoard18SPI_MasterTransmitEc>
	SPI_MasterTransmit(~(uint8_t)(data & 0xff));
     220:	6c 2f       	mov	r22, r28
     222:	60 95       	com	r22
     224:	c8 01       	movw	r24, r16
     226:	ef df       	rcall	.-34     	; 0x206 <_ZN11CLaserBoard18SPI_MasterTransmitEc>
	
	PORTB &= ~(1 << PB2);
     228:	c2 98       	cbi	0x18, 2	; 24
}
     22a:	cf 91       	pop	r28
     22c:	1f 91       	pop	r17
     22e:	0f 91       	pop	r16
     230:	08 95       	ret

00000232 <_ZN11CLaserBoard15SetINT1CallbackEPFvPvES0_>:

void CLaserBoard::SetINT1Callback(ISRCallback func, void* owner)
{
	MCUCR = (1 << ISC11) | (1 << ISC10);
     232:	8c e0       	ldi	r24, 0x0C	; 12
     234:	85 bf       	out	0x35, r24	; 53
	GICR = (1 << INT1);
     236:	80 e8       	ldi	r24, 0x80	; 128
     238:	8b bf       	out	0x3b, r24	; 59
	
	InterruptFuncTable[INT1_vect_num] = func;
     23a:	70 93 34 01 	sts	0x0134, r23
     23e:	60 93 33 01 	sts	0x0133, r22
	InterruptSenderTable[INT1_vect_num] = owner;
     242:	50 93 5a 01 	sts	0x015A, r21
     246:	40 93 59 01 	sts	0x0159, r20
     24a:	08 95       	ret

0000024c <_ZN11CLaserBoard15SetTIM1CallbackEPFvPvES0_>:
}

void CLaserBoard::SetTIM1Callback(ISRCallback func, void* owner)
{
	InterruptFuncTable[TIMER1_OVF_vect_num] = func;
     24c:	70 93 40 01 	sts	0x0140, r23
     250:	60 93 3f 01 	sts	0x013F, r22
	InterruptSenderTable[TIMER1_OVF_vect_num] = owner;
     254:	50 93 66 01 	sts	0x0166, r21
     258:	40 93 65 01 	sts	0x0165, r20
     25c:	08 95       	ret

0000025e <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
{
} //~CLaserControlApp

// CMBEventsHandler
void CLaserControlApp::OnTransactionCallback(uint8_t* data, uint16_t length)
{
     25e:	08 95       	ret

00000260 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
			//CLaserBoard::Beep();
	}
}

void CLaserControlApp::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
     260:	dc 01       	movw	r26, r24
	// Update GUI registers
	if (addr == 0x03)	PIC_ID = data[1];
     262:	63 30       	cpi	r22, 0x03	; 3
     264:	29 f4       	brne	.+10     	; 0x270 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x10>
     266:	fa 01       	movw	r30, r20
     268:	81 81       	ldd	r24, Z+1	; 0x01
     26a:	1d 96       	adiw	r26, 0x0d	; 13
     26c:	8c 93       	st	X, r24
     26e:	1d 97       	sbiw	r26, 0x0d	; 13
	
	switch (PIC_ID)
     270:	1d 96       	adiw	r26, 0x0d	; 13
     272:	ec 91       	ld	r30, X
     274:	1d 97       	sbiw	r26, 0x0d	; 13
     276:	4e 2f       	mov	r20, r30
     278:	50 e0       	ldi	r21, 0x00	; 0
     27a:	43 32       	cpi	r20, 0x23	; 35
     27c:	51 05       	cpc	r21, r1
     27e:	50 f5       	brcc	.+84     	; 0x2d4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
     280:	fa 01       	movw	r30, r20
     282:	ed 5e       	subi	r30, 0xED	; 237
     284:	ff 4f       	sbci	r31, 0xFF	; 255
     286:	09 94       	ijmp
	{
		case PICID_LOGO:
			state = APP_LOGO;
     288:	1c 96       	adiw	r26, 0x0c	; 12
     28a:	1c 92       	st	X, r1
		break;
     28c:	08 95       	ret
		case PICID_SETUP:
			state = APP_SETUP;
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	1c 96       	adiw	r26, 0x0c	; 12
     292:	8c 93       	st	X, r24
		break;
     294:	08 95       	ret
		case PICID_TIMER:
			state = APP_RUN;
     296:	83 e0       	ldi	r24, 0x03	; 3
     298:	1c 96       	adiw	r26, 0x0c	; 12
     29a:	8c 93       	st	X, r24
		break;
     29c:	08 95       	ret
		case PICID_OnTimerStart:
			state = APP_OnTimerResume;
     29e:	85 e0       	ldi	r24, 0x05	; 5
     2a0:	1c 96       	adiw	r26, 0x0c	; 12
     2a2:	8c 93       	st	X, r24
		break;
     2a4:	08 95       	ret
		case PICID_OnStart:
			state = APP_OnTimerStart;
     2a6:	84 e0       	ldi	r24, 0x04	; 4
     2a8:	1c 96       	adiw	r26, 0x0c	; 12
     2aa:	8c 93       	st	X, r24
		break;
     2ac:	08 95       	ret
		case PICID_OnPause:
			state = APP_OnTimerPause;
     2ae:	86 e0       	ldi	r24, 0x06	; 6
     2b0:	1c 96       	adiw	r26, 0x0c	; 12
     2b2:	8c 93       	st	X, r24
		break;
     2b4:	08 95       	ret
		case PICID_OnRestart:
			state = APP_OnTimerRestart;
     2b6:	88 e0       	ldi	r24, 0x08	; 8
     2b8:	1c 96       	adiw	r26, 0x0c	; 12
     2ba:	8c 93       	st	X, r24
		break;
     2bc:	08 95       	ret
		case PICID_OnStop:
			state = APP_OnTimerStop;
     2be:	87 e0       	ldi	r24, 0x07	; 7
     2c0:	1c 96       	adiw	r26, 0x0c	; 12
     2c2:	8c 93       	st	X, r24
		break;
     2c4:	08 95       	ret
		case PICID_OnH_L:
			state = APP_OnHL;
     2c6:	89 e0       	ldi	r24, 0x09	; 9
     2c8:	1c 96       	adiw	r26, 0x0c	; 12
     2ca:	8c 93       	st	X, r24
		break;
     2cc:	08 95       	ret
		case PICID_OnTimerSave:
			state = APP_OnSaveSetup;
     2ce:	8a e0       	ldi	r24, 0x0A	; 10
     2d0:	1c 96       	adiw	r26, 0x0c	; 12
     2d2:	8c 93       	st	X, r24
     2d4:	08 95       	ret

000002d6 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:
extern CRelayTimer relayTimer;
extern CLaserBoard laserBoard;

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
     2d6:	fa 01       	movw	r30, r20
     2d8:	20 81       	ld	r18, Z
     2da:	31 81       	ldd	r19, Z+1	; 0x01
     2dc:	32 27       	eor	r19, r18
     2de:	23 27       	eor	r18, r19
     2e0:	32 27       	eor	r19, r18

void CLaserControlApp::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
	// Update GUI variables	
	uint16_t val = swap(*((uint16_t*)data));
	switch (addr)
     2e2:	61 30       	cpi	r22, 0x01	; 1
     2e4:	71 05       	cpc	r23, r1
     2e6:	59 f0       	breq	.+22     	; 0x2fe <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x28>
     2e8:	20 f0       	brcs	.+8      	; 0x2f2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x1c>
     2ea:	63 30       	cpi	r22, 0x03	; 3
     2ec:	71 05       	cpc	r23, r1
     2ee:	69 f0       	breq	.+26     	; 0x30a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x34>
     2f0:	08 95       	ret
	{
		case VARIABLE_ADDR_MIN:
			m_wSetMin = val;
     2f2:	fc 01       	movw	r30, r24
     2f4:	35 8b       	std	Z+21, r19	; 0x15
     2f6:	24 8b       	std	Z+20, r18	; 0x14
			m_wMinutes = val;
     2f8:	37 87       	std	Z+15, r19	; 0x0f
     2fa:	26 87       	std	Z+14, r18	; 0x0e
		break;
     2fc:	08 95       	ret
		case VARIABLE_ADDR_SEC:
			m_wSetSec = val;
     2fe:	fc 01       	movw	r30, r24
     300:	37 8b       	std	Z+23, r19	; 0x17
     302:	26 8b       	std	Z+22, r18	; 0x16
			m_wSeconds = val;
     304:	31 8b       	std	Z+17, r19	; 0x11
     306:	20 8b       	std	Z+16, r18	; 0x10
		break;
     308:	08 95       	ret
		case VARIABLE_ADDR_MSC:
			// Not used
		break;
		case VARIABLE_ADDR_PWR:
			m_wPower = val;
     30a:	fc 01       	movw	r30, r24
     30c:	31 8f       	std	Z+25, r19	; 0x19
     30e:	20 8f       	std	Z+24, r18	; 0x18
     310:	08 95       	ret

00000312 <_ZN16CLaserControlAppC1Ev>:
	else
		return y;
}

// default constructor
CLaserControlApp::CLaserControlApp()
     312:	2d e9       	ldi	r18, 0x9D	; 157
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	fc 01       	movw	r30, r24
     318:	31 83       	std	Z+1, r19	; 0x01
     31a:	20 83       	st	Z, r18
     31c:	08 95       	ret

0000031e <_ZN16CLaserControlAppD1Ev>:
{
} //CLaserControlApp

// default destructor
CLaserControlApp::~CLaserControlApp()
     31e:	2d e9       	ldi	r18, 0x9D	; 157
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	fc 01       	movw	r30, r24
     324:	31 83       	std	Z+1, r19	; 0x01
     326:	20 83       	st	Z, r18
     328:	7e da       	rcall	.-2820   	; 0xfffff826 <__eeprom_end+0xff7ef826>
     32a:	08 95       	ret

0000032c <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
     32c:	fc 01       	movw	r30, r24
	// GUI class initialization
	m_cpSender = sender;
     32e:	75 8f       	std	Z+29, r23	; 0x1d
     330:	64 8f       	std	Z+28, r22	; 0x1c
	//relayTimer.Initialize(WGM_CTC, COM_Clear, CS_DIV64, false);
	//timer.SetPeriod(25000); // Every 10 ms
	//relayTimer.SetOVFCallback(OnTimerStatic, this); // Enable interrupt
	
	// Set global variables
	PIC_ID = 0;
     332:	15 86       	std	Z+13, r1	; 0x0d
	m_wSetMin = 1;
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	95 8b       	std	Z+21, r25	; 0x15
     33a:	84 8b       	std	Z+20, r24	; 0x14
	m_wSetSec = 30;
     33c:	8e e1       	ldi	r24, 0x1E	; 30
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	97 8b       	std	Z+23, r25	; 0x17
     342:	86 8b       	std	Z+22, r24	; 0x16
	m_wMillSec = 0;
     344:	13 8a       	std	Z+19, r1	; 0x13
     346:	12 8a       	std	Z+18, r1	; 0x12
	m_wMinutes = m_wSetMin;
     348:	84 89       	ldd	r24, Z+20	; 0x14
     34a:	95 89       	ldd	r25, Z+21	; 0x15
     34c:	97 87       	std	Z+15, r25	; 0x0f
     34e:	86 87       	std	Z+14, r24	; 0x0e
	m_wSeconds = m_wSetSec;
     350:	86 89       	ldd	r24, Z+22	; 0x16
     352:	97 89       	ldd	r25, Z+23	; 0x17
     354:	91 8b       	std	Z+17, r25	; 0x11
     356:	80 8b       	std	Z+16, r24	; 0x10
	m_wPower = 0;
     358:	11 8e       	std	Z+25, r1	; 0x19
     35a:	10 8e       	std	Z+24, r1	; 0x18
     35c:	08 95       	ret

0000035e <_ZN16CLaserControlApp5StartEv>:
}

void CLaserControlApp::Start()
{	
     35e:	0f 93       	push	r16
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	cd b7       	in	r28, 0x3d	; 61
     368:	de b7       	in	r29, 0x3e	; 62
     36a:	28 97       	sbiw	r28, 0x08	; 8
     36c:	0f b6       	in	r0, 0x3f	; 63
     36e:	f8 94       	cli
     370:	de bf       	out	0x3e, r29	; 62
     372:	0f be       	out	0x3f, r0	; 63
     374:	cd bf       	out	0x3d, r28	; 61
     376:	8c 01       	movw	r16, r24
	// Startup DGUS initialization
	uint16_t pic_id = swap(1);
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	91 e0       	ldi	r25, 0x01	; 1
     37c:	98 87       	std	Y+8, r25	; 0x08
     37e:	8f 83       	std	Y+7, r24	; 0x07
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     380:	22 e0       	ldi	r18, 0x02	; 2
     382:	ae 01       	movw	r20, r28
     384:	49 5f       	subi	r20, 0xF9	; 249
     386:	5f 4f       	sbci	r21, 0xFF	; 255
     388:	63 e0       	ldi	r22, 0x03	; 3
     38a:	f8 01       	movw	r30, r16
     38c:	84 8d       	ldd	r24, Z+28	; 0x1c
     38e:	95 8d       	ldd	r25, Z+29	; 0x1d
     390:	f6 db       	rcall	.-2068   	; 0xfffffb7e <__eeprom_end+0xff7efb7e>
	m_cpSender->WaitMODBUSTransmitter();
     392:	f8 01       	movw	r30, r16
     394:	84 8d       	ldd	r24, Z+28	; 0x1c
     396:	95 8d       	ldd	r25, Z+29	; 0x1d
     398:	2b dc       	rcall	.-1962   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
	
	//Setup variables
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MIN, (uint16_t*)&m_wSetMin, 2);
     39a:	a8 01       	movw	r20, r16
     39c:	4c 5e       	subi	r20, 0xEC	; 236
     39e:	5f 4f       	sbci	r21, 0xFF	; 255
     3a0:	22 e0       	ldi	r18, 0x02	; 2
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	60 e0       	ldi	r22, 0x00	; 0
     3a6:	70 e0       	ldi	r23, 0x00	; 0
     3a8:	f8 01       	movw	r30, r16
     3aa:	84 8d       	ldd	r24, Z+28	; 0x1c
     3ac:	95 8d       	ldd	r25, Z+29	; 0x1d
     3ae:	f5 db       	rcall	.-2070   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
	m_cpSender->WaitMODBUSTransmitter();
     3b0:	f8 01       	movw	r30, r16
     3b2:	84 8d       	ldd	r24, Z+28	; 0x1c
     3b4:	95 8d       	ldd	r25, Z+29	; 0x1d
     3b6:	1c dc       	rcall	.-1992   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_SEC, (uint16_t*)&m_wSetSec, 2);
     3b8:	a8 01       	movw	r20, r16
     3ba:	4a 5e       	subi	r20, 0xEA	; 234
     3bc:	5f 4f       	sbci	r21, 0xFF	; 255
     3be:	22 e0       	ldi	r18, 0x02	; 2
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	61 e0       	ldi	r22, 0x01	; 1
     3c4:	70 e0       	ldi	r23, 0x00	; 0
     3c6:	f8 01       	movw	r30, r16
     3c8:	84 8d       	ldd	r24, Z+28	; 0x1c
     3ca:	95 8d       	ldd	r25, Z+29	; 0x1d
     3cc:	e6 db       	rcall	.-2100   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
	m_cpSender->WaitMODBUSTransmitter();
     3ce:	f8 01       	movw	r30, r16
     3d0:	84 8d       	ldd	r24, Z+28	; 0x1c
     3d2:	95 8d       	ldd	r25, Z+29	; 0x1d
     3d4:	0d dc       	rcall	.-2022   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MSC, (uint16_t*)&m_wMillSec, 2);
     3d6:	a8 01       	movw	r20, r16
     3d8:	4e 5e       	subi	r20, 0xEE	; 238
     3da:	5f 4f       	sbci	r21, 0xFF	; 255
     3dc:	22 e0       	ldi	r18, 0x02	; 2
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	62 e0       	ldi	r22, 0x02	; 2
     3e2:	70 e0       	ldi	r23, 0x00	; 0
     3e4:	f8 01       	movw	r30, r16
     3e6:	84 8d       	ldd	r24, Z+28	; 0x1c
     3e8:	95 8d       	ldd	r25, Z+29	; 0x1d
     3ea:	d7 db       	rcall	.-2130   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
	m_cpSender->WaitMODBUSTransmitter();
     3ec:	f8 01       	movw	r30, r16
     3ee:	84 8d       	ldd	r24, Z+28	; 0x1c
     3f0:	95 8d       	ldd	r25, Z+29	; 0x1d
     3f2:	fe db       	rcall	.-2052   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
	m_wPower = 0;
     3f4:	f8 01       	movw	r30, r16
     3f6:	11 8e       	std	Z+25, r1	; 0x19
     3f8:	10 8e       	std	Z+24, r1	; 0x18
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_PWR, (uint16_t*)&m_wPower, 2);
     3fa:	a8 01       	movw	r20, r16
     3fc:	48 5e       	subi	r20, 0xE8	; 232
     3fe:	5f 4f       	sbci	r21, 0xFF	; 255
     400:	22 e0       	ldi	r18, 0x02	; 2
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	63 e0       	ldi	r22, 0x03	; 3
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	84 8d       	ldd	r24, Z+28	; 0x1c
     40a:	95 8d       	ldd	r25, Z+29	; 0x1d
     40c:	c6 db       	rcall	.-2164   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
	m_cpSender->WaitMODBUSTransmitter();
     40e:	f8 01       	movw	r30, r16
     410:	84 8d       	ldd	r24, Z+28	; 0x1c
     412:	95 8d       	ldd	r25, Z+29	; 0x1d
     414:	ed db       	rcall	.-2086   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
	
	uint16_t bar = 0;
	uint16_t bar1 = min(bar, 12);
     416:	1e 82       	std	Y+6, r1	; 0x06
     418:	1d 82       	std	Y+5, r1	; 0x05
	uint16_t bar2 = min(max(bar, 11), 24);
     41a:	8b e0       	ldi	r24, 0x0B	; 11
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	9c 83       	std	Y+4, r25	; 0x04
     420:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t bar3 = max(bar, 23);
     422:	87 e1       	ldi	r24, 0x17	; 23
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	9a 83       	std	Y+2, r25	; 0x02
     428:	89 83       	std	Y+1, r24	; 0x01
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR1, (uint16_t*)&bar1, 2);
     42a:	22 e0       	ldi	r18, 0x02	; 2
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	ae 01       	movw	r20, r28
     430:	4b 5f       	subi	r20, 0xFB	; 251
     432:	5f 4f       	sbci	r21, 0xFF	; 255
     434:	64 e0       	ldi	r22, 0x04	; 4
     436:	70 e0       	ldi	r23, 0x00	; 0
     438:	f8 01       	movw	r30, r16
     43a:	84 8d       	ldd	r24, Z+28	; 0x1c
     43c:	95 8d       	ldd	r25, Z+29	; 0x1d
     43e:	ad db       	rcall	.-2214   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
	m_cpSender->WaitMODBUSTransmitter();
     440:	f8 01       	movw	r30, r16
     442:	84 8d       	ldd	r24, Z+28	; 0x1c
     444:	95 8d       	ldd	r25, Z+29	; 0x1d
     446:	d4 db       	rcall	.-2136   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR2, (uint16_t*)&bar2, 2);
     448:	22 e0       	ldi	r18, 0x02	; 2
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	ae 01       	movw	r20, r28
     44e:	4d 5f       	subi	r20, 0xFD	; 253
     450:	5f 4f       	sbci	r21, 0xFF	; 255
     452:	65 e0       	ldi	r22, 0x05	; 5
     454:	70 e0       	ldi	r23, 0x00	; 0
     456:	f8 01       	movw	r30, r16
     458:	84 8d       	ldd	r24, Z+28	; 0x1c
     45a:	95 8d       	ldd	r25, Z+29	; 0x1d
     45c:	9e db       	rcall	.-2244   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
	m_cpSender->WaitMODBUSTransmitter();
     45e:	f8 01       	movw	r30, r16
     460:	84 8d       	ldd	r24, Z+28	; 0x1c
     462:	95 8d       	ldd	r25, Z+29	; 0x1d
     464:	c5 db       	rcall	.-2166   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR3, (uint16_t*)&bar3, 2);
     466:	22 e0       	ldi	r18, 0x02	; 2
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	ae 01       	movw	r20, r28
     46c:	4f 5f       	subi	r20, 0xFF	; 255
     46e:	5f 4f       	sbci	r21, 0xFF	; 255
     470:	66 e0       	ldi	r22, 0x06	; 6
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	f8 01       	movw	r30, r16
     476:	84 8d       	ldd	r24, Z+28	; 0x1c
     478:	95 8d       	ldd	r25, Z+29	; 0x1d
     47a:	8f db       	rcall	.-2274   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
	m_cpSender->WaitMODBUSTransmitter();
     47c:	f8 01       	movw	r30, r16
     47e:	84 8d       	ldd	r24, Z+28	; 0x1c
     480:	95 8d       	ldd	r25, Z+29	; 0x1d
     482:	b6 db       	rcall	.-2196   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
	
	laserBoard.SetDACValue(0);
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	83 ea       	ldi	r24, 0xA3	; 163
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	c0 de       	rcall	.-640    	; 0x20e <_ZN11CLaserBoard11SetDACValueEj>
	
	state = APP_SETUP;
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	f8 01       	movw	r30, r16
     492:	84 87       	std	Z+12, r24	; 0x0c
	
	m_wEncoder = 0;
     494:	13 8e       	std	Z+27, r1	; 0x1b
     496:	12 8e       	std	Z+26, r1	; 0x1a
}
     498:	28 96       	adiw	r28, 0x08	; 8
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	f8 94       	cli
     49e:	de bf       	out	0x3e, r29	; 62
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	cd bf       	out	0x3d, r28	; 61
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	1f 91       	pop	r17
     4aa:	0f 91       	pop	r16
     4ac:	08 95       	ret

000004ae <_ZN16CLaserControlApp9OnEncoderEv>:
	m_wMillSec -= 8;
}

void CLaserControlApp::OnEncoder()
{
	if ((PIND & (1 << PD6)) != 0)
     4ae:	86 9b       	sbis	0x10, 6	; 16
     4b0:	08 c0       	rjmp	.+16     	; 0x4c2 <_ZN16CLaserControlApp9OnEncoderEv+0x14>
	{
		//if (m_wEncoder != 100)
			m_wEncoder += 1;
     4b2:	fc 01       	movw	r30, r24
     4b4:	22 8d       	ldd	r18, Z+26	; 0x1a
     4b6:	33 8d       	ldd	r19, Z+27	; 0x1b
     4b8:	2f 5f       	subi	r18, 0xFF	; 255
     4ba:	3f 4f       	sbci	r19, 0xFF	; 255
     4bc:	33 8f       	std	Z+27, r19	; 0x1b
     4be:	22 8f       	std	Z+26, r18	; 0x1a
     4c0:	08 95       	ret
	}
	else
	{
		//if (m_wEncoder != 0)
			m_wEncoder -= 1;
     4c2:	fc 01       	movw	r30, r24
     4c4:	22 8d       	ldd	r18, Z+26	; 0x1a
     4c6:	33 8d       	ldd	r19, Z+27	; 0x1b
     4c8:	21 50       	subi	r18, 0x01	; 1
     4ca:	31 09       	sbc	r19, r1
     4cc:	33 8f       	std	Z+27, r19	; 0x1b
     4ce:	22 8f       	std	Z+26, r18	; 0x1a
     4d0:	08 95       	ret

000004d2 <_ZN16CLaserControlApp5OnPWMEv>:
	}
}

void CLaserControlApp::OnPWM()
{
     4d2:	fc 01       	movw	r30, r24
	static int16_t pwm_pulse = 0;
	static int16_t dx = 1;
	static uint8_t prescale = 0;
	
	prescale++;
     4d4:	90 91 2c 01 	lds	r25, 0x012C
     4d8:	9f 5f       	subi	r25, 0xFF	; 255
     4da:	90 93 2c 01 	sts	0x012C, r25
	
	TIFR &= (1 << TOIE1);
     4de:	98 b7       	in	r25, 0x38	; 56
     4e0:	94 70       	andi	r25, 0x04	; 4
     4e2:	98 bf       	out	0x38, r25	; 56
	
	switch (state)
     4e4:	84 85       	ldd	r24, Z+12	; 0x0c
     4e6:	81 30       	cpi	r24, 0x01	; 1
     4e8:	11 f0       	breq	.+4      	; 0x4ee <_ZN16CLaserControlApp5OnPWMEv+0x1c>
     4ea:	83 30       	cpi	r24, 0x03	; 3
     4ec:	71 f5       	brne	.+92     	; 0x54a <_ZN16CLaserControlApp5OnPWMEv+0x78>
	{
		case APP_SETUP:
		case APP_RUN:
		{
			uint16_t power = m_wPower;
     4ee:	80 8d       	ldd	r24, Z+24	; 0x18
     4f0:	91 8d       	ldd	r25, Z+25	; 0x19
			
			if (int16_t(power) < -m_wEncoder)
     4f2:	22 8d       	ldd	r18, Z+26	; 0x1a
     4f4:	33 8d       	ldd	r19, Z+27	; 0x1b
     4f6:	31 95       	neg	r19
     4f8:	21 95       	neg	r18
     4fa:	31 09       	sbc	r19, r1
     4fc:	82 17       	cp	r24, r18
     4fe:	93 07       	cpc	r25, r19
     500:	54 f0       	brlt	.+20     	; 0x516 <_ZN16CLaserControlApp5OnPWMEv+0x44>
			{
				power = 0;
			}
			else
			{
				power += m_wEncoder;
     502:	22 8d       	ldd	r18, Z+26	; 0x1a
     504:	33 8d       	ldd	r19, Z+27	; 0x1b
     506:	82 0f       	add	r24, r18
     508:	93 1f       	adc	r25, r19
     50a:	85 36       	cpi	r24, 0x65	; 101
     50c:	91 05       	cpc	r25, r1
     50e:	28 f0       	brcs	.+10     	; 0x51a <_ZN16CLaserControlApp5OnPWMEv+0x48>
     510:	84 e6       	ldi	r24, 0x64	; 100
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	02 c0       	rjmp	.+4      	; 0x51a <_ZN16CLaserControlApp5OnPWMEv+0x48>
		{
			uint16_t power = m_wPower;
			
			if (int16_t(power) < -m_wEncoder)
			{
				power = 0;
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
			{
				power += m_wEncoder;
				if (power > 100) power = 100;
			}
			
			OCR1A = (power * 255)/25;  //m_wPower * 1024 / 100
     51a:	2f ef       	ldi	r18, 0xFF	; 255
     51c:	28 9f       	mul	r18, r24
     51e:	a0 01       	movw	r20, r0
     520:	29 9f       	mul	r18, r25
     522:	50 0d       	add	r21, r0
     524:	11 24       	eor	r1, r1
     526:	9a 01       	movw	r18, r20
     528:	af ea       	ldi	r26, 0xAF	; 175
     52a:	b7 e4       	ldi	r27, 0x47	; 71
     52c:	af db       	rcall	.-2210   	; 0xfffffc8c <__eeprom_end+0xff7efc8c>
     52e:	48 1b       	sub	r20, r24
     530:	59 0b       	sbc	r21, r25
     532:	56 95       	lsr	r21
     534:	47 95       	ror	r20
     536:	84 0f       	add	r24, r20
     538:	95 1f       	adc	r25, r21
     53a:	92 95       	swap	r25
     53c:	82 95       	swap	r24
     53e:	8f 70       	andi	r24, 0x0F	; 15
     540:	89 27       	eor	r24, r25
     542:	9f 70       	andi	r25, 0x0F	; 15
     544:	89 27       	eor	r24, r25
     546:	9b bd       	out	0x2b, r25	; 43
     548:	8a bd       	out	0x2a, r24	; 42
     54a:	08 95       	ret

0000054c <_ZN16CLaserControlApp11OnPWMStaticEPv>:
}

void CLaserControlApp::OnPWMStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnPWM();
     54c:	c2 df       	rcall	.-124    	; 0x4d2 <_ZN16CLaserControlApp5OnPWMEv>
     54e:	08 95       	ret

00000550 <_ZN16CLaserControlApp15OnEncoderStaticEPv>:
}

void CLaserControlApp::OnEncoderStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnEncoder();
     550:	ae df       	rcall	.-164    	; 0x4ae <_ZN16CLaserControlApp9OnEncoderEv>
     552:	08 95       	ret

00000554 <_ZN16CLaserControlApp3RunEv>:
	m_wEncoder = 0;
}

// Process GUI
void CLaserControlApp::Run()
{
     554:	0f 93       	push	r16
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	cd b7       	in	r28, 0x3d	; 61
     55e:	de b7       	in	r29, 0x3e	; 62
     560:	2a 97       	sbiw	r28, 0x0a	; 10
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	f8 94       	cli
     566:	de bf       	out	0x3e, r29	; 62
     568:	0f be       	out	0x3f, r0	; 63
     56a:	cd bf       	out	0x3d, r28	; 61
     56c:	8c 01       	movw	r16, r24
	// Get PIC ID
	m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
     56e:	42 e0       	ldi	r20, 0x02	; 2
     570:	63 e0       	ldi	r22, 0x03	; 3
     572:	dc 01       	movw	r26, r24
     574:	5c 96       	adiw	r26, 0x1c	; 28
     576:	8d 91       	ld	r24, X+
     578:	9c 91       	ld	r25, X
     57a:	5d 97       	sbiw	r26, 0x1d	; 29
     57c:	4a db       	rcall	.-2412   	; 0xfffffc12 <__eeprom_end+0xff7efc12>
	m_cpSender->WaitMODBUSTransmitter();
     57e:	f8 01       	movw	r30, r16
     580:	84 8d       	ldd	r24, Z+28	; 0x1c
     582:	95 8d       	ldd	r25, Z+29	; 0x1d
     584:	35 db       	rcall	.-2454   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
	m_cpSender->WaitMODBUSListener();
     586:	d8 01       	movw	r26, r16
     588:	5c 96       	adiw	r26, 0x1c	; 28
     58a:	8d 91       	ld	r24, X+
     58c:	9c 91       	ld	r25, X
     58e:	5d 97       	sbiw	r26, 0x1d	; 29
     590:	e0 da       	rcall	.-2624   	; 0xfffffb52 <__eeprom_end+0xff7efb52>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     592:	bf ef       	ldi	r27, 0xFF	; 255
     594:	e0 e7       	ldi	r30, 0x70	; 112
     596:	f2 e0       	ldi	r31, 0x02	; 2
     598:	b1 50       	subi	r27, 0x01	; 1
     59a:	e0 40       	sbci	r30, 0x00	; 0
     59c:	f0 40       	sbci	r31, 0x00	; 0
     59e:	e1 f7       	brne	.-8      	; 0x598 <_ZN16CLaserControlApp3RunEv+0x44>
     5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <_ZN16CLaserControlApp3RunEv+0x4e>
     5a2:	00 00       	nop
	static uint16_t anim = 5;
	uint16_t pic_id;
	uint16_t msec;
	
	static uint16_t bar = 0;
	uint16_t bar1 = 0;
     5a4:	1e 82       	std	Y+6, r1	; 0x06
     5a6:	1d 82       	std	Y+5, r1	; 0x05
	uint16_t bar2 = 0;
     5a8:	1c 82       	std	Y+4, r1	; 0x04
     5aa:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t bar3 = 0;
     5ac:	1a 82       	std	Y+2, r1	; 0x02
     5ae:	19 82       	std	Y+1, r1	; 0x01
	
	if (state != APP_SETUP) m_wEncoder = 0;
     5b0:	d8 01       	movw	r26, r16
     5b2:	1c 96       	adiw	r26, 0x0c	; 12
     5b4:	ec 91       	ld	r30, X
     5b6:	1c 97       	sbiw	r26, 0x0c	; 12
     5b8:	e1 30       	cpi	r30, 0x01	; 1
     5ba:	89 f0       	breq	.+34     	; 0x5de <_ZN16CLaserControlApp3RunEv+0x8a>
     5bc:	5b 96       	adiw	r26, 0x1b	; 27
     5be:	1c 92       	st	X, r1
     5c0:	1e 92       	st	-X, r1
     5c2:	5a 97       	sbiw	r26, 0x1a	; 26
	
	switch (state)
     5c4:	8e 2f       	mov	r24, r30
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	8b 30       	cpi	r24, 0x0B	; 11
     5ca:	91 05       	cpc	r25, r1
     5cc:	08 f0       	brcs	.+2      	; 0x5d0 <_ZN16CLaserControlApp3RunEv+0x7c>
     5ce:	50 c3       	rjmp	.+1696   	; 0xc70 <_ZN16CLaserControlApp3RunEv+0x71c>
     5d0:	fc 01       	movw	r30, r24
     5d2:	ea 5c       	subi	r30, 0xCA	; 202
     5d4:	ff 4f       	sbci	r31, 0xFF	; 255
     5d6:	09 94       	ijmp
	{
		case APP_LOGO:
			Start(); // Start if logo
     5d8:	c8 01       	movw	r24, r16
     5da:	c1 de       	rcall	.-638    	; 0x35e <_ZN16CLaserControlApp5StartEv>
		break;
     5dc:	49 c3       	rjmp	.+1682   	; 0xc70 <_ZN16CLaserControlApp3RunEv+0x71c>
		case APP_SETUP:
			// Get Variables
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_MIN, 2);
     5de:	42 e0       	ldi	r20, 0x02	; 2
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	f8 01       	movw	r30, r16
     5e6:	84 8d       	ldd	r24, Z+28	; 0x1c
     5e8:	95 8d       	ldd	r25, Z+29	; 0x1d
     5ea:	18 db       	rcall	.-2512   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
			m_cpSender->WaitMODBUSTransmitter();
     5ec:	d8 01       	movw	r26, r16
     5ee:	5c 96       	adiw	r26, 0x1c	; 28
     5f0:	8d 91       	ld	r24, X+
     5f2:	9c 91       	ld	r25, X
     5f4:	5d 97       	sbiw	r26, 0x1d	; 29
     5f6:	fc da       	rcall	.-2568   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
			m_cpSender->WaitMODBUSListener();
     5f8:	f8 01       	movw	r30, r16
     5fa:	84 8d       	ldd	r24, Z+28	; 0x1c
     5fc:	95 8d       	ldd	r25, Z+29	; 0x1d
     5fe:	a9 da       	rcall	.-2734   	; 0xfffffb52 <__eeprom_end+0xff7efb52>
     600:	8f e3       	ldi	r24, 0x3F	; 63
     602:	9c e9       	ldi	r25, 0x9C	; 156
     604:	01 97       	sbiw	r24, 0x01	; 1
     606:	f1 f7       	brne	.-4      	; 0x604 <_ZN16CLaserControlApp3RunEv+0xb0>
     608:	00 c0       	rjmp	.+0      	; 0x60a <_ZN16CLaserControlApp3RunEv+0xb6>
     60a:	00 00       	nop
			_delay_ms(10);
			
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_SEC, 2);
     60c:	42 e0       	ldi	r20, 0x02	; 2
     60e:	61 e0       	ldi	r22, 0x01	; 1
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	d8 01       	movw	r26, r16
     614:	5c 96       	adiw	r26, 0x1c	; 28
     616:	8d 91       	ld	r24, X+
     618:	9c 91       	ld	r25, X
     61a:	5d 97       	sbiw	r26, 0x1d	; 29
     61c:	ff da       	rcall	.-2562   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
			m_cpSender->WaitMODBUSTransmitter();
     61e:	f8 01       	movw	r30, r16
     620:	84 8d       	ldd	r24, Z+28	; 0x1c
     622:	95 8d       	ldd	r25, Z+29	; 0x1d
     624:	e5 da       	rcall	.-2614   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
			m_cpSender->WaitMODBUSListener();
     626:	d8 01       	movw	r26, r16
     628:	5c 96       	adiw	r26, 0x1c	; 28
     62a:	8d 91       	ld	r24, X+
     62c:	9c 91       	ld	r25, X
     62e:	5d 97       	sbiw	r26, 0x1d	; 29
     630:	90 da       	rcall	.-2784   	; 0xfffffb52 <__eeprom_end+0xff7efb52>
     632:	ef e3       	ldi	r30, 0x3F	; 63
     634:	fc e9       	ldi	r31, 0x9C	; 156
     636:	31 97       	sbiw	r30, 0x01	; 1
     638:	f1 f7       	brne	.-4      	; 0x636 <_ZN16CLaserControlApp3RunEv+0xe2>
     63a:	00 c0       	rjmp	.+0      	; 0x63c <_ZN16CLaserControlApp3RunEv+0xe8>
     63c:	00 00       	nop
			_delay_ms(10);
			
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_PWR, 2);
     63e:	42 e0       	ldi	r20, 0x02	; 2
     640:	63 e0       	ldi	r22, 0x03	; 3
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	d8 01       	movw	r26, r16
     646:	5c 96       	adiw	r26, 0x1c	; 28
     648:	8d 91       	ld	r24, X+
     64a:	9c 91       	ld	r25, X
     64c:	5d 97       	sbiw	r26, 0x1d	; 29
     64e:	e6 da       	rcall	.-2612   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
			m_cpSender->WaitMODBUSTransmitter();
     650:	f8 01       	movw	r30, r16
     652:	84 8d       	ldd	r24, Z+28	; 0x1c
     654:	95 8d       	ldd	r25, Z+29	; 0x1d
     656:	cc da       	rcall	.-2664   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
			m_cpSender->WaitMODBUSListener();
     658:	d8 01       	movw	r26, r16
     65a:	5c 96       	adiw	r26, 0x1c	; 28
     65c:	8d 91       	ld	r24, X+
     65e:	9c 91       	ld	r25, X
     660:	5d 97       	sbiw	r26, 0x1d	; 29
     662:	77 da       	rcall	.-2834   	; 0xfffffb52 <__eeprom_end+0xff7efb52>
     664:	ef e3       	ldi	r30, 0x3F	; 63
     666:	fc e9       	ldi	r31, 0x9C	; 156
     668:	31 97       	sbiw	r30, 0x01	; 1
     66a:	f1 f7       	brne	.-4      	; 0x668 <_ZN16CLaserControlApp3RunEv+0x114>
     66c:	00 c0       	rjmp	.+0      	; 0x66e <_ZN16CLaserControlApp3RunEv+0x11a>
     66e:	00 00       	nop
			_delay_ms(10);
			
			bar = (m_wPower * 34) / 100;
     670:	d8 01       	movw	r26, r16
     672:	58 96       	adiw	r26, 0x18	; 24
     674:	8d 91       	ld	r24, X+
     676:	9c 91       	ld	r25, X
     678:	59 97       	sbiw	r26, 0x19	; 25
     67a:	42 e2       	ldi	r20, 0x22	; 34
     67c:	48 9f       	mul	r20, r24
     67e:	90 01       	movw	r18, r0
     680:	49 9f       	mul	r20, r25
     682:	30 0d       	add	r19, r0
     684:	11 24       	eor	r1, r1
     686:	36 95       	lsr	r19
     688:	27 95       	ror	r18
     68a:	36 95       	lsr	r19
     68c:	27 95       	ror	r18
     68e:	ab e7       	ldi	r26, 0x7B	; 123
     690:	b4 e1       	ldi	r27, 0x14	; 20
     692:	fc da       	rcall	.-2568   	; 0xfffffc8c <__eeprom_end+0xff7efc8c>
     694:	96 95       	lsr	r25
     696:	87 95       	ror	r24
     698:	90 93 2e 01 	sts	0x012E, r25
     69c:	80 93 2d 01 	sts	0x012D, r24
	return (data >> 8) | (data << 8);
}

uint16_t min(uint16_t x, uint16_t y)
{
	if (x < y)
     6a0:	8c 30       	cpi	r24, 0x0C	; 12
     6a2:	91 05       	cpc	r25, r1
     6a4:	18 f0       	brcs	.+6      	; 0x6ac <_ZN16CLaserControlApp3RunEv+0x158>
		return x;
	else
		return y;
     6a6:	3c e0       	ldi	r19, 0x0C	; 12
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <_ZN16CLaserControlApp3RunEv+0x15c>
}

uint16_t min(uint16_t x, uint16_t y)
{
	if (x < y)
		return x;
     6ac:	38 2f       	mov	r19, r24
     6ae:	29 2f       	mov	r18, r25
			m_cpSender->WaitMODBUSTransmitter();
			m_cpSender->WaitMODBUSListener();
			_delay_ms(10);
			
			bar = (m_wPower * 34) / 100;
			bar1 = min(bar, 12);
     6b0:	3d 83       	std	Y+5, r19	; 0x05
     6b2:	2e 83       	std	Y+6, r18	; 0x06
     6b4:	9c 01       	movw	r18, r24
     6b6:	8b 30       	cpi	r24, 0x0B	; 11
     6b8:	91 05       	cpc	r25, r1
     6ba:	10 f4       	brcc	.+4      	; 0x6c0 <_ZN16CLaserControlApp3RunEv+0x16c>
     6bc:	2b e0       	ldi	r18, 0x0B	; 11
     6be:	30 e0       	ldi	r19, 0x00	; 0
	return (data >> 8) | (data << 8);
}

uint16_t min(uint16_t x, uint16_t y)
{
	if (x < y)
     6c0:	28 31       	cpi	r18, 0x18	; 24
     6c2:	31 05       	cpc	r19, r1
     6c4:	10 f0       	brcs	.+4      	; 0x6ca <_ZN16CLaserControlApp3RunEv+0x176>
		return x;
	else
		return y;
     6c6:	28 e1       	ldi	r18, 0x18	; 24
     6c8:	30 e0       	ldi	r19, 0x00	; 0
			m_cpSender->WaitMODBUSListener();
			_delay_ms(10);
			
			bar = (m_wPower * 34) / 100;
			bar1 = min(bar, 12);
			bar2 = min(max(bar, 11), 24);
     6ca:	3c 83       	std	Y+4, r19	; 0x04
     6cc:	2b 83       	std	Y+3, r18	; 0x03
     6ce:	87 31       	cpi	r24, 0x17	; 23
     6d0:	91 05       	cpc	r25, r1
     6d2:	10 f4       	brcc	.+4      	; 0x6d8 <_ZN16CLaserControlApp3RunEv+0x184>
     6d4:	87 e1       	ldi	r24, 0x17	; 23
     6d6:	90 e0       	ldi	r25, 0x00	; 0
	return (data >> 8) | (data << 8);
}

uint16_t min(uint16_t x, uint16_t y)
{
	if (x < y)
     6d8:	82 32       	cpi	r24, 0x22	; 34
     6da:	91 05       	cpc	r25, r1
     6dc:	10 f0       	brcs	.+4      	; 0x6e2 <_ZN16CLaserControlApp3RunEv+0x18e>
		return x;
	else
		return y;
     6de:	82 e2       	ldi	r24, 0x22	; 34
     6e0:	90 e0       	ldi	r25, 0x00	; 0
			_delay_ms(10);
			
			bar = (m_wPower * 34) / 100;
			bar1 = min(bar, 12);
			bar2 = min(max(bar, 11), 24);
			bar3 = min(max(bar, 23), 34);
     6e2:	9a 83       	std	Y+2, r25	; 0x02
     6e4:	89 83       	std	Y+1, r24	; 0x01
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR1, (uint16_t*)&bar1, 2);
     6e6:	22 e0       	ldi	r18, 0x02	; 2
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	ae 01       	movw	r20, r28
     6ec:	4b 5f       	subi	r20, 0xFB	; 251
     6ee:	5f 4f       	sbci	r21, 0xFF	; 255
     6f0:	64 e0       	ldi	r22, 0x04	; 4
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	f8 01       	movw	r30, r16
     6f6:	84 8d       	ldd	r24, Z+28	; 0x1c
     6f8:	95 8d       	ldd	r25, Z+29	; 0x1d
     6fa:	4f da       	rcall	.-2914   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
			m_cpSender->WaitMODBUSTransmitter();
     6fc:	d8 01       	movw	r26, r16
     6fe:	5c 96       	adiw	r26, 0x1c	; 28
     700:	8d 91       	ld	r24, X+
     702:	9c 91       	ld	r25, X
     704:	5d 97       	sbiw	r26, 0x1d	; 29
     706:	74 da       	rcall	.-2840   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR2, (uint16_t*)&bar2, 2);
     708:	22 e0       	ldi	r18, 0x02	; 2
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	ae 01       	movw	r20, r28
     70e:	4d 5f       	subi	r20, 0xFD	; 253
     710:	5f 4f       	sbci	r21, 0xFF	; 255
     712:	65 e0       	ldi	r22, 0x05	; 5
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	f8 01       	movw	r30, r16
     718:	84 8d       	ldd	r24, Z+28	; 0x1c
     71a:	95 8d       	ldd	r25, Z+29	; 0x1d
     71c:	3e da       	rcall	.-2948   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
			m_cpSender->WaitMODBUSTransmitter();
     71e:	d8 01       	movw	r26, r16
     720:	5c 96       	adiw	r26, 0x1c	; 28
     722:	8d 91       	ld	r24, X+
     724:	9c 91       	ld	r25, X
     726:	5d 97       	sbiw	r26, 0x1d	; 29
     728:	63 da       	rcall	.-2874   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR3, (uint16_t*)&bar3, 2);
     72a:	22 e0       	ldi	r18, 0x02	; 2
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	ae 01       	movw	r20, r28
     730:	4f 5f       	subi	r20, 0xFF	; 255
     732:	5f 4f       	sbci	r21, 0xFF	; 255
     734:	66 e0       	ldi	r22, 0x06	; 6
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	f8 01       	movw	r30, r16
     73a:	84 8d       	ldd	r24, Z+28	; 0x1c
     73c:	95 8d       	ldd	r25, Z+29	; 0x1d
     73e:	2d da       	rcall	.-2982   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
			m_cpSender->WaitMODBUSTransmitter();
     740:	d8 01       	movw	r26, r16
     742:	5c 96       	adiw	r26, 0x1c	; 28
     744:	8d 91       	ld	r24, X+
     746:	9c 91       	ld	r25, X
     748:	5d 97       	sbiw	r26, 0x1d	; 29
     74a:	52 da       	rcall	.-2908   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
			
			laserBoard.SetDACValue((m_wPower * 512) / 25); // (Power * 2048) / 100
     74c:	f8 01       	movw	r30, r16
     74e:	40 8d       	ldd	r20, Z+24	; 0x18
     750:	51 8d       	ldd	r21, Z+25	; 0x19
     752:	54 2f       	mov	r21, r20
     754:	44 27       	eor	r20, r20
     756:	55 0f       	add	r21, r21
     758:	9a 01       	movw	r18, r20
     75a:	af ea       	ldi	r26, 0xAF	; 175
     75c:	b7 e4       	ldi	r27, 0x47	; 71
     75e:	96 da       	rcall	.-2772   	; 0xfffffc8c <__eeprom_end+0xff7efc8c>
     760:	48 1b       	sub	r20, r24
     762:	59 0b       	sbc	r21, r25
     764:	56 95       	lsr	r21
     766:	47 95       	ror	r20
     768:	bc 01       	movw	r22, r24
     76a:	64 0f       	add	r22, r20
     76c:	75 1f       	adc	r23, r21
     76e:	72 95       	swap	r23
     770:	62 95       	swap	r22
     772:	6f 70       	andi	r22, 0x0F	; 15
     774:	67 27       	eor	r22, r23
     776:	7f 70       	andi	r23, 0x0F	; 15
     778:	67 27       	eor	r22, r23
     77a:	83 ea       	ldi	r24, 0xA3	; 163
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	47 dd       	rcall	.-1394   	; 0x20e <_ZN11CLaserBoard11SetDACValueEj>
			
			if (m_wEncoder != 0)
     780:	d8 01       	movw	r26, r16
     782:	5a 96       	adiw	r26, 0x1a	; 26
     784:	8d 91       	ld	r24, X+
     786:	9c 91       	ld	r25, X
     788:	5b 97       	sbiw	r26, 0x1b	; 27
     78a:	89 2b       	or	r24, r25
     78c:	09 f4       	brne	.+2      	; 0x790 <_ZN16CLaserControlApp3RunEv+0x23c>
     78e:	70 c2       	rjmp	.+1248   	; 0xc70 <_ZN16CLaserControlApp3RunEv+0x71c>
			{
				if (int16_t(m_wPower) < -m_wEncoder)
     790:	58 96       	adiw	r26, 0x18	; 24
     792:	2d 91       	ld	r18, X+
     794:	3c 91       	ld	r19, X
     796:	59 97       	sbiw	r26, 0x19	; 25
     798:	5a 96       	adiw	r26, 0x1a	; 26
     79a:	8d 91       	ld	r24, X+
     79c:	9c 91       	ld	r25, X
     79e:	5b 97       	sbiw	r26, 0x1b	; 27
     7a0:	91 95       	neg	r25
     7a2:	81 95       	neg	r24
     7a4:	91 09       	sbc	r25, r1
     7a6:	28 17       	cp	r18, r24
     7a8:	39 07       	cpc	r19, r25
     7aa:	2c f4       	brge	.+10     	; 0x7b6 <_ZN16CLaserControlApp3RunEv+0x262>
				{
					m_wPower = 0;
     7ac:	59 96       	adiw	r26, 0x19	; 25
     7ae:	1c 92       	st	X, r1
     7b0:	1e 92       	st	-X, r1
     7b2:	58 97       	sbiw	r26, 0x18	; 24
     7b4:	12 c0       	rjmp	.+36     	; 0x7da <_ZN16CLaserControlApp3RunEv+0x286>
				}
				else
				{
					m_wPower += m_wEncoder;
     7b6:	f8 01       	movw	r30, r16
     7b8:	22 8d       	ldd	r18, Z+26	; 0x1a
     7ba:	33 8d       	ldd	r19, Z+27	; 0x1b
     7bc:	80 8d       	ldd	r24, Z+24	; 0x18
     7be:	91 8d       	ldd	r25, Z+25	; 0x19
     7c0:	82 0f       	add	r24, r18
     7c2:	93 1f       	adc	r25, r19
     7c4:	91 8f       	std	Z+25, r25	; 0x19
     7c6:	80 8f       	std	Z+24, r24	; 0x18
					if (m_wPower > 100) m_wPower = 100;
     7c8:	80 8d       	ldd	r24, Z+24	; 0x18
     7ca:	91 8d       	ldd	r25, Z+25	; 0x19
     7cc:	85 36       	cpi	r24, 0x65	; 101
     7ce:	91 05       	cpc	r25, r1
     7d0:	20 f0       	brcs	.+8      	; 0x7da <_ZN16CLaserControlApp3RunEv+0x286>
     7d2:	84 e6       	ldi	r24, 0x64	; 100
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	91 8f       	std	Z+25, r25	; 0x19
     7d8:	80 8f       	std	Z+24, r24	; 0x18
				}
				
				m_wEncoder = 0;
     7da:	d8 01       	movw	r26, r16
     7dc:	5b 96       	adiw	r26, 0x1b	; 27
     7de:	1c 92       	st	X, r1
     7e0:	1e 92       	st	-X, r1
     7e2:	5a 97       	sbiw	r26, 0x1a	; 26
			
				m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_PWR, (uint16_t*)&m_wPower, 2);
     7e4:	a8 01       	movw	r20, r16
     7e6:	48 5e       	subi	r20, 0xE8	; 232
     7e8:	5f 4f       	sbci	r21, 0xFF	; 255
     7ea:	22 e0       	ldi	r18, 0x02	; 2
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	63 e0       	ldi	r22, 0x03	; 3
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	5c 96       	adiw	r26, 0x1c	; 28
     7f4:	8d 91       	ld	r24, X+
     7f6:	9c 91       	ld	r25, X
     7f8:	5d 97       	sbiw	r26, 0x1d	; 29
     7fa:	cf d9       	rcall	.-3170   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
				m_cpSender->WaitMODBUSTransmitter();
     7fc:	f8 01       	movw	r30, r16
     7fe:	84 8d       	ldd	r24, Z+28	; 0x1c
     800:	95 8d       	ldd	r25, Z+29	; 0x1d
     802:	f6 d9       	rcall	.-3092   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
     804:	35 c2       	rjmp	.+1130   	; 0xc70 <_ZN16CLaserControlApp3RunEv+0x71c>
			}
		break;
		case APP_SETUPtoRUN_ANIM:
			// Play animation
			anim++;
     806:	80 91 83 00 	lds	r24, 0x0083
     80a:	90 91 84 00 	lds	r25, 0x0084
     80e:	01 96       	adiw	r24, 0x01	; 1
			if (anim > 9) {
     810:	8a 30       	cpi	r24, 0x0A	; 10
     812:	91 05       	cpc	r25, r1
     814:	28 f4       	brcc	.+10     	; 0x820 <_ZN16CLaserControlApp3RunEv+0x2cc>
				m_cpSender->WaitMODBUSTransmitter();
			}
		break;
		case APP_SETUPtoRUN_ANIM:
			// Play animation
			anim++;
     816:	90 93 84 00 	sts	0x0084, r25
     81a:	80 93 83 00 	sts	0x0083, r24
     81e:	0a c0       	rjmp	.+20     	; 0x834 <_ZN16CLaserControlApp3RunEv+0x2e0>
			if (anim > 9) {
				anim = 9;
     820:	89 e0       	ldi	r24, 0x09	; 9
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	90 93 84 00 	sts	0x0084, r25
     828:	80 93 83 00 	sts	0x0083, r24
				state = APP_RUN;
     82c:	83 e0       	ldi	r24, 0x03	; 3
     82e:	d8 01       	movw	r26, r16
     830:	1c 96       	adiw	r26, 0x0c	; 12
     832:	8c 93       	st	X, r24
extern CRelayTimer relayTimer;
extern CLaserBoard laserBoard;

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
     834:	80 91 83 00 	lds	r24, 0x0083
     838:	90 91 84 00 	lds	r25, 0x0084
     83c:	98 27       	eor	r25, r24
     83e:	89 27       	eor	r24, r25
     840:	98 27       	eor	r25, r24
			anim++;
			if (anim > 9) {
				anim = 9;
				state = APP_RUN;
			}
			pic_id = swap(anim);
     842:	9a 87       	std	Y+10, r25	; 0x0a
     844:	89 87       	std	Y+9, r24	; 0x09
			
			// Timer setup to timer run animation
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     846:	22 e0       	ldi	r18, 0x02	; 2
     848:	ae 01       	movw	r20, r28
     84a:	47 5f       	subi	r20, 0xF7	; 247
     84c:	5f 4f       	sbci	r21, 0xFF	; 255
     84e:	63 e0       	ldi	r22, 0x03	; 3
     850:	f8 01       	movw	r30, r16
     852:	84 8d       	ldd	r24, Z+28	; 0x1c
     854:	95 8d       	ldd	r25, Z+29	; 0x1d
     856:	93 d9       	rcall	.-3290   	; 0xfffffb7e <__eeprom_end+0xff7efb7e>
			m_cpSender->WaitMODBUSTransmitter();
     858:	d8 01       	movw	r26, r16
     85a:	5c 96       	adiw	r26, 0x1c	; 28
     85c:	8d 91       	ld	r24, X+
     85e:	9c 91       	ld	r25, X
     860:	5d 97       	sbiw	r26, 0x1d	; 29
     862:	c6 d9       	rcall	.-3188   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
		break;
     864:	05 c2       	rjmp	.+1034   	; 0xc70 <_ZN16CLaserControlApp3RunEv+0x71c>
		case APP_RUN:
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MIN, (uint16_t*)&m_wMinutes, 2);
     866:	22 e0       	ldi	r18, 0x02	; 2
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	a8 01       	movw	r20, r16
     86c:	42 5f       	subi	r20, 0xF2	; 242
     86e:	5f 4f       	sbci	r21, 0xFF	; 255
     870:	60 e0       	ldi	r22, 0x00	; 0
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	f8 01       	movw	r30, r16
     876:	84 8d       	ldd	r24, Z+28	; 0x1c
     878:	95 8d       	ldd	r25, Z+29	; 0x1d
     87a:	8f d9       	rcall	.-3298   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
			m_cpSender->WaitMODBUSTransmitter();
     87c:	d8 01       	movw	r26, r16
     87e:	5c 96       	adiw	r26, 0x1c	; 28
     880:	8d 91       	ld	r24, X+
     882:	9c 91       	ld	r25, X
     884:	5d 97       	sbiw	r26, 0x1d	; 29
     886:	b4 d9       	rcall	.-3224   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_SEC, (uint16_t*)&m_wSeconds, 2);
     888:	22 e0       	ldi	r18, 0x02	; 2
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	a8 01       	movw	r20, r16
     88e:	40 5f       	subi	r20, 0xF0	; 240
     890:	5f 4f       	sbci	r21, 0xFF	; 255
     892:	61 e0       	ldi	r22, 0x01	; 1
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	f8 01       	movw	r30, r16
     898:	84 8d       	ldd	r24, Z+28	; 0x1c
     89a:	95 8d       	ldd	r25, Z+29	; 0x1d
     89c:	7e d9       	rcall	.-3332   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
			m_cpSender->WaitMODBUSTransmitter();
     89e:	d8 01       	movw	r26, r16
     8a0:	5c 96       	adiw	r26, 0x1c	; 28
     8a2:	8d 91       	ld	r24, X+
     8a4:	9c 91       	ld	r25, X
     8a6:	5d 97       	sbiw	r26, 0x1d	; 29
     8a8:	a3 d9       	rcall	.-3258   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
			msec = m_wMillSec / 10;
     8aa:	f8 01       	movw	r30, r16
     8ac:	22 89       	ldd	r18, Z+18	; 0x12
     8ae:	33 89       	ldd	r19, Z+19	; 0x13
     8b0:	ad ec       	ldi	r26, 0xCD	; 205
     8b2:	bc ec       	ldi	r27, 0xCC	; 204
     8b4:	eb d9       	rcall	.-3114   	; 0xfffffc8c <__eeprom_end+0xff7efc8c>
     8b6:	96 95       	lsr	r25
     8b8:	87 95       	ror	r24
     8ba:	96 95       	lsr	r25
     8bc:	87 95       	ror	r24
     8be:	96 95       	lsr	r25
     8c0:	87 95       	ror	r24
     8c2:	98 87       	std	Y+8, r25	; 0x08
     8c4:	8f 83       	std	Y+7, r24	; 0x07
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MSC, (uint16_t*)&msec, 2);
     8c6:	22 e0       	ldi	r18, 0x02	; 2
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	ae 01       	movw	r20, r28
     8cc:	49 5f       	subi	r20, 0xF9	; 249
     8ce:	5f 4f       	sbci	r21, 0xFF	; 255
     8d0:	62 e0       	ldi	r22, 0x02	; 2
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	84 8d       	ldd	r24, Z+28	; 0x1c
     8d6:	95 8d       	ldd	r25, Z+29	; 0x1d
     8d8:	60 d9       	rcall	.-3392   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
			m_cpSender->WaitMODBUSTransmitter();
     8da:	d8 01       	movw	r26, r16
     8dc:	5c 96       	adiw	r26, 0x1c	; 28
     8de:	8d 91       	ld	r24, X+
     8e0:	9c 91       	ld	r25, X
     8e2:	5d 97       	sbiw	r26, 0x1d	; 29
     8e4:	85 d9       	rcall	.-3318   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_PWR, (uint16_t*)&m_wPower, 2);
     8e6:	22 e0       	ldi	r18, 0x02	; 2
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	a8 01       	movw	r20, r16
     8ec:	48 5e       	subi	r20, 0xE8	; 232
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	63 e0       	ldi	r22, 0x03	; 3
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	f8 01       	movw	r30, r16
     8f6:	84 8d       	ldd	r24, Z+28	; 0x1c
     8f8:	95 8d       	ldd	r25, Z+29	; 0x1d
     8fa:	4f d9       	rcall	.-3426   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
			m_cpSender->WaitMODBUSTransmitter();
     8fc:	d8 01       	movw	r26, r16
     8fe:	5c 96       	adiw	r26, 0x1c	; 28
     900:	8d 91       	ld	r24, X+
     902:	9c 91       	ld	r25, X
     904:	5d 97       	sbiw	r26, 0x1d	; 29
     906:	74 d9       	rcall	.-3352   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
			/*m_wPower++;
			if (m_wPower > 100) m_wPower = 0;
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_PWR, (uint16_t*)&m_wPower, 2);
			m_cpSender->WaitMODBUSTransmitter();*/
			
			bar = (m_wPower * 34) / 100;
     908:	f8 01       	movw	r30, r16
     90a:	80 8d       	ldd	r24, Z+24	; 0x18
     90c:	91 8d       	ldd	r25, Z+25	; 0x19
     90e:	42 e2       	ldi	r20, 0x22	; 34
     910:	48 9f       	mul	r20, r24
     912:	90 01       	movw	r18, r0
     914:	49 9f       	mul	r20, r25
     916:	30 0d       	add	r19, r0
     918:	11 24       	eor	r1, r1
     91a:	36 95       	lsr	r19
     91c:	27 95       	ror	r18
     91e:	36 95       	lsr	r19
     920:	27 95       	ror	r18
     922:	ab e7       	ldi	r26, 0x7B	; 123
     924:	b4 e1       	ldi	r27, 0x14	; 20
     926:	b2 d9       	rcall	.-3228   	; 0xfffffc8c <__eeprom_end+0xff7efc8c>
     928:	96 95       	lsr	r25
     92a:	87 95       	ror	r24
     92c:	90 93 2e 01 	sts	0x012E, r25
     930:	80 93 2d 01 	sts	0x012D, r24
	return (data >> 8) | (data << 8);
}

uint16_t min(uint16_t x, uint16_t y)
{
	if (x < y)
     934:	8c 30       	cpi	r24, 0x0C	; 12
     936:	91 05       	cpc	r25, r1
     938:	18 f0       	brcs	.+6      	; 0x940 <_ZN16CLaserControlApp3RunEv+0x3ec>
		return x;
	else
		return y;
     93a:	3c e0       	ldi	r19, 0x0C	; 12
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	02 c0       	rjmp	.+4      	; 0x944 <_ZN16CLaserControlApp3RunEv+0x3f0>
}

uint16_t min(uint16_t x, uint16_t y)
{
	if (x < y)
		return x;
     940:	38 2f       	mov	r19, r24
     942:	29 2f       	mov	r18, r25
			if (m_wPower > 100) m_wPower = 0;
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_PWR, (uint16_t*)&m_wPower, 2);
			m_cpSender->WaitMODBUSTransmitter();*/
			
			bar = (m_wPower * 34) / 100;
			bar1 = min(bar, 12);
     944:	3d 83       	std	Y+5, r19	; 0x05
     946:	2e 83       	std	Y+6, r18	; 0x06
     948:	9c 01       	movw	r18, r24
     94a:	8b 30       	cpi	r24, 0x0B	; 11
     94c:	91 05       	cpc	r25, r1
     94e:	10 f4       	brcc	.+4      	; 0x954 <_ZN16CLaserControlApp3RunEv+0x400>
     950:	2b e0       	ldi	r18, 0x0B	; 11
     952:	30 e0       	ldi	r19, 0x00	; 0
	return (data >> 8) | (data << 8);
}

uint16_t min(uint16_t x, uint16_t y)
{
	if (x < y)
     954:	28 31       	cpi	r18, 0x18	; 24
     956:	31 05       	cpc	r19, r1
     958:	10 f0       	brcs	.+4      	; 0x95e <_ZN16CLaserControlApp3RunEv+0x40a>
		return x;
	else
		return y;
     95a:	28 e1       	ldi	r18, 0x18	; 24
     95c:	30 e0       	ldi	r19, 0x00	; 0
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_PWR, (uint16_t*)&m_wPower, 2);
			m_cpSender->WaitMODBUSTransmitter();*/
			
			bar = (m_wPower * 34) / 100;
			bar1 = min(bar, 12);
			bar2 = min(max(bar, 11), 24);
     95e:	3c 83       	std	Y+4, r19	; 0x04
     960:	2b 83       	std	Y+3, r18	; 0x03
     962:	87 31       	cpi	r24, 0x17	; 23
     964:	91 05       	cpc	r25, r1
     966:	10 f4       	brcc	.+4      	; 0x96c <_ZN16CLaserControlApp3RunEv+0x418>
     968:	87 e1       	ldi	r24, 0x17	; 23
     96a:	90 e0       	ldi	r25, 0x00	; 0
			bar3 = max(bar, 23);
     96c:	9a 83       	std	Y+2, r25	; 0x02
     96e:	89 83       	std	Y+1, r24	; 0x01
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR1, (uint16_t*)&bar1, 2);
     970:	22 e0       	ldi	r18, 0x02	; 2
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	ae 01       	movw	r20, r28
     976:	4b 5f       	subi	r20, 0xFB	; 251
     978:	5f 4f       	sbci	r21, 0xFF	; 255
     97a:	64 e0       	ldi	r22, 0x04	; 4
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	d8 01       	movw	r26, r16
     980:	5c 96       	adiw	r26, 0x1c	; 28
     982:	8d 91       	ld	r24, X+
     984:	9c 91       	ld	r25, X
     986:	5d 97       	sbiw	r26, 0x1d	; 29
     988:	08 d9       	rcall	.-3568   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
			m_cpSender->WaitMODBUSTransmitter();
     98a:	f8 01       	movw	r30, r16
     98c:	84 8d       	ldd	r24, Z+28	; 0x1c
     98e:	95 8d       	ldd	r25, Z+29	; 0x1d
     990:	2f d9       	rcall	.-3490   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR2, (uint16_t*)&bar2, 2);
     992:	22 e0       	ldi	r18, 0x02	; 2
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	ae 01       	movw	r20, r28
     998:	4d 5f       	subi	r20, 0xFD	; 253
     99a:	5f 4f       	sbci	r21, 0xFF	; 255
     99c:	65 e0       	ldi	r22, 0x05	; 5
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	d8 01       	movw	r26, r16
     9a2:	5c 96       	adiw	r26, 0x1c	; 28
     9a4:	8d 91       	ld	r24, X+
     9a6:	9c 91       	ld	r25, X
     9a8:	5d 97       	sbiw	r26, 0x1d	; 29
     9aa:	f7 d8       	rcall	.-3602   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
			m_cpSender->WaitMODBUSTransmitter();
     9ac:	f8 01       	movw	r30, r16
     9ae:	84 8d       	ldd	r24, Z+28	; 0x1c
     9b0:	95 8d       	ldd	r25, Z+29	; 0x1d
     9b2:	1e d9       	rcall	.-3524   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR3, (uint16_t*)&bar3, 2);
     9b4:	22 e0       	ldi	r18, 0x02	; 2
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	ae 01       	movw	r20, r28
     9ba:	4f 5f       	subi	r20, 0xFF	; 255
     9bc:	5f 4f       	sbci	r21, 0xFF	; 255
     9be:	66 e0       	ldi	r22, 0x06	; 6
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	d8 01       	movw	r26, r16
     9c4:	5c 96       	adiw	r26, 0x1c	; 28
     9c6:	8d 91       	ld	r24, X+
     9c8:	9c 91       	ld	r25, X
     9ca:	5d 97       	sbiw	r26, 0x1d	; 29
     9cc:	e6 d8       	rcall	.-3636   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
			m_cpSender->WaitMODBUSTransmitter();
     9ce:	f8 01       	movw	r30, r16
     9d0:	84 8d       	ldd	r24, Z+28	; 0x1c
     9d2:	95 8d       	ldd	r25, Z+29	; 0x1d
     9d4:	0d d9       	rcall	.-3558   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
		break;
     9d6:	4c c1       	rjmp	.+664    	; 0xc70 <_ZN16CLaserControlApp3RunEv+0x71c>
		case APP_OnTimerStart:
			// Set Run state
			//m_wPower = 0;
			anim = 5;
     9d8:	85 e0       	ldi	r24, 0x05	; 5
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	90 93 84 00 	sts	0x0084, r25
     9e0:	80 93 83 00 	sts	0x0083, r24
			pic_id = swap(PICID_TIMER);
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	99 e1       	ldi	r25, 0x19	; 25
     9e8:	9a 87       	std	Y+10, r25	; 0x0a
     9ea:	89 87       	std	Y+9, r24	; 0x09
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     9ec:	22 e0       	ldi	r18, 0x02	; 2
     9ee:	ae 01       	movw	r20, r28
     9f0:	47 5f       	subi	r20, 0xF7	; 247
     9f2:	5f 4f       	sbci	r21, 0xFF	; 255
     9f4:	63 e0       	ldi	r22, 0x03	; 3
     9f6:	d8 01       	movw	r26, r16
     9f8:	5c 96       	adiw	r26, 0x1c	; 28
     9fa:	8d 91       	ld	r24, X+
     9fc:	9c 91       	ld	r25, X
     9fe:	5d 97       	sbiw	r26, 0x1d	; 29
     a00:	be d8       	rcall	.-3716   	; 0xfffffb7e <__eeprom_end+0xff7efb7e>
			m_cpSender->WaitMODBUSTransmitter();
     a02:	f8 01       	movw	r30, r16
     a04:	84 8d       	ldd	r24, Z+28	; 0x1c
     a06:	95 8d       	ldd	r25, Z+29	; 0x1d
     a08:	f3 d8       	rcall	.-3610   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
			
			m_wMinutes = m_wSetMin;
     a0a:	d8 01       	movw	r26, r16
     a0c:	54 96       	adiw	r26, 0x14	; 20
     a0e:	8d 91       	ld	r24, X+
     a10:	9c 91       	ld	r25, X
     a12:	55 97       	sbiw	r26, 0x15	; 21
     a14:	1f 96       	adiw	r26, 0x0f	; 15
     a16:	9c 93       	st	X, r25
     a18:	8e 93       	st	-X, r24
     a1a:	1e 97       	sbiw	r26, 0x0e	; 14
			m_wSeconds = m_wSetSec;
     a1c:	56 96       	adiw	r26, 0x16	; 22
     a1e:	8d 91       	ld	r24, X+
     a20:	9c 91       	ld	r25, X
     a22:	57 97       	sbiw	r26, 0x17	; 23
     a24:	51 96       	adiw	r26, 0x11	; 17
     a26:	9c 93       	st	X, r25
     a28:	8e 93       	st	-X, r24
     a2a:	50 97       	sbiw	r26, 0x10	; 16
			m_wMillSec = 0;
     a2c:	53 96       	adiw	r26, 0x13	; 19
     a2e:	1c 92       	st	X, r1
     a30:	1e 92       	st	-X, r1
     a32:	52 97       	sbiw	r26, 0x12	; 18
			
			// Start timer
			relayTimer.Start((uint8_t)125);
     a34:	6d e7       	ldi	r22, 0x7D	; 125
     a36:	88 ea       	ldi	r24, 0xA8	; 168
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	7f d1       	rcall	.+766    	; 0xd3a <_ZN11CRelayTimer5StartEh>
			laserBoard.Relay1On();
     a3c:	83 ea       	ldi	r24, 0xA3	; 163
     a3e:	91 e0       	ldi	r25, 0x01	; 1
     a40:	bc db       	rcall	.-2184   	; 0x1ba <_ZN11CLaserBoard8Relay1OnEv>
			
			state = APP_RUN;
     a42:	83 e0       	ldi	r24, 0x03	; 3
     a44:	f8 01       	movw	r30, r16
     a46:	84 87       	std	Z+12, r24	; 0x0c
		break;
     a48:	13 c1       	rjmp	.+550    	; 0xc70 <_ZN16CLaserControlApp3RunEv+0x71c>
		case APP_OnTimerResume:
			// Set Run state
			//m_wPower = 0;
			anim = 5;
     a4a:	85 e0       	ldi	r24, 0x05	; 5
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	90 93 84 00 	sts	0x0084, r25
     a52:	80 93 83 00 	sts	0x0083, r24
			pic_id = swap(PICID_TIMER);
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	99 e1       	ldi	r25, 0x19	; 25
     a5a:	9a 87       	std	Y+10, r25	; 0x0a
     a5c:	89 87       	std	Y+9, r24	; 0x09
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     a5e:	22 e0       	ldi	r18, 0x02	; 2
     a60:	ae 01       	movw	r20, r28
     a62:	47 5f       	subi	r20, 0xF7	; 247
     a64:	5f 4f       	sbci	r21, 0xFF	; 255
     a66:	63 e0       	ldi	r22, 0x03	; 3
     a68:	d8 01       	movw	r26, r16
     a6a:	5c 96       	adiw	r26, 0x1c	; 28
     a6c:	8d 91       	ld	r24, X+
     a6e:	9c 91       	ld	r25, X
     a70:	5d 97       	sbiw	r26, 0x1d	; 29
     a72:	85 d8       	rcall	.-3830   	; 0xfffffb7e <__eeprom_end+0xff7efb7e>
			m_cpSender->WaitMODBUSTransmitter();
     a74:	f8 01       	movw	r30, r16
     a76:	84 8d       	ldd	r24, Z+28	; 0x1c
     a78:	95 8d       	ldd	r25, Z+29	; 0x1d
     a7a:	ba d8       	rcall	.-3724   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
		
			// Start timer
			relayTimer.Start((uint8_t)125);
     a7c:	6d e7       	ldi	r22, 0x7D	; 125
     a7e:	88 ea       	ldi	r24, 0xA8	; 168
     a80:	91 e0       	ldi	r25, 0x01	; 1
     a82:	5b d1       	rcall	.+694    	; 0xd3a <_ZN11CRelayTimer5StartEh>
			laserBoard.Relay1On();
     a84:	83 ea       	ldi	r24, 0xA3	; 163
     a86:	91 e0       	ldi	r25, 0x01	; 1
     a88:	98 db       	rcall	.-2256   	; 0x1ba <_ZN11CLaserBoard8Relay1OnEv>
		
			state = APP_RUN;
     a8a:	83 e0       	ldi	r24, 0x03	; 3
     a8c:	d8 01       	movw	r26, r16
     a8e:	1c 96       	adiw	r26, 0x0c	; 12
     a90:	8c 93       	st	X, r24
		break;
     a92:	ee c0       	rjmp	.+476    	; 0xc70 <_ZN16CLaserControlApp3RunEv+0x71c>
		case APP_OnTimerStop:
			// Set Stop (return to Setup) state
			pic_id = swap(PICID_SETUP);
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	97 e1       	ldi	r25, 0x17	; 23
     a98:	9a 87       	std	Y+10, r25	; 0x0a
     a9a:	89 87       	std	Y+9, r24	; 0x09
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     a9c:	22 e0       	ldi	r18, 0x02	; 2
     a9e:	ae 01       	movw	r20, r28
     aa0:	47 5f       	subi	r20, 0xF7	; 247
     aa2:	5f 4f       	sbci	r21, 0xFF	; 255
     aa4:	63 e0       	ldi	r22, 0x03	; 3
     aa6:	f8 01       	movw	r30, r16
     aa8:	84 8d       	ldd	r24, Z+28	; 0x1c
     aaa:	95 8d       	ldd	r25, Z+29	; 0x1d
     aac:	68 d8       	rcall	.-3888   	; 0xfffffb7e <__eeprom_end+0xff7efb7e>
			m_cpSender->WaitMODBUSTransmitter();
     aae:	d8 01       	movw	r26, r16
     ab0:	5c 96       	adiw	r26, 0x1c	; 28
     ab2:	8d 91       	ld	r24, X+
     ab4:	9c 91       	ld	r25, X
     ab6:	5d 97       	sbiw	r26, 0x1d	; 29
     ab8:	9b d8       	rcall	.-3786   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
			
			// Stop timer
			relayTimer.Stop();
     aba:	88 ea       	ldi	r24, 0xA8	; 168
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	49 d1       	rcall	.+658    	; 0xd52 <_ZN11CRelayTimer4StopEv>
			laserBoard.Relay1Off();
     ac0:	83 ea       	ldi	r24, 0xA3	; 163
     ac2:	91 e0       	ldi	r25, 0x01	; 1
     ac4:	7e db       	rcall	.-2308   	; 0x1c2 <_ZN11CLaserBoard9Relay1OffEv>
			
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MIN, (uint16_t*)&m_wSetMin, 2);
     ac6:	a8 01       	movw	r20, r16
     ac8:	4c 5e       	subi	r20, 0xEC	; 236
     aca:	5f 4f       	sbci	r21, 0xFF	; 255
     acc:	22 e0       	ldi	r18, 0x02	; 2
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	f8 01       	movw	r30, r16
     ad6:	84 8d       	ldd	r24, Z+28	; 0x1c
     ad8:	95 8d       	ldd	r25, Z+29	; 0x1d
     ada:	5f d8       	rcall	.-3906   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
			m_cpSender->WaitMODBUSTransmitter();
     adc:	d8 01       	movw	r26, r16
     ade:	5c 96       	adiw	r26, 0x1c	; 28
     ae0:	8d 91       	ld	r24, X+
     ae2:	9c 91       	ld	r25, X
     ae4:	5d 97       	sbiw	r26, 0x1d	; 29
     ae6:	84 d8       	rcall	.-3832   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_SEC, (uint16_t*)&m_wSetSec, 2);
     ae8:	a8 01       	movw	r20, r16
     aea:	4a 5e       	subi	r20, 0xEA	; 234
     aec:	5f 4f       	sbci	r21, 0xFF	; 255
     aee:	22 e0       	ldi	r18, 0x02	; 2
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	61 e0       	ldi	r22, 0x01	; 1
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	f8 01       	movw	r30, r16
     af8:	84 8d       	ldd	r24, Z+28	; 0x1c
     afa:	95 8d       	ldd	r25, Z+29	; 0x1d
     afc:	4e d8       	rcall	.-3940   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
			m_cpSender->WaitMODBUSTransmitter();
     afe:	d8 01       	movw	r26, r16
     b00:	5c 96       	adiw	r26, 0x1c	; 28
     b02:	8d 91       	ld	r24, X+
     b04:	9c 91       	ld	r25, X
     b06:	5d 97       	sbiw	r26, 0x1d	; 29
     b08:	73 d8       	rcall	.-3866   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
			msec = m_wMillSec / 10;
     b0a:	f8 01       	movw	r30, r16
     b0c:	22 89       	ldd	r18, Z+18	; 0x12
     b0e:	33 89       	ldd	r19, Z+19	; 0x13
     b10:	ad ec       	ldi	r26, 0xCD	; 205
     b12:	bc ec       	ldi	r27, 0xCC	; 204
     b14:	bb d8       	rcall	.-3722   	; 0xfffffc8c <__eeprom_end+0xff7efc8c>
     b16:	96 95       	lsr	r25
     b18:	87 95       	ror	r24
     b1a:	96 95       	lsr	r25
     b1c:	87 95       	ror	r24
     b1e:	96 95       	lsr	r25
     b20:	87 95       	ror	r24
     b22:	98 87       	std	Y+8, r25	; 0x08
     b24:	8f 83       	std	Y+7, r24	; 0x07
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MSC, (uint16_t*)&msec, 2);
     b26:	22 e0       	ldi	r18, 0x02	; 2
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	ae 01       	movw	r20, r28
     b2c:	49 5f       	subi	r20, 0xF9	; 249
     b2e:	5f 4f       	sbci	r21, 0xFF	; 255
     b30:	62 e0       	ldi	r22, 0x02	; 2
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	84 8d       	ldd	r24, Z+28	; 0x1c
     b36:	95 8d       	ldd	r25, Z+29	; 0x1d
     b38:	30 d8       	rcall	.-4000   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
			m_cpSender->WaitMODBUSTransmitter();
     b3a:	d8 01       	movw	r26, r16
     b3c:	5c 96       	adiw	r26, 0x1c	; 28
     b3e:	8d 91       	ld	r24, X+
     b40:	9c 91       	ld	r25, X
     b42:	5d 97       	sbiw	r26, 0x1d	; 29
     b44:	55 d8       	rcall	.-3926   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
			
			m_wMinutes = m_wSetMin;
     b46:	f8 01       	movw	r30, r16
     b48:	84 89       	ldd	r24, Z+20	; 0x14
     b4a:	95 89       	ldd	r25, Z+21	; 0x15
     b4c:	97 87       	std	Z+15, r25	; 0x0f
     b4e:	86 87       	std	Z+14, r24	; 0x0e
			m_wSeconds = m_wSetSec;
     b50:	86 89       	ldd	r24, Z+22	; 0x16
     b52:	97 89       	ldd	r25, Z+23	; 0x17
     b54:	91 8b       	std	Z+17, r25	; 0x11
     b56:	80 8b       	std	Z+16, r24	; 0x10
			m_wMillSec = 0;
     b58:	13 8a       	std	Z+19, r1	; 0x13
     b5a:	12 8a       	std	Z+18, r1	; 0x12
			m_wPower = 0;
     b5c:	11 8e       	std	Z+25, r1	; 0x19
     b5e:	10 8e       	std	Z+24, r1	; 0x18
			
			state = APP_SETUP;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	84 87       	std	Z+12, r24	; 0x0c
		break;
     b64:	85 c0       	rjmp	.+266    	; 0xc70 <_ZN16CLaserControlApp3RunEv+0x71c>
		case APP_OnTimerPause:
			// Pause (return to Run) state
			pic_id = swap(PICID_TIMERPAUSED);
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	9a e1       	ldi	r25, 0x1A	; 26
     b6a:	9a 87       	std	Y+10, r25	; 0x0a
     b6c:	89 87       	std	Y+9, r24	; 0x09
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     b6e:	22 e0       	ldi	r18, 0x02	; 2
     b70:	ae 01       	movw	r20, r28
     b72:	47 5f       	subi	r20, 0xF7	; 247
     b74:	5f 4f       	sbci	r21, 0xFF	; 255
     b76:	63 e0       	ldi	r22, 0x03	; 3
     b78:	d8 01       	movw	r26, r16
     b7a:	5c 96       	adiw	r26, 0x1c	; 28
     b7c:	8d 91       	ld	r24, X+
     b7e:	9c 91       	ld	r25, X
     b80:	5d 97       	sbiw	r26, 0x1d	; 29
     b82:	fd d7       	rcall	.+4090   	; 0x1b7e <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     b84:	f8 01       	movw	r30, r16
     b86:	84 8d       	ldd	r24, Z+28	; 0x1c
     b88:	95 8d       	ldd	r25, Z+29	; 0x1d
     b8a:	32 d8       	rcall	.-3996   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
			relayTimer.Stop();
     b8c:	88 ea       	ldi	r24, 0xA8	; 168
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	e0 d0       	rcall	.+448    	; 0xd52 <_ZN11CRelayTimer4StopEv>
			
			laserBoard.Relay1Off();
     b92:	83 ea       	ldi	r24, 0xA3	; 163
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	15 db       	rcall	.-2518   	; 0x1c2 <_ZN11CLaserBoard9Relay1OffEv>
			
			state = APP_RUN;
     b98:	83 e0       	ldi	r24, 0x03	; 3
     b9a:	d8 01       	movw	r26, r16
     b9c:	1c 96       	adiw	r26, 0x0c	; 12
     b9e:	8c 93       	st	X, r24
		break;
     ba0:	67 c0       	rjmp	.+206    	; 0xc70 <_ZN16CLaserControlApp3RunEv+0x71c>
		case APP_OnTimerRestart:
			// Restart (return to Run) state
			pic_id = swap(PICID_TIMER);
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	99 e1       	ldi	r25, 0x19	; 25
     ba6:	9a 87       	std	Y+10, r25	; 0x0a
     ba8:	89 87       	std	Y+9, r24	; 0x09
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     baa:	22 e0       	ldi	r18, 0x02	; 2
     bac:	ae 01       	movw	r20, r28
     bae:	47 5f       	subi	r20, 0xF7	; 247
     bb0:	5f 4f       	sbci	r21, 0xFF	; 255
     bb2:	63 e0       	ldi	r22, 0x03	; 3
     bb4:	f8 01       	movw	r30, r16
     bb6:	84 8d       	ldd	r24, Z+28	; 0x1c
     bb8:	95 8d       	ldd	r25, Z+29	; 0x1d
     bba:	e1 d7       	rcall	.+4034   	; 0x1b7e <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     bbc:	d8 01       	movw	r26, r16
     bbe:	5c 96       	adiw	r26, 0x1c	; 28
     bc0:	8d 91       	ld	r24, X+
     bc2:	9c 91       	ld	r25, X
     bc4:	5d 97       	sbiw	r26, 0x1d	; 29
     bc6:	14 d8       	rcall	.-4056   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
			relayTimer.Stop();
     bc8:	88 ea       	ldi	r24, 0xA8	; 168
     bca:	91 e0       	ldi	r25, 0x01	; 1
     bcc:	c2 d0       	rcall	.+388    	; 0xd52 <_ZN11CRelayTimer4StopEv>
			
			// Reset
			m_wMinutes = m_wSetMin;
     bce:	f8 01       	movw	r30, r16
     bd0:	84 89       	ldd	r24, Z+20	; 0x14
     bd2:	95 89       	ldd	r25, Z+21	; 0x15
     bd4:	97 87       	std	Z+15, r25	; 0x0f
     bd6:	86 87       	std	Z+14, r24	; 0x0e
			m_wSeconds = m_wSetSec;
     bd8:	86 89       	ldd	r24, Z+22	; 0x16
     bda:	97 89       	ldd	r25, Z+23	; 0x17
     bdc:	91 8b       	std	Z+17, r25	; 0x11
     bde:	80 8b       	std	Z+16, r24	; 0x10
			m_wMillSec = 0;
     be0:	13 8a       	std	Z+19, r1	; 0x13
     be2:	12 8a       	std	Z+18, r1	; 0x12
			
			// Stop timer
			relayTimer.Start((uint8_t)125);
     be4:	6d e7       	ldi	r22, 0x7D	; 125
     be6:	88 ea       	ldi	r24, 0xA8	; 168
     be8:	91 e0       	ldi	r25, 0x01	; 1
     bea:	a7 d0       	rcall	.+334    	; 0xd3a <_ZN11CRelayTimer5StartEh>
			laserBoard.Relay1On();
     bec:	83 ea       	ldi	r24, 0xA3	; 163
     bee:	91 e0       	ldi	r25, 0x01	; 1
     bf0:	e4 da       	rcall	.-2616   	; 0x1ba <_ZN11CLaserBoard8Relay1OnEv>
			
			state = APP_RUN;
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	d8 01       	movw	r26, r16
     bf6:	1c 96       	adiw	r26, 0x0c	; 12
     bf8:	8c 93       	st	X, r24
		break;
     bfa:	3a c0       	rjmp	.+116    	; 0xc70 <_ZN16CLaserControlApp3RunEv+0x71c>
		case APP_OnHL:
			// Turn HL (return to Setup) state
			pic_id = swap(PICID_SETUP);
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	97 e1       	ldi	r25, 0x17	; 23
     c00:	9a 87       	std	Y+10, r25	; 0x0a
     c02:	89 87       	std	Y+9, r24	; 0x09
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     c04:	22 e0       	ldi	r18, 0x02	; 2
     c06:	ae 01       	movw	r20, r28
     c08:	47 5f       	subi	r20, 0xF7	; 247
     c0a:	5f 4f       	sbci	r21, 0xFF	; 255
     c0c:	63 e0       	ldi	r22, 0x03	; 3
     c0e:	f8 01       	movw	r30, r16
     c10:	84 8d       	ldd	r24, Z+28	; 0x1c
     c12:	95 8d       	ldd	r25, Z+29	; 0x1d
     c14:	b4 d7       	rcall	.+3944   	; 0x1b7e <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     c16:	d8 01       	movw	r26, r16
     c18:	5c 96       	adiw	r26, 0x1c	; 28
     c1a:	8d 91       	ld	r24, X+
     c1c:	9c 91       	ld	r25, X
     c1e:	5d 97       	sbiw	r26, 0x1d	; 29
     c20:	e7 d7       	rcall	.+4046   	; 0x1bf0 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			static bool hl = true;
			
			if (hl)
     c22:	80 91 82 00 	lds	r24, 0x0082
     c26:	88 23       	and	r24, r24
     c28:	21 f0       	breq	.+8      	; 0xc32 <_ZN16CLaserControlApp3RunEv+0x6de>
				laserBoard.Relay2On();
     c2a:	83 ea       	ldi	r24, 0xA3	; 163
     c2c:	91 e0       	ldi	r25, 0x01	; 1
     c2e:	c7 da       	rcall	.-2674   	; 0x1be <_ZN11CLaserBoard8Relay2OnEv>
     c30:	03 c0       	rjmp	.+6      	; 0xc38 <_ZN16CLaserControlApp3RunEv+0x6e4>
			else
				laserBoard.Relay2Off();
     c32:	83 ea       	ldi	r24, 0xA3	; 163
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	c7 da       	rcall	.-2674   	; 0x1c6 <_ZN11CLaserBoard9Relay2OffEv>
				
			hl = !hl;
     c38:	80 91 82 00 	lds	r24, 0x0082
     c3c:	91 e0       	ldi	r25, 0x01	; 1
     c3e:	89 27       	eor	r24, r25
     c40:	80 93 82 00 	sts	0x0082, r24
			
			state = APP_SETUP;
     c44:	f8 01       	movw	r30, r16
     c46:	94 87       	std	Z+12, r25	; 0x0c
		break;
     c48:	13 c0       	rjmp	.+38     	; 0xc70 <_ZN16CLaserControlApp3RunEv+0x71c>
		case APP_OnSaveSetup :
			pic_id = swap(PICID_SETUP);
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	97 e1       	ldi	r25, 0x17	; 23
     c4e:	9a 87       	std	Y+10, r25	; 0x0a
     c50:	89 87       	std	Y+9, r24	; 0x09
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     c52:	22 e0       	ldi	r18, 0x02	; 2
     c54:	ae 01       	movw	r20, r28
     c56:	47 5f       	subi	r20, 0xF7	; 247
     c58:	5f 4f       	sbci	r21, 0xFF	; 255
     c5a:	63 e0       	ldi	r22, 0x03	; 3
     c5c:	d8 01       	movw	r26, r16
     c5e:	5c 96       	adiw	r26, 0x1c	; 28
     c60:	8d 91       	ld	r24, X+
     c62:	9c 91       	ld	r25, X
     c64:	5d 97       	sbiw	r26, 0x1d	; 29
     c66:	8b d7       	rcall	.+3862   	; 0x1b7e <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     c68:	f8 01       	movw	r30, r16
     c6a:	84 8d       	ldd	r24, Z+28	; 0x1c
     c6c:	95 8d       	ldd	r25, Z+29	; 0x1d
     c6e:	c0 d7       	rcall	.+3968   	; 0x1bf0 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		break;
	}
}
     c70:	2a 96       	adiw	r28, 0x0a	; 10
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	08 95       	ret

00000c86 <_ZN16CLaserControlApp9OnTimeoutEv>:
	}
}

void CLaserControlApp::OnTimeout()
{
	relayTimer.Stop();
     c86:	88 ea       	ldi	r24, 0xA8	; 168
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	63 d0       	rcall	.+198    	; 0xd52 <_ZN11CRelayTimer4StopEv>
	laserBoard.Relay1Off();
     c8c:	83 ea       	ldi	r24, 0xA3	; 163
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	98 da       	rcall	.-2768   	; 0x1c2 <_ZN11CLaserBoard9Relay1OffEv>
     c92:	08 95       	ret

00000c94 <_ZN16CLaserControlApp7OnTimerEv>:
		break;
	}
}

void CLaserControlApp::OnTimer()
{
     c94:	fc 01       	movw	r30, r24
	if (m_wMillSec == 0)
     c96:	82 89       	ldd	r24, Z+18	; 0x12
     c98:	93 89       	ldd	r25, Z+19	; 0x13
     c9a:	89 2b       	or	r24, r25
     c9c:	e9 f4       	brne	.+58     	; 0xcd8 <_ZN16CLaserControlApp7OnTimerEv+0x44>
	{
		if (m_wSeconds == 0)
     c9e:	80 89       	ldd	r24, Z+16	; 0x10
     ca0:	91 89       	ldd	r25, Z+17	; 0x11
     ca2:	89 2b       	or	r24, r25
     ca4:	81 f4       	brne	.+32     	; 0xcc6 <_ZN16CLaserControlApp7OnTimerEv+0x32>
		{
			if (m_wMinutes == 0)
     ca6:	86 85       	ldd	r24, Z+14	; 0x0e
     ca8:	97 85       	ldd	r25, Z+15	; 0x0f
     caa:	89 2b       	or	r24, r25
     cac:	19 f4       	brne	.+6      	; 0xcb4 <_ZN16CLaserControlApp7OnTimerEv+0x20>
     cae:	cf 01       	movw	r24, r30
			{
				OnTimeout();
     cb0:	ea df       	rcall	.-44     	; 0xc86 <_ZN16CLaserControlApp9OnTimeoutEv>
				return;
     cb2:	08 95       	ret
			}
			m_wSeconds = 60;
     cb4:	8c e3       	ldi	r24, 0x3C	; 60
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	91 8b       	std	Z+17, r25	; 0x11
     cba:	80 8b       	std	Z+16, r24	; 0x10
			m_wMinutes--;
     cbc:	86 85       	ldd	r24, Z+14	; 0x0e
     cbe:	97 85       	ldd	r25, Z+15	; 0x0f
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	97 87       	std	Z+15, r25	; 0x0f
     cc4:	86 87       	std	Z+14, r24	; 0x0e
		}
		m_wMillSec = 1000; // Every 10 ms
     cc6:	88 ee       	ldi	r24, 0xE8	; 232
     cc8:	93 e0       	ldi	r25, 0x03	; 3
     cca:	93 8b       	std	Z+19, r25	; 0x13
     ccc:	82 8b       	std	Z+18, r24	; 0x12
		m_wSeconds--;
     cce:	80 89       	ldd	r24, Z+16	; 0x10
     cd0:	91 89       	ldd	r25, Z+17	; 0x11
     cd2:	01 97       	sbiw	r24, 0x01	; 1
     cd4:	91 8b       	std	Z+17, r25	; 0x11
     cd6:	80 8b       	std	Z+16, r24	; 0x10
	}
	m_wMillSec -= 8;
     cd8:	82 89       	ldd	r24, Z+18	; 0x12
     cda:	93 89       	ldd	r25, Z+19	; 0x13
     cdc:	08 97       	sbiw	r24, 0x08	; 8
     cde:	93 8b       	std	Z+19, r25	; 0x13
     ce0:	82 8b       	std	Z+18, r24	; 0x12
     ce2:	08 95       	ret

00000ce4 <_ZN16CLaserControlApp13OnTimerStaticEPv>:
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnTimer();
     ce4:	d7 df       	rcall	.-82     	; 0xc94 <_ZN16CLaserControlApp7OnTimerEv>
     ce6:	08 95       	ret

00000ce8 <_ZN11CRelayTimer10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM31TIMER_COMPAREMATCHOUT_MODE_ENUM22TIMER_CLOCKSELECT_ENUMb>:
CRelayTimer::~CRelayTimer()
{
} //~CRelayTimer

void CRelayTimer::Initialize(TIMER_WAVEFORMGEN_MODE WGM, TIMER_COMPAREMATCHOUT_MODE COM, TIMER_CLOCKSELECT CS, bool ForceOutput)
{
     ce8:	0f 93       	push	r16
	uint8_t temp = 0;
	
	// Set waveform generation mode
	temp |= ((((WGM & 0x2) >> 1) << WGM21) | ((WGM & 0x1) << WGM20));
     cea:	61 fb       	bst	r22, 1
     cec:	aa 27       	eor	r26, r26
     cee:	a0 f9       	bld	r26, 0
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	aa 0f       	add	r26, r26
     cf4:	bb 1f       	adc	r27, r27
     cf6:	aa 0f       	add	r26, r26
     cf8:	bb 1f       	adc	r27, r27
     cfa:	aa 0f       	add	r26, r26
     cfc:	bb 1f       	adc	r27, r27
     cfe:	e6 2f       	mov	r30, r22
     d00:	e1 70       	andi	r30, 0x01	; 1
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	00 24       	eor	r0, r0
     d06:	f6 95       	lsr	r31
     d08:	e7 95       	ror	r30
     d0a:	07 94       	ror	r0
     d0c:	f6 95       	lsr	r31
     d0e:	e7 95       	ror	r30
     d10:	07 94       	ror	r0
     d12:	fe 2f       	mov	r31, r30
     d14:	e0 2d       	mov	r30, r0
     d16:	ea 2b       	or	r30, r26
	
	// Clock selection
	temp |= (CS << CS20);
     d18:	e2 2b       	or	r30, r18
	
	// Output compare mode
	temp |= (COM << COM20);
     d1a:	20 e1       	ldi	r18, 0x10	; 16
     d1c:	42 9f       	mul	r20, r18
     d1e:	a0 01       	movw	r20, r0
     d20:	11 24       	eor	r1, r1
     d22:	4e 2b       	or	r20, r30
	
	// Set control register
	TCCR2 = temp | ((ForceOutput?1:0) << FOC2);
     d24:	01 11       	cpse	r16, r1
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <_ZN11CRelayTimer10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM31TIMER_COMPAREMATCHOUT_MODE_ENUM22TIMER_CLOCKSELECT_ENUMb+0x44>
     d28:	e0 e0       	ldi	r30, 0x00	; 0
     d2a:	01 c0       	rjmp	.+2      	; 0xd2e <_ZN11CRelayTimer10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM31TIMER_COMPAREMATCHOUT_MODE_ENUM22TIMER_CLOCKSELECT_ENUMb+0x46>
     d2c:	e0 e8       	ldi	r30, 0x80	; 128
     d2e:	4e 2b       	or	r20, r30
     d30:	45 bd       	out	0x25, r20	; 37
	
	// Enable interrupts
	//TIMSK |=  (1 << OCIE2) | (1 << TOIE2);
	
	start = false;
     d32:	fc 01       	movw	r30, r24
     d34:	12 82       	std	Z+2, r1	; 0x02
}
     d36:	0f 91       	pop	r16
     d38:	08 95       	ret

00000d3a <_ZN11CRelayTimer5StartEh>:

void CRelayTimer::Start(uint8_t period)
{
	if (!start)
     d3a:	fc 01       	movw	r30, r24
     d3c:	22 81       	ldd	r18, Z+2	; 0x02
     d3e:	21 11       	cpse	r18, r1
     d40:	06 c0       	rjmp	.+12     	; 0xd4e <_ZN11CRelayTimer5StartEh+0x14>
	{
		TCNT2 = period;
     d42:	64 bd       	out	0x24, r22	; 36
		TIMSK |=  (1 << OCIE2);
     d44:	29 b7       	in	r18, 0x39	; 57
     d46:	20 68       	ori	r18, 0x80	; 128
     d48:	29 bf       	out	0x39, r18	; 57
		start = true;
     d4a:	21 e0       	ldi	r18, 0x01	; 1
     d4c:	22 83       	std	Z+2, r18	; 0x02
     d4e:	08 95       	ret

00000d50 <_ZN11CRelayTimer5StartEj>:
	}
}

void CRelayTimer::Start(uint16_t period)
{
     d50:	08 95       	ret

00000d52 <_ZN11CRelayTimer4StopEv>:
	// not support
}

void CRelayTimer::Stop()
{
	TIMSK &=  ~(1 << OCIE2);
     d52:	29 b7       	in	r18, 0x39	; 57
     d54:	2f 77       	andi	r18, 0x7F	; 127
     d56:	29 bf       	out	0x39, r18	; 57
	start = false;
     d58:	fc 01       	movw	r30, r24
     d5a:	12 82       	std	Z+2, r1	; 0x02
     d5c:	08 95       	ret

00000d5e <_ZN11CRelayTimer8SetCOMPAEj>:
}

void CRelayTimer::SetCOMPA(uint16_t value)
{
     d5e:	08 95       	ret

00000d60 <_ZN11CRelayTimer8SetCOMPBEj>:
	// not support
}

void CRelayTimer::SetCOMPB(uint16_t value)
{
     d60:	08 95       	ret

00000d62 <_ZN11CRelayTimer8SetCOMPCEj>:
	// not support
}

void CRelayTimer::SetCOMPC(uint16_t value)
{
     d62:	08 95       	ret

00000d64 <_ZN11CRelayTimer8SetCOMPAEh>:
	// not support
}

void CRelayTimer::SetCOMPA(uint8_t value)
{
	OCR2 = value;
     d64:	63 bd       	out	0x23, r22	; 35
     d66:	08 95       	ret

00000d68 <_ZN11CRelayTimer8SetCOMPBEh>:
}

void CRelayTimer::SetCOMPB(uint8_t value)
{
     d68:	08 95       	ret

00000d6a <_ZN11CRelayTimer8SetCOMPCEh>:
	// not support
}

void CRelayTimer::SetCOMPC(uint8_t value)
{
     d6a:	08 95       	ret

00000d6c <_ZN11CRelayTimer14SetOVFCallbackEPFvPvES0_>:
	SFIOR |= (1 << PSR2);
}

void CRelayTimer::SetOVFCallback(ISRCallback func, void* owner)
{
	InterruptFuncTable[TIMER2_OVF_vect_num] = func;
     d6c:	70 93 38 01 	sts	0x0138, r23
     d70:	60 93 37 01 	sts	0x0137, r22
	InterruptSenderTable[TIMER2_OVF_vect_num] = owner;
     d74:	50 93 5e 01 	sts	0x015E, r21
     d78:	40 93 5d 01 	sts	0x015D, r20
     d7c:	08 95       	ret

00000d7e <_ZN11CRelayTimer15SetCAPTCallbackEPFvPvES0_>:
}

void CRelayTimer::SetCAPTCallback(ISRCallback func, void* owner)
{
     d7e:	08 95       	ret

00000d80 <_ZN11CRelayTimer16SetCOMPACallbackEPFvPvES0_>:
	// not support
}

void CRelayTimer::SetCOMPACallback(ISRCallback func, void* owner)
{
	InterruptFuncTable[TIMER2_COMP_vect_num] = func;
     d80:	70 93 36 01 	sts	0x0136, r23
     d84:	60 93 35 01 	sts	0x0135, r22
	InterruptSenderTable[TIMER2_COMP_vect_num] = owner;
     d88:	50 93 5c 01 	sts	0x015C, r21
     d8c:	40 93 5b 01 	sts	0x015B, r20
     d90:	08 95       	ret

00000d92 <_ZN11CRelayTimer16SetCOMPBCallbackEPFvPvES0_>:
}

void CRelayTimer::SetCOMPBCallback(ISRCallback func, void* owner)
{
     d92:	08 95       	ret

00000d94 <_ZN11CRelayTimer16SetCOMPCCallbackEPFvPvES0_>:
	// not support
}

void CRelayTimer::SetCOMPCCallback(ISRCallback func, void* owner)
{
     d94:	08 95       	ret

00000d96 <_ZN11CRelayTimerC1Ev>:

#include "CRelayTimer.h"
#include "LaserLib/int8a.h"

// default constructor
CRelayTimer::CRelayTimer()
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	ec 01       	movw	r28, r24
     d9c:	73 d0       	rcall	.+230    	; 0xe84 <_ZN6CTimerC1Ev>
     d9e:	83 eb       	ldi	r24, 0xB3	; 179
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	99 83       	std	Y+1, r25	; 0x01
     da4:	88 83       	st	Y, r24
{
} //CRelayTimer
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	08 95       	ret

00000dac <_ZN11CRelayTimerD1Ev>:

// default destructor
CRelayTimer::~CRelayTimer()
     dac:	23 eb       	ldi	r18, 0xB3	; 179
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	fc 01       	movw	r30, r24
     db2:	31 83       	std	Z+1, r19	; 0x01
     db4:	20 83       	st	Z, r18
     db6:	6c d0       	rcall	.+216    	; 0xe90 <_ZN6CTimerD1Ev>
     db8:	08 95       	ret

00000dba <_ZN11CRelayTimer9AsyncModeEb>:
	// not support
}

void CRelayTimer::AsyncMode(bool mode)
{
	if (mode)
     dba:	66 23       	and	r22, r22
     dbc:	21 f0       	breq	.+8      	; 0xdc6 <_ZN11CRelayTimer9AsyncModeEb+0xc>
		ASSR |= (1 << AS2);
     dbe:	82 b5       	in	r24, 0x22	; 34
     dc0:	88 60       	ori	r24, 0x08	; 8
     dc2:	82 bd       	out	0x22, r24	; 34
     dc4:	08 95       	ret
	else
		ASSR &= ~(1 << AS2);
     dc6:	82 b5       	in	r24, 0x22	; 34
     dc8:	87 7f       	andi	r24, 0xF7	; 247
     dca:	82 bd       	out	0x22, r24	; 34
     dcc:	08 95       	ret

00000dce <_ZN10CSensorADC10InitializeE18ADC_REFERENCE_ENUM16ADC_CHANNEL_ENUM18ADC_PRESCALER_ENUMbb>:
CSensorADC::~CSensorADC()
{
} //~CSensorADC

void CSensorADC::Initialize(ADC_REFERENCE ref, ADC_CHANNEL adc_channel, ADC_PRESCALER adc_pscl, bool LeftAdjust, bool freeRunning)
{
     dce:	ef 92       	push	r14
     dd0:	0f 93       	push	r16
     dd2:	fc 01       	movw	r30, r24
	// ADC multiplexer initialize
	ADMUX |= (ref << REFS0) | (adc_channel << MUX0) | ((LeftAdjust?1:0) << ADLAR);
     dd4:	87 b1       	in	r24, 0x07	; 7
     dd6:	90 e4       	ldi	r25, 0x40	; 64
     dd8:	69 9f       	mul	r22, r25
     dda:	b0 01       	movw	r22, r0
     ddc:	11 24       	eor	r1, r1
     dde:	48 2b       	or	r20, r24
     de0:	01 11       	cpse	r16, r1
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <_ZN10CSensorADC10InitializeE18ADC_REFERENCE_ENUM16ADC_CHANNEL_ENUM18ADC_PRESCALER_ENUMbb+0x1a>
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	01 c0       	rjmp	.+2      	; 0xdea <_ZN10CSensorADC10InitializeE18ADC_REFERENCE_ENUM16ADC_CHANNEL_ENUM18ADC_PRESCALER_ENUMbb+0x1c>
     de8:	90 e2       	ldi	r25, 0x20	; 32
     dea:	64 2b       	or	r22, r20
     dec:	69 2b       	or	r22, r25
     dee:	67 b9       	out	0x07, r22	; 7
	
	// ADC control setup
	ADCSRA |= (adc_pscl << ADPS0) | (1 << ADEN) | ((freeRunning?1:0) << ADFR) | (1 << ADIE);
     df0:	36 b1       	in	r19, 0x06	; 6
     df2:	e1 10       	cpse	r14, r1
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <_ZN10CSensorADC10InitializeE18ADC_REFERENCE_ENUM16ADC_CHANNEL_ENUM18ADC_PRESCALER_ENUMbb+0x2c>
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	01 c0       	rjmp	.+2      	; 0xdfc <_ZN10CSensorADC10InitializeE18ADC_REFERENCE_ENUM16ADC_CHANNEL_ENUM18ADC_PRESCALER_ENUMbb+0x2e>
     dfa:	90 e2       	ldi	r25, 0x20	; 32
     dfc:	38 68       	ori	r19, 0x88	; 136
     dfe:	23 2b       	or	r18, r19
     e00:	29 2b       	or	r18, r25
     e02:	26 b9       	out	0x06, r18	; 6
	
	// ADC set interrupt
	InterruptFuncTable[ADC_vect_num] = &StaticADCConvCompleteCallback;
     e04:	8e e1       	ldi	r24, 0x1E	; 30
     e06:	97 e0       	ldi	r25, 0x07	; 7
     e08:	90 93 4c 01 	sts	0x014C, r25
     e0c:	80 93 4b 01 	sts	0x014B, r24
	InterruptSenderTable[ADC_vect_num] = this;
     e10:	f0 93 72 01 	sts	0x0172, r31
     e14:	e0 93 71 01 	sts	0x0171, r30
}
     e18:	0f 91       	pop	r16
     e1a:	ef 90       	pop	r14
     e1c:	08 95       	ret

00000e1e <_ZN10CSensorADC5StartEv>:

void CSensorADC::Start()
{
	ADCSRA |= (1 << ADSC);
     e1e:	36 9a       	sbi	0x06, 6	; 6
     e20:	08 95       	ret

00000e22 <_ZN10CSensorADC14SetADCCallbackEPFvPvES0_>:
}

void CSensorADC::SetADCCallback(ISRCallback func, void* owner)
{
	InterruptFuncTable[ADC_vect_num] = func;
     e22:	70 93 4c 01 	sts	0x014C, r23
     e26:	60 93 4b 01 	sts	0x014B, r22
	InterruptSenderTable[ADC_vect_num] = owner;
     e2a:	50 93 72 01 	sts	0x0172, r21
     e2e:	40 93 71 01 	sts	0x0171, r20
     e32:	08 95       	ret

00000e34 <_ZN10CSensorADC8GetValueEv>:
}

uint16_t CSensorADC::GetValue()
{
	return value;
}
     e34:	fc 01       	movw	r30, r24
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	08 95       	ret

00000e3c <_ZN10CSensorADC29StaticADCConvCompleteCallbackEPv>:

void CSensorADC::StaticADCConvCompleteCallback(void* sender)
{
	CSensorADC* adc = (CSensorADC*)sender;
	adc->ADCConvCompleteCallback();
     e3c:	dc 01       	movw	r26, r24
     e3e:	ed 91       	ld	r30, X+
     e40:	fc 91       	ld	r31, X
     e42:	00 84       	ldd	r0, Z+8	; 0x08
     e44:	f1 85       	ldd	r31, Z+9	; 0x09
     e46:	e0 2d       	mov	r30, r0
     e48:	09 95       	icall
     e4a:	08 95       	ret

00000e4c <_ZN10CSensorADC23ADCConvCompleteCallbackEv>:
}

void CSensorADC::ADCConvCompleteCallback()
{
	value = ADC;
     e4c:	24 b1       	in	r18, 0x04	; 4
     e4e:	35 b1       	in	r19, 0x05	; 5
     e50:	fc 01       	movw	r30, r24
     e52:	33 83       	std	Z+3, r19	; 0x03
     e54:	22 83       	std	Z+2, r18	; 0x02
     e56:	08 95       	ret

00000e58 <_ZN10CSensorADCC1Ev>:

#include "CSensorADC.h"
#include "LaserLib/int8a.h"

// default constructor
CSensorADC::CSensorADC()
     e58:	25 ed       	ldi	r18, 0xD5	; 213
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	fc 01       	movw	r30, r24
     e5e:	31 83       	std	Z+1, r19	; 0x01
     e60:	20 83       	st	Z, r18
     e62:	08 95       	ret

00000e64 <_ZN10CSensorADCD1Ev>:
{
} //CSensorADC

// default destructor
CSensorADC::~CSensorADC()
     e64:	08 95       	ret

00000e66 <_ZN6CTimer10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM31TIMER_COMPAREMATCHOUT_MODE_ENUM22TIMER_CLOCKSELECT_ENUMb>:
CTimer::~CTimer()
{
} //~CTimer

void CTimer::Initialize(TIMER_WAVEFORMGEN_MODE WGM, TIMER_COMPAREMATCHOUT_MODE COM, TIMER_CLOCKSELECT CS, bool ForceOutput)
{
     e66:	08 95       	ret

00000e68 <_ZN6CTimer5StartEh>:
}

void CTimer::Start(uint8_t period)
{
     e68:	08 95       	ret

00000e6a <_ZN6CTimer5StartEj>:
	
}

void CTimer::Start(uint16_t period)
{
     e6a:	08 95       	ret

00000e6c <_ZN6CTimer4StopEv>:
	
}

void CTimer::Stop()
{
     e6c:	08 95       	ret

00000e6e <_ZN6CTimer8SetCOMPAEj>:
	
}

void CTimer::SetCOMPA(uint16_t value)
{
     e6e:	08 95       	ret

00000e70 <_ZN6CTimer8SetCOMPBEj>:
	
}

void CTimer::SetCOMPB(uint16_t value)
{
     e70:	08 95       	ret

00000e72 <_ZN6CTimer8SetCOMPCEj>:
	
}

void CTimer::SetCOMPC(uint16_t value)
{
     e72:	08 95       	ret

00000e74 <_ZN6CTimer8SetCOMPAEh>:
	
}

void CTimer::SetCOMPA(uint8_t value)
{
     e74:	08 95       	ret

00000e76 <_ZN6CTimer8SetCOMPBEh>:
	
}

void CTimer::SetCOMPB(uint8_t value)
{
     e76:	08 95       	ret

00000e78 <_ZN6CTimer8SetCOMPCEh>:
	
}

void CTimer::SetCOMPC(uint8_t value)
{
     e78:	08 95       	ret

00000e7a <_ZN6CTimer14SetOVFCallbackEPFvPvES0_>:
	
}

void CTimer::SetOVFCallback(ISRCallback func, void* owner)
{
     e7a:	08 95       	ret

00000e7c <_ZN6CTimer15SetCAPTCallbackEPFvPvES0_>:

}

void CTimer::SetCAPTCallback(ISRCallback func, void* owner)
{
     e7c:	08 95       	ret

00000e7e <_ZN6CTimer16SetCOMPACallbackEPFvPvES0_>:

}
	
void CTimer::SetCOMPACallback(ISRCallback func, void* owner)
{
     e7e:	08 95       	ret

00000e80 <_ZN6CTimer16SetCOMPBCallbackEPFvPvES0_>:

}

void CTimer::SetCOMPBCallback(ISRCallback func, void* owner)
{
     e80:	08 95       	ret

00000e82 <_ZN6CTimer16SetCOMPCCallbackEPFvPvES0_>:

}

void CTimer::SetCOMPCCallback(ISRCallback func, void* owner)
{
     e82:	08 95       	ret

00000e84 <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
     e84:	23 ee       	ldi	r18, 0xE3	; 227
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	fc 01       	movw	r30, r24
     e8a:	31 83       	std	Z+1, r19	; 0x01
     e8c:	20 83       	st	Z, r18
     e8e:	08 95       	ret

00000e90 <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
     e90:	08 95       	ret

00000e92 <_ZN6CUSART25SetRxInterruptionCallbackEPvPFvS0_E>:
	virtual bool IsTransmitting() = 0;
	virtual bool IsReceiving() = 0;
	virtual bool IsDataEmpty() = 0;
	
	// Interrupt control
	virtual void SetRxInterruptionCallback(void* sender, ISRCallback callback) {};
     e92:	08 95       	ret

00000e94 <_ZN6CUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
	virtual void SetTxInterruptionCallback(void* sender, ISRCallback callback) {};
     e94:	08 95       	ret

00000e96 <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
     e96:	25 e0       	ldi	r18, 0x05	; 5
     e98:	31 e0       	ldi	r19, 0x01	; 1
     e9a:	fc 01       	movw	r30, r24
     e9c:	31 83       	std	Z+1, r19	; 0x01
     e9e:	20 83       	st	Z, r18
     ea0:	08 95       	ret

00000ea2 <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
     ea2:	08 95       	ret

00000ea4 <__vector_1>:
void* InterruptSenderTable[NUM_INERRUPTS+1];
ISRCallback InterruptFuncTable[NUM_INERRUPTS+1];

/* External Interrupt Request 0 */
ISR(INT0_vect)
{
     ea4:	1f 92       	push	r1
     ea6:	0f 92       	push	r0
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	0f 92       	push	r0
     eac:	11 24       	eor	r1, r1
     eae:	2f 93       	push	r18
     eb0:	3f 93       	push	r19
     eb2:	4f 93       	push	r20
     eb4:	5f 93       	push	r21
     eb6:	6f 93       	push	r22
     eb8:	7f 93       	push	r23
     eba:	8f 93       	push	r24
     ebc:	9f 93       	push	r25
     ebe:	af 93       	push	r26
     ec0:	bf 93       	push	r27
     ec2:	ef 93       	push	r30
     ec4:	ff 93       	push	r31
	if (InterruptFuncTable[INT0_vect_num] != NULL)
     ec6:	e0 91 31 01 	lds	r30, 0x0131
     eca:	f0 91 32 01 	lds	r31, 0x0132
     ece:	30 97       	sbiw	r30, 0x00	; 0
     ed0:	29 f0       	breq	.+10     	; 0xedc <__vector_1+0x38>
		(*(InterruptFuncTable[INT0_vect_num]))(InterruptSenderTable[INT0_vect_num]);
     ed2:	80 91 57 01 	lds	r24, 0x0157
     ed6:	90 91 58 01 	lds	r25, 0x0158
     eda:	09 95       	icall
}
     edc:	ff 91       	pop	r31
     ede:	ef 91       	pop	r30
     ee0:	bf 91       	pop	r27
     ee2:	af 91       	pop	r26
     ee4:	9f 91       	pop	r25
     ee6:	8f 91       	pop	r24
     ee8:	7f 91       	pop	r23
     eea:	6f 91       	pop	r22
     eec:	5f 91       	pop	r21
     eee:	4f 91       	pop	r20
     ef0:	3f 91       	pop	r19
     ef2:	2f 91       	pop	r18
     ef4:	0f 90       	pop	r0
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	0f 90       	pop	r0
     efa:	1f 90       	pop	r1
     efc:	18 95       	reti

00000efe <__vector_2>:

/* External Interrupt Request 1 */
ISR(INT1_vect)
{
     efe:	1f 92       	push	r1
     f00:	0f 92       	push	r0
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	0f 92       	push	r0
     f06:	11 24       	eor	r1, r1
     f08:	2f 93       	push	r18
     f0a:	3f 93       	push	r19
     f0c:	4f 93       	push	r20
     f0e:	5f 93       	push	r21
     f10:	6f 93       	push	r22
     f12:	7f 93       	push	r23
     f14:	8f 93       	push	r24
     f16:	9f 93       	push	r25
     f18:	af 93       	push	r26
     f1a:	bf 93       	push	r27
     f1c:	ef 93       	push	r30
     f1e:	ff 93       	push	r31
	if (InterruptFuncTable[INT1_vect_num] != NULL)
     f20:	e0 91 33 01 	lds	r30, 0x0133
     f24:	f0 91 34 01 	lds	r31, 0x0134
     f28:	30 97       	sbiw	r30, 0x00	; 0
     f2a:	29 f0       	breq	.+10     	; 0xf36 <__vector_2+0x38>
		(*(InterruptFuncTable[INT1_vect_num]))(InterruptSenderTable[INT1_vect_num]);
     f2c:	80 91 59 01 	lds	r24, 0x0159
     f30:	90 91 5a 01 	lds	r25, 0x015A
     f34:	09 95       	icall
}
     f36:	ff 91       	pop	r31
     f38:	ef 91       	pop	r30
     f3a:	bf 91       	pop	r27
     f3c:	af 91       	pop	r26
     f3e:	9f 91       	pop	r25
     f40:	8f 91       	pop	r24
     f42:	7f 91       	pop	r23
     f44:	6f 91       	pop	r22
     f46:	5f 91       	pop	r21
     f48:	4f 91       	pop	r20
     f4a:	3f 91       	pop	r19
     f4c:	2f 91       	pop	r18
     f4e:	0f 90       	pop	r0
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	0f 90       	pop	r0
     f54:	1f 90       	pop	r1
     f56:	18 95       	reti

00000f58 <__vector_3>:

/* Timer/Counter2 Compare Match */
ISR(TIMER2_COMP_vect)
{
     f58:	1f 92       	push	r1
     f5a:	0f 92       	push	r0
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	0f 92       	push	r0
     f60:	11 24       	eor	r1, r1
     f62:	2f 93       	push	r18
     f64:	3f 93       	push	r19
     f66:	4f 93       	push	r20
     f68:	5f 93       	push	r21
     f6a:	6f 93       	push	r22
     f6c:	7f 93       	push	r23
     f6e:	8f 93       	push	r24
     f70:	9f 93       	push	r25
     f72:	af 93       	push	r26
     f74:	bf 93       	push	r27
     f76:	ef 93       	push	r30
     f78:	ff 93       	push	r31
	if (InterruptFuncTable[TIMER2_COMP_vect_num] != NULL)
     f7a:	e0 91 35 01 	lds	r30, 0x0135
     f7e:	f0 91 36 01 	lds	r31, 0x0136
     f82:	30 97       	sbiw	r30, 0x00	; 0
     f84:	29 f0       	breq	.+10     	; 0xf90 <__vector_3+0x38>
		(*(InterruptFuncTable[TIMER2_COMP_vect_num]))(InterruptSenderTable[TIMER2_COMP_vect_num]);
     f86:	80 91 5b 01 	lds	r24, 0x015B
     f8a:	90 91 5c 01 	lds	r25, 0x015C
     f8e:	09 95       	icall
}
     f90:	ff 91       	pop	r31
     f92:	ef 91       	pop	r30
     f94:	bf 91       	pop	r27
     f96:	af 91       	pop	r26
     f98:	9f 91       	pop	r25
     f9a:	8f 91       	pop	r24
     f9c:	7f 91       	pop	r23
     f9e:	6f 91       	pop	r22
     fa0:	5f 91       	pop	r21
     fa2:	4f 91       	pop	r20
     fa4:	3f 91       	pop	r19
     fa6:	2f 91       	pop	r18
     fa8:	0f 90       	pop	r0
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	0f 90       	pop	r0
     fae:	1f 90       	pop	r1
     fb0:	18 95       	reti

00000fb2 <__vector_4>:

/* Timer/Counter2 Overflow */
ISR(TIMER2_OVF_vect)
{
     fb2:	1f 92       	push	r1
     fb4:	0f 92       	push	r0
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	0f 92       	push	r0
     fba:	11 24       	eor	r1, r1
     fbc:	2f 93       	push	r18
     fbe:	3f 93       	push	r19
     fc0:	4f 93       	push	r20
     fc2:	5f 93       	push	r21
     fc4:	6f 93       	push	r22
     fc6:	7f 93       	push	r23
     fc8:	8f 93       	push	r24
     fca:	9f 93       	push	r25
     fcc:	af 93       	push	r26
     fce:	bf 93       	push	r27
     fd0:	ef 93       	push	r30
     fd2:	ff 93       	push	r31
	if (InterruptFuncTable[TIMER2_OVF_vect_num] != NULL)
     fd4:	e0 91 37 01 	lds	r30, 0x0137
     fd8:	f0 91 38 01 	lds	r31, 0x0138
     fdc:	30 97       	sbiw	r30, 0x00	; 0
     fde:	29 f0       	breq	.+10     	; 0xfea <__vector_4+0x38>
		(*(InterruptFuncTable[TIMER2_OVF_vect_num]))(InterruptSenderTable[TIMER2_OVF_vect_num]);
     fe0:	80 91 5d 01 	lds	r24, 0x015D
     fe4:	90 91 5e 01 	lds	r25, 0x015E
     fe8:	09 95       	icall
}
     fea:	ff 91       	pop	r31
     fec:	ef 91       	pop	r30
     fee:	bf 91       	pop	r27
     ff0:	af 91       	pop	r26
     ff2:	9f 91       	pop	r25
     ff4:	8f 91       	pop	r24
     ff6:	7f 91       	pop	r23
     ff8:	6f 91       	pop	r22
     ffa:	5f 91       	pop	r21
     ffc:	4f 91       	pop	r20
     ffe:	3f 91       	pop	r19
    1000:	2f 91       	pop	r18
    1002:	0f 90       	pop	r0
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	0f 90       	pop	r0
    1008:	1f 90       	pop	r1
    100a:	18 95       	reti

0000100c <__vector_5>:

/* Timer/Counter1 Capture Event */
ISR(TIMER1_CAPT_vect)
{
    100c:	1f 92       	push	r1
    100e:	0f 92       	push	r0
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	0f 92       	push	r0
    1014:	11 24       	eor	r1, r1
    1016:	2f 93       	push	r18
    1018:	3f 93       	push	r19
    101a:	4f 93       	push	r20
    101c:	5f 93       	push	r21
    101e:	6f 93       	push	r22
    1020:	7f 93       	push	r23
    1022:	8f 93       	push	r24
    1024:	9f 93       	push	r25
    1026:	af 93       	push	r26
    1028:	bf 93       	push	r27
    102a:	ef 93       	push	r30
    102c:	ff 93       	push	r31
	if (InterruptFuncTable[TIMER1_CAPT_vect_num] != NULL)
    102e:	e0 91 39 01 	lds	r30, 0x0139
    1032:	f0 91 3a 01 	lds	r31, 0x013A
    1036:	30 97       	sbiw	r30, 0x00	; 0
    1038:	29 f0       	breq	.+10     	; 0x1044 <__vector_5+0x38>
		(*(InterruptFuncTable[TIMER1_CAPT_vect_num]))(InterruptSenderTable[TIMER1_CAPT_vect_num]);
    103a:	80 91 5f 01 	lds	r24, 0x015F
    103e:	90 91 60 01 	lds	r25, 0x0160
    1042:	09 95       	icall
}
    1044:	ff 91       	pop	r31
    1046:	ef 91       	pop	r30
    1048:	bf 91       	pop	r27
    104a:	af 91       	pop	r26
    104c:	9f 91       	pop	r25
    104e:	8f 91       	pop	r24
    1050:	7f 91       	pop	r23
    1052:	6f 91       	pop	r22
    1054:	5f 91       	pop	r21
    1056:	4f 91       	pop	r20
    1058:	3f 91       	pop	r19
    105a:	2f 91       	pop	r18
    105c:	0f 90       	pop	r0
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	0f 90       	pop	r0
    1062:	1f 90       	pop	r1
    1064:	18 95       	reti

00001066 <__vector_6>:

/* Timer/Counter1 Compare Match A */
ISR(TIMER1_COMPA_vect)
{
    1066:	1f 92       	push	r1
    1068:	0f 92       	push	r0
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	0f 92       	push	r0
    106e:	11 24       	eor	r1, r1
    1070:	2f 93       	push	r18
    1072:	3f 93       	push	r19
    1074:	4f 93       	push	r20
    1076:	5f 93       	push	r21
    1078:	6f 93       	push	r22
    107a:	7f 93       	push	r23
    107c:	8f 93       	push	r24
    107e:	9f 93       	push	r25
    1080:	af 93       	push	r26
    1082:	bf 93       	push	r27
    1084:	ef 93       	push	r30
    1086:	ff 93       	push	r31
	if (InterruptFuncTable[TIMER1_COMPA_vect_num] != NULL)
    1088:	e0 91 3b 01 	lds	r30, 0x013B
    108c:	f0 91 3c 01 	lds	r31, 0x013C
    1090:	30 97       	sbiw	r30, 0x00	; 0
    1092:	29 f0       	breq	.+10     	; 0x109e <__vector_6+0x38>
		(*(InterruptFuncTable[TIMER1_COMPA_vect_num]))(InterruptSenderTable[TIMER1_COMPA_vect_num]);
    1094:	80 91 61 01 	lds	r24, 0x0161
    1098:	90 91 62 01 	lds	r25, 0x0162
    109c:	09 95       	icall
}
    109e:	ff 91       	pop	r31
    10a0:	ef 91       	pop	r30
    10a2:	bf 91       	pop	r27
    10a4:	af 91       	pop	r26
    10a6:	9f 91       	pop	r25
    10a8:	8f 91       	pop	r24
    10aa:	7f 91       	pop	r23
    10ac:	6f 91       	pop	r22
    10ae:	5f 91       	pop	r21
    10b0:	4f 91       	pop	r20
    10b2:	3f 91       	pop	r19
    10b4:	2f 91       	pop	r18
    10b6:	0f 90       	pop	r0
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	0f 90       	pop	r0
    10bc:	1f 90       	pop	r1
    10be:	18 95       	reti

000010c0 <__vector_7>:

/* Timer/Counter Compare Match B */
ISR(TIMER1_COMPB_vect)
{
    10c0:	1f 92       	push	r1
    10c2:	0f 92       	push	r0
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	0f 92       	push	r0
    10c8:	11 24       	eor	r1, r1
    10ca:	2f 93       	push	r18
    10cc:	3f 93       	push	r19
    10ce:	4f 93       	push	r20
    10d0:	5f 93       	push	r21
    10d2:	6f 93       	push	r22
    10d4:	7f 93       	push	r23
    10d6:	8f 93       	push	r24
    10d8:	9f 93       	push	r25
    10da:	af 93       	push	r26
    10dc:	bf 93       	push	r27
    10de:	ef 93       	push	r30
    10e0:	ff 93       	push	r31
	if (InterruptFuncTable[TIMER1_COMPB_vect_num] != NULL)
    10e2:	e0 91 3d 01 	lds	r30, 0x013D
    10e6:	f0 91 3e 01 	lds	r31, 0x013E
    10ea:	30 97       	sbiw	r30, 0x00	; 0
    10ec:	29 f0       	breq	.+10     	; 0x10f8 <__vector_7+0x38>
		(*(InterruptFuncTable[TIMER1_COMPB_vect_num]))(InterruptSenderTable[TIMER1_COMPB_vect_num]);
    10ee:	80 91 63 01 	lds	r24, 0x0163
    10f2:	90 91 64 01 	lds	r25, 0x0164
    10f6:	09 95       	icall
}
    10f8:	ff 91       	pop	r31
    10fa:	ef 91       	pop	r30
    10fc:	bf 91       	pop	r27
    10fe:	af 91       	pop	r26
    1100:	9f 91       	pop	r25
    1102:	8f 91       	pop	r24
    1104:	7f 91       	pop	r23
    1106:	6f 91       	pop	r22
    1108:	5f 91       	pop	r21
    110a:	4f 91       	pop	r20
    110c:	3f 91       	pop	r19
    110e:	2f 91       	pop	r18
    1110:	0f 90       	pop	r0
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	0f 90       	pop	r0
    1116:	1f 90       	pop	r1
    1118:	18 95       	reti

0000111a <__vector_8>:

/* Timer/Counter1 Overflow */
ISR(TIMER1_OVF_vect)
{
    111a:	1f 92       	push	r1
    111c:	0f 92       	push	r0
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	0f 92       	push	r0
    1122:	11 24       	eor	r1, r1
    1124:	2f 93       	push	r18
    1126:	3f 93       	push	r19
    1128:	4f 93       	push	r20
    112a:	5f 93       	push	r21
    112c:	6f 93       	push	r22
    112e:	7f 93       	push	r23
    1130:	8f 93       	push	r24
    1132:	9f 93       	push	r25
    1134:	af 93       	push	r26
    1136:	bf 93       	push	r27
    1138:	ef 93       	push	r30
    113a:	ff 93       	push	r31
	if (InterruptFuncTable[TIMER1_OVF_vect_num] != NULL)
    113c:	e0 91 3f 01 	lds	r30, 0x013F
    1140:	f0 91 40 01 	lds	r31, 0x0140
    1144:	30 97       	sbiw	r30, 0x00	; 0
    1146:	29 f0       	breq	.+10     	; 0x1152 <__vector_8+0x38>
		(*(InterruptFuncTable[TIMER1_OVF_vect_num]))(InterruptSenderTable[TIMER1_OVF_vect_num]);
    1148:	80 91 65 01 	lds	r24, 0x0165
    114c:	90 91 66 01 	lds	r25, 0x0166
    1150:	09 95       	icall
}
    1152:	ff 91       	pop	r31
    1154:	ef 91       	pop	r30
    1156:	bf 91       	pop	r27
    1158:	af 91       	pop	r26
    115a:	9f 91       	pop	r25
    115c:	8f 91       	pop	r24
    115e:	7f 91       	pop	r23
    1160:	6f 91       	pop	r22
    1162:	5f 91       	pop	r21
    1164:	4f 91       	pop	r20
    1166:	3f 91       	pop	r19
    1168:	2f 91       	pop	r18
    116a:	0f 90       	pop	r0
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	0f 90       	pop	r0
    1170:	1f 90       	pop	r1
    1172:	18 95       	reti

00001174 <__vector_9>:

/* Timer/Counter0 Overflow */
ISR(TIMER0_OVF_vect)
{
    1174:	1f 92       	push	r1
    1176:	0f 92       	push	r0
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	0f 92       	push	r0
    117c:	11 24       	eor	r1, r1
    117e:	2f 93       	push	r18
    1180:	3f 93       	push	r19
    1182:	4f 93       	push	r20
    1184:	5f 93       	push	r21
    1186:	6f 93       	push	r22
    1188:	7f 93       	push	r23
    118a:	8f 93       	push	r24
    118c:	9f 93       	push	r25
    118e:	af 93       	push	r26
    1190:	bf 93       	push	r27
    1192:	ef 93       	push	r30
    1194:	ff 93       	push	r31
	if (InterruptFuncTable[TIMER0_OVF_vect_num] != NULL)
    1196:	e0 91 41 01 	lds	r30, 0x0141
    119a:	f0 91 42 01 	lds	r31, 0x0142
    119e:	30 97       	sbiw	r30, 0x00	; 0
    11a0:	29 f0       	breq	.+10     	; 0x11ac <__vector_9+0x38>
		(*(InterruptFuncTable[TIMER0_OVF_vect_num]))(InterruptSenderTable[TIMER0_OVF_vect_num]);
    11a2:	80 91 67 01 	lds	r24, 0x0167
    11a6:	90 91 68 01 	lds	r25, 0x0168
    11aa:	09 95       	icall
}
    11ac:	ff 91       	pop	r31
    11ae:	ef 91       	pop	r30
    11b0:	bf 91       	pop	r27
    11b2:	af 91       	pop	r26
    11b4:	9f 91       	pop	r25
    11b6:	8f 91       	pop	r24
    11b8:	7f 91       	pop	r23
    11ba:	6f 91       	pop	r22
    11bc:	5f 91       	pop	r21
    11be:	4f 91       	pop	r20
    11c0:	3f 91       	pop	r19
    11c2:	2f 91       	pop	r18
    11c4:	0f 90       	pop	r0
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	0f 90       	pop	r0
    11ca:	1f 90       	pop	r1
    11cc:	18 95       	reti

000011ce <__vector_10>:

/* SPI Serial Transfer Complete */
ISR(SPI_STC_vect)
{
    11ce:	1f 92       	push	r1
    11d0:	0f 92       	push	r0
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	0f 92       	push	r0
    11d6:	11 24       	eor	r1, r1
    11d8:	2f 93       	push	r18
    11da:	3f 93       	push	r19
    11dc:	4f 93       	push	r20
    11de:	5f 93       	push	r21
    11e0:	6f 93       	push	r22
    11e2:	7f 93       	push	r23
    11e4:	8f 93       	push	r24
    11e6:	9f 93       	push	r25
    11e8:	af 93       	push	r26
    11ea:	bf 93       	push	r27
    11ec:	ef 93       	push	r30
    11ee:	ff 93       	push	r31
	if (InterruptFuncTable[SPI_STC_vect_num] != NULL)
    11f0:	e0 91 43 01 	lds	r30, 0x0143
    11f4:	f0 91 44 01 	lds	r31, 0x0144
    11f8:	30 97       	sbiw	r30, 0x00	; 0
    11fa:	29 f0       	breq	.+10     	; 0x1206 <__vector_10+0x38>
		(*(InterruptFuncTable[SPI_STC_vect_num]))(InterruptSenderTable[SPI_STC_vect_num]);
    11fc:	80 91 69 01 	lds	r24, 0x0169
    1200:	90 91 6a 01 	lds	r25, 0x016A
    1204:	09 95       	icall
}
    1206:	ff 91       	pop	r31
    1208:	ef 91       	pop	r30
    120a:	bf 91       	pop	r27
    120c:	af 91       	pop	r26
    120e:	9f 91       	pop	r25
    1210:	8f 91       	pop	r24
    1212:	7f 91       	pop	r23
    1214:	6f 91       	pop	r22
    1216:	5f 91       	pop	r21
    1218:	4f 91       	pop	r20
    121a:	3f 91       	pop	r19
    121c:	2f 91       	pop	r18
    121e:	0f 90       	pop	r0
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	0f 90       	pop	r0
    1224:	1f 90       	pop	r1
    1226:	18 95       	reti

00001228 <__vector_11>:

/* USART, Rx Complete */
ISR(USART_RXC_vect)
{
    1228:	1f 92       	push	r1
    122a:	0f 92       	push	r0
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	0f 92       	push	r0
    1230:	11 24       	eor	r1, r1
    1232:	2f 93       	push	r18
    1234:	3f 93       	push	r19
    1236:	4f 93       	push	r20
    1238:	5f 93       	push	r21
    123a:	6f 93       	push	r22
    123c:	7f 93       	push	r23
    123e:	8f 93       	push	r24
    1240:	9f 93       	push	r25
    1242:	af 93       	push	r26
    1244:	bf 93       	push	r27
    1246:	ef 93       	push	r30
    1248:	ff 93       	push	r31
	if (InterruptFuncTable[USART_RXC_vect_num] != NULL)
    124a:	e0 91 45 01 	lds	r30, 0x0145
    124e:	f0 91 46 01 	lds	r31, 0x0146
    1252:	30 97       	sbiw	r30, 0x00	; 0
    1254:	29 f0       	breq	.+10     	; 0x1260 <__vector_11+0x38>
		(*(InterruptFuncTable[USART_RXC_vect_num]))(InterruptSenderTable[USART_RXC_vect_num]);
    1256:	80 91 6b 01 	lds	r24, 0x016B
    125a:	90 91 6c 01 	lds	r25, 0x016C
    125e:	09 95       	icall
}
    1260:	ff 91       	pop	r31
    1262:	ef 91       	pop	r30
    1264:	bf 91       	pop	r27
    1266:	af 91       	pop	r26
    1268:	9f 91       	pop	r25
    126a:	8f 91       	pop	r24
    126c:	7f 91       	pop	r23
    126e:	6f 91       	pop	r22
    1270:	5f 91       	pop	r21
    1272:	4f 91       	pop	r20
    1274:	3f 91       	pop	r19
    1276:	2f 91       	pop	r18
    1278:	0f 90       	pop	r0
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	0f 90       	pop	r0
    127e:	1f 90       	pop	r1
    1280:	18 95       	reti

00001282 <__vector_12>:

/* USART Data Register Empty */
ISR(USART_UDRE_vect)
{
    1282:	1f 92       	push	r1
    1284:	0f 92       	push	r0
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	0f 92       	push	r0
    128a:	11 24       	eor	r1, r1
    128c:	2f 93       	push	r18
    128e:	3f 93       	push	r19
    1290:	4f 93       	push	r20
    1292:	5f 93       	push	r21
    1294:	6f 93       	push	r22
    1296:	7f 93       	push	r23
    1298:	8f 93       	push	r24
    129a:	9f 93       	push	r25
    129c:	af 93       	push	r26
    129e:	bf 93       	push	r27
    12a0:	ef 93       	push	r30
    12a2:	ff 93       	push	r31
	if (InterruptFuncTable[USART_UDRE_vect_num] != NULL)
    12a4:	e0 91 47 01 	lds	r30, 0x0147
    12a8:	f0 91 48 01 	lds	r31, 0x0148
    12ac:	30 97       	sbiw	r30, 0x00	; 0
    12ae:	29 f0       	breq	.+10     	; 0x12ba <__vector_12+0x38>
		(*(InterruptFuncTable[USART_UDRE_vect_num]))(InterruptSenderTable[USART_UDRE_vect_num]);
    12b0:	80 91 6d 01 	lds	r24, 0x016D
    12b4:	90 91 6e 01 	lds	r25, 0x016E
    12b8:	09 95       	icall
}
    12ba:	ff 91       	pop	r31
    12bc:	ef 91       	pop	r30
    12be:	bf 91       	pop	r27
    12c0:	af 91       	pop	r26
    12c2:	9f 91       	pop	r25
    12c4:	8f 91       	pop	r24
    12c6:	7f 91       	pop	r23
    12c8:	6f 91       	pop	r22
    12ca:	5f 91       	pop	r21
    12cc:	4f 91       	pop	r20
    12ce:	3f 91       	pop	r19
    12d0:	2f 91       	pop	r18
    12d2:	0f 90       	pop	r0
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	0f 90       	pop	r0
    12d8:	1f 90       	pop	r1
    12da:	18 95       	reti

000012dc <__vector_13>:

/* USART, Tx Complete */
ISR(USART_TXC_vect)
{
    12dc:	1f 92       	push	r1
    12de:	0f 92       	push	r0
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	0f 92       	push	r0
    12e4:	11 24       	eor	r1, r1
    12e6:	2f 93       	push	r18
    12e8:	3f 93       	push	r19
    12ea:	4f 93       	push	r20
    12ec:	5f 93       	push	r21
    12ee:	6f 93       	push	r22
    12f0:	7f 93       	push	r23
    12f2:	8f 93       	push	r24
    12f4:	9f 93       	push	r25
    12f6:	af 93       	push	r26
    12f8:	bf 93       	push	r27
    12fa:	ef 93       	push	r30
    12fc:	ff 93       	push	r31
	if (InterruptFuncTable[USART_TXC_vect_num] != NULL)
    12fe:	e0 91 49 01 	lds	r30, 0x0149
    1302:	f0 91 4a 01 	lds	r31, 0x014A
    1306:	30 97       	sbiw	r30, 0x00	; 0
    1308:	29 f0       	breq	.+10     	; 0x1314 <__vector_13+0x38>
		(*(InterruptFuncTable[USART_TXC_vect_num]))(InterruptSenderTable[USART_TXC_vect_num]);
    130a:	80 91 6f 01 	lds	r24, 0x016F
    130e:	90 91 70 01 	lds	r25, 0x0170
    1312:	09 95       	icall
}
    1314:	ff 91       	pop	r31
    1316:	ef 91       	pop	r30
    1318:	bf 91       	pop	r27
    131a:	af 91       	pop	r26
    131c:	9f 91       	pop	r25
    131e:	8f 91       	pop	r24
    1320:	7f 91       	pop	r23
    1322:	6f 91       	pop	r22
    1324:	5f 91       	pop	r21
    1326:	4f 91       	pop	r20
    1328:	3f 91       	pop	r19
    132a:	2f 91       	pop	r18
    132c:	0f 90       	pop	r0
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	0f 90       	pop	r0
    1332:	1f 90       	pop	r1
    1334:	18 95       	reti

00001336 <__vector_14>:

/* ADC Conversion Complete */
ISR(ADC_vect)
{
    1336:	1f 92       	push	r1
    1338:	0f 92       	push	r0
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	0f 92       	push	r0
    133e:	11 24       	eor	r1, r1
    1340:	2f 93       	push	r18
    1342:	3f 93       	push	r19
    1344:	4f 93       	push	r20
    1346:	5f 93       	push	r21
    1348:	6f 93       	push	r22
    134a:	7f 93       	push	r23
    134c:	8f 93       	push	r24
    134e:	9f 93       	push	r25
    1350:	af 93       	push	r26
    1352:	bf 93       	push	r27
    1354:	ef 93       	push	r30
    1356:	ff 93       	push	r31
	if (InterruptFuncTable[ADC_vect_num] != NULL)
    1358:	e0 91 4b 01 	lds	r30, 0x014B
    135c:	f0 91 4c 01 	lds	r31, 0x014C
    1360:	30 97       	sbiw	r30, 0x00	; 0
    1362:	29 f0       	breq	.+10     	; 0x136e <__vector_14+0x38>
		(*(InterruptFuncTable[ADC_vect_num]))(InterruptSenderTable[ADC_vect_num]);
    1364:	80 91 71 01 	lds	r24, 0x0171
    1368:	90 91 72 01 	lds	r25, 0x0172
    136c:	09 95       	icall
}
    136e:	ff 91       	pop	r31
    1370:	ef 91       	pop	r30
    1372:	bf 91       	pop	r27
    1374:	af 91       	pop	r26
    1376:	9f 91       	pop	r25
    1378:	8f 91       	pop	r24
    137a:	7f 91       	pop	r23
    137c:	6f 91       	pop	r22
    137e:	5f 91       	pop	r21
    1380:	4f 91       	pop	r20
    1382:	3f 91       	pop	r19
    1384:	2f 91       	pop	r18
    1386:	0f 90       	pop	r0
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	0f 90       	pop	r0
    138c:	1f 90       	pop	r1
    138e:	18 95       	reti

00001390 <__vector_15>:

/* EEPROM Ready */
ISR(EE_RDY_vect)
{
    1390:	1f 92       	push	r1
    1392:	0f 92       	push	r0
    1394:	0f b6       	in	r0, 0x3f	; 63
    1396:	0f 92       	push	r0
    1398:	11 24       	eor	r1, r1
    139a:	2f 93       	push	r18
    139c:	3f 93       	push	r19
    139e:	4f 93       	push	r20
    13a0:	5f 93       	push	r21
    13a2:	6f 93       	push	r22
    13a4:	7f 93       	push	r23
    13a6:	8f 93       	push	r24
    13a8:	9f 93       	push	r25
    13aa:	af 93       	push	r26
    13ac:	bf 93       	push	r27
    13ae:	ef 93       	push	r30
    13b0:	ff 93       	push	r31
	if (InterruptFuncTable[EE_RDY_vect_num] != NULL)
    13b2:	e0 91 4d 01 	lds	r30, 0x014D
    13b6:	f0 91 4e 01 	lds	r31, 0x014E
    13ba:	30 97       	sbiw	r30, 0x00	; 0
    13bc:	29 f0       	breq	.+10     	; 0x13c8 <__vector_15+0x38>
		(*(InterruptFuncTable[EE_RDY_vect_num]))(InterruptSenderTable[EE_RDY_vect_num]);
    13be:	80 91 73 01 	lds	r24, 0x0173
    13c2:	90 91 74 01 	lds	r25, 0x0174
    13c6:	09 95       	icall
}
    13c8:	ff 91       	pop	r31
    13ca:	ef 91       	pop	r30
    13cc:	bf 91       	pop	r27
    13ce:	af 91       	pop	r26
    13d0:	9f 91       	pop	r25
    13d2:	8f 91       	pop	r24
    13d4:	7f 91       	pop	r23
    13d6:	6f 91       	pop	r22
    13d8:	5f 91       	pop	r21
    13da:	4f 91       	pop	r20
    13dc:	3f 91       	pop	r19
    13de:	2f 91       	pop	r18
    13e0:	0f 90       	pop	r0
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	0f 90       	pop	r0
    13e6:	1f 90       	pop	r1
    13e8:	18 95       	reti

000013ea <__vector_16>:

/* Analog Comparator */
ISR(ANA_COMP_vect)
{
    13ea:	1f 92       	push	r1
    13ec:	0f 92       	push	r0
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	0f 92       	push	r0
    13f2:	11 24       	eor	r1, r1
    13f4:	2f 93       	push	r18
    13f6:	3f 93       	push	r19
    13f8:	4f 93       	push	r20
    13fa:	5f 93       	push	r21
    13fc:	6f 93       	push	r22
    13fe:	7f 93       	push	r23
    1400:	8f 93       	push	r24
    1402:	9f 93       	push	r25
    1404:	af 93       	push	r26
    1406:	bf 93       	push	r27
    1408:	ef 93       	push	r30
    140a:	ff 93       	push	r31
	if (InterruptFuncTable[ANA_COMP_vect_num] != NULL)
    140c:	e0 91 4f 01 	lds	r30, 0x014F
    1410:	f0 91 50 01 	lds	r31, 0x0150
    1414:	30 97       	sbiw	r30, 0x00	; 0
    1416:	29 f0       	breq	.+10     	; 0x1422 <__vector_16+0x38>
		(*(InterruptFuncTable[ANA_COMP_vect_num]))(InterruptSenderTable[ANA_COMP_vect_num]);
    1418:	80 91 75 01 	lds	r24, 0x0175
    141c:	90 91 76 01 	lds	r25, 0x0176
    1420:	09 95       	icall
}
    1422:	ff 91       	pop	r31
    1424:	ef 91       	pop	r30
    1426:	bf 91       	pop	r27
    1428:	af 91       	pop	r26
    142a:	9f 91       	pop	r25
    142c:	8f 91       	pop	r24
    142e:	7f 91       	pop	r23
    1430:	6f 91       	pop	r22
    1432:	5f 91       	pop	r21
    1434:	4f 91       	pop	r20
    1436:	3f 91       	pop	r19
    1438:	2f 91       	pop	r18
    143a:	0f 90       	pop	r0
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	0f 90       	pop	r0
    1440:	1f 90       	pop	r1
    1442:	18 95       	reti

00001444 <__vector_17>:

/* 2-wire Serial Interface */
ISR(TWI_vect)
{
    1444:	1f 92       	push	r1
    1446:	0f 92       	push	r0
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	0f 92       	push	r0
    144c:	11 24       	eor	r1, r1
    144e:	2f 93       	push	r18
    1450:	3f 93       	push	r19
    1452:	4f 93       	push	r20
    1454:	5f 93       	push	r21
    1456:	6f 93       	push	r22
    1458:	7f 93       	push	r23
    145a:	8f 93       	push	r24
    145c:	9f 93       	push	r25
    145e:	af 93       	push	r26
    1460:	bf 93       	push	r27
    1462:	ef 93       	push	r30
    1464:	ff 93       	push	r31
	if (InterruptFuncTable[TWI_vect_num] != NULL)
    1466:	e0 91 51 01 	lds	r30, 0x0151
    146a:	f0 91 52 01 	lds	r31, 0x0152
    146e:	30 97       	sbiw	r30, 0x00	; 0
    1470:	29 f0       	breq	.+10     	; 0x147c <__vector_17+0x38>
		(*(InterruptFuncTable[TWI_vect_num]))(InterruptSenderTable[TWI_vect_num]);
    1472:	80 91 77 01 	lds	r24, 0x0177
    1476:	90 91 78 01 	lds	r25, 0x0178
    147a:	09 95       	icall
}
    147c:	ff 91       	pop	r31
    147e:	ef 91       	pop	r30
    1480:	bf 91       	pop	r27
    1482:	af 91       	pop	r26
    1484:	9f 91       	pop	r25
    1486:	8f 91       	pop	r24
    1488:	7f 91       	pop	r23
    148a:	6f 91       	pop	r22
    148c:	5f 91       	pop	r21
    148e:	4f 91       	pop	r20
    1490:	3f 91       	pop	r19
    1492:	2f 91       	pop	r18
    1494:	0f 90       	pop	r0
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	0f 90       	pop	r0
    149a:	1f 90       	pop	r1
    149c:	18 95       	reti

0000149e <__vector_18>:

/* Store Program Memory Ready */
ISR(SPM_RDY_vect)
{
    149e:	1f 92       	push	r1
    14a0:	0f 92       	push	r0
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	0f 92       	push	r0
    14a6:	11 24       	eor	r1, r1
    14a8:	2f 93       	push	r18
    14aa:	3f 93       	push	r19
    14ac:	4f 93       	push	r20
    14ae:	5f 93       	push	r21
    14b0:	6f 93       	push	r22
    14b2:	7f 93       	push	r23
    14b4:	8f 93       	push	r24
    14b6:	9f 93       	push	r25
    14b8:	af 93       	push	r26
    14ba:	bf 93       	push	r27
    14bc:	ef 93       	push	r30
    14be:	ff 93       	push	r31
	if (InterruptFuncTable[SPM_RDY_vect_num] != NULL)
    14c0:	e0 91 53 01 	lds	r30, 0x0153
    14c4:	f0 91 54 01 	lds	r31, 0x0154
    14c8:	30 97       	sbiw	r30, 0x00	; 0
    14ca:	29 f0       	breq	.+10     	; 0x14d6 <__vector_18+0x38>
		(*(InterruptFuncTable[SPM_RDY_vect_num]))(InterruptSenderTable[SPM_RDY_vect_num]);
    14cc:	80 91 79 01 	lds	r24, 0x0179
    14d0:	90 91 7a 01 	lds	r25, 0x017A
    14d4:	09 95       	icall
}
    14d6:	ff 91       	pop	r31
    14d8:	ef 91       	pop	r30
    14da:	bf 91       	pop	r27
    14dc:	af 91       	pop	r26
    14de:	9f 91       	pop	r25
    14e0:	8f 91       	pop	r24
    14e2:	7f 91       	pop	r23
    14e4:	6f 91       	pop	r22
    14e6:	5f 91       	pop	r21
    14e8:	4f 91       	pop	r20
    14ea:	3f 91       	pop	r19
    14ec:	2f 91       	pop	r18
    14ee:	0f 90       	pop	r0
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	0f 90       	pop	r0
    14f4:	1f 90       	pop	r1
    14f6:	18 95       	reti

000014f8 <__cxa_pure_virtual>:
CSensorADC	adc;
CLaserBoard laserBoard;
CLaserControlApp App;
CDGUSDatabase Database;

extern "C" void __cxa_pure_virtual()
    14f8:	ff cf       	rjmp	.-2      	; 0x14f8 <__cxa_pure_virtual>

000014fa <_GLOBAL__sub_I_usart>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CDGUSUSART usart;
    14fa:	84 ec       	ldi	r24, 0xC4	; 196
    14fc:	91 e0       	ldi	r25, 0x01	; 1
    14fe:	49 d6       	rcall	.+3218   	; 0x2192 <__data_load_end+0x1a4>
CMBSender sender;
    1500:	8b ea       	ldi	r24, 0xAB	; 171
    1502:	91 e0       	ldi	r25, 0x01	; 1
    1504:	af d1       	rcall	.+862    	; 0x1864 <_ZN9CMBSenderC1Ev>
CRelayTimer relayTimer;
    1506:	88 ea       	ldi	r24, 0xA8	; 168
    1508:	91 e0       	ldi	r25, 0x01	; 1
    150a:	45 dc       	rcall	.-1910   	; 0xd96 <_ZN11CRelayTimerC1Ev>
CSensorADC	adc;
    150c:	84 ea       	ldi	r24, 0xA4	; 164
    150e:	91 e0       	ldi	r25, 0x01	; 1
    1510:	a3 dc       	rcall	.-1722   	; 0xe58 <_ZN10CSensorADCC1Ev>
CLaserBoard laserBoard;
    1512:	83 ea       	ldi	r24, 0xA3	; 163
    1514:	91 e0       	ldi	r25, 0x01	; 1
    1516:	4f d6       	rcall	.+3230   	; 0x21b6 <__data_load_end+0x1c8>
CLaserControlApp App;
    1518:	85 e8       	ldi	r24, 0x85	; 133
    151a:	91 e0       	ldi	r25, 0x01	; 1
    151c:	fa d6       	rcall	.+3572   	; 0x2312 <__data_load_end+0x324>
CDGUSDatabase Database;
    151e:	8d e7       	ldi	r24, 0x7D	; 125
    1520:	91 e0       	ldi	r25, 0x01	; 1
    1522:	e1 d5       	rcall	.+3010   	; 0x20e6 <__data_load_end+0xf8>
    1524:	08 95       	ret

00001526 <_GLOBAL__sub_D_usart>:
    1526:	8d e7       	ldi	r24, 0x7D	; 125
    1528:	91 e0       	ldi	r25, 0x01	; 1
    152a:	de d5       	rcall	.+3004   	; 0x20e8 <__data_load_end+0xfa>
CDGUSUSART usart;
CMBSender sender;
CRelayTimer relayTimer;
CSensorADC	adc;
CLaserBoard laserBoard;
CLaserControlApp App;
    152c:	85 e8       	ldi	r24, 0x85	; 133
    152e:	91 e0       	ldi	r25, 0x01	; 1
    1530:	f6 d6       	rcall	.+3564   	; 0x231e <__data_load_end+0x330>
/* Global variables */
CDGUSUSART usart;
CMBSender sender;
CRelayTimer relayTimer;
CSensorADC	adc;
CLaserBoard laserBoard;
    1532:	83 ea       	ldi	r24, 0xA3	; 163
    1534:	91 e0       	ldi	r25, 0x01	; 1
    1536:	40 d6       	rcall	.+3200   	; 0x21b8 <__data_load_end+0x1ca>

/* Global variables */
CDGUSUSART usart;
CMBSender sender;
CRelayTimer relayTimer;
CSensorADC	adc;
    1538:	84 ea       	ldi	r24, 0xA4	; 164
    153a:	91 e0       	ldi	r25, 0x01	; 1
    153c:	93 dc       	rcall	.-1754   	; 0xe64 <_ZN10CSensorADCD1Ev>
#include <util/delay.h>

/* Global variables */
CDGUSUSART usart;
CMBSender sender;
CRelayTimer relayTimer;
    153e:	88 ea       	ldi	r24, 0xA8	; 168
    1540:	91 e0       	ldi	r25, 0x01	; 1
    1542:	34 dc       	rcall	.-1944   	; 0xdac <_ZN11CRelayTimerD1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CDGUSUSART usart;
CMBSender sender;
    1544:	8b ea       	ldi	r24, 0xAB	; 171
    1546:	91 e0       	ldi	r25, 0x01	; 1
    1548:	e0 d1       	rcall	.+960    	; 0x190a <_ZN9CMBSenderD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CDGUSUSART usart;
    154a:	84 ec       	ldi	r24, 0xC4	; 196
    154c:	91 e0       	ldi	r25, 0x01	; 1
    154e:	2c d6       	rcall	.+3160   	; 0x21a8 <__data_load_end+0x1ba>
    1550:	08 95       	ret

00001552 <_Z16SystemInitializev>:
	{
	}
}

void SystemInitialize()
{
    1552:	ef 92       	push	r14
    1554:	0f 93       	push	r16
    1556:	1f 93       	push	r17
	cli();	/* Disable global interrupts */
    1558:	f8 94       	cli
	
	// Initialize modules
	laserBoard.Init_Relay();
    155a:	83 ea       	ldi	r24, 0xA3	; 163
    155c:	91 e0       	ldi	r25, 0x01	; 1
    155e:	3c d6       	rcall	.+3192   	; 0x21d8 <__data_load_end+0x1ea>
	laserBoard.Relay1Off();
    1560:	83 ea       	ldi	r24, 0xA3	; 163
    1562:	91 e0       	ldi	r25, 0x01	; 1
    1564:	2e d6       	rcall	.+3164   	; 0x21c2 <__data_load_end+0x1d4>
	laserBoard.Relay2Off();
    1566:	83 ea       	ldi	r24, 0xA3	; 163
    1568:	91 e0       	ldi	r25, 0x01	; 1
    156a:	2d d6       	rcall	.+3162   	; 0x21c6 <__data_load_end+0x1d8>
	laserBoard.SetINT1Callback(&CLaserControlApp::OnEncoderStatic, &App);
    156c:	45 e8       	ldi	r20, 0x85	; 133
    156e:	51 e0       	ldi	r21, 0x01	; 1
    1570:	68 ea       	ldi	r22, 0xA8	; 168
    1572:	72 e0       	ldi	r23, 0x02	; 2
    1574:	83 ea       	ldi	r24, 0xA3	; 163
    1576:	91 e0       	ldi	r25, 0x01	; 1
    1578:	5c d6       	rcall	.+3256   	; 0x2232 <__data_load_end+0x244>
	laserBoard.SetTIM1Callback(&CLaserControlApp::OnPWMStatic, &App);
    157a:	45 e8       	ldi	r20, 0x85	; 133
    157c:	51 e0       	ldi	r21, 0x01	; 1
    157e:	66 ea       	ldi	r22, 0xA6	; 166
    1580:	72 e0       	ldi	r23, 0x02	; 2
    1582:	83 ea       	ldi	r24, 0xA3	; 163
    1584:	91 e0       	ldi	r25, 0x01	; 1
    1586:	62 d6       	rcall	.+3268   	; 0x224c <__data_load_end+0x25e>
	
	// Initialize USART
	usart.Initialize(BAUD_115200, DISABLE, STOP_1BIT, true);
    1588:	01 e0       	ldi	r16, 0x01	; 1
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	40 e0       	ldi	r20, 0x00	; 0
    158e:	69 e0       	ldi	r22, 0x09	; 9
    1590:	84 ec       	ldi	r24, 0xC4	; 196
    1592:	91 e0       	ldi	r25, 0x01	; 1
    1594:	aa d5       	rcall	.+2900   	; 0x20ea <__data_load_end+0xfc>
	
	// Initialize timer
	relayTimer.Initialize(WGM_CTC, COM_Clear, CS_DIV1024, false);
    1596:	00 e0       	ldi	r16, 0x00	; 0
    1598:	27 e0       	ldi	r18, 0x07	; 7
    159a:	42 e0       	ldi	r20, 0x02	; 2
    159c:	62 e0       	ldi	r22, 0x02	; 2
    159e:	88 ea       	ldi	r24, 0xA8	; 168
    15a0:	91 e0       	ldi	r25, 0x01	; 1
    15a2:	a2 db       	rcall	.-2236   	; 0xce8 <_ZN11CRelayTimer10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM31TIMER_COMPAREMATCHOUT_MODE_ENUM22TIMER_CLOCKSELECT_ENUMb>
	relayTimer.AsyncMode(false);
    15a4:	60 e0       	ldi	r22, 0x00	; 0
    15a6:	88 ea       	ldi	r24, 0xA8	; 168
    15a8:	91 e0       	ldi	r25, 0x01	; 1
    15aa:	07 dc       	rcall	.-2034   	; 0xdba <_ZN11CRelayTimer9AsyncModeEb>
	relayTimer.SetCOMPACallback(&CLaserControlApp::OnTimerStatic, &App);
    15ac:	45 e8       	ldi	r20, 0x85	; 133
    15ae:	51 e0       	ldi	r21, 0x01	; 1
    15b0:	62 e7       	ldi	r22, 0x72	; 114
    15b2:	76 e0       	ldi	r23, 0x06	; 6
    15b4:	88 ea       	ldi	r24, 0xA8	; 168
    15b6:	91 e0       	ldi	r25, 0x01	; 1
    15b8:	e3 db       	rcall	.-2106   	; 0xd80 <_ZN11CRelayTimer16SetCOMPACallbackEPFvPvES0_>
	relayTimer.SetCOMPA((uint8_t)125);
    15ba:	6d e7       	ldi	r22, 0x7D	; 125
    15bc:	88 ea       	ldi	r24, 0xA8	; 168
    15be:	91 e0       	ldi	r25, 0x01	; 1
    15c0:	d1 db       	rcall	.-2142   	; 0xd64 <_ZN11CRelayTimer8SetCOMPAEh>
	
	// Initialize ADC
	adc.Initialize(REF_AVCC, ADC_CHANNEL0, ADC_PSCL_DIV128, false, true);
    15c2:	ee 24       	eor	r14, r14
    15c4:	e3 94       	inc	r14
    15c6:	27 e0       	ldi	r18, 0x07	; 7
    15c8:	40 e0       	ldi	r20, 0x00	; 0
    15ca:	61 e0       	ldi	r22, 0x01	; 1
    15cc:	84 ea       	ldi	r24, 0xA4	; 164
    15ce:	91 e0       	ldi	r25, 0x01	; 1
    15d0:	fe db       	rcall	.-2052   	; 0xdce <_ZN10CSensorADC10InitializeE18ADC_REFERENCE_ENUM16ADC_CHANNEL_ENUM18ADC_PRESCALER_ENUMbb>
	adc.Start();
    15d2:	84 ea       	ldi	r24, 0xA4	; 164
    15d4:	91 e0       	ldi	r25, 0x01	; 1
    15d6:	23 dc       	rcall	.-1978   	; 0xe1e <_ZN10CSensorADC5StartEv>
	
	// Construct MODBUS protocol module
	sender.Initialize(&usart, &App, 256, 256);
    15d8:	00 e0       	ldi	r16, 0x00	; 0
    15da:	11 e0       	ldi	r17, 0x01	; 1
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	31 e0       	ldi	r19, 0x01	; 1
    15e0:	45 e8       	ldi	r20, 0x85	; 133
    15e2:	51 e0       	ldi	r21, 0x01	; 1
    15e4:	64 ec       	ldi	r22, 0xC4	; 196
    15e6:	71 e0       	ldi	r23, 0x01	; 1
    15e8:	8b ea       	ldi	r24, 0xAB	; 171
    15ea:	91 e0       	ldi	r25, 0x01	; 1
    15ec:	41 d1       	rcall	.+642    	; 0x1870 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj>
	App.Initialize(&sender);
    15ee:	6b ea       	ldi	r22, 0xAB	; 171
    15f0:	71 e0       	ldi	r23, 0x01	; 1
    15f2:	85 e8       	ldi	r24, 0x85	; 133
    15f4:	91 e0       	ldi	r25, 0x01	; 1
    15f6:	9a d6       	rcall	.+3380   	; 0x232c <__data_load_end+0x33e>
	
	sei();	/* Enable global interrupts */
    15f8:	78 94       	sei
}
    15fa:	1f 91       	pop	r17
    15fc:	0f 91       	pop	r16
    15fe:	ef 90       	pop	r14
    1600:	08 95       	ret

00001602 <main>:
	 
int main(void)
{	
	// Initialization system
	SystemInitialize();
    1602:	a7 df       	rcall	.-178    	; 0x1552 <_Z16SystemInitializev>
    1604:	2f ef       	ldi	r18, 0xFF	; 255
    1606:	87 ea       	ldi	r24, 0xA7	; 167
    1608:	91 e6       	ldi	r25, 0x61	; 97
    160a:	21 50       	subi	r18, 0x01	; 1
    160c:	80 40       	sbci	r24, 0x00	; 0
    160e:	90 40       	sbci	r25, 0x00	; 0
    1610:	e1 f7       	brne	.-8      	; 0x160a <main+0x8>
    1612:	00 c0       	rjmp	.+0      	; 0x1614 <main+0x12>
    1614:	00 00       	nop
	
	// Startup delay (Beep "Imperial March")
	_delay_ms(2000);
	
	// Initialize application GUI
	App.Start();
    1616:	85 e8       	ldi	r24, 0x85	; 133
    1618:	91 e0       	ldi	r25, 0x01	; 1
    161a:	a1 d6       	rcall	.+3394   	; 0x235e <__data_load_end+0x370>
		// Loop delay
		_delay_ms(1);
		
		// Process application
		static uint16_t prs = 0;
		if ((prs++ % 50) == 0)
    161c:	c2 e3       	ldi	r28, 0x32	; 50
    161e:	8f e9       	ldi	r24, 0x9F	; 159
    1620:	9f e0       	ldi	r25, 0x0F	; 15
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	f1 f7       	brne	.-4      	; 0x1622 <main+0x20>
    1626:	00 c0       	rjmp	.+0      	; 0x1628 <main+0x26>
    1628:	00 00       	nop
    162a:	40 91 7b 01 	lds	r20, 0x017B
    162e:	50 91 7c 01 	lds	r21, 0x017C
    1632:	ca 01       	movw	r24, r20
    1634:	01 96       	adiw	r24, 0x01	; 1
    1636:	90 93 7c 01 	sts	0x017C, r25
    163a:	80 93 7b 01 	sts	0x017B, r24
    163e:	9a 01       	movw	r18, r20
    1640:	36 95       	lsr	r19
    1642:	27 95       	ror	r18
    1644:	ab e7       	ldi	r26, 0x7B	; 123
    1646:	b4 e1       	ldi	r27, 0x14	; 20
    1648:	21 d3       	rcall	.+1602   	; 0x1c8c <__umulhisi3>
    164a:	96 95       	lsr	r25
    164c:	87 95       	ror	r24
    164e:	c8 9f       	mul	r28, r24
    1650:	90 01       	movw	r18, r0
    1652:	c9 9f       	mul	r28, r25
    1654:	30 0d       	add	r19, r0
    1656:	11 24       	eor	r1, r1
    1658:	42 17       	cp	r20, r18
    165a:	53 07       	cpc	r21, r19
    165c:	01 f7       	brne	.-64     	; 0x161e <main+0x1c>
			App.Run();
    165e:	85 e8       	ldi	r24, 0x85	; 133
    1660:	91 e0       	ldi	r25, 0x01	; 1
    1662:	78 d7       	rcall	.+3824   	; 0x2554 <__data_load_end+0x566>
    1664:	dc cf       	rjmp	.-72     	; 0x161e <main+0x1c>

00001666 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
	free(tx_buffer);
}

// local methods
void CMBEventsHandler::FillRegDataTx(uint8_t addr, uint8_t* data, uint8_t length)
{
    1666:	cf 93       	push	r28
    1668:	df 93       	push	r29
    166a:	ec 01       	movw	r28, r24
		// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    166c:	ec 81       	ldd	r30, Y+4	; 0x04
    166e:	fd 81       	ldd	r31, Y+5	; 0x05
    1670:	8a ea       	ldi	r24, 0xAA	; 170
    1672:	80 83       	st	Z, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    1674:	ec 81       	ldd	r30, Y+4	; 0x04
    1676:	fd 81       	ldd	r31, Y+5	; 0x05
    1678:	8c ec       	ldi	r24, 0xCC	; 204
    167a:	81 83       	std	Z+1, r24	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 4; //CMD (1) + DATA(length) + CRC(2) + ADDR(1)
#else
	tx_buffer[2] = length + 2; //CMD (1) + DATA(length) + ADDR(1)
    167c:	ec 81       	ldd	r30, Y+4	; 0x04
    167e:	fd 81       	ldd	r31, Y+5	; 0x05
    1680:	82 e0       	ldi	r24, 0x02	; 2
    1682:	82 0f       	add	r24, r18
    1684:	82 83       	std	Z+2, r24	; 0x02
#endif
	tx_buffer[3] = 0x80;	// Frame command
    1686:	ec 81       	ldd	r30, Y+4	; 0x04
    1688:	fd 81       	ldd	r31, Y+5	; 0x05
    168a:	80 e8       	ldi	r24, 0x80	; 128
    168c:	83 83       	std	Z+3, r24	; 0x03
	tx_buffer[4] = addr;	// Register address
    168e:	ec 81       	ldd	r30, Y+4	; 0x04
    1690:	fd 81       	ldd	r31, Y+5	; 0x05
    1692:	64 83       	std	Z+4, r22	; 0x04
	tx_frame_length = length + 5;
    1694:	85 e0       	ldi	r24, 0x05	; 5
    1696:	82 0f       	add	r24, r18
    1698:	89 87       	std	Y+9, r24	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	21 15       	cp	r18, r1
    169e:	31 05       	cpc	r19, r1
    16a0:	81 f0       	breq	.+32     	; 0x16c2 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x5c>
    16a2:	da 01       	movw	r26, r20
    16a4:	42 0f       	add	r20, r18
    16a6:	53 1f       	adc	r21, r19
    16a8:	65 e0       	ldi	r22, 0x05	; 5
    16aa:	70 e0       	ldi	r23, 0x00	; 0
		tx_buffer[i+5] = data[i];
    16ac:	9d 91       	ld	r25, X+
    16ae:	ec 81       	ldd	r30, Y+4	; 0x04
    16b0:	fd 81       	ldd	r31, Y+5	; 0x05
    16b2:	e6 0f       	add	r30, r22
    16b4:	f7 1f       	adc	r31, r23
    16b6:	90 83       	st	Z, r25
    16b8:	6f 5f       	subi	r22, 0xFF	; 255
    16ba:	7f 4f       	sbci	r23, 0xFF	; 255
	tx_buffer[3] = 0x80;	// Frame command
	tx_buffer[4] = addr;	// Register address
	tx_frame_length = length + 5;
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    16bc:	a4 17       	cp	r26, r20
    16be:	b5 07       	cpc	r27, r21
    16c0:	a9 f7       	brne	.-22     	; 0x16ac <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length]   = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	tx_frame_length = length + 7;
#endif
}
    16c2:	df 91       	pop	r29
    16c4:	cf 91       	pop	r28
    16c6:	08 95       	ret

000016c8 <_ZN16CMBEventsHandler13FillRegDataRqEhh>:

void CMBEventsHandler::FillRegDataRq(uint8_t addr, uint8_t length)
{
    16c8:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    16ca:	a4 81       	ldd	r26, Z+4	; 0x04
    16cc:	b5 81       	ldd	r27, Z+5	; 0x05
    16ce:	8a ea       	ldi	r24, 0xAA	; 170
    16d0:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    16d2:	a4 81       	ldd	r26, Z+4	; 0x04
    16d4:	b5 81       	ldd	r27, Z+5	; 0x05
    16d6:	8c ec       	ldi	r24, 0xCC	; 204
    16d8:	11 96       	adiw	r26, 0x01	; 1
    16da:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 5; //CMD(1) + DATA(2) + CRC(2)
#else
	tx_buffer[2] = 3; //CMD(1) + DATA(2)
    16dc:	a4 81       	ldd	r26, Z+4	; 0x04
    16de:	b5 81       	ldd	r27, Z+5	; 0x05
    16e0:	83 e0       	ldi	r24, 0x03	; 3
    16e2:	12 96       	adiw	r26, 0x02	; 2
    16e4:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x81;	// Frame command
    16e6:	a4 81       	ldd	r26, Z+4	; 0x04
    16e8:	b5 81       	ldd	r27, Z+5	; 0x05
    16ea:	81 e8       	ldi	r24, 0x81	; 129
    16ec:	13 96       	adiw	r26, 0x03	; 3
    16ee:	8c 93       	st	X, r24
	tx_buffer[4] = addr;	// Register address
    16f0:	a4 81       	ldd	r26, Z+4	; 0x04
    16f2:	b5 81       	ldd	r27, Z+5	; 0x05
    16f4:	14 96       	adiw	r26, 0x04	; 4
    16f6:	6c 93       	st	X, r22
	tx_buffer[5] = length;	// Data
    16f8:	a4 81       	ldd	r26, Z+4	; 0x04
    16fa:	b5 81       	ldd	r27, Z+5	; 0x05
    16fc:	15 96       	adiw	r26, 0x05	; 5
    16fe:	4c 93       	st	X, r20
	tx_frame_length = 6;
    1700:	86 e0       	ldi	r24, 0x06	; 6
    1702:	81 87       	std	Z+9, r24	; 0x09
    1704:	08 95       	ret

00001706 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	tx_frame_length = length + 8;
#endif
}

void CMBEventsHandler::FillVarDataTx(uint16_t addr, uint16_t* data, uint16_t length)
{
    1706:	0f 93       	push	r16
    1708:	1f 93       	push	r17
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    170e:	dc 01       	movw	r26, r24
    1710:	14 96       	adiw	r26, 0x04	; 4
    1712:	ed 91       	ld	r30, X+
    1714:	fc 91       	ld	r31, X
    1716:	15 97       	sbiw	r26, 0x05	; 5
    1718:	aa ea       	ldi	r26, 0xAA	; 170
    171a:	a0 83       	st	Z, r26
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    171c:	ec 01       	movw	r28, r24
    171e:	ec 81       	ldd	r30, Y+4	; 0x04
    1720:	fd 81       	ldd	r31, Y+5	; 0x05
    1722:	ac ec       	ldi	r26, 0xCC	; 204
    1724:	a1 83       	std	Z+1, r26	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 5; //CMD (1) + DATA(length * 2) + CRC(2) + ADDR(2)
#else
	tx_buffer[2] = length + 3; //CMD (1) + DATA(length * 2) + ADDR(2)
    1726:	ec 81       	ldd	r30, Y+4	; 0x04
    1728:	fd 81       	ldd	r31, Y+5	; 0x05
    172a:	a3 e0       	ldi	r26, 0x03	; 3
    172c:	a2 0f       	add	r26, r18
    172e:	a2 83       	std	Z+2, r26	; 0x02
#endif
	tx_buffer[3] = 0x82;	// Frame command
    1730:	ec 81       	ldd	r30, Y+4	; 0x04
    1732:	fd 81       	ldd	r31, Y+5	; 0x05
    1734:	a2 e8       	ldi	r26, 0x82	; 130
    1736:	a3 83       	std	Z+3, r26	; 0x03
	tx_buffer[4] = addr >> 8;
    1738:	ec 81       	ldd	r30, Y+4	; 0x04
    173a:	fd 81       	ldd	r31, Y+5	; 0x05
    173c:	74 83       	std	Z+4, r23	; 0x04
	tx_buffer[5] = addr & 0xff;
    173e:	ec 81       	ldd	r30, Y+4	; 0x04
    1740:	fd 81       	ldd	r31, Y+5	; 0x05
    1742:	65 83       	std	Z+5, r22	; 0x05
	tx_frame_length = length + 6;
    1744:	66 e0       	ldi	r22, 0x06	; 6
    1746:	62 0f       	add	r22, r18
    1748:	69 87       	std	Y+9, r22	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    174a:	36 95       	lsr	r19
    174c:	27 95       	ror	r18
    174e:	21 15       	cp	r18, r1
    1750:	31 05       	cpc	r19, r1
    1752:	e1 f0       	breq	.+56     	; 0x178c <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x86>
    1754:	e4 2f       	mov	r30, r20
    1756:	f5 2f       	mov	r31, r21
    1758:	2d 5f       	subi	r18, 0xFD	; 253
    175a:	3f 4f       	sbci	r19, 0xFF	; 255
    175c:	22 0f       	add	r18, r18
    175e:	33 1f       	adc	r19, r19
    1760:	46 e0       	ldi	r20, 0x06	; 6
    1762:	50 e0       	ldi	r21, 0x00	; 0
	{
		tx_buffer[6 + i*2 + 0] = data[i] >> 8;
    1764:	ec 01       	movw	r28, r24
    1766:	ac 81       	ldd	r26, Y+4	; 0x04
    1768:	bd 81       	ldd	r27, Y+5	; 0x05
    176a:	a4 0f       	add	r26, r20
    176c:	b5 1f       	adc	r27, r21
    176e:	61 81       	ldd	r22, Z+1	; 0x01
    1770:	6c 93       	st	X, r22
		tx_buffer[6 + i*2 + 1] = data[i] & 0xff;
    1772:	ac 81       	ldd	r26, Y+4	; 0x04
    1774:	bd 81       	ldd	r27, Y+5	; 0x05
    1776:	a4 0f       	add	r26, r20
    1778:	b5 1f       	adc	r27, r21
    177a:	60 81       	ld	r22, Z
    177c:	32 96       	adiw	r30, 0x02	; 2
    177e:	11 96       	adiw	r26, 0x01	; 1
    1780:	6c 93       	st	X, r22
    1782:	4e 5f       	subi	r20, 0xFE	; 254
    1784:	5f 4f       	sbci	r21, 0xFF	; 255
	tx_buffer[4] = addr >> 8;
	tx_buffer[5] = addr & 0xff;
	tx_frame_length = length + 6;
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    1786:	42 17       	cp	r20, r18
    1788:	53 07       	cpc	r21, r19
    178a:	61 f7       	brne	.-40     	; 0x1764 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x5e>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length] = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	this->tx_frame_length = length * 2 + 8;
#endif
}
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	1f 91       	pop	r17
    1792:	0f 91       	pop	r16
    1794:	08 95       	ret

00001796 <_ZN16CMBEventsHandler13FillVarDataRqEjj>:

void CMBEventsHandler::FillVarDataRq(uint16_t addr, uint16_t length)
{
    1796:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    1798:	a4 81       	ldd	r26, Z+4	; 0x04
    179a:	b5 81       	ldd	r27, Z+5	; 0x05
    179c:	8a ea       	ldi	r24, 0xAA	; 170
    179e:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    17a0:	a4 81       	ldd	r26, Z+4	; 0x04
    17a2:	b5 81       	ldd	r27, Z+5	; 0x05
    17a4:	8c ec       	ldi	r24, 0xCC	; 204
    17a6:	11 96       	adiw	r26, 0x01	; 1
    17a8:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 6; //CMD(1) + DATA(3) + CRC(2)
#else
	tx_buffer[2] = 4; //CMD(1) + DATA(3)
    17aa:	a4 81       	ldd	r26, Z+4	; 0x04
    17ac:	b5 81       	ldd	r27, Z+5	; 0x05
    17ae:	84 e0       	ldi	r24, 0x04	; 4
    17b0:	12 96       	adiw	r26, 0x02	; 2
    17b2:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x83;				// Frame command
    17b4:	a4 81       	ldd	r26, Z+4	; 0x04
    17b6:	b5 81       	ldd	r27, Z+5	; 0x05
    17b8:	83 e8       	ldi	r24, 0x83	; 131
    17ba:	13 96       	adiw	r26, 0x03	; 3
    17bc:	8c 93       	st	X, r24
	tx_buffer[4] = addr >> 8;			// Register address
    17be:	a4 81       	ldd	r26, Z+4	; 0x04
    17c0:	b5 81       	ldd	r27, Z+5	; 0x05
    17c2:	14 96       	adiw	r26, 0x04	; 4
    17c4:	7c 93       	st	X, r23
	tx_buffer[5] = addr & 0xff;			// Register address
    17c6:	a4 81       	ldd	r26, Z+4	; 0x04
    17c8:	b5 81       	ldd	r27, Z+5	; 0x05
    17ca:	15 96       	adiw	r26, 0x05	; 5
    17cc:	6c 93       	st	X, r22
	tx_buffer[6] = length;				// Data
    17ce:	a4 81       	ldd	r26, Z+4	; 0x04
    17d0:	b5 81       	ldd	r27, Z+5	; 0x05
    17d2:	16 96       	adiw	r26, 0x06	; 6
    17d4:	4c 93       	st	X, r20
	tx_frame_length = 7;
    17d6:	87 e0       	ldi	r24, 0x07	; 7
    17d8:	81 87       	std	Z+9, r24	; 0x09
    17da:	08 95       	ret

000017dc <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
CMBEventsHandler::~CMBEventsHandler()
{
} //~CMBProtocol

void CMBEventsHandler::AllocateBuffers(uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    17dc:	0f 93       	push	r16
    17de:	1f 93       	push	r17
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	ec 01       	movw	r28, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	8a 01       	movw	r16, r20
	rx_bufferSize = rx_bufSize;
    17ea:	78 87       	std	Y+8, r23	; 0x08
    17ec:	6f 83       	std	Y+7, r22	; 0x07
	tx_bufferSize = tx_bufSize;
    17ee:	5b 87       	std	Y+11, r21	; 0x0b
    17f0:	4a 87       	std	Y+10, r20	; 0x0a
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    17f2:	5e d2       	rcall	.+1212   	; 0x1cb0 <malloc>
    17f4:	9b 83       	std	Y+3, r25	; 0x03
    17f6:	8a 83       	std	Y+2, r24	; 0x02
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    17f8:	c8 01       	movw	r24, r16
    17fa:	5a d2       	rcall	.+1204   	; 0x1cb0 <malloc>
    17fc:	9d 83       	std	Y+5, r25	; 0x05
    17fe:	8c 83       	std	Y+4, r24	; 0x04
	
	// Variables
	tx_frame_length  = 0x00;
    1800:	19 86       	std	Y+9, r1	; 0x09
	rx_frame_length  = 0x00;
    1802:	1e 82       	std	Y+6, r1	; 0x06
}
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	1f 91       	pop	r17
    180a:	0f 91       	pop	r16
    180c:	08 95       	ret

0000180e <_ZN16CMBEventsHandler11FreeBuffersEv>:

void CMBEventsHandler::FreeBuffers()
{
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	ec 01       	movw	r28, r24
	free(rx_buffer);
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	9b 81       	ldd	r25, Y+3	; 0x03
    1818:	e0 d2       	rcall	.+1472   	; 0x1dda <free>
	free(tx_buffer);
    181a:	8c 81       	ldd	r24, Y+4	; 0x04
    181c:	9d 81       	ldd	r25, Y+5	; 0x05
    181e:	dd d2       	rcall	.+1466   	; 0x1dda <free>
}
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	08 95       	ret

00001826 <_ZN16CMBEventsHandlerD1Ev>:

#include "CMBProtocol.h"
#include <avr/io.h>
#include <util/crc16.h>

CMBEventsHandler::~CMBEventsHandler()
    1826:	08 95       	ret

00001828 <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	CMBSender::ProcessTransaction(data, length);
}

void CMBSender::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
	if (CallbackHandler != 0)
    1828:	dc 01       	movw	r26, r24
    182a:	57 96       	adiw	r26, 0x17	; 23
    182c:	8d 91       	ld	r24, X+
    182e:	9c 91       	ld	r25, X
    1830:	58 97       	sbiw	r26, 0x18	; 24
    1832:	00 97       	sbiw	r24, 0x00	; 0
    1834:	39 f0       	breq	.+14     	; 0x1844 <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
		CallbackHandler->OnVariableReceived(addr, data, length);
    1836:	dc 01       	movw	r26, r24
    1838:	ed 91       	ld	r30, X+
    183a:	fc 91       	ld	r31, X
    183c:	02 80       	ldd	r0, Z+2	; 0x02
    183e:	f3 81       	ldd	r31, Z+3	; 0x03
    1840:	e0 2d       	mov	r30, r0
    1842:	09 95       	icall
    1844:	08 95       	ret

00001846 <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
}


void CMBSender::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
	if (CallbackHandler != 0)
    1846:	dc 01       	movw	r26, r24
    1848:	57 96       	adiw	r26, 0x17	; 23
    184a:	8d 91       	ld	r24, X+
    184c:	9c 91       	ld	r25, X
    184e:	58 97       	sbiw	r26, 0x18	; 24
    1850:	00 97       	sbiw	r24, 0x00	; 0
    1852:	39 f0       	breq	.+14     	; 0x1862 <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
		CallbackHandler->OnRegisterReceived(addr, data, length);
    1854:	dc 01       	movw	r26, r24
    1856:	ed 91       	ld	r30, X+
    1858:	fc 91       	ld	r31, X
    185a:	04 80       	ldd	r0, Z+4	; 0x04
    185c:	f5 81       	ldd	r31, Z+5	; 0x05
    185e:	e0 2d       	mov	r30, r0
    1860:	09 95       	icall
    1862:	08 95       	ret

00001864 <_ZN9CMBSenderC1Ev>:
#include "CMBSender.h"
#include <avr/io.h>
#include <util/crc16.h>

// default constructor
CMBSender::CMBSender()
    1864:	29 e1       	ldi	r18, 0x19	; 25
    1866:	31 e0       	ldi	r19, 0x01	; 1
    1868:	fc 01       	movw	r30, r24
    186a:	31 83       	std	Z+1, r19	; 0x01
    186c:	20 83       	st	Z, r18
    186e:	08 95       	ret

00001870 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj>:
	
}


void CMBSender::Initialize(CUSART* usart, CMBEventsHandler *handler, uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    1870:	cf 92       	push	r12
    1872:	df 92       	push	r13
    1874:	ef 92       	push	r14
    1876:	ff 92       	push	r15
    1878:	0f 93       	push	r16
    187a:	1f 93       	push	r17
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	ec 01       	movw	r28, r24
    1882:	7b 01       	movw	r14, r22
    1884:	6a 01       	movw	r12, r20
    1886:	c9 01       	movw	r24, r18
	rx_bufferSize = rx_bufSize;
    1888:	38 87       	std	Y+8, r19	; 0x08
    188a:	2f 83       	std	Y+7, r18	; 0x07
	tx_bufferSize = tx_bufSize;
    188c:	1b 87       	std	Y+11, r17	; 0x0b
    188e:	0a 87       	std	Y+10, r16	; 0x0a
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    1890:	0f d2       	rcall	.+1054   	; 0x1cb0 <malloc>
    1892:	9b 83       	std	Y+3, r25	; 0x03
    1894:	8a 83       	std	Y+2, r24	; 0x02
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    1896:	c8 01       	movw	r24, r16
    1898:	0b d2       	rcall	.+1046   	; 0x1cb0 <malloc>
    189a:	9d 83       	std	Y+5, r25	; 0x05
    189c:	8c 83       	std	Y+4, r24	; 0x04
	
	// Variables
	tx_buffer_pos    = 0x00;
    189e:	1d 8a       	std	Y+21, r1	; 0x15
	tx_frame_length  = 0x00;
    18a0:	19 86       	std	Y+9, r1	; 0x09
	rx_buffer_pos    = 0x00;
    18a2:	1f 86       	std	Y+15, r1	; 0x0f
	rx_frame_length  = 0x00;
    18a4:	1e 82       	std	Y+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    18a6:	19 8a       	std	Y+17, r1	; 0x11
    18a8:	18 8a       	std	Y+16, r1	; 0x10
	rx_currt_crc     = 0x00;
    18aa:	1b 8a       	std	Y+19, r1	; 0x13
    18ac:	1a 8a       	std	Y+18, r1	; 0x12
	modbus_receiver_state  = rx_Idle;
    18ae:	87 e0       	ldi	r24, 0x07	; 7
    18b0:	8e 87       	std	Y+14, r24	; 0x0e
	modbus_transmitter_state  = tx_Idle;
    18b2:	82 e0       	ldi	r24, 0x02	; 2
    18b4:	8c 8b       	std	Y+20, r24	; 0x14
	isTransaction = false;
    18b6:	1e 8a       	std	Y+22, r1	; 0x16
	
	// Set usart interface interrupts
	pUSART = usart;
    18b8:	fd 86       	std	Y+13, r15	; 0x0d
    18ba:	ec 86       	std	Y+12, r14	; 0x0c
	usart->SetRxInterruptionCallback((void*)this, OnUSARTRxInterrupt);
    18bc:	d7 01       	movw	r26, r14
    18be:	ed 91       	ld	r30, X+
    18c0:	fc 91       	ld	r31, X
    18c2:	04 84       	ldd	r0, Z+12	; 0x0c
    18c4:	f5 85       	ldd	r31, Z+13	; 0x0d
    18c6:	e0 2d       	mov	r30, r0
    18c8:	44 e4       	ldi	r20, 0x44	; 68
    18ca:	5d e0       	ldi	r21, 0x0D	; 13
    18cc:	be 01       	movw	r22, r28
    18ce:	c7 01       	movw	r24, r14
    18d0:	09 95       	icall
	usart->SetTxInterruptionCallback((void*)this, OnUSARTTxInterrupt);
    18d2:	d7 01       	movw	r26, r14
    18d4:	ed 91       	ld	r30, X+
    18d6:	fc 91       	ld	r31, X
    18d8:	06 84       	ldd	r0, Z+14	; 0x0e
    18da:	f7 85       	ldd	r31, Z+15	; 0x0f
    18dc:	e0 2d       	mov	r30, r0
    18de:	47 ea       	ldi	r20, 0xA7	; 167
    18e0:	5d e0       	ldi	r21, 0x0D	; 13
    18e2:	be 01       	movw	r22, r28
    18e4:	c7 01       	movw	r24, r14
    18e6:	09 95       	icall
	
	// Set event handler
	if (handler)
    18e8:	c1 14       	cp	r12, r1
    18ea:	d1 04       	cpc	r13, r1
    18ec:	19 f0       	breq	.+6      	; 0x18f4 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj+0x84>
		CallbackHandler = handler;
    18ee:	d8 8e       	std	Y+24, r13	; 0x18
    18f0:	cf 8a       	std	Y+23, r12	; 0x17
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj+0x88>
	else
		CallbackHandler = this;
    18f4:	d8 8f       	std	Y+24, r29	; 0x18
    18f6:	cf 8b       	std	Y+23, r28	; 0x17
} //CMBSender
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	1f 91       	pop	r17
    18fe:	0f 91       	pop	r16
    1900:	ff 90       	pop	r15
    1902:	ef 90       	pop	r14
    1904:	df 90       	pop	r13
    1906:	cf 90       	pop	r12
    1908:	08 95       	ret

0000190a <_ZN9CMBSenderD1Ev>:
	free(rx_buffer);
	free(tx_buffer);
}

// default destructor
CMBSender::~CMBSender()
    190a:	29 e1       	ldi	r18, 0x19	; 25
    190c:	31 e0       	ldi	r19, 0x01	; 1
    190e:	fc 01       	movw	r30, r24
    1910:	31 83       	std	Z+1, r19	; 0x01
    1912:	20 83       	st	Z, r18
    1914:	88 df       	rcall	.-240    	; 0x1826 <_ZN16CMBEventsHandlerD1Ev>
    1916:	08 95       	ret

00001918 <_ZN9CMBSender13OnReceiveByteEh>:
//void CMBSender::RequestDataFromSRAM(uint16_t addr, uint8_t length);

volatile uint16_t cnt = 0;

void CMBSender::OnReceiveByte(uint8_t data)
{
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	ec 01       	movw	r28, r24
    191e:	96 2f       	mov	r25, r22
	switch (modbus_receiver_state)
    1920:	ee 85       	ldd	r30, Y+14	; 0x0e
    1922:	4e 2f       	mov	r20, r30
    1924:	50 e0       	ldi	r21, 0x00	; 0
    1926:	4b 30       	cpi	r20, 0x0B	; 11
    1928:	51 05       	cpc	r21, r1
    192a:	08 f0       	brcs	.+2      	; 0x192e <_ZN9CMBSender13OnReceiveByteEh+0x16>
    192c:	aa c0       	rjmp	.+340    	; 0x1a82 <_ZN9CMBSender13OnReceiveByteEh+0x16a>
    192e:	fa 01       	movw	r30, r20
    1930:	ef 5b       	subi	r30, 0xBF	; 191
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	09 94       	ijmp
	{
		case rx_Start :
		case rx_FrameHeader0 :
			if (data == FRAMEHEADER_LOWBYTE)
    1936:	9a 3a       	cpi	r25, 0xAA	; 170
    1938:	19 f4       	brne	.+6      	; 0x1940 <_ZN9CMBSender13OnReceiveByteEh+0x28>
				modbus_receiver_state = rx_FrameHeader1;
    193a:	82 e0       	ldi	r24, 0x02	; 2
    193c:	8e 87       	std	Y+14, r24	; 0x0e
    193e:	a1 c0       	rjmp	.+322    	; 0x1a82 <_ZN9CMBSender13OnReceiveByteEh+0x16a>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	8e 87       	std	Y+14, r24	; 0x0e
    1944:	9e c0       	rjmp	.+316    	; 0x1a82 <_ZN9CMBSender13OnReceiveByteEh+0x16a>
			break;
		case rx_FrameHeader1 :
			if (data == FRAMEHEADER_HIGHBYTE)
    1946:	9c 3c       	cpi	r25, 0xCC	; 204
    1948:	19 f4       	brne	.+6      	; 0x1950 <_ZN9CMBSender13OnReceiveByteEh+0x38>
				modbus_receiver_state = rx_FrameLength;
    194a:	83 e0       	ldi	r24, 0x03	; 3
    194c:	8e 87       	std	Y+14, r24	; 0x0e
    194e:	99 c0       	rjmp	.+306    	; 0x1a82 <_ZN9CMBSender13OnReceiveByteEh+0x16a>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	8e 87       	std	Y+14, r24	; 0x0e
    1954:	96 c0       	rjmp	.+300    	; 0x1a82 <_ZN9CMBSender13OnReceiveByteEh+0x16a>
			break;
		case rx_FrameLength :
			rx_frame_length = data;
    1956:	9e 83       	std	Y+6, r25	; 0x06
			rx_buffer_pos = 0;
    1958:	1f 86       	std	Y+15, r1	; 0x0f
			rx_currt_crc = 0;
    195a:	1b 8a       	std	Y+19, r1	; 0x13
    195c:	1a 8a       	std	Y+18, r1	; 0x12
			cnt = 0;
    195e:	10 92 c7 01 	sts	0x01C7, r1
    1962:	10 92 c6 01 	sts	0x01C6, r1
			modbus_receiver_state = rx_FrameReceive;
    1966:	84 e0       	ldi	r24, 0x04	; 4
    1968:	8e 87       	std	Y+14, r24	; 0x0e
			break;
    196a:	8b c0       	rjmp	.+278    	; 0x1a82 <_ZN9CMBSender13OnReceiveByteEh+0x16a>
		case rx_FrameReceive :
			rx_buffer[rx_buffer_pos] = data;
    196c:	8f 85       	ldd	r24, Y+15	; 0x0f
    196e:	ea 81       	ldd	r30, Y+2	; 0x02
    1970:	fb 81       	ldd	r31, Y+3	; 0x03
    1972:	e8 0f       	add	r30, r24
    1974:	f1 1d       	adc	r31, r1
    1976:	90 83       	st	Z, r25
			if (rx_buffer_pos > rx_bufferSize)
    1978:	2f 85       	ldd	r18, Y+15	; 0x0f
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	4f 81       	ldd	r20, Y+7	; 0x07
    197e:	58 85       	ldd	r21, Y+8	; 0x08
    1980:	42 17       	cp	r20, r18
    1982:	53 07       	cpc	r21, r19
    1984:	18 f4       	brcc	.+6      	; 0x198c <_ZN9CMBSender13OnReceiveByteEh+0x74>
			{
				modbus_receiver_state = rx_Error;
    1986:	89 e0       	ldi	r24, 0x09	; 9
    1988:	8e 87       	std	Y+14, r24	; 0x0e
				break;
    198a:	7b c0       	rjmp	.+246    	; 0x1a82 <_ZN9CMBSender13OnReceiveByteEh+0x16a>
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
    198c:	2a 89       	ldd	r18, Y+18	; 0x12
    198e:	3b 89       	ldd	r19, Y+19	; 0x13
    1990:	29 27       	eor	r18, r25
    1992:	92 2f       	mov	r25, r18
    1994:	92 95       	swap	r25
    1996:	92 27       	eor	r25, r18
    1998:	09 2e       	mov	r0, r25
    199a:	96 95       	lsr	r25
    199c:	96 95       	lsr	r25
    199e:	90 25       	eor	r25, r0
    19a0:	09 2e       	mov	r0, r25
    19a2:	96 95       	lsr	r25
    19a4:	90 25       	eor	r25, r0
    19a6:	97 70       	andi	r25, 0x07	; 7
    19a8:	02 2e       	mov	r0, r18
    19aa:	23 2f       	mov	r18, r19
    19ac:	96 95       	lsr	r25
    19ae:	07 94       	ror	r0
    19b0:	97 95       	ror	r25
    19b2:	30 2d       	mov	r19, r0
    19b4:	29 27       	eor	r18, r25
    19b6:	06 94       	lsr	r0
    19b8:	97 95       	ror	r25
    19ba:	30 25       	eor	r19, r0
    19bc:	29 27       	eor	r18, r25
			}
			rx_currt_crc = _crc16_update(rx_currt_crc, data);
    19be:	3b 8b       	std	Y+19, r19	; 0x13
    19c0:	2a 8b       	std	Y+18, r18	; 0x12
			rx_buffer_pos++;
    19c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19c4:	8f 5f       	subi	r24, 0xFF	; 255
    19c6:	8f 87       	std	Y+15, r24	; 0x0f
			cnt++;
    19c8:	80 91 c6 01 	lds	r24, 0x01C6
    19cc:	90 91 c7 01 	lds	r25, 0x01C7
    19d0:	01 96       	adiw	r24, 0x01	; 1
    19d2:	90 93 c7 01 	sts	0x01C7, r25
    19d6:	80 93 c6 01 	sts	0x01C6, r24
			if (rx_buffer_pos == rx_frame_length)
    19da:	4f 85       	ldd	r20, Y+15	; 0x0f
    19dc:	8e 81       	ldd	r24, Y+6	; 0x06
    19de:	48 13       	cpse	r20, r24
    19e0:	50 c0       	rjmp	.+160    	; 0x1a82 <_ZN9CMBSender13OnReceiveByteEh+0x16a>
			{
#ifdef USE_CRC
				modbus_receiver_state = rx_CRC0;
#else
				modbus_receiver_state = rx_Complete;
    19e2:	88 e0       	ldi	r24, 0x08	; 8
    19e4:	8e 87       	std	Y+14, r24	; 0x0e
#endif
				OnTransactionCallback(rx_buffer, rx_frame_length);
    19e6:	e8 81       	ld	r30, Y
    19e8:	f9 81       	ldd	r31, Y+1	; 0x01
    19ea:	50 e0       	ldi	r21, 0x00	; 0
    19ec:	6a 81       	ldd	r22, Y+2	; 0x02
    19ee:	7b 81       	ldd	r23, Y+3	; 0x03
    19f0:	01 90       	ld	r0, Z+
    19f2:	f0 81       	ld	r31, Z
    19f4:	e0 2d       	mov	r30, r0
    19f6:	ce 01       	movw	r24, r28
    19f8:	09 95       	icall
				if (CallbackHandler != 0)
    19fa:	8f 89       	ldd	r24, Y+23	; 0x17
    19fc:	98 8d       	ldd	r25, Y+24	; 0x18
    19fe:	00 97       	sbiw	r24, 0x00	; 0
    1a00:	09 f4       	brne	.+2      	; 0x1a04 <_ZN9CMBSender13OnReceiveByteEh+0xec>
    1a02:	3f c0       	rjmp	.+126    	; 0x1a82 <_ZN9CMBSender13OnReceiveByteEh+0x16a>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    1a04:	dc 01       	movw	r26, r24
    1a06:	ed 91       	ld	r30, X+
    1a08:	fc 91       	ld	r31, X
    1a0a:	4e 81       	ldd	r20, Y+6	; 0x06
    1a0c:	50 e0       	ldi	r21, 0x00	; 0
    1a0e:	6a 81       	ldd	r22, Y+2	; 0x02
    1a10:	7b 81       	ldd	r23, Y+3	; 0x03
    1a12:	01 90       	ld	r0, Z+
    1a14:	f0 81       	ld	r31, Z
    1a16:	e0 2d       	mov	r30, r0
    1a18:	09 95       	icall
    1a1a:	33 c0       	rjmp	.+102    	; 0x1a82 <_ZN9CMBSender13OnReceiveByteEh+0x16a>
			}
			break;
		case rx_CRC0 :
			rx_frame_crc = data;
    1a1c:	69 2f       	mov	r22, r25
    1a1e:	70 e0       	ldi	r23, 0x00	; 0
    1a20:	79 8b       	std	Y+17, r23	; 0x11
    1a22:	68 8b       	std	Y+16, r22	; 0x10
			modbus_receiver_state = rx_CRC1;
    1a24:	86 e0       	ldi	r24, 0x06	; 6
    1a26:	8e 87       	std	Y+14, r24	; 0x0e
			break;
    1a28:	2c c0       	rjmp	.+88     	; 0x1a82 <_ZN9CMBSender13OnReceiveByteEh+0x16a>
		case rx_CRC1 :
			rx_frame_crc |= (data << 8);
    1a2a:	28 89       	ldd	r18, Y+16	; 0x10
    1a2c:	39 89       	ldd	r19, Y+17	; 0x11
    1a2e:	a9 01       	movw	r20, r18
    1a30:	59 2b       	or	r21, r25
    1a32:	59 8b       	std	Y+17, r21	; 0x11
    1a34:	48 8b       	std	Y+16, r20	; 0x10
			if (rx_currt_crc == rx_frame_crc)
    1a36:	2a 89       	ldd	r18, Y+18	; 0x12
    1a38:	3b 89       	ldd	r19, Y+19	; 0x13
    1a3a:	42 17       	cp	r20, r18
    1a3c:	53 07       	cpc	r21, r19
    1a3e:	e9 f4       	brne	.+58     	; 0x1a7a <_ZN9CMBSender13OnReceiveByteEh+0x162>
			{
				modbus_receiver_state = rx_Complete;
    1a40:	88 e0       	ldi	r24, 0x08	; 8
    1a42:	8e 87       	std	Y+14, r24	; 0x0e
				
				OnTransactionCallback(rx_buffer, rx_frame_length);
    1a44:	e8 81       	ld	r30, Y
    1a46:	f9 81       	ldd	r31, Y+1	; 0x01
    1a48:	4e 81       	ldd	r20, Y+6	; 0x06
    1a4a:	50 e0       	ldi	r21, 0x00	; 0
    1a4c:	6a 81       	ldd	r22, Y+2	; 0x02
    1a4e:	7b 81       	ldd	r23, Y+3	; 0x03
    1a50:	01 90       	ld	r0, Z+
    1a52:	f0 81       	ld	r31, Z
    1a54:	e0 2d       	mov	r30, r0
    1a56:	ce 01       	movw	r24, r28
    1a58:	09 95       	icall
				if (CallbackHandler != 0)
    1a5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a5e:	00 97       	sbiw	r24, 0x00	; 0
    1a60:	81 f0       	breq	.+32     	; 0x1a82 <_ZN9CMBSender13OnReceiveByteEh+0x16a>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    1a62:	dc 01       	movw	r26, r24
    1a64:	ed 91       	ld	r30, X+
    1a66:	fc 91       	ld	r31, X
    1a68:	4e 81       	ldd	r20, Y+6	; 0x06
    1a6a:	50 e0       	ldi	r21, 0x00	; 0
    1a6c:	6a 81       	ldd	r22, Y+2	; 0x02
    1a6e:	7b 81       	ldd	r23, Y+3	; 0x03
    1a70:	01 90       	ld	r0, Z+
    1a72:	f0 81       	ld	r31, Z
    1a74:	e0 2d       	mov	r30, r0
    1a76:	09 95       	icall
    1a78:	04 c0       	rjmp	.+8      	; 0x1a82 <_ZN9CMBSender13OnReceiveByteEh+0x16a>
			}
			else
				modbus_receiver_state = rx_Error;
    1a7a:	89 e0       	ldi	r24, 0x09	; 9
    1a7c:	8e 87       	std	Y+14, r24	; 0x0e
    1a7e:	01 c0       	rjmp	.+2      	; 0x1a82 <_ZN9CMBSender13OnReceiveByteEh+0x16a>
			break;
		case rx_Error :
		case rx_TimeOut :
			isTransaction = false;
    1a80:	1e 8a       	std	Y+22, r1	; 0x16
		case rx_Complete :
		case rx_Idle :
		default:
		break;
	};
}
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	08 95       	ret

00001a88 <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
{
	modbus_transmitter_state = tx_Idle;
}

void CMBSender::OnUSARTRxInterrupt(void* sender)
{
    1a88:	cf 93       	push	r28
    1a8a:	df 93       	push	r29
    1a8c:	ec 01       	movw	r28, r24
	CMBSender* owner = (CMBSender*)sender;
	uint8_t data = owner->pUSART->GetReceivedByte();
    1a8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a90:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a92:	dc 01       	movw	r26, r24
    1a94:	ed 91       	ld	r30, X+
    1a96:	fc 91       	ld	r31, X
    1a98:	02 80       	ldd	r0, Z+2	; 0x02
    1a9a:	f3 81       	ldd	r31, Z+3	; 0x03
    1a9c:	e0 2d       	mov	r30, r0
    1a9e:	09 95       	icall
	owner->OnReceiveByte(data);
    1aa0:	68 2f       	mov	r22, r24
    1aa2:	ce 01       	movw	r24, r28
    1aa4:	39 df       	rcall	.-398    	; 0x1918 <_ZN9CMBSender13OnReceiveByteEh>
}
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	08 95       	ret

00001aac <_ZN9CMBSender19StartMODBUSListenerEv>:
	if (modbus_receiver_state != rx_Complete)
		modbus_receiver_state = rx_TimeOut;
}

void CMBSender::StartMODBUSListener()
{
    1aac:	fc 01       	movw	r30, r24
	rx_buffer_pos    = 0x00;
    1aae:	17 86       	std	Z+15, r1	; 0x0f
	rx_frame_length  = 0x00;
    1ab0:	16 82       	std	Z+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    1ab2:	11 8a       	std	Z+17, r1	; 0x11
    1ab4:	10 8a       	std	Z+16, r1	; 0x10
	rx_currt_crc     = 0x00;
    1ab6:	13 8a       	std	Z+19, r1	; 0x13
    1ab8:	12 8a       	std	Z+18, r1	; 0x12
	modbus_receiver_state  = rx_Start;
    1aba:	16 86       	std	Z+14, r1	; 0x0e
    1abc:	08 95       	ret

00001abe <_ZN9CMBSender14OnTransmitByteEv>:
		break;
	};
}

void CMBSender::OnTransmitByte()
{
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	ec 01       	movw	r28, r24
	switch (modbus_transmitter_state)
    1ac4:	8c 89       	ldd	r24, Y+20	; 0x14
    1ac6:	84 30       	cpi	r24, 0x04	; 4
    1ac8:	38 f4       	brcc	.+14     	; 0x1ad8 <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    1aca:	82 30       	cpi	r24, 0x02	; 2
    1acc:	b8 f5       	brcc	.+110    	; 0x1b3c <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    1ace:	88 23       	and	r24, r24
    1ad0:	31 f0       	breq	.+12     	; 0x1ade <_ZN9CMBSender14OnTransmitByteEv+0x20>
    1ad2:	81 30       	cpi	r24, 0x01	; 1
    1ad4:	d1 f0       	breq	.+52     	; 0x1b0a <_ZN9CMBSender14OnTransmitByteEv+0x4c>
    1ad6:	38 c0       	rjmp	.+112    	; 0x1b48 <_ZN9CMBSender14OnTransmitByteEv+0x8a>
    1ad8:	85 30       	cpi	r24, 0x05	; 5
    1ada:	81 f1       	breq	.+96     	; 0x1b3c <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    1adc:	35 c0       	rjmp	.+106    	; 0x1b48 <_ZN9CMBSender14OnTransmitByteEv+0x8a>
	{
		case tx_Start :
			modbus_transmitter_state = tx_Transmitting; // Start receiving packet
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	8c 8b       	std	Y+20, r24	; 0x14
			tx_buffer_pos = 0;
    1ae2:	1d 8a       	std	Y+21, r1	; 0x15
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    1ae4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ae6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ae8:	2d 89       	ldd	r18, Y+21	; 0x15
    1aea:	dc 01       	movw	r26, r24
    1aec:	ed 91       	ld	r30, X+
    1aee:	fc 91       	ld	r31, X
    1af0:	ac 81       	ldd	r26, Y+4	; 0x04
    1af2:	bd 81       	ldd	r27, Y+5	; 0x05
    1af4:	a2 0f       	add	r26, r18
    1af6:	b1 1d       	adc	r27, r1
    1af8:	04 80       	ldd	r0, Z+4	; 0x04
    1afa:	f5 81       	ldd	r31, Z+5	; 0x05
    1afc:	e0 2d       	mov	r30, r0
    1afe:	6c 91       	ld	r22, X
    1b00:	09 95       	icall
			tx_buffer_pos++;
    1b02:	8d 89       	ldd	r24, Y+21	; 0x15
    1b04:	8f 5f       	subi	r24, 0xFF	; 255
    1b06:	8d 8b       	std	Y+21, r24	; 0x15
			break;
    1b08:	1f c0       	rjmp	.+62     	; 0x1b48 <_ZN9CMBSender14OnTransmitByteEv+0x8a>
		case tx_Transmitting :
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    1b0a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b0c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b0e:	2d 89       	ldd	r18, Y+21	; 0x15
    1b10:	dc 01       	movw	r26, r24
    1b12:	ed 91       	ld	r30, X+
    1b14:	fc 91       	ld	r31, X
    1b16:	ac 81       	ldd	r26, Y+4	; 0x04
    1b18:	bd 81       	ldd	r27, Y+5	; 0x05
    1b1a:	a2 0f       	add	r26, r18
    1b1c:	b1 1d       	adc	r27, r1
    1b1e:	04 80       	ldd	r0, Z+4	; 0x04
    1b20:	f5 81       	ldd	r31, Z+5	; 0x05
    1b22:	e0 2d       	mov	r30, r0
    1b24:	6c 91       	ld	r22, X
    1b26:	09 95       	icall
			tx_buffer_pos++;
    1b28:	8d 89       	ldd	r24, Y+21	; 0x15
    1b2a:	8f 5f       	subi	r24, 0xFF	; 255
    1b2c:	8d 8b       	std	Y+21, r24	; 0x15
			if (tx_buffer_pos == tx_frame_length)
    1b2e:	9d 89       	ldd	r25, Y+21	; 0x15
    1b30:	89 85       	ldd	r24, Y+9	; 0x09
    1b32:	98 13       	cpse	r25, r24
    1b34:	09 c0       	rjmp	.+18     	; 0x1b48 <_ZN9CMBSender14OnTransmitByteEv+0x8a>
				modbus_transmitter_state = tx_Complete;
    1b36:	83 e0       	ldi	r24, 0x03	; 3
    1b38:	8c 8b       	std	Y+20, r24	; 0x14
    1b3a:	06 c0       	rjmp	.+12     	; 0x1b48 <_ZN9CMBSender14OnTransmitByteEv+0x8a>
			break;
		case tx_Idle :
		case tx_TimeOut :
		case tx_Complete :
			if (isTransaction)
    1b3c:	8e 89       	ldd	r24, Y+22	; 0x16
    1b3e:	88 23       	and	r24, r24
    1b40:	11 f0       	breq	.+4      	; 0x1b46 <_ZN9CMBSender14OnTransmitByteEv+0x88>
				StartMODBUSListener();
    1b42:	ce 01       	movw	r24, r28
    1b44:	b3 df       	rcall	.-154    	; 0x1aac <_ZN9CMBSender19StartMODBUSListenerEv>
			isTransaction = false;
    1b46:	1e 8a       	std	Y+22, r1	; 0x16
		default :
		break;
	}
}
    1b48:	df 91       	pop	r29
    1b4a:	cf 91       	pop	r28
    1b4c:	08 95       	ret

00001b4e <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
}

void CMBSender::OnUSARTTxInterrupt(void* sender)
{
	CMBSender* owner = (CMBSender*)sender;
	owner->OnTransmitByte();
    1b4e:	b7 df       	rcall	.-146    	; 0x1abe <_ZN9CMBSender14OnTransmitByteEv>
    1b50:	08 95       	ret

00001b52 <_ZN9CMBSender18WaitMODBUSListenerEv>:
	rx_currt_crc     = 0x00;
	modbus_receiver_state  = rx_Start;
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
    1b52:	fc 01       	movw	r30, r24
	while (modbus_receiver_state != rx_Complete)
    1b54:	06 c0       	rjmp	.+12     	; 0x1b62 <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
	{
		if (modbus_receiver_state == rx_Error)
    1b56:	86 85       	ldd	r24, Z+14	; 0x0e
    1b58:	89 30       	cpi	r24, 0x09	; 9
    1b5a:	41 f0       	breq	.+16     	; 0x1b6c <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
    1b5c:	86 85       	ldd	r24, Z+14	; 0x0e
    1b5e:	8a 30       	cpi	r24, 0x0A	; 10
    1b60:	39 f0       	breq	.+14     	; 0x1b70 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
	modbus_receiver_state  = rx_Start;
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
    1b62:	86 85       	ldd	r24, Z+14	; 0x0e
    1b64:	88 30       	cpi	r24, 0x08	; 8
    1b66:	b9 f7       	brne	.-18     	; 0x1b56 <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
		if (modbus_receiver_state == rx_Error)
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
	}
	return Complete;
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
	{
		if (modbus_receiver_state == rx_Error)
			return Error;
    1b6c:	82 e0       	ldi	r24, 0x02	; 2
    1b6e:	08 95       	ret
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
    1b70:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    1b72:	08 95       	ret

00001b74 <_ZN9CMBSender22StartMODBUSTransmitterEv>:
	modbus_receiver_state  = rx_Idle;
}

void CMBSender::StartMODBUSTransmitter()
{
	tx_buffer_pos = 0x00;
    1b74:	fc 01       	movw	r30, r24
    1b76:	15 8a       	std	Z+21, r1	; 0x15
	modbus_transmitter_state  = tx_Start;
    1b78:	14 8a       	std	Z+20, r1	; 0x14
	OnTransmitByte();
    1b7a:	a1 df       	rcall	.-190    	; 0x1abe <_ZN9CMBSender14OnTransmitByteEv>
    1b7c:	08 95       	ret

00001b7e <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
{
} //~CMBSender

// MODBUS write data to register command
void CMBSender::WriteDataToRegisterAsync(uint8_t addr, uint8_t* data, uint8_t length)
{
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29
    1b82:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataTx(addr, data, length);
    1b84:	e8 81       	ld	r30, Y
    1b86:	f9 81       	ldd	r31, Y+1	; 0x01
    1b88:	02 84       	ldd	r0, Z+10	; 0x0a
    1b8a:	f3 85       	ldd	r31, Z+11	; 0x0b
    1b8c:	e0 2d       	mov	r30, r0
    1b8e:	09 95       	icall
	
	// Start transition
	StartMODBUSTransmitter();
    1b90:	ce 01       	movw	r24, r28
    1b92:	f0 df       	rcall	.-32     	; 0x1b74 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	08 95       	ret

00001b9a <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:

void CMBSender::WriteDataToSRAMAsync(uint16_t addr, uint16_t* data, uint16_t length)
{
    1b9a:	cf 93       	push	r28
    1b9c:	df 93       	push	r29
    1b9e:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataTx(addr, data, length);
    1ba0:	e8 81       	ld	r30, Y
    1ba2:	f9 81       	ldd	r31, Y+1	; 0x01
    1ba4:	06 84       	ldd	r0, Z+14	; 0x0e
    1ba6:	f7 85       	ldd	r31, Z+15	; 0x0f
    1ba8:	e0 2d       	mov	r30, r0
    1baa:	09 95       	icall
		
	// Start transition
	StartMODBUSTransmitter();
    1bac:	ce 01       	movw	r24, r28
    1bae:	e2 df       	rcall	.-60     	; 0x1b74 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	08 95       	ret

00001bb6 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:

void CMBSender::RequestDataFromRegisterAsync(uint8_t addr, uint8_t length)
{
    1bb6:	cf 93       	push	r28
    1bb8:	df 93       	push	r29
    1bba:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataRq(addr, length);
    1bbc:	e8 81       	ld	r30, Y
    1bbe:	f9 81       	ldd	r31, Y+1	; 0x01
    1bc0:	04 84       	ldd	r0, Z+12	; 0x0c
    1bc2:	f5 85       	ldd	r31, Z+13	; 0x0d
    1bc4:	e0 2d       	mov	r30, r0
    1bc6:	09 95       	icall
	
	// Start transition
	StartMODBUSTransmitter();
    1bc8:	ce 01       	movw	r24, r28
    1bca:	d4 df       	rcall	.-88     	; 0x1b74 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    1bcc:	df 91       	pop	r29
    1bce:	cf 91       	pop	r28
    1bd0:	08 95       	ret

00001bd2 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:

void CMBSender::RequestDataFromSRAMAsync(uint16_t addr, uint8_t length)
{
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
    1bd6:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataRq(addr, length);
    1bd8:	e8 81       	ld	r30, Y
    1bda:	f9 81       	ldd	r31, Y+1	; 0x01
    1bdc:	50 e0       	ldi	r21, 0x00	; 0
    1bde:	00 88       	ldd	r0, Z+16	; 0x10
    1be0:	f1 89       	ldd	r31, Z+17	; 0x11
    1be2:	e0 2d       	mov	r30, r0
    1be4:	09 95       	icall
	
	// Start transition
	StartMODBUSTransmitter();
    1be6:	ce 01       	movw	r24, r28
    1be8:	c5 df       	rcall	.-118    	; 0x1b74 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    1bea:	df 91       	pop	r29
    1bec:	cf 91       	pop	r28
    1bee:	08 95       	ret

00001bf0 <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
	modbus_transmitter_state  = tx_Start;
	OnTransmitByte();
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
    1bf0:	fc 01       	movw	r30, r24
	while (modbus_transmitter_state != tx_Complete)
    1bf2:	06 c0       	rjmp	.+12     	; 0x1c00 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
	{
		if (modbus_transmitter_state == tx_Error)
    1bf4:	84 89       	ldd	r24, Z+20	; 0x14
    1bf6:	84 30       	cpi	r24, 0x04	; 4
    1bf8:	41 f0       	breq	.+16     	; 0x1c0a <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
    1bfa:	84 89       	ldd	r24, Z+20	; 0x14
    1bfc:	85 30       	cpi	r24, 0x05	; 5
    1bfe:	39 f0       	breq	.+14     	; 0x1c0e <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
	OnTransmitByte();
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
    1c00:	84 89       	ldd	r24, Z+20	; 0x14
    1c02:	83 30       	cpi	r24, 0x03	; 3
    1c04:	b9 f7       	brne	.-18     	; 0x1bf4 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
		if (modbus_transmitter_state == tx_Error)
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
	}
	return Complete;
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
	{
		if (modbus_transmitter_state == tx_Error)
		return Error;
    1c0a:	82 e0       	ldi	r24, 0x02	; 2
    1c0c:	08 95       	ret
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
    1c0e:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    1c10:	08 95       	ret

00001c12 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTransmitByte();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    1c12:	21 e0       	ldi	r18, 0x01	; 1
    1c14:	fc 01       	movw	r30, r24
    1c16:	26 8b       	std	Z+22, r18	; 0x16
	RequestDataFromRegisterAsync(addr, length);
    1c18:	ce df       	rcall	.-100    	; 0x1bb6 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    1c1a:	08 95       	ret

00001c1c <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    1c1c:	21 e0       	ldi	r18, 0x01	; 1
    1c1e:	fc 01       	movw	r30, r24
    1c20:	26 8b       	std	Z+22, r18	; 0x16
	RequestDataFromSRAMAsync(addr, length);
    1c22:	d7 df       	rcall	.-82     	; 0x1bd2 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    1c24:	08 95       	ret

00001c26 <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    1c26:	0f 93       	push	r16
    1c28:	1f 93       	push	r17
    1c2a:	cf 93       	push	r28
    1c2c:	df 93       	push	r29
    1c2e:	8c 01       	movw	r16, r24
    1c30:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    1c32:	98 81       	ld	r25, Y
    1c34:	91 38       	cpi	r25, 0x81	; 129
    1c36:	69 f4       	brne	.+26     	; 0x1c52 <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    1c38:	d8 01       	movw	r26, r16
    1c3a:	ed 91       	ld	r30, X+
    1c3c:	fc 91       	ld	r31, X
    1c3e:	04 80       	ldd	r0, Z+4	; 0x04
    1c40:	f5 81       	ldd	r31, Z+5	; 0x05
    1c42:	e0 2d       	mov	r30, r0
    1c44:	2a 81       	ldd	r18, Y+2	; 0x02
    1c46:	ab 01       	movw	r20, r22
    1c48:	4d 5f       	subi	r20, 0xFD	; 253
    1c4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c4c:	69 81       	ldd	r22, Y+1	; 0x01
    1c4e:	c8 01       	movw	r24, r16
    1c50:	09 95       	icall
	}
	if (data[0] == 0x83)
    1c52:	98 81       	ld	r25, Y
    1c54:	93 38       	cpi	r25, 0x83	; 131
    1c56:	99 f4       	brne	.+38     	; 0x1c7e <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], data[3]);
    1c58:	d8 01       	movw	r26, r16
    1c5a:	ed 91       	ld	r30, X+
    1c5c:	fc 91       	ld	r31, X
    1c5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	ae 01       	movw	r20, r28
    1c64:	4c 5f       	subi	r20, 0xFC	; 252
    1c66:	5f 4f       	sbci	r21, 0xFF	; 255
    1c68:	69 81       	ldd	r22, Y+1	; 0x01
    1c6a:	70 e0       	ldi	r23, 0x00	; 0
    1c6c:	76 2f       	mov	r23, r22
    1c6e:	66 27       	eor	r22, r22
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	68 2b       	or	r22, r24
    1c74:	02 80       	ldd	r0, Z+2	; 0x02
    1c76:	f3 81       	ldd	r31, Z+3	; 0x03
    1c78:	e0 2d       	mov	r30, r0
    1c7a:	c8 01       	movw	r24, r16
    1c7c:	09 95       	icall
	}
}
    1c7e:	df 91       	pop	r29
    1c80:	cf 91       	pop	r28
    1c82:	1f 91       	pop	r17
    1c84:	0f 91       	pop	r16
    1c86:	08 95       	ret

00001c88 <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    1c88:	ce df       	rcall	.-100    	; 0x1c26 <_ZN9CMBSender18ProcessTransactionEPhj>
    1c8a:	08 95       	ret

00001c8c <__umulhisi3>:
    1c8c:	a2 9f       	mul	r26, r18
    1c8e:	b0 01       	movw	r22, r0
    1c90:	b3 9f       	mul	r27, r19
    1c92:	c0 01       	movw	r24, r0
    1c94:	a3 9f       	mul	r26, r19
    1c96:	01 d0       	rcall	.+2      	; 0x1c9a <__umulhisi3+0xe>
    1c98:	b2 9f       	mul	r27, r18
    1c9a:	70 0d       	add	r23, r0
    1c9c:	81 1d       	adc	r24, r1
    1c9e:	11 24       	eor	r1, r1
    1ca0:	91 1d       	adc	r25, r1
    1ca2:	08 95       	ret

00001ca4 <__tablejump2__>:
    1ca4:	ee 0f       	add	r30, r30
    1ca6:	ff 1f       	adc	r31, r31
    1ca8:	05 90       	lpm	r0, Z+
    1caa:	f4 91       	lpm	r31, Z
    1cac:	e0 2d       	mov	r30, r0
    1cae:	09 94       	ijmp

00001cb0 <malloc>:
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	82 30       	cpi	r24, 0x02	; 2
    1cb6:	91 05       	cpc	r25, r1
    1cb8:	10 f4       	brcc	.+4      	; 0x1cbe <malloc+0xe>
    1cba:	82 e0       	ldi	r24, 0x02	; 2
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	e0 91 ca 01 	lds	r30, 0x01CA
    1cc2:	f0 91 cb 01 	lds	r31, 0x01CB
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	c0 e0       	ldi	r28, 0x00	; 0
    1ccc:	d0 e0       	ldi	r29, 0x00	; 0
    1cce:	30 97       	sbiw	r30, 0x00	; 0
    1cd0:	11 f1       	breq	.+68     	; 0x1d16 <malloc+0x66>
    1cd2:	40 81       	ld	r20, Z
    1cd4:	51 81       	ldd	r21, Z+1	; 0x01
    1cd6:	48 17       	cp	r20, r24
    1cd8:	59 07       	cpc	r21, r25
    1cda:	c0 f0       	brcs	.+48     	; 0x1d0c <malloc+0x5c>
    1cdc:	48 17       	cp	r20, r24
    1cde:	59 07       	cpc	r21, r25
    1ce0:	61 f4       	brne	.+24     	; 0x1cfa <malloc+0x4a>
    1ce2:	82 81       	ldd	r24, Z+2	; 0x02
    1ce4:	93 81       	ldd	r25, Z+3	; 0x03
    1ce6:	20 97       	sbiw	r28, 0x00	; 0
    1ce8:	19 f0       	breq	.+6      	; 0x1cf0 <malloc+0x40>
    1cea:	9b 83       	std	Y+3, r25	; 0x03
    1cec:	8a 83       	std	Y+2, r24	; 0x02
    1cee:	2b c0       	rjmp	.+86     	; 0x1d46 <malloc+0x96>
    1cf0:	90 93 cb 01 	sts	0x01CB, r25
    1cf4:	80 93 ca 01 	sts	0x01CA, r24
    1cf8:	26 c0       	rjmp	.+76     	; 0x1d46 <malloc+0x96>
    1cfa:	21 15       	cp	r18, r1
    1cfc:	31 05       	cpc	r19, r1
    1cfe:	19 f0       	breq	.+6      	; 0x1d06 <malloc+0x56>
    1d00:	42 17       	cp	r20, r18
    1d02:	53 07       	cpc	r21, r19
    1d04:	18 f4       	brcc	.+6      	; 0x1d0c <malloc+0x5c>
    1d06:	9a 01       	movw	r18, r20
    1d08:	be 01       	movw	r22, r28
    1d0a:	df 01       	movw	r26, r30
    1d0c:	ef 01       	movw	r28, r30
    1d0e:	02 80       	ldd	r0, Z+2	; 0x02
    1d10:	f3 81       	ldd	r31, Z+3	; 0x03
    1d12:	e0 2d       	mov	r30, r0
    1d14:	dc cf       	rjmp	.-72     	; 0x1cce <malloc+0x1e>
    1d16:	21 15       	cp	r18, r1
    1d18:	31 05       	cpc	r19, r1
    1d1a:	09 f1       	breq	.+66     	; 0x1d5e <malloc+0xae>
    1d1c:	28 1b       	sub	r18, r24
    1d1e:	39 0b       	sbc	r19, r25
    1d20:	24 30       	cpi	r18, 0x04	; 4
    1d22:	31 05       	cpc	r19, r1
    1d24:	90 f4       	brcc	.+36     	; 0x1d4a <malloc+0x9a>
    1d26:	12 96       	adiw	r26, 0x02	; 2
    1d28:	8d 91       	ld	r24, X+
    1d2a:	9c 91       	ld	r25, X
    1d2c:	13 97       	sbiw	r26, 0x03	; 3
    1d2e:	61 15       	cp	r22, r1
    1d30:	71 05       	cpc	r23, r1
    1d32:	21 f0       	breq	.+8      	; 0x1d3c <malloc+0x8c>
    1d34:	fb 01       	movw	r30, r22
    1d36:	93 83       	std	Z+3, r25	; 0x03
    1d38:	82 83       	std	Z+2, r24	; 0x02
    1d3a:	04 c0       	rjmp	.+8      	; 0x1d44 <malloc+0x94>
    1d3c:	90 93 cb 01 	sts	0x01CB, r25
    1d40:	80 93 ca 01 	sts	0x01CA, r24
    1d44:	fd 01       	movw	r30, r26
    1d46:	32 96       	adiw	r30, 0x02	; 2
    1d48:	44 c0       	rjmp	.+136    	; 0x1dd2 <malloc+0x122>
    1d4a:	fd 01       	movw	r30, r26
    1d4c:	e2 0f       	add	r30, r18
    1d4e:	f3 1f       	adc	r31, r19
    1d50:	81 93       	st	Z+, r24
    1d52:	91 93       	st	Z+, r25
    1d54:	22 50       	subi	r18, 0x02	; 2
    1d56:	31 09       	sbc	r19, r1
    1d58:	2d 93       	st	X+, r18
    1d5a:	3c 93       	st	X, r19
    1d5c:	3a c0       	rjmp	.+116    	; 0x1dd2 <malloc+0x122>
    1d5e:	20 91 c8 01 	lds	r18, 0x01C8
    1d62:	30 91 c9 01 	lds	r19, 0x01C9
    1d66:	23 2b       	or	r18, r19
    1d68:	41 f4       	brne	.+16     	; 0x1d7a <malloc+0xca>
    1d6a:	20 91 62 00 	lds	r18, 0x0062
    1d6e:	30 91 63 00 	lds	r19, 0x0063
    1d72:	30 93 c9 01 	sts	0x01C9, r19
    1d76:	20 93 c8 01 	sts	0x01C8, r18
    1d7a:	20 91 60 00 	lds	r18, 0x0060
    1d7e:	30 91 61 00 	lds	r19, 0x0061
    1d82:	21 15       	cp	r18, r1
    1d84:	31 05       	cpc	r19, r1
    1d86:	41 f4       	brne	.+16     	; 0x1d98 <malloc+0xe8>
    1d88:	2d b7       	in	r18, 0x3d	; 61
    1d8a:	3e b7       	in	r19, 0x3e	; 62
    1d8c:	40 91 64 00 	lds	r20, 0x0064
    1d90:	50 91 65 00 	lds	r21, 0x0065
    1d94:	24 1b       	sub	r18, r20
    1d96:	35 0b       	sbc	r19, r21
    1d98:	e0 91 c8 01 	lds	r30, 0x01C8
    1d9c:	f0 91 c9 01 	lds	r31, 0x01C9
    1da0:	e2 17       	cp	r30, r18
    1da2:	f3 07       	cpc	r31, r19
    1da4:	a0 f4       	brcc	.+40     	; 0x1dce <malloc+0x11e>
    1da6:	2e 1b       	sub	r18, r30
    1da8:	3f 0b       	sbc	r19, r31
    1daa:	28 17       	cp	r18, r24
    1dac:	39 07       	cpc	r19, r25
    1dae:	78 f0       	brcs	.+30     	; 0x1dce <malloc+0x11e>
    1db0:	ac 01       	movw	r20, r24
    1db2:	4e 5f       	subi	r20, 0xFE	; 254
    1db4:	5f 4f       	sbci	r21, 0xFF	; 255
    1db6:	24 17       	cp	r18, r20
    1db8:	35 07       	cpc	r19, r21
    1dba:	48 f0       	brcs	.+18     	; 0x1dce <malloc+0x11e>
    1dbc:	4e 0f       	add	r20, r30
    1dbe:	5f 1f       	adc	r21, r31
    1dc0:	50 93 c9 01 	sts	0x01C9, r21
    1dc4:	40 93 c8 01 	sts	0x01C8, r20
    1dc8:	81 93       	st	Z+, r24
    1dca:	91 93       	st	Z+, r25
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <malloc+0x122>
    1dce:	e0 e0       	ldi	r30, 0x00	; 0
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	cf 01       	movw	r24, r30
    1dd4:	df 91       	pop	r29
    1dd6:	cf 91       	pop	r28
    1dd8:	08 95       	ret

00001dda <free>:
    1dda:	0f 93       	push	r16
    1ddc:	1f 93       	push	r17
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
    1de2:	00 97       	sbiw	r24, 0x00	; 0
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <free+0xe>
    1de6:	8c c0       	rjmp	.+280    	; 0x1f00 <free+0x126>
    1de8:	fc 01       	movw	r30, r24
    1dea:	32 97       	sbiw	r30, 0x02	; 2
    1dec:	13 82       	std	Z+3, r1	; 0x03
    1dee:	12 82       	std	Z+2, r1	; 0x02
    1df0:	00 91 ca 01 	lds	r16, 0x01CA
    1df4:	10 91 cb 01 	lds	r17, 0x01CB
    1df8:	01 15       	cp	r16, r1
    1dfa:	11 05       	cpc	r17, r1
    1dfc:	81 f4       	brne	.+32     	; 0x1e1e <free+0x44>
    1dfe:	20 81       	ld	r18, Z
    1e00:	31 81       	ldd	r19, Z+1	; 0x01
    1e02:	82 0f       	add	r24, r18
    1e04:	93 1f       	adc	r25, r19
    1e06:	20 91 c8 01 	lds	r18, 0x01C8
    1e0a:	30 91 c9 01 	lds	r19, 0x01C9
    1e0e:	28 17       	cp	r18, r24
    1e10:	39 07       	cpc	r19, r25
    1e12:	79 f5       	brne	.+94     	; 0x1e72 <free+0x98>
    1e14:	f0 93 c9 01 	sts	0x01C9, r31
    1e18:	e0 93 c8 01 	sts	0x01C8, r30
    1e1c:	71 c0       	rjmp	.+226    	; 0x1f00 <free+0x126>
    1e1e:	d8 01       	movw	r26, r16
    1e20:	40 e0       	ldi	r20, 0x00	; 0
    1e22:	50 e0       	ldi	r21, 0x00	; 0
    1e24:	ae 17       	cp	r26, r30
    1e26:	bf 07       	cpc	r27, r31
    1e28:	50 f4       	brcc	.+20     	; 0x1e3e <free+0x64>
    1e2a:	12 96       	adiw	r26, 0x02	; 2
    1e2c:	2d 91       	ld	r18, X+
    1e2e:	3c 91       	ld	r19, X
    1e30:	13 97       	sbiw	r26, 0x03	; 3
    1e32:	ad 01       	movw	r20, r26
    1e34:	21 15       	cp	r18, r1
    1e36:	31 05       	cpc	r19, r1
    1e38:	09 f1       	breq	.+66     	; 0x1e7c <free+0xa2>
    1e3a:	d9 01       	movw	r26, r18
    1e3c:	f3 cf       	rjmp	.-26     	; 0x1e24 <free+0x4a>
    1e3e:	9d 01       	movw	r18, r26
    1e40:	da 01       	movw	r26, r20
    1e42:	33 83       	std	Z+3, r19	; 0x03
    1e44:	22 83       	std	Z+2, r18	; 0x02
    1e46:	60 81       	ld	r22, Z
    1e48:	71 81       	ldd	r23, Z+1	; 0x01
    1e4a:	86 0f       	add	r24, r22
    1e4c:	97 1f       	adc	r25, r23
    1e4e:	82 17       	cp	r24, r18
    1e50:	93 07       	cpc	r25, r19
    1e52:	69 f4       	brne	.+26     	; 0x1e6e <free+0x94>
    1e54:	ec 01       	movw	r28, r24
    1e56:	28 81       	ld	r18, Y
    1e58:	39 81       	ldd	r19, Y+1	; 0x01
    1e5a:	26 0f       	add	r18, r22
    1e5c:	37 1f       	adc	r19, r23
    1e5e:	2e 5f       	subi	r18, 0xFE	; 254
    1e60:	3f 4f       	sbci	r19, 0xFF	; 255
    1e62:	31 83       	std	Z+1, r19	; 0x01
    1e64:	20 83       	st	Z, r18
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6a:	93 83       	std	Z+3, r25	; 0x03
    1e6c:	82 83       	std	Z+2, r24	; 0x02
    1e6e:	45 2b       	or	r20, r21
    1e70:	29 f4       	brne	.+10     	; 0x1e7c <free+0xa2>
    1e72:	f0 93 cb 01 	sts	0x01CB, r31
    1e76:	e0 93 ca 01 	sts	0x01CA, r30
    1e7a:	42 c0       	rjmp	.+132    	; 0x1f00 <free+0x126>
    1e7c:	13 96       	adiw	r26, 0x03	; 3
    1e7e:	fc 93       	st	X, r31
    1e80:	ee 93       	st	-X, r30
    1e82:	12 97       	sbiw	r26, 0x02	; 2
    1e84:	ed 01       	movw	r28, r26
    1e86:	49 91       	ld	r20, Y+
    1e88:	59 91       	ld	r21, Y+
    1e8a:	9e 01       	movw	r18, r28
    1e8c:	24 0f       	add	r18, r20
    1e8e:	35 1f       	adc	r19, r21
    1e90:	e2 17       	cp	r30, r18
    1e92:	f3 07       	cpc	r31, r19
    1e94:	71 f4       	brne	.+28     	; 0x1eb2 <free+0xd8>
    1e96:	80 81       	ld	r24, Z
    1e98:	91 81       	ldd	r25, Z+1	; 0x01
    1e9a:	84 0f       	add	r24, r20
    1e9c:	95 1f       	adc	r25, r21
    1e9e:	02 96       	adiw	r24, 0x02	; 2
    1ea0:	11 96       	adiw	r26, 0x01	; 1
    1ea2:	9c 93       	st	X, r25
    1ea4:	8e 93       	st	-X, r24
    1ea6:	82 81       	ldd	r24, Z+2	; 0x02
    1ea8:	93 81       	ldd	r25, Z+3	; 0x03
    1eaa:	13 96       	adiw	r26, 0x03	; 3
    1eac:	9c 93       	st	X, r25
    1eae:	8e 93       	st	-X, r24
    1eb0:	12 97       	sbiw	r26, 0x02	; 2
    1eb2:	e0 e0       	ldi	r30, 0x00	; 0
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	d8 01       	movw	r26, r16
    1eb8:	12 96       	adiw	r26, 0x02	; 2
    1eba:	8d 91       	ld	r24, X+
    1ebc:	9c 91       	ld	r25, X
    1ebe:	13 97       	sbiw	r26, 0x03	; 3
    1ec0:	00 97       	sbiw	r24, 0x00	; 0
    1ec2:	19 f0       	breq	.+6      	; 0x1eca <free+0xf0>
    1ec4:	f8 01       	movw	r30, r16
    1ec6:	8c 01       	movw	r16, r24
    1ec8:	f6 cf       	rjmp	.-20     	; 0x1eb6 <free+0xdc>
    1eca:	8d 91       	ld	r24, X+
    1ecc:	9c 91       	ld	r25, X
    1ece:	98 01       	movw	r18, r16
    1ed0:	2e 5f       	subi	r18, 0xFE	; 254
    1ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed4:	82 0f       	add	r24, r18
    1ed6:	93 1f       	adc	r25, r19
    1ed8:	20 91 c8 01 	lds	r18, 0x01C8
    1edc:	30 91 c9 01 	lds	r19, 0x01C9
    1ee0:	28 17       	cp	r18, r24
    1ee2:	39 07       	cpc	r19, r25
    1ee4:	69 f4       	brne	.+26     	; 0x1f00 <free+0x126>
    1ee6:	30 97       	sbiw	r30, 0x00	; 0
    1ee8:	29 f4       	brne	.+10     	; 0x1ef4 <free+0x11a>
    1eea:	10 92 cb 01 	sts	0x01CB, r1
    1eee:	10 92 ca 01 	sts	0x01CA, r1
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <free+0x11e>
    1ef4:	13 82       	std	Z+3, r1	; 0x03
    1ef6:	12 82       	std	Z+2, r1	; 0x02
    1ef8:	10 93 c9 01 	sts	0x01C9, r17
    1efc:	00 93 c8 01 	sts	0x01C8, r16
    1f00:	df 91       	pop	r29
    1f02:	cf 91       	pop	r28
    1f04:	1f 91       	pop	r17
    1f06:	0f 91       	pop	r16
    1f08:	08 95       	ret

00001f0a <__do_global_dtors>:
    1f0a:	10 e0       	ldi	r17, 0x00	; 0
    1f0c:	cd e4       	ldi	r28, 0x4D	; 77
    1f0e:	d0 e0       	ldi	r29, 0x00	; 0
    1f10:	03 c0       	rjmp	.+6      	; 0x1f18 <__do_global_dtors+0xe>
    1f12:	fe 01       	movw	r30, r28
    1f14:	c7 de       	rcall	.-626    	; 0x1ca4 <__tablejump2__>
    1f16:	21 96       	adiw	r28, 0x01	; 1
    1f18:	ce 34       	cpi	r28, 0x4E	; 78
    1f1a:	d1 07       	cpc	r29, r17
    1f1c:	d1 f7       	brne	.-12     	; 0x1f12 <__do_global_dtors+0x8>
    1f1e:	f8 94       	cli

00001f20 <__stop_program>:
    1f20:	ff cf       	rjmp	.-2      	; 0x1f20 <__stop_program>
