
ATxmegaElectroporation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000047c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ee  00802000  000047c6  0000485a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000023e  008020ee  008020ee  00004948  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004948  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004978  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000848  00000000  00000000  000049b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b372  00000000  00000000  00005200  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002190  00000000  00000000  00010572  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002720  00000000  00000000  00012702  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002e7c  00000000  00000000  00014e24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000046f1  00000000  00000000  00017ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007b8c  00000000  00000000  0001c391  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000778  00000000  00000000  00023f1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__dtors_end>
       4:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <__vector_1>
       8:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__vector_2>
       c:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__vector_3>
      10:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__vector_4>
      14:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__vector_5>
      18:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__vector_6>
      1c:	0c 94 07 0c 	jmp	0x180e	; 0x180e <__vector_7>
      20:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <__vector_8>
      24:	0c 94 69 0c 	jmp	0x18d2	; 0x18d2 <__vector_9>
      28:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <__vector_10>
      2c:	0c 94 cb 0c 	jmp	0x1996	; 0x1996 <__vector_11>
      30:	0c 94 fc 0c 	jmp	0x19f8	; 0x19f8 <__vector_12>
      34:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <__vector_13>
      38:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <__vector_14>
      3c:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <__vector_15>
      40:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__vector_16>
      44:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <__vector_17>
      48:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <__vector_18>
      4c:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__vector_19>
      50:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__vector_20>
      54:	0c 94 b5 0e 	jmp	0x1d6a	; 0x1d6a <__vector_21>
      58:	0c 94 e6 0e 	jmp	0x1dcc	; 0x1dcc <__vector_22>
      5c:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <__vector_23>
      60:	0c 94 48 0f 	jmp	0x1e90	; 0x1e90 <__vector_24>
      64:	0c 94 79 0f 	jmp	0x1ef2	; 0x1ef2 <__vector_25>
      68:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__vector_26>
      6c:	0c 94 db 0f 	jmp	0x1fb6	; 0x1fb6 <__vector_27>
      70:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__vector_28>
      74:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__vector_29>
      78:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__vector_30>
      7c:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__vector_31>
      80:	0c 94 d0 10 	jmp	0x21a0	; 0x21a0 <__vector_32>
      84:	0c 94 01 11 	jmp	0x2202	; 0x2202 <__vector_33>
      88:	0c 94 32 11 	jmp	0x2264	; 0x2264 <__vector_34>
      8c:	0c 94 63 11 	jmp	0x22c6	; 0x22c6 <__vector_35>
      90:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__vector_36>
      94:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__vector_37>
      98:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__vector_38>
      9c:	0c 94 27 12 	jmp	0x244e	; 0x244e <__vector_39>
      a0:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <__vector_40>
      a4:	0c 94 89 12 	jmp	0x2512	; 0x2512 <__vector_41>
      a8:	0c 94 ba 12 	jmp	0x2574	; 0x2574 <__vector_42>
      ac:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__vector_43>
      b0:	0c 94 1c 13 	jmp	0x2638	; 0x2638 <__vector_44>
      b4:	0c 94 4d 13 	jmp	0x269a	; 0x269a <__vector_45>
      b8:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__vector_46>
      bc:	0c 94 af 13 	jmp	0x275e	; 0x275e <__vector_47>
      c0:	0c 94 e0 13 	jmp	0x27c0	; 0x27c0 <__vector_48>
      c4:	0c 94 11 14 	jmp	0x2822	; 0x2822 <__vector_49>
      c8:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__vector_50>
      cc:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <__vector_51>
      d0:	0c 94 a4 14 	jmp	0x2948	; 0x2948 <__vector_52>
      d4:	0c 94 d5 14 	jmp	0x29aa	; 0x29aa <__vector_53>
      d8:	0c 94 06 15 	jmp	0x2a0c	; 0x2a0c <__vector_54>
      dc:	0c 94 37 15 	jmp	0x2a6e	; 0x2a6e <__vector_55>
      e0:	0c 94 68 15 	jmp	0x2ad0	; 0x2ad0 <__vector_56>
      e4:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <__vector_57>
      e8:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__vector_58>
      ec:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__vector_59>
      f0:	0c 94 2c 16 	jmp	0x2c58	; 0x2c58 <__vector_60>
      f4:	0c 94 5d 16 	jmp	0x2cba	; 0x2cba <__vector_61>
      f8:	0c 94 8e 16 	jmp	0x2d1c	; 0x2d1c <__vector_62>
      fc:	0c 94 bf 16 	jmp	0x2d7e	; 0x2d7e <__vector_63>
     100:	0c 94 f0 16 	jmp	0x2de0	; 0x2de0 <__vector_64>
     104:	0c 94 21 17 	jmp	0x2e42	; 0x2e42 <__vector_65>
     108:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <__vector_66>
     10c:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <__vector_67>
     110:	0c 94 b4 17 	jmp	0x2f68	; 0x2f68 <__vector_68>
     114:	0c 94 e5 17 	jmp	0x2fca	; 0x2fca <__vector_69>
     118:	0c 94 16 18 	jmp	0x302c	; 0x302c <__vector_70>
     11c:	0c 94 47 18 	jmp	0x308e	; 0x308e <__vector_71>
     120:	0c 94 78 18 	jmp	0x30f0	; 0x30f0 <__vector_72>
     124:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <__vector_73>
     128:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__vector_74>
     12c:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     130:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     134:	0c 94 0b 19 	jmp	0x3216	; 0x3216 <__vector_77>
     138:	0c 94 3c 19 	jmp	0x3278	; 0x3278 <__vector_78>
     13c:	0c 94 6d 19 	jmp	0x32da	; 0x32da <__vector_79>
     140:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__vector_80>
     144:	0c 94 cf 19 	jmp	0x339e	; 0x339e <__vector_81>
     148:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__vector_82>
     14c:	0c 94 31 1a 	jmp	0x3462	; 0x3462 <__vector_83>
     150:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <__vector_84>
     154:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <__vector_85>
     158:	0c 94 c4 1a 	jmp	0x3588	; 0x3588 <__vector_86>
     15c:	0c 94 f5 1a 	jmp	0x35ea	; 0x35ea <__vector_87>
     160:	0c 94 26 1b 	jmp	0x364c	; 0x364c <__vector_88>
     164:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <__vector_89>
     168:	0c 94 88 1b 	jmp	0x3710	; 0x3710 <__vector_90>
     16c:	0c 94 b9 1b 	jmp	0x3772	; 0x3772 <__vector_91>
     170:	0c 94 ea 1b 	jmp	0x37d4	; 0x37d4 <__vector_92>
     174:	0c 94 1b 1c 	jmp	0x3836	; 0x3836 <__vector_93>
     178:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     17c:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     180:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     184:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     188:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     18c:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     190:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     194:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     198:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     19c:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     1a0:	0c 94 4c 1c 	jmp	0x3898	; 0x3898 <__vector_104>
     1a4:	0c 94 7d 1c 	jmp	0x38fa	; 0x38fa <__vector_105>
     1a8:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     1ac:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     1b0:	0c 94 ae 1c 	jmp	0x395c	; 0x395c <__vector_108>
     1b4:	0c 94 df 1c 	jmp	0x39be	; 0x39be <__vector_109>
     1b8:	0c 94 10 1d 	jmp	0x3a20	; 0x3a20 <__vector_110>
     1bc:	0c 94 41 1d 	jmp	0x3a82	; 0x3a82 <__vector_111>
     1c0:	0c 94 72 1d 	jmp	0x3ae4	; 0x3ae4 <__vector_112>
     1c4:	0c 94 a3 1d 	jmp	0x3b46	; 0x3b46 <__vector_113>
     1c8:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     1cc:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     1d0:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     1d4:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     1d8:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     1dc:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__vector_119>
     1e0:	0c 94 05 1e 	jmp	0x3c0a	; 0x3c0a <__vector_120>
     1e4:	0c 94 36 1e 	jmp	0x3c6c	; 0x3c6c <__vector_121>
     1e8:	5a 03       	fmul	r21, r18
     1ea:	5d 03       	fmul	r21, r21
     1ec:	74 03       	mulsu	r23, r20
     1ee:	65 03       	mulsu	r22, r21
     1f0:	71 03       	mulsu	r23, r17
     1f2:	74 03       	mulsu	r23, r20
     1f4:	74 03       	mulsu	r23, r20
     1f6:	74 03       	mulsu	r23, r20
     1f8:	74 03       	mulsu	r23, r20
     1fa:	61 03       	mulsu	r22, r17
     1fc:	69 03       	fmul	r22, r17
     1fe:	6d 03       	fmul	r22, r21
     200:	cd 04       	cpc	r12, r13
     202:	d1 04       	cpc	r13, r1
     204:	08 05       	cpc	r16, r8
     206:	37 05       	cpc	r19, r7
     208:	6b 05       	cpc	r22, r11
     20a:	9d 05       	cpc	r25, r13
     20c:	f9 05       	cpc	r31, r9
     20e:	55 06       	cpc	r5, r21
     210:	8d 20       	and	r8, r13
     212:	8d 20       	and	r8, r13
     214:	95 20       	and	r9, r5
     216:	9d 20       	and	r9, r13
     218:	a8 20       	and	r10, r8
     21a:	00 21       	and	r16, r0
     21c:	07 21       	and	r16, r7
     21e:	33 21       	and	r19, r3
     220:	33 21       	and	r19, r3
     222:	32 21       	and	r19, r2
     224:	32 21       	and	r19, r2

00000226 <__trampolines_start>:
     226:	0c 94 4d 1f 	jmp	0x3e9a	; 0x3e9a <_ZN16CMBEventsHandler13FillRegDataRqEhh>
     22a:	0c 94 00 21 	jmp	0x4200	; 0x4200 <_ZN9CMBSender13OnReceiveByteEh+0x108>
     22e:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     232:	0c 94 8d 20 	jmp	0x411a	; 0x411a <_ZN9CMBSender13OnReceiveByteEh+0x22>
     236:	0c 94 d7 1f 	jmp	0x3fae	; 0x3fae <_ZN16CMBEventsHandler15AllocateBuffersEjj>
     23a:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <_ZN16CLaserControlApp13OnTimerStaticEPv>
     23e:	0c 94 36 21 	jmp	0x426c	; 0x426c <_ZN9CMBSender18OnUSARTRxInterruptEPv>
     242:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <_ZN7CTimerC9SetPeriodEj>
     246:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x4a>
     24a:	0c 94 de 09 	jmp	0x13bc	; 0x13bc <_ZN7CTimerC8SetCOMPAEj>
     24e:	0c 94 b4 1f 	jmp	0x3f68	; 0x3f68 <_ZN16CMBEventsHandler13FillVarDataRqEjj>
     252:	0c 94 34 02 	jmp	0x468	; 0x468 <_ZN10CDGUSUSART19SetTransmittingByteEh>
     256:	0c 94 10 20 	jmp	0x4020	; 0x4020 <_ZN9CMBSender18OnRegisterReceivedEhPhh>
     25a:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x5a>
     25e:	0c 94 6a 1e 	jmp	0x3cd4	; 0x3cd4 <_GLOBAL__sub_I_dacSPI>
     262:	0c 94 a8 20 	jmp	0x4150	; 0x4150 <_ZN9CMBSender13OnReceiveByteEh+0x58>
     266:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>
     26a:	0c 94 04 0a 	jmp	0x1408	; 0x1408 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     26e:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     272:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x2c>
     276:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     27a:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <_ZN16CLaserControlApp3RunEv+0x6a>
     27e:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <_ZN16CLaserControlApp3RunEv+0x202>
     282:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x60>
     286:	0c 94 44 03 	jmp	0x688	; 0x688 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>
     28a:	0c 94 40 22 	jmp	0x4480	; 0x4480 <_ZN9CMBSender21OnTransactionCallbackEPhj>
     28e:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <_ZN16CLaserControlApp3RunEv+0x19e>
     292:	0c 94 33 21 	jmp	0x4266	; 0x4266 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
     296:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>
     29a:	0c 94 07 21 	jmp	0x420e	; 0x420e <_ZN9CMBSender13OnReceiveByteEh+0x116>
     29e:	0c 94 cd 04 	jmp	0x99a	; 0x99a <_ZN16CLaserControlApp3RunEv+0x62>
     2a2:	0c 94 4e 02 	jmp	0x49c	; 0x49c <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>
     2a6:	0c 94 9b 21 	jmp	0x4336	; 0x4336 <_ZN9CMBSender18OnUSARTTxInterruptEPv>
     2aa:	0c 94 6c 1f 	jmp	0x3ed8	; 0x3ed8 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>
     2ae:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     2b2:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <_ZN16CLaserControlApp3RunEv+0x136>
     2b6:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <_ZN7CTimerC8SetCOMPCEj>
     2ba:	0c 94 08 05 	jmp	0xa10	; 0xa10 <_ZN16CLaserControlApp3RunEv+0xd8>
     2be:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <_ZN4CSPI16StaticOnTransmitEPv>
     2c2:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>
     2c6:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x42>
     2ca:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
     2ce:	0c 94 67 1e 	jmp	0x3cce	; 0x3cce <__cxa_pure_virtual>
     2d2:	0c 94 6d 03 	jmp	0x6da	; 0x6da <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x52>
     2d6:	0c 94 32 21 	jmp	0x4264	; 0x4264 <_ZN9CMBSender13OnReceiveByteEh+0x16c>
     2da:	0c 94 3f 02 	jmp	0x47e	; 0x47e <_ZN10CDGUSUSART11IsReceivingEv>
     2de:	0c 94 f2 09 	jmp	0x13e4	; 0x13e4 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     2e2:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x32>
     2e6:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x3a>
     2ea:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>
     2ee:	0c 94 b6 09 	jmp	0x136c	; 0x136c <_ZN7CTimerC5StartEj>
     2f2:	0c 94 87 1e 	jmp	0x3d0e	; 0x3d0e <_GLOBAL__sub_D_dacSPI>
     2f6:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <_ZN7CTimerC4StopEv>
     2fa:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <_ZN16CLaserControlApp3RunEv+0x372>
     2fe:	0c 94 37 02 	jmp	0x46e	; 0x46e <_ZN10CDGUSUSART14IsTransmittingEv>
     302:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>
     306:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <_ZN16CLaserControlApp3RunEv+0x2ba>
     30a:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <_ZN7CTimerC8SetCOMPBEj>
     30e:	0c 94 16 0a 	jmp	0x142c	; 0x142c <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     312:	0c 94 01 20 	jmp	0x4002	; 0x4002 <_ZN9CMBSender18OnVariableReceivedEjPjj>
     316:	0c 94 31 02 	jmp	0x462	; 0x462 <_ZN10CDGUSUSART15GetReceivedByteEv>
     31a:	0c 94 95 20 	jmp	0x412a	; 0x412a <_ZN9CMBSender13OnReceiveByteEh+0x32>
     31e:	0c 94 9d 20 	jmp	0x413a	; 0x413a <_ZN9CMBSender13OnReceiveByteEh+0x42>
     322:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>
     326:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <_GLOBAL__sub_I_timer>
     32a:	0c 94 ed 09 	jmp	0x13da	; 0x13da <_ZN7CTimerC8SetCOMPDEj>
     32e:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <_GLOBAL__sub_D_timer>
     332:	0c 94 46 02 	jmp	0x48c	; 0x48c <_ZN10CDGUSUSART11IsDataEmptyEv>
     336:	0c 94 43 03 	jmp	0x686	; 0x686 <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>
     33a:	0c 94 f2 1f 	jmp	0x3fe4	; 0x3fe4 <_ZN16CMBEventsHandler11FreeBuffersEv>
     33e:	0c 94 1c 1f 	jmp	0x3e38	; 0x3e38 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>

00000342 <__ctors_start>:
     342:	61 04       	cpc	r6, r1
     344:	6a 1e       	adc	r6, r26

00000346 <__ctors_end>:
     346:	66 04       	cpc	r6, r6
     348:	87 1e       	adc	r8, r23

0000034a <__dtors_end>:
     34a:	11 24       	eor	r1, r1
     34c:	1f be       	out	0x3f, r1	; 63
     34e:	cf ef       	ldi	r28, 0xFF	; 255
     350:	cd bf       	out	0x3d, r28	; 61
     352:	df e3       	ldi	r29, 0x3F	; 63
     354:	de bf       	out	0x3e, r29	; 62
     356:	00 e0       	ldi	r16, 0x00	; 0
     358:	0c bf       	out	0x3c, r16	; 60

0000035a <__do_copy_data>:
     35a:	10 e2       	ldi	r17, 0x20	; 32
     35c:	a0 e0       	ldi	r26, 0x00	; 0
     35e:	b0 e2       	ldi	r27, 0x20	; 32
     360:	e6 ec       	ldi	r30, 0xC6	; 198
     362:	f7 e4       	ldi	r31, 0x47	; 71
     364:	00 e0       	ldi	r16, 0x00	; 0
     366:	0b bf       	out	0x3b, r16	; 59
     368:	02 c0       	rjmp	.+4      	; 0x36e <__do_copy_data+0x14>
     36a:	07 90       	elpm	r0, Z+
     36c:	0d 92       	st	X+, r0
     36e:	ae 3e       	cpi	r26, 0xEE	; 238
     370:	b1 07       	cpc	r27, r17
     372:	d9 f7       	brne	.-10     	; 0x36a <__do_copy_data+0x10>

00000374 <__do_clear_bss>:
     374:	23 e2       	ldi	r18, 0x23	; 35
     376:	ae ee       	ldi	r26, 0xEE	; 238
     378:	b0 e2       	ldi	r27, 0x20	; 32
     37a:	01 c0       	rjmp	.+2      	; 0x37e <.do_clear_bss_start>

0000037c <.do_clear_bss_loop>:
     37c:	1d 92       	st	X+, r1

0000037e <.do_clear_bss_start>:
     37e:	ac 32       	cpi	r26, 0x2C	; 44
     380:	b2 07       	cpc	r27, r18
     382:	e1 f7       	brne	.-8      	; 0x37c <.do_clear_bss_loop>

00000384 <__do_global_ctors>:
     384:	11 e0       	ldi	r17, 0x01	; 1
     386:	c3 ea       	ldi	r28, 0xA3	; 163
     388:	d1 e0       	ldi	r29, 0x01	; 1
     38a:	00 e0       	ldi	r16, 0x00	; 0
     38c:	06 c0       	rjmp	.+12     	; 0x39a <__do_global_ctors+0x16>
     38e:	21 97       	sbiw	r28, 0x01	; 1
     390:	01 09       	sbc	r16, r1
     392:	80 2f       	mov	r24, r16
     394:	fe 01       	movw	r30, r28
     396:	0e 94 62 22 	call	0x44c4	; 0x44c4 <__tablejump2__>
     39a:	c1 3a       	cpi	r28, 0xA1	; 161
     39c:	d1 07       	cpc	r29, r17
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	08 07       	cpc	r16, r24
     3a2:	a9 f7       	brne	.-22     	; 0x38e <__do_global_ctors+0xa>
     3a4:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <main>
     3a8:	0c 94 d1 23 	jmp	0x47a2	; 0x47a2 <__do_global_dtors>

000003ac <__bad_interrupt>:
     3ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003b0 <_ZN13CDGUSDatabaseC1Ev>:
#define F_CPU 32000000

#include "util/delay.h"

// default constructor
CDGUSDatabase::CDGUSDatabase()
     3b0:	08 95       	ret

000003b2 <_ZN13CDGUSDatabaseD1Ev>:
{
} //CDGUSDatabase

// default destructor
CDGUSDatabase::~CDGUSDatabase()
     3b2:	08 95       	ret

000003b4 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>:
{
} //~CDGUSDatabase

void CDGUSDatabase::Initialize(CMBSender* sender, uint16_t vp)
{
     3b4:	fc 01       	movw	r30, r24
	// GUI class initialization
	m_cpSender = sender;
     3b6:	62 83       	std	Z+2, r22	; 0x02
     3b8:	73 83       	std	Z+3, r23	; 0x03
	vp_addr = (vp >> 8) | (vp << 8);
     3ba:	94 2f       	mov	r25, r20
     3bc:	85 2f       	mov	r24, r21
     3be:	84 83       	std	Z+4, r24	; 0x04
     3c0:	95 83       	std	Z+5, r25	; 0x05
	vp_addres = vp;
     3c2:	46 83       	std	Z+6, r20	; 0x06
     3c4:	57 83       	std	Z+7, r21	; 0x07
	data_transaction = 0;
     3c6:	10 82       	st	Z, r1
     3c8:	11 82       	std	Z+1, r1	; 0x01
     3ca:	08 95       	ret

000003cc <_ZN13CDGUSDatabase18OnVariableReceivedEjPjj>:
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&en, sizeof(en));
	m_cpSender->WaitMODBUSTransmitter();
}

void CDGUSDatabase::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	ec 01       	movw	r28, r24
     3d2:	ba 01       	movw	r22, r20
	if (data_transaction != 0)
     3d4:	88 81       	ld	r24, Y
     3d6:	99 81       	ldd	r25, Y+1	; 0x01
     3d8:	00 97       	sbiw	r24, 0x00	; 0
     3da:	19 f0       	breq	.+6      	; 0x3e2 <_ZN13CDGUSDatabase18OnVariableReceivedEjPjj+0x16>
		memcpy(data_transaction, data, length);
     3dc:	a9 01       	movw	r20, r18
     3de:	0e 94 c8 23 	call	0x4790	; 0x4790 <memcpy>
	data_transaction = 0;
     3e2:	18 82       	st	Y, r1
     3e4:	19 82       	std	Y+1, r1	; 0x01
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	08 95       	ret

000003ec <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
     3ec:	0f 93       	push	r16
	PORTD.DIRSET = PIN3_bm; // Set TX to output
     3ee:	e0 e6       	ldi	r30, 0x60	; 96
     3f0:	f6 e0       	ldi	r31, 0x06	; 6
     3f2:	88 e0       	ldi	r24, 0x08	; 8
     3f4:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; // Set RX to input
     3f6:	84 e0       	ldi	r24, 0x04	; 4
     3f8:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN2CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
     3fa:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
     3fc:	13 8a       	std	Z+19, r1	; 0x13
	
	// Turn on interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_LO_gc/* | USART_DREINTLVL_LO_gc*/;
     3fe:	e0 ea       	ldi	r30, 0xA0	; 160
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	84 e1       	ldi	r24, 0x14	; 20
     404:	83 83       	std	Z+3, r24	; 0x03
	
	// Enable RX, TX
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     406:	88 e1       	ldi	r24, 0x18	; 24
     408:	84 83       	std	Z+4, r24	; 0x04
	
	// Double transmission speed
#ifdef U2X
	USARTD0.CTRLB |=  (1 << USART_CLK2X_bm);
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
     40a:	84 81       	ldd	r24, Z+4	; 0x04
     40c:	84 83       	std	Z+4, r24	; 0x04
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
     40e:	41 30       	cpi	r20, 0x01	; 1
     410:	19 f0       	breq	.+6      	; 0x418 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x2c>
     412:	42 30       	cpi	r20, 0x02	; 2
     414:	19 f0       	breq	.+6      	; 0x41c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x30>
     416:	04 c0       	rjmp	.+8      	; 0x420 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
	{
		case PARITY_DISABLE:
			temp |= USART_PMODE_DISABLED_gc;
		break;
		case PARITY_EVEN:
			temp |= USART_PMODE_EVEN_gc;
     418:	80 e2       	ldi	r24, 0x20	; 32
     41a:	03 c0       	rjmp	.+6      	; 0x422 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
		break;
		case PARITY_ODD:
			temp |= USART_PMODE_ODD_gc;
     41c:	80 e3       	ldi	r24, 0x30	; 48
		break;
     41e:	01 c0       	rjmp	.+2      	; 0x422 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
#endif

	// Parity param set
	uint8_t temp = 0;
     420:	80 e0       	ldi	r24, 0x00	; 0
			temp |= USART_PMODE_ODD_gc;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
     422:	22 23       	and	r18, r18
     424:	19 f0       	breq	.+6      	; 0x42c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x40>
     426:	21 30       	cpi	r18, 0x01	; 1
     428:	19 f0       	breq	.+6      	; 0x430 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x44>
     42a:	03 c0       	rjmp	.+6      	; 0x432 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
	{
		case STOPBITS_1BIT:
			temp &= ~USART_SBMODE_bm;
     42c:	87 7f       	andi	r24, 0xF7	; 247
		break;
     42e:	01 c0       	rjmp	.+2      	; 0x432 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
		case STOPBITS_2BIT:
			temp |=  USART_SBMODE_bm;
     430:	88 60       	ori	r24, 0x08	; 8
		break;
	}
	
	// USART mode asynchronous, 8bit
	USARTD0.CTRLC = (Async?USART_CMODE_ASYNCHRONOUS_gc:USART_CMODE_SYNCHRONOUS_gc) | USART_CHSIZE_8BIT_gc | temp;
     432:	01 11       	cpse	r16, r1
     434:	02 c0       	rjmp	.+4      	; 0x43a <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x4e>
     436:	93 e4       	ldi	r25, 0x43	; 67
     438:	01 c0       	rjmp	.+2      	; 0x43c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x50>
     43a:	93 e0       	ldi	r25, 0x03	; 3
     43c:	89 2b       	or	r24, r25
     43e:	e0 ea       	ldi	r30, 0xA0	; 160
     440:	f9 e0       	ldi	r31, 0x09	; 9
     442:	85 83       	std	Z+5, r24	; 0x05
	
	// Set baud rate
	USARTD0.BAUDCTRLA = bsel_table[baud];
     444:	70 e0       	ldi	r23, 0x00	; 0
     446:	db 01       	movw	r26, r22
     448:	aa 5d       	subi	r26, 0xDA	; 218
     44a:	bf 4d       	sbci	r27, 0xDF	; 223
     44c:	8c 91       	ld	r24, X
     44e:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (((int8_t)(16 + bscale_table[baud])) << USART_BSCALE0_bp) | ((bsel_table[baud] >> 8) & 0x0F);	
     450:	db 01       	movw	r26, r22
     452:	aa 5f       	subi	r26, 0xFA	; 250
     454:	bf 4d       	sbci	r27, 0xDF	; 223
     456:	8c 91       	ld	r24, X
     458:	82 95       	swap	r24
     45a:	80 7f       	andi	r24, 0xF0	; 240
     45c:	87 83       	std	Z+7, r24	; 0x07
} //CUSART
     45e:	0f 91       	pop	r16
     460:	08 95       	ret

00000462 <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return USARTD0.DATA;
     462:	80 91 a0 09 	lds	r24, 0x09A0
}
     466:	08 95       	ret

00000468 <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( ( USARTD0.STATUS & (1<<USART_DREIF_bm)) );
	USARTD0.DATA = data;
     468:	60 93 a0 09 	sts	0x09A0, r22
     46c:	08 95       	ret

0000046e <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return !( USARTD0.STATUS & USART_TXCIF_bm);
     46e:	80 91 a1 09 	lds	r24, 0x09A1
     472:	86 fb       	bst	r24, 6
     474:	88 27       	eor	r24, r24
     476:	80 f9       	bld	r24, 0
}
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	89 27       	eor	r24, r25
     47c:	08 95       	ret

0000047e <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return !( USARTD0.STATUS & USART_RXCIF_bm);
     47e:	80 91 a1 09 	lds	r24, 0x09A1
     482:	80 95       	com	r24
}
     484:	88 1f       	adc	r24, r24
     486:	88 27       	eor	r24, r24
     488:	88 1f       	adc	r24, r24
     48a:	08 95       	ret

0000048c <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return !( USARTD0.STATUS & USART_DREIF_bm);
     48c:	80 91 a1 09 	lds	r24, 0x09A1
     490:	85 fb       	bst	r24, 5
     492:	88 27       	eor	r24, r24
     494:	80 f9       	bld	r24, 0
}
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	89 27       	eor	r24, r25
     49a:	08 95       	ret

0000049c <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_RXC_vect_num] = sender;
     49c:	60 93 97 22 	sts	0x2297, r22
     4a0:	70 93 98 22 	sts	0x2298, r23
	InterruptFuncTable[USARTD0_RXC_vect_num] = callback;
     4a4:	40 93 a1 21 	sts	0x21A1, r20
     4a8:	50 93 a2 21 	sts	0x21A2, r21
     4ac:	08 95       	ret

000004ae <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_TXC_vect_num] = sender;
     4ae:	60 93 9b 22 	sts	0x229B, r22
     4b2:	70 93 9c 22 	sts	0x229C, r23
	InterruptFuncTable[USARTD0_TXC_vect_num] = callback;
     4b6:	40 93 a5 21 	sts	0x21A5, r20
     4ba:	50 93 a6 21 	sts	0x21A6, r21
     4be:	08 95       	ret

000004c0 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMARxTrig(DMA_CH_t *dma_channel)
{
     4c0:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_RXC_gc;
     4c2:	8b e6       	ldi	r24, 0x6B	; 107
     4c4:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->SRCADDR0 = (int)&USARTD0.DATA;
     4c6:	80 ea       	ldi	r24, 0xA0	; 160
     4c8:	80 87       	std	Z+8, r24	; 0x08
	dma_channel->SRCADDR1 = (int)&USARTD0.DATA >> 8;
     4ca:	89 e0       	ldi	r24, 0x09	; 9
     4cc:	81 87       	std	Z+9, r24	; 0x09
	dma_channel->SRCADDR2 = 0;
     4ce:	12 86       	std	Z+10, r1	; 0x0a
     4d0:	08 95       	ret

000004d2 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMATxTrig(DMA_CH_t *dma_channel)
{
     4d2:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_DRE_gc;
     4d4:	8c e6       	ldi	r24, 0x6C	; 108
     4d6:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->DESTADDR0 = (int)&USARTD0.DATA;
     4d8:	80 ea       	ldi	r24, 0xA0	; 160
     4da:	84 87       	std	Z+12, r24	; 0x0c
	dma_channel->DESTADDR1 = (int)&USARTD0.DATA >> 8;
     4dc:	89 e0       	ldi	r24, 0x09	; 9
     4de:	85 87       	std	Z+13, r24	; 0x0d
	dma_channel->DESTADDR2 = 0;
     4e0:	16 86       	std	Z+14, r1	; 0x0e
     4e2:	08 95       	ret

000004e4 <_ZN10CDGUSUSARTC1Ev>:
								true, true, true, true, true, true, true, true, true, true,
								true, true};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	ec 01       	movw	r28, r24
     4ea:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <_ZN6CUSARTC1Ev>
     4ee:	8d e4       	ldi	r24, 0x4D	; 77
     4f0:	90 e2       	ldi	r25, 0x20	; 32
     4f2:	88 83       	st	Y, r24
     4f4:	99 83       	std	Y+1, r25	; 0x01
{
} //CDGUSUSART
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
     4fc:	2d e4       	ldi	r18, 0x4D	; 77
     4fe:	30 e2       	ldi	r19, 0x20	; 32
     500:	fc 01       	movw	r30, r24
     502:	20 83       	st	Z, r18
     504:	31 83       	std	Z+1, r19	; 0x01
     506:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <_ZN6CUSARTD1Ev>
     50a:	08 95       	ret

0000050c <_ZN11CLaserBoardC1Ev>:
#include <avr/interrupt.h>
#include <avr/io.h>
#include <util/delay.h>

// default constructor
CLaserBoard::CLaserBoard()
     50c:	08 95       	ret

0000050e <_ZN11CLaserBoardD1Ev>:
{
} //CLaserBoard

// default destructor
CLaserBoard::~CLaserBoard()
     50e:	08 95       	ret

00000510 <_ZN11CLaserBoard12InitializeIOEv>:
} //~CLaserBoard

void CLaserBoard::InitializeIO()
{
	// Set all output
	PORTC.DIRSET = 0xFF;
     510:	e0 e4       	ldi	r30, 0x40	; 64
     512:	f6 e0       	ldi	r31, 0x06	; 6
     514:	9f ef       	ldi	r25, 0xFF	; 255
     516:	91 83       	std	Z+1, r25	; 0x01
	
	// Configure all pins to "wired and"
	PORTC.PIN0CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     518:	88 ea       	ldi	r24, 0xA8	; 168
     51a:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     51c:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.PIN2CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     51e:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     520:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     522:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     524:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     526:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     528:	87 8b       	std	Z+23, r24	; 0x17
	
	// Set all down
	PORTC.OUT = 0x00;
     52a:	14 82       	std	Z+4, r1	; 0x04
	
	// Buzzer pin initialize
	PORTE.DIRSET = PIN3_bm;
     52c:	e0 e8       	ldi	r30, 0x80	; 128
     52e:	f6 e0       	ldi	r31, 0x06	; 6
     530:	88 e0       	ldi	r24, 0x08	; 8
     532:	81 83       	std	Z+1, r24	; 0x01
	
	// Configure
	PORTE.PIN3CTRL = PORT_OPC_TOTEM_gc;
     534:	13 8a       	std	Z+19, r1	; 0x13
	PORTE.OUT = 0;
     536:	14 82       	std	Z+4, r1	; 0x04
	
	// Configure all pins of PWM to inverted
	PORTF.PIN0CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     538:	e0 ea       	ldi	r30, 0xA0	; 160
     53a:	f6 e0       	ldi	r31, 0x06	; 6
     53c:	80 ec       	ldi	r24, 0xC0	; 192
     53e:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     540:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     542:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     544:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     546:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     548:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     54a:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     54c:	87 8b       	std	Z+23, r24	; 0x17

	// Set all down
	PORTF.OUT = 0x00;
     54e:	14 82       	std	Z+4, r1	; 0x04

	// Set all output
	PORTF.DIRSET = 0xFF;
     550:	91 83       	std	Z+1, r25	; 0x01
	
	// Set PD0 and PD4
	PORTD.DIRSET = PIN0_bm | PIN4_bm;
     552:	e0 e6       	ldi	r30, 0x60	; 96
     554:	f6 e0       	ldi	r31, 0x06	; 6
     556:	91 e1       	ldi	r25, 0x11	; 17
     558:	91 83       	std	Z+1, r25	; 0x01
	
	// Configure all pins to "wired and"
	PORTD.PIN0CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     55a:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN4CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     55c:	84 8b       	std	Z+20, r24	; 0x14
	
	PORTD.OUT = 0;//PIN0_bm;
     55e:	14 82       	std	Z+4, r1	; 0x04
	
	// Enable low level interrupts
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
     560:	e0 ea       	ldi	r30, 0xA0	; 160
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	82 81       	ldd	r24, Z+2	; 0x02
     566:	81 60       	ori	r24, 0x01	; 1
     568:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
     56a:	82 81       	ldd	r24, Z+2	; 0x02
     56c:	82 60       	ori	r24, 0x02	; 2
     56e:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_HILVLEN_bm;
     570:	82 81       	ldd	r24, Z+2	; 0x02
     572:	84 60       	ori	r24, 0x04	; 4
     574:	82 83       	std	Z+2, r24	; 0x02
     576:	08 95       	ret

00000578 <_ZN11CLaserBoard15InitializeClockEv>:

void CLaserBoard::InitializeClock()
{
	//-----------------------
	// External 16000.000 kHz oscillator initialization
	OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
     578:	e0 e5       	ldi	r30, 0x50	; 80
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	8b ec       	ldi	r24, 0xCB	; 203
     57e:	82 83       	std	Z+2, r24	; 0x02
	// Enable the external oscillator
	OSC.CTRL |= OSC_XOSCEN_bm;
     580:	80 81       	ld	r24, Z
     582:	88 60       	ori	r24, 0x08	; 8
     584:	80 83       	st	Z, r24
	// Wait for the external oscillator to stabilize
	while ((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
     586:	81 81       	ldd	r24, Z+1	; 0x01
     588:	83 ff       	sbrs	r24, 3
     58a:	fd cf       	rjmp	.-6      	; 0x586 <_ZN11CLaserBoard15InitializeClockEv+0xe>
	// PLL initialization
	// PLL clock source: External Osc. or Clock
	// PLL multiplication factor: 2
	// PLL frequency: 32.000000 MHz
	// Set the PLL clock source and multiplication factor
	unsigned char n = (OSC.PLLCTRL & (~(OSC_PLLSRC_gm | OSC_PLLFAC_gm))) |    OSC_PLLSRC_XOSC_gc | OSC_PLLFAC2_bm;
     58c:	e0 e5       	ldi	r30, 0x50	; 80
     58e:	f0 e0       	ldi	r31, 0x00	; 0
     590:	85 81       	ldd	r24, Z+5	; 0x05
	CCP = CCP_IOREG_gc;
     592:	98 ed       	ldi	r25, 0xD8	; 216
     594:	94 bf       	out	0x34, r25	; 52
	OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | OSC_PLLFAC2_bm;//n;
     596:	84 ec       	ldi	r24, 0xC4	; 196
     598:	85 83       	std	Z+5, r24	; 0x05
	// Enable the PLL
	OSC.CTRL |= OSC_PLLEN_bm;
     59a:	80 81       	ld	r24, Z
     59c:	80 61       	ori	r24, 0x10	; 16
     59e:	80 83       	st	Z, r24
	// ClkPer4: 32000.000 kHz
	// ClkPer2: 32000.000 kHz
	// ClkPer:  32000.000 kHz
	// ClkCPU:  32000.000 kHz
	n = (CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
     5a0:	e0 e4       	ldi	r30, 0x40	; 64
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	81 81       	ldd	r24, Z+1	; 0x01
	CCP = CCP_IOREG_gc;
     5a6:	94 bf       	out	0x34, r25	; 52
	CLK.PSCTRL = CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;//n;
     5a8:	11 82       	std	Z+1, r1	; 0x01
	// Wait for the PLL to stabilize
	while ((OSC.STATUS & OSC_PLLRDY_bm)==0);
     5aa:	e0 e5       	ldi	r30, 0x50	; 80
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	81 81       	ldd	r24, Z+1	; 0x01
     5b0:	84 ff       	sbrs	r24, 4
     5b2:	fd cf       	rjmp	.-6      	; 0x5ae <_ZN11CLaserBoard15InitializeClockEv+0x36>
	// Select the system clock source: Phase Locked Loop
	n = (CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_PLL_gc;
     5b4:	e0 e4       	ldi	r30, 0x40	; 64
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	80 81       	ld	r24, Z
     5ba:	88 7f       	andi	r24, 0xF8	; 248
     5bc:	84 60       	ori	r24, 0x04	; 4
	CCP = CCP_IOREG_gc;
     5be:	98 ed       	ldi	r25, 0xD8	; 216
     5c0:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = n;
     5c2:	80 83       	st	Z, r24
	// Disable the unused oscillators: 2 MHz, 32 MHz, internal 32 kHz
	OSC.CTRL &= ~(OSC_RC2MEN_bm | OSC_RC32MEN_bm | OSC_RC32KEN_bm);
     5c4:	a0 e5       	ldi	r26, 0x50	; 80
     5c6:	b0 e0       	ldi	r27, 0x00	; 0
     5c8:	8c 91       	ld	r24, X
     5ca:	88 7f       	andi	r24, 0xF8	; 248
     5cc:	8c 93       	st	X, r24
	// Lock the CLK.CTRL and CLK.PSCTRL registers
	n = CLK.LOCK | CLK_LOCK_bm;
     5ce:	82 81       	ldd	r24, Z+2	; 0x02
	CCP = CCP_IOREG_gc;
     5d0:	94 bf       	out	0x34, r25	; 52
	CLK.LOCK = CLK_LOCK_bm;//n;
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	82 83       	std	Z+2, r24	; 0x02
	// Peripheral Clock output: Disabled
	PORTCFG.CLKEVOUT = (PORTCFG.CLKEVOUT & (~PORTCFG_CLKOUT_gm)) | PORTCFG_CLKOUT_OFF_gc;
     5d6:	e0 eb       	ldi	r30, 0xB0	; 176
     5d8:	f0 e0       	ldi	r31, 0x00	; 0
     5da:	84 81       	ldd	r24, Z+4	; 0x04
     5dc:	8c 7f       	andi	r24, 0xFC	; 252
     5de:	84 83       	std	Z+4, r24	; 0x04
     5e0:	08 95       	ret

000005e2 <_ZN11CLaserBoard8Relay1OnEv>:
	//-----------------------
}

void CLaserBoard::Relay1On()
{
	PORTD.DIRCLR = PIN0_bm;
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	80 93 62 06 	sts	0x0662, r24
     5e8:	08 95       	ret

000005ea <_ZN11CLaserBoard8Relay2OnEv>:
}

void CLaserBoard::Relay2On()
{
	PORTD.DIRCLR = PIN4_bm;
     5ea:	80 e1       	ldi	r24, 0x10	; 16
     5ec:	80 93 62 06 	sts	0x0662, r24
     5f0:	08 95       	ret

000005f2 <_ZN11CLaserBoard9Relay1OffEv>:
}

void CLaserBoard::Relay1Off()
{
	PORTD.DIRSET = PIN0_bm;
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	80 93 61 06 	sts	0x0661, r24
     5f8:	08 95       	ret

000005fa <_ZN11CLaserBoard9Relay2OffEv>:
}

void CLaserBoard::Relay2Off()
{
	PORTD.DIRSET = PIN4_bm;
     5fa:	80 e1       	ldi	r24, 0x10	; 16
     5fc:	80 93 61 06 	sts	0x0661, r24
     600:	08 95       	ret

00000602 <_ZN11CLaserBoard4BeepEv>:
}

void CLaserBoard::Beep()
{
	cli();
     602:	f8 94       	cli
     604:	84 e6       	ldi	r24, 0x64	; 100
     606:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 100; i++)
	{
		PORTE.OUTSET = PIN3_bm;
     608:	e0 e8       	ldi	r30, 0x80	; 128
     60a:	f6 e0       	ldi	r31, 0x06	; 6
     60c:	28 e0       	ldi	r18, 0x08	; 8
     60e:	25 83       	std	Z+5, r18	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     610:	af e9       	ldi	r26, 0x9F	; 159
     612:	bf e0       	ldi	r27, 0x0F	; 15
     614:	11 97       	sbiw	r26, 0x01	; 1
     616:	f1 f7       	brne	.-4      	; 0x614 <_ZN11CLaserBoard4BeepEv+0x12>
     618:	00 c0       	rjmp	.+0      	; 0x61a <_ZN11CLaserBoard4BeepEv+0x18>
     61a:	00 00       	nop
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
     61c:	26 83       	std	Z+6, r18	; 0x06
     61e:	af e9       	ldi	r26, 0x9F	; 159
     620:	bf e0       	ldi	r27, 0x0F	; 15
     622:	11 97       	sbiw	r26, 0x01	; 1
     624:	f1 f7       	brne	.-4      	; 0x622 <_ZN11CLaserBoard4BeepEv+0x20>
     626:	00 c0       	rjmp	.+0      	; 0x628 <_ZN11CLaserBoard4BeepEv+0x26>
     628:	00 00       	nop
     62a:	01 97       	sbiw	r24, 0x01	; 1

void CLaserBoard::Beep()
{
	cli();
	
	for (int i = 0; i < 100; i++)
     62c:	81 f7       	brne	.-32     	; 0x60e <_ZN11CLaserBoard4BeepEv+0xc>
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
		_delay_us(500);
	}
	
	sei();
     62e:	78 94       	sei
     630:	08 95       	ret

00000632 <_ZN11CLaserBoard14BeepClassErrorEv>:
}

void CLaserBoard::BeepClassError()
{
	cli();
     632:	f8 94       	cli
     634:	45 e0       	ldi	r20, 0x05	; 5
     636:	50 e0       	ldi	r21, 0x00	; 0
	
	sei();
}

void CLaserBoard::BeepClassError()
{
     638:	64 e6       	ldi	r22, 0x64	; 100
     63a:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
		{
			PORTE.OUTSET = PIN3_bm;
     63c:	e0 e8       	ldi	r30, 0x80	; 128
     63e:	f6 e0       	ldi	r31, 0x06	; 6
     640:	28 e0       	ldi	r18, 0x08	; 8
     642:	1c c0       	rjmp	.+56     	; 0x67c <_ZN11CLaserBoard14BeepClassErrorEv+0x4a>
     644:	25 83       	std	Z+5, r18	; 0x05
     646:	af e9       	ldi	r26, 0x9F	; 159
     648:	bf e0       	ldi	r27, 0x0F	; 15
     64a:	11 97       	sbiw	r26, 0x01	; 1
     64c:	f1 f7       	brne	.-4      	; 0x64a <_ZN11CLaserBoard14BeepClassErrorEv+0x18>
     64e:	00 c0       	rjmp	.+0      	; 0x650 <_ZN11CLaserBoard14BeepClassErrorEv+0x1e>
     650:	00 00       	nop
			_delay_us(500);
			PORTE.OUTCLR = PIN3_bm;
     652:	26 83       	std	Z+6, r18	; 0x06
     654:	af e9       	ldi	r26, 0x9F	; 159
     656:	bf e0       	ldi	r27, 0x0F	; 15
     658:	11 97       	sbiw	r26, 0x01	; 1
     65a:	f1 f7       	brne	.-4      	; 0x658 <_ZN11CLaserBoard14BeepClassErrorEv+0x26>
     65c:	00 c0       	rjmp	.+0      	; 0x65e <_ZN11CLaserBoard14BeepClassErrorEv+0x2c>
     65e:	00 00       	nop
     660:	01 97       	sbiw	r24, 0x01	; 1
{
	cli();
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
     662:	81 f7       	brne	.-32     	; 0x644 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     664:	bf ef       	ldi	r27, 0xFF	; 255
     666:	73 ec       	ldi	r23, 0xC3	; 195
     668:	89 e0       	ldi	r24, 0x09	; 9
     66a:	b1 50       	subi	r27, 0x01	; 1
     66c:	70 40       	sbci	r23, 0x00	; 0
     66e:	80 40       	sbci	r24, 0x00	; 0
     670:	e1 f7       	brne	.-8      	; 0x66a <_ZN11CLaserBoard14BeepClassErrorEv+0x38>
     672:	00 c0       	rjmp	.+0      	; 0x674 <_ZN11CLaserBoard14BeepClassErrorEv+0x42>
     674:	00 00       	nop
     676:	41 50       	subi	r20, 0x01	; 1
     678:	51 09       	sbc	r21, r1

void CLaserBoard::BeepClassError()
{
	cli();
	
	for (int j = 0; j < 5; j++)
     67a:	19 f0       	breq	.+6      	; 0x682 <_ZN11CLaserBoard14BeepClassErrorEv+0x50>
	
	sei();
}

void CLaserBoard::BeepClassError()
{
     67c:	86 2f       	mov	r24, r22
     67e:	93 2f       	mov	r25, r19
     680:	e1 cf       	rjmp	.-62     	; 0x644 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
			_delay_us(500);
		}
		_delay_ms(100);
	}
	
	sei();
     682:	78 94       	sei
     684:	08 95       	ret

00000686 <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
{
} //~CLaserControlApp

// CMBEventsHandler
void CLaserControlApp::OnTransactionCallback(uint8_t* data, uint16_t length)
{
     686:	08 95       	ret

00000688 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
			CLaserBoard::Beep();
	}
}

void CLaserControlApp::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
     688:	dc 01       	movw	r26, r24
	// Update GUI registers
	if (addr == 0x03)	PIC_ID = data[1];
     68a:	63 30       	cpi	r22, 0x03	; 3
     68c:	29 f4       	brne	.+10     	; 0x698 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x10>
     68e:	fa 01       	movw	r30, r20
     690:	81 81       	ldd	r24, Z+1	; 0x01
     692:	1d 96       	adiw	r26, 0x0d	; 13
     694:	8c 93       	st	X, r24
     696:	1d 97       	sbiw	r26, 0x0d	; 13
	
	switch (PIC_ID)
     698:	1d 96       	adiw	r26, 0x0d	; 13
     69a:	4c 91       	ld	r20, X
     69c:	1d 97       	sbiw	r26, 0x0d	; 13
     69e:	50 e0       	ldi	r21, 0x00	; 0
     6a0:	4c 30       	cpi	r20, 0x0C	; 12
     6a2:	51 05       	cpc	r21, r1
     6a4:	08 f5       	brcc	.+66     	; 0x6e8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x60>
     6a6:	fa 01       	movw	r30, r20
     6a8:	88 27       	eor	r24, r24
     6aa:	ec 50       	subi	r30, 0x0C	; 12
     6ac:	ff 4f       	sbci	r31, 0xFF	; 255
     6ae:	8f 4f       	sbci	r24, 0xFF	; 255
     6b0:	0c 94 62 22 	jmp	0x44c4	; 0x44c4 <__tablejump2__>
	{
		case PICID_LOGO:
			state = APP_LOGO;
     6b4:	1c 96       	adiw	r26, 0x0c	; 12
     6b6:	1c 92       	st	X, r1
		break;
     6b8:	08 95       	ret
		case PICID_SETUP:
			state = APP_SETUP;
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	1c 96       	adiw	r26, 0x0c	; 12
     6be:	8c 93       	st	X, r24
		break;
     6c0:	08 95       	ret
		case PICID_TIMER:
			state = APP_RUN;
     6c2:	83 e0       	ldi	r24, 0x03	; 3
     6c4:	1c 96       	adiw	r26, 0x0c	; 12
     6c6:	8c 93       	st	X, r24
		break;
     6c8:	08 95       	ret
		case PICID_OnStart:
			state = APP_OnTimerStart;
     6ca:	84 e0       	ldi	r24, 0x04	; 4
     6cc:	1c 96       	adiw	r26, 0x0c	; 12
     6ce:	8c 93       	st	X, r24
		break;
     6d0:	08 95       	ret
		case PICID_OnRestart:
			state = APP_OnTimerRestart;
     6d2:	86 e0       	ldi	r24, 0x06	; 6
     6d4:	1c 96       	adiw	r26, 0x0c	; 12
     6d6:	8c 93       	st	X, r24
		break;
     6d8:	08 95       	ret
		case PICID_OnStop:
			state = APP_OnTimerStop;
     6da:	85 e0       	ldi	r24, 0x05	; 5
     6dc:	1c 96       	adiw	r26, 0x0c	; 12
     6de:	8c 93       	st	X, r24
		break;
     6e0:	08 95       	ret
		case PICID_OnH_L:
			state = APP_OnHL;
     6e2:	87 e0       	ldi	r24, 0x07	; 7
     6e4:	1c 96       	adiw	r26, 0x0c	; 12
     6e6:	8c 93       	st	X, r24
     6e8:	08 95       	ret

000006ea <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:
extern CSoundPlayer player;
extern CDGUSDatabase Database;

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
     6ea:	da 01       	movw	r26, r20
     6ec:	ed 91       	ld	r30, X+
     6ee:	fc 91       	ld	r31, X
     6f0:	fe 27       	eor	r31, r30
     6f2:	ef 27       	eor	r30, r31
     6f4:	fe 27       	eor	r31, r30

void CLaserControlApp::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
	// Update GUI variables	
	uint16_t val = swap(*((uint16_t*)data));
	switch (addr)
     6f6:	64 30       	cpi	r22, 0x04	; 4
     6f8:	71 05       	cpc	r23, r1
     6fa:	50 f4       	brcc	.+20     	; 0x710 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x26>
     6fc:	62 30       	cpi	r22, 0x02	; 2
     6fe:	71 05       	cpc	r23, r1
     700:	40 f5       	brcc	.+80     	; 0x752 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x68>
     702:	61 15       	cp	r22, r1
     704:	71 05       	cpc	r23, r1
     706:	41 f0       	breq	.+16     	; 0x718 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x2e>
     708:	61 30       	cpi	r22, 0x01	; 1
     70a:	71 05       	cpc	r23, r1
     70c:	79 f0       	breq	.+30     	; 0x72c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x42>
     70e:	1f c0       	rjmp	.+62     	; 0x74e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x64>
     710:	61 15       	cp	r22, r1
     712:	71 40       	sbci	r23, 0x01	; 1
     714:	a9 f0       	breq	.+42     	; 0x740 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x56>
     716:	1b c0       	rjmp	.+54     	; 0x74e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x64>
	{
		case VARIABLE_ADDR_MIN:
			m_wSetMin = val;
     718:	dc 01       	movw	r26, r24
     71a:	54 96       	adiw	r26, 0x14	; 20
     71c:	ed 93       	st	X+, r30
     71e:	fc 93       	st	X, r31
     720:	55 97       	sbiw	r26, 0x15	; 21
			m_wMinutes = val;
     722:	1e 96       	adiw	r26, 0x0e	; 14
     724:	ed 93       	st	X+, r30
     726:	fc 93       	st	X, r31
     728:	1f 97       	sbiw	r26, 0x0f	; 15
		break;
     72a:	08 95       	ret
		case VARIABLE_ADDR_SEC:
			m_wSetSec = val;
     72c:	dc 01       	movw	r26, r24
     72e:	56 96       	adiw	r26, 0x16	; 22
     730:	ed 93       	st	X+, r30
     732:	fc 93       	st	X, r31
     734:	57 97       	sbiw	r26, 0x17	; 23
			m_wSeconds = val;
     736:	50 96       	adiw	r26, 0x10	; 16
     738:	ed 93       	st	X+, r30
     73a:	fc 93       	st	X, r31
     73c:	51 97       	sbiw	r26, 0x11	; 17
		break;
     73e:	08 95       	ret
		break;
		case VARIABLE_ADDR_PWR:
			// Not used
		break;
		case VARIABLE_ADDR_DATABASE:
			Database.OnVariableReceived(addr, data, length);
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	71 e0       	ldi	r23, 0x01	; 1
     744:	8f ed       	ldi	r24, 0xDF	; 223
     746:	92 e2       	ldi	r25, 0x22	; 34
     748:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_ZN13CDGUSDatabase18OnVariableReceivedEjPjj>
		break;
     74c:	08 95       	ret
		default:
			// Error
			CLaserBoard::Beep();
     74e:	0e 94 01 03 	call	0x602	; 0x602 <_ZN11CLaserBoard4BeepEv>
     752:	08 95       	ret

00000754 <_ZN16CLaserControlAppC1Ev>:
	else
		return y;
}

// default constructor
CLaserControlApp::CLaserControlApp()
     754:	25 e6       	ldi	r18, 0x65	; 101
     756:	30 e2       	ldi	r19, 0x20	; 32
     758:	fc 01       	movw	r30, r24
     75a:	20 83       	st	Z, r18
     75c:	31 83       	std	Z+1, r19	; 0x01
     75e:	08 95       	ret

00000760 <_ZN16CLaserControlAppD1Ev>:
{
} //CLaserControlApp

// default destructor
CLaserControlApp::~CLaserControlApp()
     760:	25 e6       	ldi	r18, 0x65	; 101
     762:	30 e2       	ldi	r19, 0x20	; 32
     764:	fc 01       	movw	r30, r24
     766:	20 83       	st	Z, r18
     768:	31 83       	std	Z+1, r19	; 0x01
     76a:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN16CMBEventsHandlerD1Ev>
     76e:	08 95       	ret

00000770 <_ZN16CLaserControlApp5StartEv>:
	m_wSeconds = m_wSetSec;
	m_wPower = 0;
}

void CLaserControlApp::Start()
{	
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	cd b7       	in	r28, 0x3d	; 61
     77a:	de b7       	in	r29, 0x3e	; 62
     77c:	28 97       	sbiw	r28, 0x08	; 8
     77e:	cd bf       	out	0x3d, r28	; 61
     780:	de bf       	out	0x3e, r29	; 62
     782:	8c 01       	movw	r16, r24
	// Startup DGUS initialization
	uint16_t pic_id = swap(1);
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	8f 83       	std	Y+7, r24	; 0x07
     78a:	98 87       	std	Y+8, r25	; 0x08
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     78c:	22 e0       	ldi	r18, 0x02	; 2
     78e:	ae 01       	movw	r20, r28
     790:	49 5f       	subi	r20, 0xF9	; 249
     792:	5f 4f       	sbci	r21, 0xFF	; 255
     794:	63 e0       	ldi	r22, 0x03	; 3
     796:	f8 01       	movw	r30, r16
     798:	82 8d       	ldd	r24, Z+26	; 0x1a
     79a:	93 8d       	ldd	r25, Z+27	; 0x1b
     79c:	0e 94 b5 21 	call	0x436a	; 0x436a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     7a0:	f8 01       	movw	r30, r16
     7a2:	82 8d       	ldd	r24, Z+26	; 0x1a
     7a4:	93 8d       	ldd	r25, Z+27	; 0x1b
     7a6:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	//Setup variables
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MIN, (uint16_t*)&m_wSetMin, 2);
     7aa:	a8 01       	movw	r20, r16
     7ac:	4c 5e       	subi	r20, 0xEC	; 236
     7ae:	5f 4f       	sbci	r21, 0xFF	; 255
     7b0:	22 e0       	ldi	r18, 0x02	; 2
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	60 e0       	ldi	r22, 0x00	; 0
     7b6:	70 e0       	ldi	r23, 0x00	; 0
     7b8:	f8 01       	movw	r30, r16
     7ba:	82 8d       	ldd	r24, Z+26	; 0x1a
     7bc:	93 8d       	ldd	r25, Z+27	; 0x1b
     7be:	0e 94 c4 21 	call	0x4388	; 0x4388 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     7c2:	f8 01       	movw	r30, r16
     7c4:	82 8d       	ldd	r24, Z+26	; 0x1a
     7c6:	93 8d       	ldd	r25, Z+27	; 0x1b
     7c8:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_SEC, (uint16_t*)&m_wSetSec, 2);
     7cc:	a8 01       	movw	r20, r16
     7ce:	4a 5e       	subi	r20, 0xEA	; 234
     7d0:	5f 4f       	sbci	r21, 0xFF	; 255
     7d2:	22 e0       	ldi	r18, 0x02	; 2
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	61 e0       	ldi	r22, 0x01	; 1
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	f8 01       	movw	r30, r16
     7dc:	82 8d       	ldd	r24, Z+26	; 0x1a
     7de:	93 8d       	ldd	r25, Z+27	; 0x1b
     7e0:	0e 94 c4 21 	call	0x4388	; 0x4388 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     7e4:	f8 01       	movw	r30, r16
     7e6:	82 8d       	ldd	r24, Z+26	; 0x1a
     7e8:	93 8d       	ldd	r25, Z+27	; 0x1b
     7ea:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MSC, (uint16_t*)&m_wMillSec, 2);
     7ee:	a8 01       	movw	r20, r16
     7f0:	4e 5e       	subi	r20, 0xEE	; 238
     7f2:	5f 4f       	sbci	r21, 0xFF	; 255
     7f4:	22 e0       	ldi	r18, 0x02	; 2
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	62 e0       	ldi	r22, 0x02	; 2
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	f8 01       	movw	r30, r16
     7fe:	82 8d       	ldd	r24, Z+26	; 0x1a
     800:	93 8d       	ldd	r25, Z+27	; 0x1b
     802:	0e 94 c4 21 	call	0x4388	; 0x4388 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     806:	f8 01       	movw	r30, r16
     808:	82 8d       	ldd	r24, Z+26	; 0x1a
     80a:	93 8d       	ldd	r25, Z+27	; 0x1b
     80c:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_PWR, (uint16_t*)&m_wPower, 2);
     810:	a8 01       	movw	r20, r16
     812:	48 5e       	subi	r20, 0xE8	; 232
     814:	5f 4f       	sbci	r21, 0xFF	; 255
     816:	22 e0       	ldi	r18, 0x02	; 2
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	63 e0       	ldi	r22, 0x03	; 3
     81c:	70 e0       	ldi	r23, 0x00	; 0
     81e:	f8 01       	movw	r30, r16
     820:	82 8d       	ldd	r24, Z+26	; 0x1a
     822:	93 8d       	ldd	r25, Z+27	; 0x1b
     824:	0e 94 c4 21 	call	0x4388	; 0x4388 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     828:	f8 01       	movw	r30, r16
     82a:	82 8d       	ldd	r24, Z+26	; 0x1a
     82c:	93 8d       	ldd	r25, Z+27	; 0x1b
     82e:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	uint16_t bar = 0;
	uint16_t bar1 = min(bar, 12);
     832:	1d 82       	std	Y+5, r1	; 0x05
     834:	1e 82       	std	Y+6, r1	; 0x06
	uint16_t bar2 = min(max(bar, 11), 24);
     836:	8b e0       	ldi	r24, 0x0B	; 11
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	8b 83       	std	Y+3, r24	; 0x03
     83c:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t bar3 = max(bar, 23);
     83e:	87 e1       	ldi	r24, 0x17	; 23
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	89 83       	std	Y+1, r24	; 0x01
     844:	9a 83       	std	Y+2, r25	; 0x02
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR1, (uint16_t*)&bar1, 2);
     846:	22 e0       	ldi	r18, 0x02	; 2
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	ae 01       	movw	r20, r28
     84c:	4b 5f       	subi	r20, 0xFB	; 251
     84e:	5f 4f       	sbci	r21, 0xFF	; 255
     850:	64 e0       	ldi	r22, 0x04	; 4
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	f8 01       	movw	r30, r16
     856:	82 8d       	ldd	r24, Z+26	; 0x1a
     858:	93 8d       	ldd	r25, Z+27	; 0x1b
     85a:	0e 94 c4 21 	call	0x4388	; 0x4388 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     85e:	f8 01       	movw	r30, r16
     860:	82 8d       	ldd	r24, Z+26	; 0x1a
     862:	93 8d       	ldd	r25, Z+27	; 0x1b
     864:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR2, (uint16_t*)&bar2, 2);
     868:	22 e0       	ldi	r18, 0x02	; 2
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	ae 01       	movw	r20, r28
     86e:	4d 5f       	subi	r20, 0xFD	; 253
     870:	5f 4f       	sbci	r21, 0xFF	; 255
     872:	65 e0       	ldi	r22, 0x05	; 5
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	f8 01       	movw	r30, r16
     878:	82 8d       	ldd	r24, Z+26	; 0x1a
     87a:	93 8d       	ldd	r25, Z+27	; 0x1b
     87c:	0e 94 c4 21 	call	0x4388	; 0x4388 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     880:	f8 01       	movw	r30, r16
     882:	82 8d       	ldd	r24, Z+26	; 0x1a
     884:	93 8d       	ldd	r25, Z+27	; 0x1b
     886:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR3, (uint16_t*)&bar3, 2);
     88a:	22 e0       	ldi	r18, 0x02	; 2
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	ae 01       	movw	r20, r28
     890:	4f 5f       	subi	r20, 0xFF	; 255
     892:	5f 4f       	sbci	r21, 0xFF	; 255
     894:	66 e0       	ldi	r22, 0x06	; 6
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	f8 01       	movw	r30, r16
     89a:	82 8d       	ldd	r24, Z+26	; 0x1a
     89c:	93 8d       	ldd	r25, Z+27	; 0x1b
     89e:	0e 94 c4 21 	call	0x4388	; 0x4388 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     8a2:	f8 01       	movw	r30, r16
     8a4:	82 8d       	ldd	r24, Z+26	; 0x1a
     8a6:	93 8d       	ldd	r25, Z+27	; 0x1b
     8a8:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	state = APP_SETUP;
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	f8 01       	movw	r30, r16
     8b0:	84 87       	std	Z+12, r24	; 0x0c
}
     8b2:	28 96       	adiw	r28, 0x08	; 8
     8b4:	cd bf       	out	0x3d, r28	; 61
     8b6:	de bf       	out	0x3e, r29	; 62
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	08 95       	ret

000008c2 <_GLOBAL__sub_I_timer>:

#include "CLaserControlApp.h"
#include "CSoundPlayer.h"
#include <util/delay.h>

CTimerC timer;
     8c2:	8e ee       	ldi	r24, 0xEE	; 238
     8c4:	90 e2       	ldi	r25, 0x20	; 32
     8c6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <_ZN7CTimerCC1Ev>
     8ca:	08 95       	ret

000008cc <_GLOBAL__sub_D_timer>:
     8cc:	8e ee       	ldi	r24, 0xEE	; 238
     8ce:	90 e2       	ldi	r25, 0x20	; 32
     8d0:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN7CTimerCD1Ev>
     8d4:	08 95       	ret

000008d6 <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	ec 01       	movw	r28, r24
	// GUI class initialization
	m_cpSender = sender;
     8dc:	6a 8f       	std	Y+26, r22	; 0x1a
     8de:	7b 8f       	std	Y+27, r23	; 0x1b
	timer.Initialize(WGM_Normal, CS_DIV256);
     8e0:	46 e0       	ldi	r20, 0x06	; 6
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	8e ee       	ldi	r24, 0xEE	; 238
     8e6:	90 e2       	ldi	r25, 0x20	; 32
     8e8:	0e 94 9b 09 	call	0x1336	; 0x1336 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timer.SetPeriod(25000); // Every 10 ms
     8ec:	68 ea       	ldi	r22, 0xA8	; 168
     8ee:	71 e6       	ldi	r23, 0x61	; 97
     8f0:	8e ee       	ldi	r24, 0xEE	; 238
     8f2:	90 e2       	ldi	r25, 0x20	; 32
     8f4:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <_ZN7CTimerC9SetPeriodEj>
	timer.SetOVFCallback(OnTimerStatic, this, TC_OVFINTLVL_LO_gc); // Enable interrupt
     8f8:	21 e0       	ldi	r18, 0x01	; 1
     8fa:	ae 01       	movw	r20, r28
     8fc:	65 e0       	ldi	r22, 0x05	; 5
     8fe:	77 e0       	ldi	r23, 0x07	; 7
     900:	8e ee       	ldi	r24, 0xEE	; 238
     902:	90 e2       	ldi	r25, 0x20	; 32
     904:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	
	// Set global variables
	PIC_ID = 0;
     908:	1d 86       	std	Y+13, r1	; 0x0d
	m_wSetMin = 1;
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	8c 8b       	std	Y+20, r24	; 0x14
     910:	9d 8b       	std	Y+21, r25	; 0x15
	m_wSetSec = 30;
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	8e 8b       	std	Y+22, r24	; 0x16
     918:	9f 8b       	std	Y+23, r25	; 0x17
	m_wMillSec = 0;
     91a:	1a 8a       	std	Y+18, r1	; 0x12
     91c:	1b 8a       	std	Y+19, r1	; 0x13
	m_wMinutes = m_wSetMin;
     91e:	8c 89       	ldd	r24, Y+20	; 0x14
     920:	9d 89       	ldd	r25, Y+21	; 0x15
     922:	8e 87       	std	Y+14, r24	; 0x0e
     924:	9f 87       	std	Y+15, r25	; 0x0f
	m_wSeconds = m_wSetSec;
     926:	8e 89       	ldd	r24, Y+22	; 0x16
     928:	9f 89       	ldd	r25, Y+23	; 0x17
     92a:	88 8b       	std	Y+16, r24	; 0x10
     92c:	99 8b       	std	Y+17, r25	; 0x11
	m_wPower = 0;
     92e:	18 8e       	std	Y+24, r1	; 0x18
     930:	19 8e       	std	Y+25, r1	; 0x19
}
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	08 95       	ret

00000938 <_ZN16CLaserControlApp3RunEv>:
	state = APP_SETUP;
}

// Process GUI
void CLaserControlApp::Run()
{
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	1f 92       	push	r1
     942:	1f 92       	push	r1
     944:	cd b7       	in	r28, 0x3d	; 61
     946:	de b7       	in	r29, 0x3e	; 62
     948:	8c 01       	movw	r16, r24
	// Get PIC ID
	m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
     94a:	42 e0       	ldi	r20, 0x02	; 2
     94c:	63 e0       	ldi	r22, 0x03	; 3
     94e:	fc 01       	movw	r30, r24
     950:	82 8d       	ldd	r24, Z+26	; 0x1a
     952:	93 8d       	ldd	r25, Z+27	; 0x1b
     954:	0e 94 03 22 	call	0x4406	; 0x4406 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
	m_cpSender->WaitMODBUSTransmitter();
     958:	f8 01       	movw	r30, r16
     95a:	82 8d       	ldd	r24, Z+26	; 0x1a
     95c:	93 8d       	ldd	r25, Z+27	; 0x1b
     95e:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WaitMODBUSListener();
     962:	f8 01       	movw	r30, r16
     964:	82 8d       	ldd	r24, Z+26	; 0x1a
     966:	93 8d       	ldd	r25, Z+27	; 0x1b
     968:	0e 94 9e 21 	call	0x433c	; 0x433c <_ZN9CMBSender18WaitMODBUSListenerEv>
     96c:	ff ef       	ldi	r31, 0xFF	; 255
     96e:	21 ee       	ldi	r18, 0xE1	; 225
     970:	84 e0       	ldi	r24, 0x04	; 4
     972:	f1 50       	subi	r31, 0x01	; 1
     974:	20 40       	sbci	r18, 0x00	; 0
     976:	80 40       	sbci	r24, 0x00	; 0
     978:	e1 f7       	brne	.-8      	; 0x972 <_ZN16CLaserControlApp3RunEv+0x3a>
     97a:	00 c0       	rjmp	.+0      	; 0x97c <_ZN16CLaserControlApp3RunEv+0x44>
     97c:	00 00       	nop
	static uint16_t bar = 0;
	uint16_t bar1 = 0;
	uint16_t bar2 = 0;
	uint16_t bar3 = 0;
	
	switch (state)
     97e:	f8 01       	movw	r30, r16
     980:	84 85       	ldd	r24, Z+12	; 0x0c
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	88 30       	cpi	r24, 0x08	; 8
     986:	91 05       	cpc	r25, r1
     988:	08 f0       	brcs	.+2      	; 0x98c <_ZN16CLaserControlApp3RunEv+0x54>
     98a:	b7 c1       	rjmp	.+878    	; 0xcfa <_ZN16CLaserControlApp3RunEv+0x3c2>
     98c:	fc 01       	movw	r30, r24
     98e:	88 27       	eor	r24, r24
     990:	e0 50       	subi	r30, 0x00	; 0
     992:	ff 4f       	sbci	r31, 0xFF	; 255
     994:	8f 4f       	sbci	r24, 0xFF	; 255
     996:	0c 94 62 22 	jmp	0x44c4	; 0x44c4 <__tablejump2__>
	{
		case APP_LOGO:
			Start(); // Start if logo
     99a:	c8 01       	movw	r24, r16
     99c:	0e 94 b8 03 	call	0x770	; 0x770 <_ZN16CLaserControlApp5StartEv>
		break;
     9a0:	ac c1       	rjmp	.+856    	; 0xcfa <_ZN16CLaserControlApp3RunEv+0x3c2>
		case APP_SETUP:
			// Get Variables
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_MIN, 2);
     9a2:	42 e0       	ldi	r20, 0x02	; 2
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	f8 01       	movw	r30, r16
     9aa:	82 8d       	ldd	r24, Z+26	; 0x1a
     9ac:	93 8d       	ldd	r25, Z+27	; 0x1b
     9ae:	0e 94 09 22 	call	0x4412	; 0x4412 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
			m_cpSender->WaitMODBUSTransmitter();
     9b2:	f8 01       	movw	r30, r16
     9b4:	82 8d       	ldd	r24, Z+26	; 0x1a
     9b6:	93 8d       	ldd	r25, Z+27	; 0x1b
     9b8:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSListener();
     9bc:	f8 01       	movw	r30, r16
     9be:	82 8d       	ldd	r24, Z+26	; 0x1a
     9c0:	93 8d       	ldd	r25, Z+27	; 0x1b
     9c2:	0e 94 9e 21 	call	0x433c	; 0x433c <_ZN9CMBSender18WaitMODBUSListenerEv>
     9c6:	ff ef       	ldi	r31, 0xFF	; 255
     9c8:	21 ee       	ldi	r18, 0xE1	; 225
     9ca:	84 e0       	ldi	r24, 0x04	; 4
     9cc:	f1 50       	subi	r31, 0x01	; 1
     9ce:	20 40       	sbci	r18, 0x00	; 0
     9d0:	80 40       	sbci	r24, 0x00	; 0
     9d2:	e1 f7       	brne	.-8      	; 0x9cc <_ZN16CLaserControlApp3RunEv+0x94>
     9d4:	00 c0       	rjmp	.+0      	; 0x9d6 <_ZN16CLaserControlApp3RunEv+0x9e>
     9d6:	00 00       	nop
			_delay_ms(50);
			
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_SEC, 2);
     9d8:	42 e0       	ldi	r20, 0x02	; 2
     9da:	61 e0       	ldi	r22, 0x01	; 1
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	f8 01       	movw	r30, r16
     9e0:	82 8d       	ldd	r24, Z+26	; 0x1a
     9e2:	93 8d       	ldd	r25, Z+27	; 0x1b
     9e4:	0e 94 09 22 	call	0x4412	; 0x4412 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
			m_cpSender->WaitMODBUSTransmitter();
     9e8:	f8 01       	movw	r30, r16
     9ea:	82 8d       	ldd	r24, Z+26	; 0x1a
     9ec:	93 8d       	ldd	r25, Z+27	; 0x1b
     9ee:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSListener();
     9f2:	f8 01       	movw	r30, r16
     9f4:	82 8d       	ldd	r24, Z+26	; 0x1a
     9f6:	93 8d       	ldd	r25, Z+27	; 0x1b
     9f8:	0e 94 9e 21 	call	0x433c	; 0x433c <_ZN9CMBSender18WaitMODBUSListenerEv>
     9fc:	ff ef       	ldi	r31, 0xFF	; 255
     9fe:	21 ee       	ldi	r18, 0xE1	; 225
     a00:	84 e0       	ldi	r24, 0x04	; 4
     a02:	f1 50       	subi	r31, 0x01	; 1
     a04:	20 40       	sbci	r18, 0x00	; 0
     a06:	80 40       	sbci	r24, 0x00	; 0
     a08:	e1 f7       	brne	.-8      	; 0xa02 <_ZN16CLaserControlApp3RunEv+0xca>
     a0a:	00 c0       	rjmp	.+0      	; 0xa0c <_ZN16CLaserControlApp3RunEv+0xd4>
     a0c:	00 00       	nop
     a0e:	75 c1       	rjmp	.+746    	; 0xcfa <_ZN16CLaserControlApp3RunEv+0x3c2>
			_delay_ms(50);
		break;
		case APP_SETUPtoRUN_ANIM:
			// Play animation
			anim++;
     a10:	80 91 47 20 	lds	r24, 0x2047
     a14:	90 91 48 20 	lds	r25, 0x2048
     a18:	01 96       	adiw	r24, 0x01	; 1
			if (anim > 9) {
     a1a:	8a 30       	cpi	r24, 0x0A	; 10
     a1c:	91 05       	cpc	r25, r1
     a1e:	28 f4       	brcc	.+10     	; 0xa2a <_ZN16CLaserControlApp3RunEv+0xf2>
			m_cpSender->WaitMODBUSListener();
			_delay_ms(50);
		break;
		case APP_SETUPtoRUN_ANIM:
			// Play animation
			anim++;
     a20:	80 93 47 20 	sts	0x2047, r24
     a24:	90 93 48 20 	sts	0x2048, r25
     a28:	09 c0       	rjmp	.+18     	; 0xa3c <_ZN16CLaserControlApp3RunEv+0x104>
			if (anim > 9) {
				anim = 9;
     a2a:	89 e0       	ldi	r24, 0x09	; 9
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	80 93 47 20 	sts	0x2047, r24
     a32:	90 93 48 20 	sts	0x2048, r25
				state = APP_RUN;
     a36:	83 e0       	ldi	r24, 0x03	; 3
     a38:	f8 01       	movw	r30, r16
     a3a:	84 87       	std	Z+12, r24	; 0x0c
extern CSoundPlayer player;
extern CDGUSDatabase Database;

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
     a3c:	80 91 47 20 	lds	r24, 0x2047
     a40:	90 91 48 20 	lds	r25, 0x2048
     a44:	98 27       	eor	r25, r24
     a46:	89 27       	eor	r24, r25
     a48:	98 27       	eor	r25, r24
			anim++;
			if (anim > 9) {
				anim = 9;
				state = APP_RUN;
			}
			pic_id = swap(anim);
     a4a:	89 83       	std	Y+1, r24	; 0x01
     a4c:	9a 83       	std	Y+2, r25	; 0x02
			
			// Timer setup to timer run animation
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     a4e:	22 e0       	ldi	r18, 0x02	; 2
     a50:	ae 01       	movw	r20, r28
     a52:	4f 5f       	subi	r20, 0xFF	; 255
     a54:	5f 4f       	sbci	r21, 0xFF	; 255
     a56:	63 e0       	ldi	r22, 0x03	; 3
     a58:	f8 01       	movw	r30, r16
     a5a:	82 8d       	ldd	r24, Z+26	; 0x1a
     a5c:	93 8d       	ldd	r25, Z+27	; 0x1b
     a5e:	0e 94 b5 21 	call	0x436a	; 0x436a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     a62:	f8 01       	movw	r30, r16
     a64:	82 8d       	ldd	r24, Z+26	; 0x1a
     a66:	93 8d       	ldd	r25, Z+27	; 0x1b
     a68:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		break;
     a6c:	46 c1       	rjmp	.+652    	; 0xcfa <_ZN16CLaserControlApp3RunEv+0x3c2>
		case APP_RUN:
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MIN, (uint16_t*)&m_wMinutes, 2);
     a6e:	a8 01       	movw	r20, r16
     a70:	42 5f       	subi	r20, 0xF2	; 242
     a72:	5f 4f       	sbci	r21, 0xFF	; 255
     a74:	22 e0       	ldi	r18, 0x02	; 2
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	f8 01       	movw	r30, r16
     a7e:	82 8d       	ldd	r24, Z+26	; 0x1a
     a80:	93 8d       	ldd	r25, Z+27	; 0x1b
     a82:	0e 94 c4 21 	call	0x4388	; 0x4388 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     a86:	f8 01       	movw	r30, r16
     a88:	82 8d       	ldd	r24, Z+26	; 0x1a
     a8a:	93 8d       	ldd	r25, Z+27	; 0x1b
     a8c:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_SEC, (uint16_t*)&m_wSeconds, 2);
     a90:	a8 01       	movw	r20, r16
     a92:	40 5f       	subi	r20, 0xF0	; 240
     a94:	5f 4f       	sbci	r21, 0xFF	; 255
     a96:	22 e0       	ldi	r18, 0x02	; 2
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	61 e0       	ldi	r22, 0x01	; 1
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	f8 01       	movw	r30, r16
     aa0:	82 8d       	ldd	r24, Z+26	; 0x1a
     aa2:	93 8d       	ldd	r25, Z+27	; 0x1b
     aa4:	0e 94 c4 21 	call	0x4388	; 0x4388 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     aa8:	f8 01       	movw	r30, r16
     aaa:	82 8d       	ldd	r24, Z+26	; 0x1a
     aac:	93 8d       	ldd	r25, Z+27	; 0x1b
     aae:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MSC, (uint16_t*)&m_wMillSec, 2);
     ab2:	a8 01       	movw	r20, r16
     ab4:	4e 5e       	subi	r20, 0xEE	; 238
     ab6:	5f 4f       	sbci	r21, 0xFF	; 255
     ab8:	22 e0       	ldi	r18, 0x02	; 2
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	62 e0       	ldi	r22, 0x02	; 2
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	f8 01       	movw	r30, r16
     ac2:	82 8d       	ldd	r24, Z+26	; 0x1a
     ac4:	93 8d       	ldd	r25, Z+27	; 0x1b
     ac6:	0e 94 c4 21 	call	0x4388	; 0x4388 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     aca:	f8 01       	movw	r30, r16
     acc:	82 8d       	ldd	r24, Z+26	; 0x1a
     ace:	93 8d       	ldd	r25, Z+27	; 0x1b
     ad0:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSTransmitter();
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR2, (uint16_t*)&bar2, 2);
			m_cpSender->WaitMODBUSTransmitter();
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR3, (uint16_t*)&bar3, 2);
			m_cpSender->WaitMODBUSTransmitter();*/
		break;
     ad4:	12 c1       	rjmp	.+548    	; 0xcfa <_ZN16CLaserControlApp3RunEv+0x3c2>
		case APP_OnTimerStart:
			// Set Run state
			anim = 5;
     ad6:	85 e0       	ldi	r24, 0x05	; 5
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	80 93 47 20 	sts	0x2047, r24
     ade:	90 93 48 20 	sts	0x2048, r25
			pic_id = swap(PICID_TIMER);
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	99 e0       	ldi	r25, 0x09	; 9
     ae6:	89 83       	std	Y+1, r24	; 0x01
     ae8:	9a 83       	std	Y+2, r25	; 0x02
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     aea:	22 e0       	ldi	r18, 0x02	; 2
     aec:	ae 01       	movw	r20, r28
     aee:	4f 5f       	subi	r20, 0xFF	; 255
     af0:	5f 4f       	sbci	r21, 0xFF	; 255
     af2:	63 e0       	ldi	r22, 0x03	; 3
     af4:	f8 01       	movw	r30, r16
     af6:	82 8d       	ldd	r24, Z+26	; 0x1a
     af8:	93 8d       	ldd	r25, Z+27	; 0x1b
     afa:	0e 94 b5 21 	call	0x436a	; 0x436a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     afe:	f8 01       	movw	r30, r16
     b00:	82 8d       	ldd	r24, Z+26	; 0x1a
     b02:	93 8d       	ldd	r25, Z+27	; 0x1b
     b04:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			m_wMinutes = m_wSetMin;
     b08:	f8 01       	movw	r30, r16
     b0a:	84 89       	ldd	r24, Z+20	; 0x14
     b0c:	95 89       	ldd	r25, Z+21	; 0x15
     b0e:	86 87       	std	Z+14, r24	; 0x0e
     b10:	97 87       	std	Z+15, r25	; 0x0f
			m_wSeconds = m_wSetSec;
     b12:	86 89       	ldd	r24, Z+22	; 0x16
     b14:	97 89       	ldd	r25, Z+23	; 0x17
     b16:	80 8b       	std	Z+16, r24	; 0x10
     b18:	91 8b       	std	Z+17, r25	; 0x11
			m_wMillSec = 0;
     b1a:	12 8a       	std	Z+18, r1	; 0x12
     b1c:	13 8a       	std	Z+19, r1	; 0x13
			
			// Start timer
			timer.Start(25000);
     b1e:	68 ea       	ldi	r22, 0xA8	; 168
     b20:	71 e6       	ldi	r23, 0x61	; 97
     b22:	8e ee       	ldi	r24, 0xEE	; 238
     b24:	90 e2       	ldi	r25, 0x20	; 32
     b26:	0e 94 b6 09 	call	0x136c	; 0x136c <_ZN7CTimerC5StartEj>
			laserBoard.Relay1On();
     b2a:	84 e0       	ldi	r24, 0x04	; 4
     b2c:	93 e2       	ldi	r25, 0x23	; 35
     b2e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_ZN11CLaserBoard8Relay1OnEv>
			
			state = APP_RUN;
     b32:	83 e0       	ldi	r24, 0x03	; 3
     b34:	f8 01       	movw	r30, r16
     b36:	84 87       	std	Z+12, r24	; 0x0c
		break;
     b38:	e0 c0       	rjmp	.+448    	; 0xcfa <_ZN16CLaserControlApp3RunEv+0x3c2>
		case APP_OnTimerStop:
			// Set Stop (return to Setup) state
			pic_id = swap(PICID_SETUP);
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	89 83       	std	Y+1, r24	; 0x01
     b40:	9a 83       	std	Y+2, r25	; 0x02
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     b42:	22 e0       	ldi	r18, 0x02	; 2
     b44:	ae 01       	movw	r20, r28
     b46:	4f 5f       	subi	r20, 0xFF	; 255
     b48:	5f 4f       	sbci	r21, 0xFF	; 255
     b4a:	63 e0       	ldi	r22, 0x03	; 3
     b4c:	f8 01       	movw	r30, r16
     b4e:	82 8d       	ldd	r24, Z+26	; 0x1a
     b50:	93 8d       	ldd	r25, Z+27	; 0x1b
     b52:	0e 94 b5 21 	call	0x436a	; 0x436a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     b56:	f8 01       	movw	r30, r16
     b58:	82 8d       	ldd	r24, Z+26	; 0x1a
     b5a:	93 8d       	ldd	r25, Z+27	; 0x1b
     b5c:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			// Stop timer
			timer.Stop();
     b60:	8e ee       	ldi	r24, 0xEE	; 238
     b62:	90 e2       	ldi	r25, 0x20	; 32
     b64:	0e 94 c3 09 	call	0x1386	; 0x1386 <_ZN7CTimerC4StopEv>
			laserBoard.Relay1Off();
     b68:	84 e0       	ldi	r24, 0x04	; 4
     b6a:	93 e2       	ldi	r25, 0x23	; 35
     b6c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_ZN11CLaserBoard9Relay1OffEv>
			
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MIN, (uint16_t*)&m_wSetMin, 2);
     b70:	a8 01       	movw	r20, r16
     b72:	4c 5e       	subi	r20, 0xEC	; 236
     b74:	5f 4f       	sbci	r21, 0xFF	; 255
     b76:	22 e0       	ldi	r18, 0x02	; 2
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	f8 01       	movw	r30, r16
     b80:	82 8d       	ldd	r24, Z+26	; 0x1a
     b82:	93 8d       	ldd	r25, Z+27	; 0x1b
     b84:	0e 94 c4 21 	call	0x4388	; 0x4388 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     b88:	f8 01       	movw	r30, r16
     b8a:	82 8d       	ldd	r24, Z+26	; 0x1a
     b8c:	93 8d       	ldd	r25, Z+27	; 0x1b
     b8e:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_SEC, (uint16_t*)&m_wSetSec, 2);
     b92:	a8 01       	movw	r20, r16
     b94:	4a 5e       	subi	r20, 0xEA	; 234
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	22 e0       	ldi	r18, 0x02	; 2
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	61 e0       	ldi	r22, 0x01	; 1
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	f8 01       	movw	r30, r16
     ba2:	82 8d       	ldd	r24, Z+26	; 0x1a
     ba4:	93 8d       	ldd	r25, Z+27	; 0x1b
     ba6:	0e 94 c4 21 	call	0x4388	; 0x4388 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     baa:	f8 01       	movw	r30, r16
     bac:	82 8d       	ldd	r24, Z+26	; 0x1a
     bae:	93 8d       	ldd	r25, Z+27	; 0x1b
     bb0:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MSC, (uint16_t*)&m_wMillSec, 2);
     bb4:	a8 01       	movw	r20, r16
     bb6:	4e 5e       	subi	r20, 0xEE	; 238
     bb8:	5f 4f       	sbci	r21, 0xFF	; 255
     bba:	22 e0       	ldi	r18, 0x02	; 2
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	62 e0       	ldi	r22, 0x02	; 2
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	f8 01       	movw	r30, r16
     bc4:	82 8d       	ldd	r24, Z+26	; 0x1a
     bc6:	93 8d       	ldd	r25, Z+27	; 0x1b
     bc8:	0e 94 c4 21 	call	0x4388	; 0x4388 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     bcc:	f8 01       	movw	r30, r16
     bce:	82 8d       	ldd	r24, Z+26	; 0x1a
     bd0:	93 8d       	ldd	r25, Z+27	; 0x1b
     bd2:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			m_wMinutes = m_wSetMin;
     bd6:	f8 01       	movw	r30, r16
     bd8:	84 89       	ldd	r24, Z+20	; 0x14
     bda:	95 89       	ldd	r25, Z+21	; 0x15
     bdc:	86 87       	std	Z+14, r24	; 0x0e
     bde:	97 87       	std	Z+15, r25	; 0x0f
			m_wSeconds = m_wSetSec;
     be0:	86 89       	ldd	r24, Z+22	; 0x16
     be2:	97 89       	ldd	r25, Z+23	; 0x17
     be4:	80 8b       	std	Z+16, r24	; 0x10
     be6:	91 8b       	std	Z+17, r25	; 0x11
			m_wMillSec = 0;
     be8:	12 8a       	std	Z+18, r1	; 0x12
     bea:	13 8a       	std	Z+19, r1	; 0x13
			
			state = APP_SETUP;
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	84 87       	std	Z+12, r24	; 0x0c
		break;
     bf0:	84 c0       	rjmp	.+264    	; 0xcfa <_ZN16CLaserControlApp3RunEv+0x3c2>
		case APP_OnTimerRestart:
			// Restart (return to Run) state
			pic_id = swap(PICID_TIMER);
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	99 e0       	ldi	r25, 0x09	; 9
     bf6:	89 83       	std	Y+1, r24	; 0x01
     bf8:	9a 83       	std	Y+2, r25	; 0x02
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     bfa:	22 e0       	ldi	r18, 0x02	; 2
     bfc:	ae 01       	movw	r20, r28
     bfe:	4f 5f       	subi	r20, 0xFF	; 255
     c00:	5f 4f       	sbci	r21, 0xFF	; 255
     c02:	63 e0       	ldi	r22, 0x03	; 3
     c04:	f8 01       	movw	r30, r16
     c06:	82 8d       	ldd	r24, Z+26	; 0x1a
     c08:	93 8d       	ldd	r25, Z+27	; 0x1b
     c0a:	0e 94 b5 21 	call	0x436a	; 0x436a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     c0e:	f8 01       	movw	r30, r16
     c10:	82 8d       	ldd	r24, Z+26	; 0x1a
     c12:	93 8d       	ldd	r25, Z+27	; 0x1b
     c14:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			// Reset
			m_wMinutes = m_wSetMin;
     c18:	f8 01       	movw	r30, r16
     c1a:	84 89       	ldd	r24, Z+20	; 0x14
     c1c:	95 89       	ldd	r25, Z+21	; 0x15
     c1e:	86 87       	std	Z+14, r24	; 0x0e
     c20:	97 87       	std	Z+15, r25	; 0x0f
			m_wSeconds = m_wSetSec;
     c22:	86 89       	ldd	r24, Z+22	; 0x16
     c24:	97 89       	ldd	r25, Z+23	; 0x17
     c26:	80 8b       	std	Z+16, r24	; 0x10
     c28:	91 8b       	std	Z+17, r25	; 0x11
			m_wMillSec = 0;
     c2a:	12 8a       	std	Z+18, r1	; 0x12
     c2c:	13 8a       	std	Z+19, r1	; 0x13
			
			timer.Stop();
     c2e:	8e ee       	ldi	r24, 0xEE	; 238
     c30:	90 e2       	ldi	r25, 0x20	; 32
     c32:	0e 94 c3 09 	call	0x1386	; 0x1386 <_ZN7CTimerC4StopEv>
			
			player.SoundStart(1000, 50, 1);
     c36:	21 e0       	ldi	r18, 0x01	; 1
     c38:	42 e3       	ldi	r20, 0x32	; 50
     c3a:	50 e0       	ldi	r21, 0x00	; 0
     c3c:	68 ee       	ldi	r22, 0xE8	; 232
     c3e:	73 e0       	ldi	r23, 0x03	; 3
     c40:	83 e0       	ldi	r24, 0x03	; 3
     c42:	93 e2       	ldi	r25, 0x23	; 35
     c44:	0e 94 27 07 	call	0xe4e	; 0xe4e <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
     c48:	83 e0       	ldi	r24, 0x03	; 3
     c4a:	93 e2       	ldi	r25, 0x23	; 35
     c4c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN12CSoundPlayer9SoundStopEv>
     c50:	ff ef       	ldi	r31, 0xFF	; 255
     c52:	21 ee       	ldi	r18, 0xE1	; 225
     c54:	84 e0       	ldi	r24, 0x04	; 4
     c56:	f1 50       	subi	r31, 0x01	; 1
     c58:	20 40       	sbci	r18, 0x00	; 0
     c5a:	80 40       	sbci	r24, 0x00	; 0
     c5c:	e1 f7       	brne	.-8      	; 0xc56 <_ZN16CLaserControlApp3RunEv+0x31e>
     c5e:	00 c0       	rjmp	.+0      	; 0xc60 <_ZN16CLaserControlApp3RunEv+0x328>
     c60:	00 00       	nop
			_delay_ms(50);
			player.SoundStart(1000, 50, 1);
     c62:	21 e0       	ldi	r18, 0x01	; 1
     c64:	42 e3       	ldi	r20, 0x32	; 50
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	68 ee       	ldi	r22, 0xE8	; 232
     c6a:	73 e0       	ldi	r23, 0x03	; 3
     c6c:	83 e0       	ldi	r24, 0x03	; 3
     c6e:	93 e2       	ldi	r25, 0x23	; 35
     c70:	0e 94 27 07 	call	0xe4e	; 0xe4e <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
     c74:	83 e0       	ldi	r24, 0x03	; 3
     c76:	93 e2       	ldi	r25, 0x23	; 35
     c78:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN12CSoundPlayer9SoundStopEv>
     c7c:	9f ef       	ldi	r25, 0xFF	; 255
     c7e:	e1 ee       	ldi	r30, 0xE1	; 225
     c80:	f4 e0       	ldi	r31, 0x04	; 4
     c82:	91 50       	subi	r25, 0x01	; 1
     c84:	e0 40       	sbci	r30, 0x00	; 0
     c86:	f0 40       	sbci	r31, 0x00	; 0
     c88:	e1 f7       	brne	.-8      	; 0xc82 <_ZN16CLaserControlApp3RunEv+0x34a>
     c8a:	00 c0       	rjmp	.+0      	; 0xc8c <_ZN16CLaserControlApp3RunEv+0x354>
     c8c:	00 00       	nop
			_delay_ms(50);
			
			// Stop timer
			timer.Start(25000);
     c8e:	68 ea       	ldi	r22, 0xA8	; 168
     c90:	71 e6       	ldi	r23, 0x61	; 97
     c92:	8e ee       	ldi	r24, 0xEE	; 238
     c94:	90 e2       	ldi	r25, 0x20	; 32
     c96:	0e 94 b6 09 	call	0x136c	; 0x136c <_ZN7CTimerC5StartEj>
			laserBoard.Relay1On();
     c9a:	84 e0       	ldi	r24, 0x04	; 4
     c9c:	93 e2       	ldi	r25, 0x23	; 35
     c9e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_ZN11CLaserBoard8Relay1OnEv>
			
			state = APP_RUN;
     ca2:	83 e0       	ldi	r24, 0x03	; 3
     ca4:	f8 01       	movw	r30, r16
     ca6:	84 87       	std	Z+12, r24	; 0x0c
		break;
     ca8:	28 c0       	rjmp	.+80     	; 0xcfa <_ZN16CLaserControlApp3RunEv+0x3c2>
		case APP_OnHL:
			// Turn HL (return to Setup) state
			pic_id = swap(PICID_SETUP);
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	91 e0       	ldi	r25, 0x01	; 1
     cae:	89 83       	std	Y+1, r24	; 0x01
     cb0:	9a 83       	std	Y+2, r25	; 0x02
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     cb2:	22 e0       	ldi	r18, 0x02	; 2
     cb4:	ae 01       	movw	r20, r28
     cb6:	4f 5f       	subi	r20, 0xFF	; 255
     cb8:	5f 4f       	sbci	r21, 0xFF	; 255
     cba:	63 e0       	ldi	r22, 0x03	; 3
     cbc:	f8 01       	movw	r30, r16
     cbe:	82 8d       	ldd	r24, Z+26	; 0x1a
     cc0:	93 8d       	ldd	r25, Z+27	; 0x1b
     cc2:	0e 94 b5 21 	call	0x436a	; 0x436a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     cc6:	f8 01       	movw	r30, r16
     cc8:	82 8d       	ldd	r24, Z+26	; 0x1a
     cca:	93 8d       	ldd	r25, Z+27	; 0x1b
     ccc:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			static bool hl = true;
			
			if (hl)
     cd0:	80 91 46 20 	lds	r24, 0x2046
     cd4:	88 23       	and	r24, r24
     cd6:	29 f0       	breq	.+10     	; 0xce2 <_ZN16CLaserControlApp3RunEv+0x3aa>
				laserBoard.Relay2On();
     cd8:	84 e0       	ldi	r24, 0x04	; 4
     cda:	93 e2       	ldi	r25, 0x23	; 35
     cdc:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_ZN11CLaserBoard8Relay2OnEv>
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <_ZN16CLaserControlApp3RunEv+0x3b2>
			else
				laserBoard.Relay2Off();
     ce2:	84 e0       	ldi	r24, 0x04	; 4
     ce4:	93 e2       	ldi	r25, 0x23	; 35
     ce6:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN11CLaserBoard9Relay2OffEv>
				
			hl = !hl;
     cea:	80 91 46 20 	lds	r24, 0x2046
     cee:	91 e0       	ldi	r25, 0x01	; 1
     cf0:	89 27       	eor	r24, r25
     cf2:	80 93 46 20 	sts	0x2046, r24
			
			state = APP_SETUP;
     cf6:	f8 01       	movw	r30, r16
     cf8:	94 87       	std	Z+12, r25	; 0x0c
		break;
	}
}
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	08 95       	ret

00000d08 <_ZN16CLaserControlApp9OnTimeoutEv>:
	m_wMillSec-=10;
}

void CLaserControlApp::OnTimeout()
{
	timer.Stop();
     d08:	8e ee       	ldi	r24, 0xEE	; 238
     d0a:	90 e2       	ldi	r25, 0x20	; 32
     d0c:	0e 94 c3 09 	call	0x1386	; 0x1386 <_ZN7CTimerC4StopEv>
	laserBoard.Relay1Off();
     d10:	84 e0       	ldi	r24, 0x04	; 4
     d12:	93 e2       	ldi	r25, 0x23	; 35
     d14:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_ZN11CLaserBoard9Relay1OffEv>
     d18:	08 95       	ret

00000d1a <_ZN16CLaserControlApp7OnTimerEv>:
		break;
	}
}

void CLaserControlApp::OnTimer()
{
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	ec 01       	movw	r28, r24
	if (m_wMillSec == 0)
     d20:	8a 89       	ldd	r24, Y+18	; 0x12
     d22:	9b 89       	ldd	r25, Y+19	; 0x13
     d24:	89 2b       	or	r24, r25
     d26:	c9 f5       	brne	.+114    	; 0xd9a <_ZN16CLaserControlApp7OnTimerEv+0x80>
	{
		if (m_wSeconds == 0)
     d28:	88 89       	ldd	r24, Y+16	; 0x10
     d2a:	99 89       	ldd	r25, Y+17	; 0x11
     d2c:	89 2b       	or	r24, r25
     d2e:	f1 f4       	brne	.+60     	; 0xd6c <_ZN16CLaserControlApp7OnTimerEv+0x52>
		{
			if (m_wMinutes == 0)
     d30:	8e 85       	ldd	r24, Y+14	; 0x0e
     d32:	9f 85       	ldd	r25, Y+15	; 0x0f
     d34:	89 2b       	or	r24, r25
     d36:	89 f4       	brne	.+34     	; 0xd5a <_ZN16CLaserControlApp7OnTimerEv+0x40>
			{
				OnTimeout();
     d38:	ce 01       	movw	r24, r28
     d3a:	0e 94 84 06 	call	0xd08	; 0xd08 <_ZN16CLaserControlApp9OnTimeoutEv>
				player.SoundStart(1000, 1000, 0);
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	48 ee       	ldi	r20, 0xE8	; 232
     d42:	53 e0       	ldi	r21, 0x03	; 3
     d44:	68 ee       	ldi	r22, 0xE8	; 232
     d46:	73 e0       	ldi	r23, 0x03	; 3
     d48:	83 e0       	ldi	r24, 0x03	; 3
     d4a:	93 e2       	ldi	r25, 0x23	; 35
     d4c:	0e 94 27 07 	call	0xe4e	; 0xe4e <_ZN12CSoundPlayer10SoundStartEjjh>
				player.SoundStop();
     d50:	83 e0       	ldi	r24, 0x03	; 3
     d52:	93 e2       	ldi	r25, 0x23	; 35
     d54:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN12CSoundPlayer9SoundStopEv>
				//player.beep(1000, 1000);
				return;
     d58:	55 c0       	rjmp	.+170    	; 0xe04 <_ZN16CLaserControlApp7OnTimerEv+0xea>
			}
			m_wSeconds = 60;
     d5a:	8c e3       	ldi	r24, 0x3C	; 60
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	88 8b       	std	Y+16, r24	; 0x10
     d60:	99 8b       	std	Y+17, r25	; 0x11
			m_wMinutes--;
     d62:	8e 85       	ldd	r24, Y+14	; 0x0e
     d64:	9f 85       	ldd	r25, Y+15	; 0x0f
     d66:	01 97       	sbiw	r24, 0x01	; 1
     d68:	8e 87       	std	Y+14, r24	; 0x0e
     d6a:	9f 87       	std	Y+15, r25	; 0x0f
		}
		m_wMillSec = 100; // Every 10 ms
     d6c:	84 e6       	ldi	r24, 0x64	; 100
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	8a 8b       	std	Y+18, r24	; 0x12
     d72:	9b 8b       	std	Y+19, r25	; 0x13
		m_wSeconds--;
     d74:	88 89       	ldd	r24, Y+16	; 0x10
     d76:	99 89       	ldd	r25, Y+17	; 0x11
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	88 8b       	std	Y+16, r24	; 0x10
     d7c:	99 8b       	std	Y+17, r25	; 0x11
		if (m_wMinutes == 0 && m_wSeconds < 10)
     d7e:	8e 85       	ldd	r24, Y+14	; 0x0e
     d80:	9f 85       	ldd	r25, Y+15	; 0x0f
     d82:	89 2b       	or	r24, r25
     d84:	81 f4       	brne	.+32     	; 0xda6 <_ZN16CLaserControlApp7OnTimerEv+0x8c>
     d86:	88 89       	ldd	r24, Y+16	; 0x10
     d88:	99 89       	ldd	r25, Y+17	; 0x11
     d8a:	0a 97       	sbiw	r24, 0x0a	; 10
     d8c:	d0 f0       	brcs	.+52     	; 0xdc2 <_ZN16CLaserControlApp7OnTimerEv+0xa8>
     d8e:	0b c0       	rjmp	.+22     	; 0xda6 <_ZN16CLaserControlApp7OnTimerEv+0x8c>
		{
			if (m_wMinutes == 0 && m_wSeconds < 5)
     d90:	88 89       	ldd	r24, Y+16	; 0x10
     d92:	99 89       	ldd	r25, Y+17	; 0x11
     d94:	05 97       	sbiw	r24, 0x05	; 5
     d96:	d0 f0       	brcs	.+52     	; 0xdcc <_ZN16CLaserControlApp7OnTimerEv+0xb2>
     d98:	27 c0       	rjmp	.+78     	; 0xde8 <_ZN16CLaserControlApp7OnTimerEv+0xce>
			player.SoundStart(1000, 25, 2);
			player.SoundStop();
			//player.beep(1000, 25);
		}
	}
	m_wMillSec-=10;
     d9a:	8a 89       	ldd	r24, Y+18	; 0x12
     d9c:	9b 89       	ldd	r25, Y+19	; 0x13
     d9e:	0a 97       	sbiw	r24, 0x0a	; 10
     da0:	8a 8b       	std	Y+18, r24	; 0x12
     da2:	9b 8b       	std	Y+19, r25	; 0x13
     da4:	2f c0       	rjmp	.+94     	; 0xe04 <_ZN16CLaserControlApp7OnTimerEv+0xea>
				//player.beep(1000, 50);
			}
		}
		else
		{
			player.SoundStart(1000, 25, 2);
     da6:	22 e0       	ldi	r18, 0x02	; 2
     da8:	49 e1       	ldi	r20, 0x19	; 25
     daa:	50 e0       	ldi	r21, 0x00	; 0
     dac:	68 ee       	ldi	r22, 0xE8	; 232
     dae:	73 e0       	ldi	r23, 0x03	; 3
     db0:	83 e0       	ldi	r24, 0x03	; 3
     db2:	93 e2       	ldi	r25, 0x23	; 35
     db4:	0e 94 27 07 	call	0xe4e	; 0xe4e <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
     db8:	83 e0       	ldi	r24, 0x03	; 3
     dba:	93 e2       	ldi	r25, 0x23	; 35
     dbc:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN12CSoundPlayer9SoundStopEv>
     dc0:	ec cf       	rjmp	.-40     	; 0xd9a <_ZN16CLaserControlApp7OnTimerEv+0x80>
		}
		m_wMillSec = 100; // Every 10 ms
		m_wSeconds--;
		if (m_wMinutes == 0 && m_wSeconds < 10)
		{
			if (m_wMinutes == 0 && m_wSeconds < 5)
     dc2:	8e 85       	ldd	r24, Y+14	; 0x0e
     dc4:	9f 85       	ldd	r25, Y+15	; 0x0f
     dc6:	89 2b       	or	r24, r25
     dc8:	19 f3       	breq	.-58     	; 0xd90 <_ZN16CLaserControlApp7OnTimerEv+0x76>
     dca:	0e c0       	rjmp	.+28     	; 0xde8 <_ZN16CLaserControlApp7OnTimerEv+0xce>
			{
				player.SoundStart(1000, 100, 0);
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	44 e6       	ldi	r20, 0x64	; 100
     dd0:	50 e0       	ldi	r21, 0x00	; 0
     dd2:	68 ee       	ldi	r22, 0xE8	; 232
     dd4:	73 e0       	ldi	r23, 0x03	; 3
     dd6:	83 e0       	ldi	r24, 0x03	; 3
     dd8:	93 e2       	ldi	r25, 0x23	; 35
     dda:	0e 94 27 07 	call	0xe4e	; 0xe4e <_ZN12CSoundPlayer10SoundStartEjjh>
				player.SoundStop();
     dde:	83 e0       	ldi	r24, 0x03	; 3
     de0:	93 e2       	ldi	r25, 0x23	; 35
     de2:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN12CSoundPlayer9SoundStopEv>
     de6:	d9 cf       	rjmp	.-78     	; 0xd9a <_ZN16CLaserControlApp7OnTimerEv+0x80>
				//player.beep(1000, 100);
			}
			else
			{
				player.SoundStart(1000, 50, 1);
     de8:	21 e0       	ldi	r18, 0x01	; 1
     dea:	42 e3       	ldi	r20, 0x32	; 50
     dec:	50 e0       	ldi	r21, 0x00	; 0
     dee:	68 ee       	ldi	r22, 0xE8	; 232
     df0:	73 e0       	ldi	r23, 0x03	; 3
     df2:	83 e0       	ldi	r24, 0x03	; 3
     df4:	93 e2       	ldi	r25, 0x23	; 35
     df6:	0e 94 27 07 	call	0xe4e	; 0xe4e <_ZN12CSoundPlayer10SoundStartEjjh>
				player.SoundStop();
     dfa:	83 e0       	ldi	r24, 0x03	; 3
     dfc:	93 e2       	ldi	r25, 0x23	; 35
     dfe:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN12CSoundPlayer9SoundStopEv>
     e02:	cb cf       	rjmp	.-106    	; 0xd9a <_ZN16CLaserControlApp7OnTimerEv+0x80>
			player.SoundStop();
			//player.beep(1000, 25);
		}
	}
	m_wMillSec-=10;
}
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	08 95       	ret

00000e0a <_ZN16CLaserControlApp13OnTimerStaticEPv>:
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnTimer();
     e0a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <_ZN16CLaserControlApp7OnTimerEv>
     e0e:	08 95       	ret

00000e10 <_ZN12CSoundPlayerC1Ev>:
	SoundStart(note, duration, 3);
	SoundStop();
}

// default constructor
CSoundPlayer::CSoundPlayer()
     e10:	08 95       	ret

00000e12 <_ZN12CSoundPlayerD1Ev>:
{
} //CSoundPlayer

// default destructor
CSoundPlayer::~CSoundPlayer()
     e12:	08 95       	ret

00000e14 <_ZN12CSoundPlayer19InitializeToneTimerEv>:
} //~CSoundPlayer

void CSoundPlayer::InitializeToneTimer()
{
	// Start timer 4MHz tick rate
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;
     e14:	e0 e0       	ldi	r30, 0x00	; 0
     e16:	fa e0       	ldi	r31, 0x0A	; 10
     e18:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE0.CTRLB = TC0_CCDEN_bm | TC_WGMODE_DS_B_gc;
     e1a:	87 e8       	ldi	r24, 0x87	; 135
     e1c:	81 83       	std	Z+1, r24	; 0x01
	
	// No events
	TCE0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
     e1e:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1.000 Hz PWM
	TCE0.PER = PERIOD_1Hz;
     e20:	84 e2       	ldi	r24, 0x24	; 36
     e22:	94 ef       	ldi	r25, 0xF4	; 244
     e24:	86 a3       	std	Z+38, r24	; 0x26
     e26:	97 a3       	std	Z+39, r25	; 0x27
	
	// Set 50% duty cycle
	TCE0.CCD =  MAXVOLUME_CC;
     e28:	82 e1       	ldi	r24, 0x12	; 18
     e2a:	9a e7       	ldi	r25, 0x7A	; 122
     e2c:	86 a7       	std	Z+46, r24	; 0x2e
     e2e:	97 a7       	std	Z+47, r25	; 0x2f
	
	// Disable interrupt
	TCE0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
     e30:	16 82       	std	Z+6, r1	; 0x06
	TCE0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
     e32:	17 82       	std	Z+7, r1	; 0x07
     e34:	08 95       	ret

00000e36 <_ZN12CSoundPlayer23InitializeDurationTimerEv>:

void CSoundPlayer::InitializeDurationTimer()
{
	// Start timer 4MHz tick rate
	//TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;
     e36:	e0 e4       	ldi	r30, 0x40	; 64
     e38:	fa e0       	ldi	r31, 0x0A	; 10
     e3a:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE1.CTRLB = TC_WGMODE_NORMAL_gc;
     e3c:	11 82       	std	Z+1, r1	; 0x01
	
	// No events
	TCE1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
     e3e:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1s
	TCE1.PER = DELAYPERIOD_1s;
     e40:	84 e2       	ldi	r24, 0x24	; 36
     e42:	94 ef       	ldi	r25, 0xF4	; 244
     e44:	86 a3       	std	Z+38, r24	; 0x26
     e46:	97 a3       	std	Z+39, r25	; 0x27
	
	// Disable interrupt
	TCE1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
     e48:	16 82       	std	Z+6, r1	; 0x06
	TCE1.INTCTRLB = TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
     e4a:	17 82       	std	Z+7, r1	; 0x07
     e4c:	08 95       	ret

00000e4e <_ZN12CSoundPlayer10SoundStartEjjh>:
}

void CSoundPlayer::SoundStart(uint16_t freq, uint16_t time, uint8_t volume)
{
     e4e:	0f 93       	push	r16
     e50:	1f 93       	push	r17
     e52:	cf 93       	push	r28
     e54:	8a 01       	movw	r16, r20
     e56:	c2 2f       	mov	r28, r18
	uint16_t period_tc0 = PERIOD_1Hz/freq;
     e58:	9b 01       	movw	r18, r22
     e5a:	40 e0       	ldi	r20, 0x00	; 0
     e5c:	50 e0       	ldi	r21, 0x00	; 0
     e5e:	64 e2       	ldi	r22, 0x24	; 36
     e60:	74 ef       	ldi	r23, 0xF4	; 244
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	0e 94 43 22 	call	0x4486	; 0x4486 <__divmodsi4>
	uint16_t period_tc1 = DELAYPERIOD_A1s * time + (time >> DELAYPERIOD_S1s);
     e6a:	b8 01       	movw	r22, r16
     e6c:	76 95       	lsr	r23
     e6e:	67 95       	ror	r22
     e70:	ee e3       	ldi	r30, 0x3E	; 62
     e72:	e0 9f       	mul	r30, r16
     e74:	c0 01       	movw	r24, r0
     e76:	e1 9f       	mul	r30, r17
     e78:	90 0d       	add	r25, r0
     e7a:	11 24       	eor	r1, r1
     e7c:	86 0f       	add	r24, r22
     e7e:	97 1f       	adc	r25, r23
	
	// Config
	TCE0.CCD = period_tc0 >> (volume + 1);
     e80:	cf 5f       	subi	r28, 0xFF	; 255
     e82:	b9 01       	movw	r22, r18
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <_ZN12CSoundPlayer10SoundStartEjjh+0x3c>
     e86:	76 95       	lsr	r23
     e88:	67 95       	ror	r22
     e8a:	ca 95       	dec	r28
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <_ZN12CSoundPlayer10SoundStartEjjh+0x38>
     e8e:	e0 e0       	ldi	r30, 0x00	; 0
     e90:	fa e0       	ldi	r31, 0x0A	; 10
     e92:	66 a7       	std	Z+46, r22	; 0x2e
     e94:	77 a7       	std	Z+47, r23	; 0x2f
	TCE0.PER = period_tc0;
     e96:	26 a3       	std	Z+38, r18	; 0x26
     e98:	37 a3       	std	Z+39, r19	; 0x27
	TCE1.PER = period_tc1;
     e9a:	a0 e4       	ldi	r26, 0x40	; 64
     e9c:	ba e0       	ldi	r27, 0x0A	; 10
     e9e:	96 96       	adiw	r26, 0x26	; 38
     ea0:	8d 93       	st	X+, r24
     ea2:	9c 93       	st	X, r25
     ea4:	97 97       	sbiw	r26, 0x27	; 39
	
	//Start timer
	TCE0.CTRLA = TC_CLKSEL_DIV256_gc;	//Start tone timer
     ea6:	86 e0       	ldi	r24, 0x06	; 6
     ea8:	80 83       	st	Z, r24
	TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;	//Start duration timer
     eaa:	87 e0       	ldi	r24, 0x07	; 7
     eac:	8c 93       	st	X, r24
}
     eae:	cf 91       	pop	r28
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	08 95       	ret

00000eb6 <_ZN12CSoundPlayer9SoundStopEv>:

void CSoundPlayer::SoundStop()
{
	while (!(TCE1.INTFLAGS & TC0_OVFIF_bm));
     eb6:	e0 e4       	ldi	r30, 0x40	; 64
     eb8:	fa e0       	ldi	r31, 0x0A	; 10
     eba:	84 85       	ldd	r24, Z+12	; 0x0c
     ebc:	80 ff       	sbrs	r24, 0
     ebe:	fd cf       	rjmp	.-6      	; 0xeba <_ZN12CSoundPlayer9SoundStopEv+0x4>
	TCE1.INTFLAGS &= TC0_OVFIF_bm;
     ec0:	e0 e4       	ldi	r30, 0x40	; 64
     ec2:	fa e0       	ldi	r31, 0x0A	; 10
     ec4:	84 85       	ldd	r24, Z+12	; 0x0c
     ec6:	81 70       	andi	r24, 0x01	; 1
     ec8:	84 87       	std	Z+12, r24	; 0x0c

	//Stop timer
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;		//Stop tone timer
     eca:	a0 e0       	ldi	r26, 0x00	; 0
     ecc:	ba e0       	ldi	r27, 0x0A	; 10
     ece:	1c 92       	st	X, r1
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;		//Stop duration timer
     ed0:	10 82       	st	Z, r1

	// Reset duration timer
	TCE1.CNT = 0;
     ed2:	10 a2       	std	Z+32, r1	; 0x20
     ed4:	11 a2       	std	Z+33, r1	; 0x21
	TCE0.CNT = 0;
     ed6:	90 96       	adiw	r26, 0x20	; 32
     ed8:	1d 92       	st	X+, r1
     eda:	1c 92       	st	X, r1
     edc:	91 97       	sbiw	r26, 0x21	; 33
     ede:	2f ef       	ldi	r18, 0xFF	; 255
     ee0:	83 ef       	ldi	r24, 0xF3	; 243
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	21 50       	subi	r18, 0x01	; 1
     ee6:	80 40       	sbci	r24, 0x00	; 0
     ee8:	90 40       	sbci	r25, 0x00	; 0
     eea:	e1 f7       	brne	.-8      	; 0xee4 <_ZN12CSoundPlayer9SoundStopEv+0x2e>
     eec:	00 c0       	rjmp	.+0      	; 0xeee <_ZN12CSoundPlayer9SoundStopEv+0x38>
     eee:	00 00       	nop
     ef0:	08 95       	ret

00000ef2 <_ZN12CSoundPlayer4beepEjj>:

extern void __builtin_avr_delay_cycles(unsigned long);

//This function generates the square wave that makes the piezo speaker sound at a determinated frequency.
void CSoundPlayer::beep(uint16_t note, uint16_t duration)
{
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	ec 01       	movw	r28, r24
	SoundStart(note, duration, 3);
     ef8:	23 e0       	ldi	r18, 0x03	; 3
     efa:	0e 94 27 07 	call	0xe4e	; 0xe4e <_ZN12CSoundPlayer10SoundStartEjjh>
	SoundStop();
     efe:	ce 01       	movw	r24, r28
     f00:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN12CSoundPlayer9SoundStopEv>
}
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	08 95       	ret

00000f0a <_ZN12CSoundPlayer10InitializeEv>:

	_delay_ms(20);
} 

void CSoundPlayer::Initialize()
{
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	ec 01       	movw	r28, r24
	InitializeToneTimer();
     f10:	0e 94 0a 07 	call	0xe14	; 0xe14 <_ZN12CSoundPlayer19InitializeToneTimerEv>
	InitializeDurationTimer();
     f14:	ce 01       	movw	r24, r28
     f16:	0e 94 1b 07 	call	0xe36	; 0xe36 <_ZN12CSoundPlayer23InitializeDurationTimerEv>
}
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	08 95       	ret

00000f20 <_ZN12CSoundPlayer4PlayEv>:

void CSoundPlayer::Play()
{
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	ec 01       	movw	r28, r24
	cli();
     f26:	f8 94       	cli

	beep(a, 500);
     f28:	44 ef       	ldi	r20, 0xF4	; 244
     f2a:	51 e0       	ldi	r21, 0x01	; 1
     f2c:	68 eb       	ldi	r22, 0xB8	; 184
     f2e:	71 e0       	ldi	r23, 0x01	; 1
     f30:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
     f34:	44 ef       	ldi	r20, 0xF4	; 244
     f36:	51 e0       	ldi	r21, 0x01	; 1
     f38:	68 eb       	ldi	r22, 0xB8	; 184
     f3a:	71 e0       	ldi	r23, 0x01	; 1
     f3c:	ce 01       	movw	r24, r28
     f3e:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
     f42:	44 ef       	ldi	r20, 0xF4	; 244
     f44:	51 e0       	ldi	r21, 0x01	; 1
     f46:	68 eb       	ldi	r22, 0xB8	; 184
     f48:	71 e0       	ldi	r23, 0x01	; 1
     f4a:	ce 01       	movw	r24, r28
     f4c:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(f, 350);
     f50:	4e e5       	ldi	r20, 0x5E	; 94
     f52:	51 e0       	ldi	r21, 0x01	; 1
     f54:	6d e5       	ldi	r22, 0x5D	; 93
     f56:	71 e0       	ldi	r23, 0x01	; 1
     f58:	ce 01       	movw	r24, r28
     f5a:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 150);
     f5e:	46 e9       	ldi	r20, 0x96	; 150
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	6b e0       	ldi	r22, 0x0B	; 11
     f64:	72 e0       	ldi	r23, 0x02	; 2
     f66:	ce 01       	movw	r24, r28
     f68:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
     f6c:	44 ef       	ldi	r20, 0xF4	; 244
     f6e:	51 e0       	ldi	r21, 0x01	; 1
     f70:	68 eb       	ldi	r22, 0xB8	; 184
     f72:	71 e0       	ldi	r23, 0x01	; 1
     f74:	ce 01       	movw	r24, r28
     f76:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(f, 350);
     f7a:	4e e5       	ldi	r20, 0x5E	; 94
     f7c:	51 e0       	ldi	r21, 0x01	; 1
     f7e:	6d e5       	ldi	r22, 0x5D	; 93
     f80:	71 e0       	ldi	r23, 0x01	; 1
     f82:	ce 01       	movw	r24, r28
     f84:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 150);
     f88:	46 e9       	ldi	r20, 0x96	; 150
     f8a:	50 e0       	ldi	r21, 0x00	; 0
     f8c:	6b e0       	ldi	r22, 0x0B	; 11
     f8e:	72 e0       	ldi	r23, 0x02	; 2
     f90:	ce 01       	movw	r24, r28
     f92:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 650);
     f96:	4a e8       	ldi	r20, 0x8A	; 138
     f98:	52 e0       	ldi	r21, 0x02	; 2
     f9a:	68 eb       	ldi	r22, 0xB8	; 184
     f9c:	71 e0       	ldi	r23, 0x01	; 1
     f9e:	ce 01       	movw	r24, r28
     fa0:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
     fa4:	2f ef       	ldi	r18, 0xFF	; 255
     fa6:	85 ea       	ldi	r24, 0xA5	; 165
     fa8:	9e e0       	ldi	r25, 0x0E	; 14
     faa:	21 50       	subi	r18, 0x01	; 1
     fac:	80 40       	sbci	r24, 0x00	; 0
     fae:	90 40       	sbci	r25, 0x00	; 0
     fb0:	e1 f7       	brne	.-8      	; 0xfaa <_ZN12CSoundPlayer4PlayEv+0x8a>
     fb2:	00 c0       	rjmp	.+0      	; 0xfb4 <_ZN12CSoundPlayer4PlayEv+0x94>
     fb4:	00 00       	nop
	
	_delay_ms(150);
	//end of first bit
	
	beep(eH, 500);
     fb6:	44 ef       	ldi	r20, 0xF4	; 244
     fb8:	51 e0       	ldi	r21, 0x01	; 1
     fba:	63 e9       	ldi	r22, 0x93	; 147
     fbc:	72 e0       	ldi	r23, 0x02	; 2
     fbe:	ce 01       	movw	r24, r28
     fc0:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(eH, 500);
     fc4:	44 ef       	ldi	r20, 0xF4	; 244
     fc6:	51 e0       	ldi	r21, 0x01	; 1
     fc8:	63 e9       	ldi	r22, 0x93	; 147
     fca:	72 e0       	ldi	r23, 0x02	; 2
     fcc:	ce 01       	movw	r24, r28
     fce:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(eH, 500);
     fd2:	44 ef       	ldi	r20, 0xF4	; 244
     fd4:	51 e0       	ldi	r21, 0x01	; 1
     fd6:	63 e9       	ldi	r22, 0x93	; 147
     fd8:	72 e0       	ldi	r23, 0x02	; 2
     fda:	ce 01       	movw	r24, r28
     fdc:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(fH, 350);
     fe0:	4e e5       	ldi	r20, 0x5E	; 94
     fe2:	51 e0       	ldi	r21, 0x01	; 1
     fe4:	6a eb       	ldi	r22, 0xBA	; 186
     fe6:	72 e0       	ldi	r23, 0x02	; 2
     fe8:	ce 01       	movw	r24, r28
     fea:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 150);
     fee:	46 e9       	ldi	r20, 0x96	; 150
     ff0:	50 e0       	ldi	r21, 0x00	; 0
     ff2:	6b e0       	ldi	r22, 0x0B	; 11
     ff4:	72 e0       	ldi	r23, 0x02	; 2
     ff6:	ce 01       	movw	r24, r28
     ff8:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(gS, 500);
     ffc:	44 ef       	ldi	r20, 0xF4	; 244
     ffe:	51 e0       	ldi	r21, 0x01	; 1
    1000:	6f e9       	ldi	r22, 0x9F	; 159
    1002:	71 e0       	ldi	r23, 0x01	; 1
    1004:	ce 01       	movw	r24, r28
    1006:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(f, 350);
    100a:	4e e5       	ldi	r20, 0x5E	; 94
    100c:	51 e0       	ldi	r21, 0x01	; 1
    100e:	6d e5       	ldi	r22, 0x5D	; 93
    1010:	71 e0       	ldi	r23, 0x01	; 1
    1012:	ce 01       	movw	r24, r28
    1014:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 150);
    1018:	46 e9       	ldi	r20, 0x96	; 150
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	6b e0       	ldi	r22, 0x0B	; 11
    101e:	72 e0       	ldi	r23, 0x02	; 2
    1020:	ce 01       	movw	r24, r28
    1022:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 650);
    1026:	4a e8       	ldi	r20, 0x8A	; 138
    1028:	52 e0       	ldi	r21, 0x02	; 2
    102a:	68 eb       	ldi	r22, 0xB8	; 184
    102c:	71 e0       	ldi	r23, 0x01	; 1
    102e:	ce 01       	movw	r24, r28
    1030:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
    1034:	2f ef       	ldi	r18, 0xFF	; 255
    1036:	85 ea       	ldi	r24, 0xA5	; 165
    1038:	9e e0       	ldi	r25, 0x0E	; 14
    103a:	21 50       	subi	r18, 0x01	; 1
    103c:	80 40       	sbci	r24, 0x00	; 0
    103e:	90 40       	sbci	r25, 0x00	; 0
    1040:	e1 f7       	brne	.-8      	; 0x103a <_ZN12CSoundPlayer4PlayEv+0x11a>
    1042:	00 c0       	rjmp	.+0      	; 0x1044 <_ZN12CSoundPlayer4PlayEv+0x124>
    1044:	00 00       	nop
	
	_delay_ms(150);
	//end of second bit...
	
	beep(aH, 500);
    1046:	44 ef       	ldi	r20, 0xF4	; 244
    1048:	51 e0       	ldi	r21, 0x01	; 1
    104a:	60 e7       	ldi	r22, 0x70	; 112
    104c:	73 e0       	ldi	r23, 0x03	; 3
    104e:	ce 01       	movw	r24, r28
    1050:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 300);
    1054:	4c e2       	ldi	r20, 0x2C	; 44
    1056:	51 e0       	ldi	r21, 0x01	; 1
    1058:	68 eb       	ldi	r22, 0xB8	; 184
    105a:	71 e0       	ldi	r23, 0x01	; 1
    105c:	ce 01       	movw	r24, r28
    105e:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 150);
    1062:	46 e9       	ldi	r20, 0x96	; 150
    1064:	50 e0       	ldi	r21, 0x00	; 0
    1066:	68 eb       	ldi	r22, 0xB8	; 184
    1068:	71 e0       	ldi	r23, 0x01	; 1
    106a:	ce 01       	movw	r24, r28
    106c:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(aH, 400);
    1070:	40 e9       	ldi	r20, 0x90	; 144
    1072:	51 e0       	ldi	r21, 0x01	; 1
    1074:	60 e7       	ldi	r22, 0x70	; 112
    1076:	73 e0       	ldi	r23, 0x03	; 3
    1078:	ce 01       	movw	r24, r28
    107a:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(gSH, 200);
    107e:	48 ec       	ldi	r20, 0xC8	; 200
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	6e e3       	ldi	r22, 0x3E	; 62
    1084:	73 e0       	ldi	r23, 0x03	; 3
    1086:	ce 01       	movw	r24, r28
    1088:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(gH, 200);
    108c:	48 ec       	ldi	r20, 0xC8	; 200
    108e:	50 e0       	ldi	r21, 0x00	; 0
    1090:	60 e1       	ldi	r22, 0x10	; 16
    1092:	73 e0       	ldi	r23, 0x03	; 3
    1094:	ce 01       	movw	r24, r28
    1096:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(fSH, 125);
    109a:	4d e7       	ldi	r20, 0x7D	; 125
    109c:	50 e0       	ldi	r21, 0x00	; 0
    109e:	64 ee       	ldi	r22, 0xE4	; 228
    10a0:	72 e0       	ldi	r23, 0x02	; 2
    10a2:	ce 01       	movw	r24, r28
    10a4:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(fH, 125);
    10a8:	4d e7       	ldi	r20, 0x7D	; 125
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	6a eb       	ldi	r22, 0xBA	; 186
    10ae:	72 e0       	ldi	r23, 0x02	; 2
    10b0:	ce 01       	movw	r24, r28
    10b2:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(fSH, 250);
    10b6:	4a ef       	ldi	r20, 0xFA	; 250
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	64 ee       	ldi	r22, 0xE4	; 228
    10bc:	72 e0       	ldi	r23, 0x02	; 2
    10be:	ce 01       	movw	r24, r28
    10c0:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
    10c4:	2f ef       	ldi	r18, 0xFF	; 255
    10c6:	89 e6       	ldi	r24, 0x69	; 105
    10c8:	98 e1       	ldi	r25, 0x18	; 24
    10ca:	21 50       	subi	r18, 0x01	; 1
    10cc:	80 40       	sbci	r24, 0x00	; 0
    10ce:	90 40       	sbci	r25, 0x00	; 0
    10d0:	e1 f7       	brne	.-8      	; 0x10ca <_ZN12CSoundPlayer4PlayEv+0x1aa>
    10d2:	00 c0       	rjmp	.+0      	; 0x10d4 <_ZN12CSoundPlayer4PlayEv+0x1b4>
    10d4:	00 00       	nop
	
	_delay_ms(250);
	
	beep(aS, 250);
    10d6:	4a ef       	ldi	r20, 0xFA	; 250
    10d8:	50 e0       	ldi	r21, 0x00	; 0
    10da:	67 ec       	ldi	r22, 0xC7	; 199
    10dc:	71 e0       	ldi	r23, 0x01	; 1
    10de:	ce 01       	movw	r24, r28
    10e0:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(dSH, 400);
    10e4:	40 e9       	ldi	r20, 0x90	; 144
    10e6:	51 e0       	ldi	r21, 0x01	; 1
    10e8:	6e e6       	ldi	r22, 0x6E	; 110
    10ea:	72 e0       	ldi	r23, 0x02	; 2
    10ec:	ce 01       	movw	r24, r28
    10ee:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(dH, 200);
    10f2:	48 ec       	ldi	r20, 0xC8	; 200
    10f4:	50 e0       	ldi	r21, 0x00	; 0
    10f6:	6b e4       	ldi	r22, 0x4B	; 75
    10f8:	72 e0       	ldi	r23, 0x02	; 2
    10fa:	ce 01       	movw	r24, r28
    10fc:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(cSH, 200);
    1100:	48 ec       	ldi	r20, 0xC8	; 200
    1102:	50 e0       	ldi	r21, 0x00	; 0
    1104:	6a e2       	ldi	r22, 0x2A	; 42
    1106:	72 e0       	ldi	r23, 0x02	; 2
    1108:	ce 01       	movw	r24, r28
    110a:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 125);
    110e:	4d e7       	ldi	r20, 0x7D	; 125
    1110:	50 e0       	ldi	r21, 0x00	; 0
    1112:	6b e0       	ldi	r22, 0x0B	; 11
    1114:	72 e0       	ldi	r23, 0x02	; 2
    1116:	ce 01       	movw	r24, r28
    1118:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(b, 125);
    111c:	4d e7       	ldi	r20, 0x7D	; 125
    111e:	50 e0       	ldi	r21, 0x00	; 0
    1120:	62 ed       	ldi	r22, 0xD2	; 210
    1122:	71 e0       	ldi	r23, 0x01	; 1
    1124:	ce 01       	movw	r24, r28
    1126:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 250);
    112a:	4a ef       	ldi	r20, 0xFA	; 250
    112c:	50 e0       	ldi	r21, 0x00	; 0
    112e:	6b e0       	ldi	r22, 0x0B	; 11
    1130:	72 e0       	ldi	r23, 0x02	; 2
    1132:	ce 01       	movw	r24, r28
    1134:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
    1138:	2f ef       	ldi	r18, 0xFF	; 255
    113a:	89 e6       	ldi	r24, 0x69	; 105
    113c:	98 e1       	ldi	r25, 0x18	; 24
    113e:	21 50       	subi	r18, 0x01	; 1
    1140:	80 40       	sbci	r24, 0x00	; 0
    1142:	90 40       	sbci	r25, 0x00	; 0
    1144:	e1 f7       	brne	.-8      	; 0x113e <_ZN12CSoundPlayer4PlayEv+0x21e>
    1146:	00 c0       	rjmp	.+0      	; 0x1148 <_ZN12CSoundPlayer4PlayEv+0x228>
    1148:	00 00       	nop
	
	_delay_ms(250);
	
	beep(f, 125);
    114a:	4d e7       	ldi	r20, 0x7D	; 125
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	6d e5       	ldi	r22, 0x5D	; 93
    1150:	71 e0       	ldi	r23, 0x01	; 1
    1152:	ce 01       	movw	r24, r28
    1154:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(gS, 500);
    1158:	44 ef       	ldi	r20, 0xF4	; 244
    115a:	51 e0       	ldi	r21, 0x01	; 1
    115c:	6f e9       	ldi	r22, 0x9F	; 159
    115e:	71 e0       	ldi	r23, 0x01	; 1
    1160:	ce 01       	movw	r24, r28
    1162:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(f, 375);
    1166:	47 e7       	ldi	r20, 0x77	; 119
    1168:	51 e0       	ldi	r21, 0x01	; 1
    116a:	6d e5       	ldi	r22, 0x5D	; 93
    116c:	71 e0       	ldi	r23, 0x01	; 1
    116e:	ce 01       	movw	r24, r28
    1170:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 125);
    1174:	4d e7       	ldi	r20, 0x7D	; 125
    1176:	50 e0       	ldi	r21, 0x00	; 0
    1178:	68 eb       	ldi	r22, 0xB8	; 184
    117a:	71 e0       	ldi	r23, 0x01	; 1
    117c:	ce 01       	movw	r24, r28
    117e:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 500);
    1182:	44 ef       	ldi	r20, 0xF4	; 244
    1184:	51 e0       	ldi	r21, 0x01	; 1
    1186:	6b e0       	ldi	r22, 0x0B	; 11
    1188:	72 e0       	ldi	r23, 0x02	; 2
    118a:	ce 01       	movw	r24, r28
    118c:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 375);
    1190:	47 e7       	ldi	r20, 0x77	; 119
    1192:	51 e0       	ldi	r21, 0x01	; 1
    1194:	68 eb       	ldi	r22, 0xB8	; 184
    1196:	71 e0       	ldi	r23, 0x01	; 1
    1198:	ce 01       	movw	r24, r28
    119a:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 125);
    119e:	4d e7       	ldi	r20, 0x7D	; 125
    11a0:	50 e0       	ldi	r21, 0x00	; 0
    11a2:	6b e0       	ldi	r22, 0x0B	; 11
    11a4:	72 e0       	ldi	r23, 0x02	; 2
    11a6:	ce 01       	movw	r24, r28
    11a8:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(eH, 650);
    11ac:	4a e8       	ldi	r20, 0x8A	; 138
    11ae:	52 e0       	ldi	r21, 0x02	; 2
    11b0:	63 e9       	ldi	r22, 0x93	; 147
    11b2:	72 e0       	ldi	r23, 0x02	; 2
    11b4:	ce 01       	movw	r24, r28
    11b6:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	
	//end of third bit... (Though it doesn't play well)
	//let's repeat it
	
	beep(aH, 500);
    11ba:	44 ef       	ldi	r20, 0xF4	; 244
    11bc:	51 e0       	ldi	r21, 0x01	; 1
    11be:	60 e7       	ldi	r22, 0x70	; 112
    11c0:	73 e0       	ldi	r23, 0x03	; 3
    11c2:	ce 01       	movw	r24, r28
    11c4:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 300);
    11c8:	4c e2       	ldi	r20, 0x2C	; 44
    11ca:	51 e0       	ldi	r21, 0x01	; 1
    11cc:	68 eb       	ldi	r22, 0xB8	; 184
    11ce:	71 e0       	ldi	r23, 0x01	; 1
    11d0:	ce 01       	movw	r24, r28
    11d2:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 150);
    11d6:	46 e9       	ldi	r20, 0x96	; 150
    11d8:	50 e0       	ldi	r21, 0x00	; 0
    11da:	68 eb       	ldi	r22, 0xB8	; 184
    11dc:	71 e0       	ldi	r23, 0x01	; 1
    11de:	ce 01       	movw	r24, r28
    11e0:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(aH, 400);
    11e4:	40 e9       	ldi	r20, 0x90	; 144
    11e6:	51 e0       	ldi	r21, 0x01	; 1
    11e8:	60 e7       	ldi	r22, 0x70	; 112
    11ea:	73 e0       	ldi	r23, 0x03	; 3
    11ec:	ce 01       	movw	r24, r28
    11ee:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(gSH, 200);
    11f2:	48 ec       	ldi	r20, 0xC8	; 200
    11f4:	50 e0       	ldi	r21, 0x00	; 0
    11f6:	6e e3       	ldi	r22, 0x3E	; 62
    11f8:	73 e0       	ldi	r23, 0x03	; 3
    11fa:	ce 01       	movw	r24, r28
    11fc:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(gH, 200);
    1200:	48 ec       	ldi	r20, 0xC8	; 200
    1202:	50 e0       	ldi	r21, 0x00	; 0
    1204:	60 e1       	ldi	r22, 0x10	; 16
    1206:	73 e0       	ldi	r23, 0x03	; 3
    1208:	ce 01       	movw	r24, r28
    120a:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(fSH, 125);
    120e:	4d e7       	ldi	r20, 0x7D	; 125
    1210:	50 e0       	ldi	r21, 0x00	; 0
    1212:	64 ee       	ldi	r22, 0xE4	; 228
    1214:	72 e0       	ldi	r23, 0x02	; 2
    1216:	ce 01       	movw	r24, r28
    1218:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(fH, 125);
    121c:	4d e7       	ldi	r20, 0x7D	; 125
    121e:	50 e0       	ldi	r21, 0x00	; 0
    1220:	6a eb       	ldi	r22, 0xBA	; 186
    1222:	72 e0       	ldi	r23, 0x02	; 2
    1224:	ce 01       	movw	r24, r28
    1226:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(fSH, 250);
    122a:	4a ef       	ldi	r20, 0xFA	; 250
    122c:	50 e0       	ldi	r21, 0x00	; 0
    122e:	64 ee       	ldi	r22, 0xE4	; 228
    1230:	72 e0       	ldi	r23, 0x02	; 2
    1232:	ce 01       	movw	r24, r28
    1234:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
    1238:	2f ef       	ldi	r18, 0xFF	; 255
    123a:	89 e6       	ldi	r24, 0x69	; 105
    123c:	98 e1       	ldi	r25, 0x18	; 24
    123e:	21 50       	subi	r18, 0x01	; 1
    1240:	80 40       	sbci	r24, 0x00	; 0
    1242:	90 40       	sbci	r25, 0x00	; 0
    1244:	e1 f7       	brne	.-8      	; 0x123e <_ZN12CSoundPlayer4PlayEv+0x31e>
    1246:	00 c0       	rjmp	.+0      	; 0x1248 <_ZN12CSoundPlayer4PlayEv+0x328>
    1248:	00 00       	nop
	
	_delay_ms(250);
	
	beep(aS, 250);
    124a:	4a ef       	ldi	r20, 0xFA	; 250
    124c:	50 e0       	ldi	r21, 0x00	; 0
    124e:	67 ec       	ldi	r22, 0xC7	; 199
    1250:	71 e0       	ldi	r23, 0x01	; 1
    1252:	ce 01       	movw	r24, r28
    1254:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(dSH, 400);
    1258:	40 e9       	ldi	r20, 0x90	; 144
    125a:	51 e0       	ldi	r21, 0x01	; 1
    125c:	6e e6       	ldi	r22, 0x6E	; 110
    125e:	72 e0       	ldi	r23, 0x02	; 2
    1260:	ce 01       	movw	r24, r28
    1262:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(dH, 200);
    1266:	48 ec       	ldi	r20, 0xC8	; 200
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	6b e4       	ldi	r22, 0x4B	; 75
    126c:	72 e0       	ldi	r23, 0x02	; 2
    126e:	ce 01       	movw	r24, r28
    1270:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(cSH, 200);
    1274:	48 ec       	ldi	r20, 0xC8	; 200
    1276:	50 e0       	ldi	r21, 0x00	; 0
    1278:	6a e2       	ldi	r22, 0x2A	; 42
    127a:	72 e0       	ldi	r23, 0x02	; 2
    127c:	ce 01       	movw	r24, r28
    127e:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 125);
    1282:	4d e7       	ldi	r20, 0x7D	; 125
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	6b e0       	ldi	r22, 0x0B	; 11
    1288:	72 e0       	ldi	r23, 0x02	; 2
    128a:	ce 01       	movw	r24, r28
    128c:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(b, 125);
    1290:	4d e7       	ldi	r20, 0x7D	; 125
    1292:	50 e0       	ldi	r21, 0x00	; 0
    1294:	62 ed       	ldi	r22, 0xD2	; 210
    1296:	71 e0       	ldi	r23, 0x01	; 1
    1298:	ce 01       	movw	r24, r28
    129a:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 250);
    129e:	4a ef       	ldi	r20, 0xFA	; 250
    12a0:	50 e0       	ldi	r21, 0x00	; 0
    12a2:	6b e0       	ldi	r22, 0x0B	; 11
    12a4:	72 e0       	ldi	r23, 0x02	; 2
    12a6:	ce 01       	movw	r24, r28
    12a8:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
    12ac:	2f ef       	ldi	r18, 0xFF	; 255
    12ae:	89 e6       	ldi	r24, 0x69	; 105
    12b0:	98 e1       	ldi	r25, 0x18	; 24
    12b2:	21 50       	subi	r18, 0x01	; 1
    12b4:	80 40       	sbci	r24, 0x00	; 0
    12b6:	90 40       	sbci	r25, 0x00	; 0
    12b8:	e1 f7       	brne	.-8      	; 0x12b2 <_ZN12CSoundPlayer4PlayEv+0x392>
    12ba:	00 c0       	rjmp	.+0      	; 0x12bc <_ZN12CSoundPlayer4PlayEv+0x39c>
    12bc:	00 00       	nop
	
	_delay_ms(250);
	
	beep(f, 250);
    12be:	4a ef       	ldi	r20, 0xFA	; 250
    12c0:	50 e0       	ldi	r21, 0x00	; 0
    12c2:	6d e5       	ldi	r22, 0x5D	; 93
    12c4:	71 e0       	ldi	r23, 0x01	; 1
    12c6:	ce 01       	movw	r24, r28
    12c8:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(gS, 500);
    12cc:	44 ef       	ldi	r20, 0xF4	; 244
    12ce:	51 e0       	ldi	r21, 0x01	; 1
    12d0:	6f e9       	ldi	r22, 0x9F	; 159
    12d2:	71 e0       	ldi	r23, 0x01	; 1
    12d4:	ce 01       	movw	r24, r28
    12d6:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(f, 375);
    12da:	47 e7       	ldi	r20, 0x77	; 119
    12dc:	51 e0       	ldi	r21, 0x01	; 1
    12de:	6d e5       	ldi	r22, 0x5D	; 93
    12e0:	71 e0       	ldi	r23, 0x01	; 1
    12e2:	ce 01       	movw	r24, r28
    12e4:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 125);
    12e8:	4d e7       	ldi	r20, 0x7D	; 125
    12ea:	50 e0       	ldi	r21, 0x00	; 0
    12ec:	6b e0       	ldi	r22, 0x0B	; 11
    12ee:	72 e0       	ldi	r23, 0x02	; 2
    12f0:	ce 01       	movw	r24, r28
    12f2:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
    12f6:	44 ef       	ldi	r20, 0xF4	; 244
    12f8:	51 e0       	ldi	r21, 0x01	; 1
    12fa:	68 eb       	ldi	r22, 0xB8	; 184
    12fc:	71 e0       	ldi	r23, 0x01	; 1
    12fe:	ce 01       	movw	r24, r28
    1300:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(f, 375);
    1304:	47 e7       	ldi	r20, 0x77	; 119
    1306:	51 e0       	ldi	r21, 0x01	; 1
    1308:	6d e5       	ldi	r22, 0x5D	; 93
    130a:	71 e0       	ldi	r23, 0x01	; 1
    130c:	ce 01       	movw	r24, r28
    130e:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 125);
    1312:	4d e7       	ldi	r20, 0x7D	; 125
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	6b e0       	ldi	r22, 0x0B	; 11
    1318:	72 e0       	ldi	r23, 0x02	; 2
    131a:	ce 01       	movw	r24, r28
    131c:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 650);
    1320:	4a e8       	ldi	r20, 0x8A	; 138
    1322:	52 e0       	ldi	r21, 0x02	; 2
    1324:	68 eb       	ldi	r22, 0xB8	; 184
    1326:	71 e0       	ldi	r23, 0x01	; 1
    1328:	ce 01       	movw	r24, r28
    132a:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN12CSoundPlayer4beepEjj>
	//end of the song

	sei();
    132e:	78 94       	sei
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	08 95       	ret

00001336 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerC::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    1336:	fc 01       	movw	r30, r24
    1338:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    133a:	e0 e0       	ldi	r30, 0x00	; 0
    133c:	f8 e0       	ldi	r31, 0x08	; 8
    133e:	80 81       	ld	r24, Z
    1340:	80 7f       	andi	r24, 0xF0	; 240
    1342:	80 83       	st	Z, r24
	
	// No events
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    1344:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC0.CNT = 0;
    1346:	10 a2       	std	Z+32, r1	; 0x20
    1348:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CCA = 0;
    134a:	10 a6       	std	Z+40, r1	; 0x28
    134c:	11 a6       	std	Z+41, r1	; 0x29
	TCC0.CCB = 0;
    134e:	12 a6       	std	Z+42, r1	; 0x2a
    1350:	13 a6       	std	Z+43, r1	; 0x2b
	TCC0.CCC = 0;
    1352:	14 a6       	std	Z+44, r1	; 0x2c
    1354:	15 a6       	std	Z+45, r1	; 0x2d
	TCC0.CCD = 0;
    1356:	16 a6       	std	Z+46, r1	; 0x2e
    1358:	17 a6       	std	Z+47, r1	; 0x2f
	TCC0.PER = 0;
    135a:	16 a2       	std	Z+38, r1	; 0x26
    135c:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    135e:	81 81       	ldd	r24, Z+1	; 0x01
    1360:	88 7f       	andi	r24, 0xF8	; 248
    1362:	68 2b       	or	r22, r24
    1364:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC0.CTRLA = (TCC0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    1366:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    1368:	17 82       	std	Z+7, r1	; 0x07
    136a:	08 95       	ret

0000136c <_ZN7CTimerC5StartEj>:
}

void CTimerC::Start(uint16_t period)
{
	// Set period of timer
	TCC0.PER = period;
    136c:	e0 e0       	ldi	r30, 0x00	; 0
    136e:	f8 e0       	ldi	r31, 0x08	; 8
    1370:	66 a3       	std	Z+38, r22	; 0x26
    1372:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    1374:	20 81       	ld	r18, Z
    1376:	20 7f       	andi	r18, 0xF0	; 240
    1378:	dc 01       	movw	r26, r24
    137a:	12 96       	adiw	r26, 0x02	; 2
    137c:	9c 91       	ld	r25, X
    137e:	82 2f       	mov	r24, r18
    1380:	89 2b       	or	r24, r25
    1382:	80 83       	st	Z, r24
    1384:	08 95       	ret

00001386 <_ZN7CTimerC4StopEv>:
}

void CTimerC::Stop()
{
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    1386:	e0 e0       	ldi	r30, 0x00	; 0
    1388:	f8 e0       	ldi	r31, 0x08	; 8
    138a:	80 81       	ld	r24, Z
    138c:	80 7f       	andi	r24, 0xF0	; 240
    138e:	80 83       	st	Z, r24
	TCC0.CNT = 0;
    1390:	10 a2       	std	Z+32, r1	; 0x20
    1392:	11 a2       	std	Z+33, r1	; 0x21
    1394:	08 95       	ret

00001396 <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::EnableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB = (TCC0.CTRLB & ~0xF0) | channels;
    1396:	e0 e0       	ldi	r30, 0x00	; 0
    1398:	f8 e0       	ldi	r31, 0x08	; 8
    139a:	81 81       	ldd	r24, Z+1	; 0x01
    139c:	8f 70       	andi	r24, 0x0F	; 15
    139e:	68 2b       	or	r22, r24
    13a0:	61 83       	std	Z+1, r22	; 0x01
    13a2:	08 95       	ret

000013a4 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::DisableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB &= ~channels;
    13a4:	e0 e0       	ldi	r30, 0x00	; 0
    13a6:	f8 e0       	ldi	r31, 0x08	; 8
    13a8:	81 81       	ldd	r24, Z+1	; 0x01
    13aa:	60 95       	com	r22
    13ac:	68 23       	and	r22, r24
    13ae:	61 83       	std	Z+1, r22	; 0x01
    13b0:	08 95       	ret

000013b2 <_ZN7CTimerC9SetPeriodEj>:
}

void CTimerC::SetPeriod(uint16_t value)
{
	TCC0.PER = value;
    13b2:	60 93 26 08 	sts	0x0826, r22
    13b6:	70 93 27 08 	sts	0x0827, r23
    13ba:	08 95       	ret

000013bc <_ZN7CTimerC8SetCOMPAEj>:
}

void CTimerC::SetCOMPA(uint16_t value)
{
	TCC0.CCA = value;
    13bc:	60 93 28 08 	sts	0x0828, r22
    13c0:	70 93 29 08 	sts	0x0829, r23
    13c4:	08 95       	ret

000013c6 <_ZN7CTimerC8SetCOMPBEj>:
}

void CTimerC::SetCOMPB(uint16_t value)
{
	TCC0.CCB = value;
    13c6:	60 93 2a 08 	sts	0x082A, r22
    13ca:	70 93 2b 08 	sts	0x082B, r23
    13ce:	08 95       	ret

000013d0 <_ZN7CTimerC8SetCOMPCEj>:
}

void CTimerC::SetCOMPC(uint16_t value)
{
	TCC0.CCC = value;
    13d0:	60 93 2c 08 	sts	0x082C, r22
    13d4:	70 93 2d 08 	sts	0x082D, r23
    13d8:	08 95       	ret

000013da <_ZN7CTimerC8SetCOMPDEj>:
}

void CTimerC::SetCOMPD(uint16_t value)
{
	TCC0.CCD = value;
    13da:	60 93 2e 08 	sts	0x082E, r22
    13de:	70 93 2f 08 	sts	0x082F, r23
    13e2:	08 95       	ret

000013e4 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    13e4:	61 15       	cp	r22, r1
    13e6:	71 05       	cpc	r23, r1
    13e8:	31 f0       	breq	.+12     	; 0x13f6 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    13ea:	e0 e0       	ldi	r30, 0x00	; 0
    13ec:	f8 e0       	ldi	r31, 0x08	; 8
    13ee:	86 81       	ldd	r24, Z+6	; 0x06
    13f0:	83 70       	andi	r24, 0x03	; 3
    13f2:	28 2b       	or	r18, r24
    13f4:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCC0_OVF_vect_num] = func;
    13f6:	60 93 0d 21 	sts	0x210D, r22
    13fa:	70 93 0e 21 	sts	0x210E, r23
	InterruptSenderTable[TCC0_OVF_vect_num] = owner;
    13fe:	40 93 03 22 	sts	0x2203, r20
    1402:	50 93 04 22 	sts	0x2204, r21
    1406:	08 95       	ret

00001408 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    1408:	61 15       	cp	r22, r1
    140a:	71 05       	cpc	r23, r1
    140c:	31 f0       	breq	.+12     	; 0x141a <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    140e:	e0 e0       	ldi	r30, 0x00	; 0
    1410:	f8 e0       	ldi	r31, 0x08	; 8
    1412:	86 81       	ldd	r24, Z+6	; 0x06
    1414:	8c 70       	andi	r24, 0x0C	; 12
    1416:	28 2b       	or	r18, r24
    1418:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC0_ERR_vect_num] = func;
    141a:	60 93 0f 21 	sts	0x210F, r22
    141e:	70 93 10 21 	sts	0x2110, r23
	InterruptSenderTable[TCC0_ERR_vect_num] = owner;
    1422:	40 93 05 22 	sts	0x2205, r20
    1426:	50 93 06 22 	sts	0x2206, r21
    142a:	08 95       	ret

0000142c <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    142c:	61 15       	cp	r22, r1
    142e:	71 05       	cpc	r23, r1
    1430:	31 f0       	breq	.+12     	; 0x143e <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    1432:	e0 e0       	ldi	r30, 0x00	; 0
    1434:	f8 e0       	ldi	r31, 0x08	; 8
    1436:	87 81       	ldd	r24, Z+7	; 0x07
    1438:	83 70       	andi	r24, 0x03	; 3
    143a:	28 2b       	or	r18, r24
    143c:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCA_vect_num] = func;
    143e:	60 93 11 21 	sts	0x2111, r22
    1442:	70 93 12 21 	sts	0x2112, r23
	InterruptSenderTable[TCC0_CCA_vect_num] = owner;
    1446:	40 93 07 22 	sts	0x2207, r20
    144a:	50 93 08 22 	sts	0x2208, r21
    144e:	08 95       	ret

00001450 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    1450:	61 15       	cp	r22, r1
    1452:	71 05       	cpc	r23, r1
    1454:	31 f0       	breq	.+12     	; 0x1462 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    1456:	e0 e0       	ldi	r30, 0x00	; 0
    1458:	f8 e0       	ldi	r31, 0x08	; 8
    145a:	87 81       	ldd	r24, Z+7	; 0x07
    145c:	8c 70       	andi	r24, 0x0C	; 12
    145e:	28 2b       	or	r18, r24
    1460:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCB_vect_num] = func;
    1462:	60 93 13 21 	sts	0x2113, r22
    1466:	70 93 14 21 	sts	0x2114, r23
	InterruptSenderTable[TCC0_CCB_vect_num] = owner;
    146a:	40 93 09 22 	sts	0x2209, r20
    146e:	50 93 0a 22 	sts	0x220A, r21
    1472:	08 95       	ret

00001474 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerC::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    1474:	61 15       	cp	r22, r1
    1476:	71 05       	cpc	r23, r1
    1478:	31 f0       	breq	.+12     	; 0x1486 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    147a:	e0 e0       	ldi	r30, 0x00	; 0
    147c:	f8 e0       	ldi	r31, 0x08	; 8
    147e:	87 81       	ldd	r24, Z+7	; 0x07
    1480:	80 73       	andi	r24, 0x30	; 48
    1482:	28 2b       	or	r18, r24
    1484:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCC_vect_num] = func;
    1486:	60 93 15 21 	sts	0x2115, r22
    148a:	70 93 16 21 	sts	0x2116, r23
	InterruptSenderTable[TCC0_CCC_vect_num] = owner;
    148e:	40 93 0b 22 	sts	0x220B, r20
    1492:	50 93 0c 22 	sts	0x220C, r21
    1496:	08 95       	ret

00001498 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerC::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    1498:	61 15       	cp	r22, r1
    149a:	71 05       	cpc	r23, r1
    149c:	31 f0       	breq	.+12     	; 0x14aa <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    149e:	e0 e0       	ldi	r30, 0x00	; 0
    14a0:	f8 e0       	ldi	r31, 0x08	; 8
    14a2:	87 81       	ldd	r24, Z+7	; 0x07
    14a4:	80 7c       	andi	r24, 0xC0	; 192
    14a6:	28 2b       	or	r18, r24
    14a8:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCD_vect_num] = func;
    14aa:	60 93 17 21 	sts	0x2117, r22
    14ae:	70 93 18 21 	sts	0x2118, r23
	InterruptSenderTable[TCC0_CCD_vect_num] = owner;
    14b2:	40 93 0d 22 	sts	0x220D, r20
    14b6:	50 93 0e 22 	sts	0x220E, r21
    14ba:	08 95       	ret

000014bc <_ZN7CTimerCC1Ev>:

#include "CTimerC.h"
#include "LaserLib/intx128.h"

// default constructor
CTimerC::CTimerC()
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	ec 01       	movw	r28, r24
    14c2:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <_ZN6CTimerC1Ev>
    14c6:	8b e7       	ldi	r24, 0x7B	; 123
    14c8:	90 e2       	ldi	r25, 0x20	; 32
    14ca:	88 83       	st	Y, r24
    14cc:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	08 95       	ret

000014d4 <_ZN7CTimerCD1Ev>:

// default destructor
CTimerC::~CTimerC()
    14d4:	2b e7       	ldi	r18, 0x7B	; 123
    14d6:	30 e2       	ldi	r19, 0x20	; 32
    14d8:	fc 01       	movw	r30, r24
    14da:	20 83       	st	Z, r18
    14dc:	31 83       	std	Z+1, r19	; 0x01
    14de:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <_ZN6CTimerD1Ev>
    14e2:	08 95       	ret

000014e4 <_ZN4CSPIC1Ev>:
#include <avr/io.h>
#include <stdlib.h>
#include <string.h>

// default constructor
CSPI::CSPI()
    14e4:	08 95       	ret

000014e6 <_ZN4CSPID1Ev>:
{
} //CSPI

// default destructor
CSPI::~CSPI()
    14e6:	08 95       	ret

000014e8 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>:
{
} //~CSPI

void CSPI::Initialize(bool Master, SPI_DATA_ORDER dord, SPI_MODE mode, bool doubleClk, SPI_PRESCALER_t prescaler)
{
    14e8:	ef 92       	push	r14
    14ea:	0f 93       	push	r16
    14ec:	1f 93       	push	r17
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
    14f2:	ec 01       	movw	r28, r24
	PORTE.DIRSET = PIN4_bm | PIN5_bm | PIN7_bm; // MOSI, nSS, SCK to out
    14f4:	e0 e8       	ldi	r30, 0x80	; 128
    14f6:	f6 e0       	ldi	r31, 0x06	; 6
    14f8:	80 eb       	ldi	r24, 0xB0	; 176
    14fa:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRCLR = PIN6_bm;						// MISO to in
    14fc:	90 e4       	ldi	r25, 0x40	; 64
    14fe:	92 83       	std	Z+2, r25	; 0x02
	
	// All slew rate limit enable with inverting
	PORTE.PIN4CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    1500:	90 ec       	ldi	r25, 0xC0	; 192
    1502:	94 8b       	std	Z+20, r25	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    1504:	95 8b       	std	Z+21, r25	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    1506:	96 8b       	std	Z+22, r25	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    1508:	97 8b       	std	Z+23, r25	; 0x17
	
	// Set high
	PORTE.OUTSET = PIN4_bm | PIN5_bm | PIN7_bm;
    150a:	85 83       	std	Z+5, r24	; 0x05
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
		prescaler;
    150c:	61 11       	cpse	r22, r1
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2c>
    1510:	80 e4       	ldi	r24, 0x40	; 64
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2e>
    1514:	80 e5       	ldi	r24, 0x50	; 80
    1516:	01 11       	cpse	r16, r1
    1518:	02 c0       	rjmp	.+4      	; 0x151e <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x36>
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	01 c0       	rjmp	.+2      	; 0x1520 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x38>
    151e:	30 e8       	ldi	r19, 0x80	; 128
    1520:	41 11       	cpse	r20, r1
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x40>
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	01 c0       	rjmp	.+2      	; 0x152a <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x42>
    1528:	90 e2       	ldi	r25, 0x20	; 32
	SPIE.CTRL = 
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
    152a:	22 0f       	add	r18, r18
    152c:	22 0f       	add	r18, r18
    152e:	e2 2a       	or	r14, r18
    1530:	e8 2a       	or	r14, r24
    1532:	e3 2a       	or	r14, r19
		prescaler;
    1534:	e9 2a       	or	r14, r25
    1536:	00 ec       	ldi	r16, 0xC0	; 192
    1538:	1a e0       	ldi	r17, 0x0A	; 10
    153a:	f8 01       	movw	r30, r16
    153c:	e0 82       	st	Z, r14
		
	// Allocate transmit buffer
	buffer = (uint8_t*)malloc(256);
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	91 e0       	ldi	r25, 0x01	; 1
    1542:	0e 94 9b 22 	call	0x4536	; 0x4536 <malloc>
    1546:	88 83       	st	Y, r24
    1548:	99 83       	std	Y+1, r25	; 0x01
	
	// Enable interrupt
	SPIE.INTCTRL = SPI_INTLVL_LO_gc;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	f8 01       	movw	r30, r16
    154e:	81 83       	std	Z+1, r24	; 0x01
	
	// Set interrupts
	InterruptFuncTable[SPIE_INT_vect_num] = StaticOnTransmit;
    1550:	80 ed       	ldi	r24, 0xD0	; 208
    1552:	9a e0       	ldi	r25, 0x0A	; 10
    1554:	80 93 63 21 	sts	0x2163, r24
    1558:	90 93 64 21 	sts	0x2164, r25
	InterruptSenderTable[SPIE_INT_vect_num] = this;
    155c:	c0 93 59 22 	sts	0x2259, r28
    1560:	d0 93 5a 22 	sts	0x225A, r29
}
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ef 90       	pop	r14
    156e:	08 95       	ret

00001570 <_ZN4CSPI10OnTransmitEv>:
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
}

void CSPI::OnTransmit()
{
    1570:	fc 01       	movw	r30, r24
	if (rx_pos != 0)
    1572:	82 81       	ldd	r24, Z+2	; 0x02
    1574:	93 81       	ldd	r25, Z+3	; 0x03
    1576:	89 2b       	or	r24, r25
    1578:	79 f0       	breq	.+30     	; 0x1598 <_ZN4CSPI10OnTransmitEv+0x28>
		SPIE.DATA = buffer[--rx_pos];
    157a:	40 81       	ld	r20, Z
    157c:	51 81       	ldd	r21, Z+1	; 0x01
    157e:	22 81       	ldd	r18, Z+2	; 0x02
    1580:	33 81       	ldd	r19, Z+3	; 0x03
    1582:	c9 01       	movw	r24, r18
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	82 83       	std	Z+2, r24	; 0x02
    1588:	93 83       	std	Z+3, r25	; 0x03
    158a:	fa 01       	movw	r30, r20
    158c:	e8 0f       	add	r30, r24
    158e:	f9 1f       	adc	r31, r25
    1590:	80 81       	ld	r24, Z
    1592:	80 93 c3 0a 	sts	0x0AC3, r24
    1596:	08 95       	ret
	else
		PORTE.OUTSET = PIN4_bm;
    1598:	80 e1       	ldi	r24, 0x10	; 16
    159a:	80 93 85 06 	sts	0x0685, r24
    159e:	08 95       	ret

000015a0 <_ZN4CSPI16StaticOnTransmitEPv>:
}

void CSPI::StaticOnTransmit(void* sender)
{
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
    15a0:	0e 94 b8 0a 	call	0x1570	; 0x1570 <_ZN4CSPI10OnTransmitEv>
    15a4:	08 95       	ret

000015a6 <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
    15a6:	2f e9       	ldi	r18, 0x9F	; 159
    15a8:	30 e2       	ldi	r19, 0x20	; 32
    15aa:	fc 01       	movw	r30, r24
    15ac:	20 83       	st	Z, r18
    15ae:	31 83       	std	Z+1, r19	; 0x01
    15b0:	08 95       	ret

000015b2 <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
    15b2:	08 95       	ret

000015b4 <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
    15b4:	23 ec       	ldi	r18, 0xC3	; 195
    15b6:	30 e2       	ldi	r19, 0x20	; 32
    15b8:	fc 01       	movw	r30, r24
    15ba:	20 83       	st	Z, r18
    15bc:	31 83       	std	Z+1, r19	; 0x01
    15be:	08 95       	ret

000015c0 <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
    15c0:	08 95       	ret

000015c2 <__vector_1>:
		if (InterruptFuncTable[vector_id##_num] != 0)										\
		(*(InterruptFuncTable[vector_id##_num]))(InterruptSenderTable[vector_id##_num]);	\
	}

/* OSC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(OSC_OSCF_vect)      /* External Oscillator Failure Interrupt (NMI) */
    15c2:	1f 92       	push	r1
    15c4:	0f 92       	push	r0
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	0f 92       	push	r0
    15ca:	11 24       	eor	r1, r1
    15cc:	0b b6       	in	r0, 0x3b	; 59
    15ce:	0f 92       	push	r0
    15d0:	2f 93       	push	r18
    15d2:	3f 93       	push	r19
    15d4:	4f 93       	push	r20
    15d6:	5f 93       	push	r21
    15d8:	6f 93       	push	r22
    15da:	7f 93       	push	r23
    15dc:	8f 93       	push	r24
    15de:	9f 93       	push	r25
    15e0:	af 93       	push	r26
    15e2:	bf 93       	push	r27
    15e4:	ef 93       	push	r30
    15e6:	ff 93       	push	r31
    15e8:	e0 91 f3 20 	lds	r30, 0x20F3
    15ec:	f0 91 f4 20 	lds	r31, 0x20F4
    15f0:	30 97       	sbiw	r30, 0x00	; 0
    15f2:	29 f0       	breq	.+10     	; 0x15fe <__vector_1+0x3c>
    15f4:	80 91 e9 21 	lds	r24, 0x21E9
    15f8:	90 91 ea 21 	lds	r25, 0x21EA
    15fc:	19 95       	eicall
    15fe:	ff 91       	pop	r31
    1600:	ef 91       	pop	r30
    1602:	bf 91       	pop	r27
    1604:	af 91       	pop	r26
    1606:	9f 91       	pop	r25
    1608:	8f 91       	pop	r24
    160a:	7f 91       	pop	r23
    160c:	6f 91       	pop	r22
    160e:	5f 91       	pop	r21
    1610:	4f 91       	pop	r20
    1612:	3f 91       	pop	r19
    1614:	2f 91       	pop	r18
    1616:	0f 90       	pop	r0
    1618:	0b be       	out	0x3b, r0	; 59
    161a:	0f 90       	pop	r0
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	0f 90       	pop	r0
    1620:	1f 90       	pop	r1
    1622:	18 95       	reti

00001624 <__vector_2>:

/* PORTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT0_vect)      /* External Interrupt 0 */
    1624:	1f 92       	push	r1
    1626:	0f 92       	push	r0
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	0f 92       	push	r0
    162c:	11 24       	eor	r1, r1
    162e:	0b b6       	in	r0, 0x3b	; 59
    1630:	0f 92       	push	r0
    1632:	2f 93       	push	r18
    1634:	3f 93       	push	r19
    1636:	4f 93       	push	r20
    1638:	5f 93       	push	r21
    163a:	6f 93       	push	r22
    163c:	7f 93       	push	r23
    163e:	8f 93       	push	r24
    1640:	9f 93       	push	r25
    1642:	af 93       	push	r26
    1644:	bf 93       	push	r27
    1646:	ef 93       	push	r30
    1648:	ff 93       	push	r31
    164a:	e0 91 f5 20 	lds	r30, 0x20F5
    164e:	f0 91 f6 20 	lds	r31, 0x20F6
    1652:	30 97       	sbiw	r30, 0x00	; 0
    1654:	29 f0       	breq	.+10     	; 0x1660 <__vector_2+0x3c>
    1656:	80 91 eb 21 	lds	r24, 0x21EB
    165a:	90 91 ec 21 	lds	r25, 0x21EC
    165e:	19 95       	eicall
    1660:	ff 91       	pop	r31
    1662:	ef 91       	pop	r30
    1664:	bf 91       	pop	r27
    1666:	af 91       	pop	r26
    1668:	9f 91       	pop	r25
    166a:	8f 91       	pop	r24
    166c:	7f 91       	pop	r23
    166e:	6f 91       	pop	r22
    1670:	5f 91       	pop	r21
    1672:	4f 91       	pop	r20
    1674:	3f 91       	pop	r19
    1676:	2f 91       	pop	r18
    1678:	0f 90       	pop	r0
    167a:	0b be       	out	0x3b, r0	; 59
    167c:	0f 90       	pop	r0
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	0f 90       	pop	r0
    1682:	1f 90       	pop	r1
    1684:	18 95       	reti

00001686 <__vector_3>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT1_vect)      /* External Interrupt 1 */
    1686:	1f 92       	push	r1
    1688:	0f 92       	push	r0
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	0f 92       	push	r0
    168e:	11 24       	eor	r1, r1
    1690:	0b b6       	in	r0, 0x3b	; 59
    1692:	0f 92       	push	r0
    1694:	2f 93       	push	r18
    1696:	3f 93       	push	r19
    1698:	4f 93       	push	r20
    169a:	5f 93       	push	r21
    169c:	6f 93       	push	r22
    169e:	7f 93       	push	r23
    16a0:	8f 93       	push	r24
    16a2:	9f 93       	push	r25
    16a4:	af 93       	push	r26
    16a6:	bf 93       	push	r27
    16a8:	ef 93       	push	r30
    16aa:	ff 93       	push	r31
    16ac:	e0 91 f7 20 	lds	r30, 0x20F7
    16b0:	f0 91 f8 20 	lds	r31, 0x20F8
    16b4:	30 97       	sbiw	r30, 0x00	; 0
    16b6:	29 f0       	breq	.+10     	; 0x16c2 <__vector_3+0x3c>
    16b8:	80 91 ed 21 	lds	r24, 0x21ED
    16bc:	90 91 ee 21 	lds	r25, 0x21EE
    16c0:	19 95       	eicall
    16c2:	ff 91       	pop	r31
    16c4:	ef 91       	pop	r30
    16c6:	bf 91       	pop	r27
    16c8:	af 91       	pop	r26
    16ca:	9f 91       	pop	r25
    16cc:	8f 91       	pop	r24
    16ce:	7f 91       	pop	r23
    16d0:	6f 91       	pop	r22
    16d2:	5f 91       	pop	r21
    16d4:	4f 91       	pop	r20
    16d6:	3f 91       	pop	r19
    16d8:	2f 91       	pop	r18
    16da:	0f 90       	pop	r0
    16dc:	0b be       	out	0x3b, r0	; 59
    16de:	0f 90       	pop	r0
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	0f 90       	pop	r0
    16e4:	1f 90       	pop	r1
    16e6:	18 95       	reti

000016e8 <__vector_4>:

/* PORTR interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT0_vect)      /* External Interrupt 0 */
    16e8:	1f 92       	push	r1
    16ea:	0f 92       	push	r0
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	0f 92       	push	r0
    16f0:	11 24       	eor	r1, r1
    16f2:	0b b6       	in	r0, 0x3b	; 59
    16f4:	0f 92       	push	r0
    16f6:	2f 93       	push	r18
    16f8:	3f 93       	push	r19
    16fa:	4f 93       	push	r20
    16fc:	5f 93       	push	r21
    16fe:	6f 93       	push	r22
    1700:	7f 93       	push	r23
    1702:	8f 93       	push	r24
    1704:	9f 93       	push	r25
    1706:	af 93       	push	r26
    1708:	bf 93       	push	r27
    170a:	ef 93       	push	r30
    170c:	ff 93       	push	r31
    170e:	e0 91 f9 20 	lds	r30, 0x20F9
    1712:	f0 91 fa 20 	lds	r31, 0x20FA
    1716:	30 97       	sbiw	r30, 0x00	; 0
    1718:	29 f0       	breq	.+10     	; 0x1724 <__vector_4+0x3c>
    171a:	80 91 ef 21 	lds	r24, 0x21EF
    171e:	90 91 f0 21 	lds	r25, 0x21F0
    1722:	19 95       	eicall
    1724:	ff 91       	pop	r31
    1726:	ef 91       	pop	r30
    1728:	bf 91       	pop	r27
    172a:	af 91       	pop	r26
    172c:	9f 91       	pop	r25
    172e:	8f 91       	pop	r24
    1730:	7f 91       	pop	r23
    1732:	6f 91       	pop	r22
    1734:	5f 91       	pop	r21
    1736:	4f 91       	pop	r20
    1738:	3f 91       	pop	r19
    173a:	2f 91       	pop	r18
    173c:	0f 90       	pop	r0
    173e:	0b be       	out	0x3b, r0	; 59
    1740:	0f 90       	pop	r0
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	0f 90       	pop	r0
    1746:	1f 90       	pop	r1
    1748:	18 95       	reti

0000174a <__vector_5>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT1_vect)      /* External Interrupt 1 */
    174a:	1f 92       	push	r1
    174c:	0f 92       	push	r0
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	0f 92       	push	r0
    1752:	11 24       	eor	r1, r1
    1754:	0b b6       	in	r0, 0x3b	; 59
    1756:	0f 92       	push	r0
    1758:	2f 93       	push	r18
    175a:	3f 93       	push	r19
    175c:	4f 93       	push	r20
    175e:	5f 93       	push	r21
    1760:	6f 93       	push	r22
    1762:	7f 93       	push	r23
    1764:	8f 93       	push	r24
    1766:	9f 93       	push	r25
    1768:	af 93       	push	r26
    176a:	bf 93       	push	r27
    176c:	ef 93       	push	r30
    176e:	ff 93       	push	r31
    1770:	e0 91 fb 20 	lds	r30, 0x20FB
    1774:	f0 91 fc 20 	lds	r31, 0x20FC
    1778:	30 97       	sbiw	r30, 0x00	; 0
    177a:	29 f0       	breq	.+10     	; 0x1786 <__vector_5+0x3c>
    177c:	80 91 f1 21 	lds	r24, 0x21F1
    1780:	90 91 f2 21 	lds	r25, 0x21F2
    1784:	19 95       	eicall
    1786:	ff 91       	pop	r31
    1788:	ef 91       	pop	r30
    178a:	bf 91       	pop	r27
    178c:	af 91       	pop	r26
    178e:	9f 91       	pop	r25
    1790:	8f 91       	pop	r24
    1792:	7f 91       	pop	r23
    1794:	6f 91       	pop	r22
    1796:	5f 91       	pop	r21
    1798:	4f 91       	pop	r20
    179a:	3f 91       	pop	r19
    179c:	2f 91       	pop	r18
    179e:	0f 90       	pop	r0
    17a0:	0b be       	out	0x3b, r0	; 59
    17a2:	0f 90       	pop	r0
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	0f 90       	pop	r0
    17a8:	1f 90       	pop	r1
    17aa:	18 95       	reti

000017ac <__vector_6>:

/* DMA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH0_vect)      /* Channel 0 Interrupt */
    17ac:	1f 92       	push	r1
    17ae:	0f 92       	push	r0
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	0f 92       	push	r0
    17b4:	11 24       	eor	r1, r1
    17b6:	0b b6       	in	r0, 0x3b	; 59
    17b8:	0f 92       	push	r0
    17ba:	2f 93       	push	r18
    17bc:	3f 93       	push	r19
    17be:	4f 93       	push	r20
    17c0:	5f 93       	push	r21
    17c2:	6f 93       	push	r22
    17c4:	7f 93       	push	r23
    17c6:	8f 93       	push	r24
    17c8:	9f 93       	push	r25
    17ca:	af 93       	push	r26
    17cc:	bf 93       	push	r27
    17ce:	ef 93       	push	r30
    17d0:	ff 93       	push	r31
    17d2:	e0 91 fd 20 	lds	r30, 0x20FD
    17d6:	f0 91 fe 20 	lds	r31, 0x20FE
    17da:	30 97       	sbiw	r30, 0x00	; 0
    17dc:	29 f0       	breq	.+10     	; 0x17e8 <__vector_6+0x3c>
    17de:	80 91 f3 21 	lds	r24, 0x21F3
    17e2:	90 91 f4 21 	lds	r25, 0x21F4
    17e6:	19 95       	eicall
    17e8:	ff 91       	pop	r31
    17ea:	ef 91       	pop	r30
    17ec:	bf 91       	pop	r27
    17ee:	af 91       	pop	r26
    17f0:	9f 91       	pop	r25
    17f2:	8f 91       	pop	r24
    17f4:	7f 91       	pop	r23
    17f6:	6f 91       	pop	r22
    17f8:	5f 91       	pop	r21
    17fa:	4f 91       	pop	r20
    17fc:	3f 91       	pop	r19
    17fe:	2f 91       	pop	r18
    1800:	0f 90       	pop	r0
    1802:	0b be       	out	0x3b, r0	; 59
    1804:	0f 90       	pop	r0
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	0f 90       	pop	r0
    180a:	1f 90       	pop	r1
    180c:	18 95       	reti

0000180e <__vector_7>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH1_vect)      /* Channel 1 Interrupt */
    180e:	1f 92       	push	r1
    1810:	0f 92       	push	r0
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	0f 92       	push	r0
    1816:	11 24       	eor	r1, r1
    1818:	0b b6       	in	r0, 0x3b	; 59
    181a:	0f 92       	push	r0
    181c:	2f 93       	push	r18
    181e:	3f 93       	push	r19
    1820:	4f 93       	push	r20
    1822:	5f 93       	push	r21
    1824:	6f 93       	push	r22
    1826:	7f 93       	push	r23
    1828:	8f 93       	push	r24
    182a:	9f 93       	push	r25
    182c:	af 93       	push	r26
    182e:	bf 93       	push	r27
    1830:	ef 93       	push	r30
    1832:	ff 93       	push	r31
    1834:	e0 91 ff 20 	lds	r30, 0x20FF
    1838:	f0 91 00 21 	lds	r31, 0x2100
    183c:	30 97       	sbiw	r30, 0x00	; 0
    183e:	29 f0       	breq	.+10     	; 0x184a <__vector_7+0x3c>
    1840:	80 91 f5 21 	lds	r24, 0x21F5
    1844:	90 91 f6 21 	lds	r25, 0x21F6
    1848:	19 95       	eicall
    184a:	ff 91       	pop	r31
    184c:	ef 91       	pop	r30
    184e:	bf 91       	pop	r27
    1850:	af 91       	pop	r26
    1852:	9f 91       	pop	r25
    1854:	8f 91       	pop	r24
    1856:	7f 91       	pop	r23
    1858:	6f 91       	pop	r22
    185a:	5f 91       	pop	r21
    185c:	4f 91       	pop	r20
    185e:	3f 91       	pop	r19
    1860:	2f 91       	pop	r18
    1862:	0f 90       	pop	r0
    1864:	0b be       	out	0x3b, r0	; 59
    1866:	0f 90       	pop	r0
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	0f 90       	pop	r0
    186c:	1f 90       	pop	r1
    186e:	18 95       	reti

00001870 <__vector_8>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH2_vect)      /* Channel 2 Interrupt */
    1870:	1f 92       	push	r1
    1872:	0f 92       	push	r0
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	0f 92       	push	r0
    1878:	11 24       	eor	r1, r1
    187a:	0b b6       	in	r0, 0x3b	; 59
    187c:	0f 92       	push	r0
    187e:	2f 93       	push	r18
    1880:	3f 93       	push	r19
    1882:	4f 93       	push	r20
    1884:	5f 93       	push	r21
    1886:	6f 93       	push	r22
    1888:	7f 93       	push	r23
    188a:	8f 93       	push	r24
    188c:	9f 93       	push	r25
    188e:	af 93       	push	r26
    1890:	bf 93       	push	r27
    1892:	ef 93       	push	r30
    1894:	ff 93       	push	r31
    1896:	e0 91 01 21 	lds	r30, 0x2101
    189a:	f0 91 02 21 	lds	r31, 0x2102
    189e:	30 97       	sbiw	r30, 0x00	; 0
    18a0:	29 f0       	breq	.+10     	; 0x18ac <__vector_8+0x3c>
    18a2:	80 91 f7 21 	lds	r24, 0x21F7
    18a6:	90 91 f8 21 	lds	r25, 0x21F8
    18aa:	19 95       	eicall
    18ac:	ff 91       	pop	r31
    18ae:	ef 91       	pop	r30
    18b0:	bf 91       	pop	r27
    18b2:	af 91       	pop	r26
    18b4:	9f 91       	pop	r25
    18b6:	8f 91       	pop	r24
    18b8:	7f 91       	pop	r23
    18ba:	6f 91       	pop	r22
    18bc:	5f 91       	pop	r21
    18be:	4f 91       	pop	r20
    18c0:	3f 91       	pop	r19
    18c2:	2f 91       	pop	r18
    18c4:	0f 90       	pop	r0
    18c6:	0b be       	out	0x3b, r0	; 59
    18c8:	0f 90       	pop	r0
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	0f 90       	pop	r0
    18ce:	1f 90       	pop	r1
    18d0:	18 95       	reti

000018d2 <__vector_9>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH3_vect)      /* Channel 3 Interrupt */
    18d2:	1f 92       	push	r1
    18d4:	0f 92       	push	r0
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	0f 92       	push	r0
    18da:	11 24       	eor	r1, r1
    18dc:	0b b6       	in	r0, 0x3b	; 59
    18de:	0f 92       	push	r0
    18e0:	2f 93       	push	r18
    18e2:	3f 93       	push	r19
    18e4:	4f 93       	push	r20
    18e6:	5f 93       	push	r21
    18e8:	6f 93       	push	r22
    18ea:	7f 93       	push	r23
    18ec:	8f 93       	push	r24
    18ee:	9f 93       	push	r25
    18f0:	af 93       	push	r26
    18f2:	bf 93       	push	r27
    18f4:	ef 93       	push	r30
    18f6:	ff 93       	push	r31
    18f8:	e0 91 03 21 	lds	r30, 0x2103
    18fc:	f0 91 04 21 	lds	r31, 0x2104
    1900:	30 97       	sbiw	r30, 0x00	; 0
    1902:	29 f0       	breq	.+10     	; 0x190e <__vector_9+0x3c>
    1904:	80 91 f9 21 	lds	r24, 0x21F9
    1908:	90 91 fa 21 	lds	r25, 0x21FA
    190c:	19 95       	eicall
    190e:	ff 91       	pop	r31
    1910:	ef 91       	pop	r30
    1912:	bf 91       	pop	r27
    1914:	af 91       	pop	r26
    1916:	9f 91       	pop	r25
    1918:	8f 91       	pop	r24
    191a:	7f 91       	pop	r23
    191c:	6f 91       	pop	r22
    191e:	5f 91       	pop	r21
    1920:	4f 91       	pop	r20
    1922:	3f 91       	pop	r19
    1924:	2f 91       	pop	r18
    1926:	0f 90       	pop	r0
    1928:	0b be       	out	0x3b, r0	; 59
    192a:	0f 90       	pop	r0
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	0f 90       	pop	r0
    1930:	1f 90       	pop	r1
    1932:	18 95       	reti

00001934 <__vector_10>:

/* RTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_OVF_vect)      /* Overflow Interrupt */
    1934:	1f 92       	push	r1
    1936:	0f 92       	push	r0
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	0f 92       	push	r0
    193c:	11 24       	eor	r1, r1
    193e:	0b b6       	in	r0, 0x3b	; 59
    1940:	0f 92       	push	r0
    1942:	2f 93       	push	r18
    1944:	3f 93       	push	r19
    1946:	4f 93       	push	r20
    1948:	5f 93       	push	r21
    194a:	6f 93       	push	r22
    194c:	7f 93       	push	r23
    194e:	8f 93       	push	r24
    1950:	9f 93       	push	r25
    1952:	af 93       	push	r26
    1954:	bf 93       	push	r27
    1956:	ef 93       	push	r30
    1958:	ff 93       	push	r31
    195a:	e0 91 05 21 	lds	r30, 0x2105
    195e:	f0 91 06 21 	lds	r31, 0x2106
    1962:	30 97       	sbiw	r30, 0x00	; 0
    1964:	29 f0       	breq	.+10     	; 0x1970 <__vector_10+0x3c>
    1966:	80 91 fb 21 	lds	r24, 0x21FB
    196a:	90 91 fc 21 	lds	r25, 0x21FC
    196e:	19 95       	eicall
    1970:	ff 91       	pop	r31
    1972:	ef 91       	pop	r30
    1974:	bf 91       	pop	r27
    1976:	af 91       	pop	r26
    1978:	9f 91       	pop	r25
    197a:	8f 91       	pop	r24
    197c:	7f 91       	pop	r23
    197e:	6f 91       	pop	r22
    1980:	5f 91       	pop	r21
    1982:	4f 91       	pop	r20
    1984:	3f 91       	pop	r19
    1986:	2f 91       	pop	r18
    1988:	0f 90       	pop	r0
    198a:	0b be       	out	0x3b, r0	; 59
    198c:	0f 90       	pop	r0
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	0f 90       	pop	r0
    1992:	1f 90       	pop	r1
    1994:	18 95       	reti

00001996 <__vector_11>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_COMP_vect)      /* Compare Interrupt */
    1996:	1f 92       	push	r1
    1998:	0f 92       	push	r0
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	0f 92       	push	r0
    199e:	11 24       	eor	r1, r1
    19a0:	0b b6       	in	r0, 0x3b	; 59
    19a2:	0f 92       	push	r0
    19a4:	2f 93       	push	r18
    19a6:	3f 93       	push	r19
    19a8:	4f 93       	push	r20
    19aa:	5f 93       	push	r21
    19ac:	6f 93       	push	r22
    19ae:	7f 93       	push	r23
    19b0:	8f 93       	push	r24
    19b2:	9f 93       	push	r25
    19b4:	af 93       	push	r26
    19b6:	bf 93       	push	r27
    19b8:	ef 93       	push	r30
    19ba:	ff 93       	push	r31
    19bc:	e0 91 07 21 	lds	r30, 0x2107
    19c0:	f0 91 08 21 	lds	r31, 0x2108
    19c4:	30 97       	sbiw	r30, 0x00	; 0
    19c6:	29 f0       	breq	.+10     	; 0x19d2 <__vector_11+0x3c>
    19c8:	80 91 fd 21 	lds	r24, 0x21FD
    19cc:	90 91 fe 21 	lds	r25, 0x21FE
    19d0:	19 95       	eicall
    19d2:	ff 91       	pop	r31
    19d4:	ef 91       	pop	r30
    19d6:	bf 91       	pop	r27
    19d8:	af 91       	pop	r26
    19da:	9f 91       	pop	r25
    19dc:	8f 91       	pop	r24
    19de:	7f 91       	pop	r23
    19e0:	6f 91       	pop	r22
    19e2:	5f 91       	pop	r21
    19e4:	4f 91       	pop	r20
    19e6:	3f 91       	pop	r19
    19e8:	2f 91       	pop	r18
    19ea:	0f 90       	pop	r0
    19ec:	0b be       	out	0x3b, r0	; 59
    19ee:	0f 90       	pop	r0
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	0f 90       	pop	r0
    19f4:	1f 90       	pop	r1
    19f6:	18 95       	reti

000019f8 <__vector_12>:

/* TWIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIS_vect)      /* TWI Slave Interrupt */
    19f8:	1f 92       	push	r1
    19fa:	0f 92       	push	r0
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	0f 92       	push	r0
    1a00:	11 24       	eor	r1, r1
    1a02:	0b b6       	in	r0, 0x3b	; 59
    1a04:	0f 92       	push	r0
    1a06:	2f 93       	push	r18
    1a08:	3f 93       	push	r19
    1a0a:	4f 93       	push	r20
    1a0c:	5f 93       	push	r21
    1a0e:	6f 93       	push	r22
    1a10:	7f 93       	push	r23
    1a12:	8f 93       	push	r24
    1a14:	9f 93       	push	r25
    1a16:	af 93       	push	r26
    1a18:	bf 93       	push	r27
    1a1a:	ef 93       	push	r30
    1a1c:	ff 93       	push	r31
    1a1e:	e0 91 09 21 	lds	r30, 0x2109
    1a22:	f0 91 0a 21 	lds	r31, 0x210A
    1a26:	30 97       	sbiw	r30, 0x00	; 0
    1a28:	29 f0       	breq	.+10     	; 0x1a34 <__vector_12+0x3c>
    1a2a:	80 91 ff 21 	lds	r24, 0x21FF
    1a2e:	90 91 00 22 	lds	r25, 0x2200
    1a32:	19 95       	eicall
    1a34:	ff 91       	pop	r31
    1a36:	ef 91       	pop	r30
    1a38:	bf 91       	pop	r27
    1a3a:	af 91       	pop	r26
    1a3c:	9f 91       	pop	r25
    1a3e:	8f 91       	pop	r24
    1a40:	7f 91       	pop	r23
    1a42:	6f 91       	pop	r22
    1a44:	5f 91       	pop	r21
    1a46:	4f 91       	pop	r20
    1a48:	3f 91       	pop	r19
    1a4a:	2f 91       	pop	r18
    1a4c:	0f 90       	pop	r0
    1a4e:	0b be       	out	0x3b, r0	; 59
    1a50:	0f 90       	pop	r0
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	0f 90       	pop	r0
    1a56:	1f 90       	pop	r1
    1a58:	18 95       	reti

00001a5a <__vector_13>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIM_vect)      /* TWI Master Interrupt */
    1a5a:	1f 92       	push	r1
    1a5c:	0f 92       	push	r0
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	0f 92       	push	r0
    1a62:	11 24       	eor	r1, r1
    1a64:	0b b6       	in	r0, 0x3b	; 59
    1a66:	0f 92       	push	r0
    1a68:	2f 93       	push	r18
    1a6a:	3f 93       	push	r19
    1a6c:	4f 93       	push	r20
    1a6e:	5f 93       	push	r21
    1a70:	6f 93       	push	r22
    1a72:	7f 93       	push	r23
    1a74:	8f 93       	push	r24
    1a76:	9f 93       	push	r25
    1a78:	af 93       	push	r26
    1a7a:	bf 93       	push	r27
    1a7c:	ef 93       	push	r30
    1a7e:	ff 93       	push	r31
    1a80:	e0 91 0b 21 	lds	r30, 0x210B
    1a84:	f0 91 0c 21 	lds	r31, 0x210C
    1a88:	30 97       	sbiw	r30, 0x00	; 0
    1a8a:	29 f0       	breq	.+10     	; 0x1a96 <__vector_13+0x3c>
    1a8c:	80 91 01 22 	lds	r24, 0x2201
    1a90:	90 91 02 22 	lds	r25, 0x2202
    1a94:	19 95       	eicall
    1a96:	ff 91       	pop	r31
    1a98:	ef 91       	pop	r30
    1a9a:	bf 91       	pop	r27
    1a9c:	af 91       	pop	r26
    1a9e:	9f 91       	pop	r25
    1aa0:	8f 91       	pop	r24
    1aa2:	7f 91       	pop	r23
    1aa4:	6f 91       	pop	r22
    1aa6:	5f 91       	pop	r21
    1aa8:	4f 91       	pop	r20
    1aaa:	3f 91       	pop	r19
    1aac:	2f 91       	pop	r18
    1aae:	0f 90       	pop	r0
    1ab0:	0b be       	out	0x3b, r0	; 59
    1ab2:	0f 90       	pop	r0
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	0f 90       	pop	r0
    1ab8:	1f 90       	pop	r1
    1aba:	18 95       	reti

00001abc <__vector_14>:

/* TCC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_OVF_vect)      /* Overflow Interrupt */
    1abc:	1f 92       	push	r1
    1abe:	0f 92       	push	r0
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	0f 92       	push	r0
    1ac4:	11 24       	eor	r1, r1
    1ac6:	0b b6       	in	r0, 0x3b	; 59
    1ac8:	0f 92       	push	r0
    1aca:	2f 93       	push	r18
    1acc:	3f 93       	push	r19
    1ace:	4f 93       	push	r20
    1ad0:	5f 93       	push	r21
    1ad2:	6f 93       	push	r22
    1ad4:	7f 93       	push	r23
    1ad6:	8f 93       	push	r24
    1ad8:	9f 93       	push	r25
    1ada:	af 93       	push	r26
    1adc:	bf 93       	push	r27
    1ade:	ef 93       	push	r30
    1ae0:	ff 93       	push	r31
    1ae2:	e0 91 0d 21 	lds	r30, 0x210D
    1ae6:	f0 91 0e 21 	lds	r31, 0x210E
    1aea:	30 97       	sbiw	r30, 0x00	; 0
    1aec:	29 f0       	breq	.+10     	; 0x1af8 <__vector_14+0x3c>
    1aee:	80 91 03 22 	lds	r24, 0x2203
    1af2:	90 91 04 22 	lds	r25, 0x2204
    1af6:	19 95       	eicall
    1af8:	ff 91       	pop	r31
    1afa:	ef 91       	pop	r30
    1afc:	bf 91       	pop	r27
    1afe:	af 91       	pop	r26
    1b00:	9f 91       	pop	r25
    1b02:	8f 91       	pop	r24
    1b04:	7f 91       	pop	r23
    1b06:	6f 91       	pop	r22
    1b08:	5f 91       	pop	r21
    1b0a:	4f 91       	pop	r20
    1b0c:	3f 91       	pop	r19
    1b0e:	2f 91       	pop	r18
    1b10:	0f 90       	pop	r0
    1b12:	0b be       	out	0x3b, r0	; 59
    1b14:	0f 90       	pop	r0
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	0f 90       	pop	r0
    1b1a:	1f 90       	pop	r1
    1b1c:	18 95       	reti

00001b1e <__vector_15>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_ERR_vect)      /* Error Interrupt */
    1b1e:	1f 92       	push	r1
    1b20:	0f 92       	push	r0
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	0f 92       	push	r0
    1b26:	11 24       	eor	r1, r1
    1b28:	0b b6       	in	r0, 0x3b	; 59
    1b2a:	0f 92       	push	r0
    1b2c:	2f 93       	push	r18
    1b2e:	3f 93       	push	r19
    1b30:	4f 93       	push	r20
    1b32:	5f 93       	push	r21
    1b34:	6f 93       	push	r22
    1b36:	7f 93       	push	r23
    1b38:	8f 93       	push	r24
    1b3a:	9f 93       	push	r25
    1b3c:	af 93       	push	r26
    1b3e:	bf 93       	push	r27
    1b40:	ef 93       	push	r30
    1b42:	ff 93       	push	r31
    1b44:	e0 91 0f 21 	lds	r30, 0x210F
    1b48:	f0 91 10 21 	lds	r31, 0x2110
    1b4c:	30 97       	sbiw	r30, 0x00	; 0
    1b4e:	29 f0       	breq	.+10     	; 0x1b5a <__vector_15+0x3c>
    1b50:	80 91 05 22 	lds	r24, 0x2205
    1b54:	90 91 06 22 	lds	r25, 0x2206
    1b58:	19 95       	eicall
    1b5a:	ff 91       	pop	r31
    1b5c:	ef 91       	pop	r30
    1b5e:	bf 91       	pop	r27
    1b60:	af 91       	pop	r26
    1b62:	9f 91       	pop	r25
    1b64:	8f 91       	pop	r24
    1b66:	7f 91       	pop	r23
    1b68:	6f 91       	pop	r22
    1b6a:	5f 91       	pop	r21
    1b6c:	4f 91       	pop	r20
    1b6e:	3f 91       	pop	r19
    1b70:	2f 91       	pop	r18
    1b72:	0f 90       	pop	r0
    1b74:	0b be       	out	0x3b, r0	; 59
    1b76:	0f 90       	pop	r0
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	0f 90       	pop	r0
    1b7c:	1f 90       	pop	r1
    1b7e:	18 95       	reti

00001b80 <__vector_16>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCA_vect)      /* Compare or Capture A Interrupt */
    1b80:	1f 92       	push	r1
    1b82:	0f 92       	push	r0
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	0f 92       	push	r0
    1b88:	11 24       	eor	r1, r1
    1b8a:	0b b6       	in	r0, 0x3b	; 59
    1b8c:	0f 92       	push	r0
    1b8e:	2f 93       	push	r18
    1b90:	3f 93       	push	r19
    1b92:	4f 93       	push	r20
    1b94:	5f 93       	push	r21
    1b96:	6f 93       	push	r22
    1b98:	7f 93       	push	r23
    1b9a:	8f 93       	push	r24
    1b9c:	9f 93       	push	r25
    1b9e:	af 93       	push	r26
    1ba0:	bf 93       	push	r27
    1ba2:	ef 93       	push	r30
    1ba4:	ff 93       	push	r31
    1ba6:	e0 91 11 21 	lds	r30, 0x2111
    1baa:	f0 91 12 21 	lds	r31, 0x2112
    1bae:	30 97       	sbiw	r30, 0x00	; 0
    1bb0:	29 f0       	breq	.+10     	; 0x1bbc <__vector_16+0x3c>
    1bb2:	80 91 07 22 	lds	r24, 0x2207
    1bb6:	90 91 08 22 	lds	r25, 0x2208
    1bba:	19 95       	eicall
    1bbc:	ff 91       	pop	r31
    1bbe:	ef 91       	pop	r30
    1bc0:	bf 91       	pop	r27
    1bc2:	af 91       	pop	r26
    1bc4:	9f 91       	pop	r25
    1bc6:	8f 91       	pop	r24
    1bc8:	7f 91       	pop	r23
    1bca:	6f 91       	pop	r22
    1bcc:	5f 91       	pop	r21
    1bce:	4f 91       	pop	r20
    1bd0:	3f 91       	pop	r19
    1bd2:	2f 91       	pop	r18
    1bd4:	0f 90       	pop	r0
    1bd6:	0b be       	out	0x3b, r0	; 59
    1bd8:	0f 90       	pop	r0
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	0f 90       	pop	r0
    1bde:	1f 90       	pop	r1
    1be0:	18 95       	reti

00001be2 <__vector_17>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCB_vect)      /* Compare or Capture B Interrupt */
    1be2:	1f 92       	push	r1
    1be4:	0f 92       	push	r0
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	0f 92       	push	r0
    1bea:	11 24       	eor	r1, r1
    1bec:	0b b6       	in	r0, 0x3b	; 59
    1bee:	0f 92       	push	r0
    1bf0:	2f 93       	push	r18
    1bf2:	3f 93       	push	r19
    1bf4:	4f 93       	push	r20
    1bf6:	5f 93       	push	r21
    1bf8:	6f 93       	push	r22
    1bfa:	7f 93       	push	r23
    1bfc:	8f 93       	push	r24
    1bfe:	9f 93       	push	r25
    1c00:	af 93       	push	r26
    1c02:	bf 93       	push	r27
    1c04:	ef 93       	push	r30
    1c06:	ff 93       	push	r31
    1c08:	e0 91 13 21 	lds	r30, 0x2113
    1c0c:	f0 91 14 21 	lds	r31, 0x2114
    1c10:	30 97       	sbiw	r30, 0x00	; 0
    1c12:	29 f0       	breq	.+10     	; 0x1c1e <__vector_17+0x3c>
    1c14:	80 91 09 22 	lds	r24, 0x2209
    1c18:	90 91 0a 22 	lds	r25, 0x220A
    1c1c:	19 95       	eicall
    1c1e:	ff 91       	pop	r31
    1c20:	ef 91       	pop	r30
    1c22:	bf 91       	pop	r27
    1c24:	af 91       	pop	r26
    1c26:	9f 91       	pop	r25
    1c28:	8f 91       	pop	r24
    1c2a:	7f 91       	pop	r23
    1c2c:	6f 91       	pop	r22
    1c2e:	5f 91       	pop	r21
    1c30:	4f 91       	pop	r20
    1c32:	3f 91       	pop	r19
    1c34:	2f 91       	pop	r18
    1c36:	0f 90       	pop	r0
    1c38:	0b be       	out	0x3b, r0	; 59
    1c3a:	0f 90       	pop	r0
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	0f 90       	pop	r0
    1c40:	1f 90       	pop	r1
    1c42:	18 95       	reti

00001c44 <__vector_18>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCC_vect)      /* Compare or Capture C Interrupt */
    1c44:	1f 92       	push	r1
    1c46:	0f 92       	push	r0
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	0f 92       	push	r0
    1c4c:	11 24       	eor	r1, r1
    1c4e:	0b b6       	in	r0, 0x3b	; 59
    1c50:	0f 92       	push	r0
    1c52:	2f 93       	push	r18
    1c54:	3f 93       	push	r19
    1c56:	4f 93       	push	r20
    1c58:	5f 93       	push	r21
    1c5a:	6f 93       	push	r22
    1c5c:	7f 93       	push	r23
    1c5e:	8f 93       	push	r24
    1c60:	9f 93       	push	r25
    1c62:	af 93       	push	r26
    1c64:	bf 93       	push	r27
    1c66:	ef 93       	push	r30
    1c68:	ff 93       	push	r31
    1c6a:	e0 91 15 21 	lds	r30, 0x2115
    1c6e:	f0 91 16 21 	lds	r31, 0x2116
    1c72:	30 97       	sbiw	r30, 0x00	; 0
    1c74:	29 f0       	breq	.+10     	; 0x1c80 <__vector_18+0x3c>
    1c76:	80 91 0b 22 	lds	r24, 0x220B
    1c7a:	90 91 0c 22 	lds	r25, 0x220C
    1c7e:	19 95       	eicall
    1c80:	ff 91       	pop	r31
    1c82:	ef 91       	pop	r30
    1c84:	bf 91       	pop	r27
    1c86:	af 91       	pop	r26
    1c88:	9f 91       	pop	r25
    1c8a:	8f 91       	pop	r24
    1c8c:	7f 91       	pop	r23
    1c8e:	6f 91       	pop	r22
    1c90:	5f 91       	pop	r21
    1c92:	4f 91       	pop	r20
    1c94:	3f 91       	pop	r19
    1c96:	2f 91       	pop	r18
    1c98:	0f 90       	pop	r0
    1c9a:	0b be       	out	0x3b, r0	; 59
    1c9c:	0f 90       	pop	r0
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	0f 90       	pop	r0
    1ca2:	1f 90       	pop	r1
    1ca4:	18 95       	reti

00001ca6 <__vector_19>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCD_vect)      /* Compare or Capture D Interrupt */
    1ca6:	1f 92       	push	r1
    1ca8:	0f 92       	push	r0
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	0f 92       	push	r0
    1cae:	11 24       	eor	r1, r1
    1cb0:	0b b6       	in	r0, 0x3b	; 59
    1cb2:	0f 92       	push	r0
    1cb4:	2f 93       	push	r18
    1cb6:	3f 93       	push	r19
    1cb8:	4f 93       	push	r20
    1cba:	5f 93       	push	r21
    1cbc:	6f 93       	push	r22
    1cbe:	7f 93       	push	r23
    1cc0:	8f 93       	push	r24
    1cc2:	9f 93       	push	r25
    1cc4:	af 93       	push	r26
    1cc6:	bf 93       	push	r27
    1cc8:	ef 93       	push	r30
    1cca:	ff 93       	push	r31
    1ccc:	e0 91 17 21 	lds	r30, 0x2117
    1cd0:	f0 91 18 21 	lds	r31, 0x2118
    1cd4:	30 97       	sbiw	r30, 0x00	; 0
    1cd6:	29 f0       	breq	.+10     	; 0x1ce2 <__vector_19+0x3c>
    1cd8:	80 91 0d 22 	lds	r24, 0x220D
    1cdc:	90 91 0e 22 	lds	r25, 0x220E
    1ce0:	19 95       	eicall
    1ce2:	ff 91       	pop	r31
    1ce4:	ef 91       	pop	r30
    1ce6:	bf 91       	pop	r27
    1ce8:	af 91       	pop	r26
    1cea:	9f 91       	pop	r25
    1cec:	8f 91       	pop	r24
    1cee:	7f 91       	pop	r23
    1cf0:	6f 91       	pop	r22
    1cf2:	5f 91       	pop	r21
    1cf4:	4f 91       	pop	r20
    1cf6:	3f 91       	pop	r19
    1cf8:	2f 91       	pop	r18
    1cfa:	0f 90       	pop	r0
    1cfc:	0b be       	out	0x3b, r0	; 59
    1cfe:	0f 90       	pop	r0
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	0f 90       	pop	r0
    1d04:	1f 90       	pop	r1
    1d06:	18 95       	reti

00001d08 <__vector_20>:

/* TCC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_OVF_vect)      /* Overflow Interrupt */
    1d08:	1f 92       	push	r1
    1d0a:	0f 92       	push	r0
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	0f 92       	push	r0
    1d10:	11 24       	eor	r1, r1
    1d12:	0b b6       	in	r0, 0x3b	; 59
    1d14:	0f 92       	push	r0
    1d16:	2f 93       	push	r18
    1d18:	3f 93       	push	r19
    1d1a:	4f 93       	push	r20
    1d1c:	5f 93       	push	r21
    1d1e:	6f 93       	push	r22
    1d20:	7f 93       	push	r23
    1d22:	8f 93       	push	r24
    1d24:	9f 93       	push	r25
    1d26:	af 93       	push	r26
    1d28:	bf 93       	push	r27
    1d2a:	ef 93       	push	r30
    1d2c:	ff 93       	push	r31
    1d2e:	e0 91 19 21 	lds	r30, 0x2119
    1d32:	f0 91 1a 21 	lds	r31, 0x211A
    1d36:	30 97       	sbiw	r30, 0x00	; 0
    1d38:	29 f0       	breq	.+10     	; 0x1d44 <__vector_20+0x3c>
    1d3a:	80 91 0f 22 	lds	r24, 0x220F
    1d3e:	90 91 10 22 	lds	r25, 0x2210
    1d42:	19 95       	eicall
    1d44:	ff 91       	pop	r31
    1d46:	ef 91       	pop	r30
    1d48:	bf 91       	pop	r27
    1d4a:	af 91       	pop	r26
    1d4c:	9f 91       	pop	r25
    1d4e:	8f 91       	pop	r24
    1d50:	7f 91       	pop	r23
    1d52:	6f 91       	pop	r22
    1d54:	5f 91       	pop	r21
    1d56:	4f 91       	pop	r20
    1d58:	3f 91       	pop	r19
    1d5a:	2f 91       	pop	r18
    1d5c:	0f 90       	pop	r0
    1d5e:	0b be       	out	0x3b, r0	; 59
    1d60:	0f 90       	pop	r0
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	0f 90       	pop	r0
    1d66:	1f 90       	pop	r1
    1d68:	18 95       	reti

00001d6a <__vector_21>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_ERR_vect)      /* Error Interrupt */
    1d6a:	1f 92       	push	r1
    1d6c:	0f 92       	push	r0
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	0f 92       	push	r0
    1d72:	11 24       	eor	r1, r1
    1d74:	0b b6       	in	r0, 0x3b	; 59
    1d76:	0f 92       	push	r0
    1d78:	2f 93       	push	r18
    1d7a:	3f 93       	push	r19
    1d7c:	4f 93       	push	r20
    1d7e:	5f 93       	push	r21
    1d80:	6f 93       	push	r22
    1d82:	7f 93       	push	r23
    1d84:	8f 93       	push	r24
    1d86:	9f 93       	push	r25
    1d88:	af 93       	push	r26
    1d8a:	bf 93       	push	r27
    1d8c:	ef 93       	push	r30
    1d8e:	ff 93       	push	r31
    1d90:	e0 91 1b 21 	lds	r30, 0x211B
    1d94:	f0 91 1c 21 	lds	r31, 0x211C
    1d98:	30 97       	sbiw	r30, 0x00	; 0
    1d9a:	29 f0       	breq	.+10     	; 0x1da6 <__vector_21+0x3c>
    1d9c:	80 91 11 22 	lds	r24, 0x2211
    1da0:	90 91 12 22 	lds	r25, 0x2212
    1da4:	19 95       	eicall
    1da6:	ff 91       	pop	r31
    1da8:	ef 91       	pop	r30
    1daa:	bf 91       	pop	r27
    1dac:	af 91       	pop	r26
    1dae:	9f 91       	pop	r25
    1db0:	8f 91       	pop	r24
    1db2:	7f 91       	pop	r23
    1db4:	6f 91       	pop	r22
    1db6:	5f 91       	pop	r21
    1db8:	4f 91       	pop	r20
    1dba:	3f 91       	pop	r19
    1dbc:	2f 91       	pop	r18
    1dbe:	0f 90       	pop	r0
    1dc0:	0b be       	out	0x3b, r0	; 59
    1dc2:	0f 90       	pop	r0
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	0f 90       	pop	r0
    1dc8:	1f 90       	pop	r1
    1dca:	18 95       	reti

00001dcc <__vector_22>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCA_vect)      /* Compare or Capture A Interrupt */
    1dcc:	1f 92       	push	r1
    1dce:	0f 92       	push	r0
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	0f 92       	push	r0
    1dd4:	11 24       	eor	r1, r1
    1dd6:	0b b6       	in	r0, 0x3b	; 59
    1dd8:	0f 92       	push	r0
    1dda:	2f 93       	push	r18
    1ddc:	3f 93       	push	r19
    1dde:	4f 93       	push	r20
    1de0:	5f 93       	push	r21
    1de2:	6f 93       	push	r22
    1de4:	7f 93       	push	r23
    1de6:	8f 93       	push	r24
    1de8:	9f 93       	push	r25
    1dea:	af 93       	push	r26
    1dec:	bf 93       	push	r27
    1dee:	ef 93       	push	r30
    1df0:	ff 93       	push	r31
    1df2:	e0 91 1d 21 	lds	r30, 0x211D
    1df6:	f0 91 1e 21 	lds	r31, 0x211E
    1dfa:	30 97       	sbiw	r30, 0x00	; 0
    1dfc:	29 f0       	breq	.+10     	; 0x1e08 <__vector_22+0x3c>
    1dfe:	80 91 13 22 	lds	r24, 0x2213
    1e02:	90 91 14 22 	lds	r25, 0x2214
    1e06:	19 95       	eicall
    1e08:	ff 91       	pop	r31
    1e0a:	ef 91       	pop	r30
    1e0c:	bf 91       	pop	r27
    1e0e:	af 91       	pop	r26
    1e10:	9f 91       	pop	r25
    1e12:	8f 91       	pop	r24
    1e14:	7f 91       	pop	r23
    1e16:	6f 91       	pop	r22
    1e18:	5f 91       	pop	r21
    1e1a:	4f 91       	pop	r20
    1e1c:	3f 91       	pop	r19
    1e1e:	2f 91       	pop	r18
    1e20:	0f 90       	pop	r0
    1e22:	0b be       	out	0x3b, r0	; 59
    1e24:	0f 90       	pop	r0
    1e26:	0f be       	out	0x3f, r0	; 63
    1e28:	0f 90       	pop	r0
    1e2a:	1f 90       	pop	r1
    1e2c:	18 95       	reti

00001e2e <__vector_23>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCB_vect)      /* Compare or Capture B Interrupt */
    1e2e:	1f 92       	push	r1
    1e30:	0f 92       	push	r0
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	0f 92       	push	r0
    1e36:	11 24       	eor	r1, r1
    1e38:	0b b6       	in	r0, 0x3b	; 59
    1e3a:	0f 92       	push	r0
    1e3c:	2f 93       	push	r18
    1e3e:	3f 93       	push	r19
    1e40:	4f 93       	push	r20
    1e42:	5f 93       	push	r21
    1e44:	6f 93       	push	r22
    1e46:	7f 93       	push	r23
    1e48:	8f 93       	push	r24
    1e4a:	9f 93       	push	r25
    1e4c:	af 93       	push	r26
    1e4e:	bf 93       	push	r27
    1e50:	ef 93       	push	r30
    1e52:	ff 93       	push	r31
    1e54:	e0 91 1f 21 	lds	r30, 0x211F
    1e58:	f0 91 20 21 	lds	r31, 0x2120
    1e5c:	30 97       	sbiw	r30, 0x00	; 0
    1e5e:	29 f0       	breq	.+10     	; 0x1e6a <__vector_23+0x3c>
    1e60:	80 91 15 22 	lds	r24, 0x2215
    1e64:	90 91 16 22 	lds	r25, 0x2216
    1e68:	19 95       	eicall
    1e6a:	ff 91       	pop	r31
    1e6c:	ef 91       	pop	r30
    1e6e:	bf 91       	pop	r27
    1e70:	af 91       	pop	r26
    1e72:	9f 91       	pop	r25
    1e74:	8f 91       	pop	r24
    1e76:	7f 91       	pop	r23
    1e78:	6f 91       	pop	r22
    1e7a:	5f 91       	pop	r21
    1e7c:	4f 91       	pop	r20
    1e7e:	3f 91       	pop	r19
    1e80:	2f 91       	pop	r18
    1e82:	0f 90       	pop	r0
    1e84:	0b be       	out	0x3b, r0	; 59
    1e86:	0f 90       	pop	r0
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	0f 90       	pop	r0
    1e8c:	1f 90       	pop	r1
    1e8e:	18 95       	reti

00001e90 <__vector_24>:

/* SPIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIC_INT_vect)      /* SPI Interrupt */
    1e90:	1f 92       	push	r1
    1e92:	0f 92       	push	r0
    1e94:	0f b6       	in	r0, 0x3f	; 63
    1e96:	0f 92       	push	r0
    1e98:	11 24       	eor	r1, r1
    1e9a:	0b b6       	in	r0, 0x3b	; 59
    1e9c:	0f 92       	push	r0
    1e9e:	2f 93       	push	r18
    1ea0:	3f 93       	push	r19
    1ea2:	4f 93       	push	r20
    1ea4:	5f 93       	push	r21
    1ea6:	6f 93       	push	r22
    1ea8:	7f 93       	push	r23
    1eaa:	8f 93       	push	r24
    1eac:	9f 93       	push	r25
    1eae:	af 93       	push	r26
    1eb0:	bf 93       	push	r27
    1eb2:	ef 93       	push	r30
    1eb4:	ff 93       	push	r31
    1eb6:	e0 91 21 21 	lds	r30, 0x2121
    1eba:	f0 91 22 21 	lds	r31, 0x2122
    1ebe:	30 97       	sbiw	r30, 0x00	; 0
    1ec0:	29 f0       	breq	.+10     	; 0x1ecc <__vector_24+0x3c>
    1ec2:	80 91 17 22 	lds	r24, 0x2217
    1ec6:	90 91 18 22 	lds	r25, 0x2218
    1eca:	19 95       	eicall
    1ecc:	ff 91       	pop	r31
    1ece:	ef 91       	pop	r30
    1ed0:	bf 91       	pop	r27
    1ed2:	af 91       	pop	r26
    1ed4:	9f 91       	pop	r25
    1ed6:	8f 91       	pop	r24
    1ed8:	7f 91       	pop	r23
    1eda:	6f 91       	pop	r22
    1edc:	5f 91       	pop	r21
    1ede:	4f 91       	pop	r20
    1ee0:	3f 91       	pop	r19
    1ee2:	2f 91       	pop	r18
    1ee4:	0f 90       	pop	r0
    1ee6:	0b be       	out	0x3b, r0	; 59
    1ee8:	0f 90       	pop	r0
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	0f 90       	pop	r0
    1eee:	1f 90       	pop	r1
    1ef0:	18 95       	reti

00001ef2 <__vector_25>:

/* USARTC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_RXC_vect)      /* Reception Complete Interrupt */
    1ef2:	1f 92       	push	r1
    1ef4:	0f 92       	push	r0
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	0f 92       	push	r0
    1efa:	11 24       	eor	r1, r1
    1efc:	0b b6       	in	r0, 0x3b	; 59
    1efe:	0f 92       	push	r0
    1f00:	2f 93       	push	r18
    1f02:	3f 93       	push	r19
    1f04:	4f 93       	push	r20
    1f06:	5f 93       	push	r21
    1f08:	6f 93       	push	r22
    1f0a:	7f 93       	push	r23
    1f0c:	8f 93       	push	r24
    1f0e:	9f 93       	push	r25
    1f10:	af 93       	push	r26
    1f12:	bf 93       	push	r27
    1f14:	ef 93       	push	r30
    1f16:	ff 93       	push	r31
    1f18:	e0 91 23 21 	lds	r30, 0x2123
    1f1c:	f0 91 24 21 	lds	r31, 0x2124
    1f20:	30 97       	sbiw	r30, 0x00	; 0
    1f22:	29 f0       	breq	.+10     	; 0x1f2e <__vector_25+0x3c>
    1f24:	80 91 19 22 	lds	r24, 0x2219
    1f28:	90 91 1a 22 	lds	r25, 0x221A
    1f2c:	19 95       	eicall
    1f2e:	ff 91       	pop	r31
    1f30:	ef 91       	pop	r30
    1f32:	bf 91       	pop	r27
    1f34:	af 91       	pop	r26
    1f36:	9f 91       	pop	r25
    1f38:	8f 91       	pop	r24
    1f3a:	7f 91       	pop	r23
    1f3c:	6f 91       	pop	r22
    1f3e:	5f 91       	pop	r21
    1f40:	4f 91       	pop	r20
    1f42:	3f 91       	pop	r19
    1f44:	2f 91       	pop	r18
    1f46:	0f 90       	pop	r0
    1f48:	0b be       	out	0x3b, r0	; 59
    1f4a:	0f 90       	pop	r0
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	0f 90       	pop	r0
    1f50:	1f 90       	pop	r1
    1f52:	18 95       	reti

00001f54 <__vector_26>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_DRE_vect)      /* Data Register Empty Interrupt */
    1f54:	1f 92       	push	r1
    1f56:	0f 92       	push	r0
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	0f 92       	push	r0
    1f5c:	11 24       	eor	r1, r1
    1f5e:	0b b6       	in	r0, 0x3b	; 59
    1f60:	0f 92       	push	r0
    1f62:	2f 93       	push	r18
    1f64:	3f 93       	push	r19
    1f66:	4f 93       	push	r20
    1f68:	5f 93       	push	r21
    1f6a:	6f 93       	push	r22
    1f6c:	7f 93       	push	r23
    1f6e:	8f 93       	push	r24
    1f70:	9f 93       	push	r25
    1f72:	af 93       	push	r26
    1f74:	bf 93       	push	r27
    1f76:	ef 93       	push	r30
    1f78:	ff 93       	push	r31
    1f7a:	e0 91 25 21 	lds	r30, 0x2125
    1f7e:	f0 91 26 21 	lds	r31, 0x2126
    1f82:	30 97       	sbiw	r30, 0x00	; 0
    1f84:	29 f0       	breq	.+10     	; 0x1f90 <__vector_26+0x3c>
    1f86:	80 91 1b 22 	lds	r24, 0x221B
    1f8a:	90 91 1c 22 	lds	r25, 0x221C
    1f8e:	19 95       	eicall
    1f90:	ff 91       	pop	r31
    1f92:	ef 91       	pop	r30
    1f94:	bf 91       	pop	r27
    1f96:	af 91       	pop	r26
    1f98:	9f 91       	pop	r25
    1f9a:	8f 91       	pop	r24
    1f9c:	7f 91       	pop	r23
    1f9e:	6f 91       	pop	r22
    1fa0:	5f 91       	pop	r21
    1fa2:	4f 91       	pop	r20
    1fa4:	3f 91       	pop	r19
    1fa6:	2f 91       	pop	r18
    1fa8:	0f 90       	pop	r0
    1faa:	0b be       	out	0x3b, r0	; 59
    1fac:	0f 90       	pop	r0
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	0f 90       	pop	r0
    1fb2:	1f 90       	pop	r1
    1fb4:	18 95       	reti

00001fb6 <__vector_27>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_TXC_vect)      /* Transmission Complete Interrupt */
    1fb6:	1f 92       	push	r1
    1fb8:	0f 92       	push	r0
    1fba:	0f b6       	in	r0, 0x3f	; 63
    1fbc:	0f 92       	push	r0
    1fbe:	11 24       	eor	r1, r1
    1fc0:	0b b6       	in	r0, 0x3b	; 59
    1fc2:	0f 92       	push	r0
    1fc4:	2f 93       	push	r18
    1fc6:	3f 93       	push	r19
    1fc8:	4f 93       	push	r20
    1fca:	5f 93       	push	r21
    1fcc:	6f 93       	push	r22
    1fce:	7f 93       	push	r23
    1fd0:	8f 93       	push	r24
    1fd2:	9f 93       	push	r25
    1fd4:	af 93       	push	r26
    1fd6:	bf 93       	push	r27
    1fd8:	ef 93       	push	r30
    1fda:	ff 93       	push	r31
    1fdc:	e0 91 27 21 	lds	r30, 0x2127
    1fe0:	f0 91 28 21 	lds	r31, 0x2128
    1fe4:	30 97       	sbiw	r30, 0x00	; 0
    1fe6:	29 f0       	breq	.+10     	; 0x1ff2 <__vector_27+0x3c>
    1fe8:	80 91 1d 22 	lds	r24, 0x221D
    1fec:	90 91 1e 22 	lds	r25, 0x221E
    1ff0:	19 95       	eicall
    1ff2:	ff 91       	pop	r31
    1ff4:	ef 91       	pop	r30
    1ff6:	bf 91       	pop	r27
    1ff8:	af 91       	pop	r26
    1ffa:	9f 91       	pop	r25
    1ffc:	8f 91       	pop	r24
    1ffe:	7f 91       	pop	r23
    2000:	6f 91       	pop	r22
    2002:	5f 91       	pop	r21
    2004:	4f 91       	pop	r20
    2006:	3f 91       	pop	r19
    2008:	2f 91       	pop	r18
    200a:	0f 90       	pop	r0
    200c:	0b be       	out	0x3b, r0	; 59
    200e:	0f 90       	pop	r0
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	0f 90       	pop	r0
    2014:	1f 90       	pop	r1
    2016:	18 95       	reti

00002018 <__vector_28>:

/* USARTC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_RXC_vect)      /* Reception Complete Interrupt */
    2018:	1f 92       	push	r1
    201a:	0f 92       	push	r0
    201c:	0f b6       	in	r0, 0x3f	; 63
    201e:	0f 92       	push	r0
    2020:	11 24       	eor	r1, r1
    2022:	0b b6       	in	r0, 0x3b	; 59
    2024:	0f 92       	push	r0
    2026:	2f 93       	push	r18
    2028:	3f 93       	push	r19
    202a:	4f 93       	push	r20
    202c:	5f 93       	push	r21
    202e:	6f 93       	push	r22
    2030:	7f 93       	push	r23
    2032:	8f 93       	push	r24
    2034:	9f 93       	push	r25
    2036:	af 93       	push	r26
    2038:	bf 93       	push	r27
    203a:	ef 93       	push	r30
    203c:	ff 93       	push	r31
    203e:	e0 91 29 21 	lds	r30, 0x2129
    2042:	f0 91 2a 21 	lds	r31, 0x212A
    2046:	30 97       	sbiw	r30, 0x00	; 0
    2048:	29 f0       	breq	.+10     	; 0x2054 <__vector_28+0x3c>
    204a:	80 91 1f 22 	lds	r24, 0x221F
    204e:	90 91 20 22 	lds	r25, 0x2220
    2052:	19 95       	eicall
    2054:	ff 91       	pop	r31
    2056:	ef 91       	pop	r30
    2058:	bf 91       	pop	r27
    205a:	af 91       	pop	r26
    205c:	9f 91       	pop	r25
    205e:	8f 91       	pop	r24
    2060:	7f 91       	pop	r23
    2062:	6f 91       	pop	r22
    2064:	5f 91       	pop	r21
    2066:	4f 91       	pop	r20
    2068:	3f 91       	pop	r19
    206a:	2f 91       	pop	r18
    206c:	0f 90       	pop	r0
    206e:	0b be       	out	0x3b, r0	; 59
    2070:	0f 90       	pop	r0
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	0f 90       	pop	r0
    2076:	1f 90       	pop	r1
    2078:	18 95       	reti

0000207a <__vector_29>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_DRE_vect)      /* Data Register Empty Interrupt */
    207a:	1f 92       	push	r1
    207c:	0f 92       	push	r0
    207e:	0f b6       	in	r0, 0x3f	; 63
    2080:	0f 92       	push	r0
    2082:	11 24       	eor	r1, r1
    2084:	0b b6       	in	r0, 0x3b	; 59
    2086:	0f 92       	push	r0
    2088:	2f 93       	push	r18
    208a:	3f 93       	push	r19
    208c:	4f 93       	push	r20
    208e:	5f 93       	push	r21
    2090:	6f 93       	push	r22
    2092:	7f 93       	push	r23
    2094:	8f 93       	push	r24
    2096:	9f 93       	push	r25
    2098:	af 93       	push	r26
    209a:	bf 93       	push	r27
    209c:	ef 93       	push	r30
    209e:	ff 93       	push	r31
    20a0:	e0 91 2b 21 	lds	r30, 0x212B
    20a4:	f0 91 2c 21 	lds	r31, 0x212C
    20a8:	30 97       	sbiw	r30, 0x00	; 0
    20aa:	29 f0       	breq	.+10     	; 0x20b6 <__vector_29+0x3c>
    20ac:	80 91 21 22 	lds	r24, 0x2221
    20b0:	90 91 22 22 	lds	r25, 0x2222
    20b4:	19 95       	eicall
    20b6:	ff 91       	pop	r31
    20b8:	ef 91       	pop	r30
    20ba:	bf 91       	pop	r27
    20bc:	af 91       	pop	r26
    20be:	9f 91       	pop	r25
    20c0:	8f 91       	pop	r24
    20c2:	7f 91       	pop	r23
    20c4:	6f 91       	pop	r22
    20c6:	5f 91       	pop	r21
    20c8:	4f 91       	pop	r20
    20ca:	3f 91       	pop	r19
    20cc:	2f 91       	pop	r18
    20ce:	0f 90       	pop	r0
    20d0:	0b be       	out	0x3b, r0	; 59
    20d2:	0f 90       	pop	r0
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	0f 90       	pop	r0
    20d8:	1f 90       	pop	r1
    20da:	18 95       	reti

000020dc <__vector_30>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_TXC_vect)      /* Transmission Complete Interrupt */
    20dc:	1f 92       	push	r1
    20de:	0f 92       	push	r0
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	0f 92       	push	r0
    20e4:	11 24       	eor	r1, r1
    20e6:	0b b6       	in	r0, 0x3b	; 59
    20e8:	0f 92       	push	r0
    20ea:	2f 93       	push	r18
    20ec:	3f 93       	push	r19
    20ee:	4f 93       	push	r20
    20f0:	5f 93       	push	r21
    20f2:	6f 93       	push	r22
    20f4:	7f 93       	push	r23
    20f6:	8f 93       	push	r24
    20f8:	9f 93       	push	r25
    20fa:	af 93       	push	r26
    20fc:	bf 93       	push	r27
    20fe:	ef 93       	push	r30
    2100:	ff 93       	push	r31
    2102:	e0 91 2d 21 	lds	r30, 0x212D
    2106:	f0 91 2e 21 	lds	r31, 0x212E
    210a:	30 97       	sbiw	r30, 0x00	; 0
    210c:	29 f0       	breq	.+10     	; 0x2118 <__vector_30+0x3c>
    210e:	80 91 23 22 	lds	r24, 0x2223
    2112:	90 91 24 22 	lds	r25, 0x2224
    2116:	19 95       	eicall
    2118:	ff 91       	pop	r31
    211a:	ef 91       	pop	r30
    211c:	bf 91       	pop	r27
    211e:	af 91       	pop	r26
    2120:	9f 91       	pop	r25
    2122:	8f 91       	pop	r24
    2124:	7f 91       	pop	r23
    2126:	6f 91       	pop	r22
    2128:	5f 91       	pop	r21
    212a:	4f 91       	pop	r20
    212c:	3f 91       	pop	r19
    212e:	2f 91       	pop	r18
    2130:	0f 90       	pop	r0
    2132:	0b be       	out	0x3b, r0	; 59
    2134:	0f 90       	pop	r0
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	0f 90       	pop	r0
    213a:	1f 90       	pop	r1
    213c:	18 95       	reti

0000213e <__vector_31>:

/* AES interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(AES_INT_vect)      /* AES Interrupt */
    213e:	1f 92       	push	r1
    2140:	0f 92       	push	r0
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	0f 92       	push	r0
    2146:	11 24       	eor	r1, r1
    2148:	0b b6       	in	r0, 0x3b	; 59
    214a:	0f 92       	push	r0
    214c:	2f 93       	push	r18
    214e:	3f 93       	push	r19
    2150:	4f 93       	push	r20
    2152:	5f 93       	push	r21
    2154:	6f 93       	push	r22
    2156:	7f 93       	push	r23
    2158:	8f 93       	push	r24
    215a:	9f 93       	push	r25
    215c:	af 93       	push	r26
    215e:	bf 93       	push	r27
    2160:	ef 93       	push	r30
    2162:	ff 93       	push	r31
    2164:	e0 91 2f 21 	lds	r30, 0x212F
    2168:	f0 91 30 21 	lds	r31, 0x2130
    216c:	30 97       	sbiw	r30, 0x00	; 0
    216e:	29 f0       	breq	.+10     	; 0x217a <__vector_31+0x3c>
    2170:	80 91 25 22 	lds	r24, 0x2225
    2174:	90 91 26 22 	lds	r25, 0x2226
    2178:	19 95       	eicall
    217a:	ff 91       	pop	r31
    217c:	ef 91       	pop	r30
    217e:	bf 91       	pop	r27
    2180:	af 91       	pop	r26
    2182:	9f 91       	pop	r25
    2184:	8f 91       	pop	r24
    2186:	7f 91       	pop	r23
    2188:	6f 91       	pop	r22
    218a:	5f 91       	pop	r21
    218c:	4f 91       	pop	r20
    218e:	3f 91       	pop	r19
    2190:	2f 91       	pop	r18
    2192:	0f 90       	pop	r0
    2194:	0b be       	out	0x3b, r0	; 59
    2196:	0f 90       	pop	r0
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	0f 90       	pop	r0
    219c:	1f 90       	pop	r1
    219e:	18 95       	reti

000021a0 <__vector_32>:

/* NVM interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_EE_vect)      /* EE Interrupt */
    21a0:	1f 92       	push	r1
    21a2:	0f 92       	push	r0
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	0f 92       	push	r0
    21a8:	11 24       	eor	r1, r1
    21aa:	0b b6       	in	r0, 0x3b	; 59
    21ac:	0f 92       	push	r0
    21ae:	2f 93       	push	r18
    21b0:	3f 93       	push	r19
    21b2:	4f 93       	push	r20
    21b4:	5f 93       	push	r21
    21b6:	6f 93       	push	r22
    21b8:	7f 93       	push	r23
    21ba:	8f 93       	push	r24
    21bc:	9f 93       	push	r25
    21be:	af 93       	push	r26
    21c0:	bf 93       	push	r27
    21c2:	ef 93       	push	r30
    21c4:	ff 93       	push	r31
    21c6:	e0 91 31 21 	lds	r30, 0x2131
    21ca:	f0 91 32 21 	lds	r31, 0x2132
    21ce:	30 97       	sbiw	r30, 0x00	; 0
    21d0:	29 f0       	breq	.+10     	; 0x21dc <__vector_32+0x3c>
    21d2:	80 91 27 22 	lds	r24, 0x2227
    21d6:	90 91 28 22 	lds	r25, 0x2228
    21da:	19 95       	eicall
    21dc:	ff 91       	pop	r31
    21de:	ef 91       	pop	r30
    21e0:	bf 91       	pop	r27
    21e2:	af 91       	pop	r26
    21e4:	9f 91       	pop	r25
    21e6:	8f 91       	pop	r24
    21e8:	7f 91       	pop	r23
    21ea:	6f 91       	pop	r22
    21ec:	5f 91       	pop	r21
    21ee:	4f 91       	pop	r20
    21f0:	3f 91       	pop	r19
    21f2:	2f 91       	pop	r18
    21f4:	0f 90       	pop	r0
    21f6:	0b be       	out	0x3b, r0	; 59
    21f8:	0f 90       	pop	r0
    21fa:	0f be       	out	0x3f, r0	; 63
    21fc:	0f 90       	pop	r0
    21fe:	1f 90       	pop	r1
    2200:	18 95       	reti

00002202 <__vector_33>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_SPM_vect)      /* SPM Interrupt */
    2202:	1f 92       	push	r1
    2204:	0f 92       	push	r0
    2206:	0f b6       	in	r0, 0x3f	; 63
    2208:	0f 92       	push	r0
    220a:	11 24       	eor	r1, r1
    220c:	0b b6       	in	r0, 0x3b	; 59
    220e:	0f 92       	push	r0
    2210:	2f 93       	push	r18
    2212:	3f 93       	push	r19
    2214:	4f 93       	push	r20
    2216:	5f 93       	push	r21
    2218:	6f 93       	push	r22
    221a:	7f 93       	push	r23
    221c:	8f 93       	push	r24
    221e:	9f 93       	push	r25
    2220:	af 93       	push	r26
    2222:	bf 93       	push	r27
    2224:	ef 93       	push	r30
    2226:	ff 93       	push	r31
    2228:	e0 91 33 21 	lds	r30, 0x2133
    222c:	f0 91 34 21 	lds	r31, 0x2134
    2230:	30 97       	sbiw	r30, 0x00	; 0
    2232:	29 f0       	breq	.+10     	; 0x223e <__vector_33+0x3c>
    2234:	80 91 29 22 	lds	r24, 0x2229
    2238:	90 91 2a 22 	lds	r25, 0x222A
    223c:	19 95       	eicall
    223e:	ff 91       	pop	r31
    2240:	ef 91       	pop	r30
    2242:	bf 91       	pop	r27
    2244:	af 91       	pop	r26
    2246:	9f 91       	pop	r25
    2248:	8f 91       	pop	r24
    224a:	7f 91       	pop	r23
    224c:	6f 91       	pop	r22
    224e:	5f 91       	pop	r21
    2250:	4f 91       	pop	r20
    2252:	3f 91       	pop	r19
    2254:	2f 91       	pop	r18
    2256:	0f 90       	pop	r0
    2258:	0b be       	out	0x3b, r0	; 59
    225a:	0f 90       	pop	r0
    225c:	0f be       	out	0x3f, r0	; 63
    225e:	0f 90       	pop	r0
    2260:	1f 90       	pop	r1
    2262:	18 95       	reti

00002264 <__vector_34>:

/* PORTB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT0_vect)      /* External Interrupt 0 */
    2264:	1f 92       	push	r1
    2266:	0f 92       	push	r0
    2268:	0f b6       	in	r0, 0x3f	; 63
    226a:	0f 92       	push	r0
    226c:	11 24       	eor	r1, r1
    226e:	0b b6       	in	r0, 0x3b	; 59
    2270:	0f 92       	push	r0
    2272:	2f 93       	push	r18
    2274:	3f 93       	push	r19
    2276:	4f 93       	push	r20
    2278:	5f 93       	push	r21
    227a:	6f 93       	push	r22
    227c:	7f 93       	push	r23
    227e:	8f 93       	push	r24
    2280:	9f 93       	push	r25
    2282:	af 93       	push	r26
    2284:	bf 93       	push	r27
    2286:	ef 93       	push	r30
    2288:	ff 93       	push	r31
    228a:	e0 91 35 21 	lds	r30, 0x2135
    228e:	f0 91 36 21 	lds	r31, 0x2136
    2292:	30 97       	sbiw	r30, 0x00	; 0
    2294:	29 f0       	breq	.+10     	; 0x22a0 <__vector_34+0x3c>
    2296:	80 91 2b 22 	lds	r24, 0x222B
    229a:	90 91 2c 22 	lds	r25, 0x222C
    229e:	19 95       	eicall
    22a0:	ff 91       	pop	r31
    22a2:	ef 91       	pop	r30
    22a4:	bf 91       	pop	r27
    22a6:	af 91       	pop	r26
    22a8:	9f 91       	pop	r25
    22aa:	8f 91       	pop	r24
    22ac:	7f 91       	pop	r23
    22ae:	6f 91       	pop	r22
    22b0:	5f 91       	pop	r21
    22b2:	4f 91       	pop	r20
    22b4:	3f 91       	pop	r19
    22b6:	2f 91       	pop	r18
    22b8:	0f 90       	pop	r0
    22ba:	0b be       	out	0x3b, r0	; 59
    22bc:	0f 90       	pop	r0
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	0f 90       	pop	r0
    22c2:	1f 90       	pop	r1
    22c4:	18 95       	reti

000022c6 <__vector_35>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT1_vect)      /* External Interrupt 1 */
    22c6:	1f 92       	push	r1
    22c8:	0f 92       	push	r0
    22ca:	0f b6       	in	r0, 0x3f	; 63
    22cc:	0f 92       	push	r0
    22ce:	11 24       	eor	r1, r1
    22d0:	0b b6       	in	r0, 0x3b	; 59
    22d2:	0f 92       	push	r0
    22d4:	2f 93       	push	r18
    22d6:	3f 93       	push	r19
    22d8:	4f 93       	push	r20
    22da:	5f 93       	push	r21
    22dc:	6f 93       	push	r22
    22de:	7f 93       	push	r23
    22e0:	8f 93       	push	r24
    22e2:	9f 93       	push	r25
    22e4:	af 93       	push	r26
    22e6:	bf 93       	push	r27
    22e8:	ef 93       	push	r30
    22ea:	ff 93       	push	r31
    22ec:	e0 91 37 21 	lds	r30, 0x2137
    22f0:	f0 91 38 21 	lds	r31, 0x2138
    22f4:	30 97       	sbiw	r30, 0x00	; 0
    22f6:	29 f0       	breq	.+10     	; 0x2302 <__vector_35+0x3c>
    22f8:	80 91 2d 22 	lds	r24, 0x222D
    22fc:	90 91 2e 22 	lds	r25, 0x222E
    2300:	19 95       	eicall
    2302:	ff 91       	pop	r31
    2304:	ef 91       	pop	r30
    2306:	bf 91       	pop	r27
    2308:	af 91       	pop	r26
    230a:	9f 91       	pop	r25
    230c:	8f 91       	pop	r24
    230e:	7f 91       	pop	r23
    2310:	6f 91       	pop	r22
    2312:	5f 91       	pop	r21
    2314:	4f 91       	pop	r20
    2316:	3f 91       	pop	r19
    2318:	2f 91       	pop	r18
    231a:	0f 90       	pop	r0
    231c:	0b be       	out	0x3b, r0	; 59
    231e:	0f 90       	pop	r0
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	0f 90       	pop	r0
    2324:	1f 90       	pop	r1
    2326:	18 95       	reti

00002328 <__vector_36>:

/* ACB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC0_vect)      /* AC0 Interrupt */
    2328:	1f 92       	push	r1
    232a:	0f 92       	push	r0
    232c:	0f b6       	in	r0, 0x3f	; 63
    232e:	0f 92       	push	r0
    2330:	11 24       	eor	r1, r1
    2332:	0b b6       	in	r0, 0x3b	; 59
    2334:	0f 92       	push	r0
    2336:	2f 93       	push	r18
    2338:	3f 93       	push	r19
    233a:	4f 93       	push	r20
    233c:	5f 93       	push	r21
    233e:	6f 93       	push	r22
    2340:	7f 93       	push	r23
    2342:	8f 93       	push	r24
    2344:	9f 93       	push	r25
    2346:	af 93       	push	r26
    2348:	bf 93       	push	r27
    234a:	ef 93       	push	r30
    234c:	ff 93       	push	r31
    234e:	e0 91 39 21 	lds	r30, 0x2139
    2352:	f0 91 3a 21 	lds	r31, 0x213A
    2356:	30 97       	sbiw	r30, 0x00	; 0
    2358:	29 f0       	breq	.+10     	; 0x2364 <__vector_36+0x3c>
    235a:	80 91 2f 22 	lds	r24, 0x222F
    235e:	90 91 30 22 	lds	r25, 0x2230
    2362:	19 95       	eicall
    2364:	ff 91       	pop	r31
    2366:	ef 91       	pop	r30
    2368:	bf 91       	pop	r27
    236a:	af 91       	pop	r26
    236c:	9f 91       	pop	r25
    236e:	8f 91       	pop	r24
    2370:	7f 91       	pop	r23
    2372:	6f 91       	pop	r22
    2374:	5f 91       	pop	r21
    2376:	4f 91       	pop	r20
    2378:	3f 91       	pop	r19
    237a:	2f 91       	pop	r18
    237c:	0f 90       	pop	r0
    237e:	0b be       	out	0x3b, r0	; 59
    2380:	0f 90       	pop	r0
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	0f 90       	pop	r0
    2386:	1f 90       	pop	r1
    2388:	18 95       	reti

0000238a <__vector_37>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC1_vect)      /* AC1 Interrupt */
    238a:	1f 92       	push	r1
    238c:	0f 92       	push	r0
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	0f 92       	push	r0
    2392:	11 24       	eor	r1, r1
    2394:	0b b6       	in	r0, 0x3b	; 59
    2396:	0f 92       	push	r0
    2398:	2f 93       	push	r18
    239a:	3f 93       	push	r19
    239c:	4f 93       	push	r20
    239e:	5f 93       	push	r21
    23a0:	6f 93       	push	r22
    23a2:	7f 93       	push	r23
    23a4:	8f 93       	push	r24
    23a6:	9f 93       	push	r25
    23a8:	af 93       	push	r26
    23aa:	bf 93       	push	r27
    23ac:	ef 93       	push	r30
    23ae:	ff 93       	push	r31
    23b0:	e0 91 3b 21 	lds	r30, 0x213B
    23b4:	f0 91 3c 21 	lds	r31, 0x213C
    23b8:	30 97       	sbiw	r30, 0x00	; 0
    23ba:	29 f0       	breq	.+10     	; 0x23c6 <__vector_37+0x3c>
    23bc:	80 91 31 22 	lds	r24, 0x2231
    23c0:	90 91 32 22 	lds	r25, 0x2232
    23c4:	19 95       	eicall
    23c6:	ff 91       	pop	r31
    23c8:	ef 91       	pop	r30
    23ca:	bf 91       	pop	r27
    23cc:	af 91       	pop	r26
    23ce:	9f 91       	pop	r25
    23d0:	8f 91       	pop	r24
    23d2:	7f 91       	pop	r23
    23d4:	6f 91       	pop	r22
    23d6:	5f 91       	pop	r21
    23d8:	4f 91       	pop	r20
    23da:	3f 91       	pop	r19
    23dc:	2f 91       	pop	r18
    23de:	0f 90       	pop	r0
    23e0:	0b be       	out	0x3b, r0	; 59
    23e2:	0f 90       	pop	r0
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	0f 90       	pop	r0
    23e8:	1f 90       	pop	r1
    23ea:	18 95       	reti

000023ec <__vector_38>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_ACW_vect)      /* ACW Window Mode Interrupt */
    23ec:	1f 92       	push	r1
    23ee:	0f 92       	push	r0
    23f0:	0f b6       	in	r0, 0x3f	; 63
    23f2:	0f 92       	push	r0
    23f4:	11 24       	eor	r1, r1
    23f6:	0b b6       	in	r0, 0x3b	; 59
    23f8:	0f 92       	push	r0
    23fa:	2f 93       	push	r18
    23fc:	3f 93       	push	r19
    23fe:	4f 93       	push	r20
    2400:	5f 93       	push	r21
    2402:	6f 93       	push	r22
    2404:	7f 93       	push	r23
    2406:	8f 93       	push	r24
    2408:	9f 93       	push	r25
    240a:	af 93       	push	r26
    240c:	bf 93       	push	r27
    240e:	ef 93       	push	r30
    2410:	ff 93       	push	r31
    2412:	e0 91 3d 21 	lds	r30, 0x213D
    2416:	f0 91 3e 21 	lds	r31, 0x213E
    241a:	30 97       	sbiw	r30, 0x00	; 0
    241c:	29 f0       	breq	.+10     	; 0x2428 <__vector_38+0x3c>
    241e:	80 91 33 22 	lds	r24, 0x2233
    2422:	90 91 34 22 	lds	r25, 0x2234
    2426:	19 95       	eicall
    2428:	ff 91       	pop	r31
    242a:	ef 91       	pop	r30
    242c:	bf 91       	pop	r27
    242e:	af 91       	pop	r26
    2430:	9f 91       	pop	r25
    2432:	8f 91       	pop	r24
    2434:	7f 91       	pop	r23
    2436:	6f 91       	pop	r22
    2438:	5f 91       	pop	r21
    243a:	4f 91       	pop	r20
    243c:	3f 91       	pop	r19
    243e:	2f 91       	pop	r18
    2440:	0f 90       	pop	r0
    2442:	0b be       	out	0x3b, r0	; 59
    2444:	0f 90       	pop	r0
    2446:	0f be       	out	0x3f, r0	; 63
    2448:	0f 90       	pop	r0
    244a:	1f 90       	pop	r1
    244c:	18 95       	reti

0000244e <__vector_39>:

/* ADCB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH0_vect)      /* Interrupt 0 */
    244e:	1f 92       	push	r1
    2450:	0f 92       	push	r0
    2452:	0f b6       	in	r0, 0x3f	; 63
    2454:	0f 92       	push	r0
    2456:	11 24       	eor	r1, r1
    2458:	0b b6       	in	r0, 0x3b	; 59
    245a:	0f 92       	push	r0
    245c:	2f 93       	push	r18
    245e:	3f 93       	push	r19
    2460:	4f 93       	push	r20
    2462:	5f 93       	push	r21
    2464:	6f 93       	push	r22
    2466:	7f 93       	push	r23
    2468:	8f 93       	push	r24
    246a:	9f 93       	push	r25
    246c:	af 93       	push	r26
    246e:	bf 93       	push	r27
    2470:	ef 93       	push	r30
    2472:	ff 93       	push	r31
    2474:	e0 91 3f 21 	lds	r30, 0x213F
    2478:	f0 91 40 21 	lds	r31, 0x2140
    247c:	30 97       	sbiw	r30, 0x00	; 0
    247e:	29 f0       	breq	.+10     	; 0x248a <__vector_39+0x3c>
    2480:	80 91 35 22 	lds	r24, 0x2235
    2484:	90 91 36 22 	lds	r25, 0x2236
    2488:	19 95       	eicall
    248a:	ff 91       	pop	r31
    248c:	ef 91       	pop	r30
    248e:	bf 91       	pop	r27
    2490:	af 91       	pop	r26
    2492:	9f 91       	pop	r25
    2494:	8f 91       	pop	r24
    2496:	7f 91       	pop	r23
    2498:	6f 91       	pop	r22
    249a:	5f 91       	pop	r21
    249c:	4f 91       	pop	r20
    249e:	3f 91       	pop	r19
    24a0:	2f 91       	pop	r18
    24a2:	0f 90       	pop	r0
    24a4:	0b be       	out	0x3b, r0	; 59
    24a6:	0f 90       	pop	r0
    24a8:	0f be       	out	0x3f, r0	; 63
    24aa:	0f 90       	pop	r0
    24ac:	1f 90       	pop	r1
    24ae:	18 95       	reti

000024b0 <__vector_40>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH1_vect)      /* Interrupt 1 */
    24b0:	1f 92       	push	r1
    24b2:	0f 92       	push	r0
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	0f 92       	push	r0
    24b8:	11 24       	eor	r1, r1
    24ba:	0b b6       	in	r0, 0x3b	; 59
    24bc:	0f 92       	push	r0
    24be:	2f 93       	push	r18
    24c0:	3f 93       	push	r19
    24c2:	4f 93       	push	r20
    24c4:	5f 93       	push	r21
    24c6:	6f 93       	push	r22
    24c8:	7f 93       	push	r23
    24ca:	8f 93       	push	r24
    24cc:	9f 93       	push	r25
    24ce:	af 93       	push	r26
    24d0:	bf 93       	push	r27
    24d2:	ef 93       	push	r30
    24d4:	ff 93       	push	r31
    24d6:	e0 91 41 21 	lds	r30, 0x2141
    24da:	f0 91 42 21 	lds	r31, 0x2142
    24de:	30 97       	sbiw	r30, 0x00	; 0
    24e0:	29 f0       	breq	.+10     	; 0x24ec <__vector_40+0x3c>
    24e2:	80 91 37 22 	lds	r24, 0x2237
    24e6:	90 91 38 22 	lds	r25, 0x2238
    24ea:	19 95       	eicall
    24ec:	ff 91       	pop	r31
    24ee:	ef 91       	pop	r30
    24f0:	bf 91       	pop	r27
    24f2:	af 91       	pop	r26
    24f4:	9f 91       	pop	r25
    24f6:	8f 91       	pop	r24
    24f8:	7f 91       	pop	r23
    24fa:	6f 91       	pop	r22
    24fc:	5f 91       	pop	r21
    24fe:	4f 91       	pop	r20
    2500:	3f 91       	pop	r19
    2502:	2f 91       	pop	r18
    2504:	0f 90       	pop	r0
    2506:	0b be       	out	0x3b, r0	; 59
    2508:	0f 90       	pop	r0
    250a:	0f be       	out	0x3f, r0	; 63
    250c:	0f 90       	pop	r0
    250e:	1f 90       	pop	r1
    2510:	18 95       	reti

00002512 <__vector_41>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH2_vect)      /* Interrupt 2 */
    2512:	1f 92       	push	r1
    2514:	0f 92       	push	r0
    2516:	0f b6       	in	r0, 0x3f	; 63
    2518:	0f 92       	push	r0
    251a:	11 24       	eor	r1, r1
    251c:	0b b6       	in	r0, 0x3b	; 59
    251e:	0f 92       	push	r0
    2520:	2f 93       	push	r18
    2522:	3f 93       	push	r19
    2524:	4f 93       	push	r20
    2526:	5f 93       	push	r21
    2528:	6f 93       	push	r22
    252a:	7f 93       	push	r23
    252c:	8f 93       	push	r24
    252e:	9f 93       	push	r25
    2530:	af 93       	push	r26
    2532:	bf 93       	push	r27
    2534:	ef 93       	push	r30
    2536:	ff 93       	push	r31
    2538:	e0 91 43 21 	lds	r30, 0x2143
    253c:	f0 91 44 21 	lds	r31, 0x2144
    2540:	30 97       	sbiw	r30, 0x00	; 0
    2542:	29 f0       	breq	.+10     	; 0x254e <__vector_41+0x3c>
    2544:	80 91 39 22 	lds	r24, 0x2239
    2548:	90 91 3a 22 	lds	r25, 0x223A
    254c:	19 95       	eicall
    254e:	ff 91       	pop	r31
    2550:	ef 91       	pop	r30
    2552:	bf 91       	pop	r27
    2554:	af 91       	pop	r26
    2556:	9f 91       	pop	r25
    2558:	8f 91       	pop	r24
    255a:	7f 91       	pop	r23
    255c:	6f 91       	pop	r22
    255e:	5f 91       	pop	r21
    2560:	4f 91       	pop	r20
    2562:	3f 91       	pop	r19
    2564:	2f 91       	pop	r18
    2566:	0f 90       	pop	r0
    2568:	0b be       	out	0x3b, r0	; 59
    256a:	0f 90       	pop	r0
    256c:	0f be       	out	0x3f, r0	; 63
    256e:	0f 90       	pop	r0
    2570:	1f 90       	pop	r1
    2572:	18 95       	reti

00002574 <__vector_42>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH3_vect)      /* Interrupt 3 */
    2574:	1f 92       	push	r1
    2576:	0f 92       	push	r0
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	0f 92       	push	r0
    257c:	11 24       	eor	r1, r1
    257e:	0b b6       	in	r0, 0x3b	; 59
    2580:	0f 92       	push	r0
    2582:	2f 93       	push	r18
    2584:	3f 93       	push	r19
    2586:	4f 93       	push	r20
    2588:	5f 93       	push	r21
    258a:	6f 93       	push	r22
    258c:	7f 93       	push	r23
    258e:	8f 93       	push	r24
    2590:	9f 93       	push	r25
    2592:	af 93       	push	r26
    2594:	bf 93       	push	r27
    2596:	ef 93       	push	r30
    2598:	ff 93       	push	r31
    259a:	e0 91 45 21 	lds	r30, 0x2145
    259e:	f0 91 46 21 	lds	r31, 0x2146
    25a2:	30 97       	sbiw	r30, 0x00	; 0
    25a4:	29 f0       	breq	.+10     	; 0x25b0 <__vector_42+0x3c>
    25a6:	80 91 3b 22 	lds	r24, 0x223B
    25aa:	90 91 3c 22 	lds	r25, 0x223C
    25ae:	19 95       	eicall
    25b0:	ff 91       	pop	r31
    25b2:	ef 91       	pop	r30
    25b4:	bf 91       	pop	r27
    25b6:	af 91       	pop	r26
    25b8:	9f 91       	pop	r25
    25ba:	8f 91       	pop	r24
    25bc:	7f 91       	pop	r23
    25be:	6f 91       	pop	r22
    25c0:	5f 91       	pop	r21
    25c2:	4f 91       	pop	r20
    25c4:	3f 91       	pop	r19
    25c6:	2f 91       	pop	r18
    25c8:	0f 90       	pop	r0
    25ca:	0b be       	out	0x3b, r0	; 59
    25cc:	0f 90       	pop	r0
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	0f 90       	pop	r0
    25d2:	1f 90       	pop	r1
    25d4:	18 95       	reti

000025d6 <__vector_43>:

/* PORTE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT0_vect)      /* External Interrupt 0 */
    25d6:	1f 92       	push	r1
    25d8:	0f 92       	push	r0
    25da:	0f b6       	in	r0, 0x3f	; 63
    25dc:	0f 92       	push	r0
    25de:	11 24       	eor	r1, r1
    25e0:	0b b6       	in	r0, 0x3b	; 59
    25e2:	0f 92       	push	r0
    25e4:	2f 93       	push	r18
    25e6:	3f 93       	push	r19
    25e8:	4f 93       	push	r20
    25ea:	5f 93       	push	r21
    25ec:	6f 93       	push	r22
    25ee:	7f 93       	push	r23
    25f0:	8f 93       	push	r24
    25f2:	9f 93       	push	r25
    25f4:	af 93       	push	r26
    25f6:	bf 93       	push	r27
    25f8:	ef 93       	push	r30
    25fa:	ff 93       	push	r31
    25fc:	e0 91 47 21 	lds	r30, 0x2147
    2600:	f0 91 48 21 	lds	r31, 0x2148
    2604:	30 97       	sbiw	r30, 0x00	; 0
    2606:	29 f0       	breq	.+10     	; 0x2612 <__vector_43+0x3c>
    2608:	80 91 3d 22 	lds	r24, 0x223D
    260c:	90 91 3e 22 	lds	r25, 0x223E
    2610:	19 95       	eicall
    2612:	ff 91       	pop	r31
    2614:	ef 91       	pop	r30
    2616:	bf 91       	pop	r27
    2618:	af 91       	pop	r26
    261a:	9f 91       	pop	r25
    261c:	8f 91       	pop	r24
    261e:	7f 91       	pop	r23
    2620:	6f 91       	pop	r22
    2622:	5f 91       	pop	r21
    2624:	4f 91       	pop	r20
    2626:	3f 91       	pop	r19
    2628:	2f 91       	pop	r18
    262a:	0f 90       	pop	r0
    262c:	0b be       	out	0x3b, r0	; 59
    262e:	0f 90       	pop	r0
    2630:	0f be       	out	0x3f, r0	; 63
    2632:	0f 90       	pop	r0
    2634:	1f 90       	pop	r1
    2636:	18 95       	reti

00002638 <__vector_44>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT1_vect)      /* External Interrupt 1 */
    2638:	1f 92       	push	r1
    263a:	0f 92       	push	r0
    263c:	0f b6       	in	r0, 0x3f	; 63
    263e:	0f 92       	push	r0
    2640:	11 24       	eor	r1, r1
    2642:	0b b6       	in	r0, 0x3b	; 59
    2644:	0f 92       	push	r0
    2646:	2f 93       	push	r18
    2648:	3f 93       	push	r19
    264a:	4f 93       	push	r20
    264c:	5f 93       	push	r21
    264e:	6f 93       	push	r22
    2650:	7f 93       	push	r23
    2652:	8f 93       	push	r24
    2654:	9f 93       	push	r25
    2656:	af 93       	push	r26
    2658:	bf 93       	push	r27
    265a:	ef 93       	push	r30
    265c:	ff 93       	push	r31
    265e:	e0 91 49 21 	lds	r30, 0x2149
    2662:	f0 91 4a 21 	lds	r31, 0x214A
    2666:	30 97       	sbiw	r30, 0x00	; 0
    2668:	29 f0       	breq	.+10     	; 0x2674 <__vector_44+0x3c>
    266a:	80 91 3f 22 	lds	r24, 0x223F
    266e:	90 91 40 22 	lds	r25, 0x2240
    2672:	19 95       	eicall
    2674:	ff 91       	pop	r31
    2676:	ef 91       	pop	r30
    2678:	bf 91       	pop	r27
    267a:	af 91       	pop	r26
    267c:	9f 91       	pop	r25
    267e:	8f 91       	pop	r24
    2680:	7f 91       	pop	r23
    2682:	6f 91       	pop	r22
    2684:	5f 91       	pop	r21
    2686:	4f 91       	pop	r20
    2688:	3f 91       	pop	r19
    268a:	2f 91       	pop	r18
    268c:	0f 90       	pop	r0
    268e:	0b be       	out	0x3b, r0	; 59
    2690:	0f 90       	pop	r0
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	0f 90       	pop	r0
    2696:	1f 90       	pop	r1
    2698:	18 95       	reti

0000269a <__vector_45>:

/* TWIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIS_vect)      /* TWI Slave Interrupt */
    269a:	1f 92       	push	r1
    269c:	0f 92       	push	r0
    269e:	0f b6       	in	r0, 0x3f	; 63
    26a0:	0f 92       	push	r0
    26a2:	11 24       	eor	r1, r1
    26a4:	0b b6       	in	r0, 0x3b	; 59
    26a6:	0f 92       	push	r0
    26a8:	2f 93       	push	r18
    26aa:	3f 93       	push	r19
    26ac:	4f 93       	push	r20
    26ae:	5f 93       	push	r21
    26b0:	6f 93       	push	r22
    26b2:	7f 93       	push	r23
    26b4:	8f 93       	push	r24
    26b6:	9f 93       	push	r25
    26b8:	af 93       	push	r26
    26ba:	bf 93       	push	r27
    26bc:	ef 93       	push	r30
    26be:	ff 93       	push	r31
    26c0:	e0 91 4b 21 	lds	r30, 0x214B
    26c4:	f0 91 4c 21 	lds	r31, 0x214C
    26c8:	30 97       	sbiw	r30, 0x00	; 0
    26ca:	29 f0       	breq	.+10     	; 0x26d6 <__vector_45+0x3c>
    26cc:	80 91 41 22 	lds	r24, 0x2241
    26d0:	90 91 42 22 	lds	r25, 0x2242
    26d4:	19 95       	eicall
    26d6:	ff 91       	pop	r31
    26d8:	ef 91       	pop	r30
    26da:	bf 91       	pop	r27
    26dc:	af 91       	pop	r26
    26de:	9f 91       	pop	r25
    26e0:	8f 91       	pop	r24
    26e2:	7f 91       	pop	r23
    26e4:	6f 91       	pop	r22
    26e6:	5f 91       	pop	r21
    26e8:	4f 91       	pop	r20
    26ea:	3f 91       	pop	r19
    26ec:	2f 91       	pop	r18
    26ee:	0f 90       	pop	r0
    26f0:	0b be       	out	0x3b, r0	; 59
    26f2:	0f 90       	pop	r0
    26f4:	0f be       	out	0x3f, r0	; 63
    26f6:	0f 90       	pop	r0
    26f8:	1f 90       	pop	r1
    26fa:	18 95       	reti

000026fc <__vector_46>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIM_vect)		/* TWI Master Interrupt */
    26fc:	1f 92       	push	r1
    26fe:	0f 92       	push	r0
    2700:	0f b6       	in	r0, 0x3f	; 63
    2702:	0f 92       	push	r0
    2704:	11 24       	eor	r1, r1
    2706:	0b b6       	in	r0, 0x3b	; 59
    2708:	0f 92       	push	r0
    270a:	2f 93       	push	r18
    270c:	3f 93       	push	r19
    270e:	4f 93       	push	r20
    2710:	5f 93       	push	r21
    2712:	6f 93       	push	r22
    2714:	7f 93       	push	r23
    2716:	8f 93       	push	r24
    2718:	9f 93       	push	r25
    271a:	af 93       	push	r26
    271c:	bf 93       	push	r27
    271e:	ef 93       	push	r30
    2720:	ff 93       	push	r31
    2722:	e0 91 4d 21 	lds	r30, 0x214D
    2726:	f0 91 4e 21 	lds	r31, 0x214E
    272a:	30 97       	sbiw	r30, 0x00	; 0
    272c:	29 f0       	breq	.+10     	; 0x2738 <__vector_46+0x3c>
    272e:	80 91 43 22 	lds	r24, 0x2243
    2732:	90 91 44 22 	lds	r25, 0x2244
    2736:	19 95       	eicall
    2738:	ff 91       	pop	r31
    273a:	ef 91       	pop	r30
    273c:	bf 91       	pop	r27
    273e:	af 91       	pop	r26
    2740:	9f 91       	pop	r25
    2742:	8f 91       	pop	r24
    2744:	7f 91       	pop	r23
    2746:	6f 91       	pop	r22
    2748:	5f 91       	pop	r21
    274a:	4f 91       	pop	r20
    274c:	3f 91       	pop	r19
    274e:	2f 91       	pop	r18
    2750:	0f 90       	pop	r0
    2752:	0b be       	out	0x3b, r0	; 59
    2754:	0f 90       	pop	r0
    2756:	0f be       	out	0x3f, r0	; 63
    2758:	0f 90       	pop	r0
    275a:	1f 90       	pop	r1
    275c:	18 95       	reti

0000275e <__vector_47>:

/* TCE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_OVF_vect)      /* Overflow Interrupt */
    275e:	1f 92       	push	r1
    2760:	0f 92       	push	r0
    2762:	0f b6       	in	r0, 0x3f	; 63
    2764:	0f 92       	push	r0
    2766:	11 24       	eor	r1, r1
    2768:	0b b6       	in	r0, 0x3b	; 59
    276a:	0f 92       	push	r0
    276c:	2f 93       	push	r18
    276e:	3f 93       	push	r19
    2770:	4f 93       	push	r20
    2772:	5f 93       	push	r21
    2774:	6f 93       	push	r22
    2776:	7f 93       	push	r23
    2778:	8f 93       	push	r24
    277a:	9f 93       	push	r25
    277c:	af 93       	push	r26
    277e:	bf 93       	push	r27
    2780:	ef 93       	push	r30
    2782:	ff 93       	push	r31
    2784:	e0 91 4f 21 	lds	r30, 0x214F
    2788:	f0 91 50 21 	lds	r31, 0x2150
    278c:	30 97       	sbiw	r30, 0x00	; 0
    278e:	29 f0       	breq	.+10     	; 0x279a <__vector_47+0x3c>
    2790:	80 91 45 22 	lds	r24, 0x2245
    2794:	90 91 46 22 	lds	r25, 0x2246
    2798:	19 95       	eicall
    279a:	ff 91       	pop	r31
    279c:	ef 91       	pop	r30
    279e:	bf 91       	pop	r27
    27a0:	af 91       	pop	r26
    27a2:	9f 91       	pop	r25
    27a4:	8f 91       	pop	r24
    27a6:	7f 91       	pop	r23
    27a8:	6f 91       	pop	r22
    27aa:	5f 91       	pop	r21
    27ac:	4f 91       	pop	r20
    27ae:	3f 91       	pop	r19
    27b0:	2f 91       	pop	r18
    27b2:	0f 90       	pop	r0
    27b4:	0b be       	out	0x3b, r0	; 59
    27b6:	0f 90       	pop	r0
    27b8:	0f be       	out	0x3f, r0	; 63
    27ba:	0f 90       	pop	r0
    27bc:	1f 90       	pop	r1
    27be:	18 95       	reti

000027c0 <__vector_48>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_ERR_vect)      /* Error Interrupt */
    27c0:	1f 92       	push	r1
    27c2:	0f 92       	push	r0
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	0f 92       	push	r0
    27c8:	11 24       	eor	r1, r1
    27ca:	0b b6       	in	r0, 0x3b	; 59
    27cc:	0f 92       	push	r0
    27ce:	2f 93       	push	r18
    27d0:	3f 93       	push	r19
    27d2:	4f 93       	push	r20
    27d4:	5f 93       	push	r21
    27d6:	6f 93       	push	r22
    27d8:	7f 93       	push	r23
    27da:	8f 93       	push	r24
    27dc:	9f 93       	push	r25
    27de:	af 93       	push	r26
    27e0:	bf 93       	push	r27
    27e2:	ef 93       	push	r30
    27e4:	ff 93       	push	r31
    27e6:	e0 91 51 21 	lds	r30, 0x2151
    27ea:	f0 91 52 21 	lds	r31, 0x2152
    27ee:	30 97       	sbiw	r30, 0x00	; 0
    27f0:	29 f0       	breq	.+10     	; 0x27fc <__vector_48+0x3c>
    27f2:	80 91 47 22 	lds	r24, 0x2247
    27f6:	90 91 48 22 	lds	r25, 0x2248
    27fa:	19 95       	eicall
    27fc:	ff 91       	pop	r31
    27fe:	ef 91       	pop	r30
    2800:	bf 91       	pop	r27
    2802:	af 91       	pop	r26
    2804:	9f 91       	pop	r25
    2806:	8f 91       	pop	r24
    2808:	7f 91       	pop	r23
    280a:	6f 91       	pop	r22
    280c:	5f 91       	pop	r21
    280e:	4f 91       	pop	r20
    2810:	3f 91       	pop	r19
    2812:	2f 91       	pop	r18
    2814:	0f 90       	pop	r0
    2816:	0b be       	out	0x3b, r0	; 59
    2818:	0f 90       	pop	r0
    281a:	0f be       	out	0x3f, r0	; 63
    281c:	0f 90       	pop	r0
    281e:	1f 90       	pop	r1
    2820:	18 95       	reti

00002822 <__vector_49>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCA_vect)      /* Compare or Capture A Interrupt */
    2822:	1f 92       	push	r1
    2824:	0f 92       	push	r0
    2826:	0f b6       	in	r0, 0x3f	; 63
    2828:	0f 92       	push	r0
    282a:	11 24       	eor	r1, r1
    282c:	0b b6       	in	r0, 0x3b	; 59
    282e:	0f 92       	push	r0
    2830:	2f 93       	push	r18
    2832:	3f 93       	push	r19
    2834:	4f 93       	push	r20
    2836:	5f 93       	push	r21
    2838:	6f 93       	push	r22
    283a:	7f 93       	push	r23
    283c:	8f 93       	push	r24
    283e:	9f 93       	push	r25
    2840:	af 93       	push	r26
    2842:	bf 93       	push	r27
    2844:	ef 93       	push	r30
    2846:	ff 93       	push	r31
    2848:	e0 91 53 21 	lds	r30, 0x2153
    284c:	f0 91 54 21 	lds	r31, 0x2154
    2850:	30 97       	sbiw	r30, 0x00	; 0
    2852:	29 f0       	breq	.+10     	; 0x285e <__vector_49+0x3c>
    2854:	80 91 49 22 	lds	r24, 0x2249
    2858:	90 91 4a 22 	lds	r25, 0x224A
    285c:	19 95       	eicall
    285e:	ff 91       	pop	r31
    2860:	ef 91       	pop	r30
    2862:	bf 91       	pop	r27
    2864:	af 91       	pop	r26
    2866:	9f 91       	pop	r25
    2868:	8f 91       	pop	r24
    286a:	7f 91       	pop	r23
    286c:	6f 91       	pop	r22
    286e:	5f 91       	pop	r21
    2870:	4f 91       	pop	r20
    2872:	3f 91       	pop	r19
    2874:	2f 91       	pop	r18
    2876:	0f 90       	pop	r0
    2878:	0b be       	out	0x3b, r0	; 59
    287a:	0f 90       	pop	r0
    287c:	0f be       	out	0x3f, r0	; 63
    287e:	0f 90       	pop	r0
    2880:	1f 90       	pop	r1
    2882:	18 95       	reti

00002884 <__vector_50>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCB_vect)      /* Compare or Capture B Interrupt */
    2884:	1f 92       	push	r1
    2886:	0f 92       	push	r0
    2888:	0f b6       	in	r0, 0x3f	; 63
    288a:	0f 92       	push	r0
    288c:	11 24       	eor	r1, r1
    288e:	0b b6       	in	r0, 0x3b	; 59
    2890:	0f 92       	push	r0
    2892:	2f 93       	push	r18
    2894:	3f 93       	push	r19
    2896:	4f 93       	push	r20
    2898:	5f 93       	push	r21
    289a:	6f 93       	push	r22
    289c:	7f 93       	push	r23
    289e:	8f 93       	push	r24
    28a0:	9f 93       	push	r25
    28a2:	af 93       	push	r26
    28a4:	bf 93       	push	r27
    28a6:	ef 93       	push	r30
    28a8:	ff 93       	push	r31
    28aa:	e0 91 55 21 	lds	r30, 0x2155
    28ae:	f0 91 56 21 	lds	r31, 0x2156
    28b2:	30 97       	sbiw	r30, 0x00	; 0
    28b4:	29 f0       	breq	.+10     	; 0x28c0 <__vector_50+0x3c>
    28b6:	80 91 4b 22 	lds	r24, 0x224B
    28ba:	90 91 4c 22 	lds	r25, 0x224C
    28be:	19 95       	eicall
    28c0:	ff 91       	pop	r31
    28c2:	ef 91       	pop	r30
    28c4:	bf 91       	pop	r27
    28c6:	af 91       	pop	r26
    28c8:	9f 91       	pop	r25
    28ca:	8f 91       	pop	r24
    28cc:	7f 91       	pop	r23
    28ce:	6f 91       	pop	r22
    28d0:	5f 91       	pop	r21
    28d2:	4f 91       	pop	r20
    28d4:	3f 91       	pop	r19
    28d6:	2f 91       	pop	r18
    28d8:	0f 90       	pop	r0
    28da:	0b be       	out	0x3b, r0	; 59
    28dc:	0f 90       	pop	r0
    28de:	0f be       	out	0x3f, r0	; 63
    28e0:	0f 90       	pop	r0
    28e2:	1f 90       	pop	r1
    28e4:	18 95       	reti

000028e6 <__vector_51>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCC_vect)      /* Compare or Capture C Interrupt */
    28e6:	1f 92       	push	r1
    28e8:	0f 92       	push	r0
    28ea:	0f b6       	in	r0, 0x3f	; 63
    28ec:	0f 92       	push	r0
    28ee:	11 24       	eor	r1, r1
    28f0:	0b b6       	in	r0, 0x3b	; 59
    28f2:	0f 92       	push	r0
    28f4:	2f 93       	push	r18
    28f6:	3f 93       	push	r19
    28f8:	4f 93       	push	r20
    28fa:	5f 93       	push	r21
    28fc:	6f 93       	push	r22
    28fe:	7f 93       	push	r23
    2900:	8f 93       	push	r24
    2902:	9f 93       	push	r25
    2904:	af 93       	push	r26
    2906:	bf 93       	push	r27
    2908:	ef 93       	push	r30
    290a:	ff 93       	push	r31
    290c:	e0 91 57 21 	lds	r30, 0x2157
    2910:	f0 91 58 21 	lds	r31, 0x2158
    2914:	30 97       	sbiw	r30, 0x00	; 0
    2916:	29 f0       	breq	.+10     	; 0x2922 <__vector_51+0x3c>
    2918:	80 91 4d 22 	lds	r24, 0x224D
    291c:	90 91 4e 22 	lds	r25, 0x224E
    2920:	19 95       	eicall
    2922:	ff 91       	pop	r31
    2924:	ef 91       	pop	r30
    2926:	bf 91       	pop	r27
    2928:	af 91       	pop	r26
    292a:	9f 91       	pop	r25
    292c:	8f 91       	pop	r24
    292e:	7f 91       	pop	r23
    2930:	6f 91       	pop	r22
    2932:	5f 91       	pop	r21
    2934:	4f 91       	pop	r20
    2936:	3f 91       	pop	r19
    2938:	2f 91       	pop	r18
    293a:	0f 90       	pop	r0
    293c:	0b be       	out	0x3b, r0	; 59
    293e:	0f 90       	pop	r0
    2940:	0f be       	out	0x3f, r0	; 63
    2942:	0f 90       	pop	r0
    2944:	1f 90       	pop	r1
    2946:	18 95       	reti

00002948 <__vector_52>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCD_vect)      /* Compare or Capture D Interrupt */
    2948:	1f 92       	push	r1
    294a:	0f 92       	push	r0
    294c:	0f b6       	in	r0, 0x3f	; 63
    294e:	0f 92       	push	r0
    2950:	11 24       	eor	r1, r1
    2952:	0b b6       	in	r0, 0x3b	; 59
    2954:	0f 92       	push	r0
    2956:	2f 93       	push	r18
    2958:	3f 93       	push	r19
    295a:	4f 93       	push	r20
    295c:	5f 93       	push	r21
    295e:	6f 93       	push	r22
    2960:	7f 93       	push	r23
    2962:	8f 93       	push	r24
    2964:	9f 93       	push	r25
    2966:	af 93       	push	r26
    2968:	bf 93       	push	r27
    296a:	ef 93       	push	r30
    296c:	ff 93       	push	r31
    296e:	e0 91 59 21 	lds	r30, 0x2159
    2972:	f0 91 5a 21 	lds	r31, 0x215A
    2976:	30 97       	sbiw	r30, 0x00	; 0
    2978:	29 f0       	breq	.+10     	; 0x2984 <__vector_52+0x3c>
    297a:	80 91 4f 22 	lds	r24, 0x224F
    297e:	90 91 50 22 	lds	r25, 0x2250
    2982:	19 95       	eicall
    2984:	ff 91       	pop	r31
    2986:	ef 91       	pop	r30
    2988:	bf 91       	pop	r27
    298a:	af 91       	pop	r26
    298c:	9f 91       	pop	r25
    298e:	8f 91       	pop	r24
    2990:	7f 91       	pop	r23
    2992:	6f 91       	pop	r22
    2994:	5f 91       	pop	r21
    2996:	4f 91       	pop	r20
    2998:	3f 91       	pop	r19
    299a:	2f 91       	pop	r18
    299c:	0f 90       	pop	r0
    299e:	0b be       	out	0x3b, r0	; 59
    29a0:	0f 90       	pop	r0
    29a2:	0f be       	out	0x3f, r0	; 63
    29a4:	0f 90       	pop	r0
    29a6:	1f 90       	pop	r1
    29a8:	18 95       	reti

000029aa <__vector_53>:

/* TCE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_OVF_vect)      /* Overflow Interrupt */
    29aa:	1f 92       	push	r1
    29ac:	0f 92       	push	r0
    29ae:	0f b6       	in	r0, 0x3f	; 63
    29b0:	0f 92       	push	r0
    29b2:	11 24       	eor	r1, r1
    29b4:	0b b6       	in	r0, 0x3b	; 59
    29b6:	0f 92       	push	r0
    29b8:	2f 93       	push	r18
    29ba:	3f 93       	push	r19
    29bc:	4f 93       	push	r20
    29be:	5f 93       	push	r21
    29c0:	6f 93       	push	r22
    29c2:	7f 93       	push	r23
    29c4:	8f 93       	push	r24
    29c6:	9f 93       	push	r25
    29c8:	af 93       	push	r26
    29ca:	bf 93       	push	r27
    29cc:	ef 93       	push	r30
    29ce:	ff 93       	push	r31
    29d0:	e0 91 5b 21 	lds	r30, 0x215B
    29d4:	f0 91 5c 21 	lds	r31, 0x215C
    29d8:	30 97       	sbiw	r30, 0x00	; 0
    29da:	29 f0       	breq	.+10     	; 0x29e6 <__vector_53+0x3c>
    29dc:	80 91 51 22 	lds	r24, 0x2251
    29e0:	90 91 52 22 	lds	r25, 0x2252
    29e4:	19 95       	eicall
    29e6:	ff 91       	pop	r31
    29e8:	ef 91       	pop	r30
    29ea:	bf 91       	pop	r27
    29ec:	af 91       	pop	r26
    29ee:	9f 91       	pop	r25
    29f0:	8f 91       	pop	r24
    29f2:	7f 91       	pop	r23
    29f4:	6f 91       	pop	r22
    29f6:	5f 91       	pop	r21
    29f8:	4f 91       	pop	r20
    29fa:	3f 91       	pop	r19
    29fc:	2f 91       	pop	r18
    29fe:	0f 90       	pop	r0
    2a00:	0b be       	out	0x3b, r0	; 59
    2a02:	0f 90       	pop	r0
    2a04:	0f be       	out	0x3f, r0	; 63
    2a06:	0f 90       	pop	r0
    2a08:	1f 90       	pop	r1
    2a0a:	18 95       	reti

00002a0c <__vector_54>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_ERR_vect)      /* Error Interrupt */
    2a0c:	1f 92       	push	r1
    2a0e:	0f 92       	push	r0
    2a10:	0f b6       	in	r0, 0x3f	; 63
    2a12:	0f 92       	push	r0
    2a14:	11 24       	eor	r1, r1
    2a16:	0b b6       	in	r0, 0x3b	; 59
    2a18:	0f 92       	push	r0
    2a1a:	2f 93       	push	r18
    2a1c:	3f 93       	push	r19
    2a1e:	4f 93       	push	r20
    2a20:	5f 93       	push	r21
    2a22:	6f 93       	push	r22
    2a24:	7f 93       	push	r23
    2a26:	8f 93       	push	r24
    2a28:	9f 93       	push	r25
    2a2a:	af 93       	push	r26
    2a2c:	bf 93       	push	r27
    2a2e:	ef 93       	push	r30
    2a30:	ff 93       	push	r31
    2a32:	e0 91 5d 21 	lds	r30, 0x215D
    2a36:	f0 91 5e 21 	lds	r31, 0x215E
    2a3a:	30 97       	sbiw	r30, 0x00	; 0
    2a3c:	29 f0       	breq	.+10     	; 0x2a48 <__vector_54+0x3c>
    2a3e:	80 91 53 22 	lds	r24, 0x2253
    2a42:	90 91 54 22 	lds	r25, 0x2254
    2a46:	19 95       	eicall
    2a48:	ff 91       	pop	r31
    2a4a:	ef 91       	pop	r30
    2a4c:	bf 91       	pop	r27
    2a4e:	af 91       	pop	r26
    2a50:	9f 91       	pop	r25
    2a52:	8f 91       	pop	r24
    2a54:	7f 91       	pop	r23
    2a56:	6f 91       	pop	r22
    2a58:	5f 91       	pop	r21
    2a5a:	4f 91       	pop	r20
    2a5c:	3f 91       	pop	r19
    2a5e:	2f 91       	pop	r18
    2a60:	0f 90       	pop	r0
    2a62:	0b be       	out	0x3b, r0	; 59
    2a64:	0f 90       	pop	r0
    2a66:	0f be       	out	0x3f, r0	; 63
    2a68:	0f 90       	pop	r0
    2a6a:	1f 90       	pop	r1
    2a6c:	18 95       	reti

00002a6e <__vector_55>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCA_vect)      /* Compare or Capture A Interrupt */
    2a6e:	1f 92       	push	r1
    2a70:	0f 92       	push	r0
    2a72:	0f b6       	in	r0, 0x3f	; 63
    2a74:	0f 92       	push	r0
    2a76:	11 24       	eor	r1, r1
    2a78:	0b b6       	in	r0, 0x3b	; 59
    2a7a:	0f 92       	push	r0
    2a7c:	2f 93       	push	r18
    2a7e:	3f 93       	push	r19
    2a80:	4f 93       	push	r20
    2a82:	5f 93       	push	r21
    2a84:	6f 93       	push	r22
    2a86:	7f 93       	push	r23
    2a88:	8f 93       	push	r24
    2a8a:	9f 93       	push	r25
    2a8c:	af 93       	push	r26
    2a8e:	bf 93       	push	r27
    2a90:	ef 93       	push	r30
    2a92:	ff 93       	push	r31
    2a94:	e0 91 5f 21 	lds	r30, 0x215F
    2a98:	f0 91 60 21 	lds	r31, 0x2160
    2a9c:	30 97       	sbiw	r30, 0x00	; 0
    2a9e:	29 f0       	breq	.+10     	; 0x2aaa <__vector_55+0x3c>
    2aa0:	80 91 55 22 	lds	r24, 0x2255
    2aa4:	90 91 56 22 	lds	r25, 0x2256
    2aa8:	19 95       	eicall
    2aaa:	ff 91       	pop	r31
    2aac:	ef 91       	pop	r30
    2aae:	bf 91       	pop	r27
    2ab0:	af 91       	pop	r26
    2ab2:	9f 91       	pop	r25
    2ab4:	8f 91       	pop	r24
    2ab6:	7f 91       	pop	r23
    2ab8:	6f 91       	pop	r22
    2aba:	5f 91       	pop	r21
    2abc:	4f 91       	pop	r20
    2abe:	3f 91       	pop	r19
    2ac0:	2f 91       	pop	r18
    2ac2:	0f 90       	pop	r0
    2ac4:	0b be       	out	0x3b, r0	; 59
    2ac6:	0f 90       	pop	r0
    2ac8:	0f be       	out	0x3f, r0	; 63
    2aca:	0f 90       	pop	r0
    2acc:	1f 90       	pop	r1
    2ace:	18 95       	reti

00002ad0 <__vector_56>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCB_vect)      /* Compare or Capture B Interrupt */
    2ad0:	1f 92       	push	r1
    2ad2:	0f 92       	push	r0
    2ad4:	0f b6       	in	r0, 0x3f	; 63
    2ad6:	0f 92       	push	r0
    2ad8:	11 24       	eor	r1, r1
    2ada:	0b b6       	in	r0, 0x3b	; 59
    2adc:	0f 92       	push	r0
    2ade:	2f 93       	push	r18
    2ae0:	3f 93       	push	r19
    2ae2:	4f 93       	push	r20
    2ae4:	5f 93       	push	r21
    2ae6:	6f 93       	push	r22
    2ae8:	7f 93       	push	r23
    2aea:	8f 93       	push	r24
    2aec:	9f 93       	push	r25
    2aee:	af 93       	push	r26
    2af0:	bf 93       	push	r27
    2af2:	ef 93       	push	r30
    2af4:	ff 93       	push	r31
    2af6:	e0 91 61 21 	lds	r30, 0x2161
    2afa:	f0 91 62 21 	lds	r31, 0x2162
    2afe:	30 97       	sbiw	r30, 0x00	; 0
    2b00:	29 f0       	breq	.+10     	; 0x2b0c <__vector_56+0x3c>
    2b02:	80 91 57 22 	lds	r24, 0x2257
    2b06:	90 91 58 22 	lds	r25, 0x2258
    2b0a:	19 95       	eicall
    2b0c:	ff 91       	pop	r31
    2b0e:	ef 91       	pop	r30
    2b10:	bf 91       	pop	r27
    2b12:	af 91       	pop	r26
    2b14:	9f 91       	pop	r25
    2b16:	8f 91       	pop	r24
    2b18:	7f 91       	pop	r23
    2b1a:	6f 91       	pop	r22
    2b1c:	5f 91       	pop	r21
    2b1e:	4f 91       	pop	r20
    2b20:	3f 91       	pop	r19
    2b22:	2f 91       	pop	r18
    2b24:	0f 90       	pop	r0
    2b26:	0b be       	out	0x3b, r0	; 59
    2b28:	0f 90       	pop	r0
    2b2a:	0f be       	out	0x3f, r0	; 63
    2b2c:	0f 90       	pop	r0
    2b2e:	1f 90       	pop	r1
    2b30:	18 95       	reti

00002b32 <__vector_57>:

/* SPIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIE_INT_vect)      /* SPI Interrupt */
    2b32:	1f 92       	push	r1
    2b34:	0f 92       	push	r0
    2b36:	0f b6       	in	r0, 0x3f	; 63
    2b38:	0f 92       	push	r0
    2b3a:	11 24       	eor	r1, r1
    2b3c:	0b b6       	in	r0, 0x3b	; 59
    2b3e:	0f 92       	push	r0
    2b40:	2f 93       	push	r18
    2b42:	3f 93       	push	r19
    2b44:	4f 93       	push	r20
    2b46:	5f 93       	push	r21
    2b48:	6f 93       	push	r22
    2b4a:	7f 93       	push	r23
    2b4c:	8f 93       	push	r24
    2b4e:	9f 93       	push	r25
    2b50:	af 93       	push	r26
    2b52:	bf 93       	push	r27
    2b54:	ef 93       	push	r30
    2b56:	ff 93       	push	r31
    2b58:	e0 91 63 21 	lds	r30, 0x2163
    2b5c:	f0 91 64 21 	lds	r31, 0x2164
    2b60:	30 97       	sbiw	r30, 0x00	; 0
    2b62:	29 f0       	breq	.+10     	; 0x2b6e <__vector_57+0x3c>
    2b64:	80 91 59 22 	lds	r24, 0x2259
    2b68:	90 91 5a 22 	lds	r25, 0x225A
    2b6c:	19 95       	eicall
    2b6e:	ff 91       	pop	r31
    2b70:	ef 91       	pop	r30
    2b72:	bf 91       	pop	r27
    2b74:	af 91       	pop	r26
    2b76:	9f 91       	pop	r25
    2b78:	8f 91       	pop	r24
    2b7a:	7f 91       	pop	r23
    2b7c:	6f 91       	pop	r22
    2b7e:	5f 91       	pop	r21
    2b80:	4f 91       	pop	r20
    2b82:	3f 91       	pop	r19
    2b84:	2f 91       	pop	r18
    2b86:	0f 90       	pop	r0
    2b88:	0b be       	out	0x3b, r0	; 59
    2b8a:	0f 90       	pop	r0
    2b8c:	0f be       	out	0x3f, r0	; 63
    2b8e:	0f 90       	pop	r0
    2b90:	1f 90       	pop	r1
    2b92:	18 95       	reti

00002b94 <__vector_58>:

/* USARTE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_RXC_vect)      /* Reception Complete Interrupt */
    2b94:	1f 92       	push	r1
    2b96:	0f 92       	push	r0
    2b98:	0f b6       	in	r0, 0x3f	; 63
    2b9a:	0f 92       	push	r0
    2b9c:	11 24       	eor	r1, r1
    2b9e:	0b b6       	in	r0, 0x3b	; 59
    2ba0:	0f 92       	push	r0
    2ba2:	2f 93       	push	r18
    2ba4:	3f 93       	push	r19
    2ba6:	4f 93       	push	r20
    2ba8:	5f 93       	push	r21
    2baa:	6f 93       	push	r22
    2bac:	7f 93       	push	r23
    2bae:	8f 93       	push	r24
    2bb0:	9f 93       	push	r25
    2bb2:	af 93       	push	r26
    2bb4:	bf 93       	push	r27
    2bb6:	ef 93       	push	r30
    2bb8:	ff 93       	push	r31
    2bba:	e0 91 65 21 	lds	r30, 0x2165
    2bbe:	f0 91 66 21 	lds	r31, 0x2166
    2bc2:	30 97       	sbiw	r30, 0x00	; 0
    2bc4:	29 f0       	breq	.+10     	; 0x2bd0 <__vector_58+0x3c>
    2bc6:	80 91 5b 22 	lds	r24, 0x225B
    2bca:	90 91 5c 22 	lds	r25, 0x225C
    2bce:	19 95       	eicall
    2bd0:	ff 91       	pop	r31
    2bd2:	ef 91       	pop	r30
    2bd4:	bf 91       	pop	r27
    2bd6:	af 91       	pop	r26
    2bd8:	9f 91       	pop	r25
    2bda:	8f 91       	pop	r24
    2bdc:	7f 91       	pop	r23
    2bde:	6f 91       	pop	r22
    2be0:	5f 91       	pop	r21
    2be2:	4f 91       	pop	r20
    2be4:	3f 91       	pop	r19
    2be6:	2f 91       	pop	r18
    2be8:	0f 90       	pop	r0
    2bea:	0b be       	out	0x3b, r0	; 59
    2bec:	0f 90       	pop	r0
    2bee:	0f be       	out	0x3f, r0	; 63
    2bf0:	0f 90       	pop	r0
    2bf2:	1f 90       	pop	r1
    2bf4:	18 95       	reti

00002bf6 <__vector_59>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_DRE_vect)      /* Data Register Empty Interrupt */
    2bf6:	1f 92       	push	r1
    2bf8:	0f 92       	push	r0
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	0f 92       	push	r0
    2bfe:	11 24       	eor	r1, r1
    2c00:	0b b6       	in	r0, 0x3b	; 59
    2c02:	0f 92       	push	r0
    2c04:	2f 93       	push	r18
    2c06:	3f 93       	push	r19
    2c08:	4f 93       	push	r20
    2c0a:	5f 93       	push	r21
    2c0c:	6f 93       	push	r22
    2c0e:	7f 93       	push	r23
    2c10:	8f 93       	push	r24
    2c12:	9f 93       	push	r25
    2c14:	af 93       	push	r26
    2c16:	bf 93       	push	r27
    2c18:	ef 93       	push	r30
    2c1a:	ff 93       	push	r31
    2c1c:	e0 91 67 21 	lds	r30, 0x2167
    2c20:	f0 91 68 21 	lds	r31, 0x2168
    2c24:	30 97       	sbiw	r30, 0x00	; 0
    2c26:	29 f0       	breq	.+10     	; 0x2c32 <__vector_59+0x3c>
    2c28:	80 91 5d 22 	lds	r24, 0x225D
    2c2c:	90 91 5e 22 	lds	r25, 0x225E
    2c30:	19 95       	eicall
    2c32:	ff 91       	pop	r31
    2c34:	ef 91       	pop	r30
    2c36:	bf 91       	pop	r27
    2c38:	af 91       	pop	r26
    2c3a:	9f 91       	pop	r25
    2c3c:	8f 91       	pop	r24
    2c3e:	7f 91       	pop	r23
    2c40:	6f 91       	pop	r22
    2c42:	5f 91       	pop	r21
    2c44:	4f 91       	pop	r20
    2c46:	3f 91       	pop	r19
    2c48:	2f 91       	pop	r18
    2c4a:	0f 90       	pop	r0
    2c4c:	0b be       	out	0x3b, r0	; 59
    2c4e:	0f 90       	pop	r0
    2c50:	0f be       	out	0x3f, r0	; 63
    2c52:	0f 90       	pop	r0
    2c54:	1f 90       	pop	r1
    2c56:	18 95       	reti

00002c58 <__vector_60>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_TXC_vect)      /* Transmission Complete Interrupt */
    2c58:	1f 92       	push	r1
    2c5a:	0f 92       	push	r0
    2c5c:	0f b6       	in	r0, 0x3f	; 63
    2c5e:	0f 92       	push	r0
    2c60:	11 24       	eor	r1, r1
    2c62:	0b b6       	in	r0, 0x3b	; 59
    2c64:	0f 92       	push	r0
    2c66:	2f 93       	push	r18
    2c68:	3f 93       	push	r19
    2c6a:	4f 93       	push	r20
    2c6c:	5f 93       	push	r21
    2c6e:	6f 93       	push	r22
    2c70:	7f 93       	push	r23
    2c72:	8f 93       	push	r24
    2c74:	9f 93       	push	r25
    2c76:	af 93       	push	r26
    2c78:	bf 93       	push	r27
    2c7a:	ef 93       	push	r30
    2c7c:	ff 93       	push	r31
    2c7e:	e0 91 69 21 	lds	r30, 0x2169
    2c82:	f0 91 6a 21 	lds	r31, 0x216A
    2c86:	30 97       	sbiw	r30, 0x00	; 0
    2c88:	29 f0       	breq	.+10     	; 0x2c94 <__vector_60+0x3c>
    2c8a:	80 91 5f 22 	lds	r24, 0x225F
    2c8e:	90 91 60 22 	lds	r25, 0x2260
    2c92:	19 95       	eicall
    2c94:	ff 91       	pop	r31
    2c96:	ef 91       	pop	r30
    2c98:	bf 91       	pop	r27
    2c9a:	af 91       	pop	r26
    2c9c:	9f 91       	pop	r25
    2c9e:	8f 91       	pop	r24
    2ca0:	7f 91       	pop	r23
    2ca2:	6f 91       	pop	r22
    2ca4:	5f 91       	pop	r21
    2ca6:	4f 91       	pop	r20
    2ca8:	3f 91       	pop	r19
    2caa:	2f 91       	pop	r18
    2cac:	0f 90       	pop	r0
    2cae:	0b be       	out	0x3b, r0	; 59
    2cb0:	0f 90       	pop	r0
    2cb2:	0f be       	out	0x3f, r0	; 63
    2cb4:	0f 90       	pop	r0
    2cb6:	1f 90       	pop	r1
    2cb8:	18 95       	reti

00002cba <__vector_61>:

/* USARTE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_RXC_vect)      /* Reception Complete Interrupt */
    2cba:	1f 92       	push	r1
    2cbc:	0f 92       	push	r0
    2cbe:	0f b6       	in	r0, 0x3f	; 63
    2cc0:	0f 92       	push	r0
    2cc2:	11 24       	eor	r1, r1
    2cc4:	0b b6       	in	r0, 0x3b	; 59
    2cc6:	0f 92       	push	r0
    2cc8:	2f 93       	push	r18
    2cca:	3f 93       	push	r19
    2ccc:	4f 93       	push	r20
    2cce:	5f 93       	push	r21
    2cd0:	6f 93       	push	r22
    2cd2:	7f 93       	push	r23
    2cd4:	8f 93       	push	r24
    2cd6:	9f 93       	push	r25
    2cd8:	af 93       	push	r26
    2cda:	bf 93       	push	r27
    2cdc:	ef 93       	push	r30
    2cde:	ff 93       	push	r31
    2ce0:	e0 91 6b 21 	lds	r30, 0x216B
    2ce4:	f0 91 6c 21 	lds	r31, 0x216C
    2ce8:	30 97       	sbiw	r30, 0x00	; 0
    2cea:	29 f0       	breq	.+10     	; 0x2cf6 <__vector_61+0x3c>
    2cec:	80 91 61 22 	lds	r24, 0x2261
    2cf0:	90 91 62 22 	lds	r25, 0x2262
    2cf4:	19 95       	eicall
    2cf6:	ff 91       	pop	r31
    2cf8:	ef 91       	pop	r30
    2cfa:	bf 91       	pop	r27
    2cfc:	af 91       	pop	r26
    2cfe:	9f 91       	pop	r25
    2d00:	8f 91       	pop	r24
    2d02:	7f 91       	pop	r23
    2d04:	6f 91       	pop	r22
    2d06:	5f 91       	pop	r21
    2d08:	4f 91       	pop	r20
    2d0a:	3f 91       	pop	r19
    2d0c:	2f 91       	pop	r18
    2d0e:	0f 90       	pop	r0
    2d10:	0b be       	out	0x3b, r0	; 59
    2d12:	0f 90       	pop	r0
    2d14:	0f be       	out	0x3f, r0	; 63
    2d16:	0f 90       	pop	r0
    2d18:	1f 90       	pop	r1
    2d1a:	18 95       	reti

00002d1c <__vector_62>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_DRE_vect)      /* Data Register Empty Interrupt */
    2d1c:	1f 92       	push	r1
    2d1e:	0f 92       	push	r0
    2d20:	0f b6       	in	r0, 0x3f	; 63
    2d22:	0f 92       	push	r0
    2d24:	11 24       	eor	r1, r1
    2d26:	0b b6       	in	r0, 0x3b	; 59
    2d28:	0f 92       	push	r0
    2d2a:	2f 93       	push	r18
    2d2c:	3f 93       	push	r19
    2d2e:	4f 93       	push	r20
    2d30:	5f 93       	push	r21
    2d32:	6f 93       	push	r22
    2d34:	7f 93       	push	r23
    2d36:	8f 93       	push	r24
    2d38:	9f 93       	push	r25
    2d3a:	af 93       	push	r26
    2d3c:	bf 93       	push	r27
    2d3e:	ef 93       	push	r30
    2d40:	ff 93       	push	r31
    2d42:	e0 91 6d 21 	lds	r30, 0x216D
    2d46:	f0 91 6e 21 	lds	r31, 0x216E
    2d4a:	30 97       	sbiw	r30, 0x00	; 0
    2d4c:	29 f0       	breq	.+10     	; 0x2d58 <__vector_62+0x3c>
    2d4e:	80 91 63 22 	lds	r24, 0x2263
    2d52:	90 91 64 22 	lds	r25, 0x2264
    2d56:	19 95       	eicall
    2d58:	ff 91       	pop	r31
    2d5a:	ef 91       	pop	r30
    2d5c:	bf 91       	pop	r27
    2d5e:	af 91       	pop	r26
    2d60:	9f 91       	pop	r25
    2d62:	8f 91       	pop	r24
    2d64:	7f 91       	pop	r23
    2d66:	6f 91       	pop	r22
    2d68:	5f 91       	pop	r21
    2d6a:	4f 91       	pop	r20
    2d6c:	3f 91       	pop	r19
    2d6e:	2f 91       	pop	r18
    2d70:	0f 90       	pop	r0
    2d72:	0b be       	out	0x3b, r0	; 59
    2d74:	0f 90       	pop	r0
    2d76:	0f be       	out	0x3f, r0	; 63
    2d78:	0f 90       	pop	r0
    2d7a:	1f 90       	pop	r1
    2d7c:	18 95       	reti

00002d7e <__vector_63>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_TXC_vect)      /* Transmission Complete Interrupt */
    2d7e:	1f 92       	push	r1
    2d80:	0f 92       	push	r0
    2d82:	0f b6       	in	r0, 0x3f	; 63
    2d84:	0f 92       	push	r0
    2d86:	11 24       	eor	r1, r1
    2d88:	0b b6       	in	r0, 0x3b	; 59
    2d8a:	0f 92       	push	r0
    2d8c:	2f 93       	push	r18
    2d8e:	3f 93       	push	r19
    2d90:	4f 93       	push	r20
    2d92:	5f 93       	push	r21
    2d94:	6f 93       	push	r22
    2d96:	7f 93       	push	r23
    2d98:	8f 93       	push	r24
    2d9a:	9f 93       	push	r25
    2d9c:	af 93       	push	r26
    2d9e:	bf 93       	push	r27
    2da0:	ef 93       	push	r30
    2da2:	ff 93       	push	r31
    2da4:	e0 91 6f 21 	lds	r30, 0x216F
    2da8:	f0 91 70 21 	lds	r31, 0x2170
    2dac:	30 97       	sbiw	r30, 0x00	; 0
    2dae:	29 f0       	breq	.+10     	; 0x2dba <__vector_63+0x3c>
    2db0:	80 91 65 22 	lds	r24, 0x2265
    2db4:	90 91 66 22 	lds	r25, 0x2266
    2db8:	19 95       	eicall
    2dba:	ff 91       	pop	r31
    2dbc:	ef 91       	pop	r30
    2dbe:	bf 91       	pop	r27
    2dc0:	af 91       	pop	r26
    2dc2:	9f 91       	pop	r25
    2dc4:	8f 91       	pop	r24
    2dc6:	7f 91       	pop	r23
    2dc8:	6f 91       	pop	r22
    2dca:	5f 91       	pop	r21
    2dcc:	4f 91       	pop	r20
    2dce:	3f 91       	pop	r19
    2dd0:	2f 91       	pop	r18
    2dd2:	0f 90       	pop	r0
    2dd4:	0b be       	out	0x3b, r0	; 59
    2dd6:	0f 90       	pop	r0
    2dd8:	0f be       	out	0x3f, r0	; 63
    2dda:	0f 90       	pop	r0
    2ddc:	1f 90       	pop	r1
    2dde:	18 95       	reti

00002de0 <__vector_64>:

/* PORTD interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT0_vect)      /* External Interrupt 0 */
    2de0:	1f 92       	push	r1
    2de2:	0f 92       	push	r0
    2de4:	0f b6       	in	r0, 0x3f	; 63
    2de6:	0f 92       	push	r0
    2de8:	11 24       	eor	r1, r1
    2dea:	0b b6       	in	r0, 0x3b	; 59
    2dec:	0f 92       	push	r0
    2dee:	2f 93       	push	r18
    2df0:	3f 93       	push	r19
    2df2:	4f 93       	push	r20
    2df4:	5f 93       	push	r21
    2df6:	6f 93       	push	r22
    2df8:	7f 93       	push	r23
    2dfa:	8f 93       	push	r24
    2dfc:	9f 93       	push	r25
    2dfe:	af 93       	push	r26
    2e00:	bf 93       	push	r27
    2e02:	ef 93       	push	r30
    2e04:	ff 93       	push	r31
    2e06:	e0 91 71 21 	lds	r30, 0x2171
    2e0a:	f0 91 72 21 	lds	r31, 0x2172
    2e0e:	30 97       	sbiw	r30, 0x00	; 0
    2e10:	29 f0       	breq	.+10     	; 0x2e1c <__vector_64+0x3c>
    2e12:	80 91 67 22 	lds	r24, 0x2267
    2e16:	90 91 68 22 	lds	r25, 0x2268
    2e1a:	19 95       	eicall
    2e1c:	ff 91       	pop	r31
    2e1e:	ef 91       	pop	r30
    2e20:	bf 91       	pop	r27
    2e22:	af 91       	pop	r26
    2e24:	9f 91       	pop	r25
    2e26:	8f 91       	pop	r24
    2e28:	7f 91       	pop	r23
    2e2a:	6f 91       	pop	r22
    2e2c:	5f 91       	pop	r21
    2e2e:	4f 91       	pop	r20
    2e30:	3f 91       	pop	r19
    2e32:	2f 91       	pop	r18
    2e34:	0f 90       	pop	r0
    2e36:	0b be       	out	0x3b, r0	; 59
    2e38:	0f 90       	pop	r0
    2e3a:	0f be       	out	0x3f, r0	; 63
    2e3c:	0f 90       	pop	r0
    2e3e:	1f 90       	pop	r1
    2e40:	18 95       	reti

00002e42 <__vector_65>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT1_vect)      /* External Interrupt 1 */
    2e42:	1f 92       	push	r1
    2e44:	0f 92       	push	r0
    2e46:	0f b6       	in	r0, 0x3f	; 63
    2e48:	0f 92       	push	r0
    2e4a:	11 24       	eor	r1, r1
    2e4c:	0b b6       	in	r0, 0x3b	; 59
    2e4e:	0f 92       	push	r0
    2e50:	2f 93       	push	r18
    2e52:	3f 93       	push	r19
    2e54:	4f 93       	push	r20
    2e56:	5f 93       	push	r21
    2e58:	6f 93       	push	r22
    2e5a:	7f 93       	push	r23
    2e5c:	8f 93       	push	r24
    2e5e:	9f 93       	push	r25
    2e60:	af 93       	push	r26
    2e62:	bf 93       	push	r27
    2e64:	ef 93       	push	r30
    2e66:	ff 93       	push	r31
    2e68:	e0 91 73 21 	lds	r30, 0x2173
    2e6c:	f0 91 74 21 	lds	r31, 0x2174
    2e70:	30 97       	sbiw	r30, 0x00	; 0
    2e72:	29 f0       	breq	.+10     	; 0x2e7e <__vector_65+0x3c>
    2e74:	80 91 69 22 	lds	r24, 0x2269
    2e78:	90 91 6a 22 	lds	r25, 0x226A
    2e7c:	19 95       	eicall
    2e7e:	ff 91       	pop	r31
    2e80:	ef 91       	pop	r30
    2e82:	bf 91       	pop	r27
    2e84:	af 91       	pop	r26
    2e86:	9f 91       	pop	r25
    2e88:	8f 91       	pop	r24
    2e8a:	7f 91       	pop	r23
    2e8c:	6f 91       	pop	r22
    2e8e:	5f 91       	pop	r21
    2e90:	4f 91       	pop	r20
    2e92:	3f 91       	pop	r19
    2e94:	2f 91       	pop	r18
    2e96:	0f 90       	pop	r0
    2e98:	0b be       	out	0x3b, r0	; 59
    2e9a:	0f 90       	pop	r0
    2e9c:	0f be       	out	0x3f, r0	; 63
    2e9e:	0f 90       	pop	r0
    2ea0:	1f 90       	pop	r1
    2ea2:	18 95       	reti

00002ea4 <__vector_66>:

/* PORTA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT0_vect)      /* External Interrupt 0 */
    2ea4:	1f 92       	push	r1
    2ea6:	0f 92       	push	r0
    2ea8:	0f b6       	in	r0, 0x3f	; 63
    2eaa:	0f 92       	push	r0
    2eac:	11 24       	eor	r1, r1
    2eae:	0b b6       	in	r0, 0x3b	; 59
    2eb0:	0f 92       	push	r0
    2eb2:	2f 93       	push	r18
    2eb4:	3f 93       	push	r19
    2eb6:	4f 93       	push	r20
    2eb8:	5f 93       	push	r21
    2eba:	6f 93       	push	r22
    2ebc:	7f 93       	push	r23
    2ebe:	8f 93       	push	r24
    2ec0:	9f 93       	push	r25
    2ec2:	af 93       	push	r26
    2ec4:	bf 93       	push	r27
    2ec6:	ef 93       	push	r30
    2ec8:	ff 93       	push	r31
    2eca:	e0 91 75 21 	lds	r30, 0x2175
    2ece:	f0 91 76 21 	lds	r31, 0x2176
    2ed2:	30 97       	sbiw	r30, 0x00	; 0
    2ed4:	29 f0       	breq	.+10     	; 0x2ee0 <__vector_66+0x3c>
    2ed6:	80 91 6b 22 	lds	r24, 0x226B
    2eda:	90 91 6c 22 	lds	r25, 0x226C
    2ede:	19 95       	eicall
    2ee0:	ff 91       	pop	r31
    2ee2:	ef 91       	pop	r30
    2ee4:	bf 91       	pop	r27
    2ee6:	af 91       	pop	r26
    2ee8:	9f 91       	pop	r25
    2eea:	8f 91       	pop	r24
    2eec:	7f 91       	pop	r23
    2eee:	6f 91       	pop	r22
    2ef0:	5f 91       	pop	r21
    2ef2:	4f 91       	pop	r20
    2ef4:	3f 91       	pop	r19
    2ef6:	2f 91       	pop	r18
    2ef8:	0f 90       	pop	r0
    2efa:	0b be       	out	0x3b, r0	; 59
    2efc:	0f 90       	pop	r0
    2efe:	0f be       	out	0x3f, r0	; 63
    2f00:	0f 90       	pop	r0
    2f02:	1f 90       	pop	r1
    2f04:	18 95       	reti

00002f06 <__vector_67>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT1_vect)      /* External Interrupt 1 */
    2f06:	1f 92       	push	r1
    2f08:	0f 92       	push	r0
    2f0a:	0f b6       	in	r0, 0x3f	; 63
    2f0c:	0f 92       	push	r0
    2f0e:	11 24       	eor	r1, r1
    2f10:	0b b6       	in	r0, 0x3b	; 59
    2f12:	0f 92       	push	r0
    2f14:	2f 93       	push	r18
    2f16:	3f 93       	push	r19
    2f18:	4f 93       	push	r20
    2f1a:	5f 93       	push	r21
    2f1c:	6f 93       	push	r22
    2f1e:	7f 93       	push	r23
    2f20:	8f 93       	push	r24
    2f22:	9f 93       	push	r25
    2f24:	af 93       	push	r26
    2f26:	bf 93       	push	r27
    2f28:	ef 93       	push	r30
    2f2a:	ff 93       	push	r31
    2f2c:	e0 91 77 21 	lds	r30, 0x2177
    2f30:	f0 91 78 21 	lds	r31, 0x2178
    2f34:	30 97       	sbiw	r30, 0x00	; 0
    2f36:	29 f0       	breq	.+10     	; 0x2f42 <__vector_67+0x3c>
    2f38:	80 91 6d 22 	lds	r24, 0x226D
    2f3c:	90 91 6e 22 	lds	r25, 0x226E
    2f40:	19 95       	eicall
    2f42:	ff 91       	pop	r31
    2f44:	ef 91       	pop	r30
    2f46:	bf 91       	pop	r27
    2f48:	af 91       	pop	r26
    2f4a:	9f 91       	pop	r25
    2f4c:	8f 91       	pop	r24
    2f4e:	7f 91       	pop	r23
    2f50:	6f 91       	pop	r22
    2f52:	5f 91       	pop	r21
    2f54:	4f 91       	pop	r20
    2f56:	3f 91       	pop	r19
    2f58:	2f 91       	pop	r18
    2f5a:	0f 90       	pop	r0
    2f5c:	0b be       	out	0x3b, r0	; 59
    2f5e:	0f 90       	pop	r0
    2f60:	0f be       	out	0x3f, r0	; 63
    2f62:	0f 90       	pop	r0
    2f64:	1f 90       	pop	r1
    2f66:	18 95       	reti

00002f68 <__vector_68>:

/* ACA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC0_vect)      /* AC0 Interrupt */
    2f68:	1f 92       	push	r1
    2f6a:	0f 92       	push	r0
    2f6c:	0f b6       	in	r0, 0x3f	; 63
    2f6e:	0f 92       	push	r0
    2f70:	11 24       	eor	r1, r1
    2f72:	0b b6       	in	r0, 0x3b	; 59
    2f74:	0f 92       	push	r0
    2f76:	2f 93       	push	r18
    2f78:	3f 93       	push	r19
    2f7a:	4f 93       	push	r20
    2f7c:	5f 93       	push	r21
    2f7e:	6f 93       	push	r22
    2f80:	7f 93       	push	r23
    2f82:	8f 93       	push	r24
    2f84:	9f 93       	push	r25
    2f86:	af 93       	push	r26
    2f88:	bf 93       	push	r27
    2f8a:	ef 93       	push	r30
    2f8c:	ff 93       	push	r31
    2f8e:	e0 91 79 21 	lds	r30, 0x2179
    2f92:	f0 91 7a 21 	lds	r31, 0x217A
    2f96:	30 97       	sbiw	r30, 0x00	; 0
    2f98:	29 f0       	breq	.+10     	; 0x2fa4 <__vector_68+0x3c>
    2f9a:	80 91 6f 22 	lds	r24, 0x226F
    2f9e:	90 91 70 22 	lds	r25, 0x2270
    2fa2:	19 95       	eicall
    2fa4:	ff 91       	pop	r31
    2fa6:	ef 91       	pop	r30
    2fa8:	bf 91       	pop	r27
    2faa:	af 91       	pop	r26
    2fac:	9f 91       	pop	r25
    2fae:	8f 91       	pop	r24
    2fb0:	7f 91       	pop	r23
    2fb2:	6f 91       	pop	r22
    2fb4:	5f 91       	pop	r21
    2fb6:	4f 91       	pop	r20
    2fb8:	3f 91       	pop	r19
    2fba:	2f 91       	pop	r18
    2fbc:	0f 90       	pop	r0
    2fbe:	0b be       	out	0x3b, r0	; 59
    2fc0:	0f 90       	pop	r0
    2fc2:	0f be       	out	0x3f, r0	; 63
    2fc4:	0f 90       	pop	r0
    2fc6:	1f 90       	pop	r1
    2fc8:	18 95       	reti

00002fca <__vector_69>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC1_vect)      /* AC1 Interrupt */
    2fca:	1f 92       	push	r1
    2fcc:	0f 92       	push	r0
    2fce:	0f b6       	in	r0, 0x3f	; 63
    2fd0:	0f 92       	push	r0
    2fd2:	11 24       	eor	r1, r1
    2fd4:	0b b6       	in	r0, 0x3b	; 59
    2fd6:	0f 92       	push	r0
    2fd8:	2f 93       	push	r18
    2fda:	3f 93       	push	r19
    2fdc:	4f 93       	push	r20
    2fde:	5f 93       	push	r21
    2fe0:	6f 93       	push	r22
    2fe2:	7f 93       	push	r23
    2fe4:	8f 93       	push	r24
    2fe6:	9f 93       	push	r25
    2fe8:	af 93       	push	r26
    2fea:	bf 93       	push	r27
    2fec:	ef 93       	push	r30
    2fee:	ff 93       	push	r31
    2ff0:	e0 91 7b 21 	lds	r30, 0x217B
    2ff4:	f0 91 7c 21 	lds	r31, 0x217C
    2ff8:	30 97       	sbiw	r30, 0x00	; 0
    2ffa:	29 f0       	breq	.+10     	; 0x3006 <__vector_69+0x3c>
    2ffc:	80 91 71 22 	lds	r24, 0x2271
    3000:	90 91 72 22 	lds	r25, 0x2272
    3004:	19 95       	eicall
    3006:	ff 91       	pop	r31
    3008:	ef 91       	pop	r30
    300a:	bf 91       	pop	r27
    300c:	af 91       	pop	r26
    300e:	9f 91       	pop	r25
    3010:	8f 91       	pop	r24
    3012:	7f 91       	pop	r23
    3014:	6f 91       	pop	r22
    3016:	5f 91       	pop	r21
    3018:	4f 91       	pop	r20
    301a:	3f 91       	pop	r19
    301c:	2f 91       	pop	r18
    301e:	0f 90       	pop	r0
    3020:	0b be       	out	0x3b, r0	; 59
    3022:	0f 90       	pop	r0
    3024:	0f be       	out	0x3f, r0	; 63
    3026:	0f 90       	pop	r0
    3028:	1f 90       	pop	r1
    302a:	18 95       	reti

0000302c <__vector_70>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_ACW_vect)      /* ACW Window Mode Interrupt */
    302c:	1f 92       	push	r1
    302e:	0f 92       	push	r0
    3030:	0f b6       	in	r0, 0x3f	; 63
    3032:	0f 92       	push	r0
    3034:	11 24       	eor	r1, r1
    3036:	0b b6       	in	r0, 0x3b	; 59
    3038:	0f 92       	push	r0
    303a:	2f 93       	push	r18
    303c:	3f 93       	push	r19
    303e:	4f 93       	push	r20
    3040:	5f 93       	push	r21
    3042:	6f 93       	push	r22
    3044:	7f 93       	push	r23
    3046:	8f 93       	push	r24
    3048:	9f 93       	push	r25
    304a:	af 93       	push	r26
    304c:	bf 93       	push	r27
    304e:	ef 93       	push	r30
    3050:	ff 93       	push	r31
    3052:	e0 91 7d 21 	lds	r30, 0x217D
    3056:	f0 91 7e 21 	lds	r31, 0x217E
    305a:	30 97       	sbiw	r30, 0x00	; 0
    305c:	29 f0       	breq	.+10     	; 0x3068 <__vector_70+0x3c>
    305e:	80 91 73 22 	lds	r24, 0x2273
    3062:	90 91 74 22 	lds	r25, 0x2274
    3066:	19 95       	eicall
    3068:	ff 91       	pop	r31
    306a:	ef 91       	pop	r30
    306c:	bf 91       	pop	r27
    306e:	af 91       	pop	r26
    3070:	9f 91       	pop	r25
    3072:	8f 91       	pop	r24
    3074:	7f 91       	pop	r23
    3076:	6f 91       	pop	r22
    3078:	5f 91       	pop	r21
    307a:	4f 91       	pop	r20
    307c:	3f 91       	pop	r19
    307e:	2f 91       	pop	r18
    3080:	0f 90       	pop	r0
    3082:	0b be       	out	0x3b, r0	; 59
    3084:	0f 90       	pop	r0
    3086:	0f be       	out	0x3f, r0	; 63
    3088:	0f 90       	pop	r0
    308a:	1f 90       	pop	r1
    308c:	18 95       	reti

0000308e <__vector_71>:

/* ADCA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH0_vect)      /* Interrupt 0 */
    308e:	1f 92       	push	r1
    3090:	0f 92       	push	r0
    3092:	0f b6       	in	r0, 0x3f	; 63
    3094:	0f 92       	push	r0
    3096:	11 24       	eor	r1, r1
    3098:	0b b6       	in	r0, 0x3b	; 59
    309a:	0f 92       	push	r0
    309c:	2f 93       	push	r18
    309e:	3f 93       	push	r19
    30a0:	4f 93       	push	r20
    30a2:	5f 93       	push	r21
    30a4:	6f 93       	push	r22
    30a6:	7f 93       	push	r23
    30a8:	8f 93       	push	r24
    30aa:	9f 93       	push	r25
    30ac:	af 93       	push	r26
    30ae:	bf 93       	push	r27
    30b0:	ef 93       	push	r30
    30b2:	ff 93       	push	r31
    30b4:	e0 91 7f 21 	lds	r30, 0x217F
    30b8:	f0 91 80 21 	lds	r31, 0x2180
    30bc:	30 97       	sbiw	r30, 0x00	; 0
    30be:	29 f0       	breq	.+10     	; 0x30ca <__vector_71+0x3c>
    30c0:	80 91 75 22 	lds	r24, 0x2275
    30c4:	90 91 76 22 	lds	r25, 0x2276
    30c8:	19 95       	eicall
    30ca:	ff 91       	pop	r31
    30cc:	ef 91       	pop	r30
    30ce:	bf 91       	pop	r27
    30d0:	af 91       	pop	r26
    30d2:	9f 91       	pop	r25
    30d4:	8f 91       	pop	r24
    30d6:	7f 91       	pop	r23
    30d8:	6f 91       	pop	r22
    30da:	5f 91       	pop	r21
    30dc:	4f 91       	pop	r20
    30de:	3f 91       	pop	r19
    30e0:	2f 91       	pop	r18
    30e2:	0f 90       	pop	r0
    30e4:	0b be       	out	0x3b, r0	; 59
    30e6:	0f 90       	pop	r0
    30e8:	0f be       	out	0x3f, r0	; 63
    30ea:	0f 90       	pop	r0
    30ec:	1f 90       	pop	r1
    30ee:	18 95       	reti

000030f0 <__vector_72>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH1_vect)      /* Interrupt 1 */
    30f0:	1f 92       	push	r1
    30f2:	0f 92       	push	r0
    30f4:	0f b6       	in	r0, 0x3f	; 63
    30f6:	0f 92       	push	r0
    30f8:	11 24       	eor	r1, r1
    30fa:	0b b6       	in	r0, 0x3b	; 59
    30fc:	0f 92       	push	r0
    30fe:	2f 93       	push	r18
    3100:	3f 93       	push	r19
    3102:	4f 93       	push	r20
    3104:	5f 93       	push	r21
    3106:	6f 93       	push	r22
    3108:	7f 93       	push	r23
    310a:	8f 93       	push	r24
    310c:	9f 93       	push	r25
    310e:	af 93       	push	r26
    3110:	bf 93       	push	r27
    3112:	ef 93       	push	r30
    3114:	ff 93       	push	r31
    3116:	e0 91 81 21 	lds	r30, 0x2181
    311a:	f0 91 82 21 	lds	r31, 0x2182
    311e:	30 97       	sbiw	r30, 0x00	; 0
    3120:	29 f0       	breq	.+10     	; 0x312c <__vector_72+0x3c>
    3122:	80 91 77 22 	lds	r24, 0x2277
    3126:	90 91 78 22 	lds	r25, 0x2278
    312a:	19 95       	eicall
    312c:	ff 91       	pop	r31
    312e:	ef 91       	pop	r30
    3130:	bf 91       	pop	r27
    3132:	af 91       	pop	r26
    3134:	9f 91       	pop	r25
    3136:	8f 91       	pop	r24
    3138:	7f 91       	pop	r23
    313a:	6f 91       	pop	r22
    313c:	5f 91       	pop	r21
    313e:	4f 91       	pop	r20
    3140:	3f 91       	pop	r19
    3142:	2f 91       	pop	r18
    3144:	0f 90       	pop	r0
    3146:	0b be       	out	0x3b, r0	; 59
    3148:	0f 90       	pop	r0
    314a:	0f be       	out	0x3f, r0	; 63
    314c:	0f 90       	pop	r0
    314e:	1f 90       	pop	r1
    3150:	18 95       	reti

00003152 <__vector_73>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH2_vect)      /* Interrupt 2 */
    3152:	1f 92       	push	r1
    3154:	0f 92       	push	r0
    3156:	0f b6       	in	r0, 0x3f	; 63
    3158:	0f 92       	push	r0
    315a:	11 24       	eor	r1, r1
    315c:	0b b6       	in	r0, 0x3b	; 59
    315e:	0f 92       	push	r0
    3160:	2f 93       	push	r18
    3162:	3f 93       	push	r19
    3164:	4f 93       	push	r20
    3166:	5f 93       	push	r21
    3168:	6f 93       	push	r22
    316a:	7f 93       	push	r23
    316c:	8f 93       	push	r24
    316e:	9f 93       	push	r25
    3170:	af 93       	push	r26
    3172:	bf 93       	push	r27
    3174:	ef 93       	push	r30
    3176:	ff 93       	push	r31
    3178:	e0 91 83 21 	lds	r30, 0x2183
    317c:	f0 91 84 21 	lds	r31, 0x2184
    3180:	30 97       	sbiw	r30, 0x00	; 0
    3182:	29 f0       	breq	.+10     	; 0x318e <__vector_73+0x3c>
    3184:	80 91 79 22 	lds	r24, 0x2279
    3188:	90 91 7a 22 	lds	r25, 0x227A
    318c:	19 95       	eicall
    318e:	ff 91       	pop	r31
    3190:	ef 91       	pop	r30
    3192:	bf 91       	pop	r27
    3194:	af 91       	pop	r26
    3196:	9f 91       	pop	r25
    3198:	8f 91       	pop	r24
    319a:	7f 91       	pop	r23
    319c:	6f 91       	pop	r22
    319e:	5f 91       	pop	r21
    31a0:	4f 91       	pop	r20
    31a2:	3f 91       	pop	r19
    31a4:	2f 91       	pop	r18
    31a6:	0f 90       	pop	r0
    31a8:	0b be       	out	0x3b, r0	; 59
    31aa:	0f 90       	pop	r0
    31ac:	0f be       	out	0x3f, r0	; 63
    31ae:	0f 90       	pop	r0
    31b0:	1f 90       	pop	r1
    31b2:	18 95       	reti

000031b4 <__vector_74>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH3_vect)      /* Interrupt 3 */
    31b4:	1f 92       	push	r1
    31b6:	0f 92       	push	r0
    31b8:	0f b6       	in	r0, 0x3f	; 63
    31ba:	0f 92       	push	r0
    31bc:	11 24       	eor	r1, r1
    31be:	0b b6       	in	r0, 0x3b	; 59
    31c0:	0f 92       	push	r0
    31c2:	2f 93       	push	r18
    31c4:	3f 93       	push	r19
    31c6:	4f 93       	push	r20
    31c8:	5f 93       	push	r21
    31ca:	6f 93       	push	r22
    31cc:	7f 93       	push	r23
    31ce:	8f 93       	push	r24
    31d0:	9f 93       	push	r25
    31d2:	af 93       	push	r26
    31d4:	bf 93       	push	r27
    31d6:	ef 93       	push	r30
    31d8:	ff 93       	push	r31
    31da:	e0 91 85 21 	lds	r30, 0x2185
    31de:	f0 91 86 21 	lds	r31, 0x2186
    31e2:	30 97       	sbiw	r30, 0x00	; 0
    31e4:	29 f0       	breq	.+10     	; 0x31f0 <__vector_74+0x3c>
    31e6:	80 91 7b 22 	lds	r24, 0x227B
    31ea:	90 91 7c 22 	lds	r25, 0x227C
    31ee:	19 95       	eicall
    31f0:	ff 91       	pop	r31
    31f2:	ef 91       	pop	r30
    31f4:	bf 91       	pop	r27
    31f6:	af 91       	pop	r26
    31f8:	9f 91       	pop	r25
    31fa:	8f 91       	pop	r24
    31fc:	7f 91       	pop	r23
    31fe:	6f 91       	pop	r22
    3200:	5f 91       	pop	r21
    3202:	4f 91       	pop	r20
    3204:	3f 91       	pop	r19
    3206:	2f 91       	pop	r18
    3208:	0f 90       	pop	r0
    320a:	0b be       	out	0x3b, r0	; 59
    320c:	0f 90       	pop	r0
    320e:	0f be       	out	0x3f, r0	; 63
    3210:	0f 90       	pop	r0
    3212:	1f 90       	pop	r1
    3214:	18 95       	reti

00003216 <__vector_77>:

/* TCD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_OVF_vect)      /* Overflow Interrupt */
    3216:	1f 92       	push	r1
    3218:	0f 92       	push	r0
    321a:	0f b6       	in	r0, 0x3f	; 63
    321c:	0f 92       	push	r0
    321e:	11 24       	eor	r1, r1
    3220:	0b b6       	in	r0, 0x3b	; 59
    3222:	0f 92       	push	r0
    3224:	2f 93       	push	r18
    3226:	3f 93       	push	r19
    3228:	4f 93       	push	r20
    322a:	5f 93       	push	r21
    322c:	6f 93       	push	r22
    322e:	7f 93       	push	r23
    3230:	8f 93       	push	r24
    3232:	9f 93       	push	r25
    3234:	af 93       	push	r26
    3236:	bf 93       	push	r27
    3238:	ef 93       	push	r30
    323a:	ff 93       	push	r31
    323c:	e0 91 8b 21 	lds	r30, 0x218B
    3240:	f0 91 8c 21 	lds	r31, 0x218C
    3244:	30 97       	sbiw	r30, 0x00	; 0
    3246:	29 f0       	breq	.+10     	; 0x3252 <__vector_77+0x3c>
    3248:	80 91 81 22 	lds	r24, 0x2281
    324c:	90 91 82 22 	lds	r25, 0x2282
    3250:	19 95       	eicall
    3252:	ff 91       	pop	r31
    3254:	ef 91       	pop	r30
    3256:	bf 91       	pop	r27
    3258:	af 91       	pop	r26
    325a:	9f 91       	pop	r25
    325c:	8f 91       	pop	r24
    325e:	7f 91       	pop	r23
    3260:	6f 91       	pop	r22
    3262:	5f 91       	pop	r21
    3264:	4f 91       	pop	r20
    3266:	3f 91       	pop	r19
    3268:	2f 91       	pop	r18
    326a:	0f 90       	pop	r0
    326c:	0b be       	out	0x3b, r0	; 59
    326e:	0f 90       	pop	r0
    3270:	0f be       	out	0x3f, r0	; 63
    3272:	0f 90       	pop	r0
    3274:	1f 90       	pop	r1
    3276:	18 95       	reti

00003278 <__vector_78>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_ERR_vect)      /* Error Interrupt */
    3278:	1f 92       	push	r1
    327a:	0f 92       	push	r0
    327c:	0f b6       	in	r0, 0x3f	; 63
    327e:	0f 92       	push	r0
    3280:	11 24       	eor	r1, r1
    3282:	0b b6       	in	r0, 0x3b	; 59
    3284:	0f 92       	push	r0
    3286:	2f 93       	push	r18
    3288:	3f 93       	push	r19
    328a:	4f 93       	push	r20
    328c:	5f 93       	push	r21
    328e:	6f 93       	push	r22
    3290:	7f 93       	push	r23
    3292:	8f 93       	push	r24
    3294:	9f 93       	push	r25
    3296:	af 93       	push	r26
    3298:	bf 93       	push	r27
    329a:	ef 93       	push	r30
    329c:	ff 93       	push	r31
    329e:	e0 91 8d 21 	lds	r30, 0x218D
    32a2:	f0 91 8e 21 	lds	r31, 0x218E
    32a6:	30 97       	sbiw	r30, 0x00	; 0
    32a8:	29 f0       	breq	.+10     	; 0x32b4 <__vector_78+0x3c>
    32aa:	80 91 83 22 	lds	r24, 0x2283
    32ae:	90 91 84 22 	lds	r25, 0x2284
    32b2:	19 95       	eicall
    32b4:	ff 91       	pop	r31
    32b6:	ef 91       	pop	r30
    32b8:	bf 91       	pop	r27
    32ba:	af 91       	pop	r26
    32bc:	9f 91       	pop	r25
    32be:	8f 91       	pop	r24
    32c0:	7f 91       	pop	r23
    32c2:	6f 91       	pop	r22
    32c4:	5f 91       	pop	r21
    32c6:	4f 91       	pop	r20
    32c8:	3f 91       	pop	r19
    32ca:	2f 91       	pop	r18
    32cc:	0f 90       	pop	r0
    32ce:	0b be       	out	0x3b, r0	; 59
    32d0:	0f 90       	pop	r0
    32d2:	0f be       	out	0x3f, r0	; 63
    32d4:	0f 90       	pop	r0
    32d6:	1f 90       	pop	r1
    32d8:	18 95       	reti

000032da <__vector_79>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCA_vect)      /* Compare or Capture A Interrupt */
    32da:	1f 92       	push	r1
    32dc:	0f 92       	push	r0
    32de:	0f b6       	in	r0, 0x3f	; 63
    32e0:	0f 92       	push	r0
    32e2:	11 24       	eor	r1, r1
    32e4:	0b b6       	in	r0, 0x3b	; 59
    32e6:	0f 92       	push	r0
    32e8:	2f 93       	push	r18
    32ea:	3f 93       	push	r19
    32ec:	4f 93       	push	r20
    32ee:	5f 93       	push	r21
    32f0:	6f 93       	push	r22
    32f2:	7f 93       	push	r23
    32f4:	8f 93       	push	r24
    32f6:	9f 93       	push	r25
    32f8:	af 93       	push	r26
    32fa:	bf 93       	push	r27
    32fc:	ef 93       	push	r30
    32fe:	ff 93       	push	r31
    3300:	e0 91 8f 21 	lds	r30, 0x218F
    3304:	f0 91 90 21 	lds	r31, 0x2190
    3308:	30 97       	sbiw	r30, 0x00	; 0
    330a:	29 f0       	breq	.+10     	; 0x3316 <__vector_79+0x3c>
    330c:	80 91 85 22 	lds	r24, 0x2285
    3310:	90 91 86 22 	lds	r25, 0x2286
    3314:	19 95       	eicall
    3316:	ff 91       	pop	r31
    3318:	ef 91       	pop	r30
    331a:	bf 91       	pop	r27
    331c:	af 91       	pop	r26
    331e:	9f 91       	pop	r25
    3320:	8f 91       	pop	r24
    3322:	7f 91       	pop	r23
    3324:	6f 91       	pop	r22
    3326:	5f 91       	pop	r21
    3328:	4f 91       	pop	r20
    332a:	3f 91       	pop	r19
    332c:	2f 91       	pop	r18
    332e:	0f 90       	pop	r0
    3330:	0b be       	out	0x3b, r0	; 59
    3332:	0f 90       	pop	r0
    3334:	0f be       	out	0x3f, r0	; 63
    3336:	0f 90       	pop	r0
    3338:	1f 90       	pop	r1
    333a:	18 95       	reti

0000333c <__vector_80>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCB_vect)      /* Compare or Capture B Interrupt */
    333c:	1f 92       	push	r1
    333e:	0f 92       	push	r0
    3340:	0f b6       	in	r0, 0x3f	; 63
    3342:	0f 92       	push	r0
    3344:	11 24       	eor	r1, r1
    3346:	0b b6       	in	r0, 0x3b	; 59
    3348:	0f 92       	push	r0
    334a:	2f 93       	push	r18
    334c:	3f 93       	push	r19
    334e:	4f 93       	push	r20
    3350:	5f 93       	push	r21
    3352:	6f 93       	push	r22
    3354:	7f 93       	push	r23
    3356:	8f 93       	push	r24
    3358:	9f 93       	push	r25
    335a:	af 93       	push	r26
    335c:	bf 93       	push	r27
    335e:	ef 93       	push	r30
    3360:	ff 93       	push	r31
    3362:	e0 91 91 21 	lds	r30, 0x2191
    3366:	f0 91 92 21 	lds	r31, 0x2192
    336a:	30 97       	sbiw	r30, 0x00	; 0
    336c:	29 f0       	breq	.+10     	; 0x3378 <__vector_80+0x3c>
    336e:	80 91 87 22 	lds	r24, 0x2287
    3372:	90 91 88 22 	lds	r25, 0x2288
    3376:	19 95       	eicall
    3378:	ff 91       	pop	r31
    337a:	ef 91       	pop	r30
    337c:	bf 91       	pop	r27
    337e:	af 91       	pop	r26
    3380:	9f 91       	pop	r25
    3382:	8f 91       	pop	r24
    3384:	7f 91       	pop	r23
    3386:	6f 91       	pop	r22
    3388:	5f 91       	pop	r21
    338a:	4f 91       	pop	r20
    338c:	3f 91       	pop	r19
    338e:	2f 91       	pop	r18
    3390:	0f 90       	pop	r0
    3392:	0b be       	out	0x3b, r0	; 59
    3394:	0f 90       	pop	r0
    3396:	0f be       	out	0x3f, r0	; 63
    3398:	0f 90       	pop	r0
    339a:	1f 90       	pop	r1
    339c:	18 95       	reti

0000339e <__vector_81>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCC_vect)      /* Compare or Capture C Interrupt */
    339e:	1f 92       	push	r1
    33a0:	0f 92       	push	r0
    33a2:	0f b6       	in	r0, 0x3f	; 63
    33a4:	0f 92       	push	r0
    33a6:	11 24       	eor	r1, r1
    33a8:	0b b6       	in	r0, 0x3b	; 59
    33aa:	0f 92       	push	r0
    33ac:	2f 93       	push	r18
    33ae:	3f 93       	push	r19
    33b0:	4f 93       	push	r20
    33b2:	5f 93       	push	r21
    33b4:	6f 93       	push	r22
    33b6:	7f 93       	push	r23
    33b8:	8f 93       	push	r24
    33ba:	9f 93       	push	r25
    33bc:	af 93       	push	r26
    33be:	bf 93       	push	r27
    33c0:	ef 93       	push	r30
    33c2:	ff 93       	push	r31
    33c4:	e0 91 93 21 	lds	r30, 0x2193
    33c8:	f0 91 94 21 	lds	r31, 0x2194
    33cc:	30 97       	sbiw	r30, 0x00	; 0
    33ce:	29 f0       	breq	.+10     	; 0x33da <__vector_81+0x3c>
    33d0:	80 91 89 22 	lds	r24, 0x2289
    33d4:	90 91 8a 22 	lds	r25, 0x228A
    33d8:	19 95       	eicall
    33da:	ff 91       	pop	r31
    33dc:	ef 91       	pop	r30
    33de:	bf 91       	pop	r27
    33e0:	af 91       	pop	r26
    33e2:	9f 91       	pop	r25
    33e4:	8f 91       	pop	r24
    33e6:	7f 91       	pop	r23
    33e8:	6f 91       	pop	r22
    33ea:	5f 91       	pop	r21
    33ec:	4f 91       	pop	r20
    33ee:	3f 91       	pop	r19
    33f0:	2f 91       	pop	r18
    33f2:	0f 90       	pop	r0
    33f4:	0b be       	out	0x3b, r0	; 59
    33f6:	0f 90       	pop	r0
    33f8:	0f be       	out	0x3f, r0	; 63
    33fa:	0f 90       	pop	r0
    33fc:	1f 90       	pop	r1
    33fe:	18 95       	reti

00003400 <__vector_82>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCD_vect)      /* Compare or Capture D Interrupt */
    3400:	1f 92       	push	r1
    3402:	0f 92       	push	r0
    3404:	0f b6       	in	r0, 0x3f	; 63
    3406:	0f 92       	push	r0
    3408:	11 24       	eor	r1, r1
    340a:	0b b6       	in	r0, 0x3b	; 59
    340c:	0f 92       	push	r0
    340e:	2f 93       	push	r18
    3410:	3f 93       	push	r19
    3412:	4f 93       	push	r20
    3414:	5f 93       	push	r21
    3416:	6f 93       	push	r22
    3418:	7f 93       	push	r23
    341a:	8f 93       	push	r24
    341c:	9f 93       	push	r25
    341e:	af 93       	push	r26
    3420:	bf 93       	push	r27
    3422:	ef 93       	push	r30
    3424:	ff 93       	push	r31
    3426:	e0 91 95 21 	lds	r30, 0x2195
    342a:	f0 91 96 21 	lds	r31, 0x2196
    342e:	30 97       	sbiw	r30, 0x00	; 0
    3430:	29 f0       	breq	.+10     	; 0x343c <__vector_82+0x3c>
    3432:	80 91 8b 22 	lds	r24, 0x228B
    3436:	90 91 8c 22 	lds	r25, 0x228C
    343a:	19 95       	eicall
    343c:	ff 91       	pop	r31
    343e:	ef 91       	pop	r30
    3440:	bf 91       	pop	r27
    3442:	af 91       	pop	r26
    3444:	9f 91       	pop	r25
    3446:	8f 91       	pop	r24
    3448:	7f 91       	pop	r23
    344a:	6f 91       	pop	r22
    344c:	5f 91       	pop	r21
    344e:	4f 91       	pop	r20
    3450:	3f 91       	pop	r19
    3452:	2f 91       	pop	r18
    3454:	0f 90       	pop	r0
    3456:	0b be       	out	0x3b, r0	; 59
    3458:	0f 90       	pop	r0
    345a:	0f be       	out	0x3f, r0	; 63
    345c:	0f 90       	pop	r0
    345e:	1f 90       	pop	r1
    3460:	18 95       	reti

00003462 <__vector_83>:

/* TCD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_OVF_vect)      /* Overflow Interrupt */
    3462:	1f 92       	push	r1
    3464:	0f 92       	push	r0
    3466:	0f b6       	in	r0, 0x3f	; 63
    3468:	0f 92       	push	r0
    346a:	11 24       	eor	r1, r1
    346c:	0b b6       	in	r0, 0x3b	; 59
    346e:	0f 92       	push	r0
    3470:	2f 93       	push	r18
    3472:	3f 93       	push	r19
    3474:	4f 93       	push	r20
    3476:	5f 93       	push	r21
    3478:	6f 93       	push	r22
    347a:	7f 93       	push	r23
    347c:	8f 93       	push	r24
    347e:	9f 93       	push	r25
    3480:	af 93       	push	r26
    3482:	bf 93       	push	r27
    3484:	ef 93       	push	r30
    3486:	ff 93       	push	r31
    3488:	e0 91 97 21 	lds	r30, 0x2197
    348c:	f0 91 98 21 	lds	r31, 0x2198
    3490:	30 97       	sbiw	r30, 0x00	; 0
    3492:	29 f0       	breq	.+10     	; 0x349e <__vector_83+0x3c>
    3494:	80 91 8d 22 	lds	r24, 0x228D
    3498:	90 91 8e 22 	lds	r25, 0x228E
    349c:	19 95       	eicall
    349e:	ff 91       	pop	r31
    34a0:	ef 91       	pop	r30
    34a2:	bf 91       	pop	r27
    34a4:	af 91       	pop	r26
    34a6:	9f 91       	pop	r25
    34a8:	8f 91       	pop	r24
    34aa:	7f 91       	pop	r23
    34ac:	6f 91       	pop	r22
    34ae:	5f 91       	pop	r21
    34b0:	4f 91       	pop	r20
    34b2:	3f 91       	pop	r19
    34b4:	2f 91       	pop	r18
    34b6:	0f 90       	pop	r0
    34b8:	0b be       	out	0x3b, r0	; 59
    34ba:	0f 90       	pop	r0
    34bc:	0f be       	out	0x3f, r0	; 63
    34be:	0f 90       	pop	r0
    34c0:	1f 90       	pop	r1
    34c2:	18 95       	reti

000034c4 <__vector_84>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_ERR_vect)      /* Error Interrupt */
    34c4:	1f 92       	push	r1
    34c6:	0f 92       	push	r0
    34c8:	0f b6       	in	r0, 0x3f	; 63
    34ca:	0f 92       	push	r0
    34cc:	11 24       	eor	r1, r1
    34ce:	0b b6       	in	r0, 0x3b	; 59
    34d0:	0f 92       	push	r0
    34d2:	2f 93       	push	r18
    34d4:	3f 93       	push	r19
    34d6:	4f 93       	push	r20
    34d8:	5f 93       	push	r21
    34da:	6f 93       	push	r22
    34dc:	7f 93       	push	r23
    34de:	8f 93       	push	r24
    34e0:	9f 93       	push	r25
    34e2:	af 93       	push	r26
    34e4:	bf 93       	push	r27
    34e6:	ef 93       	push	r30
    34e8:	ff 93       	push	r31
    34ea:	e0 91 99 21 	lds	r30, 0x2199
    34ee:	f0 91 9a 21 	lds	r31, 0x219A
    34f2:	30 97       	sbiw	r30, 0x00	; 0
    34f4:	29 f0       	breq	.+10     	; 0x3500 <__vector_84+0x3c>
    34f6:	80 91 8f 22 	lds	r24, 0x228F
    34fa:	90 91 90 22 	lds	r25, 0x2290
    34fe:	19 95       	eicall
    3500:	ff 91       	pop	r31
    3502:	ef 91       	pop	r30
    3504:	bf 91       	pop	r27
    3506:	af 91       	pop	r26
    3508:	9f 91       	pop	r25
    350a:	8f 91       	pop	r24
    350c:	7f 91       	pop	r23
    350e:	6f 91       	pop	r22
    3510:	5f 91       	pop	r21
    3512:	4f 91       	pop	r20
    3514:	3f 91       	pop	r19
    3516:	2f 91       	pop	r18
    3518:	0f 90       	pop	r0
    351a:	0b be       	out	0x3b, r0	; 59
    351c:	0f 90       	pop	r0
    351e:	0f be       	out	0x3f, r0	; 63
    3520:	0f 90       	pop	r0
    3522:	1f 90       	pop	r1
    3524:	18 95       	reti

00003526 <__vector_85>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCA_vect)      /* Compare or Capture A Interrupt */
    3526:	1f 92       	push	r1
    3528:	0f 92       	push	r0
    352a:	0f b6       	in	r0, 0x3f	; 63
    352c:	0f 92       	push	r0
    352e:	11 24       	eor	r1, r1
    3530:	0b b6       	in	r0, 0x3b	; 59
    3532:	0f 92       	push	r0
    3534:	2f 93       	push	r18
    3536:	3f 93       	push	r19
    3538:	4f 93       	push	r20
    353a:	5f 93       	push	r21
    353c:	6f 93       	push	r22
    353e:	7f 93       	push	r23
    3540:	8f 93       	push	r24
    3542:	9f 93       	push	r25
    3544:	af 93       	push	r26
    3546:	bf 93       	push	r27
    3548:	ef 93       	push	r30
    354a:	ff 93       	push	r31
    354c:	e0 91 9b 21 	lds	r30, 0x219B
    3550:	f0 91 9c 21 	lds	r31, 0x219C
    3554:	30 97       	sbiw	r30, 0x00	; 0
    3556:	29 f0       	breq	.+10     	; 0x3562 <__vector_85+0x3c>
    3558:	80 91 91 22 	lds	r24, 0x2291
    355c:	90 91 92 22 	lds	r25, 0x2292
    3560:	19 95       	eicall
    3562:	ff 91       	pop	r31
    3564:	ef 91       	pop	r30
    3566:	bf 91       	pop	r27
    3568:	af 91       	pop	r26
    356a:	9f 91       	pop	r25
    356c:	8f 91       	pop	r24
    356e:	7f 91       	pop	r23
    3570:	6f 91       	pop	r22
    3572:	5f 91       	pop	r21
    3574:	4f 91       	pop	r20
    3576:	3f 91       	pop	r19
    3578:	2f 91       	pop	r18
    357a:	0f 90       	pop	r0
    357c:	0b be       	out	0x3b, r0	; 59
    357e:	0f 90       	pop	r0
    3580:	0f be       	out	0x3f, r0	; 63
    3582:	0f 90       	pop	r0
    3584:	1f 90       	pop	r1
    3586:	18 95       	reti

00003588 <__vector_86>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCB_vect)      /* Compare or Capture B Interrupt */
    3588:	1f 92       	push	r1
    358a:	0f 92       	push	r0
    358c:	0f b6       	in	r0, 0x3f	; 63
    358e:	0f 92       	push	r0
    3590:	11 24       	eor	r1, r1
    3592:	0b b6       	in	r0, 0x3b	; 59
    3594:	0f 92       	push	r0
    3596:	2f 93       	push	r18
    3598:	3f 93       	push	r19
    359a:	4f 93       	push	r20
    359c:	5f 93       	push	r21
    359e:	6f 93       	push	r22
    35a0:	7f 93       	push	r23
    35a2:	8f 93       	push	r24
    35a4:	9f 93       	push	r25
    35a6:	af 93       	push	r26
    35a8:	bf 93       	push	r27
    35aa:	ef 93       	push	r30
    35ac:	ff 93       	push	r31
    35ae:	e0 91 9d 21 	lds	r30, 0x219D
    35b2:	f0 91 9e 21 	lds	r31, 0x219E
    35b6:	30 97       	sbiw	r30, 0x00	; 0
    35b8:	29 f0       	breq	.+10     	; 0x35c4 <__vector_86+0x3c>
    35ba:	80 91 93 22 	lds	r24, 0x2293
    35be:	90 91 94 22 	lds	r25, 0x2294
    35c2:	19 95       	eicall
    35c4:	ff 91       	pop	r31
    35c6:	ef 91       	pop	r30
    35c8:	bf 91       	pop	r27
    35ca:	af 91       	pop	r26
    35cc:	9f 91       	pop	r25
    35ce:	8f 91       	pop	r24
    35d0:	7f 91       	pop	r23
    35d2:	6f 91       	pop	r22
    35d4:	5f 91       	pop	r21
    35d6:	4f 91       	pop	r20
    35d8:	3f 91       	pop	r19
    35da:	2f 91       	pop	r18
    35dc:	0f 90       	pop	r0
    35de:	0b be       	out	0x3b, r0	; 59
    35e0:	0f 90       	pop	r0
    35e2:	0f be       	out	0x3f, r0	; 63
    35e4:	0f 90       	pop	r0
    35e6:	1f 90       	pop	r1
    35e8:	18 95       	reti

000035ea <__vector_87>:

/* SPID interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPID_INT_vect)      /* SPI Interrupt */
    35ea:	1f 92       	push	r1
    35ec:	0f 92       	push	r0
    35ee:	0f b6       	in	r0, 0x3f	; 63
    35f0:	0f 92       	push	r0
    35f2:	11 24       	eor	r1, r1
    35f4:	0b b6       	in	r0, 0x3b	; 59
    35f6:	0f 92       	push	r0
    35f8:	2f 93       	push	r18
    35fa:	3f 93       	push	r19
    35fc:	4f 93       	push	r20
    35fe:	5f 93       	push	r21
    3600:	6f 93       	push	r22
    3602:	7f 93       	push	r23
    3604:	8f 93       	push	r24
    3606:	9f 93       	push	r25
    3608:	af 93       	push	r26
    360a:	bf 93       	push	r27
    360c:	ef 93       	push	r30
    360e:	ff 93       	push	r31
    3610:	e0 91 9f 21 	lds	r30, 0x219F
    3614:	f0 91 a0 21 	lds	r31, 0x21A0
    3618:	30 97       	sbiw	r30, 0x00	; 0
    361a:	29 f0       	breq	.+10     	; 0x3626 <__vector_87+0x3c>
    361c:	80 91 95 22 	lds	r24, 0x2295
    3620:	90 91 96 22 	lds	r25, 0x2296
    3624:	19 95       	eicall
    3626:	ff 91       	pop	r31
    3628:	ef 91       	pop	r30
    362a:	bf 91       	pop	r27
    362c:	af 91       	pop	r26
    362e:	9f 91       	pop	r25
    3630:	8f 91       	pop	r24
    3632:	7f 91       	pop	r23
    3634:	6f 91       	pop	r22
    3636:	5f 91       	pop	r21
    3638:	4f 91       	pop	r20
    363a:	3f 91       	pop	r19
    363c:	2f 91       	pop	r18
    363e:	0f 90       	pop	r0
    3640:	0b be       	out	0x3b, r0	; 59
    3642:	0f 90       	pop	r0
    3644:	0f be       	out	0x3f, r0	; 63
    3646:	0f 90       	pop	r0
    3648:	1f 90       	pop	r1
    364a:	18 95       	reti

0000364c <__vector_88>:

/* USARTD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_RXC_vect)      /* Reception Complete Interrupt */
    364c:	1f 92       	push	r1
    364e:	0f 92       	push	r0
    3650:	0f b6       	in	r0, 0x3f	; 63
    3652:	0f 92       	push	r0
    3654:	11 24       	eor	r1, r1
    3656:	0b b6       	in	r0, 0x3b	; 59
    3658:	0f 92       	push	r0
    365a:	2f 93       	push	r18
    365c:	3f 93       	push	r19
    365e:	4f 93       	push	r20
    3660:	5f 93       	push	r21
    3662:	6f 93       	push	r22
    3664:	7f 93       	push	r23
    3666:	8f 93       	push	r24
    3668:	9f 93       	push	r25
    366a:	af 93       	push	r26
    366c:	bf 93       	push	r27
    366e:	ef 93       	push	r30
    3670:	ff 93       	push	r31
    3672:	e0 91 a1 21 	lds	r30, 0x21A1
    3676:	f0 91 a2 21 	lds	r31, 0x21A2
    367a:	30 97       	sbiw	r30, 0x00	; 0
    367c:	29 f0       	breq	.+10     	; 0x3688 <__vector_88+0x3c>
    367e:	80 91 97 22 	lds	r24, 0x2297
    3682:	90 91 98 22 	lds	r25, 0x2298
    3686:	19 95       	eicall
    3688:	ff 91       	pop	r31
    368a:	ef 91       	pop	r30
    368c:	bf 91       	pop	r27
    368e:	af 91       	pop	r26
    3690:	9f 91       	pop	r25
    3692:	8f 91       	pop	r24
    3694:	7f 91       	pop	r23
    3696:	6f 91       	pop	r22
    3698:	5f 91       	pop	r21
    369a:	4f 91       	pop	r20
    369c:	3f 91       	pop	r19
    369e:	2f 91       	pop	r18
    36a0:	0f 90       	pop	r0
    36a2:	0b be       	out	0x3b, r0	; 59
    36a4:	0f 90       	pop	r0
    36a6:	0f be       	out	0x3f, r0	; 63
    36a8:	0f 90       	pop	r0
    36aa:	1f 90       	pop	r1
    36ac:	18 95       	reti

000036ae <__vector_89>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_DRE_vect)      /* Data Register Empty Interrupt */
    36ae:	1f 92       	push	r1
    36b0:	0f 92       	push	r0
    36b2:	0f b6       	in	r0, 0x3f	; 63
    36b4:	0f 92       	push	r0
    36b6:	11 24       	eor	r1, r1
    36b8:	0b b6       	in	r0, 0x3b	; 59
    36ba:	0f 92       	push	r0
    36bc:	2f 93       	push	r18
    36be:	3f 93       	push	r19
    36c0:	4f 93       	push	r20
    36c2:	5f 93       	push	r21
    36c4:	6f 93       	push	r22
    36c6:	7f 93       	push	r23
    36c8:	8f 93       	push	r24
    36ca:	9f 93       	push	r25
    36cc:	af 93       	push	r26
    36ce:	bf 93       	push	r27
    36d0:	ef 93       	push	r30
    36d2:	ff 93       	push	r31
    36d4:	e0 91 a3 21 	lds	r30, 0x21A3
    36d8:	f0 91 a4 21 	lds	r31, 0x21A4
    36dc:	30 97       	sbiw	r30, 0x00	; 0
    36de:	29 f0       	breq	.+10     	; 0x36ea <__vector_89+0x3c>
    36e0:	80 91 99 22 	lds	r24, 0x2299
    36e4:	90 91 9a 22 	lds	r25, 0x229A
    36e8:	19 95       	eicall
    36ea:	ff 91       	pop	r31
    36ec:	ef 91       	pop	r30
    36ee:	bf 91       	pop	r27
    36f0:	af 91       	pop	r26
    36f2:	9f 91       	pop	r25
    36f4:	8f 91       	pop	r24
    36f6:	7f 91       	pop	r23
    36f8:	6f 91       	pop	r22
    36fa:	5f 91       	pop	r21
    36fc:	4f 91       	pop	r20
    36fe:	3f 91       	pop	r19
    3700:	2f 91       	pop	r18
    3702:	0f 90       	pop	r0
    3704:	0b be       	out	0x3b, r0	; 59
    3706:	0f 90       	pop	r0
    3708:	0f be       	out	0x3f, r0	; 63
    370a:	0f 90       	pop	r0
    370c:	1f 90       	pop	r1
    370e:	18 95       	reti

00003710 <__vector_90>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_TXC_vect)      /* Transmission Complete Interrupt */
    3710:	1f 92       	push	r1
    3712:	0f 92       	push	r0
    3714:	0f b6       	in	r0, 0x3f	; 63
    3716:	0f 92       	push	r0
    3718:	11 24       	eor	r1, r1
    371a:	0b b6       	in	r0, 0x3b	; 59
    371c:	0f 92       	push	r0
    371e:	2f 93       	push	r18
    3720:	3f 93       	push	r19
    3722:	4f 93       	push	r20
    3724:	5f 93       	push	r21
    3726:	6f 93       	push	r22
    3728:	7f 93       	push	r23
    372a:	8f 93       	push	r24
    372c:	9f 93       	push	r25
    372e:	af 93       	push	r26
    3730:	bf 93       	push	r27
    3732:	ef 93       	push	r30
    3734:	ff 93       	push	r31
    3736:	e0 91 a5 21 	lds	r30, 0x21A5
    373a:	f0 91 a6 21 	lds	r31, 0x21A6
    373e:	30 97       	sbiw	r30, 0x00	; 0
    3740:	29 f0       	breq	.+10     	; 0x374c <__vector_90+0x3c>
    3742:	80 91 9b 22 	lds	r24, 0x229B
    3746:	90 91 9c 22 	lds	r25, 0x229C
    374a:	19 95       	eicall
    374c:	ff 91       	pop	r31
    374e:	ef 91       	pop	r30
    3750:	bf 91       	pop	r27
    3752:	af 91       	pop	r26
    3754:	9f 91       	pop	r25
    3756:	8f 91       	pop	r24
    3758:	7f 91       	pop	r23
    375a:	6f 91       	pop	r22
    375c:	5f 91       	pop	r21
    375e:	4f 91       	pop	r20
    3760:	3f 91       	pop	r19
    3762:	2f 91       	pop	r18
    3764:	0f 90       	pop	r0
    3766:	0b be       	out	0x3b, r0	; 59
    3768:	0f 90       	pop	r0
    376a:	0f be       	out	0x3f, r0	; 63
    376c:	0f 90       	pop	r0
    376e:	1f 90       	pop	r1
    3770:	18 95       	reti

00003772 <__vector_91>:

/* USARTD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_RXC_vect)      /* Reception Complete Interrupt */
    3772:	1f 92       	push	r1
    3774:	0f 92       	push	r0
    3776:	0f b6       	in	r0, 0x3f	; 63
    3778:	0f 92       	push	r0
    377a:	11 24       	eor	r1, r1
    377c:	0b b6       	in	r0, 0x3b	; 59
    377e:	0f 92       	push	r0
    3780:	2f 93       	push	r18
    3782:	3f 93       	push	r19
    3784:	4f 93       	push	r20
    3786:	5f 93       	push	r21
    3788:	6f 93       	push	r22
    378a:	7f 93       	push	r23
    378c:	8f 93       	push	r24
    378e:	9f 93       	push	r25
    3790:	af 93       	push	r26
    3792:	bf 93       	push	r27
    3794:	ef 93       	push	r30
    3796:	ff 93       	push	r31
    3798:	e0 91 a7 21 	lds	r30, 0x21A7
    379c:	f0 91 a8 21 	lds	r31, 0x21A8
    37a0:	30 97       	sbiw	r30, 0x00	; 0
    37a2:	29 f0       	breq	.+10     	; 0x37ae <__vector_91+0x3c>
    37a4:	80 91 9d 22 	lds	r24, 0x229D
    37a8:	90 91 9e 22 	lds	r25, 0x229E
    37ac:	19 95       	eicall
    37ae:	ff 91       	pop	r31
    37b0:	ef 91       	pop	r30
    37b2:	bf 91       	pop	r27
    37b4:	af 91       	pop	r26
    37b6:	9f 91       	pop	r25
    37b8:	8f 91       	pop	r24
    37ba:	7f 91       	pop	r23
    37bc:	6f 91       	pop	r22
    37be:	5f 91       	pop	r21
    37c0:	4f 91       	pop	r20
    37c2:	3f 91       	pop	r19
    37c4:	2f 91       	pop	r18
    37c6:	0f 90       	pop	r0
    37c8:	0b be       	out	0x3b, r0	; 59
    37ca:	0f 90       	pop	r0
    37cc:	0f be       	out	0x3f, r0	; 63
    37ce:	0f 90       	pop	r0
    37d0:	1f 90       	pop	r1
    37d2:	18 95       	reti

000037d4 <__vector_92>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_DRE_vect)      /* Data Register Empty Interrupt */
    37d4:	1f 92       	push	r1
    37d6:	0f 92       	push	r0
    37d8:	0f b6       	in	r0, 0x3f	; 63
    37da:	0f 92       	push	r0
    37dc:	11 24       	eor	r1, r1
    37de:	0b b6       	in	r0, 0x3b	; 59
    37e0:	0f 92       	push	r0
    37e2:	2f 93       	push	r18
    37e4:	3f 93       	push	r19
    37e6:	4f 93       	push	r20
    37e8:	5f 93       	push	r21
    37ea:	6f 93       	push	r22
    37ec:	7f 93       	push	r23
    37ee:	8f 93       	push	r24
    37f0:	9f 93       	push	r25
    37f2:	af 93       	push	r26
    37f4:	bf 93       	push	r27
    37f6:	ef 93       	push	r30
    37f8:	ff 93       	push	r31
    37fa:	e0 91 a9 21 	lds	r30, 0x21A9
    37fe:	f0 91 aa 21 	lds	r31, 0x21AA
    3802:	30 97       	sbiw	r30, 0x00	; 0
    3804:	29 f0       	breq	.+10     	; 0x3810 <__vector_92+0x3c>
    3806:	80 91 9f 22 	lds	r24, 0x229F
    380a:	90 91 a0 22 	lds	r25, 0x22A0
    380e:	19 95       	eicall
    3810:	ff 91       	pop	r31
    3812:	ef 91       	pop	r30
    3814:	bf 91       	pop	r27
    3816:	af 91       	pop	r26
    3818:	9f 91       	pop	r25
    381a:	8f 91       	pop	r24
    381c:	7f 91       	pop	r23
    381e:	6f 91       	pop	r22
    3820:	5f 91       	pop	r21
    3822:	4f 91       	pop	r20
    3824:	3f 91       	pop	r19
    3826:	2f 91       	pop	r18
    3828:	0f 90       	pop	r0
    382a:	0b be       	out	0x3b, r0	; 59
    382c:	0f 90       	pop	r0
    382e:	0f be       	out	0x3f, r0	; 63
    3830:	0f 90       	pop	r0
    3832:	1f 90       	pop	r1
    3834:	18 95       	reti

00003836 <__vector_93>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_TXC_vect)      /* Transmission Complete Interrupt */
    3836:	1f 92       	push	r1
    3838:	0f 92       	push	r0
    383a:	0f b6       	in	r0, 0x3f	; 63
    383c:	0f 92       	push	r0
    383e:	11 24       	eor	r1, r1
    3840:	0b b6       	in	r0, 0x3b	; 59
    3842:	0f 92       	push	r0
    3844:	2f 93       	push	r18
    3846:	3f 93       	push	r19
    3848:	4f 93       	push	r20
    384a:	5f 93       	push	r21
    384c:	6f 93       	push	r22
    384e:	7f 93       	push	r23
    3850:	8f 93       	push	r24
    3852:	9f 93       	push	r25
    3854:	af 93       	push	r26
    3856:	bf 93       	push	r27
    3858:	ef 93       	push	r30
    385a:	ff 93       	push	r31
    385c:	e0 91 ab 21 	lds	r30, 0x21AB
    3860:	f0 91 ac 21 	lds	r31, 0x21AC
    3864:	30 97       	sbiw	r30, 0x00	; 0
    3866:	29 f0       	breq	.+10     	; 0x3872 <__vector_93+0x3c>
    3868:	80 91 a1 22 	lds	r24, 0x22A1
    386c:	90 91 a2 22 	lds	r25, 0x22A2
    3870:	19 95       	eicall
    3872:	ff 91       	pop	r31
    3874:	ef 91       	pop	r30
    3876:	bf 91       	pop	r27
    3878:	af 91       	pop	r26
    387a:	9f 91       	pop	r25
    387c:	8f 91       	pop	r24
    387e:	7f 91       	pop	r23
    3880:	6f 91       	pop	r22
    3882:	5f 91       	pop	r21
    3884:	4f 91       	pop	r20
    3886:	3f 91       	pop	r19
    3888:	2f 91       	pop	r18
    388a:	0f 90       	pop	r0
    388c:	0b be       	out	0x3b, r0	; 59
    388e:	0f 90       	pop	r0
    3890:	0f be       	out	0x3f, r0	; 63
    3892:	0f 90       	pop	r0
    3894:	1f 90       	pop	r1
    3896:	18 95       	reti

00003898 <__vector_104>:

/* PORTF interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT0_vect)      /* External Interrupt 0 */
    3898:	1f 92       	push	r1
    389a:	0f 92       	push	r0
    389c:	0f b6       	in	r0, 0x3f	; 63
    389e:	0f 92       	push	r0
    38a0:	11 24       	eor	r1, r1
    38a2:	0b b6       	in	r0, 0x3b	; 59
    38a4:	0f 92       	push	r0
    38a6:	2f 93       	push	r18
    38a8:	3f 93       	push	r19
    38aa:	4f 93       	push	r20
    38ac:	5f 93       	push	r21
    38ae:	6f 93       	push	r22
    38b0:	7f 93       	push	r23
    38b2:	8f 93       	push	r24
    38b4:	9f 93       	push	r25
    38b6:	af 93       	push	r26
    38b8:	bf 93       	push	r27
    38ba:	ef 93       	push	r30
    38bc:	ff 93       	push	r31
    38be:	e0 91 c1 21 	lds	r30, 0x21C1
    38c2:	f0 91 c2 21 	lds	r31, 0x21C2
    38c6:	30 97       	sbiw	r30, 0x00	; 0
    38c8:	29 f0       	breq	.+10     	; 0x38d4 <__vector_104+0x3c>
    38ca:	80 91 b7 22 	lds	r24, 0x22B7
    38ce:	90 91 b8 22 	lds	r25, 0x22B8
    38d2:	19 95       	eicall
    38d4:	ff 91       	pop	r31
    38d6:	ef 91       	pop	r30
    38d8:	bf 91       	pop	r27
    38da:	af 91       	pop	r26
    38dc:	9f 91       	pop	r25
    38de:	8f 91       	pop	r24
    38e0:	7f 91       	pop	r23
    38e2:	6f 91       	pop	r22
    38e4:	5f 91       	pop	r21
    38e6:	4f 91       	pop	r20
    38e8:	3f 91       	pop	r19
    38ea:	2f 91       	pop	r18
    38ec:	0f 90       	pop	r0
    38ee:	0b be       	out	0x3b, r0	; 59
    38f0:	0f 90       	pop	r0
    38f2:	0f be       	out	0x3f, r0	; 63
    38f4:	0f 90       	pop	r0
    38f6:	1f 90       	pop	r1
    38f8:	18 95       	reti

000038fa <__vector_105>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT1_vect)      /* External Interrupt 1 */
    38fa:	1f 92       	push	r1
    38fc:	0f 92       	push	r0
    38fe:	0f b6       	in	r0, 0x3f	; 63
    3900:	0f 92       	push	r0
    3902:	11 24       	eor	r1, r1
    3904:	0b b6       	in	r0, 0x3b	; 59
    3906:	0f 92       	push	r0
    3908:	2f 93       	push	r18
    390a:	3f 93       	push	r19
    390c:	4f 93       	push	r20
    390e:	5f 93       	push	r21
    3910:	6f 93       	push	r22
    3912:	7f 93       	push	r23
    3914:	8f 93       	push	r24
    3916:	9f 93       	push	r25
    3918:	af 93       	push	r26
    391a:	bf 93       	push	r27
    391c:	ef 93       	push	r30
    391e:	ff 93       	push	r31
    3920:	e0 91 c3 21 	lds	r30, 0x21C3
    3924:	f0 91 c4 21 	lds	r31, 0x21C4
    3928:	30 97       	sbiw	r30, 0x00	; 0
    392a:	29 f0       	breq	.+10     	; 0x3936 <__vector_105+0x3c>
    392c:	80 91 b9 22 	lds	r24, 0x22B9
    3930:	90 91 ba 22 	lds	r25, 0x22BA
    3934:	19 95       	eicall
    3936:	ff 91       	pop	r31
    3938:	ef 91       	pop	r30
    393a:	bf 91       	pop	r27
    393c:	af 91       	pop	r26
    393e:	9f 91       	pop	r25
    3940:	8f 91       	pop	r24
    3942:	7f 91       	pop	r23
    3944:	6f 91       	pop	r22
    3946:	5f 91       	pop	r21
    3948:	4f 91       	pop	r20
    394a:	3f 91       	pop	r19
    394c:	2f 91       	pop	r18
    394e:	0f 90       	pop	r0
    3950:	0b be       	out	0x3b, r0	; 59
    3952:	0f 90       	pop	r0
    3954:	0f be       	out	0x3f, r0	; 63
    3956:	0f 90       	pop	r0
    3958:	1f 90       	pop	r1
    395a:	18 95       	reti

0000395c <__vector_108>:

/* TCF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_OVF_vect)      /* Overflow Interrupt */
    395c:	1f 92       	push	r1
    395e:	0f 92       	push	r0
    3960:	0f b6       	in	r0, 0x3f	; 63
    3962:	0f 92       	push	r0
    3964:	11 24       	eor	r1, r1
    3966:	0b b6       	in	r0, 0x3b	; 59
    3968:	0f 92       	push	r0
    396a:	2f 93       	push	r18
    396c:	3f 93       	push	r19
    396e:	4f 93       	push	r20
    3970:	5f 93       	push	r21
    3972:	6f 93       	push	r22
    3974:	7f 93       	push	r23
    3976:	8f 93       	push	r24
    3978:	9f 93       	push	r25
    397a:	af 93       	push	r26
    397c:	bf 93       	push	r27
    397e:	ef 93       	push	r30
    3980:	ff 93       	push	r31
    3982:	e0 91 c9 21 	lds	r30, 0x21C9
    3986:	f0 91 ca 21 	lds	r31, 0x21CA
    398a:	30 97       	sbiw	r30, 0x00	; 0
    398c:	29 f0       	breq	.+10     	; 0x3998 <__vector_108+0x3c>
    398e:	80 91 bf 22 	lds	r24, 0x22BF
    3992:	90 91 c0 22 	lds	r25, 0x22C0
    3996:	19 95       	eicall
    3998:	ff 91       	pop	r31
    399a:	ef 91       	pop	r30
    399c:	bf 91       	pop	r27
    399e:	af 91       	pop	r26
    39a0:	9f 91       	pop	r25
    39a2:	8f 91       	pop	r24
    39a4:	7f 91       	pop	r23
    39a6:	6f 91       	pop	r22
    39a8:	5f 91       	pop	r21
    39aa:	4f 91       	pop	r20
    39ac:	3f 91       	pop	r19
    39ae:	2f 91       	pop	r18
    39b0:	0f 90       	pop	r0
    39b2:	0b be       	out	0x3b, r0	; 59
    39b4:	0f 90       	pop	r0
    39b6:	0f be       	out	0x3f, r0	; 63
    39b8:	0f 90       	pop	r0
    39ba:	1f 90       	pop	r1
    39bc:	18 95       	reti

000039be <__vector_109>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_ERR_vect)      /* Error Interrupt */
    39be:	1f 92       	push	r1
    39c0:	0f 92       	push	r0
    39c2:	0f b6       	in	r0, 0x3f	; 63
    39c4:	0f 92       	push	r0
    39c6:	11 24       	eor	r1, r1
    39c8:	0b b6       	in	r0, 0x3b	; 59
    39ca:	0f 92       	push	r0
    39cc:	2f 93       	push	r18
    39ce:	3f 93       	push	r19
    39d0:	4f 93       	push	r20
    39d2:	5f 93       	push	r21
    39d4:	6f 93       	push	r22
    39d6:	7f 93       	push	r23
    39d8:	8f 93       	push	r24
    39da:	9f 93       	push	r25
    39dc:	af 93       	push	r26
    39de:	bf 93       	push	r27
    39e0:	ef 93       	push	r30
    39e2:	ff 93       	push	r31
    39e4:	e0 91 cb 21 	lds	r30, 0x21CB
    39e8:	f0 91 cc 21 	lds	r31, 0x21CC
    39ec:	30 97       	sbiw	r30, 0x00	; 0
    39ee:	29 f0       	breq	.+10     	; 0x39fa <__vector_109+0x3c>
    39f0:	80 91 c1 22 	lds	r24, 0x22C1
    39f4:	90 91 c2 22 	lds	r25, 0x22C2
    39f8:	19 95       	eicall
    39fa:	ff 91       	pop	r31
    39fc:	ef 91       	pop	r30
    39fe:	bf 91       	pop	r27
    3a00:	af 91       	pop	r26
    3a02:	9f 91       	pop	r25
    3a04:	8f 91       	pop	r24
    3a06:	7f 91       	pop	r23
    3a08:	6f 91       	pop	r22
    3a0a:	5f 91       	pop	r21
    3a0c:	4f 91       	pop	r20
    3a0e:	3f 91       	pop	r19
    3a10:	2f 91       	pop	r18
    3a12:	0f 90       	pop	r0
    3a14:	0b be       	out	0x3b, r0	; 59
    3a16:	0f 90       	pop	r0
    3a18:	0f be       	out	0x3f, r0	; 63
    3a1a:	0f 90       	pop	r0
    3a1c:	1f 90       	pop	r1
    3a1e:	18 95       	reti

00003a20 <__vector_110>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCA_vect)      /* Compare or Capture A Interrupt */
    3a20:	1f 92       	push	r1
    3a22:	0f 92       	push	r0
    3a24:	0f b6       	in	r0, 0x3f	; 63
    3a26:	0f 92       	push	r0
    3a28:	11 24       	eor	r1, r1
    3a2a:	0b b6       	in	r0, 0x3b	; 59
    3a2c:	0f 92       	push	r0
    3a2e:	2f 93       	push	r18
    3a30:	3f 93       	push	r19
    3a32:	4f 93       	push	r20
    3a34:	5f 93       	push	r21
    3a36:	6f 93       	push	r22
    3a38:	7f 93       	push	r23
    3a3a:	8f 93       	push	r24
    3a3c:	9f 93       	push	r25
    3a3e:	af 93       	push	r26
    3a40:	bf 93       	push	r27
    3a42:	ef 93       	push	r30
    3a44:	ff 93       	push	r31
    3a46:	e0 91 cd 21 	lds	r30, 0x21CD
    3a4a:	f0 91 ce 21 	lds	r31, 0x21CE
    3a4e:	30 97       	sbiw	r30, 0x00	; 0
    3a50:	29 f0       	breq	.+10     	; 0x3a5c <__vector_110+0x3c>
    3a52:	80 91 c3 22 	lds	r24, 0x22C3
    3a56:	90 91 c4 22 	lds	r25, 0x22C4
    3a5a:	19 95       	eicall
    3a5c:	ff 91       	pop	r31
    3a5e:	ef 91       	pop	r30
    3a60:	bf 91       	pop	r27
    3a62:	af 91       	pop	r26
    3a64:	9f 91       	pop	r25
    3a66:	8f 91       	pop	r24
    3a68:	7f 91       	pop	r23
    3a6a:	6f 91       	pop	r22
    3a6c:	5f 91       	pop	r21
    3a6e:	4f 91       	pop	r20
    3a70:	3f 91       	pop	r19
    3a72:	2f 91       	pop	r18
    3a74:	0f 90       	pop	r0
    3a76:	0b be       	out	0x3b, r0	; 59
    3a78:	0f 90       	pop	r0
    3a7a:	0f be       	out	0x3f, r0	; 63
    3a7c:	0f 90       	pop	r0
    3a7e:	1f 90       	pop	r1
    3a80:	18 95       	reti

00003a82 <__vector_111>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCB_vect)      /* Compare or Capture B Interrupt */
    3a82:	1f 92       	push	r1
    3a84:	0f 92       	push	r0
    3a86:	0f b6       	in	r0, 0x3f	; 63
    3a88:	0f 92       	push	r0
    3a8a:	11 24       	eor	r1, r1
    3a8c:	0b b6       	in	r0, 0x3b	; 59
    3a8e:	0f 92       	push	r0
    3a90:	2f 93       	push	r18
    3a92:	3f 93       	push	r19
    3a94:	4f 93       	push	r20
    3a96:	5f 93       	push	r21
    3a98:	6f 93       	push	r22
    3a9a:	7f 93       	push	r23
    3a9c:	8f 93       	push	r24
    3a9e:	9f 93       	push	r25
    3aa0:	af 93       	push	r26
    3aa2:	bf 93       	push	r27
    3aa4:	ef 93       	push	r30
    3aa6:	ff 93       	push	r31
    3aa8:	e0 91 cf 21 	lds	r30, 0x21CF
    3aac:	f0 91 d0 21 	lds	r31, 0x21D0
    3ab0:	30 97       	sbiw	r30, 0x00	; 0
    3ab2:	29 f0       	breq	.+10     	; 0x3abe <__vector_111+0x3c>
    3ab4:	80 91 c5 22 	lds	r24, 0x22C5
    3ab8:	90 91 c6 22 	lds	r25, 0x22C6
    3abc:	19 95       	eicall
    3abe:	ff 91       	pop	r31
    3ac0:	ef 91       	pop	r30
    3ac2:	bf 91       	pop	r27
    3ac4:	af 91       	pop	r26
    3ac6:	9f 91       	pop	r25
    3ac8:	8f 91       	pop	r24
    3aca:	7f 91       	pop	r23
    3acc:	6f 91       	pop	r22
    3ace:	5f 91       	pop	r21
    3ad0:	4f 91       	pop	r20
    3ad2:	3f 91       	pop	r19
    3ad4:	2f 91       	pop	r18
    3ad6:	0f 90       	pop	r0
    3ad8:	0b be       	out	0x3b, r0	; 59
    3ada:	0f 90       	pop	r0
    3adc:	0f be       	out	0x3f, r0	; 63
    3ade:	0f 90       	pop	r0
    3ae0:	1f 90       	pop	r1
    3ae2:	18 95       	reti

00003ae4 <__vector_112>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCC_vect)      /* Compare or Capture C Interrupt */
    3ae4:	1f 92       	push	r1
    3ae6:	0f 92       	push	r0
    3ae8:	0f b6       	in	r0, 0x3f	; 63
    3aea:	0f 92       	push	r0
    3aec:	11 24       	eor	r1, r1
    3aee:	0b b6       	in	r0, 0x3b	; 59
    3af0:	0f 92       	push	r0
    3af2:	2f 93       	push	r18
    3af4:	3f 93       	push	r19
    3af6:	4f 93       	push	r20
    3af8:	5f 93       	push	r21
    3afa:	6f 93       	push	r22
    3afc:	7f 93       	push	r23
    3afe:	8f 93       	push	r24
    3b00:	9f 93       	push	r25
    3b02:	af 93       	push	r26
    3b04:	bf 93       	push	r27
    3b06:	ef 93       	push	r30
    3b08:	ff 93       	push	r31
    3b0a:	e0 91 d1 21 	lds	r30, 0x21D1
    3b0e:	f0 91 d2 21 	lds	r31, 0x21D2
    3b12:	30 97       	sbiw	r30, 0x00	; 0
    3b14:	29 f0       	breq	.+10     	; 0x3b20 <__vector_112+0x3c>
    3b16:	80 91 c7 22 	lds	r24, 0x22C7
    3b1a:	90 91 c8 22 	lds	r25, 0x22C8
    3b1e:	19 95       	eicall
    3b20:	ff 91       	pop	r31
    3b22:	ef 91       	pop	r30
    3b24:	bf 91       	pop	r27
    3b26:	af 91       	pop	r26
    3b28:	9f 91       	pop	r25
    3b2a:	8f 91       	pop	r24
    3b2c:	7f 91       	pop	r23
    3b2e:	6f 91       	pop	r22
    3b30:	5f 91       	pop	r21
    3b32:	4f 91       	pop	r20
    3b34:	3f 91       	pop	r19
    3b36:	2f 91       	pop	r18
    3b38:	0f 90       	pop	r0
    3b3a:	0b be       	out	0x3b, r0	; 59
    3b3c:	0f 90       	pop	r0
    3b3e:	0f be       	out	0x3f, r0	; 63
    3b40:	0f 90       	pop	r0
    3b42:	1f 90       	pop	r1
    3b44:	18 95       	reti

00003b46 <__vector_113>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCD_vect)      /* Compare or Capture D Interrupt */
    3b46:	1f 92       	push	r1
    3b48:	0f 92       	push	r0
    3b4a:	0f b6       	in	r0, 0x3f	; 63
    3b4c:	0f 92       	push	r0
    3b4e:	11 24       	eor	r1, r1
    3b50:	0b b6       	in	r0, 0x3b	; 59
    3b52:	0f 92       	push	r0
    3b54:	2f 93       	push	r18
    3b56:	3f 93       	push	r19
    3b58:	4f 93       	push	r20
    3b5a:	5f 93       	push	r21
    3b5c:	6f 93       	push	r22
    3b5e:	7f 93       	push	r23
    3b60:	8f 93       	push	r24
    3b62:	9f 93       	push	r25
    3b64:	af 93       	push	r26
    3b66:	bf 93       	push	r27
    3b68:	ef 93       	push	r30
    3b6a:	ff 93       	push	r31
    3b6c:	e0 91 d3 21 	lds	r30, 0x21D3
    3b70:	f0 91 d4 21 	lds	r31, 0x21D4
    3b74:	30 97       	sbiw	r30, 0x00	; 0
    3b76:	29 f0       	breq	.+10     	; 0x3b82 <__vector_113+0x3c>
    3b78:	80 91 c9 22 	lds	r24, 0x22C9
    3b7c:	90 91 ca 22 	lds	r25, 0x22CA
    3b80:	19 95       	eicall
    3b82:	ff 91       	pop	r31
    3b84:	ef 91       	pop	r30
    3b86:	bf 91       	pop	r27
    3b88:	af 91       	pop	r26
    3b8a:	9f 91       	pop	r25
    3b8c:	8f 91       	pop	r24
    3b8e:	7f 91       	pop	r23
    3b90:	6f 91       	pop	r22
    3b92:	5f 91       	pop	r21
    3b94:	4f 91       	pop	r20
    3b96:	3f 91       	pop	r19
    3b98:	2f 91       	pop	r18
    3b9a:	0f 90       	pop	r0
    3b9c:	0b be       	out	0x3b, r0	; 59
    3b9e:	0f 90       	pop	r0
    3ba0:	0f be       	out	0x3f, r0	; 63
    3ba2:	0f 90       	pop	r0
    3ba4:	1f 90       	pop	r1
    3ba6:	18 95       	reti

00003ba8 <__vector_119>:

/* USARTF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_RXC_vect)      /* Reception Complete Interrupt */
    3ba8:	1f 92       	push	r1
    3baa:	0f 92       	push	r0
    3bac:	0f b6       	in	r0, 0x3f	; 63
    3bae:	0f 92       	push	r0
    3bb0:	11 24       	eor	r1, r1
    3bb2:	0b b6       	in	r0, 0x3b	; 59
    3bb4:	0f 92       	push	r0
    3bb6:	2f 93       	push	r18
    3bb8:	3f 93       	push	r19
    3bba:	4f 93       	push	r20
    3bbc:	5f 93       	push	r21
    3bbe:	6f 93       	push	r22
    3bc0:	7f 93       	push	r23
    3bc2:	8f 93       	push	r24
    3bc4:	9f 93       	push	r25
    3bc6:	af 93       	push	r26
    3bc8:	bf 93       	push	r27
    3bca:	ef 93       	push	r30
    3bcc:	ff 93       	push	r31
    3bce:	e0 91 df 21 	lds	r30, 0x21DF
    3bd2:	f0 91 e0 21 	lds	r31, 0x21E0
    3bd6:	30 97       	sbiw	r30, 0x00	; 0
    3bd8:	29 f0       	breq	.+10     	; 0x3be4 <__vector_119+0x3c>
    3bda:	80 91 d5 22 	lds	r24, 0x22D5
    3bde:	90 91 d6 22 	lds	r25, 0x22D6
    3be2:	19 95       	eicall
    3be4:	ff 91       	pop	r31
    3be6:	ef 91       	pop	r30
    3be8:	bf 91       	pop	r27
    3bea:	af 91       	pop	r26
    3bec:	9f 91       	pop	r25
    3bee:	8f 91       	pop	r24
    3bf0:	7f 91       	pop	r23
    3bf2:	6f 91       	pop	r22
    3bf4:	5f 91       	pop	r21
    3bf6:	4f 91       	pop	r20
    3bf8:	3f 91       	pop	r19
    3bfa:	2f 91       	pop	r18
    3bfc:	0f 90       	pop	r0
    3bfe:	0b be       	out	0x3b, r0	; 59
    3c00:	0f 90       	pop	r0
    3c02:	0f be       	out	0x3f, r0	; 63
    3c04:	0f 90       	pop	r0
    3c06:	1f 90       	pop	r1
    3c08:	18 95       	reti

00003c0a <__vector_120>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_DRE_vect)      /* Data Register Empty Interrupt */
    3c0a:	1f 92       	push	r1
    3c0c:	0f 92       	push	r0
    3c0e:	0f b6       	in	r0, 0x3f	; 63
    3c10:	0f 92       	push	r0
    3c12:	11 24       	eor	r1, r1
    3c14:	0b b6       	in	r0, 0x3b	; 59
    3c16:	0f 92       	push	r0
    3c18:	2f 93       	push	r18
    3c1a:	3f 93       	push	r19
    3c1c:	4f 93       	push	r20
    3c1e:	5f 93       	push	r21
    3c20:	6f 93       	push	r22
    3c22:	7f 93       	push	r23
    3c24:	8f 93       	push	r24
    3c26:	9f 93       	push	r25
    3c28:	af 93       	push	r26
    3c2a:	bf 93       	push	r27
    3c2c:	ef 93       	push	r30
    3c2e:	ff 93       	push	r31
    3c30:	e0 91 e1 21 	lds	r30, 0x21E1
    3c34:	f0 91 e2 21 	lds	r31, 0x21E2
    3c38:	30 97       	sbiw	r30, 0x00	; 0
    3c3a:	29 f0       	breq	.+10     	; 0x3c46 <__vector_120+0x3c>
    3c3c:	80 91 d7 22 	lds	r24, 0x22D7
    3c40:	90 91 d8 22 	lds	r25, 0x22D8
    3c44:	19 95       	eicall
    3c46:	ff 91       	pop	r31
    3c48:	ef 91       	pop	r30
    3c4a:	bf 91       	pop	r27
    3c4c:	af 91       	pop	r26
    3c4e:	9f 91       	pop	r25
    3c50:	8f 91       	pop	r24
    3c52:	7f 91       	pop	r23
    3c54:	6f 91       	pop	r22
    3c56:	5f 91       	pop	r21
    3c58:	4f 91       	pop	r20
    3c5a:	3f 91       	pop	r19
    3c5c:	2f 91       	pop	r18
    3c5e:	0f 90       	pop	r0
    3c60:	0b be       	out	0x3b, r0	; 59
    3c62:	0f 90       	pop	r0
    3c64:	0f be       	out	0x3f, r0	; 63
    3c66:	0f 90       	pop	r0
    3c68:	1f 90       	pop	r1
    3c6a:	18 95       	reti

00003c6c <__vector_121>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_TXC_vect)      /* Transmission Complete Interrupt */
    3c6c:	1f 92       	push	r1
    3c6e:	0f 92       	push	r0
    3c70:	0f b6       	in	r0, 0x3f	; 63
    3c72:	0f 92       	push	r0
    3c74:	11 24       	eor	r1, r1
    3c76:	0b b6       	in	r0, 0x3b	; 59
    3c78:	0f 92       	push	r0
    3c7a:	2f 93       	push	r18
    3c7c:	3f 93       	push	r19
    3c7e:	4f 93       	push	r20
    3c80:	5f 93       	push	r21
    3c82:	6f 93       	push	r22
    3c84:	7f 93       	push	r23
    3c86:	8f 93       	push	r24
    3c88:	9f 93       	push	r25
    3c8a:	af 93       	push	r26
    3c8c:	bf 93       	push	r27
    3c8e:	ef 93       	push	r30
    3c90:	ff 93       	push	r31
    3c92:	e0 91 e3 21 	lds	r30, 0x21E3
    3c96:	f0 91 e4 21 	lds	r31, 0x21E4
    3c9a:	30 97       	sbiw	r30, 0x00	; 0
    3c9c:	29 f0       	breq	.+10     	; 0x3ca8 <__vector_121+0x3c>
    3c9e:	80 91 d9 22 	lds	r24, 0x22D9
    3ca2:	90 91 da 22 	lds	r25, 0x22DA
    3ca6:	19 95       	eicall
    3ca8:	ff 91       	pop	r31
    3caa:	ef 91       	pop	r30
    3cac:	bf 91       	pop	r27
    3cae:	af 91       	pop	r26
    3cb0:	9f 91       	pop	r25
    3cb2:	8f 91       	pop	r24
    3cb4:	7f 91       	pop	r23
    3cb6:	6f 91       	pop	r22
    3cb8:	5f 91       	pop	r21
    3cba:	4f 91       	pop	r20
    3cbc:	3f 91       	pop	r19
    3cbe:	2f 91       	pop	r18
    3cc0:	0f 90       	pop	r0
    3cc2:	0b be       	out	0x3b, r0	; 59
    3cc4:	0f 90       	pop	r0
    3cc6:	0f be       	out	0x3f, r0	; 63
    3cc8:	0f 90       	pop	r0
    3cca:	1f 90       	pop	r1
    3ccc:	18 95       	reti

00003cce <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual()
{	
	while(1)
	{
		laserBoard.BeepClassError();
    3cce:	0e 94 19 03 	call	0x632	; 0x632 <_ZN11CLaserBoard14BeepClassErrorEv>
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;
CDGUSDatabase Database;

extern "C" void __cxa_pure_virtual()
    3cd2:	fd cf       	rjmp	.-6      	; 0x3cce <__cxa_pure_virtual>

00003cd4 <_GLOBAL__sub_I_dacSPI>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    3cd4:	80 e2       	ldi	r24, 0x20	; 32
    3cd6:	93 e2       	ldi	r25, 0x23	; 35
    3cd8:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <_ZN4CSPIC1Ev>
CDGUSUSART usart;
    3cdc:	8e e1       	ldi	r24, 0x1E	; 30
    3cde:	93 e2       	ldi	r25, 0x23	; 35
    3ce0:	0e 94 72 02 	call	0x4e4	; 0x4e4 <_ZN10CDGUSUSARTC1Ev>
CMBSender sender;
    3ce4:	85 e0       	ldi	r24, 0x05	; 5
    3ce6:	93 e2       	ldi	r25, 0x23	; 35
    3ce8:	0e 94 1f 20 	call	0x403e	; 0x403e <_ZN9CMBSenderC1Ev>
CLaserBoard laserBoard;
    3cec:	84 e0       	ldi	r24, 0x04	; 4
    3cee:	93 e2       	ldi	r25, 0x23	; 35
    3cf0:	0e 94 86 02 	call	0x50c	; 0x50c <_ZN11CLaserBoardC1Ev>
CSoundPlayer player;
    3cf4:	83 e0       	ldi	r24, 0x03	; 3
    3cf6:	93 e2       	ldi	r25, 0x23	; 35
    3cf8:	0e 94 08 07 	call	0xe10	; 0xe10 <_ZN12CSoundPlayerC1Ev>
CLaserControlApp App;
    3cfc:	87 ee       	ldi	r24, 0xE7	; 231
    3cfe:	92 e2       	ldi	r25, 0x22	; 34
    3d00:	0e 94 aa 03 	call	0x754	; 0x754 <_ZN16CLaserControlAppC1Ev>
CDGUSDatabase Database;
    3d04:	8f ed       	ldi	r24, 0xDF	; 223
    3d06:	92 e2       	ldi	r25, 0x22	; 34
    3d08:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <_ZN13CDGUSDatabaseC1Ev>
    3d0c:	08 95       	ret

00003d0e <_GLOBAL__sub_D_dacSPI>:
    3d0e:	8f ed       	ldi	r24, 0xDF	; 223
    3d10:	92 e2       	ldi	r25, 0x22	; 34
    3d12:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_ZN13CDGUSDatabaseD1Ev>
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;
    3d16:	87 ee       	ldi	r24, 0xE7	; 231
    3d18:	92 e2       	ldi	r25, 0x22	; 34
    3d1a:	0e 94 b0 03 	call	0x760	; 0x760 <_ZN16CLaserControlAppD1Ev>
/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
    3d1e:	83 e0       	ldi	r24, 0x03	; 3
    3d20:	93 e2       	ldi	r25, 0x23	; 35
    3d22:	0e 94 09 07 	call	0xe12	; 0xe12 <_ZN12CSoundPlayerD1Ev>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
    3d26:	84 e0       	ldi	r24, 0x04	; 4
    3d28:	93 e2       	ldi	r25, 0x23	; 35
    3d2a:	0e 94 87 02 	call	0x50e	; 0x50e <_ZN11CLaserBoardD1Ev>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
    3d2e:	85 e0       	ldi	r24, 0x05	; 5
    3d30:	93 e2       	ldi	r25, 0x23	; 35
    3d32:	0e 94 74 20 	call	0x40e8	; 0x40e8 <_ZN9CMBSenderD1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
    3d36:	8e e1       	ldi	r24, 0x1E	; 30
    3d38:	93 e2       	ldi	r25, 0x23	; 35
    3d3a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_ZN10CDGUSUSARTD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    3d3e:	80 e2       	ldi	r24, 0x20	; 32
    3d40:	93 e2       	ldi	r25, 0x23	; 35
    3d42:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <_ZN4CSPID1Ev>
    3d46:	08 95       	ret

00003d48 <_Z16SystemInitializev>:
		laserBoard.BeepClassError();
	}
}

void SystemInitialize()
{
    3d48:	ef 92       	push	r14
    3d4a:	0f 93       	push	r16
    3d4c:	1f 93       	push	r17
	cli();	/* Disable global interrupts */
    3d4e:	f8 94       	cli
	
	// Initialize modules
	laserBoard.InitializeIO();
    3d50:	84 e0       	ldi	r24, 0x04	; 4
    3d52:	93 e2       	ldi	r25, 0x23	; 35
    3d54:	0e 94 88 02 	call	0x510	; 0x510 <_ZN11CLaserBoard12InitializeIOEv>
	player.Initialize();
    3d58:	83 e0       	ldi	r24, 0x03	; 3
    3d5a:	93 e2       	ldi	r25, 0x23	; 35
    3d5c:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN12CSoundPlayer10InitializeEv>
	dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    3d60:	0f 2e       	mov	r0, r31
    3d62:	f3 e0       	ldi	r31, 0x03	; 3
    3d64:	ef 2e       	mov	r14, r31
    3d66:	f0 2d       	mov	r31, r0
    3d68:	00 e0       	ldi	r16, 0x00	; 0
    3d6a:	23 e0       	ldi	r18, 0x03	; 3
    3d6c:	40 e0       	ldi	r20, 0x00	; 0
    3d6e:	61 e0       	ldi	r22, 0x01	; 1
    3d70:	80 e2       	ldi	r24, 0x20	; 32
    3d72:	93 e2       	ldi	r25, 0x23	; 35
    3d74:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
	usart.Initialize(BAUD_115200_ERM0P1, PARITY_DISABLE, STOPBITS_1BIT, true);
    3d78:	01 e0       	ldi	r16, 0x01	; 1
    3d7a:	20 e0       	ldi	r18, 0x00	; 0
    3d7c:	40 e0       	ldi	r20, 0x00	; 0
    3d7e:	6d e0       	ldi	r22, 0x0D	; 13
    3d80:	8e e1       	ldi	r24, 0x1E	; 30
    3d82:	93 e2       	ldi	r25, 0x23	; 35
    3d84:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
	sender.Initialize(&usart, &App, 256, 256);
    3d88:	00 e0       	ldi	r16, 0x00	; 0
    3d8a:	11 e0       	ldi	r17, 0x01	; 1
    3d8c:	20 e0       	ldi	r18, 0x00	; 0
    3d8e:	31 e0       	ldi	r19, 0x01	; 1
    3d90:	47 ee       	ldi	r20, 0xE7	; 231
    3d92:	52 e2       	ldi	r21, 0x22	; 34
    3d94:	6e e1       	ldi	r22, 0x1E	; 30
    3d96:	73 e2       	ldi	r23, 0x23	; 35
    3d98:	85 e0       	ldi	r24, 0x05	; 5
    3d9a:	93 e2       	ldi	r25, 0x23	; 35
    3d9c:	0e 94 25 20 	call	0x404a	; 0x404a <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj>
	App.Initialize(&sender);
    3da0:	65 e0       	ldi	r22, 0x05	; 5
    3da2:	73 e2       	ldi	r23, 0x23	; 35
    3da4:	87 ee       	ldi	r24, 0xE7	; 231
    3da6:	92 e2       	ldi	r25, 0x22	; 34
    3da8:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <_ZN16CLaserControlApp10InitializeEP9CMBSender>
	laserBoard.InitializeClock();
    3dac:	84 e0       	ldi	r24, 0x04	; 4
    3dae:	93 e2       	ldi	r25, 0x23	; 35
    3db0:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN11CLaserBoard15InitializeClockEv>
	Database.Initialize(&sender, VARIABLE_ADDR_DATABASE);
    3db4:	40 e0       	ldi	r20, 0x00	; 0
    3db6:	51 e0       	ldi	r21, 0x01	; 1
    3db8:	65 e0       	ldi	r22, 0x05	; 5
    3dba:	73 e2       	ldi	r23, 0x23	; 35
    3dbc:	8f ed       	ldi	r24, 0xDF	; 223
    3dbe:	92 e2       	ldi	r25, 0x22	; 34
    3dc0:	0e 94 da 01 	call	0x3b4	; 0x3b4 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>
	
	sei();	/* Enable global interrupts */
    3dc4:	78 94       	sei
}
    3dc6:	1f 91       	pop	r17
    3dc8:	0f 91       	pop	r16
    3dca:	ef 90       	pop	r14
    3dcc:	08 95       	ret

00003dce <main>:
int main(void)
{
	float x = 0.0f;
	
	// Initialization system
	SystemInitialize();
    3dce:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <_Z16SystemInitializev>
	
	// Startup delay (Beep "Imperial March")
	player.Play();
    3dd2:	83 e0       	ldi	r24, 0x03	; 3
    3dd4:	93 e2       	ldi	r25, 0x23	; 35
    3dd6:	0e 94 90 07 	call	0xf20	; 0xf20 <_ZN12CSoundPlayer4PlayEv>
	//_delay_ms(2000);
	
	// Initialize application GUI
	App.Start();
    3dda:	87 ee       	ldi	r24, 0xE7	; 231
    3ddc:	92 e2       	ldi	r25, 0x22	; 34
    3dde:	0e 94 b8 03 	call	0x770	; 0x770 <_ZN16CLaserControlApp5StartEv>
		// Loop delay
		_delay_ms(1);
		
		// Process application
		static uint16_t prs = 0;
		if ((prs++ % 200) == 0)
    3de2:	c8 ec       	ldi	r28, 0xC8	; 200
    3de4:	8f e3       	ldi	r24, 0x3F	; 63
    3de6:	9f e1       	ldi	r25, 0x1F	; 31
    3de8:	01 97       	sbiw	r24, 0x01	; 1
    3dea:	f1 f7       	brne	.-4      	; 0x3de8 <main+0x1a>
    3dec:	00 c0       	rjmp	.+0      	; 0x3dee <main+0x20>
    3dee:	00 00       	nop
    3df0:	40 91 dd 22 	lds	r20, 0x22DD
    3df4:	50 91 de 22 	lds	r21, 0x22DE
    3df8:	ca 01       	movw	r24, r20
    3dfa:	01 96       	adiw	r24, 0x01	; 1
    3dfc:	80 93 dd 22 	sts	0x22DD, r24
    3e00:	90 93 de 22 	sts	0x22DE, r25
    3e04:	9a 01       	movw	r18, r20
    3e06:	36 95       	lsr	r19
    3e08:	27 95       	ror	r18
    3e0a:	36 95       	lsr	r19
    3e0c:	27 95       	ror	r18
    3e0e:	36 95       	lsr	r19
    3e10:	27 95       	ror	r18
    3e12:	ab e7       	ldi	r26, 0x7B	; 123
    3e14:	b4 e1       	ldi	r27, 0x14	; 20
    3e16:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <__umulhisi3>
    3e1a:	96 95       	lsr	r25
    3e1c:	87 95       	ror	r24
    3e1e:	c8 9f       	mul	r28, r24
    3e20:	90 01       	movw	r18, r0
    3e22:	c9 9f       	mul	r28, r25
    3e24:	30 0d       	add	r19, r0
    3e26:	11 24       	eor	r1, r1
    3e28:	42 17       	cp	r20, r18
    3e2a:	53 07       	cpc	r21, r19
    3e2c:	d9 f6       	brne	.-74     	; 0x3de4 <main+0x16>
			App.Run();
    3e2e:	87 ee       	ldi	r24, 0xE7	; 231
    3e30:	92 e2       	ldi	r25, 0x22	; 34
    3e32:	0e 94 9c 04 	call	0x938	; 0x938 <_ZN16CLaserControlApp3RunEv>
    3e36:	d6 cf       	rjmp	.-84     	; 0x3de4 <main+0x16>

00003e38 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
	free(tx_buffer);
}

// local methods
void CMBEventsHandler::FillRegDataTx(uint8_t addr, uint8_t* data, uint8_t length)
{
    3e38:	cf 93       	push	r28
    3e3a:	df 93       	push	r29
    3e3c:	ec 01       	movw	r28, r24
		// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    3e3e:	ec 81       	ldd	r30, Y+4	; 0x04
    3e40:	fd 81       	ldd	r31, Y+5	; 0x05
    3e42:	8a ea       	ldi	r24, 0xAA	; 170
    3e44:	80 83       	st	Z, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    3e46:	ec 81       	ldd	r30, Y+4	; 0x04
    3e48:	fd 81       	ldd	r31, Y+5	; 0x05
    3e4a:	8c ec       	ldi	r24, 0xCC	; 204
    3e4c:	81 83       	std	Z+1, r24	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 4; //CMD (1) + DATA(length) + CRC(2) + ADDR(1)
#else
	tx_buffer[2] = length + 2; //CMD (1) + DATA(length) + ADDR(1)
    3e4e:	ec 81       	ldd	r30, Y+4	; 0x04
    3e50:	fd 81       	ldd	r31, Y+5	; 0x05
    3e52:	82 e0       	ldi	r24, 0x02	; 2
    3e54:	82 0f       	add	r24, r18
    3e56:	82 83       	std	Z+2, r24	; 0x02
#endif
	tx_buffer[3] = 0x80;	// Frame command
    3e58:	ec 81       	ldd	r30, Y+4	; 0x04
    3e5a:	fd 81       	ldd	r31, Y+5	; 0x05
    3e5c:	80 e8       	ldi	r24, 0x80	; 128
    3e5e:	83 83       	std	Z+3, r24	; 0x03
	tx_buffer[4] = addr;	// Register address
    3e60:	ec 81       	ldd	r30, Y+4	; 0x04
    3e62:	fd 81       	ldd	r31, Y+5	; 0x05
    3e64:	64 83       	std	Z+4, r22	; 0x04
	tx_frame_length = length + 5;
    3e66:	85 e0       	ldi	r24, 0x05	; 5
    3e68:	82 0f       	add	r24, r18
    3e6a:	89 87       	std	Y+9, r24	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    3e6c:	30 e0       	ldi	r19, 0x00	; 0
    3e6e:	21 15       	cp	r18, r1
    3e70:	31 05       	cpc	r19, r1
    3e72:	81 f0       	breq	.+32     	; 0x3e94 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x5c>
    3e74:	da 01       	movw	r26, r20
    3e76:	42 0f       	add	r20, r18
    3e78:	53 1f       	adc	r21, r19
    3e7a:	65 e0       	ldi	r22, 0x05	; 5
    3e7c:	70 e0       	ldi	r23, 0x00	; 0
		tx_buffer[i+5] = data[i];
    3e7e:	9d 91       	ld	r25, X+
    3e80:	ec 81       	ldd	r30, Y+4	; 0x04
    3e82:	fd 81       	ldd	r31, Y+5	; 0x05
    3e84:	e6 0f       	add	r30, r22
    3e86:	f7 1f       	adc	r31, r23
    3e88:	90 83       	st	Z, r25
    3e8a:	6f 5f       	subi	r22, 0xFF	; 255
    3e8c:	7f 4f       	sbci	r23, 0xFF	; 255
	tx_buffer[3] = 0x80;	// Frame command
	tx_buffer[4] = addr;	// Register address
	tx_frame_length = length + 5;
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    3e8e:	a4 17       	cp	r26, r20
    3e90:	b5 07       	cpc	r27, r21
    3e92:	a9 f7       	brne	.-22     	; 0x3e7e <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length]   = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	tx_frame_length = length + 7;
#endif
}
    3e94:	df 91       	pop	r29
    3e96:	cf 91       	pop	r28
    3e98:	08 95       	ret

00003e9a <_ZN16CMBEventsHandler13FillRegDataRqEhh>:

void CMBEventsHandler::FillRegDataRq(uint8_t addr, uint8_t length)
{
    3e9a:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    3e9c:	a4 81       	ldd	r26, Z+4	; 0x04
    3e9e:	b5 81       	ldd	r27, Z+5	; 0x05
    3ea0:	8a ea       	ldi	r24, 0xAA	; 170
    3ea2:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    3ea4:	a4 81       	ldd	r26, Z+4	; 0x04
    3ea6:	b5 81       	ldd	r27, Z+5	; 0x05
    3ea8:	8c ec       	ldi	r24, 0xCC	; 204
    3eaa:	11 96       	adiw	r26, 0x01	; 1
    3eac:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 5; //CMD(1) + DATA(2) + CRC(2)
#else
	tx_buffer[2] = 3; //CMD(1) + DATA(2)
    3eae:	a4 81       	ldd	r26, Z+4	; 0x04
    3eb0:	b5 81       	ldd	r27, Z+5	; 0x05
    3eb2:	83 e0       	ldi	r24, 0x03	; 3
    3eb4:	12 96       	adiw	r26, 0x02	; 2
    3eb6:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x81;	// Frame command
    3eb8:	a4 81       	ldd	r26, Z+4	; 0x04
    3eba:	b5 81       	ldd	r27, Z+5	; 0x05
    3ebc:	81 e8       	ldi	r24, 0x81	; 129
    3ebe:	13 96       	adiw	r26, 0x03	; 3
    3ec0:	8c 93       	st	X, r24
	tx_buffer[4] = addr;	// Register address
    3ec2:	a4 81       	ldd	r26, Z+4	; 0x04
    3ec4:	b5 81       	ldd	r27, Z+5	; 0x05
    3ec6:	14 96       	adiw	r26, 0x04	; 4
    3ec8:	6c 93       	st	X, r22
	tx_buffer[5] = length;	// Data
    3eca:	a4 81       	ldd	r26, Z+4	; 0x04
    3ecc:	b5 81       	ldd	r27, Z+5	; 0x05
    3ece:	15 96       	adiw	r26, 0x05	; 5
    3ed0:	4c 93       	st	X, r20
	tx_frame_length = 6;
    3ed2:	86 e0       	ldi	r24, 0x06	; 6
    3ed4:	81 87       	std	Z+9, r24	; 0x09
    3ed6:	08 95       	ret

00003ed8 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	tx_frame_length = length + 8;
#endif
}

void CMBEventsHandler::FillVarDataTx(uint16_t addr, uint16_t* data, uint16_t length)
{
    3ed8:	0f 93       	push	r16
    3eda:	1f 93       	push	r17
    3edc:	cf 93       	push	r28
    3ede:	df 93       	push	r29
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    3ee0:	dc 01       	movw	r26, r24
    3ee2:	14 96       	adiw	r26, 0x04	; 4
    3ee4:	ed 91       	ld	r30, X+
    3ee6:	fc 91       	ld	r31, X
    3ee8:	15 97       	sbiw	r26, 0x05	; 5
    3eea:	aa ea       	ldi	r26, 0xAA	; 170
    3eec:	a0 83       	st	Z, r26
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    3eee:	ec 01       	movw	r28, r24
    3ef0:	ec 81       	ldd	r30, Y+4	; 0x04
    3ef2:	fd 81       	ldd	r31, Y+5	; 0x05
    3ef4:	ac ec       	ldi	r26, 0xCC	; 204
    3ef6:	a1 83       	std	Z+1, r26	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 5; //CMD (1) + DATA(length * 2) + CRC(2) + ADDR(2)
#else
	tx_buffer[2] = length + 3; //CMD (1) + DATA(length * 2) + ADDR(2)
    3ef8:	ec 81       	ldd	r30, Y+4	; 0x04
    3efa:	fd 81       	ldd	r31, Y+5	; 0x05
    3efc:	a3 e0       	ldi	r26, 0x03	; 3
    3efe:	a2 0f       	add	r26, r18
    3f00:	a2 83       	std	Z+2, r26	; 0x02
#endif
	tx_buffer[3] = 0x82;	// Frame command
    3f02:	ec 81       	ldd	r30, Y+4	; 0x04
    3f04:	fd 81       	ldd	r31, Y+5	; 0x05
    3f06:	a2 e8       	ldi	r26, 0x82	; 130
    3f08:	a3 83       	std	Z+3, r26	; 0x03
	tx_buffer[4] = addr >> 8;
    3f0a:	ec 81       	ldd	r30, Y+4	; 0x04
    3f0c:	fd 81       	ldd	r31, Y+5	; 0x05
    3f0e:	74 83       	std	Z+4, r23	; 0x04
	tx_buffer[5] = addr & 0xff;
    3f10:	ec 81       	ldd	r30, Y+4	; 0x04
    3f12:	fd 81       	ldd	r31, Y+5	; 0x05
    3f14:	65 83       	std	Z+5, r22	; 0x05
	tx_frame_length = length + 6;
    3f16:	66 e0       	ldi	r22, 0x06	; 6
    3f18:	62 0f       	add	r22, r18
    3f1a:	69 87       	std	Y+9, r22	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    3f1c:	36 95       	lsr	r19
    3f1e:	27 95       	ror	r18
    3f20:	21 15       	cp	r18, r1
    3f22:	31 05       	cpc	r19, r1
    3f24:	e1 f0       	breq	.+56     	; 0x3f5e <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x86>
    3f26:	e4 2f       	mov	r30, r20
    3f28:	f5 2f       	mov	r31, r21
    3f2a:	2d 5f       	subi	r18, 0xFD	; 253
    3f2c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f2e:	22 0f       	add	r18, r18
    3f30:	33 1f       	adc	r19, r19
    3f32:	46 e0       	ldi	r20, 0x06	; 6
    3f34:	50 e0       	ldi	r21, 0x00	; 0
	{
		tx_buffer[6 + i*2 + 0] = data[i] >> 8;
    3f36:	ec 01       	movw	r28, r24
    3f38:	ac 81       	ldd	r26, Y+4	; 0x04
    3f3a:	bd 81       	ldd	r27, Y+5	; 0x05
    3f3c:	a4 0f       	add	r26, r20
    3f3e:	b5 1f       	adc	r27, r21
    3f40:	61 81       	ldd	r22, Z+1	; 0x01
    3f42:	6c 93       	st	X, r22
		tx_buffer[6 + i*2 + 1] = data[i] & 0xff;
    3f44:	ac 81       	ldd	r26, Y+4	; 0x04
    3f46:	bd 81       	ldd	r27, Y+5	; 0x05
    3f48:	a4 0f       	add	r26, r20
    3f4a:	b5 1f       	adc	r27, r21
    3f4c:	60 81       	ld	r22, Z
    3f4e:	32 96       	adiw	r30, 0x02	; 2
    3f50:	11 96       	adiw	r26, 0x01	; 1
    3f52:	6c 93       	st	X, r22
    3f54:	4e 5f       	subi	r20, 0xFE	; 254
    3f56:	5f 4f       	sbci	r21, 0xFF	; 255
	tx_buffer[4] = addr >> 8;
	tx_buffer[5] = addr & 0xff;
	tx_frame_length = length + 6;
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    3f58:	42 17       	cp	r20, r18
    3f5a:	53 07       	cpc	r21, r19
    3f5c:	61 f7       	brne	.-40     	; 0x3f36 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x5e>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length] = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	this->tx_frame_length = length * 2 + 8;
#endif
}
    3f5e:	df 91       	pop	r29
    3f60:	cf 91       	pop	r28
    3f62:	1f 91       	pop	r17
    3f64:	0f 91       	pop	r16
    3f66:	08 95       	ret

00003f68 <_ZN16CMBEventsHandler13FillVarDataRqEjj>:

void CMBEventsHandler::FillVarDataRq(uint16_t addr, uint16_t length)
{
    3f68:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    3f6a:	a4 81       	ldd	r26, Z+4	; 0x04
    3f6c:	b5 81       	ldd	r27, Z+5	; 0x05
    3f6e:	8a ea       	ldi	r24, 0xAA	; 170
    3f70:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    3f72:	a4 81       	ldd	r26, Z+4	; 0x04
    3f74:	b5 81       	ldd	r27, Z+5	; 0x05
    3f76:	8c ec       	ldi	r24, 0xCC	; 204
    3f78:	11 96       	adiw	r26, 0x01	; 1
    3f7a:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 6; //CMD(1) + DATA(3) + CRC(2)
#else
	tx_buffer[2] = 4; //CMD(1) + DATA(3)
    3f7c:	a4 81       	ldd	r26, Z+4	; 0x04
    3f7e:	b5 81       	ldd	r27, Z+5	; 0x05
    3f80:	84 e0       	ldi	r24, 0x04	; 4
    3f82:	12 96       	adiw	r26, 0x02	; 2
    3f84:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x83;				// Frame command
    3f86:	a4 81       	ldd	r26, Z+4	; 0x04
    3f88:	b5 81       	ldd	r27, Z+5	; 0x05
    3f8a:	83 e8       	ldi	r24, 0x83	; 131
    3f8c:	13 96       	adiw	r26, 0x03	; 3
    3f8e:	8c 93       	st	X, r24
	tx_buffer[4] = addr >> 8;			// Register address
    3f90:	a4 81       	ldd	r26, Z+4	; 0x04
    3f92:	b5 81       	ldd	r27, Z+5	; 0x05
    3f94:	14 96       	adiw	r26, 0x04	; 4
    3f96:	7c 93       	st	X, r23
	tx_buffer[5] = addr & 0xff;			// Register address
    3f98:	a4 81       	ldd	r26, Z+4	; 0x04
    3f9a:	b5 81       	ldd	r27, Z+5	; 0x05
    3f9c:	15 96       	adiw	r26, 0x05	; 5
    3f9e:	6c 93       	st	X, r22
	tx_buffer[6] = length;				// Data
    3fa0:	a4 81       	ldd	r26, Z+4	; 0x04
    3fa2:	b5 81       	ldd	r27, Z+5	; 0x05
    3fa4:	16 96       	adiw	r26, 0x06	; 6
    3fa6:	4c 93       	st	X, r20
	tx_frame_length = 7;
    3fa8:	87 e0       	ldi	r24, 0x07	; 7
    3faa:	81 87       	std	Z+9, r24	; 0x09
    3fac:	08 95       	ret

00003fae <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
CMBEventsHandler::~CMBEventsHandler()
{
} //~CMBProtocol

void CMBEventsHandler::AllocateBuffers(uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    3fae:	0f 93       	push	r16
    3fb0:	1f 93       	push	r17
    3fb2:	cf 93       	push	r28
    3fb4:	df 93       	push	r29
    3fb6:	ec 01       	movw	r28, r24
    3fb8:	cb 01       	movw	r24, r22
    3fba:	8a 01       	movw	r16, r20
	rx_bufferSize = rx_bufSize;
    3fbc:	6f 83       	std	Y+7, r22	; 0x07
    3fbe:	78 87       	std	Y+8, r23	; 0x08
	tx_bufferSize = tx_bufSize;
    3fc0:	4a 87       	std	Y+10, r20	; 0x0a
    3fc2:	5b 87       	std	Y+11, r21	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    3fc4:	0e 94 9b 22 	call	0x4536	; 0x4536 <malloc>
    3fc8:	8a 83       	std	Y+2, r24	; 0x02
    3fca:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    3fcc:	c8 01       	movw	r24, r16
    3fce:	0e 94 9b 22 	call	0x4536	; 0x4536 <malloc>
    3fd2:	8c 83       	std	Y+4, r24	; 0x04
    3fd4:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_frame_length  = 0x00;
    3fd6:	19 86       	std	Y+9, r1	; 0x09
	rx_frame_length  = 0x00;
    3fd8:	1e 82       	std	Y+6, r1	; 0x06
}
    3fda:	df 91       	pop	r29
    3fdc:	cf 91       	pop	r28
    3fde:	1f 91       	pop	r17
    3fe0:	0f 91       	pop	r16
    3fe2:	08 95       	ret

00003fe4 <_ZN16CMBEventsHandler11FreeBuffersEv>:

void CMBEventsHandler::FreeBuffers()
{
    3fe4:	cf 93       	push	r28
    3fe6:	df 93       	push	r29
    3fe8:	ec 01       	movw	r28, r24
	free(rx_buffer);
    3fea:	8a 81       	ldd	r24, Y+2	; 0x02
    3fec:	9b 81       	ldd	r25, Y+3	; 0x03
    3fee:	0e 94 30 23 	call	0x4660	; 0x4660 <free>
	free(tx_buffer);
    3ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    3ff4:	9d 81       	ldd	r25, Y+5	; 0x05
    3ff6:	0e 94 30 23 	call	0x4660	; 0x4660 <free>
}
    3ffa:	df 91       	pop	r29
    3ffc:	cf 91       	pop	r28
    3ffe:	08 95       	ret

00004000 <_ZN16CMBEventsHandlerD1Ev>:

#include "CMBProtocol.h"
#include <avr/io.h>
#include <util/crc16.h>

CMBEventsHandler::~CMBEventsHandler()
    4000:	08 95       	ret

00004002 <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	CMBSender::ProcessTransaction(data, length);
}

void CMBSender::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
	if (CallbackHandler != 0)
    4002:	dc 01       	movw	r26, r24
    4004:	57 96       	adiw	r26, 0x17	; 23
    4006:	8d 91       	ld	r24, X+
    4008:	9c 91       	ld	r25, X
    400a:	58 97       	sbiw	r26, 0x18	; 24
    400c:	00 97       	sbiw	r24, 0x00	; 0
    400e:	39 f0       	breq	.+14     	; 0x401e <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
		CallbackHandler->OnVariableReceived(addr, data, length);
    4010:	dc 01       	movw	r26, r24
    4012:	ed 91       	ld	r30, X+
    4014:	fc 91       	ld	r31, X
    4016:	02 80       	ldd	r0, Z+2	; 0x02
    4018:	f3 81       	ldd	r31, Z+3	; 0x03
    401a:	e0 2d       	mov	r30, r0
    401c:	19 95       	eicall
    401e:	08 95       	ret

00004020 <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
}


void CMBSender::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
	if (CallbackHandler != 0)
    4020:	dc 01       	movw	r26, r24
    4022:	57 96       	adiw	r26, 0x17	; 23
    4024:	8d 91       	ld	r24, X+
    4026:	9c 91       	ld	r25, X
    4028:	58 97       	sbiw	r26, 0x18	; 24
    402a:	00 97       	sbiw	r24, 0x00	; 0
    402c:	39 f0       	breq	.+14     	; 0x403c <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
		CallbackHandler->OnRegisterReceived(addr, data, length);
    402e:	dc 01       	movw	r26, r24
    4030:	ed 91       	ld	r30, X+
    4032:	fc 91       	ld	r31, X
    4034:	04 80       	ldd	r0, Z+4	; 0x04
    4036:	f5 81       	ldd	r31, Z+5	; 0x05
    4038:	e0 2d       	mov	r30, r0
    403a:	19 95       	eicall
    403c:	08 95       	ret

0000403e <_ZN9CMBSenderC1Ev>:
#include "CMBSender.h"
#include <avr/io.h>
#include <util/crc16.h>

// default constructor
CMBSender::CMBSender()
    403e:	2b ed       	ldi	r18, 0xDB	; 219
    4040:	30 e2       	ldi	r19, 0x20	; 32
    4042:	fc 01       	movw	r30, r24
    4044:	20 83       	st	Z, r18
    4046:	31 83       	std	Z+1, r19	; 0x01
    4048:	08 95       	ret

0000404a <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj>:
	
}


void CMBSender::Initialize(CUSART* usart, CMBEventsHandler *handler, uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    404a:	cf 92       	push	r12
    404c:	df 92       	push	r13
    404e:	ef 92       	push	r14
    4050:	ff 92       	push	r15
    4052:	0f 93       	push	r16
    4054:	1f 93       	push	r17
    4056:	cf 93       	push	r28
    4058:	df 93       	push	r29
    405a:	ec 01       	movw	r28, r24
    405c:	7b 01       	movw	r14, r22
    405e:	6a 01       	movw	r12, r20
    4060:	c9 01       	movw	r24, r18
	rx_bufferSize = rx_bufSize;
    4062:	2f 83       	std	Y+7, r18	; 0x07
    4064:	38 87       	std	Y+8, r19	; 0x08
	tx_bufferSize = tx_bufSize;
    4066:	0a 87       	std	Y+10, r16	; 0x0a
    4068:	1b 87       	std	Y+11, r17	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    406a:	0e 94 9b 22 	call	0x4536	; 0x4536 <malloc>
    406e:	8a 83       	std	Y+2, r24	; 0x02
    4070:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    4072:	c8 01       	movw	r24, r16
    4074:	0e 94 9b 22 	call	0x4536	; 0x4536 <malloc>
    4078:	8c 83       	std	Y+4, r24	; 0x04
    407a:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_buffer_pos    = 0x00;
    407c:	1d 8a       	std	Y+21, r1	; 0x15
	tx_frame_length  = 0x00;
    407e:	19 86       	std	Y+9, r1	; 0x09
	rx_buffer_pos    = 0x00;
    4080:	1f 86       	std	Y+15, r1	; 0x0f
	rx_frame_length  = 0x00;
    4082:	1e 82       	std	Y+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    4084:	18 8a       	std	Y+16, r1	; 0x10
    4086:	19 8a       	std	Y+17, r1	; 0x11
	rx_currt_crc     = 0x00;
    4088:	1a 8a       	std	Y+18, r1	; 0x12
    408a:	1b 8a       	std	Y+19, r1	; 0x13
	modbus_receiver_state  = rx_Idle;
    408c:	87 e0       	ldi	r24, 0x07	; 7
    408e:	8e 87       	std	Y+14, r24	; 0x0e
	modbus_transmitter_state  = tx_Idle;
    4090:	82 e0       	ldi	r24, 0x02	; 2
    4092:	8c 8b       	std	Y+20, r24	; 0x14
	isTransaction = false;
    4094:	1e 8a       	std	Y+22, r1	; 0x16
	
	// Set usart interface interrupts
	pUSART = usart;
    4096:	ec 86       	std	Y+12, r14	; 0x0c
    4098:	fd 86       	std	Y+13, r15	; 0x0d
	usart->SetRxInterruptionCallback((void*)this, OnUSARTRxInterrupt);
    409a:	d7 01       	movw	r26, r14
    409c:	ed 91       	ld	r30, X+
    409e:	fc 91       	ld	r31, X
    40a0:	04 84       	ldd	r0, Z+12	; 0x0c
    40a2:	f5 85       	ldd	r31, Z+13	; 0x0d
    40a4:	e0 2d       	mov	r30, r0
    40a6:	46 e3       	ldi	r20, 0x36	; 54
    40a8:	51 e2       	ldi	r21, 0x21	; 33
    40aa:	be 01       	movw	r22, r28
    40ac:	c7 01       	movw	r24, r14
    40ae:	19 95       	eicall
	usart->SetTxInterruptionCallback((void*)this, OnUSARTTxInterrupt);
    40b0:	d7 01       	movw	r26, r14
    40b2:	ed 91       	ld	r30, X+
    40b4:	fc 91       	ld	r31, X
    40b6:	06 84       	ldd	r0, Z+14	; 0x0e
    40b8:	f7 85       	ldd	r31, Z+15	; 0x0f
    40ba:	e0 2d       	mov	r30, r0
    40bc:	4b e9       	ldi	r20, 0x9B	; 155
    40be:	51 e2       	ldi	r21, 0x21	; 33
    40c0:	be 01       	movw	r22, r28
    40c2:	c7 01       	movw	r24, r14
    40c4:	19 95       	eicall
	
	// Set event handler
	if (handler)
    40c6:	c1 14       	cp	r12, r1
    40c8:	d1 04       	cpc	r13, r1
    40ca:	19 f0       	breq	.+6      	; 0x40d2 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj+0x88>
		CallbackHandler = handler;
    40cc:	cf 8a       	std	Y+23, r12	; 0x17
    40ce:	d8 8e       	std	Y+24, r13	; 0x18
    40d0:	02 c0       	rjmp	.+4      	; 0x40d6 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj+0x8c>
	else
		CallbackHandler = this;
    40d2:	cf 8b       	std	Y+23, r28	; 0x17
    40d4:	d8 8f       	std	Y+24, r29	; 0x18
} //CMBSender
    40d6:	df 91       	pop	r29
    40d8:	cf 91       	pop	r28
    40da:	1f 91       	pop	r17
    40dc:	0f 91       	pop	r16
    40de:	ff 90       	pop	r15
    40e0:	ef 90       	pop	r14
    40e2:	df 90       	pop	r13
    40e4:	cf 90       	pop	r12
    40e6:	08 95       	ret

000040e8 <_ZN9CMBSenderD1Ev>:
	free(rx_buffer);
	free(tx_buffer);
}

// default destructor
CMBSender::~CMBSender()
    40e8:	2b ed       	ldi	r18, 0xDB	; 219
    40ea:	30 e2       	ldi	r19, 0x20	; 32
    40ec:	fc 01       	movw	r30, r24
    40ee:	20 83       	st	Z, r18
    40f0:	31 83       	std	Z+1, r19	; 0x01
    40f2:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN16CMBEventsHandlerD1Ev>
    40f6:	08 95       	ret

000040f8 <_ZN9CMBSender13OnReceiveByteEh>:
//void CMBSender::RequestDataFromSRAM(uint16_t addr, uint8_t length);

volatile uint16_t cnt = 0;

void CMBSender::OnReceiveByte(uint8_t data)
{
    40f8:	cf 93       	push	r28
    40fa:	df 93       	push	r29
    40fc:	ec 01       	movw	r28, r24
    40fe:	96 2f       	mov	r25, r22
	switch (modbus_receiver_state)
    4100:	4e 85       	ldd	r20, Y+14	; 0x0e
    4102:	50 e0       	ldi	r21, 0x00	; 0
    4104:	4b 30       	cpi	r20, 0x0B	; 11
    4106:	51 05       	cpc	r21, r1
    4108:	08 f0       	brcs	.+2      	; 0x410c <_ZN9CMBSender13OnReceiveByteEh+0x14>
    410a:	ad c0       	rjmp	.+346    	; 0x4266 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
    410c:	fa 01       	movw	r30, r20
    410e:	88 27       	eor	r24, r24
    4110:	e8 5f       	subi	r30, 0xF8	; 248
    4112:	fe 4f       	sbci	r31, 0xFE	; 254
    4114:	8f 4f       	sbci	r24, 0xFF	; 255
    4116:	0c 94 62 22 	jmp	0x44c4	; 0x44c4 <__tablejump2__>
	{
		case rx_Start :
		case rx_FrameHeader0 :
			if (data == FRAMEHEADER_LOWBYTE)
    411a:	9a 3a       	cpi	r25, 0xAA	; 170
    411c:	19 f4       	brne	.+6      	; 0x4124 <_ZN9CMBSender13OnReceiveByteEh+0x2c>
				modbus_receiver_state = rx_FrameHeader1;
    411e:	82 e0       	ldi	r24, 0x02	; 2
    4120:	8e 87       	std	Y+14, r24	; 0x0e
    4122:	a1 c0       	rjmp	.+322    	; 0x4266 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    4124:	81 e0       	ldi	r24, 0x01	; 1
    4126:	8e 87       	std	Y+14, r24	; 0x0e
    4128:	9e c0       	rjmp	.+316    	; 0x4266 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_FrameHeader1 :
			if (data == FRAMEHEADER_HIGHBYTE)
    412a:	9c 3c       	cpi	r25, 0xCC	; 204
    412c:	19 f4       	brne	.+6      	; 0x4134 <_ZN9CMBSender13OnReceiveByteEh+0x3c>
				modbus_receiver_state = rx_FrameLength;
    412e:	83 e0       	ldi	r24, 0x03	; 3
    4130:	8e 87       	std	Y+14, r24	; 0x0e
    4132:	99 c0       	rjmp	.+306    	; 0x4266 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    4134:	81 e0       	ldi	r24, 0x01	; 1
    4136:	8e 87       	std	Y+14, r24	; 0x0e
    4138:	96 c0       	rjmp	.+300    	; 0x4266 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_FrameLength :
			rx_frame_length = data;
    413a:	9e 83       	std	Y+6, r25	; 0x06
			rx_buffer_pos = 0;
    413c:	1f 86       	std	Y+15, r1	; 0x0f
			rx_currt_crc = 0;
    413e:	1a 8a       	std	Y+18, r1	; 0x12
    4140:	1b 8a       	std	Y+19, r1	; 0x13
			cnt = 0;
    4142:	10 92 26 23 	sts	0x2326, r1
    4146:	10 92 27 23 	sts	0x2327, r1
			modbus_receiver_state = rx_FrameReceive;
    414a:	84 e0       	ldi	r24, 0x04	; 4
    414c:	8e 87       	std	Y+14, r24	; 0x0e
			break;
    414e:	8b c0       	rjmp	.+278    	; 0x4266 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		case rx_FrameReceive :
			rx_buffer[rx_buffer_pos] = data;
    4150:	8f 85       	ldd	r24, Y+15	; 0x0f
    4152:	ea 81       	ldd	r30, Y+2	; 0x02
    4154:	fb 81       	ldd	r31, Y+3	; 0x03
    4156:	e8 0f       	add	r30, r24
    4158:	f1 1d       	adc	r31, r1
    415a:	90 83       	st	Z, r25
			if (rx_buffer_pos > rx_bufferSize)
    415c:	2f 85       	ldd	r18, Y+15	; 0x0f
    415e:	30 e0       	ldi	r19, 0x00	; 0
    4160:	4f 81       	ldd	r20, Y+7	; 0x07
    4162:	58 85       	ldd	r21, Y+8	; 0x08
    4164:	42 17       	cp	r20, r18
    4166:	53 07       	cpc	r21, r19
    4168:	18 f4       	brcc	.+6      	; 0x4170 <_ZN9CMBSender13OnReceiveByteEh+0x78>
			{
				modbus_receiver_state = rx_Error;
    416a:	89 e0       	ldi	r24, 0x09	; 9
    416c:	8e 87       	std	Y+14, r24	; 0x0e
				break;
    416e:	7b c0       	rjmp	.+246    	; 0x4266 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
    4170:	2a 89       	ldd	r18, Y+18	; 0x12
    4172:	3b 89       	ldd	r19, Y+19	; 0x13
    4174:	29 27       	eor	r18, r25
    4176:	92 2f       	mov	r25, r18
    4178:	92 95       	swap	r25
    417a:	92 27       	eor	r25, r18
    417c:	09 2e       	mov	r0, r25
    417e:	96 95       	lsr	r25
    4180:	96 95       	lsr	r25
    4182:	90 25       	eor	r25, r0
    4184:	09 2e       	mov	r0, r25
    4186:	96 95       	lsr	r25
    4188:	90 25       	eor	r25, r0
    418a:	97 70       	andi	r25, 0x07	; 7
    418c:	02 2e       	mov	r0, r18
    418e:	23 2f       	mov	r18, r19
    4190:	96 95       	lsr	r25
    4192:	07 94       	ror	r0
    4194:	97 95       	ror	r25
    4196:	30 2d       	mov	r19, r0
    4198:	29 27       	eor	r18, r25
    419a:	06 94       	lsr	r0
    419c:	97 95       	ror	r25
    419e:	30 25       	eor	r19, r0
    41a0:	29 27       	eor	r18, r25
			}
			rx_currt_crc = _crc16_update(rx_currt_crc, data);
    41a2:	2a 8b       	std	Y+18, r18	; 0x12
    41a4:	3b 8b       	std	Y+19, r19	; 0x13
			rx_buffer_pos++;
    41a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    41a8:	8f 5f       	subi	r24, 0xFF	; 255
    41aa:	8f 87       	std	Y+15, r24	; 0x0f
			cnt++;
    41ac:	80 91 26 23 	lds	r24, 0x2326
    41b0:	90 91 27 23 	lds	r25, 0x2327
    41b4:	01 96       	adiw	r24, 0x01	; 1
    41b6:	80 93 26 23 	sts	0x2326, r24
    41ba:	90 93 27 23 	sts	0x2327, r25
			if (rx_buffer_pos == rx_frame_length)
    41be:	4f 85       	ldd	r20, Y+15	; 0x0f
    41c0:	8e 81       	ldd	r24, Y+6	; 0x06
    41c2:	48 13       	cpse	r20, r24
    41c4:	50 c0       	rjmp	.+160    	; 0x4266 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			{
#ifdef USE_CRC
				modbus_receiver_state = rx_CRC0;
#else
				modbus_receiver_state = rx_Complete;
    41c6:	88 e0       	ldi	r24, 0x08	; 8
    41c8:	8e 87       	std	Y+14, r24	; 0x0e
#endif
				OnTransactionCallback(rx_buffer, rx_frame_length);
    41ca:	e8 81       	ld	r30, Y
    41cc:	f9 81       	ldd	r31, Y+1	; 0x01
    41ce:	50 e0       	ldi	r21, 0x00	; 0
    41d0:	6a 81       	ldd	r22, Y+2	; 0x02
    41d2:	7b 81       	ldd	r23, Y+3	; 0x03
    41d4:	01 90       	ld	r0, Z+
    41d6:	f0 81       	ld	r31, Z
    41d8:	e0 2d       	mov	r30, r0
    41da:	ce 01       	movw	r24, r28
    41dc:	19 95       	eicall
				if (CallbackHandler != 0)
    41de:	8f 89       	ldd	r24, Y+23	; 0x17
    41e0:	98 8d       	ldd	r25, Y+24	; 0x18
    41e2:	00 97       	sbiw	r24, 0x00	; 0
    41e4:	09 f4       	brne	.+2      	; 0x41e8 <_ZN9CMBSender13OnReceiveByteEh+0xf0>
    41e6:	3f c0       	rjmp	.+126    	; 0x4266 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    41e8:	dc 01       	movw	r26, r24
    41ea:	ed 91       	ld	r30, X+
    41ec:	fc 91       	ld	r31, X
    41ee:	4e 81       	ldd	r20, Y+6	; 0x06
    41f0:	50 e0       	ldi	r21, 0x00	; 0
    41f2:	6a 81       	ldd	r22, Y+2	; 0x02
    41f4:	7b 81       	ldd	r23, Y+3	; 0x03
    41f6:	01 90       	ld	r0, Z+
    41f8:	f0 81       	ld	r31, Z
    41fa:	e0 2d       	mov	r30, r0
    41fc:	19 95       	eicall
    41fe:	33 c0       	rjmp	.+102    	; 0x4266 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			}
			break;
		case rx_CRC0 :
			rx_frame_crc = data;
    4200:	69 2f       	mov	r22, r25
    4202:	70 e0       	ldi	r23, 0x00	; 0
    4204:	68 8b       	std	Y+16, r22	; 0x10
    4206:	79 8b       	std	Y+17, r23	; 0x11
			modbus_receiver_state = rx_CRC1;
    4208:	86 e0       	ldi	r24, 0x06	; 6
    420a:	8e 87       	std	Y+14, r24	; 0x0e
			break;
    420c:	2c c0       	rjmp	.+88     	; 0x4266 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		case rx_CRC1 :
			rx_frame_crc |= (data << 8);
    420e:	28 89       	ldd	r18, Y+16	; 0x10
    4210:	39 89       	ldd	r19, Y+17	; 0x11
    4212:	a9 01       	movw	r20, r18
    4214:	59 2b       	or	r21, r25
    4216:	48 8b       	std	Y+16, r20	; 0x10
    4218:	59 8b       	std	Y+17, r21	; 0x11
			if (rx_currt_crc == rx_frame_crc)
    421a:	2a 89       	ldd	r18, Y+18	; 0x12
    421c:	3b 89       	ldd	r19, Y+19	; 0x13
    421e:	42 17       	cp	r20, r18
    4220:	53 07       	cpc	r21, r19
    4222:	e9 f4       	brne	.+58     	; 0x425e <_ZN9CMBSender13OnReceiveByteEh+0x166>
			{
				modbus_receiver_state = rx_Complete;
    4224:	88 e0       	ldi	r24, 0x08	; 8
    4226:	8e 87       	std	Y+14, r24	; 0x0e
				
				OnTransactionCallback(rx_buffer, rx_frame_length);
    4228:	e8 81       	ld	r30, Y
    422a:	f9 81       	ldd	r31, Y+1	; 0x01
    422c:	4e 81       	ldd	r20, Y+6	; 0x06
    422e:	50 e0       	ldi	r21, 0x00	; 0
    4230:	6a 81       	ldd	r22, Y+2	; 0x02
    4232:	7b 81       	ldd	r23, Y+3	; 0x03
    4234:	01 90       	ld	r0, Z+
    4236:	f0 81       	ld	r31, Z
    4238:	e0 2d       	mov	r30, r0
    423a:	ce 01       	movw	r24, r28
    423c:	19 95       	eicall
				if (CallbackHandler != 0)
    423e:	8f 89       	ldd	r24, Y+23	; 0x17
    4240:	98 8d       	ldd	r25, Y+24	; 0x18
    4242:	00 97       	sbiw	r24, 0x00	; 0
    4244:	81 f0       	breq	.+32     	; 0x4266 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    4246:	dc 01       	movw	r26, r24
    4248:	ed 91       	ld	r30, X+
    424a:	fc 91       	ld	r31, X
    424c:	4e 81       	ldd	r20, Y+6	; 0x06
    424e:	50 e0       	ldi	r21, 0x00	; 0
    4250:	6a 81       	ldd	r22, Y+2	; 0x02
    4252:	7b 81       	ldd	r23, Y+3	; 0x03
    4254:	01 90       	ld	r0, Z+
    4256:	f0 81       	ld	r31, Z
    4258:	e0 2d       	mov	r30, r0
    425a:	19 95       	eicall
    425c:	04 c0       	rjmp	.+8      	; 0x4266 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			}
			else
				modbus_receiver_state = rx_Error;
    425e:	89 e0       	ldi	r24, 0x09	; 9
    4260:	8e 87       	std	Y+14, r24	; 0x0e
    4262:	01 c0       	rjmp	.+2      	; 0x4266 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_Error :
		case rx_TimeOut :
			isTransaction = false;
    4264:	1e 8a       	std	Y+22, r1	; 0x16
		case rx_Complete :
		case rx_Idle :
		default:
		break;
	};
}
    4266:	df 91       	pop	r29
    4268:	cf 91       	pop	r28
    426a:	08 95       	ret

0000426c <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
{
	modbus_transmitter_state = tx_Idle;
}

void CMBSender::OnUSARTRxInterrupt(void* sender)
{
    426c:	cf 93       	push	r28
    426e:	df 93       	push	r29
    4270:	ec 01       	movw	r28, r24
	CMBSender* owner = (CMBSender*)sender;
	uint8_t data = owner->pUSART->GetReceivedByte();
    4272:	8c 85       	ldd	r24, Y+12	; 0x0c
    4274:	9d 85       	ldd	r25, Y+13	; 0x0d
    4276:	dc 01       	movw	r26, r24
    4278:	ed 91       	ld	r30, X+
    427a:	fc 91       	ld	r31, X
    427c:	02 80       	ldd	r0, Z+2	; 0x02
    427e:	f3 81       	ldd	r31, Z+3	; 0x03
    4280:	e0 2d       	mov	r30, r0
    4282:	19 95       	eicall
	owner->OnReceiveByte(data);
    4284:	68 2f       	mov	r22, r24
    4286:	ce 01       	movw	r24, r28
    4288:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <_ZN9CMBSender13OnReceiveByteEh>
}
    428c:	df 91       	pop	r29
    428e:	cf 91       	pop	r28
    4290:	08 95       	ret

00004292 <_ZN9CMBSender19StartMODBUSListenerEv>:
	if (modbus_receiver_state != rx_Complete)
		modbus_receiver_state = rx_TimeOut;
}

void CMBSender::StartMODBUSListener()
{
    4292:	fc 01       	movw	r30, r24
	rx_buffer_pos    = 0x00;
    4294:	17 86       	std	Z+15, r1	; 0x0f
	rx_frame_length  = 0x00;
    4296:	16 82       	std	Z+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    4298:	10 8a       	std	Z+16, r1	; 0x10
    429a:	11 8a       	std	Z+17, r1	; 0x11
	rx_currt_crc     = 0x00;
    429c:	12 8a       	std	Z+18, r1	; 0x12
    429e:	13 8a       	std	Z+19, r1	; 0x13
	modbus_receiver_state  = rx_Start;
    42a0:	16 86       	std	Z+14, r1	; 0x0e
    42a2:	08 95       	ret

000042a4 <_ZN9CMBSender14OnTransmitByteEv>:
		break;
	};
}

void CMBSender::OnTransmitByte()
{
    42a4:	cf 93       	push	r28
    42a6:	df 93       	push	r29
    42a8:	ec 01       	movw	r28, r24
	switch (modbus_transmitter_state)
    42aa:	8c 89       	ldd	r24, Y+20	; 0x14
    42ac:	84 30       	cpi	r24, 0x04	; 4
    42ae:	38 f4       	brcc	.+14     	; 0x42be <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    42b0:	82 30       	cpi	r24, 0x02	; 2
    42b2:	b8 f5       	brcc	.+110    	; 0x4322 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    42b4:	88 23       	and	r24, r24
    42b6:	31 f0       	breq	.+12     	; 0x42c4 <_ZN9CMBSender14OnTransmitByteEv+0x20>
    42b8:	81 30       	cpi	r24, 0x01	; 1
    42ba:	d1 f0       	breq	.+52     	; 0x42f0 <_ZN9CMBSender14OnTransmitByteEv+0x4c>
    42bc:	39 c0       	rjmp	.+114    	; 0x4330 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    42be:	85 30       	cpi	r24, 0x05	; 5
    42c0:	81 f1       	breq	.+96     	; 0x4322 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    42c2:	36 c0       	rjmp	.+108    	; 0x4330 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
	{
		case tx_Start :
			modbus_transmitter_state = tx_Transmitting; // Start receiving packet
    42c4:	81 e0       	ldi	r24, 0x01	; 1
    42c6:	8c 8b       	std	Y+20, r24	; 0x14
			tx_buffer_pos = 0;
    42c8:	1d 8a       	std	Y+21, r1	; 0x15
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    42ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    42cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    42ce:	2d 89       	ldd	r18, Y+21	; 0x15
    42d0:	dc 01       	movw	r26, r24
    42d2:	ed 91       	ld	r30, X+
    42d4:	fc 91       	ld	r31, X
    42d6:	ac 81       	ldd	r26, Y+4	; 0x04
    42d8:	bd 81       	ldd	r27, Y+5	; 0x05
    42da:	a2 0f       	add	r26, r18
    42dc:	b1 1d       	adc	r27, r1
    42de:	04 80       	ldd	r0, Z+4	; 0x04
    42e0:	f5 81       	ldd	r31, Z+5	; 0x05
    42e2:	e0 2d       	mov	r30, r0
    42e4:	6c 91       	ld	r22, X
    42e6:	19 95       	eicall
			tx_buffer_pos++;
    42e8:	8d 89       	ldd	r24, Y+21	; 0x15
    42ea:	8f 5f       	subi	r24, 0xFF	; 255
    42ec:	8d 8b       	std	Y+21, r24	; 0x15
			break;
    42ee:	20 c0       	rjmp	.+64     	; 0x4330 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
		case tx_Transmitting :
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    42f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    42f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    42f4:	2d 89       	ldd	r18, Y+21	; 0x15
    42f6:	dc 01       	movw	r26, r24
    42f8:	ed 91       	ld	r30, X+
    42fa:	fc 91       	ld	r31, X
    42fc:	ac 81       	ldd	r26, Y+4	; 0x04
    42fe:	bd 81       	ldd	r27, Y+5	; 0x05
    4300:	a2 0f       	add	r26, r18
    4302:	b1 1d       	adc	r27, r1
    4304:	04 80       	ldd	r0, Z+4	; 0x04
    4306:	f5 81       	ldd	r31, Z+5	; 0x05
    4308:	e0 2d       	mov	r30, r0
    430a:	6c 91       	ld	r22, X
    430c:	19 95       	eicall
			tx_buffer_pos++;
    430e:	8d 89       	ldd	r24, Y+21	; 0x15
    4310:	8f 5f       	subi	r24, 0xFF	; 255
    4312:	8d 8b       	std	Y+21, r24	; 0x15
			if (tx_buffer_pos == tx_frame_length)
    4314:	9d 89       	ldd	r25, Y+21	; 0x15
    4316:	89 85       	ldd	r24, Y+9	; 0x09
    4318:	98 13       	cpse	r25, r24
    431a:	0a c0       	rjmp	.+20     	; 0x4330 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
				modbus_transmitter_state = tx_Complete;
    431c:	83 e0       	ldi	r24, 0x03	; 3
    431e:	8c 8b       	std	Y+20, r24	; 0x14
    4320:	07 c0       	rjmp	.+14     	; 0x4330 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
			break;
		case tx_Idle :
		case tx_TimeOut :
		case tx_Complete :
			if (isTransaction)
    4322:	8e 89       	ldd	r24, Y+22	; 0x16
    4324:	88 23       	and	r24, r24
    4326:	19 f0       	breq	.+6      	; 0x432e <_ZN9CMBSender14OnTransmitByteEv+0x8a>
				StartMODBUSListener();
    4328:	ce 01       	movw	r24, r28
    432a:	0e 94 49 21 	call	0x4292	; 0x4292 <_ZN9CMBSender19StartMODBUSListenerEv>
			isTransaction = false;
    432e:	1e 8a       	std	Y+22, r1	; 0x16
		default :
		break;
	}
}
    4330:	df 91       	pop	r29
    4332:	cf 91       	pop	r28
    4334:	08 95       	ret

00004336 <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
}

void CMBSender::OnUSARTTxInterrupt(void* sender)
{
	CMBSender* owner = (CMBSender*)sender;
	owner->OnTransmitByte();
    4336:	0e 94 52 21 	call	0x42a4	; 0x42a4 <_ZN9CMBSender14OnTransmitByteEv>
    433a:	08 95       	ret

0000433c <_ZN9CMBSender18WaitMODBUSListenerEv>:
	rx_currt_crc     = 0x00;
	modbus_receiver_state  = rx_Start;
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
    433c:	fc 01       	movw	r30, r24
	while (modbus_receiver_state != rx_Complete)
    433e:	06 c0       	rjmp	.+12     	; 0x434c <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
	{
		if (modbus_receiver_state == rx_Error)
    4340:	86 85       	ldd	r24, Z+14	; 0x0e
    4342:	89 30       	cpi	r24, 0x09	; 9
    4344:	41 f0       	breq	.+16     	; 0x4356 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
    4346:	86 85       	ldd	r24, Z+14	; 0x0e
    4348:	8a 30       	cpi	r24, 0x0A	; 10
    434a:	39 f0       	breq	.+14     	; 0x435a <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
	modbus_receiver_state  = rx_Start;
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
    434c:	86 85       	ldd	r24, Z+14	; 0x0e
    434e:	88 30       	cpi	r24, 0x08	; 8
    4350:	b9 f7       	brne	.-18     	; 0x4340 <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
		if (modbus_receiver_state == rx_Error)
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
	}
	return Complete;
    4352:	81 e0       	ldi	r24, 0x01	; 1
    4354:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
	{
		if (modbus_receiver_state == rx_Error)
			return Error;
    4356:	82 e0       	ldi	r24, 0x02	; 2
    4358:	08 95       	ret
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
    435a:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    435c:	08 95       	ret

0000435e <_ZN9CMBSender22StartMODBUSTransmitterEv>:
	modbus_receiver_state  = rx_Idle;
}

void CMBSender::StartMODBUSTransmitter()
{
	tx_buffer_pos = 0x00;
    435e:	fc 01       	movw	r30, r24
    4360:	15 8a       	std	Z+21, r1	; 0x15
	modbus_transmitter_state  = tx_Start;
    4362:	14 8a       	std	Z+20, r1	; 0x14
	OnTransmitByte();
    4364:	0e 94 52 21 	call	0x42a4	; 0x42a4 <_ZN9CMBSender14OnTransmitByteEv>
    4368:	08 95       	ret

0000436a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
{
} //~CMBSender

// MODBUS write data to register command
void CMBSender::WriteDataToRegisterAsync(uint8_t addr, uint8_t* data, uint8_t length)
{
    436a:	cf 93       	push	r28
    436c:	df 93       	push	r29
    436e:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataTx(addr, data, length);
    4370:	e8 81       	ld	r30, Y
    4372:	f9 81       	ldd	r31, Y+1	; 0x01
    4374:	02 84       	ldd	r0, Z+10	; 0x0a
    4376:	f3 85       	ldd	r31, Z+11	; 0x0b
    4378:	e0 2d       	mov	r30, r0
    437a:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    437c:	ce 01       	movw	r24, r28
    437e:	0e 94 af 21 	call	0x435e	; 0x435e <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    4382:	df 91       	pop	r29
    4384:	cf 91       	pop	r28
    4386:	08 95       	ret

00004388 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:

void CMBSender::WriteDataToSRAMAsync(uint16_t addr, uint16_t* data, uint16_t length)
{
    4388:	cf 93       	push	r28
    438a:	df 93       	push	r29
    438c:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataTx(addr, data, length);
    438e:	e8 81       	ld	r30, Y
    4390:	f9 81       	ldd	r31, Y+1	; 0x01
    4392:	06 84       	ldd	r0, Z+14	; 0x0e
    4394:	f7 85       	ldd	r31, Z+15	; 0x0f
    4396:	e0 2d       	mov	r30, r0
    4398:	19 95       	eicall
		
	// Start transition
	StartMODBUSTransmitter();
    439a:	ce 01       	movw	r24, r28
    439c:	0e 94 af 21 	call	0x435e	; 0x435e <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    43a0:	df 91       	pop	r29
    43a2:	cf 91       	pop	r28
    43a4:	08 95       	ret

000043a6 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:

void CMBSender::RequestDataFromRegisterAsync(uint8_t addr, uint8_t length)
{
    43a6:	cf 93       	push	r28
    43a8:	df 93       	push	r29
    43aa:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataRq(addr, length);
    43ac:	e8 81       	ld	r30, Y
    43ae:	f9 81       	ldd	r31, Y+1	; 0x01
    43b0:	04 84       	ldd	r0, Z+12	; 0x0c
    43b2:	f5 85       	ldd	r31, Z+13	; 0x0d
    43b4:	e0 2d       	mov	r30, r0
    43b6:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    43b8:	ce 01       	movw	r24, r28
    43ba:	0e 94 af 21 	call	0x435e	; 0x435e <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    43be:	df 91       	pop	r29
    43c0:	cf 91       	pop	r28
    43c2:	08 95       	ret

000043c4 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:

void CMBSender::RequestDataFromSRAMAsync(uint16_t addr, uint8_t length)
{
    43c4:	cf 93       	push	r28
    43c6:	df 93       	push	r29
    43c8:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataRq(addr, length);
    43ca:	e8 81       	ld	r30, Y
    43cc:	f9 81       	ldd	r31, Y+1	; 0x01
    43ce:	50 e0       	ldi	r21, 0x00	; 0
    43d0:	00 88       	ldd	r0, Z+16	; 0x10
    43d2:	f1 89       	ldd	r31, Z+17	; 0x11
    43d4:	e0 2d       	mov	r30, r0
    43d6:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    43d8:	ce 01       	movw	r24, r28
    43da:	0e 94 af 21 	call	0x435e	; 0x435e <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    43de:	df 91       	pop	r29
    43e0:	cf 91       	pop	r28
    43e2:	08 95       	ret

000043e4 <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
	modbus_transmitter_state  = tx_Start;
	OnTransmitByte();
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
    43e4:	fc 01       	movw	r30, r24
	while (modbus_transmitter_state != tx_Complete)
    43e6:	06 c0       	rjmp	.+12     	; 0x43f4 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
	{
		if (modbus_transmitter_state == tx_Error)
    43e8:	84 89       	ldd	r24, Z+20	; 0x14
    43ea:	84 30       	cpi	r24, 0x04	; 4
    43ec:	41 f0       	breq	.+16     	; 0x43fe <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
    43ee:	84 89       	ldd	r24, Z+20	; 0x14
    43f0:	85 30       	cpi	r24, 0x05	; 5
    43f2:	39 f0       	breq	.+14     	; 0x4402 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
	OnTransmitByte();
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
    43f4:	84 89       	ldd	r24, Z+20	; 0x14
    43f6:	83 30       	cpi	r24, 0x03	; 3
    43f8:	b9 f7       	brne	.-18     	; 0x43e8 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
		if (modbus_transmitter_state == tx_Error)
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
	}
	return Complete;
    43fa:	81 e0       	ldi	r24, 0x01	; 1
    43fc:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
	{
		if (modbus_transmitter_state == tx_Error)
		return Error;
    43fe:	82 e0       	ldi	r24, 0x02	; 2
    4400:	08 95       	ret
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
    4402:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    4404:	08 95       	ret

00004406 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTransmitByte();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    4406:	21 e0       	ldi	r18, 0x01	; 1
    4408:	fc 01       	movw	r30, r24
    440a:	26 8b       	std	Z+22, r18	; 0x16
	RequestDataFromRegisterAsync(addr, length);
    440c:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    4410:	08 95       	ret

00004412 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    4412:	21 e0       	ldi	r18, 0x01	; 1
    4414:	fc 01       	movw	r30, r24
    4416:	26 8b       	std	Z+22, r18	; 0x16
	RequestDataFromSRAMAsync(addr, length);
    4418:	0e 94 e2 21 	call	0x43c4	; 0x43c4 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    441c:	08 95       	ret

0000441e <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    441e:	0f 93       	push	r16
    4420:	1f 93       	push	r17
    4422:	cf 93       	push	r28
    4424:	df 93       	push	r29
    4426:	8c 01       	movw	r16, r24
    4428:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    442a:	98 81       	ld	r25, Y
    442c:	91 38       	cpi	r25, 0x81	; 129
    442e:	69 f4       	brne	.+26     	; 0x444a <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    4430:	d8 01       	movw	r26, r16
    4432:	ed 91       	ld	r30, X+
    4434:	fc 91       	ld	r31, X
    4436:	04 80       	ldd	r0, Z+4	; 0x04
    4438:	f5 81       	ldd	r31, Z+5	; 0x05
    443a:	e0 2d       	mov	r30, r0
    443c:	2a 81       	ldd	r18, Y+2	; 0x02
    443e:	ab 01       	movw	r20, r22
    4440:	4d 5f       	subi	r20, 0xFD	; 253
    4442:	5f 4f       	sbci	r21, 0xFF	; 255
    4444:	69 81       	ldd	r22, Y+1	; 0x01
    4446:	c8 01       	movw	r24, r16
    4448:	19 95       	eicall
	}
	if (data[0] == 0x83)
    444a:	98 81       	ld	r25, Y
    444c:	93 38       	cpi	r25, 0x83	; 131
    444e:	99 f4       	brne	.+38     	; 0x4476 <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], data[3]);
    4450:	d8 01       	movw	r26, r16
    4452:	ed 91       	ld	r30, X+
    4454:	fc 91       	ld	r31, X
    4456:	2b 81       	ldd	r18, Y+3	; 0x03
    4458:	30 e0       	ldi	r19, 0x00	; 0
    445a:	ae 01       	movw	r20, r28
    445c:	4c 5f       	subi	r20, 0xFC	; 252
    445e:	5f 4f       	sbci	r21, 0xFF	; 255
    4460:	69 81       	ldd	r22, Y+1	; 0x01
    4462:	70 e0       	ldi	r23, 0x00	; 0
    4464:	76 2f       	mov	r23, r22
    4466:	66 27       	eor	r22, r22
    4468:	8a 81       	ldd	r24, Y+2	; 0x02
    446a:	68 2b       	or	r22, r24
    446c:	02 80       	ldd	r0, Z+2	; 0x02
    446e:	f3 81       	ldd	r31, Z+3	; 0x03
    4470:	e0 2d       	mov	r30, r0
    4472:	c8 01       	movw	r24, r16
    4474:	19 95       	eicall
	}
}
    4476:	df 91       	pop	r29
    4478:	cf 91       	pop	r28
    447a:	1f 91       	pop	r17
    447c:	0f 91       	pop	r16
    447e:	08 95       	ret

00004480 <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    4480:	0e 94 0f 22 	call	0x441e	; 0x441e <_ZN9CMBSender18ProcessTransactionEPhj>
    4484:	08 95       	ret

00004486 <__divmodsi4>:
    4486:	05 2e       	mov	r0, r21
    4488:	97 fb       	bst	r25, 7
    448a:	1e f4       	brtc	.+6      	; 0x4492 <__divmodsi4+0xc>
    448c:	00 94       	com	r0
    448e:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <__negsi2>
    4492:	57 fd       	sbrc	r21, 7
    4494:	07 d0       	rcall	.+14     	; 0x44a4 <__divmodsi4_neg2>
    4496:	0e 94 79 22 	call	0x44f2	; 0x44f2 <__udivmodsi4>
    449a:	07 fc       	sbrc	r0, 7
    449c:	03 d0       	rcall	.+6      	; 0x44a4 <__divmodsi4_neg2>
    449e:	4e f4       	brtc	.+18     	; 0x44b2 <__divmodsi4_exit>
    44a0:	0c 94 5a 22 	jmp	0x44b4	; 0x44b4 <__negsi2>

000044a4 <__divmodsi4_neg2>:
    44a4:	50 95       	com	r21
    44a6:	40 95       	com	r20
    44a8:	30 95       	com	r19
    44aa:	21 95       	neg	r18
    44ac:	3f 4f       	sbci	r19, 0xFF	; 255
    44ae:	4f 4f       	sbci	r20, 0xFF	; 255
    44b0:	5f 4f       	sbci	r21, 0xFF	; 255

000044b2 <__divmodsi4_exit>:
    44b2:	08 95       	ret

000044b4 <__negsi2>:
    44b4:	90 95       	com	r25
    44b6:	80 95       	com	r24
    44b8:	70 95       	com	r23
    44ba:	61 95       	neg	r22
    44bc:	7f 4f       	sbci	r23, 0xFF	; 255
    44be:	8f 4f       	sbci	r24, 0xFF	; 255
    44c0:	9f 4f       	sbci	r25, 0xFF	; 255
    44c2:	08 95       	ret

000044c4 <__tablejump2__>:
    44c4:	ee 0f       	add	r30, r30
    44c6:	ff 1f       	adc	r31, r31
    44c8:	88 1f       	adc	r24, r24
    44ca:	8b bf       	out	0x3b, r24	; 59
    44cc:	07 90       	elpm	r0, Z+
    44ce:	f6 91       	elpm	r31, Z
    44d0:	e0 2d       	mov	r30, r0
    44d2:	19 94       	eijmp

000044d4 <__umulhisi3>:
    44d4:	a2 9f       	mul	r26, r18
    44d6:	b0 01       	movw	r22, r0
    44d8:	b3 9f       	mul	r27, r19
    44da:	c0 01       	movw	r24, r0
    44dc:	a3 9f       	mul	r26, r19
    44de:	70 0d       	add	r23, r0
    44e0:	81 1d       	adc	r24, r1
    44e2:	11 24       	eor	r1, r1
    44e4:	91 1d       	adc	r25, r1
    44e6:	b2 9f       	mul	r27, r18
    44e8:	70 0d       	add	r23, r0
    44ea:	81 1d       	adc	r24, r1
    44ec:	11 24       	eor	r1, r1
    44ee:	91 1d       	adc	r25, r1
    44f0:	08 95       	ret

000044f2 <__udivmodsi4>:
    44f2:	a1 e2       	ldi	r26, 0x21	; 33
    44f4:	1a 2e       	mov	r1, r26
    44f6:	aa 1b       	sub	r26, r26
    44f8:	bb 1b       	sub	r27, r27
    44fa:	fd 01       	movw	r30, r26
    44fc:	0d c0       	rjmp	.+26     	; 0x4518 <__udivmodsi4_ep>

000044fe <__udivmodsi4_loop>:
    44fe:	aa 1f       	adc	r26, r26
    4500:	bb 1f       	adc	r27, r27
    4502:	ee 1f       	adc	r30, r30
    4504:	ff 1f       	adc	r31, r31
    4506:	a2 17       	cp	r26, r18
    4508:	b3 07       	cpc	r27, r19
    450a:	e4 07       	cpc	r30, r20
    450c:	f5 07       	cpc	r31, r21
    450e:	20 f0       	brcs	.+8      	; 0x4518 <__udivmodsi4_ep>
    4510:	a2 1b       	sub	r26, r18
    4512:	b3 0b       	sbc	r27, r19
    4514:	e4 0b       	sbc	r30, r20
    4516:	f5 0b       	sbc	r31, r21

00004518 <__udivmodsi4_ep>:
    4518:	66 1f       	adc	r22, r22
    451a:	77 1f       	adc	r23, r23
    451c:	88 1f       	adc	r24, r24
    451e:	99 1f       	adc	r25, r25
    4520:	1a 94       	dec	r1
    4522:	69 f7       	brne	.-38     	; 0x44fe <__udivmodsi4_loop>
    4524:	60 95       	com	r22
    4526:	70 95       	com	r23
    4528:	80 95       	com	r24
    452a:	90 95       	com	r25
    452c:	9b 01       	movw	r18, r22
    452e:	ac 01       	movw	r20, r24
    4530:	bd 01       	movw	r22, r26
    4532:	cf 01       	movw	r24, r30
    4534:	08 95       	ret

00004536 <malloc>:
    4536:	cf 93       	push	r28
    4538:	df 93       	push	r29
    453a:	82 30       	cpi	r24, 0x02	; 2
    453c:	91 05       	cpc	r25, r1
    453e:	10 f4       	brcc	.+4      	; 0x4544 <malloc+0xe>
    4540:	82 e0       	ldi	r24, 0x02	; 2
    4542:	90 e0       	ldi	r25, 0x00	; 0
    4544:	e0 91 2a 23 	lds	r30, 0x232A
    4548:	f0 91 2b 23 	lds	r31, 0x232B
    454c:	20 e0       	ldi	r18, 0x00	; 0
    454e:	30 e0       	ldi	r19, 0x00	; 0
    4550:	c0 e0       	ldi	r28, 0x00	; 0
    4552:	d0 e0       	ldi	r29, 0x00	; 0
    4554:	30 97       	sbiw	r30, 0x00	; 0
    4556:	11 f1       	breq	.+68     	; 0x459c <malloc+0x66>
    4558:	40 81       	ld	r20, Z
    455a:	51 81       	ldd	r21, Z+1	; 0x01
    455c:	48 17       	cp	r20, r24
    455e:	59 07       	cpc	r21, r25
    4560:	c0 f0       	brcs	.+48     	; 0x4592 <malloc+0x5c>
    4562:	48 17       	cp	r20, r24
    4564:	59 07       	cpc	r21, r25
    4566:	61 f4       	brne	.+24     	; 0x4580 <malloc+0x4a>
    4568:	82 81       	ldd	r24, Z+2	; 0x02
    456a:	93 81       	ldd	r25, Z+3	; 0x03
    456c:	20 97       	sbiw	r28, 0x00	; 0
    456e:	19 f0       	breq	.+6      	; 0x4576 <malloc+0x40>
    4570:	8a 83       	std	Y+2, r24	; 0x02
    4572:	9b 83       	std	Y+3, r25	; 0x03
    4574:	2b c0       	rjmp	.+86     	; 0x45cc <malloc+0x96>
    4576:	80 93 2a 23 	sts	0x232A, r24
    457a:	90 93 2b 23 	sts	0x232B, r25
    457e:	26 c0       	rjmp	.+76     	; 0x45cc <malloc+0x96>
    4580:	21 15       	cp	r18, r1
    4582:	31 05       	cpc	r19, r1
    4584:	19 f0       	breq	.+6      	; 0x458c <malloc+0x56>
    4586:	42 17       	cp	r20, r18
    4588:	53 07       	cpc	r21, r19
    458a:	18 f4       	brcc	.+6      	; 0x4592 <malloc+0x5c>
    458c:	9a 01       	movw	r18, r20
    458e:	be 01       	movw	r22, r28
    4590:	df 01       	movw	r26, r30
    4592:	ef 01       	movw	r28, r30
    4594:	02 80       	ldd	r0, Z+2	; 0x02
    4596:	f3 81       	ldd	r31, Z+3	; 0x03
    4598:	e0 2d       	mov	r30, r0
    459a:	dc cf       	rjmp	.-72     	; 0x4554 <malloc+0x1e>
    459c:	21 15       	cp	r18, r1
    459e:	31 05       	cpc	r19, r1
    45a0:	09 f1       	breq	.+66     	; 0x45e4 <malloc+0xae>
    45a2:	28 1b       	sub	r18, r24
    45a4:	39 0b       	sbc	r19, r25
    45a6:	24 30       	cpi	r18, 0x04	; 4
    45a8:	31 05       	cpc	r19, r1
    45aa:	90 f4       	brcc	.+36     	; 0x45d0 <malloc+0x9a>
    45ac:	12 96       	adiw	r26, 0x02	; 2
    45ae:	8d 91       	ld	r24, X+
    45b0:	9c 91       	ld	r25, X
    45b2:	13 97       	sbiw	r26, 0x03	; 3
    45b4:	61 15       	cp	r22, r1
    45b6:	71 05       	cpc	r23, r1
    45b8:	21 f0       	breq	.+8      	; 0x45c2 <malloc+0x8c>
    45ba:	fb 01       	movw	r30, r22
    45bc:	82 83       	std	Z+2, r24	; 0x02
    45be:	93 83       	std	Z+3, r25	; 0x03
    45c0:	04 c0       	rjmp	.+8      	; 0x45ca <malloc+0x94>
    45c2:	80 93 2a 23 	sts	0x232A, r24
    45c6:	90 93 2b 23 	sts	0x232B, r25
    45ca:	fd 01       	movw	r30, r26
    45cc:	32 96       	adiw	r30, 0x02	; 2
    45ce:	44 c0       	rjmp	.+136    	; 0x4658 <malloc+0x122>
    45d0:	fd 01       	movw	r30, r26
    45d2:	e2 0f       	add	r30, r18
    45d4:	f3 1f       	adc	r31, r19
    45d6:	81 93       	st	Z+, r24
    45d8:	91 93       	st	Z+, r25
    45da:	22 50       	subi	r18, 0x02	; 2
    45dc:	31 09       	sbc	r19, r1
    45de:	2d 93       	st	X+, r18
    45e0:	3c 93       	st	X, r19
    45e2:	3a c0       	rjmp	.+116    	; 0x4658 <malloc+0x122>
    45e4:	20 91 28 23 	lds	r18, 0x2328
    45e8:	30 91 29 23 	lds	r19, 0x2329
    45ec:	23 2b       	or	r18, r19
    45ee:	41 f4       	brne	.+16     	; 0x4600 <malloc+0xca>
    45f0:	20 91 02 20 	lds	r18, 0x2002
    45f4:	30 91 03 20 	lds	r19, 0x2003
    45f8:	20 93 28 23 	sts	0x2328, r18
    45fc:	30 93 29 23 	sts	0x2329, r19
    4600:	20 91 00 20 	lds	r18, 0x2000
    4604:	30 91 01 20 	lds	r19, 0x2001
    4608:	21 15       	cp	r18, r1
    460a:	31 05       	cpc	r19, r1
    460c:	41 f4       	brne	.+16     	; 0x461e <malloc+0xe8>
    460e:	2d b7       	in	r18, 0x3d	; 61
    4610:	3e b7       	in	r19, 0x3e	; 62
    4612:	40 91 04 20 	lds	r20, 0x2004
    4616:	50 91 05 20 	lds	r21, 0x2005
    461a:	24 1b       	sub	r18, r20
    461c:	35 0b       	sbc	r19, r21
    461e:	e0 91 28 23 	lds	r30, 0x2328
    4622:	f0 91 29 23 	lds	r31, 0x2329
    4626:	e2 17       	cp	r30, r18
    4628:	f3 07       	cpc	r31, r19
    462a:	a0 f4       	brcc	.+40     	; 0x4654 <malloc+0x11e>
    462c:	2e 1b       	sub	r18, r30
    462e:	3f 0b       	sbc	r19, r31
    4630:	28 17       	cp	r18, r24
    4632:	39 07       	cpc	r19, r25
    4634:	78 f0       	brcs	.+30     	; 0x4654 <malloc+0x11e>
    4636:	ac 01       	movw	r20, r24
    4638:	4e 5f       	subi	r20, 0xFE	; 254
    463a:	5f 4f       	sbci	r21, 0xFF	; 255
    463c:	24 17       	cp	r18, r20
    463e:	35 07       	cpc	r19, r21
    4640:	48 f0       	brcs	.+18     	; 0x4654 <malloc+0x11e>
    4642:	4e 0f       	add	r20, r30
    4644:	5f 1f       	adc	r21, r31
    4646:	40 93 28 23 	sts	0x2328, r20
    464a:	50 93 29 23 	sts	0x2329, r21
    464e:	81 93       	st	Z+, r24
    4650:	91 93       	st	Z+, r25
    4652:	02 c0       	rjmp	.+4      	; 0x4658 <malloc+0x122>
    4654:	e0 e0       	ldi	r30, 0x00	; 0
    4656:	f0 e0       	ldi	r31, 0x00	; 0
    4658:	cf 01       	movw	r24, r30
    465a:	df 91       	pop	r29
    465c:	cf 91       	pop	r28
    465e:	08 95       	ret

00004660 <free>:
    4660:	0f 93       	push	r16
    4662:	1f 93       	push	r17
    4664:	cf 93       	push	r28
    4666:	df 93       	push	r29
    4668:	00 97       	sbiw	r24, 0x00	; 0
    466a:	09 f4       	brne	.+2      	; 0x466e <free+0xe>
    466c:	8c c0       	rjmp	.+280    	; 0x4786 <free+0x126>
    466e:	fc 01       	movw	r30, r24
    4670:	32 97       	sbiw	r30, 0x02	; 2
    4672:	12 82       	std	Z+2, r1	; 0x02
    4674:	13 82       	std	Z+3, r1	; 0x03
    4676:	00 91 2a 23 	lds	r16, 0x232A
    467a:	10 91 2b 23 	lds	r17, 0x232B
    467e:	01 15       	cp	r16, r1
    4680:	11 05       	cpc	r17, r1
    4682:	81 f4       	brne	.+32     	; 0x46a4 <free+0x44>
    4684:	20 81       	ld	r18, Z
    4686:	31 81       	ldd	r19, Z+1	; 0x01
    4688:	82 0f       	add	r24, r18
    468a:	93 1f       	adc	r25, r19
    468c:	20 91 28 23 	lds	r18, 0x2328
    4690:	30 91 29 23 	lds	r19, 0x2329
    4694:	28 17       	cp	r18, r24
    4696:	39 07       	cpc	r19, r25
    4698:	79 f5       	brne	.+94     	; 0x46f8 <free+0x98>
    469a:	e0 93 28 23 	sts	0x2328, r30
    469e:	f0 93 29 23 	sts	0x2329, r31
    46a2:	71 c0       	rjmp	.+226    	; 0x4786 <free+0x126>
    46a4:	d8 01       	movw	r26, r16
    46a6:	40 e0       	ldi	r20, 0x00	; 0
    46a8:	50 e0       	ldi	r21, 0x00	; 0
    46aa:	ae 17       	cp	r26, r30
    46ac:	bf 07       	cpc	r27, r31
    46ae:	50 f4       	brcc	.+20     	; 0x46c4 <free+0x64>
    46b0:	12 96       	adiw	r26, 0x02	; 2
    46b2:	2d 91       	ld	r18, X+
    46b4:	3c 91       	ld	r19, X
    46b6:	13 97       	sbiw	r26, 0x03	; 3
    46b8:	ad 01       	movw	r20, r26
    46ba:	21 15       	cp	r18, r1
    46bc:	31 05       	cpc	r19, r1
    46be:	09 f1       	breq	.+66     	; 0x4702 <free+0xa2>
    46c0:	d9 01       	movw	r26, r18
    46c2:	f3 cf       	rjmp	.-26     	; 0x46aa <free+0x4a>
    46c4:	9d 01       	movw	r18, r26
    46c6:	da 01       	movw	r26, r20
    46c8:	22 83       	std	Z+2, r18	; 0x02
    46ca:	33 83       	std	Z+3, r19	; 0x03
    46cc:	60 81       	ld	r22, Z
    46ce:	71 81       	ldd	r23, Z+1	; 0x01
    46d0:	86 0f       	add	r24, r22
    46d2:	97 1f       	adc	r25, r23
    46d4:	82 17       	cp	r24, r18
    46d6:	93 07       	cpc	r25, r19
    46d8:	69 f4       	brne	.+26     	; 0x46f4 <free+0x94>
    46da:	ec 01       	movw	r28, r24
    46dc:	28 81       	ld	r18, Y
    46de:	39 81       	ldd	r19, Y+1	; 0x01
    46e0:	26 0f       	add	r18, r22
    46e2:	37 1f       	adc	r19, r23
    46e4:	2e 5f       	subi	r18, 0xFE	; 254
    46e6:	3f 4f       	sbci	r19, 0xFF	; 255
    46e8:	20 83       	st	Z, r18
    46ea:	31 83       	std	Z+1, r19	; 0x01
    46ec:	8a 81       	ldd	r24, Y+2	; 0x02
    46ee:	9b 81       	ldd	r25, Y+3	; 0x03
    46f0:	82 83       	std	Z+2, r24	; 0x02
    46f2:	93 83       	std	Z+3, r25	; 0x03
    46f4:	45 2b       	or	r20, r21
    46f6:	29 f4       	brne	.+10     	; 0x4702 <free+0xa2>
    46f8:	e0 93 2a 23 	sts	0x232A, r30
    46fc:	f0 93 2b 23 	sts	0x232B, r31
    4700:	42 c0       	rjmp	.+132    	; 0x4786 <free+0x126>
    4702:	12 96       	adiw	r26, 0x02	; 2
    4704:	ed 93       	st	X+, r30
    4706:	fc 93       	st	X, r31
    4708:	13 97       	sbiw	r26, 0x03	; 3
    470a:	ed 01       	movw	r28, r26
    470c:	49 91       	ld	r20, Y+
    470e:	59 91       	ld	r21, Y+
    4710:	9e 01       	movw	r18, r28
    4712:	24 0f       	add	r18, r20
    4714:	35 1f       	adc	r19, r21
    4716:	e2 17       	cp	r30, r18
    4718:	f3 07       	cpc	r31, r19
    471a:	71 f4       	brne	.+28     	; 0x4738 <free+0xd8>
    471c:	80 81       	ld	r24, Z
    471e:	91 81       	ldd	r25, Z+1	; 0x01
    4720:	84 0f       	add	r24, r20
    4722:	95 1f       	adc	r25, r21
    4724:	02 96       	adiw	r24, 0x02	; 2
    4726:	8d 93       	st	X+, r24
    4728:	9c 93       	st	X, r25
    472a:	11 97       	sbiw	r26, 0x01	; 1
    472c:	82 81       	ldd	r24, Z+2	; 0x02
    472e:	93 81       	ldd	r25, Z+3	; 0x03
    4730:	12 96       	adiw	r26, 0x02	; 2
    4732:	8d 93       	st	X+, r24
    4734:	9c 93       	st	X, r25
    4736:	13 97       	sbiw	r26, 0x03	; 3
    4738:	e0 e0       	ldi	r30, 0x00	; 0
    473a:	f0 e0       	ldi	r31, 0x00	; 0
    473c:	d8 01       	movw	r26, r16
    473e:	12 96       	adiw	r26, 0x02	; 2
    4740:	8d 91       	ld	r24, X+
    4742:	9c 91       	ld	r25, X
    4744:	13 97       	sbiw	r26, 0x03	; 3
    4746:	00 97       	sbiw	r24, 0x00	; 0
    4748:	19 f0       	breq	.+6      	; 0x4750 <free+0xf0>
    474a:	f8 01       	movw	r30, r16
    474c:	8c 01       	movw	r16, r24
    474e:	f6 cf       	rjmp	.-20     	; 0x473c <free+0xdc>
    4750:	8d 91       	ld	r24, X+
    4752:	9c 91       	ld	r25, X
    4754:	98 01       	movw	r18, r16
    4756:	2e 5f       	subi	r18, 0xFE	; 254
    4758:	3f 4f       	sbci	r19, 0xFF	; 255
    475a:	82 0f       	add	r24, r18
    475c:	93 1f       	adc	r25, r19
    475e:	20 91 28 23 	lds	r18, 0x2328
    4762:	30 91 29 23 	lds	r19, 0x2329
    4766:	28 17       	cp	r18, r24
    4768:	39 07       	cpc	r19, r25
    476a:	69 f4       	brne	.+26     	; 0x4786 <free+0x126>
    476c:	30 97       	sbiw	r30, 0x00	; 0
    476e:	29 f4       	brne	.+10     	; 0x477a <free+0x11a>
    4770:	10 92 2a 23 	sts	0x232A, r1
    4774:	10 92 2b 23 	sts	0x232B, r1
    4778:	02 c0       	rjmp	.+4      	; 0x477e <free+0x11e>
    477a:	12 82       	std	Z+2, r1	; 0x02
    477c:	13 82       	std	Z+3, r1	; 0x03
    477e:	00 93 28 23 	sts	0x2328, r16
    4782:	10 93 29 23 	sts	0x2329, r17
    4786:	df 91       	pop	r29
    4788:	cf 91       	pop	r28
    478a:	1f 91       	pop	r17
    478c:	0f 91       	pop	r16
    478e:	08 95       	ret

00004790 <memcpy>:
    4790:	fb 01       	movw	r30, r22
    4792:	dc 01       	movw	r26, r24
    4794:	02 c0       	rjmp	.+4      	; 0x479a <memcpy+0xa>
    4796:	01 90       	ld	r0, Z+
    4798:	0d 92       	st	X+, r0
    479a:	41 50       	subi	r20, 0x01	; 1
    479c:	50 40       	sbci	r21, 0x00	; 0
    479e:	d8 f7       	brcc	.-10     	; 0x4796 <memcpy+0x6>
    47a0:	08 95       	ret

000047a2 <__do_global_dtors>:
    47a2:	11 e0       	ldi	r17, 0x01	; 1
    47a4:	c3 ea       	ldi	r28, 0xA3	; 163
    47a6:	d1 e0       	ldi	r29, 0x01	; 1
    47a8:	00 e0       	ldi	r16, 0x00	; 0
    47aa:	06 c0       	rjmp	.+12     	; 0x47b8 <__do_global_dtors+0x16>
    47ac:	80 2f       	mov	r24, r16
    47ae:	fe 01       	movw	r30, r28
    47b0:	0e 94 62 22 	call	0x44c4	; 0x44c4 <__tablejump2__>
    47b4:	21 96       	adiw	r28, 0x01	; 1
    47b6:	01 1d       	adc	r16, r1
    47b8:	c5 3a       	cpi	r28, 0xA5	; 165
    47ba:	d1 07       	cpc	r29, r17
    47bc:	80 e0       	ldi	r24, 0x00	; 0
    47be:	08 07       	cpc	r16, r24
    47c0:	a9 f7       	brne	.-22     	; 0x47ac <__do_global_dtors+0xa>
    47c2:	f8 94       	cli

000047c4 <__stop_program>:
    47c4:	ff cf       	rjmp	.-2      	; 0x47c4 <__stop_program>
