
ATxmegaElectroporation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000043a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ee  00802000  000043a6  0000443a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000234  008020ee  008020ee  00004528  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004528  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004558  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007f0  00000000  00000000  00004598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009bf0  00000000  00000000  00004d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001eae  00000000  00000000  0000e978  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000024b2  00000000  00000000  00010826  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002d20  00000000  00000000  00012cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000455a  00000000  00000000  000159f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000075b1  00000000  00000000  00019f52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000730  00000000  00000000  00021503  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__dtors_end>
       4:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__vector_1>
       8:	0c 94 26 09 	jmp	0x124c	; 0x124c <__vector_2>
       c:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__vector_3>
      10:	0c 94 88 09 	jmp	0x1310	; 0x1310 <__vector_4>
      14:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__vector_5>
      18:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__vector_6>
      1c:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__vector_7>
      20:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__vector_8>
      24:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__vector_9>
      28:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__vector_10>
      2c:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__vector_11>
      30:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__vector_12>
      34:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <__vector_13>
      38:	0c 94 72 0b 	jmp	0x16e4	; 0x16e4 <__vector_14>
      3c:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <__vector_15>
      40:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__vector_16>
      44:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__vector_17>
      48:	0c 94 36 0c 	jmp	0x186c	; 0x186c <__vector_18>
      4c:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <__vector_19>
      50:	0c 94 98 0c 	jmp	0x1930	; 0x1930 <__vector_20>
      54:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <__vector_21>
      58:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <__vector_22>
      5c:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <__vector_23>
      60:	0c 94 5c 0d 	jmp	0x1ab8	; 0x1ab8 <__vector_24>
      64:	0c 94 8d 0d 	jmp	0x1b1a	; 0x1b1a <__vector_25>
      68:	0c 94 be 0d 	jmp	0x1b7c	; 0x1b7c <__vector_26>
      6c:	0c 94 ef 0d 	jmp	0x1bde	; 0x1bde <__vector_27>
      70:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <__vector_28>
      74:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__vector_29>
      78:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <__vector_30>
      7c:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <__vector_31>
      80:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <__vector_32>
      84:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <__vector_33>
      88:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__vector_34>
      8c:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__vector_35>
      90:	0c 94 a8 0f 	jmp	0x1f50	; 0x1f50 <__vector_36>
      94:	0c 94 d9 0f 	jmp	0x1fb2	; 0x1fb2 <__vector_37>
      98:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <__vector_38>
      9c:	0c 94 3b 10 	jmp	0x2076	; 0x2076 <__vector_39>
      a0:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__vector_40>
      a4:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__vector_41>
      a8:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__vector_42>
      ac:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <__vector_43>
      b0:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__vector_44>
      b4:	0c 94 61 11 	jmp	0x22c2	; 0x22c2 <__vector_45>
      b8:	0c 94 92 11 	jmp	0x2324	; 0x2324 <__vector_46>
      bc:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__vector_47>
      c0:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__vector_48>
      c4:	0c 94 25 12 	jmp	0x244a	; 0x244a <__vector_49>
      c8:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <__vector_50>
      cc:	0c 94 87 12 	jmp	0x250e	; 0x250e <__vector_51>
      d0:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__vector_52>
      d4:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__vector_53>
      d8:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__vector_54>
      dc:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__vector_55>
      e0:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <__vector_56>
      e4:	0c 94 ad 13 	jmp	0x275a	; 0x275a <__vector_57>
      e8:	0c 94 de 13 	jmp	0x27bc	; 0x27bc <__vector_58>
      ec:	0c 94 0f 14 	jmp	0x281e	; 0x281e <__vector_59>
      f0:	0c 94 40 14 	jmp	0x2880	; 0x2880 <__vector_60>
      f4:	0c 94 71 14 	jmp	0x28e2	; 0x28e2 <__vector_61>
      f8:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <__vector_62>
      fc:	0c 94 d3 14 	jmp	0x29a6	; 0x29a6 <__vector_63>
     100:	0c 94 04 15 	jmp	0x2a08	; 0x2a08 <__vector_64>
     104:	0c 94 35 15 	jmp	0x2a6a	; 0x2a6a <__vector_65>
     108:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__vector_66>
     10c:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <__vector_67>
     110:	0c 94 c8 15 	jmp	0x2b90	; 0x2b90 <__vector_68>
     114:	0c 94 f9 15 	jmp	0x2bf2	; 0x2bf2 <__vector_69>
     118:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__vector_70>
     11c:	0c 94 5b 16 	jmp	0x2cb6	; 0x2cb6 <__vector_71>
     120:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <__vector_72>
     124:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__vector_73>
     128:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <__vector_74>
     12c:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     130:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     134:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__vector_77>
     138:	0c 94 50 17 	jmp	0x2ea0	; 0x2ea0 <__vector_78>
     13c:	0c 94 81 17 	jmp	0x2f02	; 0x2f02 <__vector_79>
     140:	0c 94 b2 17 	jmp	0x2f64	; 0x2f64 <__vector_80>
     144:	0c 94 e3 17 	jmp	0x2fc6	; 0x2fc6 <__vector_81>
     148:	0c 94 14 18 	jmp	0x3028	; 0x3028 <__vector_82>
     14c:	0c 94 45 18 	jmp	0x308a	; 0x308a <__vector_83>
     150:	0c 94 76 18 	jmp	0x30ec	; 0x30ec <__vector_84>
     154:	0c 94 a7 18 	jmp	0x314e	; 0x314e <__vector_85>
     158:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <__vector_86>
     15c:	0c 94 09 19 	jmp	0x3212	; 0x3212 <__vector_87>
     160:	0c 94 3a 19 	jmp	0x3274	; 0x3274 <__vector_88>
     164:	0c 94 6b 19 	jmp	0x32d6	; 0x32d6 <__vector_89>
     168:	0c 94 9c 19 	jmp	0x3338	; 0x3338 <__vector_90>
     16c:	0c 94 cd 19 	jmp	0x339a	; 0x339a <__vector_91>
     170:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__vector_92>
     174:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__vector_93>
     178:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     17c:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     180:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     184:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     188:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     18c:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     190:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     194:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     198:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     19c:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     1a0:	0c 94 60 1a 	jmp	0x34c0	; 0x34c0 <__vector_104>
     1a4:	0c 94 91 1a 	jmp	0x3522	; 0x3522 <__vector_105>
     1a8:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     1ac:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     1b0:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <__vector_108>
     1b4:	0c 94 f3 1a 	jmp	0x35e6	; 0x35e6 <__vector_109>
     1b8:	0c 94 24 1b 	jmp	0x3648	; 0x3648 <__vector_110>
     1bc:	0c 94 55 1b 	jmp	0x36aa	; 0x36aa <__vector_111>
     1c0:	0c 94 86 1b 	jmp	0x370c	; 0x370c <__vector_112>
     1c4:	0c 94 b7 1b 	jmp	0x376e	; 0x376e <__vector_113>
     1c8:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     1cc:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     1d0:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     1d4:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     1d8:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
     1dc:	0c 94 e8 1b 	jmp	0x37d0	; 0x37d0 <__vector_119>
     1e0:	0c 94 19 1c 	jmp	0x3832	; 0x3832 <__vector_120>
     1e4:	0c 94 4a 1c 	jmp	0x3894	; 0x3894 <__vector_121>
     1e8:	3c 03       	fmul	r19, r20
     1ea:	3f 03       	fmul	r19, r23
     1ec:	56 03       	mulsu	r21, r22
     1ee:	47 03       	mulsu	r20, r23
     1f0:	53 03       	mulsu	r21, r19
     1f2:	56 03       	mulsu	r21, r22
     1f4:	56 03       	mulsu	r21, r22
     1f6:	56 03       	mulsu	r21, r22
     1f8:	56 03       	mulsu	r21, r22
     1fa:	43 03       	mulsu	r20, r19
     1fc:	4b 03       	fmul	r20, r19
     1fe:	4f 03       	fmul	r20, r23
     200:	9d 04       	cpc	r9, r13
     202:	a1 04       	cpc	r10, r1
     204:	d8 04       	cpc	r13, r8
     206:	07 05       	cpc	r16, r7
     208:	3b 05       	cpc	r19, r11
     20a:	6d 05       	cpc	r22, r13
     20c:	c9 05       	cpc	r28, r9
     20e:	25 06       	cpc	r2, r21
     210:	93 1e       	adc	r9, r19
     212:	93 1e       	adc	r9, r19
     214:	9b 1e       	adc	r9, r27
     216:	a3 1e       	adc	r10, r19
     218:	aa 1e       	adc	r10, r26
     21a:	f9 1e       	adc	r15, r25
     21c:	00 1f       	adc	r16, r16
     21e:	2c 1f       	adc	r18, r28
     220:	2c 1f       	adc	r18, r28
     222:	2b 1f       	adc	r18, r27
     224:	2b 1f       	adc	r18, r27

00000226 <__trampolines_start>:
     226:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x60>
     22a:	0c 94 2b 1f 	jmp	0x3e56	; 0x3e56 <_ZN9CMBSender13OnReceiveByteEh+0x152>
     22e:	0c 94 36 04 	jmp	0x86c	; 0x86c <_GLOBAL__sub_D_timer>
     232:	0c 94 94 1f 	jmp	0x3f28	; 0x3f28 <_ZN9CMBSender18OnUSARTTxInterruptEPv>
     236:	0c 94 4e 08 	jmp	0x109c	; 0x109c <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     23a:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <_ZN4CSPI16StaticOnTransmitEPv>
     23e:	0c 94 d7 07 	jmp	0xfae	; 0xfae <_ZN7CTimerC4StopEv>
     242:	0c 94 2f 1f 	jmp	0x3e5e	; 0x3e5e <_ZN9CMBSender18OnUSARTRxInterruptEPv>
     246:	0c 94 25 06 	jmp	0xc4a	; 0xc4a <_ZN16CLaserControlApp3RunEv+0x372>
     24a:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     24e:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>
     252:	0c 94 ed 07 	jmp	0xfda	; 0xfda <_ZN7CTimerC9SetPeriodEj>
     256:	0c 94 4f 03 	jmp	0x69e	; 0x69e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x52>
     25a:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <_ZN7CTimerC8SetCOMPCEj>
     25e:	0c 94 dd 1d 	jmp	0x3bba	; 0x3bba <_ZN16CMBEventsHandler15AllocateBuffersEjj>
     262:	0c 94 42 02 	jmp	0x484	; 0x484 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>
     266:	0c 94 97 1c 	jmp	0x392e	; 0x392e <_GLOBAL__sub_D_dacSPI>
     26a:	0c 94 30 02 	jmp	0x460	; 0x460 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>
     26e:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <_ZN16CLaserControlApp3RunEv+0x136>
     272:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     276:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
     27a:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>
     27e:	0c 94 aa 1e 	jmp	0x3d54	; 0x3d54 <_ZN9CMBSender13OnReceiveByteEh+0x50>
     282:	0c 94 a1 04 	jmp	0x942	; 0x942 <_ZN16CLaserControlApp3RunEv+0x6a>
     286:	0c 94 9b 1e 	jmp	0x3d36	; 0x3d36 <_ZN9CMBSender13OnReceiveByteEh+0x32>
     28a:	0c 94 00 1f 	jmp	0x3e00	; 0x3e00 <_ZN9CMBSender13OnReceiveByteEh+0xfc>
     28e:	0c 94 31 04 	jmp	0x862	; 0x862 <_GLOBAL__sub_I_timer>
     292:	0c 94 7b 1c 	jmp	0x38f6	; 0x38f6 <__cxa_pure_virtual>
     296:	0c 94 f7 07 	jmp	0xfee	; 0xfee <_ZN7CTimerC8SetCOMPBEj>
     29a:	0c 94 a3 1e 	jmp	0x3d46	; 0x3d46 <_ZN9CMBSender13OnReceiveByteEh+0x42>
     29e:	0c 94 39 02 	jmp	0x472	; 0x472 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>
     2a2:	0c 94 13 02 	jmp	0x426	; 0x426 <_ZN10CDGUSUSART15GetReceivedByteEv>
     2a6:	0c 94 01 08 	jmp	0x1002	; 0x1002 <_ZN7CTimerC8SetCOMPDEj>
     2aa:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <_ZN16CLaserControlApp3RunEv+0x2ba>
     2ae:	0c 94 16 1e 	jmp	0x3c2c	; 0x3c2c <_ZN9CMBSender18OnRegisterReceivedEhPhh>
     2b2:	0c 94 b9 1d 	jmp	0x3b72	; 0x3b72 <_ZN16CMBEventsHandler13FillVarDataRqEjj>
     2b6:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     2ba:	0c 94 25 03 	jmp	0x64a	; 0x64a <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>
     2be:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <_ZN16CMBEventsHandler11FreeBuffersEv>
     2c2:	0c 94 6d 05 	jmp	0xada	; 0xada <_ZN16CLaserControlApp3RunEv+0x202>
     2c6:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <_ZN16CLaserControlApp13OnTimerStaticEPv>
     2ca:	0c 94 19 02 	jmp	0x432	; 0x432 <_ZN10CDGUSUSART14IsTransmittingEv>
     2ce:	0c 94 70 1d 	jmp	0x3ae0	; 0x3ae0 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>
     2d2:	0c 94 3f 03 	jmp	0x67e	; 0x67e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x32>
     2d6:	0c 94 43 03 	jmp	0x686	; 0x686 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x3a>
     2da:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>
     2de:	0c 94 df 07 	jmp	0xfbe	; 0xfbe <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>
     2e2:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <_ZN16CLaserControlApp3RunEv+0x19e>
     2e6:	0c 94 06 08 	jmp	0x100c	; 0x100c <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     2ea:	0c 94 39 20 	jmp	0x4072	; 0x4072 <_ZN9CMBSender21OnTransactionCallbackEPhj>
     2ee:	0c 94 51 1d 	jmp	0x3aa2	; 0x3aa2 <_ZN16CMBEventsHandler13FillRegDataRqEhh>
     2f2:	0c 94 4b 02 	jmp	0x496	; 0x496 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>
     2f6:	0c 94 21 02 	jmp	0x442	; 0x442 <_ZN10CDGUSUSART11IsReceivingEv>
     2fa:	0c 94 18 08 	jmp	0x1030	; 0x1030 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     2fe:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <_ZN16CLaserControlApp3RunEv+0xd8>
     302:	0c 94 f9 1e 	jmp	0x3df2	; 0x3df2 <_ZN9CMBSender13OnReceiveByteEh+0xee>
     306:	0c 94 47 03 	jmp	0x68e	; 0x68e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x42>
     30a:	0c 94 7e 1c 	jmp	0x38fc	; 0x38fc <_GLOBAL__sub_I_dacSPI>
     30e:	0c 94 3c 08 	jmp	0x1078	; 0x1078 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     312:	0c 94 26 03 	jmp	0x64c	; 0x64c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>
     316:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <_ZN7CTimerC5StartEj>
     31a:	0c 94 07 1e 	jmp	0x3c0e	; 0x3c0e <_ZN9CMBSender18OnVariableReceivedEjPjj>
     31e:	0c 94 4b 03 	jmp	0x696	; 0x696 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x4a>
     322:	0c 94 2c 1f 	jmp	0x3e58	; 0x3e58 <_ZN9CMBSender13OnReceiveByteEh+0x154>
     326:	0c 94 93 1e 	jmp	0x3d26	; 0x3d26 <_ZN9CMBSender13OnReceiveByteEh+0x22>
     32a:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x5a>
     32e:	0c 94 28 02 	jmp	0x450	; 0x450 <_ZN10CDGUSUSART11IsDataEmptyEv>
     332:	0c 94 3c 03 	jmp	0x678	; 0x678 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x2c>
     336:	0c 94 f2 07 	jmp	0xfe4	; 0xfe4 <_ZN7CTimerC8SetCOMPAEj>
     33a:	0c 94 9d 04 	jmp	0x93a	; 0x93a <_ZN16CLaserControlApp3RunEv+0x62>
     33e:	0c 94 16 02 	jmp	0x42c	; 0x42c <_ZN10CDGUSUSART19SetTransmittingByteEh>

00000342 <__ctors_start>:
     342:	31 04       	cpc	r3, r1
     344:	7e 1c       	adc	r7, r14

00000346 <__ctors_end>:
     346:	36 04       	cpc	r3, r6
     348:	97 1c       	adc	r9, r7

0000034a <__dtors_end>:
     34a:	11 24       	eor	r1, r1
     34c:	1f be       	out	0x3f, r1	; 63
     34e:	cf ef       	ldi	r28, 0xFF	; 255
     350:	cd bf       	out	0x3d, r28	; 61
     352:	df e3       	ldi	r29, 0x3F	; 63
     354:	de bf       	out	0x3e, r29	; 62
     356:	00 e0       	ldi	r16, 0x00	; 0
     358:	0c bf       	out	0x3c, r16	; 60

0000035a <__do_copy_data>:
     35a:	10 e2       	ldi	r17, 0x20	; 32
     35c:	a0 e0       	ldi	r26, 0x00	; 0
     35e:	b0 e2       	ldi	r27, 0x20	; 32
     360:	e6 ea       	ldi	r30, 0xA6	; 166
     362:	f3 e4       	ldi	r31, 0x43	; 67
     364:	00 e0       	ldi	r16, 0x00	; 0
     366:	0b bf       	out	0x3b, r16	; 59
     368:	02 c0       	rjmp	.+4      	; 0x36e <__do_copy_data+0x14>
     36a:	07 90       	elpm	r0, Z+
     36c:	0d 92       	st	X+, r0
     36e:	ae 3e       	cpi	r26, 0xEE	; 238
     370:	b1 07       	cpc	r27, r17
     372:	d9 f7       	brne	.-10     	; 0x36a <__do_copy_data+0x10>

00000374 <__do_clear_bss>:
     374:	23 e2       	ldi	r18, 0x23	; 35
     376:	ae ee       	ldi	r26, 0xEE	; 238
     378:	b0 e2       	ldi	r27, 0x20	; 32
     37a:	01 c0       	rjmp	.+2      	; 0x37e <.do_clear_bss_start>

0000037c <.do_clear_bss_loop>:
     37c:	1d 92       	st	X+, r1

0000037e <.do_clear_bss_start>:
     37e:	a2 32       	cpi	r26, 0x22	; 34
     380:	b2 07       	cpc	r27, r18
     382:	e1 f7       	brne	.-8      	; 0x37c <.do_clear_bss_loop>

00000384 <__do_global_ctors>:
     384:	11 e0       	ldi	r17, 0x01	; 1
     386:	c3 ea       	ldi	r28, 0xA3	; 163
     388:	d1 e0       	ldi	r29, 0x01	; 1
     38a:	00 e0       	ldi	r16, 0x00	; 0
     38c:	06 c0       	rjmp	.+12     	; 0x39a <__do_global_ctors+0x16>
     38e:	21 97       	sbiw	r28, 0x01	; 1
     390:	01 09       	sbc	r16, r1
     392:	80 2f       	mov	r24, r16
     394:	fe 01       	movw	r30, r28
     396:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <__tablejump2__>
     39a:	c1 3a       	cpi	r28, 0xA1	; 161
     39c:	d1 07       	cpc	r29, r17
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	08 07       	cpc	r16, r24
     3a2:	a9 f7       	brne	.-22     	; 0x38e <__do_global_ctors+0xa>
     3a4:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <main>
     3a8:	0c 94 c1 21 	jmp	0x4382	; 0x4382 <__do_global_dtors>

000003ac <__bad_interrupt>:
     3ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003b0 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
     3b0:	0f 93       	push	r16
	PORTD.DIRSET = PIN3_bm; // Set TX to output
     3b2:	e0 e6       	ldi	r30, 0x60	; 96
     3b4:	f6 e0       	ldi	r31, 0x06	; 6
     3b6:	88 e0       	ldi	r24, 0x08	; 8
     3b8:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; // Set RX to input
     3ba:	84 e0       	ldi	r24, 0x04	; 4
     3bc:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN2CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
     3be:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
     3c0:	13 8a       	std	Z+19, r1	; 0x13
	
	// Turn on interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_LO_gc/* | USART_DREINTLVL_LO_gc*/;
     3c2:	e0 ea       	ldi	r30, 0xA0	; 160
     3c4:	f9 e0       	ldi	r31, 0x09	; 9
     3c6:	84 e1       	ldi	r24, 0x14	; 20
     3c8:	83 83       	std	Z+3, r24	; 0x03
	
	// Enable RX, TX
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     3ca:	88 e1       	ldi	r24, 0x18	; 24
     3cc:	84 83       	std	Z+4, r24	; 0x04
	
	// Double transmission speed
#ifdef U2X
	USARTD0.CTRLB |=  (1 << USART_CLK2X_bm);
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
     3ce:	84 81       	ldd	r24, Z+4	; 0x04
     3d0:	84 83       	std	Z+4, r24	; 0x04
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
     3d2:	41 30       	cpi	r20, 0x01	; 1
     3d4:	19 f0       	breq	.+6      	; 0x3dc <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x2c>
     3d6:	42 30       	cpi	r20, 0x02	; 2
     3d8:	19 f0       	breq	.+6      	; 0x3e0 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x30>
     3da:	04 c0       	rjmp	.+8      	; 0x3e4 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
	{
		case PARITY_DISABLE:
			temp |= USART_PMODE_DISABLED_gc;
		break;
		case PARITY_EVEN:
			temp |= USART_PMODE_EVEN_gc;
     3dc:	80 e2       	ldi	r24, 0x20	; 32
     3de:	03 c0       	rjmp	.+6      	; 0x3e6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
		break;
		case PARITY_ODD:
			temp |= USART_PMODE_ODD_gc;
     3e0:	80 e3       	ldi	r24, 0x30	; 48
		break;
     3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
#endif

	// Parity param set
	uint8_t temp = 0;
     3e4:	80 e0       	ldi	r24, 0x00	; 0
			temp |= USART_PMODE_ODD_gc;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
     3e6:	22 23       	and	r18, r18
     3e8:	19 f0       	breq	.+6      	; 0x3f0 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x40>
     3ea:	21 30       	cpi	r18, 0x01	; 1
     3ec:	19 f0       	breq	.+6      	; 0x3f4 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x44>
     3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
	{
		case STOPBITS_1BIT:
			temp &= ~USART_SBMODE_bm;
     3f0:	87 7f       	andi	r24, 0xF7	; 247
		break;
     3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
		case STOPBITS_2BIT:
			temp |=  USART_SBMODE_bm;
     3f4:	88 60       	ori	r24, 0x08	; 8
		break;
	}
	
	// USART mode asynchronous, 8bit
	USARTD0.CTRLC = (Async?USART_CMODE_ASYNCHRONOUS_gc:USART_CMODE_SYNCHRONOUS_gc) | USART_CHSIZE_8BIT_gc | temp;
     3f6:	01 11       	cpse	r16, r1
     3f8:	02 c0       	rjmp	.+4      	; 0x3fe <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x4e>
     3fa:	93 e4       	ldi	r25, 0x43	; 67
     3fc:	01 c0       	rjmp	.+2      	; 0x400 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x50>
     3fe:	93 e0       	ldi	r25, 0x03	; 3
     400:	89 2b       	or	r24, r25
     402:	e0 ea       	ldi	r30, 0xA0	; 160
     404:	f9 e0       	ldi	r31, 0x09	; 9
     406:	85 83       	std	Z+5, r24	; 0x05
	
	// Set baud rate
	USARTD0.BAUDCTRLA = bsel_table[baud];
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	db 01       	movw	r26, r22
     40c:	aa 5d       	subi	r26, 0xDA	; 218
     40e:	bf 4d       	sbci	r27, 0xDF	; 223
     410:	8c 91       	ld	r24, X
     412:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (((int8_t)(16 + bscale_table[baud])) << USART_BSCALE0_bp) | ((bsel_table[baud] >> 8) & 0x0F);	
     414:	db 01       	movw	r26, r22
     416:	aa 5f       	subi	r26, 0xFA	; 250
     418:	bf 4d       	sbci	r27, 0xDF	; 223
     41a:	8c 91       	ld	r24, X
     41c:	82 95       	swap	r24
     41e:	80 7f       	andi	r24, 0xF0	; 240
     420:	87 83       	std	Z+7, r24	; 0x07
} //CUSART
     422:	0f 91       	pop	r16
     424:	08 95       	ret

00000426 <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return USARTD0.DATA;
     426:	80 91 a0 09 	lds	r24, 0x09A0
}
     42a:	08 95       	ret

0000042c <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( ( USARTD0.STATUS & (1<<USART_DREIF_bm)) );
	USARTD0.DATA = data;
     42c:	60 93 a0 09 	sts	0x09A0, r22
     430:	08 95       	ret

00000432 <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return !( USARTD0.STATUS & USART_TXCIF_bm);
     432:	80 91 a1 09 	lds	r24, 0x09A1
     436:	86 fb       	bst	r24, 6
     438:	88 27       	eor	r24, r24
     43a:	80 f9       	bld	r24, 0
}
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	89 27       	eor	r24, r25
     440:	08 95       	ret

00000442 <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return !( USARTD0.STATUS & USART_RXCIF_bm);
     442:	80 91 a1 09 	lds	r24, 0x09A1
     446:	80 95       	com	r24
}
     448:	88 1f       	adc	r24, r24
     44a:	88 27       	eor	r24, r24
     44c:	88 1f       	adc	r24, r24
     44e:	08 95       	ret

00000450 <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return !( USARTD0.STATUS & USART_DREIF_bm);
     450:	80 91 a1 09 	lds	r24, 0x09A1
     454:	85 fb       	bst	r24, 5
     456:	88 27       	eor	r24, r24
     458:	80 f9       	bld	r24, 0
}
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	89 27       	eor	r24, r25
     45e:	08 95       	ret

00000460 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_RXC_vect_num] = sender;
     460:	60 93 97 22 	sts	0x2297, r22
     464:	70 93 98 22 	sts	0x2298, r23
	InterruptFuncTable[USARTD0_RXC_vect_num] = callback;
     468:	40 93 a1 21 	sts	0x21A1, r20
     46c:	50 93 a2 21 	sts	0x21A2, r21
     470:	08 95       	ret

00000472 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_TXC_vect_num] = sender;
     472:	60 93 9b 22 	sts	0x229B, r22
     476:	70 93 9c 22 	sts	0x229C, r23
	InterruptFuncTable[USARTD0_TXC_vect_num] = callback;
     47a:	40 93 a5 21 	sts	0x21A5, r20
     47e:	50 93 a6 21 	sts	0x21A6, r21
     482:	08 95       	ret

00000484 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMARxTrig(DMA_CH_t *dma_channel)
{
     484:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_RXC_gc;
     486:	8b e6       	ldi	r24, 0x6B	; 107
     488:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->SRCADDR0 = (int)&USARTD0.DATA;
     48a:	80 ea       	ldi	r24, 0xA0	; 160
     48c:	80 87       	std	Z+8, r24	; 0x08
	dma_channel->SRCADDR1 = (int)&USARTD0.DATA >> 8;
     48e:	89 e0       	ldi	r24, 0x09	; 9
     490:	81 87       	std	Z+9, r24	; 0x09
	dma_channel->SRCADDR2 = 0;
     492:	12 86       	std	Z+10, r1	; 0x0a
     494:	08 95       	ret

00000496 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMATxTrig(DMA_CH_t *dma_channel)
{
     496:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_DRE_gc;
     498:	8c e6       	ldi	r24, 0x6C	; 108
     49a:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->DESTADDR0 = (int)&USARTD0.DATA;
     49c:	80 ea       	ldi	r24, 0xA0	; 160
     49e:	84 87       	std	Z+12, r24	; 0x0c
	dma_channel->DESTADDR1 = (int)&USARTD0.DATA >> 8;
     4a0:	89 e0       	ldi	r24, 0x09	; 9
     4a2:	85 87       	std	Z+13, r24	; 0x0d
	dma_channel->DESTADDR2 = 0;
     4a4:	16 86       	std	Z+14, r1	; 0x0e
     4a6:	08 95       	ret

000004a8 <_ZN10CDGUSUSARTC1Ev>:
								true, true, true, true, true, true, true, true, true, true,
								true, true};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	ec 01       	movw	r28, r24
     4ae:	0e 94 ee 08 	call	0x11dc	; 0x11dc <_ZN6CUSARTC1Ev>
     4b2:	8d e4       	ldi	r24, 0x4D	; 77
     4b4:	90 e2       	ldi	r25, 0x20	; 32
     4b6:	88 83       	st	Y, r24
     4b8:	99 83       	std	Y+1, r25	; 0x01
{
} //CDGUSUSART
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	08 95       	ret

000004c0 <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
     4c0:	2d e4       	ldi	r18, 0x4D	; 77
     4c2:	30 e2       	ldi	r19, 0x20	; 32
     4c4:	fc 01       	movw	r30, r24
     4c6:	20 83       	st	Z, r18
     4c8:	31 83       	std	Z+1, r19	; 0x01
     4ca:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <_ZN6CUSARTD1Ev>
     4ce:	08 95       	ret

000004d0 <_ZN11CLaserBoardC1Ev>:
     4d0:	08 95       	ret

000004d2 <_ZN11CLaserBoardD1Ev>:
     4d2:	08 95       	ret

000004d4 <_ZN11CLaserBoard12InitializeIOEv>:
     4d4:	e0 e4       	ldi	r30, 0x40	; 64
     4d6:	f6 e0       	ldi	r31, 0x06	; 6
     4d8:	9f ef       	ldi	r25, 0xFF	; 255
     4da:	91 83       	std	Z+1, r25	; 0x01
     4dc:	88 ea       	ldi	r24, 0xA8	; 168
     4de:	80 8b       	std	Z+16, r24	; 0x10
     4e0:	81 8b       	std	Z+17, r24	; 0x11
     4e2:	82 8b       	std	Z+18, r24	; 0x12
     4e4:	83 8b       	std	Z+19, r24	; 0x13
     4e6:	84 8b       	std	Z+20, r24	; 0x14
     4e8:	85 8b       	std	Z+21, r24	; 0x15
     4ea:	86 8b       	std	Z+22, r24	; 0x16
     4ec:	87 8b       	std	Z+23, r24	; 0x17
     4ee:	14 82       	std	Z+4, r1	; 0x04
     4f0:	e0 e8       	ldi	r30, 0x80	; 128
     4f2:	f6 e0       	ldi	r31, 0x06	; 6
     4f4:	88 e0       	ldi	r24, 0x08	; 8
     4f6:	81 83       	std	Z+1, r24	; 0x01
     4f8:	13 8a       	std	Z+19, r1	; 0x13
     4fa:	14 82       	std	Z+4, r1	; 0x04
     4fc:	e0 ea       	ldi	r30, 0xA0	; 160
     4fe:	f6 e0       	ldi	r31, 0x06	; 6
     500:	80 ec       	ldi	r24, 0xC0	; 192
     502:	80 8b       	std	Z+16, r24	; 0x10
     504:	81 8b       	std	Z+17, r24	; 0x11
     506:	82 8b       	std	Z+18, r24	; 0x12
     508:	83 8b       	std	Z+19, r24	; 0x13
     50a:	84 8b       	std	Z+20, r24	; 0x14
     50c:	85 8b       	std	Z+21, r24	; 0x15
     50e:	86 8b       	std	Z+22, r24	; 0x16
     510:	87 8b       	std	Z+23, r24	; 0x17
     512:	14 82       	std	Z+4, r1	; 0x04
     514:	91 83       	std	Z+1, r25	; 0x01
     516:	e0 e6       	ldi	r30, 0x60	; 96
     518:	f6 e0       	ldi	r31, 0x06	; 6
     51a:	91 e1       	ldi	r25, 0x11	; 17
     51c:	91 83       	std	Z+1, r25	; 0x01
     51e:	80 8b       	std	Z+16, r24	; 0x10
     520:	84 8b       	std	Z+20, r24	; 0x14
     522:	14 82       	std	Z+4, r1	; 0x04
     524:	e0 ea       	ldi	r30, 0xA0	; 160
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	82 81       	ldd	r24, Z+2	; 0x02
     52a:	81 60       	ori	r24, 0x01	; 1
     52c:	82 83       	std	Z+2, r24	; 0x02
     52e:	82 81       	ldd	r24, Z+2	; 0x02
     530:	82 60       	ori	r24, 0x02	; 2
     532:	82 83       	std	Z+2, r24	; 0x02
     534:	82 81       	ldd	r24, Z+2	; 0x02
     536:	84 60       	ori	r24, 0x04	; 4
     538:	82 83       	std	Z+2, r24	; 0x02
     53a:	08 95       	ret

0000053c <_ZN11CLaserBoard15InitializeClockEv>:
     53c:	e0 e5       	ldi	r30, 0x50	; 80
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	8b ec       	ldi	r24, 0xCB	; 203
     542:	82 83       	std	Z+2, r24	; 0x02
     544:	80 81       	ld	r24, Z
     546:	88 60       	ori	r24, 0x08	; 8
     548:	80 83       	st	Z, r24
     54a:	81 81       	ldd	r24, Z+1	; 0x01
     54c:	83 ff       	sbrs	r24, 3
     54e:	fd cf       	rjmp	.-6      	; 0x54a <_ZN11CLaserBoard15InitializeClockEv+0xe>
     550:	e0 e5       	ldi	r30, 0x50	; 80
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	85 81       	ldd	r24, Z+5	; 0x05
     556:	98 ed       	ldi	r25, 0xD8	; 216
     558:	94 bf       	out	0x34, r25	; 52
     55a:	84 ec       	ldi	r24, 0xC4	; 196
     55c:	85 83       	std	Z+5, r24	; 0x05
     55e:	80 81       	ld	r24, Z
     560:	80 61       	ori	r24, 0x10	; 16
     562:	80 83       	st	Z, r24
     564:	e0 e4       	ldi	r30, 0x40	; 64
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	81 81       	ldd	r24, Z+1	; 0x01
     56a:	94 bf       	out	0x34, r25	; 52
     56c:	11 82       	std	Z+1, r1	; 0x01
     56e:	e0 e5       	ldi	r30, 0x50	; 80
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	81 81       	ldd	r24, Z+1	; 0x01
     574:	84 ff       	sbrs	r24, 4
     576:	fd cf       	rjmp	.-6      	; 0x572 <_ZN11CLaserBoard15InitializeClockEv+0x36>
     578:	e0 e4       	ldi	r30, 0x40	; 64
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	80 81       	ld	r24, Z
     57e:	88 7f       	andi	r24, 0xF8	; 248
     580:	84 60       	ori	r24, 0x04	; 4
     582:	98 ed       	ldi	r25, 0xD8	; 216
     584:	94 bf       	out	0x34, r25	; 52
     586:	80 83       	st	Z, r24
     588:	a0 e5       	ldi	r26, 0x50	; 80
     58a:	b0 e0       	ldi	r27, 0x00	; 0
     58c:	8c 91       	ld	r24, X
     58e:	88 7f       	andi	r24, 0xF8	; 248
     590:	8c 93       	st	X, r24
     592:	82 81       	ldd	r24, Z+2	; 0x02
     594:	94 bf       	out	0x34, r25	; 52
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	82 83       	std	Z+2, r24	; 0x02
     59a:	e0 eb       	ldi	r30, 0xB0	; 176
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	84 81       	ldd	r24, Z+4	; 0x04
     5a0:	8c 7f       	andi	r24, 0xFC	; 252
     5a2:	84 83       	std	Z+4, r24	; 0x04
     5a4:	08 95       	ret

000005a6 <_ZN11CLaserBoard8Relay1OnEv>:
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	80 93 62 06 	sts	0x0662, r24
     5ac:	08 95       	ret

000005ae <_ZN11CLaserBoard8Relay2OnEv>:
     5ae:	80 e1       	ldi	r24, 0x10	; 16
     5b0:	80 93 62 06 	sts	0x0662, r24
     5b4:	08 95       	ret

000005b6 <_ZN11CLaserBoard9Relay1OffEv>:
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	80 93 61 06 	sts	0x0661, r24
     5bc:	08 95       	ret

000005be <_ZN11CLaserBoard9Relay2OffEv>:
     5be:	80 e1       	ldi	r24, 0x10	; 16
     5c0:	80 93 61 06 	sts	0x0661, r24
     5c4:	08 95       	ret

000005c6 <_ZN11CLaserBoard4BeepEv>:
     5c6:	f8 94       	cli
     5c8:	84 e6       	ldi	r24, 0x64	; 100
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	e0 e8       	ldi	r30, 0x80	; 128
     5ce:	f6 e0       	ldi	r31, 0x06	; 6
     5d0:	28 e0       	ldi	r18, 0x08	; 8
     5d2:	25 83       	std	Z+5, r18	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5d4:	af e9       	ldi	r26, 0x9F	; 159
     5d6:	bf e0       	ldi	r27, 0x0F	; 15
     5d8:	11 97       	sbiw	r26, 0x01	; 1
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <_ZN11CLaserBoard4BeepEv+0x12>
     5dc:	00 c0       	rjmp	.+0      	; 0x5de <_ZN11CLaserBoard4BeepEv+0x18>
     5de:	00 00       	nop
     5e0:	26 83       	std	Z+6, r18	; 0x06
     5e2:	af e9       	ldi	r26, 0x9F	; 159
     5e4:	bf e0       	ldi	r27, 0x0F	; 15
     5e6:	11 97       	sbiw	r26, 0x01	; 1
     5e8:	f1 f7       	brne	.-4      	; 0x5e6 <_ZN11CLaserBoard4BeepEv+0x20>
     5ea:	00 c0       	rjmp	.+0      	; 0x5ec <_ZN11CLaserBoard4BeepEv+0x26>
     5ec:	00 00       	nop
     5ee:	01 97       	sbiw	r24, 0x01	; 1
     5f0:	81 f7       	brne	.-32     	; 0x5d2 <_ZN11CLaserBoard4BeepEv+0xc>
     5f2:	78 94       	sei
     5f4:	08 95       	ret

000005f6 <_ZN11CLaserBoard14BeepClassErrorEv>:
     5f6:	f8 94       	cli
     5f8:	45 e0       	ldi	r20, 0x05	; 5
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	64 e6       	ldi	r22, 0x64	; 100
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	e0 e8       	ldi	r30, 0x80	; 128
     602:	f6 e0       	ldi	r31, 0x06	; 6
     604:	28 e0       	ldi	r18, 0x08	; 8
     606:	1c c0       	rjmp	.+56     	; 0x640 <_ZN11CLaserBoard14BeepClassErrorEv+0x4a>
     608:	25 83       	std	Z+5, r18	; 0x05
     60a:	af e9       	ldi	r26, 0x9F	; 159
     60c:	bf e0       	ldi	r27, 0x0F	; 15
     60e:	11 97       	sbiw	r26, 0x01	; 1
     610:	f1 f7       	brne	.-4      	; 0x60e <_ZN11CLaserBoard14BeepClassErrorEv+0x18>
     612:	00 c0       	rjmp	.+0      	; 0x614 <_ZN11CLaserBoard14BeepClassErrorEv+0x1e>
     614:	00 00       	nop
     616:	26 83       	std	Z+6, r18	; 0x06
     618:	af e9       	ldi	r26, 0x9F	; 159
     61a:	bf e0       	ldi	r27, 0x0F	; 15
     61c:	11 97       	sbiw	r26, 0x01	; 1
     61e:	f1 f7       	brne	.-4      	; 0x61c <_ZN11CLaserBoard14BeepClassErrorEv+0x26>
     620:	00 c0       	rjmp	.+0      	; 0x622 <_ZN11CLaserBoard14BeepClassErrorEv+0x2c>
     622:	00 00       	nop
     624:	01 97       	sbiw	r24, 0x01	; 1
     626:	81 f7       	brne	.-32     	; 0x608 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     628:	bf ef       	ldi	r27, 0xFF	; 255
     62a:	73 ec       	ldi	r23, 0xC3	; 195
     62c:	89 e0       	ldi	r24, 0x09	; 9
     62e:	b1 50       	subi	r27, 0x01	; 1
     630:	70 40       	sbci	r23, 0x00	; 0
     632:	80 40       	sbci	r24, 0x00	; 0
     634:	e1 f7       	brne	.-8      	; 0x62e <_ZN11CLaserBoard14BeepClassErrorEv+0x38>
     636:	00 c0       	rjmp	.+0      	; 0x638 <_ZN11CLaserBoard14BeepClassErrorEv+0x42>
     638:	00 00       	nop
     63a:	41 50       	subi	r20, 0x01	; 1
     63c:	51 09       	sbc	r21, r1
     63e:	19 f0       	breq	.+6      	; 0x646 <_ZN11CLaserBoard14BeepClassErrorEv+0x50>
     640:	86 2f       	mov	r24, r22
     642:	93 2f       	mov	r25, r19
     644:	e1 cf       	rjmp	.-62     	; 0x608 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
     646:	78 94       	sei
     648:	08 95       	ret

0000064a <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
{
} //~CLaserControlApp

// CMBEventsHandler
void CLaserControlApp::OnTransactionCallback(uint8_t* data, uint16_t length)
{
     64a:	08 95       	ret

0000064c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
			CLaserBoard::Beep();
	}
}

void CLaserControlApp::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
     64c:	dc 01       	movw	r26, r24
	// Update GUI registers
	if (addr == 0x03)	PIC_ID = data[1];
     64e:	63 30       	cpi	r22, 0x03	; 3
     650:	29 f4       	brne	.+10     	; 0x65c <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x10>
     652:	fa 01       	movw	r30, r20
     654:	81 81       	ldd	r24, Z+1	; 0x01
     656:	1d 96       	adiw	r26, 0x0d	; 13
     658:	8c 93       	st	X, r24
     65a:	1d 97       	sbiw	r26, 0x0d	; 13
	
	switch (PIC_ID)
     65c:	1d 96       	adiw	r26, 0x0d	; 13
     65e:	4c 91       	ld	r20, X
     660:	1d 97       	sbiw	r26, 0x0d	; 13
     662:	50 e0       	ldi	r21, 0x00	; 0
     664:	4c 30       	cpi	r20, 0x0C	; 12
     666:	51 05       	cpc	r21, r1
     668:	08 f5       	brcc	.+66     	; 0x6ac <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x60>
     66a:	fa 01       	movw	r30, r20
     66c:	88 27       	eor	r24, r24
     66e:	ec 50       	subi	r30, 0x0C	; 12
     670:	ff 4f       	sbci	r31, 0xFF	; 255
     672:	8f 4f       	sbci	r24, 0xFF	; 255
     674:	0c 94 5b 20 	jmp	0x40b6	; 0x40b6 <__tablejump2__>
	{
		case PICID_LOGO:
			state = APP_LOGO;
     678:	1c 96       	adiw	r26, 0x0c	; 12
     67a:	1c 92       	st	X, r1
		break;
     67c:	08 95       	ret
		case PICID_SETUP:
			state = APP_SETUP;
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	1c 96       	adiw	r26, 0x0c	; 12
     682:	8c 93       	st	X, r24
		break;
     684:	08 95       	ret
		case PICID_TIMER:
			state = APP_RUN;
     686:	83 e0       	ldi	r24, 0x03	; 3
     688:	1c 96       	adiw	r26, 0x0c	; 12
     68a:	8c 93       	st	X, r24
		break;
     68c:	08 95       	ret
		case PICID_OnStart:
			state = APP_OnTimerStart;
     68e:	84 e0       	ldi	r24, 0x04	; 4
     690:	1c 96       	adiw	r26, 0x0c	; 12
     692:	8c 93       	st	X, r24
		break;
     694:	08 95       	ret
		case PICID_OnRestart:
			state = APP_OnTimerRestart;
     696:	86 e0       	ldi	r24, 0x06	; 6
     698:	1c 96       	adiw	r26, 0x0c	; 12
     69a:	8c 93       	st	X, r24
		break;
     69c:	08 95       	ret
		case PICID_OnStop:
			state = APP_OnTimerStop;
     69e:	85 e0       	ldi	r24, 0x05	; 5
     6a0:	1c 96       	adiw	r26, 0x0c	; 12
     6a2:	8c 93       	st	X, r24
		break;
     6a4:	08 95       	ret
		case PICID_OnH_L:
			state = APP_OnHL;
     6a6:	87 e0       	ldi	r24, 0x07	; 7
     6a8:	1c 96       	adiw	r26, 0x0c	; 12
     6aa:	8c 93       	st	X, r24
     6ac:	08 95       	ret

000006ae <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:
extern CLaserBoard laserBoard;
extern CSoundPlayer player;

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
     6ae:	fa 01       	movw	r30, r20
     6b0:	20 81       	ld	r18, Z
     6b2:	31 81       	ldd	r19, Z+1	; 0x01
     6b4:	32 27       	eor	r19, r18
     6b6:	23 27       	eor	r18, r19
     6b8:	32 27       	eor	r19, r18

void CLaserControlApp::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
	// Update GUI variables	
	uint16_t val = swap(*((uint16_t*)data));
	switch (addr)
     6ba:	60 31       	cpi	r22, 0x10	; 16
     6bc:	71 05       	cpc	r23, r1
     6be:	89 f0       	breq	.+34     	; 0x6e2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x34>
     6c0:	18 f4       	brcc	.+6      	; 0x6c8 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x1a>
     6c2:	67 2b       	or	r22, r23
     6c4:	41 f0       	breq	.+16     	; 0x6d6 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x28>
     6c6:	13 c0       	rjmp	.+38     	; 0x6ee <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x40>
     6c8:	60 32       	cpi	r22, 0x20	; 32
     6ca:	71 05       	cpc	r23, r1
     6cc:	91 f0       	breq	.+36     	; 0x6f2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x44>
     6ce:	60 33       	cpi	r22, 0x30	; 48
     6d0:	71 05       	cpc	r23, r1
     6d2:	79 f0       	breq	.+30     	; 0x6f2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x44>
     6d4:	0c c0       	rjmp	.+24     	; 0x6ee <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x40>
	{
		case VARIABLE_ADDR_MIN:
			m_wSetMin = val;
     6d6:	fc 01       	movw	r30, r24
     6d8:	24 8b       	std	Z+20, r18	; 0x14
     6da:	35 8b       	std	Z+21, r19	; 0x15
			m_wMinutes = val;
     6dc:	26 87       	std	Z+14, r18	; 0x0e
     6de:	37 87       	std	Z+15, r19	; 0x0f
		break;
     6e0:	08 95       	ret
		case VARIABLE_ADDR_SEC:
			m_wSetSec = val;
     6e2:	fc 01       	movw	r30, r24
     6e4:	26 8b       	std	Z+22, r18	; 0x16
     6e6:	37 8b       	std	Z+23, r19	; 0x17
			m_wSeconds = val;
     6e8:	20 8b       	std	Z+16, r18	; 0x10
     6ea:	31 8b       	std	Z+17, r19	; 0x11
		break;
     6ec:	08 95       	ret
		case VARIABLE_ADDR_PWR:
			// Not used
		break;
		default:
			// Error
			CLaserBoard::Beep();
     6ee:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN11CLaserBoard4BeepEv>
     6f2:	08 95       	ret

000006f4 <_ZN16CLaserControlAppC1Ev>:
	else
		return y;
}

// default constructor
CLaserControlApp::CLaserControlApp()
     6f4:	25 e6       	ldi	r18, 0x65	; 101
     6f6:	30 e2       	ldi	r19, 0x20	; 32
     6f8:	fc 01       	movw	r30, r24
     6fa:	20 83       	st	Z, r18
     6fc:	31 83       	std	Z+1, r19	; 0x01
     6fe:	08 95       	ret

00000700 <_ZN16CLaserControlAppD1Ev>:
{
} //CLaserControlApp

// default destructor
CLaserControlApp::~CLaserControlApp()
     700:	25 e6       	ldi	r18, 0x65	; 101
     702:	30 e2       	ldi	r19, 0x20	; 32
     704:	fc 01       	movw	r30, r24
     706:	20 83       	st	Z, r18
     708:	31 83       	std	Z+1, r19	; 0x01
     70a:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <_ZN16CMBEventsHandlerD1Ev>
     70e:	08 95       	ret

00000710 <_ZN16CLaserControlApp5StartEv>:
	m_wSeconds = m_wSetSec;
	m_wPower = 0;
}

void CLaserControlApp::Start()
{	
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
     71c:	28 97       	sbiw	r28, 0x08	; 8
     71e:	cd bf       	out	0x3d, r28	; 61
     720:	de bf       	out	0x3e, r29	; 62
     722:	8c 01       	movw	r16, r24
	// Startup DGUS initialization
	uint16_t pic_id = swap(1);
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	91 e0       	ldi	r25, 0x01	; 1
     728:	8f 83       	std	Y+7, r24	; 0x07
     72a:	98 87       	std	Y+8, r25	; 0x08
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     72c:	22 e0       	ldi	r18, 0x02	; 2
     72e:	ae 01       	movw	r20, r28
     730:	49 5f       	subi	r20, 0xF9	; 249
     732:	5f 4f       	sbci	r21, 0xFF	; 255
     734:	63 e0       	ldi	r22, 0x03	; 3
     736:	f8 01       	movw	r30, r16
     738:	82 8d       	ldd	r24, Z+26	; 0x1a
     73a:	93 8d       	ldd	r25, Z+27	; 0x1b
     73c:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     740:	f8 01       	movw	r30, r16
     742:	82 8d       	ldd	r24, Z+26	; 0x1a
     744:	93 8d       	ldd	r25, Z+27	; 0x1b
     746:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	//Setup variables
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MIN, (uint16_t*)&m_wSetMin, 2);
     74a:	a8 01       	movw	r20, r16
     74c:	4c 5e       	subi	r20, 0xEC	; 236
     74e:	5f 4f       	sbci	r21, 0xFF	; 255
     750:	22 e0       	ldi	r18, 0x02	; 2
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	f8 01       	movw	r30, r16
     75a:	82 8d       	ldd	r24, Z+26	; 0x1a
     75c:	93 8d       	ldd	r25, Z+27	; 0x1b
     75e:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     762:	f8 01       	movw	r30, r16
     764:	82 8d       	ldd	r24, Z+26	; 0x1a
     766:	93 8d       	ldd	r25, Z+27	; 0x1b
     768:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_SEC, (uint16_t*)&m_wSetSec, 2);
     76c:	a8 01       	movw	r20, r16
     76e:	4a 5e       	subi	r20, 0xEA	; 234
     770:	5f 4f       	sbci	r21, 0xFF	; 255
     772:	22 e0       	ldi	r18, 0x02	; 2
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	60 e1       	ldi	r22, 0x10	; 16
     778:	70 e0       	ldi	r23, 0x00	; 0
     77a:	f8 01       	movw	r30, r16
     77c:	82 8d       	ldd	r24, Z+26	; 0x1a
     77e:	93 8d       	ldd	r25, Z+27	; 0x1b
     780:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     784:	f8 01       	movw	r30, r16
     786:	82 8d       	ldd	r24, Z+26	; 0x1a
     788:	93 8d       	ldd	r25, Z+27	; 0x1b
     78a:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MSC, (uint16_t*)&m_wMillSec, 2);
     78e:	a8 01       	movw	r20, r16
     790:	4e 5e       	subi	r20, 0xEE	; 238
     792:	5f 4f       	sbci	r21, 0xFF	; 255
     794:	22 e0       	ldi	r18, 0x02	; 2
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	60 e2       	ldi	r22, 0x20	; 32
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	f8 01       	movw	r30, r16
     79e:	82 8d       	ldd	r24, Z+26	; 0x1a
     7a0:	93 8d       	ldd	r25, Z+27	; 0x1b
     7a2:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     7a6:	f8 01       	movw	r30, r16
     7a8:	82 8d       	ldd	r24, Z+26	; 0x1a
     7aa:	93 8d       	ldd	r25, Z+27	; 0x1b
     7ac:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_PWR, (uint16_t*)&m_wPower, 2);
     7b0:	a8 01       	movw	r20, r16
     7b2:	48 5e       	subi	r20, 0xE8	; 232
     7b4:	5f 4f       	sbci	r21, 0xFF	; 255
     7b6:	22 e0       	ldi	r18, 0x02	; 2
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	60 e3       	ldi	r22, 0x30	; 48
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	f8 01       	movw	r30, r16
     7c0:	82 8d       	ldd	r24, Z+26	; 0x1a
     7c2:	93 8d       	ldd	r25, Z+27	; 0x1b
     7c4:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     7c8:	f8 01       	movw	r30, r16
     7ca:	82 8d       	ldd	r24, Z+26	; 0x1a
     7cc:	93 8d       	ldd	r25, Z+27	; 0x1b
     7ce:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	uint16_t bar = 0;
	uint16_t bar1 = min(bar, 12);
     7d2:	1d 82       	std	Y+5, r1	; 0x05
     7d4:	1e 82       	std	Y+6, r1	; 0x06
	uint16_t bar2 = min(max(bar, 11), 24);
     7d6:	8b e0       	ldi	r24, 0x0B	; 11
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	8b 83       	std	Y+3, r24	; 0x03
     7dc:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t bar3 = max(bar, 23);
     7de:	87 e1       	ldi	r24, 0x17	; 23
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	89 83       	std	Y+1, r24	; 0x01
     7e4:	9a 83       	std	Y+2, r25	; 0x02
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR1, (uint16_t*)&bar1, 2);
     7e6:	22 e0       	ldi	r18, 0x02	; 2
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	ae 01       	movw	r20, r28
     7ec:	4b 5f       	subi	r20, 0xFB	; 251
     7ee:	5f 4f       	sbci	r21, 0xFF	; 255
     7f0:	60 e4       	ldi	r22, 0x40	; 64
     7f2:	70 e0       	ldi	r23, 0x00	; 0
     7f4:	f8 01       	movw	r30, r16
     7f6:	82 8d       	ldd	r24, Z+26	; 0x1a
     7f8:	93 8d       	ldd	r25, Z+27	; 0x1b
     7fa:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     7fe:	f8 01       	movw	r30, r16
     800:	82 8d       	ldd	r24, Z+26	; 0x1a
     802:	93 8d       	ldd	r25, Z+27	; 0x1b
     804:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR2, (uint16_t*)&bar2, 2);
     808:	22 e0       	ldi	r18, 0x02	; 2
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	ae 01       	movw	r20, r28
     80e:	4d 5f       	subi	r20, 0xFD	; 253
     810:	5f 4f       	sbci	r21, 0xFF	; 255
     812:	60 e5       	ldi	r22, 0x50	; 80
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	f8 01       	movw	r30, r16
     818:	82 8d       	ldd	r24, Z+26	; 0x1a
     81a:	93 8d       	ldd	r25, Z+27	; 0x1b
     81c:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     820:	f8 01       	movw	r30, r16
     822:	82 8d       	ldd	r24, Z+26	; 0x1a
     824:	93 8d       	ldd	r25, Z+27	; 0x1b
     826:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR3, (uint16_t*)&bar3, 2);
     82a:	22 e0       	ldi	r18, 0x02	; 2
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	ae 01       	movw	r20, r28
     830:	4f 5f       	subi	r20, 0xFF	; 255
     832:	5f 4f       	sbci	r21, 0xFF	; 255
     834:	60 e6       	ldi	r22, 0x60	; 96
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	f8 01       	movw	r30, r16
     83a:	82 8d       	ldd	r24, Z+26	; 0x1a
     83c:	93 8d       	ldd	r25, Z+27	; 0x1b
     83e:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     842:	f8 01       	movw	r30, r16
     844:	82 8d       	ldd	r24, Z+26	; 0x1a
     846:	93 8d       	ldd	r25, Z+27	; 0x1b
     848:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	state = APP_SETUP;
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	f8 01       	movw	r30, r16
     850:	84 87       	std	Z+12, r24	; 0x0c
}
     852:	28 96       	adiw	r28, 0x08	; 8
     854:	cd bf       	out	0x3d, r28	; 61
     856:	de bf       	out	0x3e, r29	; 62
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	08 95       	ret

00000862 <_GLOBAL__sub_I_timer>:

#include "CLaserControlApp.h"
#include "CSoundPlayer.h"
#include <util/delay.h>

CTimerC timer;
     862:	8e ee       	ldi	r24, 0xEE	; 238
     864:	90 e2       	ldi	r25, 0x20	; 32
     866:	0e 94 72 08 	call	0x10e4	; 0x10e4 <_ZN7CTimerCC1Ev>
     86a:	08 95       	ret

0000086c <_GLOBAL__sub_D_timer>:
     86c:	8e ee       	ldi	r24, 0xEE	; 238
     86e:	90 e2       	ldi	r25, 0x20	; 32
     870:	0e 94 7e 08 	call	0x10fc	; 0x10fc <_ZN7CTimerCD1Ev>
     874:	08 95       	ret

00000876 <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	ec 01       	movw	r28, r24
	// GUI class initialization
	m_cpSender = sender;
     87c:	6a 8f       	std	Y+26, r22	; 0x1a
     87e:	7b 8f       	std	Y+27, r23	; 0x1b
	timer.Initialize(WGM_Normal, CS_DIV256);
     880:	46 e0       	ldi	r20, 0x06	; 6
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	8e ee       	ldi	r24, 0xEE	; 238
     886:	90 e2       	ldi	r25, 0x20	; 32
     888:	0e 94 af 07 	call	0xf5e	; 0xf5e <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timer.SetPeriod(25000); // Every 10 ms
     88c:	68 ea       	ldi	r22, 0xA8	; 168
     88e:	71 e6       	ldi	r23, 0x61	; 97
     890:	8e ee       	ldi	r24, 0xEE	; 238
     892:	90 e2       	ldi	r25, 0x20	; 32
     894:	0e 94 ed 07 	call	0xfda	; 0xfda <_ZN7CTimerC9SetPeriodEj>
	timer.SetOVFCallback(OnTimerStatic, this, TC_OVFINTLVL_LO_gc); // Enable interrupt
     898:	21 e0       	ldi	r18, 0x01	; 1
     89a:	ae 01       	movw	r20, r28
     89c:	65 ed       	ldi	r22, 0xD5	; 213
     89e:	76 e0       	ldi	r23, 0x06	; 6
     8a0:	8e ee       	ldi	r24, 0xEE	; 238
     8a2:	90 e2       	ldi	r25, 0x20	; 32
     8a4:	0e 94 06 08 	call	0x100c	; 0x100c <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	
	// Set global variables
	PIC_ID = 0;
     8a8:	1d 86       	std	Y+13, r1	; 0x0d
	m_wSetMin = 1;
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	8c 8b       	std	Y+20, r24	; 0x14
     8b0:	9d 8b       	std	Y+21, r25	; 0x15
	m_wSetSec = 30;
     8b2:	8e e1       	ldi	r24, 0x1E	; 30
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	8e 8b       	std	Y+22, r24	; 0x16
     8b8:	9f 8b       	std	Y+23, r25	; 0x17
	m_wMillSec = 0;
     8ba:	1a 8a       	std	Y+18, r1	; 0x12
     8bc:	1b 8a       	std	Y+19, r1	; 0x13
	m_wMinutes = m_wSetMin;
     8be:	8c 89       	ldd	r24, Y+20	; 0x14
     8c0:	9d 89       	ldd	r25, Y+21	; 0x15
     8c2:	8e 87       	std	Y+14, r24	; 0x0e
     8c4:	9f 87       	std	Y+15, r25	; 0x0f
	m_wSeconds = m_wSetSec;
     8c6:	8e 89       	ldd	r24, Y+22	; 0x16
     8c8:	9f 89       	ldd	r25, Y+23	; 0x17
     8ca:	88 8b       	std	Y+16, r24	; 0x10
     8cc:	99 8b       	std	Y+17, r25	; 0x11
	m_wPower = 0;
     8ce:	18 8e       	std	Y+24, r1	; 0x18
     8d0:	19 8e       	std	Y+25, r1	; 0x19
}
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	08 95       	ret

000008d8 <_ZN16CLaserControlApp3RunEv>:
	state = APP_SETUP;
}

// Process GUI
void CLaserControlApp::Run()
{
     8d8:	0f 93       	push	r16
     8da:	1f 93       	push	r17
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	1f 92       	push	r1
     8e2:	1f 92       	push	r1
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	8c 01       	movw	r16, r24
	// Get PIC ID
	m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
     8ea:	42 e0       	ldi	r20, 0x02	; 2
     8ec:	63 e0       	ldi	r22, 0x03	; 3
     8ee:	fc 01       	movw	r30, r24
     8f0:	82 8d       	ldd	r24, Z+26	; 0x1a
     8f2:	93 8d       	ldd	r25, Z+27	; 0x1b
     8f4:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
	m_cpSender->WaitMODBUSTransmitter();
     8f8:	f8 01       	movw	r30, r16
     8fa:	82 8d       	ldd	r24, Z+26	; 0x1a
     8fc:	93 8d       	ldd	r25, Z+27	; 0x1b
     8fe:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WaitMODBUSListener();
     902:	f8 01       	movw	r30, r16
     904:	82 8d       	ldd	r24, Z+26	; 0x1a
     906:	93 8d       	ldd	r25, Z+27	; 0x1b
     908:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <_ZN9CMBSender18WaitMODBUSListenerEv>
     90c:	ff ef       	ldi	r31, 0xFF	; 255
     90e:	21 ee       	ldi	r18, 0xE1	; 225
     910:	84 e0       	ldi	r24, 0x04	; 4
     912:	f1 50       	subi	r31, 0x01	; 1
     914:	20 40       	sbci	r18, 0x00	; 0
     916:	80 40       	sbci	r24, 0x00	; 0
     918:	e1 f7       	brne	.-8      	; 0x912 <_ZN16CLaserControlApp3RunEv+0x3a>
     91a:	00 c0       	rjmp	.+0      	; 0x91c <_ZN16CLaserControlApp3RunEv+0x44>
     91c:	00 00       	nop
	static uint16_t bar = 0;
	uint16_t bar1 = 0;
	uint16_t bar2 = 0;
	uint16_t bar3 = 0;
	
	switch (state)
     91e:	f8 01       	movw	r30, r16
     920:	84 85       	ldd	r24, Z+12	; 0x0c
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	88 30       	cpi	r24, 0x08	; 8
     926:	91 05       	cpc	r25, r1
     928:	08 f0       	brcs	.+2      	; 0x92c <_ZN16CLaserControlApp3RunEv+0x54>
     92a:	b7 c1       	rjmp	.+878    	; 0xc9a <_ZN16CLaserControlApp3RunEv+0x3c2>
     92c:	fc 01       	movw	r30, r24
     92e:	88 27       	eor	r24, r24
     930:	e0 50       	subi	r30, 0x00	; 0
     932:	ff 4f       	sbci	r31, 0xFF	; 255
     934:	8f 4f       	sbci	r24, 0xFF	; 255
     936:	0c 94 5b 20 	jmp	0x40b6	; 0x40b6 <__tablejump2__>
	{
		case APP_LOGO:
			Start(); // Start if logo
     93a:	c8 01       	movw	r24, r16
     93c:	0e 94 88 03 	call	0x710	; 0x710 <_ZN16CLaserControlApp5StartEv>
		break;
     940:	ac c1       	rjmp	.+856    	; 0xc9a <_ZN16CLaserControlApp3RunEv+0x3c2>
		case APP_SETUP:
			// Get Variables
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_MIN, 2);
     942:	42 e0       	ldi	r20, 0x02	; 2
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	f8 01       	movw	r30, r16
     94a:	82 8d       	ldd	r24, Z+26	; 0x1a
     94c:	93 8d       	ldd	r25, Z+27	; 0x1b
     94e:	0e 94 02 20 	call	0x4004	; 0x4004 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
			m_cpSender->WaitMODBUSTransmitter();
     952:	f8 01       	movw	r30, r16
     954:	82 8d       	ldd	r24, Z+26	; 0x1a
     956:	93 8d       	ldd	r25, Z+27	; 0x1b
     958:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSListener();
     95c:	f8 01       	movw	r30, r16
     95e:	82 8d       	ldd	r24, Z+26	; 0x1a
     960:	93 8d       	ldd	r25, Z+27	; 0x1b
     962:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <_ZN9CMBSender18WaitMODBUSListenerEv>
     966:	ff ef       	ldi	r31, 0xFF	; 255
     968:	21 ee       	ldi	r18, 0xE1	; 225
     96a:	84 e0       	ldi	r24, 0x04	; 4
     96c:	f1 50       	subi	r31, 0x01	; 1
     96e:	20 40       	sbci	r18, 0x00	; 0
     970:	80 40       	sbci	r24, 0x00	; 0
     972:	e1 f7       	brne	.-8      	; 0x96c <_ZN16CLaserControlApp3RunEv+0x94>
     974:	00 c0       	rjmp	.+0      	; 0x976 <_ZN16CLaserControlApp3RunEv+0x9e>
     976:	00 00       	nop
			_delay_ms(50);
			
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_SEC, 2);
     978:	42 e0       	ldi	r20, 0x02	; 2
     97a:	60 e1       	ldi	r22, 0x10	; 16
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	f8 01       	movw	r30, r16
     980:	82 8d       	ldd	r24, Z+26	; 0x1a
     982:	93 8d       	ldd	r25, Z+27	; 0x1b
     984:	0e 94 02 20 	call	0x4004	; 0x4004 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
			m_cpSender->WaitMODBUSTransmitter();
     988:	f8 01       	movw	r30, r16
     98a:	82 8d       	ldd	r24, Z+26	; 0x1a
     98c:	93 8d       	ldd	r25, Z+27	; 0x1b
     98e:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSListener();
     992:	f8 01       	movw	r30, r16
     994:	82 8d       	ldd	r24, Z+26	; 0x1a
     996:	93 8d       	ldd	r25, Z+27	; 0x1b
     998:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <_ZN9CMBSender18WaitMODBUSListenerEv>
     99c:	ff ef       	ldi	r31, 0xFF	; 255
     99e:	21 ee       	ldi	r18, 0xE1	; 225
     9a0:	84 e0       	ldi	r24, 0x04	; 4
     9a2:	f1 50       	subi	r31, 0x01	; 1
     9a4:	20 40       	sbci	r18, 0x00	; 0
     9a6:	80 40       	sbci	r24, 0x00	; 0
     9a8:	e1 f7       	brne	.-8      	; 0x9a2 <_ZN16CLaserControlApp3RunEv+0xca>
     9aa:	00 c0       	rjmp	.+0      	; 0x9ac <_ZN16CLaserControlApp3RunEv+0xd4>
     9ac:	00 00       	nop
     9ae:	75 c1       	rjmp	.+746    	; 0xc9a <_ZN16CLaserControlApp3RunEv+0x3c2>
			_delay_ms(50);
		break;
		case APP_SETUPtoRUN_ANIM:
			// Play animation
			anim++;
     9b0:	80 91 47 20 	lds	r24, 0x2047
     9b4:	90 91 48 20 	lds	r25, 0x2048
     9b8:	01 96       	adiw	r24, 0x01	; 1
			if (anim > 9) {
     9ba:	8a 30       	cpi	r24, 0x0A	; 10
     9bc:	91 05       	cpc	r25, r1
     9be:	28 f4       	brcc	.+10     	; 0x9ca <_ZN16CLaserControlApp3RunEv+0xf2>
			m_cpSender->WaitMODBUSListener();
			_delay_ms(50);
		break;
		case APP_SETUPtoRUN_ANIM:
			// Play animation
			anim++;
     9c0:	80 93 47 20 	sts	0x2047, r24
     9c4:	90 93 48 20 	sts	0x2048, r25
     9c8:	09 c0       	rjmp	.+18     	; 0x9dc <_ZN16CLaserControlApp3RunEv+0x104>
			if (anim > 9) {
				anim = 9;
     9ca:	89 e0       	ldi	r24, 0x09	; 9
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	80 93 47 20 	sts	0x2047, r24
     9d2:	90 93 48 20 	sts	0x2048, r25
				state = APP_RUN;
     9d6:	83 e0       	ldi	r24, 0x03	; 3
     9d8:	f8 01       	movw	r30, r16
     9da:	84 87       	std	Z+12, r24	; 0x0c
extern CLaserBoard laserBoard;
extern CSoundPlayer player;

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
     9dc:	80 91 47 20 	lds	r24, 0x2047
     9e0:	90 91 48 20 	lds	r25, 0x2048
     9e4:	98 27       	eor	r25, r24
     9e6:	89 27       	eor	r24, r25
     9e8:	98 27       	eor	r25, r24
			anim++;
			if (anim > 9) {
				anim = 9;
				state = APP_RUN;
			}
			pic_id = swap(anim);
     9ea:	89 83       	std	Y+1, r24	; 0x01
     9ec:	9a 83       	std	Y+2, r25	; 0x02
			
			// Timer setup to timer run animation
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     9ee:	22 e0       	ldi	r18, 0x02	; 2
     9f0:	ae 01       	movw	r20, r28
     9f2:	4f 5f       	subi	r20, 0xFF	; 255
     9f4:	5f 4f       	sbci	r21, 0xFF	; 255
     9f6:	63 e0       	ldi	r22, 0x03	; 3
     9f8:	f8 01       	movw	r30, r16
     9fa:	82 8d       	ldd	r24, Z+26	; 0x1a
     9fc:	93 8d       	ldd	r25, Z+27	; 0x1b
     9fe:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     a02:	f8 01       	movw	r30, r16
     a04:	82 8d       	ldd	r24, Z+26	; 0x1a
     a06:	93 8d       	ldd	r25, Z+27	; 0x1b
     a08:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		break;
     a0c:	46 c1       	rjmp	.+652    	; 0xc9a <_ZN16CLaserControlApp3RunEv+0x3c2>
		case APP_RUN:
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MIN, (uint16_t*)&m_wMinutes, 2);
     a0e:	a8 01       	movw	r20, r16
     a10:	42 5f       	subi	r20, 0xF2	; 242
     a12:	5f 4f       	sbci	r21, 0xFF	; 255
     a14:	22 e0       	ldi	r18, 0x02	; 2
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	f8 01       	movw	r30, r16
     a1e:	82 8d       	ldd	r24, Z+26	; 0x1a
     a20:	93 8d       	ldd	r25, Z+27	; 0x1b
     a22:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     a26:	f8 01       	movw	r30, r16
     a28:	82 8d       	ldd	r24, Z+26	; 0x1a
     a2a:	93 8d       	ldd	r25, Z+27	; 0x1b
     a2c:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_SEC, (uint16_t*)&m_wSeconds, 2);
     a30:	a8 01       	movw	r20, r16
     a32:	40 5f       	subi	r20, 0xF0	; 240
     a34:	5f 4f       	sbci	r21, 0xFF	; 255
     a36:	22 e0       	ldi	r18, 0x02	; 2
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	60 e1       	ldi	r22, 0x10	; 16
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	f8 01       	movw	r30, r16
     a40:	82 8d       	ldd	r24, Z+26	; 0x1a
     a42:	93 8d       	ldd	r25, Z+27	; 0x1b
     a44:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     a48:	f8 01       	movw	r30, r16
     a4a:	82 8d       	ldd	r24, Z+26	; 0x1a
     a4c:	93 8d       	ldd	r25, Z+27	; 0x1b
     a4e:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MSC, (uint16_t*)&m_wMillSec, 2);
     a52:	a8 01       	movw	r20, r16
     a54:	4e 5e       	subi	r20, 0xEE	; 238
     a56:	5f 4f       	sbci	r21, 0xFF	; 255
     a58:	22 e0       	ldi	r18, 0x02	; 2
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	60 e2       	ldi	r22, 0x20	; 32
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	f8 01       	movw	r30, r16
     a62:	82 8d       	ldd	r24, Z+26	; 0x1a
     a64:	93 8d       	ldd	r25, Z+27	; 0x1b
     a66:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     a6a:	f8 01       	movw	r30, r16
     a6c:	82 8d       	ldd	r24, Z+26	; 0x1a
     a6e:	93 8d       	ldd	r25, Z+27	; 0x1b
     a70:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSTransmitter();
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR2, (uint16_t*)&bar2, 2);
			m_cpSender->WaitMODBUSTransmitter();
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR3, (uint16_t*)&bar3, 2);
			m_cpSender->WaitMODBUSTransmitter();*/
		break;
     a74:	12 c1       	rjmp	.+548    	; 0xc9a <_ZN16CLaserControlApp3RunEv+0x3c2>
		case APP_OnTimerStart:
			// Set Run state
			anim = 5;
     a76:	85 e0       	ldi	r24, 0x05	; 5
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	80 93 47 20 	sts	0x2047, r24
     a7e:	90 93 48 20 	sts	0x2048, r25
			pic_id = swap(PICID_TIMER);
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	99 e0       	ldi	r25, 0x09	; 9
     a86:	89 83       	std	Y+1, r24	; 0x01
     a88:	9a 83       	std	Y+2, r25	; 0x02
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     a8a:	22 e0       	ldi	r18, 0x02	; 2
     a8c:	ae 01       	movw	r20, r28
     a8e:	4f 5f       	subi	r20, 0xFF	; 255
     a90:	5f 4f       	sbci	r21, 0xFF	; 255
     a92:	63 e0       	ldi	r22, 0x03	; 3
     a94:	f8 01       	movw	r30, r16
     a96:	82 8d       	ldd	r24, Z+26	; 0x1a
     a98:	93 8d       	ldd	r25, Z+27	; 0x1b
     a9a:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     a9e:	f8 01       	movw	r30, r16
     aa0:	82 8d       	ldd	r24, Z+26	; 0x1a
     aa2:	93 8d       	ldd	r25, Z+27	; 0x1b
     aa4:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			m_wMinutes = m_wSetMin;
     aa8:	f8 01       	movw	r30, r16
     aaa:	84 89       	ldd	r24, Z+20	; 0x14
     aac:	95 89       	ldd	r25, Z+21	; 0x15
     aae:	86 87       	std	Z+14, r24	; 0x0e
     ab0:	97 87       	std	Z+15, r25	; 0x0f
			m_wSeconds = m_wSetSec;
     ab2:	86 89       	ldd	r24, Z+22	; 0x16
     ab4:	97 89       	ldd	r25, Z+23	; 0x17
     ab6:	80 8b       	std	Z+16, r24	; 0x10
     ab8:	91 8b       	std	Z+17, r25	; 0x11
			m_wMillSec = 0;
     aba:	12 8a       	std	Z+18, r1	; 0x12
     abc:	13 8a       	std	Z+19, r1	; 0x13
			
			// Start timer
			timer.Start(25000);
     abe:	68 ea       	ldi	r22, 0xA8	; 168
     ac0:	71 e6       	ldi	r23, 0x61	; 97
     ac2:	8e ee       	ldi	r24, 0xEE	; 238
     ac4:	90 e2       	ldi	r25, 0x20	; 32
     ac6:	0e 94 ca 07 	call	0xf94	; 0xf94 <_ZN7CTimerC5StartEj>
			laserBoard.Relay1On();
     aca:	8c ef       	ldi	r24, 0xFC	; 252
     acc:	92 e2       	ldi	r25, 0x22	; 34
     ace:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN11CLaserBoard8Relay1OnEv>
			
			state = APP_RUN;
     ad2:	83 e0       	ldi	r24, 0x03	; 3
     ad4:	f8 01       	movw	r30, r16
     ad6:	84 87       	std	Z+12, r24	; 0x0c
		break;
     ad8:	e0 c0       	rjmp	.+448    	; 0xc9a <_ZN16CLaserControlApp3RunEv+0x3c2>
		case APP_OnTimerStop:
			// Set Stop (return to Setup) state
			pic_id = swap(PICID_SETUP);
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	91 e0       	ldi	r25, 0x01	; 1
     ade:	89 83       	std	Y+1, r24	; 0x01
     ae0:	9a 83       	std	Y+2, r25	; 0x02
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     ae2:	22 e0       	ldi	r18, 0x02	; 2
     ae4:	ae 01       	movw	r20, r28
     ae6:	4f 5f       	subi	r20, 0xFF	; 255
     ae8:	5f 4f       	sbci	r21, 0xFF	; 255
     aea:	63 e0       	ldi	r22, 0x03	; 3
     aec:	f8 01       	movw	r30, r16
     aee:	82 8d       	ldd	r24, Z+26	; 0x1a
     af0:	93 8d       	ldd	r25, Z+27	; 0x1b
     af2:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     af6:	f8 01       	movw	r30, r16
     af8:	82 8d       	ldd	r24, Z+26	; 0x1a
     afa:	93 8d       	ldd	r25, Z+27	; 0x1b
     afc:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			// Stop timer
			timer.Stop();
     b00:	8e ee       	ldi	r24, 0xEE	; 238
     b02:	90 e2       	ldi	r25, 0x20	; 32
     b04:	0e 94 d7 07 	call	0xfae	; 0xfae <_ZN7CTimerC4StopEv>
			laserBoard.Relay1Off();
     b08:	8c ef       	ldi	r24, 0xFC	; 252
     b0a:	92 e2       	ldi	r25, 0x22	; 34
     b0c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <_ZN11CLaserBoard9Relay1OffEv>
			
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MIN, (uint16_t*)&m_wSetMin, 2);
     b10:	a8 01       	movw	r20, r16
     b12:	4c 5e       	subi	r20, 0xEC	; 236
     b14:	5f 4f       	sbci	r21, 0xFF	; 255
     b16:	22 e0       	ldi	r18, 0x02	; 2
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	f8 01       	movw	r30, r16
     b20:	82 8d       	ldd	r24, Z+26	; 0x1a
     b22:	93 8d       	ldd	r25, Z+27	; 0x1b
     b24:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     b28:	f8 01       	movw	r30, r16
     b2a:	82 8d       	ldd	r24, Z+26	; 0x1a
     b2c:	93 8d       	ldd	r25, Z+27	; 0x1b
     b2e:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_SEC, (uint16_t*)&m_wSetSec, 2);
     b32:	a8 01       	movw	r20, r16
     b34:	4a 5e       	subi	r20, 0xEA	; 234
     b36:	5f 4f       	sbci	r21, 0xFF	; 255
     b38:	22 e0       	ldi	r18, 0x02	; 2
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	60 e1       	ldi	r22, 0x10	; 16
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	f8 01       	movw	r30, r16
     b42:	82 8d       	ldd	r24, Z+26	; 0x1a
     b44:	93 8d       	ldd	r25, Z+27	; 0x1b
     b46:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     b4a:	f8 01       	movw	r30, r16
     b4c:	82 8d       	ldd	r24, Z+26	; 0x1a
     b4e:	93 8d       	ldd	r25, Z+27	; 0x1b
     b50:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MSC, (uint16_t*)&m_wMillSec, 2);
     b54:	a8 01       	movw	r20, r16
     b56:	4e 5e       	subi	r20, 0xEE	; 238
     b58:	5f 4f       	sbci	r21, 0xFF	; 255
     b5a:	22 e0       	ldi	r18, 0x02	; 2
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	60 e2       	ldi	r22, 0x20	; 32
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	f8 01       	movw	r30, r16
     b64:	82 8d       	ldd	r24, Z+26	; 0x1a
     b66:	93 8d       	ldd	r25, Z+27	; 0x1b
     b68:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     b6c:	f8 01       	movw	r30, r16
     b6e:	82 8d       	ldd	r24, Z+26	; 0x1a
     b70:	93 8d       	ldd	r25, Z+27	; 0x1b
     b72:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			m_wMinutes = m_wSetMin;
     b76:	f8 01       	movw	r30, r16
     b78:	84 89       	ldd	r24, Z+20	; 0x14
     b7a:	95 89       	ldd	r25, Z+21	; 0x15
     b7c:	86 87       	std	Z+14, r24	; 0x0e
     b7e:	97 87       	std	Z+15, r25	; 0x0f
			m_wSeconds = m_wSetSec;
     b80:	86 89       	ldd	r24, Z+22	; 0x16
     b82:	97 89       	ldd	r25, Z+23	; 0x17
     b84:	80 8b       	std	Z+16, r24	; 0x10
     b86:	91 8b       	std	Z+17, r25	; 0x11
			m_wMillSec = 0;
     b88:	12 8a       	std	Z+18, r1	; 0x12
     b8a:	13 8a       	std	Z+19, r1	; 0x13
			
			state = APP_SETUP;
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	84 87       	std	Z+12, r24	; 0x0c
		break;
     b90:	84 c0       	rjmp	.+264    	; 0xc9a <_ZN16CLaserControlApp3RunEv+0x3c2>
		case APP_OnTimerRestart:
			// Restart (return to Run) state
			pic_id = swap(PICID_TIMER);
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	99 e0       	ldi	r25, 0x09	; 9
     b96:	89 83       	std	Y+1, r24	; 0x01
     b98:	9a 83       	std	Y+2, r25	; 0x02
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     b9a:	22 e0       	ldi	r18, 0x02	; 2
     b9c:	ae 01       	movw	r20, r28
     b9e:	4f 5f       	subi	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	63 e0       	ldi	r22, 0x03	; 3
     ba4:	f8 01       	movw	r30, r16
     ba6:	82 8d       	ldd	r24, Z+26	; 0x1a
     ba8:	93 8d       	ldd	r25, Z+27	; 0x1b
     baa:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     bae:	f8 01       	movw	r30, r16
     bb0:	82 8d       	ldd	r24, Z+26	; 0x1a
     bb2:	93 8d       	ldd	r25, Z+27	; 0x1b
     bb4:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			// Reset
			m_wMinutes = m_wSetMin;
     bb8:	f8 01       	movw	r30, r16
     bba:	84 89       	ldd	r24, Z+20	; 0x14
     bbc:	95 89       	ldd	r25, Z+21	; 0x15
     bbe:	86 87       	std	Z+14, r24	; 0x0e
     bc0:	97 87       	std	Z+15, r25	; 0x0f
			m_wSeconds = m_wSetSec;
     bc2:	86 89       	ldd	r24, Z+22	; 0x16
     bc4:	97 89       	ldd	r25, Z+23	; 0x17
     bc6:	80 8b       	std	Z+16, r24	; 0x10
     bc8:	91 8b       	std	Z+17, r25	; 0x11
			m_wMillSec = 0;
     bca:	12 8a       	std	Z+18, r1	; 0x12
     bcc:	13 8a       	std	Z+19, r1	; 0x13
			
			timer.Stop();
     bce:	8e ee       	ldi	r24, 0xEE	; 238
     bd0:	90 e2       	ldi	r25, 0x20	; 32
     bd2:	0e 94 d7 07 	call	0xfae	; 0xfae <_ZN7CTimerC4StopEv>
			
			player.SoundStart(1000, 50, 1);
     bd6:	21 e0       	ldi	r18, 0x01	; 1
     bd8:	42 e3       	ldi	r20, 0x32	; 50
     bda:	50 e0       	ldi	r21, 0x00	; 0
     bdc:	68 ee       	ldi	r22, 0xE8	; 232
     bde:	73 e0       	ldi	r23, 0x03	; 3
     be0:	8b ef       	ldi	r24, 0xFB	; 251
     be2:	92 e2       	ldi	r25, 0x22	; 34
     be4:	0e 94 f7 06 	call	0xdee	; 0xdee <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
     be8:	8b ef       	ldi	r24, 0xFB	; 251
     bea:	92 e2       	ldi	r25, 0x22	; 34
     bec:	0e 94 2b 07 	call	0xe56	; 0xe56 <_ZN12CSoundPlayer9SoundStopEv>
     bf0:	ff ef       	ldi	r31, 0xFF	; 255
     bf2:	21 ee       	ldi	r18, 0xE1	; 225
     bf4:	84 e0       	ldi	r24, 0x04	; 4
     bf6:	f1 50       	subi	r31, 0x01	; 1
     bf8:	20 40       	sbci	r18, 0x00	; 0
     bfa:	80 40       	sbci	r24, 0x00	; 0
     bfc:	e1 f7       	brne	.-8      	; 0xbf6 <_ZN16CLaserControlApp3RunEv+0x31e>
     bfe:	00 c0       	rjmp	.+0      	; 0xc00 <_ZN16CLaserControlApp3RunEv+0x328>
     c00:	00 00       	nop
			_delay_ms(50);
			player.SoundStart(1000, 50, 1);
     c02:	21 e0       	ldi	r18, 0x01	; 1
     c04:	42 e3       	ldi	r20, 0x32	; 50
     c06:	50 e0       	ldi	r21, 0x00	; 0
     c08:	68 ee       	ldi	r22, 0xE8	; 232
     c0a:	73 e0       	ldi	r23, 0x03	; 3
     c0c:	8b ef       	ldi	r24, 0xFB	; 251
     c0e:	92 e2       	ldi	r25, 0x22	; 34
     c10:	0e 94 f7 06 	call	0xdee	; 0xdee <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
     c14:	8b ef       	ldi	r24, 0xFB	; 251
     c16:	92 e2       	ldi	r25, 0x22	; 34
     c18:	0e 94 2b 07 	call	0xe56	; 0xe56 <_ZN12CSoundPlayer9SoundStopEv>
     c1c:	9f ef       	ldi	r25, 0xFF	; 255
     c1e:	e1 ee       	ldi	r30, 0xE1	; 225
     c20:	f4 e0       	ldi	r31, 0x04	; 4
     c22:	91 50       	subi	r25, 0x01	; 1
     c24:	e0 40       	sbci	r30, 0x00	; 0
     c26:	f0 40       	sbci	r31, 0x00	; 0
     c28:	e1 f7       	brne	.-8      	; 0xc22 <_ZN16CLaserControlApp3RunEv+0x34a>
     c2a:	00 c0       	rjmp	.+0      	; 0xc2c <_ZN16CLaserControlApp3RunEv+0x354>
     c2c:	00 00       	nop
			_delay_ms(50);
			
			// Stop timer
			timer.Start(25000);
     c2e:	68 ea       	ldi	r22, 0xA8	; 168
     c30:	71 e6       	ldi	r23, 0x61	; 97
     c32:	8e ee       	ldi	r24, 0xEE	; 238
     c34:	90 e2       	ldi	r25, 0x20	; 32
     c36:	0e 94 ca 07 	call	0xf94	; 0xf94 <_ZN7CTimerC5StartEj>
			laserBoard.Relay1On();
     c3a:	8c ef       	ldi	r24, 0xFC	; 252
     c3c:	92 e2       	ldi	r25, 0x22	; 34
     c3e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN11CLaserBoard8Relay1OnEv>
			
			state = APP_RUN;
     c42:	83 e0       	ldi	r24, 0x03	; 3
     c44:	f8 01       	movw	r30, r16
     c46:	84 87       	std	Z+12, r24	; 0x0c
		break;
     c48:	28 c0       	rjmp	.+80     	; 0xc9a <_ZN16CLaserControlApp3RunEv+0x3c2>
		case APP_OnHL:
			// Turn HL (return to Setup) state
			pic_id = swap(PICID_SETUP);
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	89 83       	std	Y+1, r24	; 0x01
     c50:	9a 83       	std	Y+2, r25	; 0x02
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     c52:	22 e0       	ldi	r18, 0x02	; 2
     c54:	ae 01       	movw	r20, r28
     c56:	4f 5f       	subi	r20, 0xFF	; 255
     c58:	5f 4f       	sbci	r21, 0xFF	; 255
     c5a:	63 e0       	ldi	r22, 0x03	; 3
     c5c:	f8 01       	movw	r30, r16
     c5e:	82 8d       	ldd	r24, Z+26	; 0x1a
     c60:	93 8d       	ldd	r25, Z+27	; 0x1b
     c62:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     c66:	f8 01       	movw	r30, r16
     c68:	82 8d       	ldd	r24, Z+26	; 0x1a
     c6a:	93 8d       	ldd	r25, Z+27	; 0x1b
     c6c:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			static bool hl = true;
			
			if (hl)
     c70:	80 91 46 20 	lds	r24, 0x2046
     c74:	88 23       	and	r24, r24
     c76:	29 f0       	breq	.+10     	; 0xc82 <_ZN16CLaserControlApp3RunEv+0x3aa>
				laserBoard.Relay2On();
     c78:	8c ef       	ldi	r24, 0xFC	; 252
     c7a:	92 e2       	ldi	r25, 0x22	; 34
     c7c:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_ZN11CLaserBoard8Relay2OnEv>
     c80:	04 c0       	rjmp	.+8      	; 0xc8a <_ZN16CLaserControlApp3RunEv+0x3b2>
			else
				laserBoard.Relay2Off();
     c82:	8c ef       	ldi	r24, 0xFC	; 252
     c84:	92 e2       	ldi	r25, 0x22	; 34
     c86:	0e 94 df 02 	call	0x5be	; 0x5be <_ZN11CLaserBoard9Relay2OffEv>
				
			hl = !hl;
     c8a:	80 91 46 20 	lds	r24, 0x2046
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	89 27       	eor	r24, r25
     c92:	80 93 46 20 	sts	0x2046, r24
			
			state = APP_SETUP;
     c96:	f8 01       	movw	r30, r16
     c98:	94 87       	std	Z+12, r25	; 0x0c
		break;
	}
}
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	08 95       	ret

00000ca8 <_ZN16CLaserControlApp9OnTimeoutEv>:
	m_wMillSec-=10;
}

void CLaserControlApp::OnTimeout()
{
	timer.Stop();
     ca8:	8e ee       	ldi	r24, 0xEE	; 238
     caa:	90 e2       	ldi	r25, 0x20	; 32
     cac:	0e 94 d7 07 	call	0xfae	; 0xfae <_ZN7CTimerC4StopEv>
	laserBoard.Relay1Off();
     cb0:	8c ef       	ldi	r24, 0xFC	; 252
     cb2:	92 e2       	ldi	r25, 0x22	; 34
     cb4:	0e 94 db 02 	call	0x5b6	; 0x5b6 <_ZN11CLaserBoard9Relay1OffEv>
     cb8:	08 95       	ret

00000cba <_ZN16CLaserControlApp7OnTimerEv>:
		break;
	}
}

void CLaserControlApp::OnTimer()
{
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	ec 01       	movw	r28, r24
	if (m_wMillSec == 0)
     cc0:	8a 89       	ldd	r24, Y+18	; 0x12
     cc2:	9b 89       	ldd	r25, Y+19	; 0x13
     cc4:	89 2b       	or	r24, r25
     cc6:	c9 f5       	brne	.+114    	; 0xd3a <_ZN16CLaserControlApp7OnTimerEv+0x80>
	{
		if (m_wSeconds == 0)
     cc8:	88 89       	ldd	r24, Y+16	; 0x10
     cca:	99 89       	ldd	r25, Y+17	; 0x11
     ccc:	89 2b       	or	r24, r25
     cce:	f1 f4       	brne	.+60     	; 0xd0c <_ZN16CLaserControlApp7OnTimerEv+0x52>
		{
			if (m_wMinutes == 0)
     cd0:	8e 85       	ldd	r24, Y+14	; 0x0e
     cd2:	9f 85       	ldd	r25, Y+15	; 0x0f
     cd4:	89 2b       	or	r24, r25
     cd6:	89 f4       	brne	.+34     	; 0xcfa <_ZN16CLaserControlApp7OnTimerEv+0x40>
			{
				OnTimeout();
     cd8:	ce 01       	movw	r24, r28
     cda:	0e 94 54 06 	call	0xca8	; 0xca8 <_ZN16CLaserControlApp9OnTimeoutEv>
				player.SoundStart(1000, 1000, 0);
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	48 ee       	ldi	r20, 0xE8	; 232
     ce2:	53 e0       	ldi	r21, 0x03	; 3
     ce4:	68 ee       	ldi	r22, 0xE8	; 232
     ce6:	73 e0       	ldi	r23, 0x03	; 3
     ce8:	8b ef       	ldi	r24, 0xFB	; 251
     cea:	92 e2       	ldi	r25, 0x22	; 34
     cec:	0e 94 f7 06 	call	0xdee	; 0xdee <_ZN12CSoundPlayer10SoundStartEjjh>
				player.SoundStop();
     cf0:	8b ef       	ldi	r24, 0xFB	; 251
     cf2:	92 e2       	ldi	r25, 0x22	; 34
     cf4:	0e 94 2b 07 	call	0xe56	; 0xe56 <_ZN12CSoundPlayer9SoundStopEv>
				//player.beep(1000, 1000);
				return;
     cf8:	55 c0       	rjmp	.+170    	; 0xda4 <_ZN16CLaserControlApp7OnTimerEv+0xea>
			}
			m_wSeconds = 60;
     cfa:	8c e3       	ldi	r24, 0x3C	; 60
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	88 8b       	std	Y+16, r24	; 0x10
     d00:	99 8b       	std	Y+17, r25	; 0x11
			m_wMinutes--;
     d02:	8e 85       	ldd	r24, Y+14	; 0x0e
     d04:	9f 85       	ldd	r25, Y+15	; 0x0f
     d06:	01 97       	sbiw	r24, 0x01	; 1
     d08:	8e 87       	std	Y+14, r24	; 0x0e
     d0a:	9f 87       	std	Y+15, r25	; 0x0f
		}
		m_wMillSec = 100; // Every 10 ms
     d0c:	84 e6       	ldi	r24, 0x64	; 100
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	8a 8b       	std	Y+18, r24	; 0x12
     d12:	9b 8b       	std	Y+19, r25	; 0x13
		m_wSeconds--;
     d14:	88 89       	ldd	r24, Y+16	; 0x10
     d16:	99 89       	ldd	r25, Y+17	; 0x11
     d18:	01 97       	sbiw	r24, 0x01	; 1
     d1a:	88 8b       	std	Y+16, r24	; 0x10
     d1c:	99 8b       	std	Y+17, r25	; 0x11
		if (m_wMinutes == 0 && m_wSeconds < 10)
     d1e:	8e 85       	ldd	r24, Y+14	; 0x0e
     d20:	9f 85       	ldd	r25, Y+15	; 0x0f
     d22:	89 2b       	or	r24, r25
     d24:	81 f4       	brne	.+32     	; 0xd46 <_ZN16CLaserControlApp7OnTimerEv+0x8c>
     d26:	88 89       	ldd	r24, Y+16	; 0x10
     d28:	99 89       	ldd	r25, Y+17	; 0x11
     d2a:	0a 97       	sbiw	r24, 0x0a	; 10
     d2c:	d0 f0       	brcs	.+52     	; 0xd62 <_ZN16CLaserControlApp7OnTimerEv+0xa8>
     d2e:	0b c0       	rjmp	.+22     	; 0xd46 <_ZN16CLaserControlApp7OnTimerEv+0x8c>
		{
			if (m_wMinutes == 0 && m_wSeconds < 5)
     d30:	88 89       	ldd	r24, Y+16	; 0x10
     d32:	99 89       	ldd	r25, Y+17	; 0x11
     d34:	05 97       	sbiw	r24, 0x05	; 5
     d36:	d0 f0       	brcs	.+52     	; 0xd6c <_ZN16CLaserControlApp7OnTimerEv+0xb2>
     d38:	27 c0       	rjmp	.+78     	; 0xd88 <_ZN16CLaserControlApp7OnTimerEv+0xce>
			player.SoundStart(1000, 25, 2);
			player.SoundStop();
			//player.beep(1000, 25);
		}
	}
	m_wMillSec-=10;
     d3a:	8a 89       	ldd	r24, Y+18	; 0x12
     d3c:	9b 89       	ldd	r25, Y+19	; 0x13
     d3e:	0a 97       	sbiw	r24, 0x0a	; 10
     d40:	8a 8b       	std	Y+18, r24	; 0x12
     d42:	9b 8b       	std	Y+19, r25	; 0x13
     d44:	2f c0       	rjmp	.+94     	; 0xda4 <_ZN16CLaserControlApp7OnTimerEv+0xea>
				//player.beep(1000, 50);
			}
		}
		else
		{
			player.SoundStart(1000, 25, 2);
     d46:	22 e0       	ldi	r18, 0x02	; 2
     d48:	49 e1       	ldi	r20, 0x19	; 25
     d4a:	50 e0       	ldi	r21, 0x00	; 0
     d4c:	68 ee       	ldi	r22, 0xE8	; 232
     d4e:	73 e0       	ldi	r23, 0x03	; 3
     d50:	8b ef       	ldi	r24, 0xFB	; 251
     d52:	92 e2       	ldi	r25, 0x22	; 34
     d54:	0e 94 f7 06 	call	0xdee	; 0xdee <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
     d58:	8b ef       	ldi	r24, 0xFB	; 251
     d5a:	92 e2       	ldi	r25, 0x22	; 34
     d5c:	0e 94 2b 07 	call	0xe56	; 0xe56 <_ZN12CSoundPlayer9SoundStopEv>
     d60:	ec cf       	rjmp	.-40     	; 0xd3a <_ZN16CLaserControlApp7OnTimerEv+0x80>
		}
		m_wMillSec = 100; // Every 10 ms
		m_wSeconds--;
		if (m_wMinutes == 0 && m_wSeconds < 10)
		{
			if (m_wMinutes == 0 && m_wSeconds < 5)
     d62:	8e 85       	ldd	r24, Y+14	; 0x0e
     d64:	9f 85       	ldd	r25, Y+15	; 0x0f
     d66:	89 2b       	or	r24, r25
     d68:	19 f3       	breq	.-58     	; 0xd30 <_ZN16CLaserControlApp7OnTimerEv+0x76>
     d6a:	0e c0       	rjmp	.+28     	; 0xd88 <_ZN16CLaserControlApp7OnTimerEv+0xce>
			{
				player.SoundStart(1000, 100, 0);
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	44 e6       	ldi	r20, 0x64	; 100
     d70:	50 e0       	ldi	r21, 0x00	; 0
     d72:	68 ee       	ldi	r22, 0xE8	; 232
     d74:	73 e0       	ldi	r23, 0x03	; 3
     d76:	8b ef       	ldi	r24, 0xFB	; 251
     d78:	92 e2       	ldi	r25, 0x22	; 34
     d7a:	0e 94 f7 06 	call	0xdee	; 0xdee <_ZN12CSoundPlayer10SoundStartEjjh>
				player.SoundStop();
     d7e:	8b ef       	ldi	r24, 0xFB	; 251
     d80:	92 e2       	ldi	r25, 0x22	; 34
     d82:	0e 94 2b 07 	call	0xe56	; 0xe56 <_ZN12CSoundPlayer9SoundStopEv>
     d86:	d9 cf       	rjmp	.-78     	; 0xd3a <_ZN16CLaserControlApp7OnTimerEv+0x80>
				//player.beep(1000, 100);
			}
			else
			{
				player.SoundStart(1000, 50, 1);
     d88:	21 e0       	ldi	r18, 0x01	; 1
     d8a:	42 e3       	ldi	r20, 0x32	; 50
     d8c:	50 e0       	ldi	r21, 0x00	; 0
     d8e:	68 ee       	ldi	r22, 0xE8	; 232
     d90:	73 e0       	ldi	r23, 0x03	; 3
     d92:	8b ef       	ldi	r24, 0xFB	; 251
     d94:	92 e2       	ldi	r25, 0x22	; 34
     d96:	0e 94 f7 06 	call	0xdee	; 0xdee <_ZN12CSoundPlayer10SoundStartEjjh>
				player.SoundStop();
     d9a:	8b ef       	ldi	r24, 0xFB	; 251
     d9c:	92 e2       	ldi	r25, 0x22	; 34
     d9e:	0e 94 2b 07 	call	0xe56	; 0xe56 <_ZN12CSoundPlayer9SoundStopEv>
     da2:	cb cf       	rjmp	.-106    	; 0xd3a <_ZN16CLaserControlApp7OnTimerEv+0x80>
			player.SoundStop();
			//player.beep(1000, 25);
		}
	}
	m_wMillSec-=10;
}
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	08 95       	ret

00000daa <_ZN16CLaserControlApp13OnTimerStaticEPv>:
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnTimer();
     daa:	0e 94 5d 06 	call	0xcba	; 0xcba <_ZN16CLaserControlApp7OnTimerEv>
     dae:	08 95       	ret

00000db0 <_ZN12CSoundPlayerC1Ev>:
	SoundStart(note, duration, 3);
	SoundStop();
}

// default constructor
CSoundPlayer::CSoundPlayer()
     db0:	08 95       	ret

00000db2 <_ZN12CSoundPlayerD1Ev>:
{
} //CSoundPlayer

// default destructor
CSoundPlayer::~CSoundPlayer()
     db2:	08 95       	ret

00000db4 <_ZN12CSoundPlayer19InitializeToneTimerEv>:
} //~CSoundPlayer

void CSoundPlayer::InitializeToneTimer()
{
	// Start timer 4MHz tick rate
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;
     db4:	e0 e0       	ldi	r30, 0x00	; 0
     db6:	fa e0       	ldi	r31, 0x0A	; 10
     db8:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE0.CTRLB = TC0_CCDEN_bm | TC_WGMODE_DS_B_gc;
     dba:	87 e8       	ldi	r24, 0x87	; 135
     dbc:	81 83       	std	Z+1, r24	; 0x01
	
	// No events
	TCE0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
     dbe:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1.000 Hz PWM
	TCE0.PER = PERIOD_1Hz;
     dc0:	84 e2       	ldi	r24, 0x24	; 36
     dc2:	94 ef       	ldi	r25, 0xF4	; 244
     dc4:	86 a3       	std	Z+38, r24	; 0x26
     dc6:	97 a3       	std	Z+39, r25	; 0x27
	
	// Set 50% duty cycle
	TCE0.CCD =  MAXVOLUME_CC;
     dc8:	82 e1       	ldi	r24, 0x12	; 18
     dca:	9a e7       	ldi	r25, 0x7A	; 122
     dcc:	86 a7       	std	Z+46, r24	; 0x2e
     dce:	97 a7       	std	Z+47, r25	; 0x2f
	
	// Disable interrupt
	TCE0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
     dd0:	16 82       	std	Z+6, r1	; 0x06
	TCE0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
     dd2:	17 82       	std	Z+7, r1	; 0x07
     dd4:	08 95       	ret

00000dd6 <_ZN12CSoundPlayer23InitializeDurationTimerEv>:

void CSoundPlayer::InitializeDurationTimer()
{
	// Start timer 4MHz tick rate
	//TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;
     dd6:	e0 e4       	ldi	r30, 0x40	; 64
     dd8:	fa e0       	ldi	r31, 0x0A	; 10
     dda:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE1.CTRLB = TC_WGMODE_NORMAL_gc;
     ddc:	11 82       	std	Z+1, r1	; 0x01
	
	// No events
	TCE1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
     dde:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1s
	TCE1.PER = DELAYPERIOD_1s;
     de0:	84 e2       	ldi	r24, 0x24	; 36
     de2:	94 ef       	ldi	r25, 0xF4	; 244
     de4:	86 a3       	std	Z+38, r24	; 0x26
     de6:	97 a3       	std	Z+39, r25	; 0x27
	
	// Disable interrupt
	TCE1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
     de8:	16 82       	std	Z+6, r1	; 0x06
	TCE1.INTCTRLB = TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
     dea:	17 82       	std	Z+7, r1	; 0x07
     dec:	08 95       	ret

00000dee <_ZN12CSoundPlayer10SoundStartEjjh>:
}

void CSoundPlayer::SoundStart(uint16_t freq, uint16_t time, uint8_t volume)
{
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	cf 93       	push	r28
     df4:	8a 01       	movw	r16, r20
     df6:	c2 2f       	mov	r28, r18
	uint16_t period_tc0 = PERIOD_1Hz/freq;
     df8:	9b 01       	movw	r18, r22
     dfa:	40 e0       	ldi	r20, 0x00	; 0
     dfc:	50 e0       	ldi	r21, 0x00	; 0
     dfe:	64 e2       	ldi	r22, 0x24	; 36
     e00:	74 ef       	ldi	r23, 0xF4	; 244
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 3c 20 	call	0x4078	; 0x4078 <__divmodsi4>
	uint16_t period_tc1 = DELAYPERIOD_A1s * time + (time >> DELAYPERIOD_S1s);
     e0a:	b8 01       	movw	r22, r16
     e0c:	76 95       	lsr	r23
     e0e:	67 95       	ror	r22
     e10:	ee e3       	ldi	r30, 0x3E	; 62
     e12:	e0 9f       	mul	r30, r16
     e14:	c0 01       	movw	r24, r0
     e16:	e1 9f       	mul	r30, r17
     e18:	90 0d       	add	r25, r0
     e1a:	11 24       	eor	r1, r1
     e1c:	86 0f       	add	r24, r22
     e1e:	97 1f       	adc	r25, r23
	
	// Config
	TCE0.CCD = period_tc0 >> (volume + 1);
     e20:	cf 5f       	subi	r28, 0xFF	; 255
     e22:	b9 01       	movw	r22, r18
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <_ZN12CSoundPlayer10SoundStartEjjh+0x3c>
     e26:	76 95       	lsr	r23
     e28:	67 95       	ror	r22
     e2a:	ca 95       	dec	r28
     e2c:	e2 f7       	brpl	.-8      	; 0xe26 <_ZN12CSoundPlayer10SoundStartEjjh+0x38>
     e2e:	e0 e0       	ldi	r30, 0x00	; 0
     e30:	fa e0       	ldi	r31, 0x0A	; 10
     e32:	66 a7       	std	Z+46, r22	; 0x2e
     e34:	77 a7       	std	Z+47, r23	; 0x2f
	TCE0.PER = period_tc0;
     e36:	26 a3       	std	Z+38, r18	; 0x26
     e38:	37 a3       	std	Z+39, r19	; 0x27
	TCE1.PER = period_tc1;
     e3a:	a0 e4       	ldi	r26, 0x40	; 64
     e3c:	ba e0       	ldi	r27, 0x0A	; 10
     e3e:	96 96       	adiw	r26, 0x26	; 38
     e40:	8d 93       	st	X+, r24
     e42:	9c 93       	st	X, r25
     e44:	97 97       	sbiw	r26, 0x27	; 39
	
	//Start timer
	TCE0.CTRLA = TC_CLKSEL_DIV256_gc;	//Start tone timer
     e46:	86 e0       	ldi	r24, 0x06	; 6
     e48:	80 83       	st	Z, r24
	TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;	//Start duration timer
     e4a:	87 e0       	ldi	r24, 0x07	; 7
     e4c:	8c 93       	st	X, r24
}
     e4e:	cf 91       	pop	r28
     e50:	1f 91       	pop	r17
     e52:	0f 91       	pop	r16
     e54:	08 95       	ret

00000e56 <_ZN12CSoundPlayer9SoundStopEv>:

void CSoundPlayer::SoundStop()
{
	while (!(TCE1.INTFLAGS & TC0_OVFIF_bm));
     e56:	e0 e4       	ldi	r30, 0x40	; 64
     e58:	fa e0       	ldi	r31, 0x0A	; 10
     e5a:	84 85       	ldd	r24, Z+12	; 0x0c
     e5c:	80 ff       	sbrs	r24, 0
     e5e:	fd cf       	rjmp	.-6      	; 0xe5a <_ZN12CSoundPlayer9SoundStopEv+0x4>
	TCE1.INTFLAGS &= TC0_OVFIF_bm;
     e60:	e0 e4       	ldi	r30, 0x40	; 64
     e62:	fa e0       	ldi	r31, 0x0A	; 10
     e64:	84 85       	ldd	r24, Z+12	; 0x0c
     e66:	81 70       	andi	r24, 0x01	; 1
     e68:	84 87       	std	Z+12, r24	; 0x0c

	//Stop timer
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;		//Stop tone timer
     e6a:	a0 e0       	ldi	r26, 0x00	; 0
     e6c:	ba e0       	ldi	r27, 0x0A	; 10
     e6e:	1c 92       	st	X, r1
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;		//Stop duration timer
     e70:	10 82       	st	Z, r1

	// Reset duration timer
	TCE1.CNT = 0;
     e72:	10 a2       	std	Z+32, r1	; 0x20
     e74:	11 a2       	std	Z+33, r1	; 0x21
	TCE0.CNT = 0;
     e76:	90 96       	adiw	r26, 0x20	; 32
     e78:	1d 92       	st	X+, r1
     e7a:	1c 92       	st	X, r1
     e7c:	91 97       	sbiw	r26, 0x21	; 33
     e7e:	2f ef       	ldi	r18, 0xFF	; 255
     e80:	83 ef       	ldi	r24, 0xF3	; 243
     e82:	91 e0       	ldi	r25, 0x01	; 1
     e84:	21 50       	subi	r18, 0x01	; 1
     e86:	80 40       	sbci	r24, 0x00	; 0
     e88:	90 40       	sbci	r25, 0x00	; 0
     e8a:	e1 f7       	brne	.-8      	; 0xe84 <_ZN12CSoundPlayer9SoundStopEv+0x2e>
     e8c:	00 c0       	rjmp	.+0      	; 0xe8e <_ZN12CSoundPlayer9SoundStopEv+0x38>
     e8e:	00 00       	nop
     e90:	08 95       	ret

00000e92 <_ZN12CSoundPlayer4beepEjj>:

extern void __builtin_avr_delay_cycles(unsigned long);

//This function generates the square wave that makes the piezo speaker sound at a determinated frequency.
void CSoundPlayer::beep(uint16_t note, uint16_t duration)
{
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	ec 01       	movw	r28, r24
	SoundStart(note, duration, 3);
     e98:	23 e0       	ldi	r18, 0x03	; 3
     e9a:	0e 94 f7 06 	call	0xdee	; 0xdee <_ZN12CSoundPlayer10SoundStartEjjh>
	SoundStop();
     e9e:	ce 01       	movw	r24, r28
     ea0:	0e 94 2b 07 	call	0xe56	; 0xe56 <_ZN12CSoundPlayer9SoundStopEv>
}
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	08 95       	ret

00000eaa <_ZN12CSoundPlayer10InitializeEv>:

	_delay_ms(20);
} 

void CSoundPlayer::Initialize()
{
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	ec 01       	movw	r28, r24
	InitializeToneTimer();
     eb0:	0e 94 da 06 	call	0xdb4	; 0xdb4 <_ZN12CSoundPlayer19InitializeToneTimerEv>
	InitializeDurationTimer();
     eb4:	ce 01       	movw	r24, r28
     eb6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN12CSoundPlayer23InitializeDurationTimerEv>
}
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	08 95       	ret

00000ec0 <_ZN12CSoundPlayer4PlayEv>:

void CSoundPlayer::Play()
{
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	ec 01       	movw	r28, r24
	cli();
     ec6:	f8 94       	cli

	beep(a, 500);
     ec8:	44 ef       	ldi	r20, 0xF4	; 244
     eca:	51 e0       	ldi	r21, 0x01	; 1
     ecc:	68 eb       	ldi	r22, 0xB8	; 184
     ece:	71 e0       	ldi	r23, 0x01	; 1
     ed0:	0e 94 49 07 	call	0xe92	; 0xe92 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
     ed4:	44 ef       	ldi	r20, 0xF4	; 244
     ed6:	51 e0       	ldi	r21, 0x01	; 1
     ed8:	68 eb       	ldi	r22, 0xB8	; 184
     eda:	71 e0       	ldi	r23, 0x01	; 1
     edc:	ce 01       	movw	r24, r28
     ede:	0e 94 49 07 	call	0xe92	; 0xe92 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
     ee2:	44 ef       	ldi	r20, 0xF4	; 244
     ee4:	51 e0       	ldi	r21, 0x01	; 1
     ee6:	68 eb       	ldi	r22, 0xB8	; 184
     ee8:	71 e0       	ldi	r23, 0x01	; 1
     eea:	ce 01       	movw	r24, r28
     eec:	0e 94 49 07 	call	0xe92	; 0xe92 <_ZN12CSoundPlayer4beepEjj>
	beep(f, 350);
     ef0:	4e e5       	ldi	r20, 0x5E	; 94
     ef2:	51 e0       	ldi	r21, 0x01	; 1
     ef4:	6d e5       	ldi	r22, 0x5D	; 93
     ef6:	71 e0       	ldi	r23, 0x01	; 1
     ef8:	ce 01       	movw	r24, r28
     efa:	0e 94 49 07 	call	0xe92	; 0xe92 <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 150);
     efe:	46 e9       	ldi	r20, 0x96	; 150
     f00:	50 e0       	ldi	r21, 0x00	; 0
     f02:	6b e0       	ldi	r22, 0x0B	; 11
     f04:	72 e0       	ldi	r23, 0x02	; 2
     f06:	ce 01       	movw	r24, r28
     f08:	0e 94 49 07 	call	0xe92	; 0xe92 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
     f0c:	44 ef       	ldi	r20, 0xF4	; 244
     f0e:	51 e0       	ldi	r21, 0x01	; 1
     f10:	68 eb       	ldi	r22, 0xB8	; 184
     f12:	71 e0       	ldi	r23, 0x01	; 1
     f14:	ce 01       	movw	r24, r28
     f16:	0e 94 49 07 	call	0xe92	; 0xe92 <_ZN12CSoundPlayer4beepEjj>
	beep(f, 350);
     f1a:	4e e5       	ldi	r20, 0x5E	; 94
     f1c:	51 e0       	ldi	r21, 0x01	; 1
     f1e:	6d e5       	ldi	r22, 0x5D	; 93
     f20:	71 e0       	ldi	r23, 0x01	; 1
     f22:	ce 01       	movw	r24, r28
     f24:	0e 94 49 07 	call	0xe92	; 0xe92 <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 150);
     f28:	46 e9       	ldi	r20, 0x96	; 150
     f2a:	50 e0       	ldi	r21, 0x00	; 0
     f2c:	6b e0       	ldi	r22, 0x0B	; 11
     f2e:	72 e0       	ldi	r23, 0x02	; 2
     f30:	ce 01       	movw	r24, r28
     f32:	0e 94 49 07 	call	0xe92	; 0xe92 <_ZN12CSoundPlayer4beepEjj>
	beep(a, 650);
     f36:	4a e8       	ldi	r20, 0x8A	; 138
     f38:	52 e0       	ldi	r21, 0x02	; 2
     f3a:	68 eb       	ldi	r22, 0xB8	; 184
     f3c:	71 e0       	ldi	r23, 0x01	; 1
     f3e:	ce 01       	movw	r24, r28
     f40:	0e 94 49 07 	call	0xe92	; 0xe92 <_ZN12CSoundPlayer4beepEjj>
     f44:	2f ef       	ldi	r18, 0xFF	; 255
     f46:	85 ea       	ldi	r24, 0xA5	; 165
     f48:	9e e0       	ldi	r25, 0x0E	; 14
     f4a:	21 50       	subi	r18, 0x01	; 1
     f4c:	80 40       	sbci	r24, 0x00	; 0
     f4e:	90 40       	sbci	r25, 0x00	; 0
     f50:	e1 f7       	brne	.-8      	; 0xf4a <_ZN12CSoundPlayer4PlayEv+0x8a>
     f52:	00 c0       	rjmp	.+0      	; 0xf54 <_ZN12CSoundPlayer4PlayEv+0x94>
     f54:	00 00       	nop
	beep(f, 375);
	beep(cH, 125);
	beep(a, 650);
	//end of the song*/

	sei();
     f56:	78 94       	sei
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	08 95       	ret

00000f5e <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerC::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
     f5e:	fc 01       	movw	r30, r24
     f60:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
     f62:	e0 e0       	ldi	r30, 0x00	; 0
     f64:	f8 e0       	ldi	r31, 0x08	; 8
     f66:	80 81       	ld	r24, Z
     f68:	80 7f       	andi	r24, 0xF0	; 240
     f6a:	80 83       	st	Z, r24
	
	// No events
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
     f6c:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC0.CNT = 0;
     f6e:	10 a2       	std	Z+32, r1	; 0x20
     f70:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CCA = 0;
     f72:	10 a6       	std	Z+40, r1	; 0x28
     f74:	11 a6       	std	Z+41, r1	; 0x29
	TCC0.CCB = 0;
     f76:	12 a6       	std	Z+42, r1	; 0x2a
     f78:	13 a6       	std	Z+43, r1	; 0x2b
	TCC0.CCC = 0;
     f7a:	14 a6       	std	Z+44, r1	; 0x2c
     f7c:	15 a6       	std	Z+45, r1	; 0x2d
	TCC0.CCD = 0;
     f7e:	16 a6       	std	Z+46, r1	; 0x2e
     f80:	17 a6       	std	Z+47, r1	; 0x2f
	TCC0.PER = 0;
     f82:	16 a2       	std	Z+38, r1	; 0x26
     f84:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) | wgm;
     f86:	81 81       	ldd	r24, Z+1	; 0x01
     f88:	88 7f       	andi	r24, 0xF8	; 248
     f8a:	68 2b       	or	r22, r24
     f8c:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC0.CTRLA = (TCC0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
     f8e:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
     f90:	17 82       	std	Z+7, r1	; 0x07
     f92:	08 95       	ret

00000f94 <_ZN7CTimerC5StartEj>:
}

void CTimerC::Start(uint16_t period)
{
	// Set period of timer
	TCC0.PER = period;
     f94:	e0 e0       	ldi	r30, 0x00	; 0
     f96:	f8 e0       	ldi	r31, 0x08	; 8
     f98:	66 a3       	std	Z+38, r22	; 0x26
     f9a:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
     f9c:	20 81       	ld	r18, Z
     f9e:	20 7f       	andi	r18, 0xF0	; 240
     fa0:	dc 01       	movw	r26, r24
     fa2:	12 96       	adiw	r26, 0x02	; 2
     fa4:	9c 91       	ld	r25, X
     fa6:	82 2f       	mov	r24, r18
     fa8:	89 2b       	or	r24, r25
     faa:	80 83       	st	Z, r24
     fac:	08 95       	ret

00000fae <_ZN7CTimerC4StopEv>:
}

void CTimerC::Stop()
{
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
     fae:	e0 e0       	ldi	r30, 0x00	; 0
     fb0:	f8 e0       	ldi	r31, 0x08	; 8
     fb2:	80 81       	ld	r24, Z
     fb4:	80 7f       	andi	r24, 0xF0	; 240
     fb6:	80 83       	st	Z, r24
	TCC0.CNT = 0;
     fb8:	10 a2       	std	Z+32, r1	; 0x20
     fba:	11 a2       	std	Z+33, r1	; 0x21
     fbc:	08 95       	ret

00000fbe <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::EnableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB = (TCC0.CTRLB & ~0xF0) | channels;
     fbe:	e0 e0       	ldi	r30, 0x00	; 0
     fc0:	f8 e0       	ldi	r31, 0x08	; 8
     fc2:	81 81       	ldd	r24, Z+1	; 0x01
     fc4:	8f 70       	andi	r24, 0x0F	; 15
     fc6:	68 2b       	or	r22, r24
     fc8:	61 83       	std	Z+1, r22	; 0x01
     fca:	08 95       	ret

00000fcc <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::DisableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB &= ~channels;
     fcc:	e0 e0       	ldi	r30, 0x00	; 0
     fce:	f8 e0       	ldi	r31, 0x08	; 8
     fd0:	81 81       	ldd	r24, Z+1	; 0x01
     fd2:	60 95       	com	r22
     fd4:	68 23       	and	r22, r24
     fd6:	61 83       	std	Z+1, r22	; 0x01
     fd8:	08 95       	ret

00000fda <_ZN7CTimerC9SetPeriodEj>:
}

void CTimerC::SetPeriod(uint16_t value)
{
	TCC0.PER = value;
     fda:	60 93 26 08 	sts	0x0826, r22
     fde:	70 93 27 08 	sts	0x0827, r23
     fe2:	08 95       	ret

00000fe4 <_ZN7CTimerC8SetCOMPAEj>:
}

void CTimerC::SetCOMPA(uint16_t value)
{
	TCC0.CCA = value;
     fe4:	60 93 28 08 	sts	0x0828, r22
     fe8:	70 93 29 08 	sts	0x0829, r23
     fec:	08 95       	ret

00000fee <_ZN7CTimerC8SetCOMPBEj>:
}

void CTimerC::SetCOMPB(uint16_t value)
{
	TCC0.CCB = value;
     fee:	60 93 2a 08 	sts	0x082A, r22
     ff2:	70 93 2b 08 	sts	0x082B, r23
     ff6:	08 95       	ret

00000ff8 <_ZN7CTimerC8SetCOMPCEj>:
}

void CTimerC::SetCOMPC(uint16_t value)
{
	TCC0.CCC = value;
     ff8:	60 93 2c 08 	sts	0x082C, r22
     ffc:	70 93 2d 08 	sts	0x082D, r23
    1000:	08 95       	ret

00001002 <_ZN7CTimerC8SetCOMPDEj>:
}

void CTimerC::SetCOMPD(uint16_t value)
{
	TCC0.CCD = value;
    1002:	60 93 2e 08 	sts	0x082E, r22
    1006:	70 93 2f 08 	sts	0x082F, r23
    100a:	08 95       	ret

0000100c <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    100c:	61 15       	cp	r22, r1
    100e:	71 05       	cpc	r23, r1
    1010:	31 f0       	breq	.+12     	; 0x101e <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    1012:	e0 e0       	ldi	r30, 0x00	; 0
    1014:	f8 e0       	ldi	r31, 0x08	; 8
    1016:	86 81       	ldd	r24, Z+6	; 0x06
    1018:	83 70       	andi	r24, 0x03	; 3
    101a:	28 2b       	or	r18, r24
    101c:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCC0_OVF_vect_num] = func;
    101e:	60 93 0d 21 	sts	0x210D, r22
    1022:	70 93 0e 21 	sts	0x210E, r23
	InterruptSenderTable[TCC0_OVF_vect_num] = owner;
    1026:	40 93 03 22 	sts	0x2203, r20
    102a:	50 93 04 22 	sts	0x2204, r21
    102e:	08 95       	ret

00001030 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    1030:	61 15       	cp	r22, r1
    1032:	71 05       	cpc	r23, r1
    1034:	31 f0       	breq	.+12     	; 0x1042 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    1036:	e0 e0       	ldi	r30, 0x00	; 0
    1038:	f8 e0       	ldi	r31, 0x08	; 8
    103a:	86 81       	ldd	r24, Z+6	; 0x06
    103c:	8c 70       	andi	r24, 0x0C	; 12
    103e:	28 2b       	or	r18, r24
    1040:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC0_ERR_vect_num] = func;
    1042:	60 93 0f 21 	sts	0x210F, r22
    1046:	70 93 10 21 	sts	0x2110, r23
	InterruptSenderTable[TCC0_ERR_vect_num] = owner;
    104a:	40 93 05 22 	sts	0x2205, r20
    104e:	50 93 06 22 	sts	0x2206, r21
    1052:	08 95       	ret

00001054 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    1054:	61 15       	cp	r22, r1
    1056:	71 05       	cpc	r23, r1
    1058:	31 f0       	breq	.+12     	; 0x1066 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    105a:	e0 e0       	ldi	r30, 0x00	; 0
    105c:	f8 e0       	ldi	r31, 0x08	; 8
    105e:	87 81       	ldd	r24, Z+7	; 0x07
    1060:	83 70       	andi	r24, 0x03	; 3
    1062:	28 2b       	or	r18, r24
    1064:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCA_vect_num] = func;
    1066:	60 93 11 21 	sts	0x2111, r22
    106a:	70 93 12 21 	sts	0x2112, r23
	InterruptSenderTable[TCC0_CCA_vect_num] = owner;
    106e:	40 93 07 22 	sts	0x2207, r20
    1072:	50 93 08 22 	sts	0x2208, r21
    1076:	08 95       	ret

00001078 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    1078:	61 15       	cp	r22, r1
    107a:	71 05       	cpc	r23, r1
    107c:	31 f0       	breq	.+12     	; 0x108a <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    107e:	e0 e0       	ldi	r30, 0x00	; 0
    1080:	f8 e0       	ldi	r31, 0x08	; 8
    1082:	87 81       	ldd	r24, Z+7	; 0x07
    1084:	8c 70       	andi	r24, 0x0C	; 12
    1086:	28 2b       	or	r18, r24
    1088:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCB_vect_num] = func;
    108a:	60 93 13 21 	sts	0x2113, r22
    108e:	70 93 14 21 	sts	0x2114, r23
	InterruptSenderTable[TCC0_CCB_vect_num] = owner;
    1092:	40 93 09 22 	sts	0x2209, r20
    1096:	50 93 0a 22 	sts	0x220A, r21
    109a:	08 95       	ret

0000109c <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerC::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    109c:	61 15       	cp	r22, r1
    109e:	71 05       	cpc	r23, r1
    10a0:	31 f0       	breq	.+12     	; 0x10ae <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    10a2:	e0 e0       	ldi	r30, 0x00	; 0
    10a4:	f8 e0       	ldi	r31, 0x08	; 8
    10a6:	87 81       	ldd	r24, Z+7	; 0x07
    10a8:	80 73       	andi	r24, 0x30	; 48
    10aa:	28 2b       	or	r18, r24
    10ac:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCC_vect_num] = func;
    10ae:	60 93 15 21 	sts	0x2115, r22
    10b2:	70 93 16 21 	sts	0x2116, r23
	InterruptSenderTable[TCC0_CCC_vect_num] = owner;
    10b6:	40 93 0b 22 	sts	0x220B, r20
    10ba:	50 93 0c 22 	sts	0x220C, r21
    10be:	08 95       	ret

000010c0 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerC::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    10c0:	61 15       	cp	r22, r1
    10c2:	71 05       	cpc	r23, r1
    10c4:	31 f0       	breq	.+12     	; 0x10d2 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    10c6:	e0 e0       	ldi	r30, 0x00	; 0
    10c8:	f8 e0       	ldi	r31, 0x08	; 8
    10ca:	87 81       	ldd	r24, Z+7	; 0x07
    10cc:	80 7c       	andi	r24, 0xC0	; 192
    10ce:	28 2b       	or	r18, r24
    10d0:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCD_vect_num] = func;
    10d2:	60 93 17 21 	sts	0x2117, r22
    10d6:	70 93 18 21 	sts	0x2118, r23
	InterruptSenderTable[TCC0_CCD_vect_num] = owner;
    10da:	40 93 0d 22 	sts	0x220D, r20
    10de:	50 93 0e 22 	sts	0x220E, r21
    10e2:	08 95       	ret

000010e4 <_ZN7CTimerCC1Ev>:

#include "CTimerC.h"
#include "LaserLib/intx128.h"

// default constructor
CTimerC::CTimerC()
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	ec 01       	movw	r28, r24
    10ea:	0e 94 e7 08 	call	0x11ce	; 0x11ce <_ZN6CTimerC1Ev>
    10ee:	8b e7       	ldi	r24, 0x7B	; 123
    10f0:	90 e2       	ldi	r25, 0x20	; 32
    10f2:	88 83       	st	Y, r24
    10f4:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	08 95       	ret

000010fc <_ZN7CTimerCD1Ev>:

// default destructor
CTimerC::~CTimerC()
    10fc:	2b e7       	ldi	r18, 0x7B	; 123
    10fe:	30 e2       	ldi	r19, 0x20	; 32
    1100:	fc 01       	movw	r30, r24
    1102:	20 83       	st	Z, r18
    1104:	31 83       	std	Z+1, r19	; 0x01
    1106:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZN6CTimerD1Ev>
    110a:	08 95       	ret

0000110c <_ZN4CSPIC1Ev>:
#include <avr/io.h>
#include <stdlib.h>
#include <string.h>

// default constructor
CSPI::CSPI()
    110c:	08 95       	ret

0000110e <_ZN4CSPID1Ev>:
{
} //CSPI

// default destructor
CSPI::~CSPI()
    110e:	08 95       	ret

00001110 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>:
{
} //~CSPI

void CSPI::Initialize(bool Master, SPI_DATA_ORDER dord, SPI_MODE mode, bool doubleClk, SPI_PRESCALER_t prescaler)
{
    1110:	ef 92       	push	r14
    1112:	0f 93       	push	r16
    1114:	1f 93       	push	r17
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	ec 01       	movw	r28, r24
	PORTE.DIRSET = PIN4_bm | PIN5_bm | PIN7_bm; // MOSI, nSS, SCK to out
    111c:	e0 e8       	ldi	r30, 0x80	; 128
    111e:	f6 e0       	ldi	r31, 0x06	; 6
    1120:	80 eb       	ldi	r24, 0xB0	; 176
    1122:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRCLR = PIN6_bm;						// MISO to in
    1124:	90 e4       	ldi	r25, 0x40	; 64
    1126:	92 83       	std	Z+2, r25	; 0x02
	
	// All slew rate limit enable with inverting
	PORTE.PIN4CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    1128:	90 ec       	ldi	r25, 0xC0	; 192
    112a:	94 8b       	std	Z+20, r25	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    112c:	95 8b       	std	Z+21, r25	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    112e:	96 8b       	std	Z+22, r25	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    1130:	97 8b       	std	Z+23, r25	; 0x17
	
	// Set high
	PORTE.OUTSET = PIN4_bm | PIN5_bm | PIN7_bm;
    1132:	85 83       	std	Z+5, r24	; 0x05
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
		prescaler;
    1134:	61 11       	cpse	r22, r1
    1136:	02 c0       	rjmp	.+4      	; 0x113c <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2c>
    1138:	80 e4       	ldi	r24, 0x40	; 64
    113a:	01 c0       	rjmp	.+2      	; 0x113e <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2e>
    113c:	80 e5       	ldi	r24, 0x50	; 80
    113e:	01 11       	cpse	r16, r1
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x36>
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	01 c0       	rjmp	.+2      	; 0x1148 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x38>
    1146:	30 e8       	ldi	r19, 0x80	; 128
    1148:	41 11       	cpse	r20, r1
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x40>
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	01 c0       	rjmp	.+2      	; 0x1152 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x42>
    1150:	90 e2       	ldi	r25, 0x20	; 32
	SPIE.CTRL = 
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
    1152:	22 0f       	add	r18, r18
    1154:	22 0f       	add	r18, r18
    1156:	e2 2a       	or	r14, r18
    1158:	e8 2a       	or	r14, r24
    115a:	e3 2a       	or	r14, r19
		prescaler;
    115c:	e9 2a       	or	r14, r25
    115e:	00 ec       	ldi	r16, 0xC0	; 192
    1160:	1a e0       	ldi	r17, 0x0A	; 10
    1162:	f8 01       	movw	r30, r16
    1164:	e0 82       	st	Z, r14
		
	// Allocate transmit buffer
	buffer = (uint8_t*)malloc(256);
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	91 e0       	ldi	r25, 0x01	; 1
    116a:	0e 94 94 20 	call	0x4128	; 0x4128 <malloc>
    116e:	88 83       	st	Y, r24
    1170:	99 83       	std	Y+1, r25	; 0x01
	
	// Enable interrupt
	SPIE.INTCTRL = SPI_INTLVL_LO_gc;
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	f8 01       	movw	r30, r16
    1176:	81 83       	std	Z+1, r24	; 0x01
	
	// Set interrupts
	InterruptFuncTable[SPIE_INT_vect_num] = StaticOnTransmit;
    1178:	84 ee       	ldi	r24, 0xE4	; 228
    117a:	98 e0       	ldi	r25, 0x08	; 8
    117c:	80 93 63 21 	sts	0x2163, r24
    1180:	90 93 64 21 	sts	0x2164, r25
	InterruptSenderTable[SPIE_INT_vect_num] = this;
    1184:	c0 93 59 22 	sts	0x2259, r28
    1188:	d0 93 5a 22 	sts	0x225A, r29
}
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	1f 91       	pop	r17
    1192:	0f 91       	pop	r16
    1194:	ef 90       	pop	r14
    1196:	08 95       	ret

00001198 <_ZN4CSPI10OnTransmitEv>:
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
}

void CSPI::OnTransmit()
{
    1198:	fc 01       	movw	r30, r24
	if (rx_pos != 0)
    119a:	82 81       	ldd	r24, Z+2	; 0x02
    119c:	93 81       	ldd	r25, Z+3	; 0x03
    119e:	89 2b       	or	r24, r25
    11a0:	79 f0       	breq	.+30     	; 0x11c0 <_ZN4CSPI10OnTransmitEv+0x28>
		SPIE.DATA = buffer[--rx_pos];
    11a2:	40 81       	ld	r20, Z
    11a4:	51 81       	ldd	r21, Z+1	; 0x01
    11a6:	22 81       	ldd	r18, Z+2	; 0x02
    11a8:	33 81       	ldd	r19, Z+3	; 0x03
    11aa:	c9 01       	movw	r24, r18
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	82 83       	std	Z+2, r24	; 0x02
    11b0:	93 83       	std	Z+3, r25	; 0x03
    11b2:	fa 01       	movw	r30, r20
    11b4:	e8 0f       	add	r30, r24
    11b6:	f9 1f       	adc	r31, r25
    11b8:	80 81       	ld	r24, Z
    11ba:	80 93 c3 0a 	sts	0x0AC3, r24
    11be:	08 95       	ret
	else
		PORTE.OUTSET = PIN4_bm;
    11c0:	80 e1       	ldi	r24, 0x10	; 16
    11c2:	80 93 85 06 	sts	0x0685, r24
    11c6:	08 95       	ret

000011c8 <_ZN4CSPI16StaticOnTransmitEPv>:
}

void CSPI::StaticOnTransmit(void* sender)
{
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
    11c8:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN4CSPI10OnTransmitEv>
    11cc:	08 95       	ret

000011ce <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
    11ce:	2f e9       	ldi	r18, 0x9F	; 159
    11d0:	30 e2       	ldi	r19, 0x20	; 32
    11d2:	fc 01       	movw	r30, r24
    11d4:	20 83       	st	Z, r18
    11d6:	31 83       	std	Z+1, r19	; 0x01
    11d8:	08 95       	ret

000011da <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
    11da:	08 95       	ret

000011dc <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
    11dc:	23 ec       	ldi	r18, 0xC3	; 195
    11de:	30 e2       	ldi	r19, 0x20	; 32
    11e0:	fc 01       	movw	r30, r24
    11e2:	20 83       	st	Z, r18
    11e4:	31 83       	std	Z+1, r19	; 0x01
    11e6:	08 95       	ret

000011e8 <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
    11e8:	08 95       	ret

000011ea <__vector_1>:
		if (InterruptFuncTable[vector_id##_num] != 0)										\
		(*(InterruptFuncTable[vector_id##_num]))(InterruptSenderTable[vector_id##_num]);	\
	}

/* OSC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(OSC_OSCF_vect)      /* External Oscillator Failure Interrupt (NMI) */
    11ea:	1f 92       	push	r1
    11ec:	0f 92       	push	r0
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	0f 92       	push	r0
    11f2:	11 24       	eor	r1, r1
    11f4:	0b b6       	in	r0, 0x3b	; 59
    11f6:	0f 92       	push	r0
    11f8:	2f 93       	push	r18
    11fa:	3f 93       	push	r19
    11fc:	4f 93       	push	r20
    11fe:	5f 93       	push	r21
    1200:	6f 93       	push	r22
    1202:	7f 93       	push	r23
    1204:	8f 93       	push	r24
    1206:	9f 93       	push	r25
    1208:	af 93       	push	r26
    120a:	bf 93       	push	r27
    120c:	ef 93       	push	r30
    120e:	ff 93       	push	r31
    1210:	e0 91 f3 20 	lds	r30, 0x20F3
    1214:	f0 91 f4 20 	lds	r31, 0x20F4
    1218:	30 97       	sbiw	r30, 0x00	; 0
    121a:	29 f0       	breq	.+10     	; 0x1226 <__vector_1+0x3c>
    121c:	80 91 e9 21 	lds	r24, 0x21E9
    1220:	90 91 ea 21 	lds	r25, 0x21EA
    1224:	19 95       	eicall
    1226:	ff 91       	pop	r31
    1228:	ef 91       	pop	r30
    122a:	bf 91       	pop	r27
    122c:	af 91       	pop	r26
    122e:	9f 91       	pop	r25
    1230:	8f 91       	pop	r24
    1232:	7f 91       	pop	r23
    1234:	6f 91       	pop	r22
    1236:	5f 91       	pop	r21
    1238:	4f 91       	pop	r20
    123a:	3f 91       	pop	r19
    123c:	2f 91       	pop	r18
    123e:	0f 90       	pop	r0
    1240:	0b be       	out	0x3b, r0	; 59
    1242:	0f 90       	pop	r0
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	0f 90       	pop	r0
    1248:	1f 90       	pop	r1
    124a:	18 95       	reti

0000124c <__vector_2>:

/* PORTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT0_vect)      /* External Interrupt 0 */
    124c:	1f 92       	push	r1
    124e:	0f 92       	push	r0
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	0f 92       	push	r0
    1254:	11 24       	eor	r1, r1
    1256:	0b b6       	in	r0, 0x3b	; 59
    1258:	0f 92       	push	r0
    125a:	2f 93       	push	r18
    125c:	3f 93       	push	r19
    125e:	4f 93       	push	r20
    1260:	5f 93       	push	r21
    1262:	6f 93       	push	r22
    1264:	7f 93       	push	r23
    1266:	8f 93       	push	r24
    1268:	9f 93       	push	r25
    126a:	af 93       	push	r26
    126c:	bf 93       	push	r27
    126e:	ef 93       	push	r30
    1270:	ff 93       	push	r31
    1272:	e0 91 f5 20 	lds	r30, 0x20F5
    1276:	f0 91 f6 20 	lds	r31, 0x20F6
    127a:	30 97       	sbiw	r30, 0x00	; 0
    127c:	29 f0       	breq	.+10     	; 0x1288 <__vector_2+0x3c>
    127e:	80 91 eb 21 	lds	r24, 0x21EB
    1282:	90 91 ec 21 	lds	r25, 0x21EC
    1286:	19 95       	eicall
    1288:	ff 91       	pop	r31
    128a:	ef 91       	pop	r30
    128c:	bf 91       	pop	r27
    128e:	af 91       	pop	r26
    1290:	9f 91       	pop	r25
    1292:	8f 91       	pop	r24
    1294:	7f 91       	pop	r23
    1296:	6f 91       	pop	r22
    1298:	5f 91       	pop	r21
    129a:	4f 91       	pop	r20
    129c:	3f 91       	pop	r19
    129e:	2f 91       	pop	r18
    12a0:	0f 90       	pop	r0
    12a2:	0b be       	out	0x3b, r0	; 59
    12a4:	0f 90       	pop	r0
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	0f 90       	pop	r0
    12aa:	1f 90       	pop	r1
    12ac:	18 95       	reti

000012ae <__vector_3>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT1_vect)      /* External Interrupt 1 */
    12ae:	1f 92       	push	r1
    12b0:	0f 92       	push	r0
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	0f 92       	push	r0
    12b6:	11 24       	eor	r1, r1
    12b8:	0b b6       	in	r0, 0x3b	; 59
    12ba:	0f 92       	push	r0
    12bc:	2f 93       	push	r18
    12be:	3f 93       	push	r19
    12c0:	4f 93       	push	r20
    12c2:	5f 93       	push	r21
    12c4:	6f 93       	push	r22
    12c6:	7f 93       	push	r23
    12c8:	8f 93       	push	r24
    12ca:	9f 93       	push	r25
    12cc:	af 93       	push	r26
    12ce:	bf 93       	push	r27
    12d0:	ef 93       	push	r30
    12d2:	ff 93       	push	r31
    12d4:	e0 91 f7 20 	lds	r30, 0x20F7
    12d8:	f0 91 f8 20 	lds	r31, 0x20F8
    12dc:	30 97       	sbiw	r30, 0x00	; 0
    12de:	29 f0       	breq	.+10     	; 0x12ea <__vector_3+0x3c>
    12e0:	80 91 ed 21 	lds	r24, 0x21ED
    12e4:	90 91 ee 21 	lds	r25, 0x21EE
    12e8:	19 95       	eicall
    12ea:	ff 91       	pop	r31
    12ec:	ef 91       	pop	r30
    12ee:	bf 91       	pop	r27
    12f0:	af 91       	pop	r26
    12f2:	9f 91       	pop	r25
    12f4:	8f 91       	pop	r24
    12f6:	7f 91       	pop	r23
    12f8:	6f 91       	pop	r22
    12fa:	5f 91       	pop	r21
    12fc:	4f 91       	pop	r20
    12fe:	3f 91       	pop	r19
    1300:	2f 91       	pop	r18
    1302:	0f 90       	pop	r0
    1304:	0b be       	out	0x3b, r0	; 59
    1306:	0f 90       	pop	r0
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	0f 90       	pop	r0
    130c:	1f 90       	pop	r1
    130e:	18 95       	reti

00001310 <__vector_4>:

/* PORTR interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT0_vect)      /* External Interrupt 0 */
    1310:	1f 92       	push	r1
    1312:	0f 92       	push	r0
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	0f 92       	push	r0
    1318:	11 24       	eor	r1, r1
    131a:	0b b6       	in	r0, 0x3b	; 59
    131c:	0f 92       	push	r0
    131e:	2f 93       	push	r18
    1320:	3f 93       	push	r19
    1322:	4f 93       	push	r20
    1324:	5f 93       	push	r21
    1326:	6f 93       	push	r22
    1328:	7f 93       	push	r23
    132a:	8f 93       	push	r24
    132c:	9f 93       	push	r25
    132e:	af 93       	push	r26
    1330:	bf 93       	push	r27
    1332:	ef 93       	push	r30
    1334:	ff 93       	push	r31
    1336:	e0 91 f9 20 	lds	r30, 0x20F9
    133a:	f0 91 fa 20 	lds	r31, 0x20FA
    133e:	30 97       	sbiw	r30, 0x00	; 0
    1340:	29 f0       	breq	.+10     	; 0x134c <__vector_4+0x3c>
    1342:	80 91 ef 21 	lds	r24, 0x21EF
    1346:	90 91 f0 21 	lds	r25, 0x21F0
    134a:	19 95       	eicall
    134c:	ff 91       	pop	r31
    134e:	ef 91       	pop	r30
    1350:	bf 91       	pop	r27
    1352:	af 91       	pop	r26
    1354:	9f 91       	pop	r25
    1356:	8f 91       	pop	r24
    1358:	7f 91       	pop	r23
    135a:	6f 91       	pop	r22
    135c:	5f 91       	pop	r21
    135e:	4f 91       	pop	r20
    1360:	3f 91       	pop	r19
    1362:	2f 91       	pop	r18
    1364:	0f 90       	pop	r0
    1366:	0b be       	out	0x3b, r0	; 59
    1368:	0f 90       	pop	r0
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	0f 90       	pop	r0
    136e:	1f 90       	pop	r1
    1370:	18 95       	reti

00001372 <__vector_5>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT1_vect)      /* External Interrupt 1 */
    1372:	1f 92       	push	r1
    1374:	0f 92       	push	r0
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	0f 92       	push	r0
    137a:	11 24       	eor	r1, r1
    137c:	0b b6       	in	r0, 0x3b	; 59
    137e:	0f 92       	push	r0
    1380:	2f 93       	push	r18
    1382:	3f 93       	push	r19
    1384:	4f 93       	push	r20
    1386:	5f 93       	push	r21
    1388:	6f 93       	push	r22
    138a:	7f 93       	push	r23
    138c:	8f 93       	push	r24
    138e:	9f 93       	push	r25
    1390:	af 93       	push	r26
    1392:	bf 93       	push	r27
    1394:	ef 93       	push	r30
    1396:	ff 93       	push	r31
    1398:	e0 91 fb 20 	lds	r30, 0x20FB
    139c:	f0 91 fc 20 	lds	r31, 0x20FC
    13a0:	30 97       	sbiw	r30, 0x00	; 0
    13a2:	29 f0       	breq	.+10     	; 0x13ae <__vector_5+0x3c>
    13a4:	80 91 f1 21 	lds	r24, 0x21F1
    13a8:	90 91 f2 21 	lds	r25, 0x21F2
    13ac:	19 95       	eicall
    13ae:	ff 91       	pop	r31
    13b0:	ef 91       	pop	r30
    13b2:	bf 91       	pop	r27
    13b4:	af 91       	pop	r26
    13b6:	9f 91       	pop	r25
    13b8:	8f 91       	pop	r24
    13ba:	7f 91       	pop	r23
    13bc:	6f 91       	pop	r22
    13be:	5f 91       	pop	r21
    13c0:	4f 91       	pop	r20
    13c2:	3f 91       	pop	r19
    13c4:	2f 91       	pop	r18
    13c6:	0f 90       	pop	r0
    13c8:	0b be       	out	0x3b, r0	; 59
    13ca:	0f 90       	pop	r0
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	0f 90       	pop	r0
    13d0:	1f 90       	pop	r1
    13d2:	18 95       	reti

000013d4 <__vector_6>:

/* DMA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH0_vect)      /* Channel 0 Interrupt */
    13d4:	1f 92       	push	r1
    13d6:	0f 92       	push	r0
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	0f 92       	push	r0
    13dc:	11 24       	eor	r1, r1
    13de:	0b b6       	in	r0, 0x3b	; 59
    13e0:	0f 92       	push	r0
    13e2:	2f 93       	push	r18
    13e4:	3f 93       	push	r19
    13e6:	4f 93       	push	r20
    13e8:	5f 93       	push	r21
    13ea:	6f 93       	push	r22
    13ec:	7f 93       	push	r23
    13ee:	8f 93       	push	r24
    13f0:	9f 93       	push	r25
    13f2:	af 93       	push	r26
    13f4:	bf 93       	push	r27
    13f6:	ef 93       	push	r30
    13f8:	ff 93       	push	r31
    13fa:	e0 91 fd 20 	lds	r30, 0x20FD
    13fe:	f0 91 fe 20 	lds	r31, 0x20FE
    1402:	30 97       	sbiw	r30, 0x00	; 0
    1404:	29 f0       	breq	.+10     	; 0x1410 <__vector_6+0x3c>
    1406:	80 91 f3 21 	lds	r24, 0x21F3
    140a:	90 91 f4 21 	lds	r25, 0x21F4
    140e:	19 95       	eicall
    1410:	ff 91       	pop	r31
    1412:	ef 91       	pop	r30
    1414:	bf 91       	pop	r27
    1416:	af 91       	pop	r26
    1418:	9f 91       	pop	r25
    141a:	8f 91       	pop	r24
    141c:	7f 91       	pop	r23
    141e:	6f 91       	pop	r22
    1420:	5f 91       	pop	r21
    1422:	4f 91       	pop	r20
    1424:	3f 91       	pop	r19
    1426:	2f 91       	pop	r18
    1428:	0f 90       	pop	r0
    142a:	0b be       	out	0x3b, r0	; 59
    142c:	0f 90       	pop	r0
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	0f 90       	pop	r0
    1432:	1f 90       	pop	r1
    1434:	18 95       	reti

00001436 <__vector_7>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH1_vect)      /* Channel 1 Interrupt */
    1436:	1f 92       	push	r1
    1438:	0f 92       	push	r0
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	0f 92       	push	r0
    143e:	11 24       	eor	r1, r1
    1440:	0b b6       	in	r0, 0x3b	; 59
    1442:	0f 92       	push	r0
    1444:	2f 93       	push	r18
    1446:	3f 93       	push	r19
    1448:	4f 93       	push	r20
    144a:	5f 93       	push	r21
    144c:	6f 93       	push	r22
    144e:	7f 93       	push	r23
    1450:	8f 93       	push	r24
    1452:	9f 93       	push	r25
    1454:	af 93       	push	r26
    1456:	bf 93       	push	r27
    1458:	ef 93       	push	r30
    145a:	ff 93       	push	r31
    145c:	e0 91 ff 20 	lds	r30, 0x20FF
    1460:	f0 91 00 21 	lds	r31, 0x2100
    1464:	30 97       	sbiw	r30, 0x00	; 0
    1466:	29 f0       	breq	.+10     	; 0x1472 <__vector_7+0x3c>
    1468:	80 91 f5 21 	lds	r24, 0x21F5
    146c:	90 91 f6 21 	lds	r25, 0x21F6
    1470:	19 95       	eicall
    1472:	ff 91       	pop	r31
    1474:	ef 91       	pop	r30
    1476:	bf 91       	pop	r27
    1478:	af 91       	pop	r26
    147a:	9f 91       	pop	r25
    147c:	8f 91       	pop	r24
    147e:	7f 91       	pop	r23
    1480:	6f 91       	pop	r22
    1482:	5f 91       	pop	r21
    1484:	4f 91       	pop	r20
    1486:	3f 91       	pop	r19
    1488:	2f 91       	pop	r18
    148a:	0f 90       	pop	r0
    148c:	0b be       	out	0x3b, r0	; 59
    148e:	0f 90       	pop	r0
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	0f 90       	pop	r0
    1494:	1f 90       	pop	r1
    1496:	18 95       	reti

00001498 <__vector_8>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH2_vect)      /* Channel 2 Interrupt */
    1498:	1f 92       	push	r1
    149a:	0f 92       	push	r0
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	0f 92       	push	r0
    14a0:	11 24       	eor	r1, r1
    14a2:	0b b6       	in	r0, 0x3b	; 59
    14a4:	0f 92       	push	r0
    14a6:	2f 93       	push	r18
    14a8:	3f 93       	push	r19
    14aa:	4f 93       	push	r20
    14ac:	5f 93       	push	r21
    14ae:	6f 93       	push	r22
    14b0:	7f 93       	push	r23
    14b2:	8f 93       	push	r24
    14b4:	9f 93       	push	r25
    14b6:	af 93       	push	r26
    14b8:	bf 93       	push	r27
    14ba:	ef 93       	push	r30
    14bc:	ff 93       	push	r31
    14be:	e0 91 01 21 	lds	r30, 0x2101
    14c2:	f0 91 02 21 	lds	r31, 0x2102
    14c6:	30 97       	sbiw	r30, 0x00	; 0
    14c8:	29 f0       	breq	.+10     	; 0x14d4 <__vector_8+0x3c>
    14ca:	80 91 f7 21 	lds	r24, 0x21F7
    14ce:	90 91 f8 21 	lds	r25, 0x21F8
    14d2:	19 95       	eicall
    14d4:	ff 91       	pop	r31
    14d6:	ef 91       	pop	r30
    14d8:	bf 91       	pop	r27
    14da:	af 91       	pop	r26
    14dc:	9f 91       	pop	r25
    14de:	8f 91       	pop	r24
    14e0:	7f 91       	pop	r23
    14e2:	6f 91       	pop	r22
    14e4:	5f 91       	pop	r21
    14e6:	4f 91       	pop	r20
    14e8:	3f 91       	pop	r19
    14ea:	2f 91       	pop	r18
    14ec:	0f 90       	pop	r0
    14ee:	0b be       	out	0x3b, r0	; 59
    14f0:	0f 90       	pop	r0
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	0f 90       	pop	r0
    14f6:	1f 90       	pop	r1
    14f8:	18 95       	reti

000014fa <__vector_9>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH3_vect)      /* Channel 3 Interrupt */
    14fa:	1f 92       	push	r1
    14fc:	0f 92       	push	r0
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	0f 92       	push	r0
    1502:	11 24       	eor	r1, r1
    1504:	0b b6       	in	r0, 0x3b	; 59
    1506:	0f 92       	push	r0
    1508:	2f 93       	push	r18
    150a:	3f 93       	push	r19
    150c:	4f 93       	push	r20
    150e:	5f 93       	push	r21
    1510:	6f 93       	push	r22
    1512:	7f 93       	push	r23
    1514:	8f 93       	push	r24
    1516:	9f 93       	push	r25
    1518:	af 93       	push	r26
    151a:	bf 93       	push	r27
    151c:	ef 93       	push	r30
    151e:	ff 93       	push	r31
    1520:	e0 91 03 21 	lds	r30, 0x2103
    1524:	f0 91 04 21 	lds	r31, 0x2104
    1528:	30 97       	sbiw	r30, 0x00	; 0
    152a:	29 f0       	breq	.+10     	; 0x1536 <__vector_9+0x3c>
    152c:	80 91 f9 21 	lds	r24, 0x21F9
    1530:	90 91 fa 21 	lds	r25, 0x21FA
    1534:	19 95       	eicall
    1536:	ff 91       	pop	r31
    1538:	ef 91       	pop	r30
    153a:	bf 91       	pop	r27
    153c:	af 91       	pop	r26
    153e:	9f 91       	pop	r25
    1540:	8f 91       	pop	r24
    1542:	7f 91       	pop	r23
    1544:	6f 91       	pop	r22
    1546:	5f 91       	pop	r21
    1548:	4f 91       	pop	r20
    154a:	3f 91       	pop	r19
    154c:	2f 91       	pop	r18
    154e:	0f 90       	pop	r0
    1550:	0b be       	out	0x3b, r0	; 59
    1552:	0f 90       	pop	r0
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	0f 90       	pop	r0
    1558:	1f 90       	pop	r1
    155a:	18 95       	reti

0000155c <__vector_10>:

/* RTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_OVF_vect)      /* Overflow Interrupt */
    155c:	1f 92       	push	r1
    155e:	0f 92       	push	r0
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	0f 92       	push	r0
    1564:	11 24       	eor	r1, r1
    1566:	0b b6       	in	r0, 0x3b	; 59
    1568:	0f 92       	push	r0
    156a:	2f 93       	push	r18
    156c:	3f 93       	push	r19
    156e:	4f 93       	push	r20
    1570:	5f 93       	push	r21
    1572:	6f 93       	push	r22
    1574:	7f 93       	push	r23
    1576:	8f 93       	push	r24
    1578:	9f 93       	push	r25
    157a:	af 93       	push	r26
    157c:	bf 93       	push	r27
    157e:	ef 93       	push	r30
    1580:	ff 93       	push	r31
    1582:	e0 91 05 21 	lds	r30, 0x2105
    1586:	f0 91 06 21 	lds	r31, 0x2106
    158a:	30 97       	sbiw	r30, 0x00	; 0
    158c:	29 f0       	breq	.+10     	; 0x1598 <__vector_10+0x3c>
    158e:	80 91 fb 21 	lds	r24, 0x21FB
    1592:	90 91 fc 21 	lds	r25, 0x21FC
    1596:	19 95       	eicall
    1598:	ff 91       	pop	r31
    159a:	ef 91       	pop	r30
    159c:	bf 91       	pop	r27
    159e:	af 91       	pop	r26
    15a0:	9f 91       	pop	r25
    15a2:	8f 91       	pop	r24
    15a4:	7f 91       	pop	r23
    15a6:	6f 91       	pop	r22
    15a8:	5f 91       	pop	r21
    15aa:	4f 91       	pop	r20
    15ac:	3f 91       	pop	r19
    15ae:	2f 91       	pop	r18
    15b0:	0f 90       	pop	r0
    15b2:	0b be       	out	0x3b, r0	; 59
    15b4:	0f 90       	pop	r0
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	0f 90       	pop	r0
    15ba:	1f 90       	pop	r1
    15bc:	18 95       	reti

000015be <__vector_11>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_COMP_vect)      /* Compare Interrupt */
    15be:	1f 92       	push	r1
    15c0:	0f 92       	push	r0
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	0f 92       	push	r0
    15c6:	11 24       	eor	r1, r1
    15c8:	0b b6       	in	r0, 0x3b	; 59
    15ca:	0f 92       	push	r0
    15cc:	2f 93       	push	r18
    15ce:	3f 93       	push	r19
    15d0:	4f 93       	push	r20
    15d2:	5f 93       	push	r21
    15d4:	6f 93       	push	r22
    15d6:	7f 93       	push	r23
    15d8:	8f 93       	push	r24
    15da:	9f 93       	push	r25
    15dc:	af 93       	push	r26
    15de:	bf 93       	push	r27
    15e0:	ef 93       	push	r30
    15e2:	ff 93       	push	r31
    15e4:	e0 91 07 21 	lds	r30, 0x2107
    15e8:	f0 91 08 21 	lds	r31, 0x2108
    15ec:	30 97       	sbiw	r30, 0x00	; 0
    15ee:	29 f0       	breq	.+10     	; 0x15fa <__vector_11+0x3c>
    15f0:	80 91 fd 21 	lds	r24, 0x21FD
    15f4:	90 91 fe 21 	lds	r25, 0x21FE
    15f8:	19 95       	eicall
    15fa:	ff 91       	pop	r31
    15fc:	ef 91       	pop	r30
    15fe:	bf 91       	pop	r27
    1600:	af 91       	pop	r26
    1602:	9f 91       	pop	r25
    1604:	8f 91       	pop	r24
    1606:	7f 91       	pop	r23
    1608:	6f 91       	pop	r22
    160a:	5f 91       	pop	r21
    160c:	4f 91       	pop	r20
    160e:	3f 91       	pop	r19
    1610:	2f 91       	pop	r18
    1612:	0f 90       	pop	r0
    1614:	0b be       	out	0x3b, r0	; 59
    1616:	0f 90       	pop	r0
    1618:	0f be       	out	0x3f, r0	; 63
    161a:	0f 90       	pop	r0
    161c:	1f 90       	pop	r1
    161e:	18 95       	reti

00001620 <__vector_12>:

/* TWIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIS_vect)      /* TWI Slave Interrupt */
    1620:	1f 92       	push	r1
    1622:	0f 92       	push	r0
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	0f 92       	push	r0
    1628:	11 24       	eor	r1, r1
    162a:	0b b6       	in	r0, 0x3b	; 59
    162c:	0f 92       	push	r0
    162e:	2f 93       	push	r18
    1630:	3f 93       	push	r19
    1632:	4f 93       	push	r20
    1634:	5f 93       	push	r21
    1636:	6f 93       	push	r22
    1638:	7f 93       	push	r23
    163a:	8f 93       	push	r24
    163c:	9f 93       	push	r25
    163e:	af 93       	push	r26
    1640:	bf 93       	push	r27
    1642:	ef 93       	push	r30
    1644:	ff 93       	push	r31
    1646:	e0 91 09 21 	lds	r30, 0x2109
    164a:	f0 91 0a 21 	lds	r31, 0x210A
    164e:	30 97       	sbiw	r30, 0x00	; 0
    1650:	29 f0       	breq	.+10     	; 0x165c <__vector_12+0x3c>
    1652:	80 91 ff 21 	lds	r24, 0x21FF
    1656:	90 91 00 22 	lds	r25, 0x2200
    165a:	19 95       	eicall
    165c:	ff 91       	pop	r31
    165e:	ef 91       	pop	r30
    1660:	bf 91       	pop	r27
    1662:	af 91       	pop	r26
    1664:	9f 91       	pop	r25
    1666:	8f 91       	pop	r24
    1668:	7f 91       	pop	r23
    166a:	6f 91       	pop	r22
    166c:	5f 91       	pop	r21
    166e:	4f 91       	pop	r20
    1670:	3f 91       	pop	r19
    1672:	2f 91       	pop	r18
    1674:	0f 90       	pop	r0
    1676:	0b be       	out	0x3b, r0	; 59
    1678:	0f 90       	pop	r0
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	0f 90       	pop	r0
    167e:	1f 90       	pop	r1
    1680:	18 95       	reti

00001682 <__vector_13>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIM_vect)      /* TWI Master Interrupt */
    1682:	1f 92       	push	r1
    1684:	0f 92       	push	r0
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	0f 92       	push	r0
    168a:	11 24       	eor	r1, r1
    168c:	0b b6       	in	r0, 0x3b	; 59
    168e:	0f 92       	push	r0
    1690:	2f 93       	push	r18
    1692:	3f 93       	push	r19
    1694:	4f 93       	push	r20
    1696:	5f 93       	push	r21
    1698:	6f 93       	push	r22
    169a:	7f 93       	push	r23
    169c:	8f 93       	push	r24
    169e:	9f 93       	push	r25
    16a0:	af 93       	push	r26
    16a2:	bf 93       	push	r27
    16a4:	ef 93       	push	r30
    16a6:	ff 93       	push	r31
    16a8:	e0 91 0b 21 	lds	r30, 0x210B
    16ac:	f0 91 0c 21 	lds	r31, 0x210C
    16b0:	30 97       	sbiw	r30, 0x00	; 0
    16b2:	29 f0       	breq	.+10     	; 0x16be <__vector_13+0x3c>
    16b4:	80 91 01 22 	lds	r24, 0x2201
    16b8:	90 91 02 22 	lds	r25, 0x2202
    16bc:	19 95       	eicall
    16be:	ff 91       	pop	r31
    16c0:	ef 91       	pop	r30
    16c2:	bf 91       	pop	r27
    16c4:	af 91       	pop	r26
    16c6:	9f 91       	pop	r25
    16c8:	8f 91       	pop	r24
    16ca:	7f 91       	pop	r23
    16cc:	6f 91       	pop	r22
    16ce:	5f 91       	pop	r21
    16d0:	4f 91       	pop	r20
    16d2:	3f 91       	pop	r19
    16d4:	2f 91       	pop	r18
    16d6:	0f 90       	pop	r0
    16d8:	0b be       	out	0x3b, r0	; 59
    16da:	0f 90       	pop	r0
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	0f 90       	pop	r0
    16e0:	1f 90       	pop	r1
    16e2:	18 95       	reti

000016e4 <__vector_14>:

/* TCC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_OVF_vect)      /* Overflow Interrupt */
    16e4:	1f 92       	push	r1
    16e6:	0f 92       	push	r0
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	0f 92       	push	r0
    16ec:	11 24       	eor	r1, r1
    16ee:	0b b6       	in	r0, 0x3b	; 59
    16f0:	0f 92       	push	r0
    16f2:	2f 93       	push	r18
    16f4:	3f 93       	push	r19
    16f6:	4f 93       	push	r20
    16f8:	5f 93       	push	r21
    16fa:	6f 93       	push	r22
    16fc:	7f 93       	push	r23
    16fe:	8f 93       	push	r24
    1700:	9f 93       	push	r25
    1702:	af 93       	push	r26
    1704:	bf 93       	push	r27
    1706:	ef 93       	push	r30
    1708:	ff 93       	push	r31
    170a:	e0 91 0d 21 	lds	r30, 0x210D
    170e:	f0 91 0e 21 	lds	r31, 0x210E
    1712:	30 97       	sbiw	r30, 0x00	; 0
    1714:	29 f0       	breq	.+10     	; 0x1720 <__vector_14+0x3c>
    1716:	80 91 03 22 	lds	r24, 0x2203
    171a:	90 91 04 22 	lds	r25, 0x2204
    171e:	19 95       	eicall
    1720:	ff 91       	pop	r31
    1722:	ef 91       	pop	r30
    1724:	bf 91       	pop	r27
    1726:	af 91       	pop	r26
    1728:	9f 91       	pop	r25
    172a:	8f 91       	pop	r24
    172c:	7f 91       	pop	r23
    172e:	6f 91       	pop	r22
    1730:	5f 91       	pop	r21
    1732:	4f 91       	pop	r20
    1734:	3f 91       	pop	r19
    1736:	2f 91       	pop	r18
    1738:	0f 90       	pop	r0
    173a:	0b be       	out	0x3b, r0	; 59
    173c:	0f 90       	pop	r0
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	0f 90       	pop	r0
    1742:	1f 90       	pop	r1
    1744:	18 95       	reti

00001746 <__vector_15>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_ERR_vect)      /* Error Interrupt */
    1746:	1f 92       	push	r1
    1748:	0f 92       	push	r0
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	0f 92       	push	r0
    174e:	11 24       	eor	r1, r1
    1750:	0b b6       	in	r0, 0x3b	; 59
    1752:	0f 92       	push	r0
    1754:	2f 93       	push	r18
    1756:	3f 93       	push	r19
    1758:	4f 93       	push	r20
    175a:	5f 93       	push	r21
    175c:	6f 93       	push	r22
    175e:	7f 93       	push	r23
    1760:	8f 93       	push	r24
    1762:	9f 93       	push	r25
    1764:	af 93       	push	r26
    1766:	bf 93       	push	r27
    1768:	ef 93       	push	r30
    176a:	ff 93       	push	r31
    176c:	e0 91 0f 21 	lds	r30, 0x210F
    1770:	f0 91 10 21 	lds	r31, 0x2110
    1774:	30 97       	sbiw	r30, 0x00	; 0
    1776:	29 f0       	breq	.+10     	; 0x1782 <__vector_15+0x3c>
    1778:	80 91 05 22 	lds	r24, 0x2205
    177c:	90 91 06 22 	lds	r25, 0x2206
    1780:	19 95       	eicall
    1782:	ff 91       	pop	r31
    1784:	ef 91       	pop	r30
    1786:	bf 91       	pop	r27
    1788:	af 91       	pop	r26
    178a:	9f 91       	pop	r25
    178c:	8f 91       	pop	r24
    178e:	7f 91       	pop	r23
    1790:	6f 91       	pop	r22
    1792:	5f 91       	pop	r21
    1794:	4f 91       	pop	r20
    1796:	3f 91       	pop	r19
    1798:	2f 91       	pop	r18
    179a:	0f 90       	pop	r0
    179c:	0b be       	out	0x3b, r0	; 59
    179e:	0f 90       	pop	r0
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	0f 90       	pop	r0
    17a4:	1f 90       	pop	r1
    17a6:	18 95       	reti

000017a8 <__vector_16>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCA_vect)      /* Compare or Capture A Interrupt */
    17a8:	1f 92       	push	r1
    17aa:	0f 92       	push	r0
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	0f 92       	push	r0
    17b0:	11 24       	eor	r1, r1
    17b2:	0b b6       	in	r0, 0x3b	; 59
    17b4:	0f 92       	push	r0
    17b6:	2f 93       	push	r18
    17b8:	3f 93       	push	r19
    17ba:	4f 93       	push	r20
    17bc:	5f 93       	push	r21
    17be:	6f 93       	push	r22
    17c0:	7f 93       	push	r23
    17c2:	8f 93       	push	r24
    17c4:	9f 93       	push	r25
    17c6:	af 93       	push	r26
    17c8:	bf 93       	push	r27
    17ca:	ef 93       	push	r30
    17cc:	ff 93       	push	r31
    17ce:	e0 91 11 21 	lds	r30, 0x2111
    17d2:	f0 91 12 21 	lds	r31, 0x2112
    17d6:	30 97       	sbiw	r30, 0x00	; 0
    17d8:	29 f0       	breq	.+10     	; 0x17e4 <__vector_16+0x3c>
    17da:	80 91 07 22 	lds	r24, 0x2207
    17de:	90 91 08 22 	lds	r25, 0x2208
    17e2:	19 95       	eicall
    17e4:	ff 91       	pop	r31
    17e6:	ef 91       	pop	r30
    17e8:	bf 91       	pop	r27
    17ea:	af 91       	pop	r26
    17ec:	9f 91       	pop	r25
    17ee:	8f 91       	pop	r24
    17f0:	7f 91       	pop	r23
    17f2:	6f 91       	pop	r22
    17f4:	5f 91       	pop	r21
    17f6:	4f 91       	pop	r20
    17f8:	3f 91       	pop	r19
    17fa:	2f 91       	pop	r18
    17fc:	0f 90       	pop	r0
    17fe:	0b be       	out	0x3b, r0	; 59
    1800:	0f 90       	pop	r0
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	0f 90       	pop	r0
    1806:	1f 90       	pop	r1
    1808:	18 95       	reti

0000180a <__vector_17>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCB_vect)      /* Compare or Capture B Interrupt */
    180a:	1f 92       	push	r1
    180c:	0f 92       	push	r0
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	0f 92       	push	r0
    1812:	11 24       	eor	r1, r1
    1814:	0b b6       	in	r0, 0x3b	; 59
    1816:	0f 92       	push	r0
    1818:	2f 93       	push	r18
    181a:	3f 93       	push	r19
    181c:	4f 93       	push	r20
    181e:	5f 93       	push	r21
    1820:	6f 93       	push	r22
    1822:	7f 93       	push	r23
    1824:	8f 93       	push	r24
    1826:	9f 93       	push	r25
    1828:	af 93       	push	r26
    182a:	bf 93       	push	r27
    182c:	ef 93       	push	r30
    182e:	ff 93       	push	r31
    1830:	e0 91 13 21 	lds	r30, 0x2113
    1834:	f0 91 14 21 	lds	r31, 0x2114
    1838:	30 97       	sbiw	r30, 0x00	; 0
    183a:	29 f0       	breq	.+10     	; 0x1846 <__vector_17+0x3c>
    183c:	80 91 09 22 	lds	r24, 0x2209
    1840:	90 91 0a 22 	lds	r25, 0x220A
    1844:	19 95       	eicall
    1846:	ff 91       	pop	r31
    1848:	ef 91       	pop	r30
    184a:	bf 91       	pop	r27
    184c:	af 91       	pop	r26
    184e:	9f 91       	pop	r25
    1850:	8f 91       	pop	r24
    1852:	7f 91       	pop	r23
    1854:	6f 91       	pop	r22
    1856:	5f 91       	pop	r21
    1858:	4f 91       	pop	r20
    185a:	3f 91       	pop	r19
    185c:	2f 91       	pop	r18
    185e:	0f 90       	pop	r0
    1860:	0b be       	out	0x3b, r0	; 59
    1862:	0f 90       	pop	r0
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	0f 90       	pop	r0
    1868:	1f 90       	pop	r1
    186a:	18 95       	reti

0000186c <__vector_18>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCC_vect)      /* Compare or Capture C Interrupt */
    186c:	1f 92       	push	r1
    186e:	0f 92       	push	r0
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	0f 92       	push	r0
    1874:	11 24       	eor	r1, r1
    1876:	0b b6       	in	r0, 0x3b	; 59
    1878:	0f 92       	push	r0
    187a:	2f 93       	push	r18
    187c:	3f 93       	push	r19
    187e:	4f 93       	push	r20
    1880:	5f 93       	push	r21
    1882:	6f 93       	push	r22
    1884:	7f 93       	push	r23
    1886:	8f 93       	push	r24
    1888:	9f 93       	push	r25
    188a:	af 93       	push	r26
    188c:	bf 93       	push	r27
    188e:	ef 93       	push	r30
    1890:	ff 93       	push	r31
    1892:	e0 91 15 21 	lds	r30, 0x2115
    1896:	f0 91 16 21 	lds	r31, 0x2116
    189a:	30 97       	sbiw	r30, 0x00	; 0
    189c:	29 f0       	breq	.+10     	; 0x18a8 <__vector_18+0x3c>
    189e:	80 91 0b 22 	lds	r24, 0x220B
    18a2:	90 91 0c 22 	lds	r25, 0x220C
    18a6:	19 95       	eicall
    18a8:	ff 91       	pop	r31
    18aa:	ef 91       	pop	r30
    18ac:	bf 91       	pop	r27
    18ae:	af 91       	pop	r26
    18b0:	9f 91       	pop	r25
    18b2:	8f 91       	pop	r24
    18b4:	7f 91       	pop	r23
    18b6:	6f 91       	pop	r22
    18b8:	5f 91       	pop	r21
    18ba:	4f 91       	pop	r20
    18bc:	3f 91       	pop	r19
    18be:	2f 91       	pop	r18
    18c0:	0f 90       	pop	r0
    18c2:	0b be       	out	0x3b, r0	; 59
    18c4:	0f 90       	pop	r0
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	0f 90       	pop	r0
    18ca:	1f 90       	pop	r1
    18cc:	18 95       	reti

000018ce <__vector_19>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCD_vect)      /* Compare or Capture D Interrupt */
    18ce:	1f 92       	push	r1
    18d0:	0f 92       	push	r0
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	0f 92       	push	r0
    18d6:	11 24       	eor	r1, r1
    18d8:	0b b6       	in	r0, 0x3b	; 59
    18da:	0f 92       	push	r0
    18dc:	2f 93       	push	r18
    18de:	3f 93       	push	r19
    18e0:	4f 93       	push	r20
    18e2:	5f 93       	push	r21
    18e4:	6f 93       	push	r22
    18e6:	7f 93       	push	r23
    18e8:	8f 93       	push	r24
    18ea:	9f 93       	push	r25
    18ec:	af 93       	push	r26
    18ee:	bf 93       	push	r27
    18f0:	ef 93       	push	r30
    18f2:	ff 93       	push	r31
    18f4:	e0 91 17 21 	lds	r30, 0x2117
    18f8:	f0 91 18 21 	lds	r31, 0x2118
    18fc:	30 97       	sbiw	r30, 0x00	; 0
    18fe:	29 f0       	breq	.+10     	; 0x190a <__vector_19+0x3c>
    1900:	80 91 0d 22 	lds	r24, 0x220D
    1904:	90 91 0e 22 	lds	r25, 0x220E
    1908:	19 95       	eicall
    190a:	ff 91       	pop	r31
    190c:	ef 91       	pop	r30
    190e:	bf 91       	pop	r27
    1910:	af 91       	pop	r26
    1912:	9f 91       	pop	r25
    1914:	8f 91       	pop	r24
    1916:	7f 91       	pop	r23
    1918:	6f 91       	pop	r22
    191a:	5f 91       	pop	r21
    191c:	4f 91       	pop	r20
    191e:	3f 91       	pop	r19
    1920:	2f 91       	pop	r18
    1922:	0f 90       	pop	r0
    1924:	0b be       	out	0x3b, r0	; 59
    1926:	0f 90       	pop	r0
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	0f 90       	pop	r0
    192c:	1f 90       	pop	r1
    192e:	18 95       	reti

00001930 <__vector_20>:

/* TCC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_OVF_vect)      /* Overflow Interrupt */
    1930:	1f 92       	push	r1
    1932:	0f 92       	push	r0
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	0f 92       	push	r0
    1938:	11 24       	eor	r1, r1
    193a:	0b b6       	in	r0, 0x3b	; 59
    193c:	0f 92       	push	r0
    193e:	2f 93       	push	r18
    1940:	3f 93       	push	r19
    1942:	4f 93       	push	r20
    1944:	5f 93       	push	r21
    1946:	6f 93       	push	r22
    1948:	7f 93       	push	r23
    194a:	8f 93       	push	r24
    194c:	9f 93       	push	r25
    194e:	af 93       	push	r26
    1950:	bf 93       	push	r27
    1952:	ef 93       	push	r30
    1954:	ff 93       	push	r31
    1956:	e0 91 19 21 	lds	r30, 0x2119
    195a:	f0 91 1a 21 	lds	r31, 0x211A
    195e:	30 97       	sbiw	r30, 0x00	; 0
    1960:	29 f0       	breq	.+10     	; 0x196c <__vector_20+0x3c>
    1962:	80 91 0f 22 	lds	r24, 0x220F
    1966:	90 91 10 22 	lds	r25, 0x2210
    196a:	19 95       	eicall
    196c:	ff 91       	pop	r31
    196e:	ef 91       	pop	r30
    1970:	bf 91       	pop	r27
    1972:	af 91       	pop	r26
    1974:	9f 91       	pop	r25
    1976:	8f 91       	pop	r24
    1978:	7f 91       	pop	r23
    197a:	6f 91       	pop	r22
    197c:	5f 91       	pop	r21
    197e:	4f 91       	pop	r20
    1980:	3f 91       	pop	r19
    1982:	2f 91       	pop	r18
    1984:	0f 90       	pop	r0
    1986:	0b be       	out	0x3b, r0	; 59
    1988:	0f 90       	pop	r0
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	0f 90       	pop	r0
    198e:	1f 90       	pop	r1
    1990:	18 95       	reti

00001992 <__vector_21>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_ERR_vect)      /* Error Interrupt */
    1992:	1f 92       	push	r1
    1994:	0f 92       	push	r0
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	0f 92       	push	r0
    199a:	11 24       	eor	r1, r1
    199c:	0b b6       	in	r0, 0x3b	; 59
    199e:	0f 92       	push	r0
    19a0:	2f 93       	push	r18
    19a2:	3f 93       	push	r19
    19a4:	4f 93       	push	r20
    19a6:	5f 93       	push	r21
    19a8:	6f 93       	push	r22
    19aa:	7f 93       	push	r23
    19ac:	8f 93       	push	r24
    19ae:	9f 93       	push	r25
    19b0:	af 93       	push	r26
    19b2:	bf 93       	push	r27
    19b4:	ef 93       	push	r30
    19b6:	ff 93       	push	r31
    19b8:	e0 91 1b 21 	lds	r30, 0x211B
    19bc:	f0 91 1c 21 	lds	r31, 0x211C
    19c0:	30 97       	sbiw	r30, 0x00	; 0
    19c2:	29 f0       	breq	.+10     	; 0x19ce <__vector_21+0x3c>
    19c4:	80 91 11 22 	lds	r24, 0x2211
    19c8:	90 91 12 22 	lds	r25, 0x2212
    19cc:	19 95       	eicall
    19ce:	ff 91       	pop	r31
    19d0:	ef 91       	pop	r30
    19d2:	bf 91       	pop	r27
    19d4:	af 91       	pop	r26
    19d6:	9f 91       	pop	r25
    19d8:	8f 91       	pop	r24
    19da:	7f 91       	pop	r23
    19dc:	6f 91       	pop	r22
    19de:	5f 91       	pop	r21
    19e0:	4f 91       	pop	r20
    19e2:	3f 91       	pop	r19
    19e4:	2f 91       	pop	r18
    19e6:	0f 90       	pop	r0
    19e8:	0b be       	out	0x3b, r0	; 59
    19ea:	0f 90       	pop	r0
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	0f 90       	pop	r0
    19f0:	1f 90       	pop	r1
    19f2:	18 95       	reti

000019f4 <__vector_22>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCA_vect)      /* Compare or Capture A Interrupt */
    19f4:	1f 92       	push	r1
    19f6:	0f 92       	push	r0
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	0f 92       	push	r0
    19fc:	11 24       	eor	r1, r1
    19fe:	0b b6       	in	r0, 0x3b	; 59
    1a00:	0f 92       	push	r0
    1a02:	2f 93       	push	r18
    1a04:	3f 93       	push	r19
    1a06:	4f 93       	push	r20
    1a08:	5f 93       	push	r21
    1a0a:	6f 93       	push	r22
    1a0c:	7f 93       	push	r23
    1a0e:	8f 93       	push	r24
    1a10:	9f 93       	push	r25
    1a12:	af 93       	push	r26
    1a14:	bf 93       	push	r27
    1a16:	ef 93       	push	r30
    1a18:	ff 93       	push	r31
    1a1a:	e0 91 1d 21 	lds	r30, 0x211D
    1a1e:	f0 91 1e 21 	lds	r31, 0x211E
    1a22:	30 97       	sbiw	r30, 0x00	; 0
    1a24:	29 f0       	breq	.+10     	; 0x1a30 <__vector_22+0x3c>
    1a26:	80 91 13 22 	lds	r24, 0x2213
    1a2a:	90 91 14 22 	lds	r25, 0x2214
    1a2e:	19 95       	eicall
    1a30:	ff 91       	pop	r31
    1a32:	ef 91       	pop	r30
    1a34:	bf 91       	pop	r27
    1a36:	af 91       	pop	r26
    1a38:	9f 91       	pop	r25
    1a3a:	8f 91       	pop	r24
    1a3c:	7f 91       	pop	r23
    1a3e:	6f 91       	pop	r22
    1a40:	5f 91       	pop	r21
    1a42:	4f 91       	pop	r20
    1a44:	3f 91       	pop	r19
    1a46:	2f 91       	pop	r18
    1a48:	0f 90       	pop	r0
    1a4a:	0b be       	out	0x3b, r0	; 59
    1a4c:	0f 90       	pop	r0
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	0f 90       	pop	r0
    1a52:	1f 90       	pop	r1
    1a54:	18 95       	reti

00001a56 <__vector_23>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCB_vect)      /* Compare or Capture B Interrupt */
    1a56:	1f 92       	push	r1
    1a58:	0f 92       	push	r0
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	0f 92       	push	r0
    1a5e:	11 24       	eor	r1, r1
    1a60:	0b b6       	in	r0, 0x3b	; 59
    1a62:	0f 92       	push	r0
    1a64:	2f 93       	push	r18
    1a66:	3f 93       	push	r19
    1a68:	4f 93       	push	r20
    1a6a:	5f 93       	push	r21
    1a6c:	6f 93       	push	r22
    1a6e:	7f 93       	push	r23
    1a70:	8f 93       	push	r24
    1a72:	9f 93       	push	r25
    1a74:	af 93       	push	r26
    1a76:	bf 93       	push	r27
    1a78:	ef 93       	push	r30
    1a7a:	ff 93       	push	r31
    1a7c:	e0 91 1f 21 	lds	r30, 0x211F
    1a80:	f0 91 20 21 	lds	r31, 0x2120
    1a84:	30 97       	sbiw	r30, 0x00	; 0
    1a86:	29 f0       	breq	.+10     	; 0x1a92 <__vector_23+0x3c>
    1a88:	80 91 15 22 	lds	r24, 0x2215
    1a8c:	90 91 16 22 	lds	r25, 0x2216
    1a90:	19 95       	eicall
    1a92:	ff 91       	pop	r31
    1a94:	ef 91       	pop	r30
    1a96:	bf 91       	pop	r27
    1a98:	af 91       	pop	r26
    1a9a:	9f 91       	pop	r25
    1a9c:	8f 91       	pop	r24
    1a9e:	7f 91       	pop	r23
    1aa0:	6f 91       	pop	r22
    1aa2:	5f 91       	pop	r21
    1aa4:	4f 91       	pop	r20
    1aa6:	3f 91       	pop	r19
    1aa8:	2f 91       	pop	r18
    1aaa:	0f 90       	pop	r0
    1aac:	0b be       	out	0x3b, r0	; 59
    1aae:	0f 90       	pop	r0
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	0f 90       	pop	r0
    1ab4:	1f 90       	pop	r1
    1ab6:	18 95       	reti

00001ab8 <__vector_24>:

/* SPIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIC_INT_vect)      /* SPI Interrupt */
    1ab8:	1f 92       	push	r1
    1aba:	0f 92       	push	r0
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	0f 92       	push	r0
    1ac0:	11 24       	eor	r1, r1
    1ac2:	0b b6       	in	r0, 0x3b	; 59
    1ac4:	0f 92       	push	r0
    1ac6:	2f 93       	push	r18
    1ac8:	3f 93       	push	r19
    1aca:	4f 93       	push	r20
    1acc:	5f 93       	push	r21
    1ace:	6f 93       	push	r22
    1ad0:	7f 93       	push	r23
    1ad2:	8f 93       	push	r24
    1ad4:	9f 93       	push	r25
    1ad6:	af 93       	push	r26
    1ad8:	bf 93       	push	r27
    1ada:	ef 93       	push	r30
    1adc:	ff 93       	push	r31
    1ade:	e0 91 21 21 	lds	r30, 0x2121
    1ae2:	f0 91 22 21 	lds	r31, 0x2122
    1ae6:	30 97       	sbiw	r30, 0x00	; 0
    1ae8:	29 f0       	breq	.+10     	; 0x1af4 <__vector_24+0x3c>
    1aea:	80 91 17 22 	lds	r24, 0x2217
    1aee:	90 91 18 22 	lds	r25, 0x2218
    1af2:	19 95       	eicall
    1af4:	ff 91       	pop	r31
    1af6:	ef 91       	pop	r30
    1af8:	bf 91       	pop	r27
    1afa:	af 91       	pop	r26
    1afc:	9f 91       	pop	r25
    1afe:	8f 91       	pop	r24
    1b00:	7f 91       	pop	r23
    1b02:	6f 91       	pop	r22
    1b04:	5f 91       	pop	r21
    1b06:	4f 91       	pop	r20
    1b08:	3f 91       	pop	r19
    1b0a:	2f 91       	pop	r18
    1b0c:	0f 90       	pop	r0
    1b0e:	0b be       	out	0x3b, r0	; 59
    1b10:	0f 90       	pop	r0
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	0f 90       	pop	r0
    1b16:	1f 90       	pop	r1
    1b18:	18 95       	reti

00001b1a <__vector_25>:

/* USARTC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_RXC_vect)      /* Reception Complete Interrupt */
    1b1a:	1f 92       	push	r1
    1b1c:	0f 92       	push	r0
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	0f 92       	push	r0
    1b22:	11 24       	eor	r1, r1
    1b24:	0b b6       	in	r0, 0x3b	; 59
    1b26:	0f 92       	push	r0
    1b28:	2f 93       	push	r18
    1b2a:	3f 93       	push	r19
    1b2c:	4f 93       	push	r20
    1b2e:	5f 93       	push	r21
    1b30:	6f 93       	push	r22
    1b32:	7f 93       	push	r23
    1b34:	8f 93       	push	r24
    1b36:	9f 93       	push	r25
    1b38:	af 93       	push	r26
    1b3a:	bf 93       	push	r27
    1b3c:	ef 93       	push	r30
    1b3e:	ff 93       	push	r31
    1b40:	e0 91 23 21 	lds	r30, 0x2123
    1b44:	f0 91 24 21 	lds	r31, 0x2124
    1b48:	30 97       	sbiw	r30, 0x00	; 0
    1b4a:	29 f0       	breq	.+10     	; 0x1b56 <__vector_25+0x3c>
    1b4c:	80 91 19 22 	lds	r24, 0x2219
    1b50:	90 91 1a 22 	lds	r25, 0x221A
    1b54:	19 95       	eicall
    1b56:	ff 91       	pop	r31
    1b58:	ef 91       	pop	r30
    1b5a:	bf 91       	pop	r27
    1b5c:	af 91       	pop	r26
    1b5e:	9f 91       	pop	r25
    1b60:	8f 91       	pop	r24
    1b62:	7f 91       	pop	r23
    1b64:	6f 91       	pop	r22
    1b66:	5f 91       	pop	r21
    1b68:	4f 91       	pop	r20
    1b6a:	3f 91       	pop	r19
    1b6c:	2f 91       	pop	r18
    1b6e:	0f 90       	pop	r0
    1b70:	0b be       	out	0x3b, r0	; 59
    1b72:	0f 90       	pop	r0
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	0f 90       	pop	r0
    1b78:	1f 90       	pop	r1
    1b7a:	18 95       	reti

00001b7c <__vector_26>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_DRE_vect)      /* Data Register Empty Interrupt */
    1b7c:	1f 92       	push	r1
    1b7e:	0f 92       	push	r0
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	0f 92       	push	r0
    1b84:	11 24       	eor	r1, r1
    1b86:	0b b6       	in	r0, 0x3b	; 59
    1b88:	0f 92       	push	r0
    1b8a:	2f 93       	push	r18
    1b8c:	3f 93       	push	r19
    1b8e:	4f 93       	push	r20
    1b90:	5f 93       	push	r21
    1b92:	6f 93       	push	r22
    1b94:	7f 93       	push	r23
    1b96:	8f 93       	push	r24
    1b98:	9f 93       	push	r25
    1b9a:	af 93       	push	r26
    1b9c:	bf 93       	push	r27
    1b9e:	ef 93       	push	r30
    1ba0:	ff 93       	push	r31
    1ba2:	e0 91 25 21 	lds	r30, 0x2125
    1ba6:	f0 91 26 21 	lds	r31, 0x2126
    1baa:	30 97       	sbiw	r30, 0x00	; 0
    1bac:	29 f0       	breq	.+10     	; 0x1bb8 <__vector_26+0x3c>
    1bae:	80 91 1b 22 	lds	r24, 0x221B
    1bb2:	90 91 1c 22 	lds	r25, 0x221C
    1bb6:	19 95       	eicall
    1bb8:	ff 91       	pop	r31
    1bba:	ef 91       	pop	r30
    1bbc:	bf 91       	pop	r27
    1bbe:	af 91       	pop	r26
    1bc0:	9f 91       	pop	r25
    1bc2:	8f 91       	pop	r24
    1bc4:	7f 91       	pop	r23
    1bc6:	6f 91       	pop	r22
    1bc8:	5f 91       	pop	r21
    1bca:	4f 91       	pop	r20
    1bcc:	3f 91       	pop	r19
    1bce:	2f 91       	pop	r18
    1bd0:	0f 90       	pop	r0
    1bd2:	0b be       	out	0x3b, r0	; 59
    1bd4:	0f 90       	pop	r0
    1bd6:	0f be       	out	0x3f, r0	; 63
    1bd8:	0f 90       	pop	r0
    1bda:	1f 90       	pop	r1
    1bdc:	18 95       	reti

00001bde <__vector_27>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_TXC_vect)      /* Transmission Complete Interrupt */
    1bde:	1f 92       	push	r1
    1be0:	0f 92       	push	r0
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	0f 92       	push	r0
    1be6:	11 24       	eor	r1, r1
    1be8:	0b b6       	in	r0, 0x3b	; 59
    1bea:	0f 92       	push	r0
    1bec:	2f 93       	push	r18
    1bee:	3f 93       	push	r19
    1bf0:	4f 93       	push	r20
    1bf2:	5f 93       	push	r21
    1bf4:	6f 93       	push	r22
    1bf6:	7f 93       	push	r23
    1bf8:	8f 93       	push	r24
    1bfa:	9f 93       	push	r25
    1bfc:	af 93       	push	r26
    1bfe:	bf 93       	push	r27
    1c00:	ef 93       	push	r30
    1c02:	ff 93       	push	r31
    1c04:	e0 91 27 21 	lds	r30, 0x2127
    1c08:	f0 91 28 21 	lds	r31, 0x2128
    1c0c:	30 97       	sbiw	r30, 0x00	; 0
    1c0e:	29 f0       	breq	.+10     	; 0x1c1a <__vector_27+0x3c>
    1c10:	80 91 1d 22 	lds	r24, 0x221D
    1c14:	90 91 1e 22 	lds	r25, 0x221E
    1c18:	19 95       	eicall
    1c1a:	ff 91       	pop	r31
    1c1c:	ef 91       	pop	r30
    1c1e:	bf 91       	pop	r27
    1c20:	af 91       	pop	r26
    1c22:	9f 91       	pop	r25
    1c24:	8f 91       	pop	r24
    1c26:	7f 91       	pop	r23
    1c28:	6f 91       	pop	r22
    1c2a:	5f 91       	pop	r21
    1c2c:	4f 91       	pop	r20
    1c2e:	3f 91       	pop	r19
    1c30:	2f 91       	pop	r18
    1c32:	0f 90       	pop	r0
    1c34:	0b be       	out	0x3b, r0	; 59
    1c36:	0f 90       	pop	r0
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	0f 90       	pop	r0
    1c3c:	1f 90       	pop	r1
    1c3e:	18 95       	reti

00001c40 <__vector_28>:

/* USARTC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_RXC_vect)      /* Reception Complete Interrupt */
    1c40:	1f 92       	push	r1
    1c42:	0f 92       	push	r0
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	0f 92       	push	r0
    1c48:	11 24       	eor	r1, r1
    1c4a:	0b b6       	in	r0, 0x3b	; 59
    1c4c:	0f 92       	push	r0
    1c4e:	2f 93       	push	r18
    1c50:	3f 93       	push	r19
    1c52:	4f 93       	push	r20
    1c54:	5f 93       	push	r21
    1c56:	6f 93       	push	r22
    1c58:	7f 93       	push	r23
    1c5a:	8f 93       	push	r24
    1c5c:	9f 93       	push	r25
    1c5e:	af 93       	push	r26
    1c60:	bf 93       	push	r27
    1c62:	ef 93       	push	r30
    1c64:	ff 93       	push	r31
    1c66:	e0 91 29 21 	lds	r30, 0x2129
    1c6a:	f0 91 2a 21 	lds	r31, 0x212A
    1c6e:	30 97       	sbiw	r30, 0x00	; 0
    1c70:	29 f0       	breq	.+10     	; 0x1c7c <__vector_28+0x3c>
    1c72:	80 91 1f 22 	lds	r24, 0x221F
    1c76:	90 91 20 22 	lds	r25, 0x2220
    1c7a:	19 95       	eicall
    1c7c:	ff 91       	pop	r31
    1c7e:	ef 91       	pop	r30
    1c80:	bf 91       	pop	r27
    1c82:	af 91       	pop	r26
    1c84:	9f 91       	pop	r25
    1c86:	8f 91       	pop	r24
    1c88:	7f 91       	pop	r23
    1c8a:	6f 91       	pop	r22
    1c8c:	5f 91       	pop	r21
    1c8e:	4f 91       	pop	r20
    1c90:	3f 91       	pop	r19
    1c92:	2f 91       	pop	r18
    1c94:	0f 90       	pop	r0
    1c96:	0b be       	out	0x3b, r0	; 59
    1c98:	0f 90       	pop	r0
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	0f 90       	pop	r0
    1c9e:	1f 90       	pop	r1
    1ca0:	18 95       	reti

00001ca2 <__vector_29>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_DRE_vect)      /* Data Register Empty Interrupt */
    1ca2:	1f 92       	push	r1
    1ca4:	0f 92       	push	r0
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	0f 92       	push	r0
    1caa:	11 24       	eor	r1, r1
    1cac:	0b b6       	in	r0, 0x3b	; 59
    1cae:	0f 92       	push	r0
    1cb0:	2f 93       	push	r18
    1cb2:	3f 93       	push	r19
    1cb4:	4f 93       	push	r20
    1cb6:	5f 93       	push	r21
    1cb8:	6f 93       	push	r22
    1cba:	7f 93       	push	r23
    1cbc:	8f 93       	push	r24
    1cbe:	9f 93       	push	r25
    1cc0:	af 93       	push	r26
    1cc2:	bf 93       	push	r27
    1cc4:	ef 93       	push	r30
    1cc6:	ff 93       	push	r31
    1cc8:	e0 91 2b 21 	lds	r30, 0x212B
    1ccc:	f0 91 2c 21 	lds	r31, 0x212C
    1cd0:	30 97       	sbiw	r30, 0x00	; 0
    1cd2:	29 f0       	breq	.+10     	; 0x1cde <__vector_29+0x3c>
    1cd4:	80 91 21 22 	lds	r24, 0x2221
    1cd8:	90 91 22 22 	lds	r25, 0x2222
    1cdc:	19 95       	eicall
    1cde:	ff 91       	pop	r31
    1ce0:	ef 91       	pop	r30
    1ce2:	bf 91       	pop	r27
    1ce4:	af 91       	pop	r26
    1ce6:	9f 91       	pop	r25
    1ce8:	8f 91       	pop	r24
    1cea:	7f 91       	pop	r23
    1cec:	6f 91       	pop	r22
    1cee:	5f 91       	pop	r21
    1cf0:	4f 91       	pop	r20
    1cf2:	3f 91       	pop	r19
    1cf4:	2f 91       	pop	r18
    1cf6:	0f 90       	pop	r0
    1cf8:	0b be       	out	0x3b, r0	; 59
    1cfa:	0f 90       	pop	r0
    1cfc:	0f be       	out	0x3f, r0	; 63
    1cfe:	0f 90       	pop	r0
    1d00:	1f 90       	pop	r1
    1d02:	18 95       	reti

00001d04 <__vector_30>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_TXC_vect)      /* Transmission Complete Interrupt */
    1d04:	1f 92       	push	r1
    1d06:	0f 92       	push	r0
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	0f 92       	push	r0
    1d0c:	11 24       	eor	r1, r1
    1d0e:	0b b6       	in	r0, 0x3b	; 59
    1d10:	0f 92       	push	r0
    1d12:	2f 93       	push	r18
    1d14:	3f 93       	push	r19
    1d16:	4f 93       	push	r20
    1d18:	5f 93       	push	r21
    1d1a:	6f 93       	push	r22
    1d1c:	7f 93       	push	r23
    1d1e:	8f 93       	push	r24
    1d20:	9f 93       	push	r25
    1d22:	af 93       	push	r26
    1d24:	bf 93       	push	r27
    1d26:	ef 93       	push	r30
    1d28:	ff 93       	push	r31
    1d2a:	e0 91 2d 21 	lds	r30, 0x212D
    1d2e:	f0 91 2e 21 	lds	r31, 0x212E
    1d32:	30 97       	sbiw	r30, 0x00	; 0
    1d34:	29 f0       	breq	.+10     	; 0x1d40 <__vector_30+0x3c>
    1d36:	80 91 23 22 	lds	r24, 0x2223
    1d3a:	90 91 24 22 	lds	r25, 0x2224
    1d3e:	19 95       	eicall
    1d40:	ff 91       	pop	r31
    1d42:	ef 91       	pop	r30
    1d44:	bf 91       	pop	r27
    1d46:	af 91       	pop	r26
    1d48:	9f 91       	pop	r25
    1d4a:	8f 91       	pop	r24
    1d4c:	7f 91       	pop	r23
    1d4e:	6f 91       	pop	r22
    1d50:	5f 91       	pop	r21
    1d52:	4f 91       	pop	r20
    1d54:	3f 91       	pop	r19
    1d56:	2f 91       	pop	r18
    1d58:	0f 90       	pop	r0
    1d5a:	0b be       	out	0x3b, r0	; 59
    1d5c:	0f 90       	pop	r0
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	0f 90       	pop	r0
    1d62:	1f 90       	pop	r1
    1d64:	18 95       	reti

00001d66 <__vector_31>:

/* AES interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(AES_INT_vect)      /* AES Interrupt */
    1d66:	1f 92       	push	r1
    1d68:	0f 92       	push	r0
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	0f 92       	push	r0
    1d6e:	11 24       	eor	r1, r1
    1d70:	0b b6       	in	r0, 0x3b	; 59
    1d72:	0f 92       	push	r0
    1d74:	2f 93       	push	r18
    1d76:	3f 93       	push	r19
    1d78:	4f 93       	push	r20
    1d7a:	5f 93       	push	r21
    1d7c:	6f 93       	push	r22
    1d7e:	7f 93       	push	r23
    1d80:	8f 93       	push	r24
    1d82:	9f 93       	push	r25
    1d84:	af 93       	push	r26
    1d86:	bf 93       	push	r27
    1d88:	ef 93       	push	r30
    1d8a:	ff 93       	push	r31
    1d8c:	e0 91 2f 21 	lds	r30, 0x212F
    1d90:	f0 91 30 21 	lds	r31, 0x2130
    1d94:	30 97       	sbiw	r30, 0x00	; 0
    1d96:	29 f0       	breq	.+10     	; 0x1da2 <__vector_31+0x3c>
    1d98:	80 91 25 22 	lds	r24, 0x2225
    1d9c:	90 91 26 22 	lds	r25, 0x2226
    1da0:	19 95       	eicall
    1da2:	ff 91       	pop	r31
    1da4:	ef 91       	pop	r30
    1da6:	bf 91       	pop	r27
    1da8:	af 91       	pop	r26
    1daa:	9f 91       	pop	r25
    1dac:	8f 91       	pop	r24
    1dae:	7f 91       	pop	r23
    1db0:	6f 91       	pop	r22
    1db2:	5f 91       	pop	r21
    1db4:	4f 91       	pop	r20
    1db6:	3f 91       	pop	r19
    1db8:	2f 91       	pop	r18
    1dba:	0f 90       	pop	r0
    1dbc:	0b be       	out	0x3b, r0	; 59
    1dbe:	0f 90       	pop	r0
    1dc0:	0f be       	out	0x3f, r0	; 63
    1dc2:	0f 90       	pop	r0
    1dc4:	1f 90       	pop	r1
    1dc6:	18 95       	reti

00001dc8 <__vector_32>:

/* NVM interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_EE_vect)      /* EE Interrupt */
    1dc8:	1f 92       	push	r1
    1dca:	0f 92       	push	r0
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	0f 92       	push	r0
    1dd0:	11 24       	eor	r1, r1
    1dd2:	0b b6       	in	r0, 0x3b	; 59
    1dd4:	0f 92       	push	r0
    1dd6:	2f 93       	push	r18
    1dd8:	3f 93       	push	r19
    1dda:	4f 93       	push	r20
    1ddc:	5f 93       	push	r21
    1dde:	6f 93       	push	r22
    1de0:	7f 93       	push	r23
    1de2:	8f 93       	push	r24
    1de4:	9f 93       	push	r25
    1de6:	af 93       	push	r26
    1de8:	bf 93       	push	r27
    1dea:	ef 93       	push	r30
    1dec:	ff 93       	push	r31
    1dee:	e0 91 31 21 	lds	r30, 0x2131
    1df2:	f0 91 32 21 	lds	r31, 0x2132
    1df6:	30 97       	sbiw	r30, 0x00	; 0
    1df8:	29 f0       	breq	.+10     	; 0x1e04 <__vector_32+0x3c>
    1dfa:	80 91 27 22 	lds	r24, 0x2227
    1dfe:	90 91 28 22 	lds	r25, 0x2228
    1e02:	19 95       	eicall
    1e04:	ff 91       	pop	r31
    1e06:	ef 91       	pop	r30
    1e08:	bf 91       	pop	r27
    1e0a:	af 91       	pop	r26
    1e0c:	9f 91       	pop	r25
    1e0e:	8f 91       	pop	r24
    1e10:	7f 91       	pop	r23
    1e12:	6f 91       	pop	r22
    1e14:	5f 91       	pop	r21
    1e16:	4f 91       	pop	r20
    1e18:	3f 91       	pop	r19
    1e1a:	2f 91       	pop	r18
    1e1c:	0f 90       	pop	r0
    1e1e:	0b be       	out	0x3b, r0	; 59
    1e20:	0f 90       	pop	r0
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	0f 90       	pop	r0
    1e26:	1f 90       	pop	r1
    1e28:	18 95       	reti

00001e2a <__vector_33>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_SPM_vect)      /* SPM Interrupt */
    1e2a:	1f 92       	push	r1
    1e2c:	0f 92       	push	r0
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	0f 92       	push	r0
    1e32:	11 24       	eor	r1, r1
    1e34:	0b b6       	in	r0, 0x3b	; 59
    1e36:	0f 92       	push	r0
    1e38:	2f 93       	push	r18
    1e3a:	3f 93       	push	r19
    1e3c:	4f 93       	push	r20
    1e3e:	5f 93       	push	r21
    1e40:	6f 93       	push	r22
    1e42:	7f 93       	push	r23
    1e44:	8f 93       	push	r24
    1e46:	9f 93       	push	r25
    1e48:	af 93       	push	r26
    1e4a:	bf 93       	push	r27
    1e4c:	ef 93       	push	r30
    1e4e:	ff 93       	push	r31
    1e50:	e0 91 33 21 	lds	r30, 0x2133
    1e54:	f0 91 34 21 	lds	r31, 0x2134
    1e58:	30 97       	sbiw	r30, 0x00	; 0
    1e5a:	29 f0       	breq	.+10     	; 0x1e66 <__vector_33+0x3c>
    1e5c:	80 91 29 22 	lds	r24, 0x2229
    1e60:	90 91 2a 22 	lds	r25, 0x222A
    1e64:	19 95       	eicall
    1e66:	ff 91       	pop	r31
    1e68:	ef 91       	pop	r30
    1e6a:	bf 91       	pop	r27
    1e6c:	af 91       	pop	r26
    1e6e:	9f 91       	pop	r25
    1e70:	8f 91       	pop	r24
    1e72:	7f 91       	pop	r23
    1e74:	6f 91       	pop	r22
    1e76:	5f 91       	pop	r21
    1e78:	4f 91       	pop	r20
    1e7a:	3f 91       	pop	r19
    1e7c:	2f 91       	pop	r18
    1e7e:	0f 90       	pop	r0
    1e80:	0b be       	out	0x3b, r0	; 59
    1e82:	0f 90       	pop	r0
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	0f 90       	pop	r0
    1e88:	1f 90       	pop	r1
    1e8a:	18 95       	reti

00001e8c <__vector_34>:

/* PORTB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT0_vect)      /* External Interrupt 0 */
    1e8c:	1f 92       	push	r1
    1e8e:	0f 92       	push	r0
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	0f 92       	push	r0
    1e94:	11 24       	eor	r1, r1
    1e96:	0b b6       	in	r0, 0x3b	; 59
    1e98:	0f 92       	push	r0
    1e9a:	2f 93       	push	r18
    1e9c:	3f 93       	push	r19
    1e9e:	4f 93       	push	r20
    1ea0:	5f 93       	push	r21
    1ea2:	6f 93       	push	r22
    1ea4:	7f 93       	push	r23
    1ea6:	8f 93       	push	r24
    1ea8:	9f 93       	push	r25
    1eaa:	af 93       	push	r26
    1eac:	bf 93       	push	r27
    1eae:	ef 93       	push	r30
    1eb0:	ff 93       	push	r31
    1eb2:	e0 91 35 21 	lds	r30, 0x2135
    1eb6:	f0 91 36 21 	lds	r31, 0x2136
    1eba:	30 97       	sbiw	r30, 0x00	; 0
    1ebc:	29 f0       	breq	.+10     	; 0x1ec8 <__vector_34+0x3c>
    1ebe:	80 91 2b 22 	lds	r24, 0x222B
    1ec2:	90 91 2c 22 	lds	r25, 0x222C
    1ec6:	19 95       	eicall
    1ec8:	ff 91       	pop	r31
    1eca:	ef 91       	pop	r30
    1ecc:	bf 91       	pop	r27
    1ece:	af 91       	pop	r26
    1ed0:	9f 91       	pop	r25
    1ed2:	8f 91       	pop	r24
    1ed4:	7f 91       	pop	r23
    1ed6:	6f 91       	pop	r22
    1ed8:	5f 91       	pop	r21
    1eda:	4f 91       	pop	r20
    1edc:	3f 91       	pop	r19
    1ede:	2f 91       	pop	r18
    1ee0:	0f 90       	pop	r0
    1ee2:	0b be       	out	0x3b, r0	; 59
    1ee4:	0f 90       	pop	r0
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	0f 90       	pop	r0
    1eea:	1f 90       	pop	r1
    1eec:	18 95       	reti

00001eee <__vector_35>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT1_vect)      /* External Interrupt 1 */
    1eee:	1f 92       	push	r1
    1ef0:	0f 92       	push	r0
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	0f 92       	push	r0
    1ef6:	11 24       	eor	r1, r1
    1ef8:	0b b6       	in	r0, 0x3b	; 59
    1efa:	0f 92       	push	r0
    1efc:	2f 93       	push	r18
    1efe:	3f 93       	push	r19
    1f00:	4f 93       	push	r20
    1f02:	5f 93       	push	r21
    1f04:	6f 93       	push	r22
    1f06:	7f 93       	push	r23
    1f08:	8f 93       	push	r24
    1f0a:	9f 93       	push	r25
    1f0c:	af 93       	push	r26
    1f0e:	bf 93       	push	r27
    1f10:	ef 93       	push	r30
    1f12:	ff 93       	push	r31
    1f14:	e0 91 37 21 	lds	r30, 0x2137
    1f18:	f0 91 38 21 	lds	r31, 0x2138
    1f1c:	30 97       	sbiw	r30, 0x00	; 0
    1f1e:	29 f0       	breq	.+10     	; 0x1f2a <__vector_35+0x3c>
    1f20:	80 91 2d 22 	lds	r24, 0x222D
    1f24:	90 91 2e 22 	lds	r25, 0x222E
    1f28:	19 95       	eicall
    1f2a:	ff 91       	pop	r31
    1f2c:	ef 91       	pop	r30
    1f2e:	bf 91       	pop	r27
    1f30:	af 91       	pop	r26
    1f32:	9f 91       	pop	r25
    1f34:	8f 91       	pop	r24
    1f36:	7f 91       	pop	r23
    1f38:	6f 91       	pop	r22
    1f3a:	5f 91       	pop	r21
    1f3c:	4f 91       	pop	r20
    1f3e:	3f 91       	pop	r19
    1f40:	2f 91       	pop	r18
    1f42:	0f 90       	pop	r0
    1f44:	0b be       	out	0x3b, r0	; 59
    1f46:	0f 90       	pop	r0
    1f48:	0f be       	out	0x3f, r0	; 63
    1f4a:	0f 90       	pop	r0
    1f4c:	1f 90       	pop	r1
    1f4e:	18 95       	reti

00001f50 <__vector_36>:

/* ACB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC0_vect)      /* AC0 Interrupt */
    1f50:	1f 92       	push	r1
    1f52:	0f 92       	push	r0
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	0f 92       	push	r0
    1f58:	11 24       	eor	r1, r1
    1f5a:	0b b6       	in	r0, 0x3b	; 59
    1f5c:	0f 92       	push	r0
    1f5e:	2f 93       	push	r18
    1f60:	3f 93       	push	r19
    1f62:	4f 93       	push	r20
    1f64:	5f 93       	push	r21
    1f66:	6f 93       	push	r22
    1f68:	7f 93       	push	r23
    1f6a:	8f 93       	push	r24
    1f6c:	9f 93       	push	r25
    1f6e:	af 93       	push	r26
    1f70:	bf 93       	push	r27
    1f72:	ef 93       	push	r30
    1f74:	ff 93       	push	r31
    1f76:	e0 91 39 21 	lds	r30, 0x2139
    1f7a:	f0 91 3a 21 	lds	r31, 0x213A
    1f7e:	30 97       	sbiw	r30, 0x00	; 0
    1f80:	29 f0       	breq	.+10     	; 0x1f8c <__vector_36+0x3c>
    1f82:	80 91 2f 22 	lds	r24, 0x222F
    1f86:	90 91 30 22 	lds	r25, 0x2230
    1f8a:	19 95       	eicall
    1f8c:	ff 91       	pop	r31
    1f8e:	ef 91       	pop	r30
    1f90:	bf 91       	pop	r27
    1f92:	af 91       	pop	r26
    1f94:	9f 91       	pop	r25
    1f96:	8f 91       	pop	r24
    1f98:	7f 91       	pop	r23
    1f9a:	6f 91       	pop	r22
    1f9c:	5f 91       	pop	r21
    1f9e:	4f 91       	pop	r20
    1fa0:	3f 91       	pop	r19
    1fa2:	2f 91       	pop	r18
    1fa4:	0f 90       	pop	r0
    1fa6:	0b be       	out	0x3b, r0	; 59
    1fa8:	0f 90       	pop	r0
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	0f 90       	pop	r0
    1fae:	1f 90       	pop	r1
    1fb0:	18 95       	reti

00001fb2 <__vector_37>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC1_vect)      /* AC1 Interrupt */
    1fb2:	1f 92       	push	r1
    1fb4:	0f 92       	push	r0
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	0f 92       	push	r0
    1fba:	11 24       	eor	r1, r1
    1fbc:	0b b6       	in	r0, 0x3b	; 59
    1fbe:	0f 92       	push	r0
    1fc0:	2f 93       	push	r18
    1fc2:	3f 93       	push	r19
    1fc4:	4f 93       	push	r20
    1fc6:	5f 93       	push	r21
    1fc8:	6f 93       	push	r22
    1fca:	7f 93       	push	r23
    1fcc:	8f 93       	push	r24
    1fce:	9f 93       	push	r25
    1fd0:	af 93       	push	r26
    1fd2:	bf 93       	push	r27
    1fd4:	ef 93       	push	r30
    1fd6:	ff 93       	push	r31
    1fd8:	e0 91 3b 21 	lds	r30, 0x213B
    1fdc:	f0 91 3c 21 	lds	r31, 0x213C
    1fe0:	30 97       	sbiw	r30, 0x00	; 0
    1fe2:	29 f0       	breq	.+10     	; 0x1fee <__vector_37+0x3c>
    1fe4:	80 91 31 22 	lds	r24, 0x2231
    1fe8:	90 91 32 22 	lds	r25, 0x2232
    1fec:	19 95       	eicall
    1fee:	ff 91       	pop	r31
    1ff0:	ef 91       	pop	r30
    1ff2:	bf 91       	pop	r27
    1ff4:	af 91       	pop	r26
    1ff6:	9f 91       	pop	r25
    1ff8:	8f 91       	pop	r24
    1ffa:	7f 91       	pop	r23
    1ffc:	6f 91       	pop	r22
    1ffe:	5f 91       	pop	r21
    2000:	4f 91       	pop	r20
    2002:	3f 91       	pop	r19
    2004:	2f 91       	pop	r18
    2006:	0f 90       	pop	r0
    2008:	0b be       	out	0x3b, r0	; 59
    200a:	0f 90       	pop	r0
    200c:	0f be       	out	0x3f, r0	; 63
    200e:	0f 90       	pop	r0
    2010:	1f 90       	pop	r1
    2012:	18 95       	reti

00002014 <__vector_38>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_ACW_vect)      /* ACW Window Mode Interrupt */
    2014:	1f 92       	push	r1
    2016:	0f 92       	push	r0
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	0f 92       	push	r0
    201c:	11 24       	eor	r1, r1
    201e:	0b b6       	in	r0, 0x3b	; 59
    2020:	0f 92       	push	r0
    2022:	2f 93       	push	r18
    2024:	3f 93       	push	r19
    2026:	4f 93       	push	r20
    2028:	5f 93       	push	r21
    202a:	6f 93       	push	r22
    202c:	7f 93       	push	r23
    202e:	8f 93       	push	r24
    2030:	9f 93       	push	r25
    2032:	af 93       	push	r26
    2034:	bf 93       	push	r27
    2036:	ef 93       	push	r30
    2038:	ff 93       	push	r31
    203a:	e0 91 3d 21 	lds	r30, 0x213D
    203e:	f0 91 3e 21 	lds	r31, 0x213E
    2042:	30 97       	sbiw	r30, 0x00	; 0
    2044:	29 f0       	breq	.+10     	; 0x2050 <__vector_38+0x3c>
    2046:	80 91 33 22 	lds	r24, 0x2233
    204a:	90 91 34 22 	lds	r25, 0x2234
    204e:	19 95       	eicall
    2050:	ff 91       	pop	r31
    2052:	ef 91       	pop	r30
    2054:	bf 91       	pop	r27
    2056:	af 91       	pop	r26
    2058:	9f 91       	pop	r25
    205a:	8f 91       	pop	r24
    205c:	7f 91       	pop	r23
    205e:	6f 91       	pop	r22
    2060:	5f 91       	pop	r21
    2062:	4f 91       	pop	r20
    2064:	3f 91       	pop	r19
    2066:	2f 91       	pop	r18
    2068:	0f 90       	pop	r0
    206a:	0b be       	out	0x3b, r0	; 59
    206c:	0f 90       	pop	r0
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	0f 90       	pop	r0
    2072:	1f 90       	pop	r1
    2074:	18 95       	reti

00002076 <__vector_39>:

/* ADCB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH0_vect)      /* Interrupt 0 */
    2076:	1f 92       	push	r1
    2078:	0f 92       	push	r0
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	0f 92       	push	r0
    207e:	11 24       	eor	r1, r1
    2080:	0b b6       	in	r0, 0x3b	; 59
    2082:	0f 92       	push	r0
    2084:	2f 93       	push	r18
    2086:	3f 93       	push	r19
    2088:	4f 93       	push	r20
    208a:	5f 93       	push	r21
    208c:	6f 93       	push	r22
    208e:	7f 93       	push	r23
    2090:	8f 93       	push	r24
    2092:	9f 93       	push	r25
    2094:	af 93       	push	r26
    2096:	bf 93       	push	r27
    2098:	ef 93       	push	r30
    209a:	ff 93       	push	r31
    209c:	e0 91 3f 21 	lds	r30, 0x213F
    20a0:	f0 91 40 21 	lds	r31, 0x2140
    20a4:	30 97       	sbiw	r30, 0x00	; 0
    20a6:	29 f0       	breq	.+10     	; 0x20b2 <__vector_39+0x3c>
    20a8:	80 91 35 22 	lds	r24, 0x2235
    20ac:	90 91 36 22 	lds	r25, 0x2236
    20b0:	19 95       	eicall
    20b2:	ff 91       	pop	r31
    20b4:	ef 91       	pop	r30
    20b6:	bf 91       	pop	r27
    20b8:	af 91       	pop	r26
    20ba:	9f 91       	pop	r25
    20bc:	8f 91       	pop	r24
    20be:	7f 91       	pop	r23
    20c0:	6f 91       	pop	r22
    20c2:	5f 91       	pop	r21
    20c4:	4f 91       	pop	r20
    20c6:	3f 91       	pop	r19
    20c8:	2f 91       	pop	r18
    20ca:	0f 90       	pop	r0
    20cc:	0b be       	out	0x3b, r0	; 59
    20ce:	0f 90       	pop	r0
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	0f 90       	pop	r0
    20d4:	1f 90       	pop	r1
    20d6:	18 95       	reti

000020d8 <__vector_40>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH1_vect)      /* Interrupt 1 */
    20d8:	1f 92       	push	r1
    20da:	0f 92       	push	r0
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	0f 92       	push	r0
    20e0:	11 24       	eor	r1, r1
    20e2:	0b b6       	in	r0, 0x3b	; 59
    20e4:	0f 92       	push	r0
    20e6:	2f 93       	push	r18
    20e8:	3f 93       	push	r19
    20ea:	4f 93       	push	r20
    20ec:	5f 93       	push	r21
    20ee:	6f 93       	push	r22
    20f0:	7f 93       	push	r23
    20f2:	8f 93       	push	r24
    20f4:	9f 93       	push	r25
    20f6:	af 93       	push	r26
    20f8:	bf 93       	push	r27
    20fa:	ef 93       	push	r30
    20fc:	ff 93       	push	r31
    20fe:	e0 91 41 21 	lds	r30, 0x2141
    2102:	f0 91 42 21 	lds	r31, 0x2142
    2106:	30 97       	sbiw	r30, 0x00	; 0
    2108:	29 f0       	breq	.+10     	; 0x2114 <__vector_40+0x3c>
    210a:	80 91 37 22 	lds	r24, 0x2237
    210e:	90 91 38 22 	lds	r25, 0x2238
    2112:	19 95       	eicall
    2114:	ff 91       	pop	r31
    2116:	ef 91       	pop	r30
    2118:	bf 91       	pop	r27
    211a:	af 91       	pop	r26
    211c:	9f 91       	pop	r25
    211e:	8f 91       	pop	r24
    2120:	7f 91       	pop	r23
    2122:	6f 91       	pop	r22
    2124:	5f 91       	pop	r21
    2126:	4f 91       	pop	r20
    2128:	3f 91       	pop	r19
    212a:	2f 91       	pop	r18
    212c:	0f 90       	pop	r0
    212e:	0b be       	out	0x3b, r0	; 59
    2130:	0f 90       	pop	r0
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	0f 90       	pop	r0
    2136:	1f 90       	pop	r1
    2138:	18 95       	reti

0000213a <__vector_41>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH2_vect)      /* Interrupt 2 */
    213a:	1f 92       	push	r1
    213c:	0f 92       	push	r0
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	0f 92       	push	r0
    2142:	11 24       	eor	r1, r1
    2144:	0b b6       	in	r0, 0x3b	; 59
    2146:	0f 92       	push	r0
    2148:	2f 93       	push	r18
    214a:	3f 93       	push	r19
    214c:	4f 93       	push	r20
    214e:	5f 93       	push	r21
    2150:	6f 93       	push	r22
    2152:	7f 93       	push	r23
    2154:	8f 93       	push	r24
    2156:	9f 93       	push	r25
    2158:	af 93       	push	r26
    215a:	bf 93       	push	r27
    215c:	ef 93       	push	r30
    215e:	ff 93       	push	r31
    2160:	e0 91 43 21 	lds	r30, 0x2143
    2164:	f0 91 44 21 	lds	r31, 0x2144
    2168:	30 97       	sbiw	r30, 0x00	; 0
    216a:	29 f0       	breq	.+10     	; 0x2176 <__vector_41+0x3c>
    216c:	80 91 39 22 	lds	r24, 0x2239
    2170:	90 91 3a 22 	lds	r25, 0x223A
    2174:	19 95       	eicall
    2176:	ff 91       	pop	r31
    2178:	ef 91       	pop	r30
    217a:	bf 91       	pop	r27
    217c:	af 91       	pop	r26
    217e:	9f 91       	pop	r25
    2180:	8f 91       	pop	r24
    2182:	7f 91       	pop	r23
    2184:	6f 91       	pop	r22
    2186:	5f 91       	pop	r21
    2188:	4f 91       	pop	r20
    218a:	3f 91       	pop	r19
    218c:	2f 91       	pop	r18
    218e:	0f 90       	pop	r0
    2190:	0b be       	out	0x3b, r0	; 59
    2192:	0f 90       	pop	r0
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	0f 90       	pop	r0
    2198:	1f 90       	pop	r1
    219a:	18 95       	reti

0000219c <__vector_42>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH3_vect)      /* Interrupt 3 */
    219c:	1f 92       	push	r1
    219e:	0f 92       	push	r0
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	0f 92       	push	r0
    21a4:	11 24       	eor	r1, r1
    21a6:	0b b6       	in	r0, 0x3b	; 59
    21a8:	0f 92       	push	r0
    21aa:	2f 93       	push	r18
    21ac:	3f 93       	push	r19
    21ae:	4f 93       	push	r20
    21b0:	5f 93       	push	r21
    21b2:	6f 93       	push	r22
    21b4:	7f 93       	push	r23
    21b6:	8f 93       	push	r24
    21b8:	9f 93       	push	r25
    21ba:	af 93       	push	r26
    21bc:	bf 93       	push	r27
    21be:	ef 93       	push	r30
    21c0:	ff 93       	push	r31
    21c2:	e0 91 45 21 	lds	r30, 0x2145
    21c6:	f0 91 46 21 	lds	r31, 0x2146
    21ca:	30 97       	sbiw	r30, 0x00	; 0
    21cc:	29 f0       	breq	.+10     	; 0x21d8 <__vector_42+0x3c>
    21ce:	80 91 3b 22 	lds	r24, 0x223B
    21d2:	90 91 3c 22 	lds	r25, 0x223C
    21d6:	19 95       	eicall
    21d8:	ff 91       	pop	r31
    21da:	ef 91       	pop	r30
    21dc:	bf 91       	pop	r27
    21de:	af 91       	pop	r26
    21e0:	9f 91       	pop	r25
    21e2:	8f 91       	pop	r24
    21e4:	7f 91       	pop	r23
    21e6:	6f 91       	pop	r22
    21e8:	5f 91       	pop	r21
    21ea:	4f 91       	pop	r20
    21ec:	3f 91       	pop	r19
    21ee:	2f 91       	pop	r18
    21f0:	0f 90       	pop	r0
    21f2:	0b be       	out	0x3b, r0	; 59
    21f4:	0f 90       	pop	r0
    21f6:	0f be       	out	0x3f, r0	; 63
    21f8:	0f 90       	pop	r0
    21fa:	1f 90       	pop	r1
    21fc:	18 95       	reti

000021fe <__vector_43>:

/* PORTE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT0_vect)      /* External Interrupt 0 */
    21fe:	1f 92       	push	r1
    2200:	0f 92       	push	r0
    2202:	0f b6       	in	r0, 0x3f	; 63
    2204:	0f 92       	push	r0
    2206:	11 24       	eor	r1, r1
    2208:	0b b6       	in	r0, 0x3b	; 59
    220a:	0f 92       	push	r0
    220c:	2f 93       	push	r18
    220e:	3f 93       	push	r19
    2210:	4f 93       	push	r20
    2212:	5f 93       	push	r21
    2214:	6f 93       	push	r22
    2216:	7f 93       	push	r23
    2218:	8f 93       	push	r24
    221a:	9f 93       	push	r25
    221c:	af 93       	push	r26
    221e:	bf 93       	push	r27
    2220:	ef 93       	push	r30
    2222:	ff 93       	push	r31
    2224:	e0 91 47 21 	lds	r30, 0x2147
    2228:	f0 91 48 21 	lds	r31, 0x2148
    222c:	30 97       	sbiw	r30, 0x00	; 0
    222e:	29 f0       	breq	.+10     	; 0x223a <__vector_43+0x3c>
    2230:	80 91 3d 22 	lds	r24, 0x223D
    2234:	90 91 3e 22 	lds	r25, 0x223E
    2238:	19 95       	eicall
    223a:	ff 91       	pop	r31
    223c:	ef 91       	pop	r30
    223e:	bf 91       	pop	r27
    2240:	af 91       	pop	r26
    2242:	9f 91       	pop	r25
    2244:	8f 91       	pop	r24
    2246:	7f 91       	pop	r23
    2248:	6f 91       	pop	r22
    224a:	5f 91       	pop	r21
    224c:	4f 91       	pop	r20
    224e:	3f 91       	pop	r19
    2250:	2f 91       	pop	r18
    2252:	0f 90       	pop	r0
    2254:	0b be       	out	0x3b, r0	; 59
    2256:	0f 90       	pop	r0
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	0f 90       	pop	r0
    225c:	1f 90       	pop	r1
    225e:	18 95       	reti

00002260 <__vector_44>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT1_vect)      /* External Interrupt 1 */
    2260:	1f 92       	push	r1
    2262:	0f 92       	push	r0
    2264:	0f b6       	in	r0, 0x3f	; 63
    2266:	0f 92       	push	r0
    2268:	11 24       	eor	r1, r1
    226a:	0b b6       	in	r0, 0x3b	; 59
    226c:	0f 92       	push	r0
    226e:	2f 93       	push	r18
    2270:	3f 93       	push	r19
    2272:	4f 93       	push	r20
    2274:	5f 93       	push	r21
    2276:	6f 93       	push	r22
    2278:	7f 93       	push	r23
    227a:	8f 93       	push	r24
    227c:	9f 93       	push	r25
    227e:	af 93       	push	r26
    2280:	bf 93       	push	r27
    2282:	ef 93       	push	r30
    2284:	ff 93       	push	r31
    2286:	e0 91 49 21 	lds	r30, 0x2149
    228a:	f0 91 4a 21 	lds	r31, 0x214A
    228e:	30 97       	sbiw	r30, 0x00	; 0
    2290:	29 f0       	breq	.+10     	; 0x229c <__vector_44+0x3c>
    2292:	80 91 3f 22 	lds	r24, 0x223F
    2296:	90 91 40 22 	lds	r25, 0x2240
    229a:	19 95       	eicall
    229c:	ff 91       	pop	r31
    229e:	ef 91       	pop	r30
    22a0:	bf 91       	pop	r27
    22a2:	af 91       	pop	r26
    22a4:	9f 91       	pop	r25
    22a6:	8f 91       	pop	r24
    22a8:	7f 91       	pop	r23
    22aa:	6f 91       	pop	r22
    22ac:	5f 91       	pop	r21
    22ae:	4f 91       	pop	r20
    22b0:	3f 91       	pop	r19
    22b2:	2f 91       	pop	r18
    22b4:	0f 90       	pop	r0
    22b6:	0b be       	out	0x3b, r0	; 59
    22b8:	0f 90       	pop	r0
    22ba:	0f be       	out	0x3f, r0	; 63
    22bc:	0f 90       	pop	r0
    22be:	1f 90       	pop	r1
    22c0:	18 95       	reti

000022c2 <__vector_45>:

/* TWIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIS_vect)      /* TWI Slave Interrupt */
    22c2:	1f 92       	push	r1
    22c4:	0f 92       	push	r0
    22c6:	0f b6       	in	r0, 0x3f	; 63
    22c8:	0f 92       	push	r0
    22ca:	11 24       	eor	r1, r1
    22cc:	0b b6       	in	r0, 0x3b	; 59
    22ce:	0f 92       	push	r0
    22d0:	2f 93       	push	r18
    22d2:	3f 93       	push	r19
    22d4:	4f 93       	push	r20
    22d6:	5f 93       	push	r21
    22d8:	6f 93       	push	r22
    22da:	7f 93       	push	r23
    22dc:	8f 93       	push	r24
    22de:	9f 93       	push	r25
    22e0:	af 93       	push	r26
    22e2:	bf 93       	push	r27
    22e4:	ef 93       	push	r30
    22e6:	ff 93       	push	r31
    22e8:	e0 91 4b 21 	lds	r30, 0x214B
    22ec:	f0 91 4c 21 	lds	r31, 0x214C
    22f0:	30 97       	sbiw	r30, 0x00	; 0
    22f2:	29 f0       	breq	.+10     	; 0x22fe <__vector_45+0x3c>
    22f4:	80 91 41 22 	lds	r24, 0x2241
    22f8:	90 91 42 22 	lds	r25, 0x2242
    22fc:	19 95       	eicall
    22fe:	ff 91       	pop	r31
    2300:	ef 91       	pop	r30
    2302:	bf 91       	pop	r27
    2304:	af 91       	pop	r26
    2306:	9f 91       	pop	r25
    2308:	8f 91       	pop	r24
    230a:	7f 91       	pop	r23
    230c:	6f 91       	pop	r22
    230e:	5f 91       	pop	r21
    2310:	4f 91       	pop	r20
    2312:	3f 91       	pop	r19
    2314:	2f 91       	pop	r18
    2316:	0f 90       	pop	r0
    2318:	0b be       	out	0x3b, r0	; 59
    231a:	0f 90       	pop	r0
    231c:	0f be       	out	0x3f, r0	; 63
    231e:	0f 90       	pop	r0
    2320:	1f 90       	pop	r1
    2322:	18 95       	reti

00002324 <__vector_46>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIM_vect)		/* TWI Master Interrupt */
    2324:	1f 92       	push	r1
    2326:	0f 92       	push	r0
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	0f 92       	push	r0
    232c:	11 24       	eor	r1, r1
    232e:	0b b6       	in	r0, 0x3b	; 59
    2330:	0f 92       	push	r0
    2332:	2f 93       	push	r18
    2334:	3f 93       	push	r19
    2336:	4f 93       	push	r20
    2338:	5f 93       	push	r21
    233a:	6f 93       	push	r22
    233c:	7f 93       	push	r23
    233e:	8f 93       	push	r24
    2340:	9f 93       	push	r25
    2342:	af 93       	push	r26
    2344:	bf 93       	push	r27
    2346:	ef 93       	push	r30
    2348:	ff 93       	push	r31
    234a:	e0 91 4d 21 	lds	r30, 0x214D
    234e:	f0 91 4e 21 	lds	r31, 0x214E
    2352:	30 97       	sbiw	r30, 0x00	; 0
    2354:	29 f0       	breq	.+10     	; 0x2360 <__vector_46+0x3c>
    2356:	80 91 43 22 	lds	r24, 0x2243
    235a:	90 91 44 22 	lds	r25, 0x2244
    235e:	19 95       	eicall
    2360:	ff 91       	pop	r31
    2362:	ef 91       	pop	r30
    2364:	bf 91       	pop	r27
    2366:	af 91       	pop	r26
    2368:	9f 91       	pop	r25
    236a:	8f 91       	pop	r24
    236c:	7f 91       	pop	r23
    236e:	6f 91       	pop	r22
    2370:	5f 91       	pop	r21
    2372:	4f 91       	pop	r20
    2374:	3f 91       	pop	r19
    2376:	2f 91       	pop	r18
    2378:	0f 90       	pop	r0
    237a:	0b be       	out	0x3b, r0	; 59
    237c:	0f 90       	pop	r0
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	0f 90       	pop	r0
    2382:	1f 90       	pop	r1
    2384:	18 95       	reti

00002386 <__vector_47>:

/* TCE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_OVF_vect)      /* Overflow Interrupt */
    2386:	1f 92       	push	r1
    2388:	0f 92       	push	r0
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	0f 92       	push	r0
    238e:	11 24       	eor	r1, r1
    2390:	0b b6       	in	r0, 0x3b	; 59
    2392:	0f 92       	push	r0
    2394:	2f 93       	push	r18
    2396:	3f 93       	push	r19
    2398:	4f 93       	push	r20
    239a:	5f 93       	push	r21
    239c:	6f 93       	push	r22
    239e:	7f 93       	push	r23
    23a0:	8f 93       	push	r24
    23a2:	9f 93       	push	r25
    23a4:	af 93       	push	r26
    23a6:	bf 93       	push	r27
    23a8:	ef 93       	push	r30
    23aa:	ff 93       	push	r31
    23ac:	e0 91 4f 21 	lds	r30, 0x214F
    23b0:	f0 91 50 21 	lds	r31, 0x2150
    23b4:	30 97       	sbiw	r30, 0x00	; 0
    23b6:	29 f0       	breq	.+10     	; 0x23c2 <__vector_47+0x3c>
    23b8:	80 91 45 22 	lds	r24, 0x2245
    23bc:	90 91 46 22 	lds	r25, 0x2246
    23c0:	19 95       	eicall
    23c2:	ff 91       	pop	r31
    23c4:	ef 91       	pop	r30
    23c6:	bf 91       	pop	r27
    23c8:	af 91       	pop	r26
    23ca:	9f 91       	pop	r25
    23cc:	8f 91       	pop	r24
    23ce:	7f 91       	pop	r23
    23d0:	6f 91       	pop	r22
    23d2:	5f 91       	pop	r21
    23d4:	4f 91       	pop	r20
    23d6:	3f 91       	pop	r19
    23d8:	2f 91       	pop	r18
    23da:	0f 90       	pop	r0
    23dc:	0b be       	out	0x3b, r0	; 59
    23de:	0f 90       	pop	r0
    23e0:	0f be       	out	0x3f, r0	; 63
    23e2:	0f 90       	pop	r0
    23e4:	1f 90       	pop	r1
    23e6:	18 95       	reti

000023e8 <__vector_48>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_ERR_vect)      /* Error Interrupt */
    23e8:	1f 92       	push	r1
    23ea:	0f 92       	push	r0
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	0f 92       	push	r0
    23f0:	11 24       	eor	r1, r1
    23f2:	0b b6       	in	r0, 0x3b	; 59
    23f4:	0f 92       	push	r0
    23f6:	2f 93       	push	r18
    23f8:	3f 93       	push	r19
    23fa:	4f 93       	push	r20
    23fc:	5f 93       	push	r21
    23fe:	6f 93       	push	r22
    2400:	7f 93       	push	r23
    2402:	8f 93       	push	r24
    2404:	9f 93       	push	r25
    2406:	af 93       	push	r26
    2408:	bf 93       	push	r27
    240a:	ef 93       	push	r30
    240c:	ff 93       	push	r31
    240e:	e0 91 51 21 	lds	r30, 0x2151
    2412:	f0 91 52 21 	lds	r31, 0x2152
    2416:	30 97       	sbiw	r30, 0x00	; 0
    2418:	29 f0       	breq	.+10     	; 0x2424 <__vector_48+0x3c>
    241a:	80 91 47 22 	lds	r24, 0x2247
    241e:	90 91 48 22 	lds	r25, 0x2248
    2422:	19 95       	eicall
    2424:	ff 91       	pop	r31
    2426:	ef 91       	pop	r30
    2428:	bf 91       	pop	r27
    242a:	af 91       	pop	r26
    242c:	9f 91       	pop	r25
    242e:	8f 91       	pop	r24
    2430:	7f 91       	pop	r23
    2432:	6f 91       	pop	r22
    2434:	5f 91       	pop	r21
    2436:	4f 91       	pop	r20
    2438:	3f 91       	pop	r19
    243a:	2f 91       	pop	r18
    243c:	0f 90       	pop	r0
    243e:	0b be       	out	0x3b, r0	; 59
    2440:	0f 90       	pop	r0
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	0f 90       	pop	r0
    2446:	1f 90       	pop	r1
    2448:	18 95       	reti

0000244a <__vector_49>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCA_vect)      /* Compare or Capture A Interrupt */
    244a:	1f 92       	push	r1
    244c:	0f 92       	push	r0
    244e:	0f b6       	in	r0, 0x3f	; 63
    2450:	0f 92       	push	r0
    2452:	11 24       	eor	r1, r1
    2454:	0b b6       	in	r0, 0x3b	; 59
    2456:	0f 92       	push	r0
    2458:	2f 93       	push	r18
    245a:	3f 93       	push	r19
    245c:	4f 93       	push	r20
    245e:	5f 93       	push	r21
    2460:	6f 93       	push	r22
    2462:	7f 93       	push	r23
    2464:	8f 93       	push	r24
    2466:	9f 93       	push	r25
    2468:	af 93       	push	r26
    246a:	bf 93       	push	r27
    246c:	ef 93       	push	r30
    246e:	ff 93       	push	r31
    2470:	e0 91 53 21 	lds	r30, 0x2153
    2474:	f0 91 54 21 	lds	r31, 0x2154
    2478:	30 97       	sbiw	r30, 0x00	; 0
    247a:	29 f0       	breq	.+10     	; 0x2486 <__vector_49+0x3c>
    247c:	80 91 49 22 	lds	r24, 0x2249
    2480:	90 91 4a 22 	lds	r25, 0x224A
    2484:	19 95       	eicall
    2486:	ff 91       	pop	r31
    2488:	ef 91       	pop	r30
    248a:	bf 91       	pop	r27
    248c:	af 91       	pop	r26
    248e:	9f 91       	pop	r25
    2490:	8f 91       	pop	r24
    2492:	7f 91       	pop	r23
    2494:	6f 91       	pop	r22
    2496:	5f 91       	pop	r21
    2498:	4f 91       	pop	r20
    249a:	3f 91       	pop	r19
    249c:	2f 91       	pop	r18
    249e:	0f 90       	pop	r0
    24a0:	0b be       	out	0x3b, r0	; 59
    24a2:	0f 90       	pop	r0
    24a4:	0f be       	out	0x3f, r0	; 63
    24a6:	0f 90       	pop	r0
    24a8:	1f 90       	pop	r1
    24aa:	18 95       	reti

000024ac <__vector_50>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCB_vect)      /* Compare or Capture B Interrupt */
    24ac:	1f 92       	push	r1
    24ae:	0f 92       	push	r0
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	0f 92       	push	r0
    24b4:	11 24       	eor	r1, r1
    24b6:	0b b6       	in	r0, 0x3b	; 59
    24b8:	0f 92       	push	r0
    24ba:	2f 93       	push	r18
    24bc:	3f 93       	push	r19
    24be:	4f 93       	push	r20
    24c0:	5f 93       	push	r21
    24c2:	6f 93       	push	r22
    24c4:	7f 93       	push	r23
    24c6:	8f 93       	push	r24
    24c8:	9f 93       	push	r25
    24ca:	af 93       	push	r26
    24cc:	bf 93       	push	r27
    24ce:	ef 93       	push	r30
    24d0:	ff 93       	push	r31
    24d2:	e0 91 55 21 	lds	r30, 0x2155
    24d6:	f0 91 56 21 	lds	r31, 0x2156
    24da:	30 97       	sbiw	r30, 0x00	; 0
    24dc:	29 f0       	breq	.+10     	; 0x24e8 <__vector_50+0x3c>
    24de:	80 91 4b 22 	lds	r24, 0x224B
    24e2:	90 91 4c 22 	lds	r25, 0x224C
    24e6:	19 95       	eicall
    24e8:	ff 91       	pop	r31
    24ea:	ef 91       	pop	r30
    24ec:	bf 91       	pop	r27
    24ee:	af 91       	pop	r26
    24f0:	9f 91       	pop	r25
    24f2:	8f 91       	pop	r24
    24f4:	7f 91       	pop	r23
    24f6:	6f 91       	pop	r22
    24f8:	5f 91       	pop	r21
    24fa:	4f 91       	pop	r20
    24fc:	3f 91       	pop	r19
    24fe:	2f 91       	pop	r18
    2500:	0f 90       	pop	r0
    2502:	0b be       	out	0x3b, r0	; 59
    2504:	0f 90       	pop	r0
    2506:	0f be       	out	0x3f, r0	; 63
    2508:	0f 90       	pop	r0
    250a:	1f 90       	pop	r1
    250c:	18 95       	reti

0000250e <__vector_51>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCC_vect)      /* Compare or Capture C Interrupt */
    250e:	1f 92       	push	r1
    2510:	0f 92       	push	r0
    2512:	0f b6       	in	r0, 0x3f	; 63
    2514:	0f 92       	push	r0
    2516:	11 24       	eor	r1, r1
    2518:	0b b6       	in	r0, 0x3b	; 59
    251a:	0f 92       	push	r0
    251c:	2f 93       	push	r18
    251e:	3f 93       	push	r19
    2520:	4f 93       	push	r20
    2522:	5f 93       	push	r21
    2524:	6f 93       	push	r22
    2526:	7f 93       	push	r23
    2528:	8f 93       	push	r24
    252a:	9f 93       	push	r25
    252c:	af 93       	push	r26
    252e:	bf 93       	push	r27
    2530:	ef 93       	push	r30
    2532:	ff 93       	push	r31
    2534:	e0 91 57 21 	lds	r30, 0x2157
    2538:	f0 91 58 21 	lds	r31, 0x2158
    253c:	30 97       	sbiw	r30, 0x00	; 0
    253e:	29 f0       	breq	.+10     	; 0x254a <__vector_51+0x3c>
    2540:	80 91 4d 22 	lds	r24, 0x224D
    2544:	90 91 4e 22 	lds	r25, 0x224E
    2548:	19 95       	eicall
    254a:	ff 91       	pop	r31
    254c:	ef 91       	pop	r30
    254e:	bf 91       	pop	r27
    2550:	af 91       	pop	r26
    2552:	9f 91       	pop	r25
    2554:	8f 91       	pop	r24
    2556:	7f 91       	pop	r23
    2558:	6f 91       	pop	r22
    255a:	5f 91       	pop	r21
    255c:	4f 91       	pop	r20
    255e:	3f 91       	pop	r19
    2560:	2f 91       	pop	r18
    2562:	0f 90       	pop	r0
    2564:	0b be       	out	0x3b, r0	; 59
    2566:	0f 90       	pop	r0
    2568:	0f be       	out	0x3f, r0	; 63
    256a:	0f 90       	pop	r0
    256c:	1f 90       	pop	r1
    256e:	18 95       	reti

00002570 <__vector_52>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCD_vect)      /* Compare or Capture D Interrupt */
    2570:	1f 92       	push	r1
    2572:	0f 92       	push	r0
    2574:	0f b6       	in	r0, 0x3f	; 63
    2576:	0f 92       	push	r0
    2578:	11 24       	eor	r1, r1
    257a:	0b b6       	in	r0, 0x3b	; 59
    257c:	0f 92       	push	r0
    257e:	2f 93       	push	r18
    2580:	3f 93       	push	r19
    2582:	4f 93       	push	r20
    2584:	5f 93       	push	r21
    2586:	6f 93       	push	r22
    2588:	7f 93       	push	r23
    258a:	8f 93       	push	r24
    258c:	9f 93       	push	r25
    258e:	af 93       	push	r26
    2590:	bf 93       	push	r27
    2592:	ef 93       	push	r30
    2594:	ff 93       	push	r31
    2596:	e0 91 59 21 	lds	r30, 0x2159
    259a:	f0 91 5a 21 	lds	r31, 0x215A
    259e:	30 97       	sbiw	r30, 0x00	; 0
    25a0:	29 f0       	breq	.+10     	; 0x25ac <__vector_52+0x3c>
    25a2:	80 91 4f 22 	lds	r24, 0x224F
    25a6:	90 91 50 22 	lds	r25, 0x2250
    25aa:	19 95       	eicall
    25ac:	ff 91       	pop	r31
    25ae:	ef 91       	pop	r30
    25b0:	bf 91       	pop	r27
    25b2:	af 91       	pop	r26
    25b4:	9f 91       	pop	r25
    25b6:	8f 91       	pop	r24
    25b8:	7f 91       	pop	r23
    25ba:	6f 91       	pop	r22
    25bc:	5f 91       	pop	r21
    25be:	4f 91       	pop	r20
    25c0:	3f 91       	pop	r19
    25c2:	2f 91       	pop	r18
    25c4:	0f 90       	pop	r0
    25c6:	0b be       	out	0x3b, r0	; 59
    25c8:	0f 90       	pop	r0
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	0f 90       	pop	r0
    25ce:	1f 90       	pop	r1
    25d0:	18 95       	reti

000025d2 <__vector_53>:

/* TCE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_OVF_vect)      /* Overflow Interrupt */
    25d2:	1f 92       	push	r1
    25d4:	0f 92       	push	r0
    25d6:	0f b6       	in	r0, 0x3f	; 63
    25d8:	0f 92       	push	r0
    25da:	11 24       	eor	r1, r1
    25dc:	0b b6       	in	r0, 0x3b	; 59
    25de:	0f 92       	push	r0
    25e0:	2f 93       	push	r18
    25e2:	3f 93       	push	r19
    25e4:	4f 93       	push	r20
    25e6:	5f 93       	push	r21
    25e8:	6f 93       	push	r22
    25ea:	7f 93       	push	r23
    25ec:	8f 93       	push	r24
    25ee:	9f 93       	push	r25
    25f0:	af 93       	push	r26
    25f2:	bf 93       	push	r27
    25f4:	ef 93       	push	r30
    25f6:	ff 93       	push	r31
    25f8:	e0 91 5b 21 	lds	r30, 0x215B
    25fc:	f0 91 5c 21 	lds	r31, 0x215C
    2600:	30 97       	sbiw	r30, 0x00	; 0
    2602:	29 f0       	breq	.+10     	; 0x260e <__vector_53+0x3c>
    2604:	80 91 51 22 	lds	r24, 0x2251
    2608:	90 91 52 22 	lds	r25, 0x2252
    260c:	19 95       	eicall
    260e:	ff 91       	pop	r31
    2610:	ef 91       	pop	r30
    2612:	bf 91       	pop	r27
    2614:	af 91       	pop	r26
    2616:	9f 91       	pop	r25
    2618:	8f 91       	pop	r24
    261a:	7f 91       	pop	r23
    261c:	6f 91       	pop	r22
    261e:	5f 91       	pop	r21
    2620:	4f 91       	pop	r20
    2622:	3f 91       	pop	r19
    2624:	2f 91       	pop	r18
    2626:	0f 90       	pop	r0
    2628:	0b be       	out	0x3b, r0	; 59
    262a:	0f 90       	pop	r0
    262c:	0f be       	out	0x3f, r0	; 63
    262e:	0f 90       	pop	r0
    2630:	1f 90       	pop	r1
    2632:	18 95       	reti

00002634 <__vector_54>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_ERR_vect)      /* Error Interrupt */
    2634:	1f 92       	push	r1
    2636:	0f 92       	push	r0
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	0f 92       	push	r0
    263c:	11 24       	eor	r1, r1
    263e:	0b b6       	in	r0, 0x3b	; 59
    2640:	0f 92       	push	r0
    2642:	2f 93       	push	r18
    2644:	3f 93       	push	r19
    2646:	4f 93       	push	r20
    2648:	5f 93       	push	r21
    264a:	6f 93       	push	r22
    264c:	7f 93       	push	r23
    264e:	8f 93       	push	r24
    2650:	9f 93       	push	r25
    2652:	af 93       	push	r26
    2654:	bf 93       	push	r27
    2656:	ef 93       	push	r30
    2658:	ff 93       	push	r31
    265a:	e0 91 5d 21 	lds	r30, 0x215D
    265e:	f0 91 5e 21 	lds	r31, 0x215E
    2662:	30 97       	sbiw	r30, 0x00	; 0
    2664:	29 f0       	breq	.+10     	; 0x2670 <__vector_54+0x3c>
    2666:	80 91 53 22 	lds	r24, 0x2253
    266a:	90 91 54 22 	lds	r25, 0x2254
    266e:	19 95       	eicall
    2670:	ff 91       	pop	r31
    2672:	ef 91       	pop	r30
    2674:	bf 91       	pop	r27
    2676:	af 91       	pop	r26
    2678:	9f 91       	pop	r25
    267a:	8f 91       	pop	r24
    267c:	7f 91       	pop	r23
    267e:	6f 91       	pop	r22
    2680:	5f 91       	pop	r21
    2682:	4f 91       	pop	r20
    2684:	3f 91       	pop	r19
    2686:	2f 91       	pop	r18
    2688:	0f 90       	pop	r0
    268a:	0b be       	out	0x3b, r0	; 59
    268c:	0f 90       	pop	r0
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	0f 90       	pop	r0
    2692:	1f 90       	pop	r1
    2694:	18 95       	reti

00002696 <__vector_55>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCA_vect)      /* Compare or Capture A Interrupt */
    2696:	1f 92       	push	r1
    2698:	0f 92       	push	r0
    269a:	0f b6       	in	r0, 0x3f	; 63
    269c:	0f 92       	push	r0
    269e:	11 24       	eor	r1, r1
    26a0:	0b b6       	in	r0, 0x3b	; 59
    26a2:	0f 92       	push	r0
    26a4:	2f 93       	push	r18
    26a6:	3f 93       	push	r19
    26a8:	4f 93       	push	r20
    26aa:	5f 93       	push	r21
    26ac:	6f 93       	push	r22
    26ae:	7f 93       	push	r23
    26b0:	8f 93       	push	r24
    26b2:	9f 93       	push	r25
    26b4:	af 93       	push	r26
    26b6:	bf 93       	push	r27
    26b8:	ef 93       	push	r30
    26ba:	ff 93       	push	r31
    26bc:	e0 91 5f 21 	lds	r30, 0x215F
    26c0:	f0 91 60 21 	lds	r31, 0x2160
    26c4:	30 97       	sbiw	r30, 0x00	; 0
    26c6:	29 f0       	breq	.+10     	; 0x26d2 <__vector_55+0x3c>
    26c8:	80 91 55 22 	lds	r24, 0x2255
    26cc:	90 91 56 22 	lds	r25, 0x2256
    26d0:	19 95       	eicall
    26d2:	ff 91       	pop	r31
    26d4:	ef 91       	pop	r30
    26d6:	bf 91       	pop	r27
    26d8:	af 91       	pop	r26
    26da:	9f 91       	pop	r25
    26dc:	8f 91       	pop	r24
    26de:	7f 91       	pop	r23
    26e0:	6f 91       	pop	r22
    26e2:	5f 91       	pop	r21
    26e4:	4f 91       	pop	r20
    26e6:	3f 91       	pop	r19
    26e8:	2f 91       	pop	r18
    26ea:	0f 90       	pop	r0
    26ec:	0b be       	out	0x3b, r0	; 59
    26ee:	0f 90       	pop	r0
    26f0:	0f be       	out	0x3f, r0	; 63
    26f2:	0f 90       	pop	r0
    26f4:	1f 90       	pop	r1
    26f6:	18 95       	reti

000026f8 <__vector_56>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCB_vect)      /* Compare or Capture B Interrupt */
    26f8:	1f 92       	push	r1
    26fa:	0f 92       	push	r0
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	0f 92       	push	r0
    2700:	11 24       	eor	r1, r1
    2702:	0b b6       	in	r0, 0x3b	; 59
    2704:	0f 92       	push	r0
    2706:	2f 93       	push	r18
    2708:	3f 93       	push	r19
    270a:	4f 93       	push	r20
    270c:	5f 93       	push	r21
    270e:	6f 93       	push	r22
    2710:	7f 93       	push	r23
    2712:	8f 93       	push	r24
    2714:	9f 93       	push	r25
    2716:	af 93       	push	r26
    2718:	bf 93       	push	r27
    271a:	ef 93       	push	r30
    271c:	ff 93       	push	r31
    271e:	e0 91 61 21 	lds	r30, 0x2161
    2722:	f0 91 62 21 	lds	r31, 0x2162
    2726:	30 97       	sbiw	r30, 0x00	; 0
    2728:	29 f0       	breq	.+10     	; 0x2734 <__vector_56+0x3c>
    272a:	80 91 57 22 	lds	r24, 0x2257
    272e:	90 91 58 22 	lds	r25, 0x2258
    2732:	19 95       	eicall
    2734:	ff 91       	pop	r31
    2736:	ef 91       	pop	r30
    2738:	bf 91       	pop	r27
    273a:	af 91       	pop	r26
    273c:	9f 91       	pop	r25
    273e:	8f 91       	pop	r24
    2740:	7f 91       	pop	r23
    2742:	6f 91       	pop	r22
    2744:	5f 91       	pop	r21
    2746:	4f 91       	pop	r20
    2748:	3f 91       	pop	r19
    274a:	2f 91       	pop	r18
    274c:	0f 90       	pop	r0
    274e:	0b be       	out	0x3b, r0	; 59
    2750:	0f 90       	pop	r0
    2752:	0f be       	out	0x3f, r0	; 63
    2754:	0f 90       	pop	r0
    2756:	1f 90       	pop	r1
    2758:	18 95       	reti

0000275a <__vector_57>:

/* SPIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIE_INT_vect)      /* SPI Interrupt */
    275a:	1f 92       	push	r1
    275c:	0f 92       	push	r0
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	0f 92       	push	r0
    2762:	11 24       	eor	r1, r1
    2764:	0b b6       	in	r0, 0x3b	; 59
    2766:	0f 92       	push	r0
    2768:	2f 93       	push	r18
    276a:	3f 93       	push	r19
    276c:	4f 93       	push	r20
    276e:	5f 93       	push	r21
    2770:	6f 93       	push	r22
    2772:	7f 93       	push	r23
    2774:	8f 93       	push	r24
    2776:	9f 93       	push	r25
    2778:	af 93       	push	r26
    277a:	bf 93       	push	r27
    277c:	ef 93       	push	r30
    277e:	ff 93       	push	r31
    2780:	e0 91 63 21 	lds	r30, 0x2163
    2784:	f0 91 64 21 	lds	r31, 0x2164
    2788:	30 97       	sbiw	r30, 0x00	; 0
    278a:	29 f0       	breq	.+10     	; 0x2796 <__vector_57+0x3c>
    278c:	80 91 59 22 	lds	r24, 0x2259
    2790:	90 91 5a 22 	lds	r25, 0x225A
    2794:	19 95       	eicall
    2796:	ff 91       	pop	r31
    2798:	ef 91       	pop	r30
    279a:	bf 91       	pop	r27
    279c:	af 91       	pop	r26
    279e:	9f 91       	pop	r25
    27a0:	8f 91       	pop	r24
    27a2:	7f 91       	pop	r23
    27a4:	6f 91       	pop	r22
    27a6:	5f 91       	pop	r21
    27a8:	4f 91       	pop	r20
    27aa:	3f 91       	pop	r19
    27ac:	2f 91       	pop	r18
    27ae:	0f 90       	pop	r0
    27b0:	0b be       	out	0x3b, r0	; 59
    27b2:	0f 90       	pop	r0
    27b4:	0f be       	out	0x3f, r0	; 63
    27b6:	0f 90       	pop	r0
    27b8:	1f 90       	pop	r1
    27ba:	18 95       	reti

000027bc <__vector_58>:

/* USARTE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_RXC_vect)      /* Reception Complete Interrupt */
    27bc:	1f 92       	push	r1
    27be:	0f 92       	push	r0
    27c0:	0f b6       	in	r0, 0x3f	; 63
    27c2:	0f 92       	push	r0
    27c4:	11 24       	eor	r1, r1
    27c6:	0b b6       	in	r0, 0x3b	; 59
    27c8:	0f 92       	push	r0
    27ca:	2f 93       	push	r18
    27cc:	3f 93       	push	r19
    27ce:	4f 93       	push	r20
    27d0:	5f 93       	push	r21
    27d2:	6f 93       	push	r22
    27d4:	7f 93       	push	r23
    27d6:	8f 93       	push	r24
    27d8:	9f 93       	push	r25
    27da:	af 93       	push	r26
    27dc:	bf 93       	push	r27
    27de:	ef 93       	push	r30
    27e0:	ff 93       	push	r31
    27e2:	e0 91 65 21 	lds	r30, 0x2165
    27e6:	f0 91 66 21 	lds	r31, 0x2166
    27ea:	30 97       	sbiw	r30, 0x00	; 0
    27ec:	29 f0       	breq	.+10     	; 0x27f8 <__vector_58+0x3c>
    27ee:	80 91 5b 22 	lds	r24, 0x225B
    27f2:	90 91 5c 22 	lds	r25, 0x225C
    27f6:	19 95       	eicall
    27f8:	ff 91       	pop	r31
    27fa:	ef 91       	pop	r30
    27fc:	bf 91       	pop	r27
    27fe:	af 91       	pop	r26
    2800:	9f 91       	pop	r25
    2802:	8f 91       	pop	r24
    2804:	7f 91       	pop	r23
    2806:	6f 91       	pop	r22
    2808:	5f 91       	pop	r21
    280a:	4f 91       	pop	r20
    280c:	3f 91       	pop	r19
    280e:	2f 91       	pop	r18
    2810:	0f 90       	pop	r0
    2812:	0b be       	out	0x3b, r0	; 59
    2814:	0f 90       	pop	r0
    2816:	0f be       	out	0x3f, r0	; 63
    2818:	0f 90       	pop	r0
    281a:	1f 90       	pop	r1
    281c:	18 95       	reti

0000281e <__vector_59>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_DRE_vect)      /* Data Register Empty Interrupt */
    281e:	1f 92       	push	r1
    2820:	0f 92       	push	r0
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	0f 92       	push	r0
    2826:	11 24       	eor	r1, r1
    2828:	0b b6       	in	r0, 0x3b	; 59
    282a:	0f 92       	push	r0
    282c:	2f 93       	push	r18
    282e:	3f 93       	push	r19
    2830:	4f 93       	push	r20
    2832:	5f 93       	push	r21
    2834:	6f 93       	push	r22
    2836:	7f 93       	push	r23
    2838:	8f 93       	push	r24
    283a:	9f 93       	push	r25
    283c:	af 93       	push	r26
    283e:	bf 93       	push	r27
    2840:	ef 93       	push	r30
    2842:	ff 93       	push	r31
    2844:	e0 91 67 21 	lds	r30, 0x2167
    2848:	f0 91 68 21 	lds	r31, 0x2168
    284c:	30 97       	sbiw	r30, 0x00	; 0
    284e:	29 f0       	breq	.+10     	; 0x285a <__vector_59+0x3c>
    2850:	80 91 5d 22 	lds	r24, 0x225D
    2854:	90 91 5e 22 	lds	r25, 0x225E
    2858:	19 95       	eicall
    285a:	ff 91       	pop	r31
    285c:	ef 91       	pop	r30
    285e:	bf 91       	pop	r27
    2860:	af 91       	pop	r26
    2862:	9f 91       	pop	r25
    2864:	8f 91       	pop	r24
    2866:	7f 91       	pop	r23
    2868:	6f 91       	pop	r22
    286a:	5f 91       	pop	r21
    286c:	4f 91       	pop	r20
    286e:	3f 91       	pop	r19
    2870:	2f 91       	pop	r18
    2872:	0f 90       	pop	r0
    2874:	0b be       	out	0x3b, r0	; 59
    2876:	0f 90       	pop	r0
    2878:	0f be       	out	0x3f, r0	; 63
    287a:	0f 90       	pop	r0
    287c:	1f 90       	pop	r1
    287e:	18 95       	reti

00002880 <__vector_60>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_TXC_vect)      /* Transmission Complete Interrupt */
    2880:	1f 92       	push	r1
    2882:	0f 92       	push	r0
    2884:	0f b6       	in	r0, 0x3f	; 63
    2886:	0f 92       	push	r0
    2888:	11 24       	eor	r1, r1
    288a:	0b b6       	in	r0, 0x3b	; 59
    288c:	0f 92       	push	r0
    288e:	2f 93       	push	r18
    2890:	3f 93       	push	r19
    2892:	4f 93       	push	r20
    2894:	5f 93       	push	r21
    2896:	6f 93       	push	r22
    2898:	7f 93       	push	r23
    289a:	8f 93       	push	r24
    289c:	9f 93       	push	r25
    289e:	af 93       	push	r26
    28a0:	bf 93       	push	r27
    28a2:	ef 93       	push	r30
    28a4:	ff 93       	push	r31
    28a6:	e0 91 69 21 	lds	r30, 0x2169
    28aa:	f0 91 6a 21 	lds	r31, 0x216A
    28ae:	30 97       	sbiw	r30, 0x00	; 0
    28b0:	29 f0       	breq	.+10     	; 0x28bc <__vector_60+0x3c>
    28b2:	80 91 5f 22 	lds	r24, 0x225F
    28b6:	90 91 60 22 	lds	r25, 0x2260
    28ba:	19 95       	eicall
    28bc:	ff 91       	pop	r31
    28be:	ef 91       	pop	r30
    28c0:	bf 91       	pop	r27
    28c2:	af 91       	pop	r26
    28c4:	9f 91       	pop	r25
    28c6:	8f 91       	pop	r24
    28c8:	7f 91       	pop	r23
    28ca:	6f 91       	pop	r22
    28cc:	5f 91       	pop	r21
    28ce:	4f 91       	pop	r20
    28d0:	3f 91       	pop	r19
    28d2:	2f 91       	pop	r18
    28d4:	0f 90       	pop	r0
    28d6:	0b be       	out	0x3b, r0	; 59
    28d8:	0f 90       	pop	r0
    28da:	0f be       	out	0x3f, r0	; 63
    28dc:	0f 90       	pop	r0
    28de:	1f 90       	pop	r1
    28e0:	18 95       	reti

000028e2 <__vector_61>:

/* USARTE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_RXC_vect)      /* Reception Complete Interrupt */
    28e2:	1f 92       	push	r1
    28e4:	0f 92       	push	r0
    28e6:	0f b6       	in	r0, 0x3f	; 63
    28e8:	0f 92       	push	r0
    28ea:	11 24       	eor	r1, r1
    28ec:	0b b6       	in	r0, 0x3b	; 59
    28ee:	0f 92       	push	r0
    28f0:	2f 93       	push	r18
    28f2:	3f 93       	push	r19
    28f4:	4f 93       	push	r20
    28f6:	5f 93       	push	r21
    28f8:	6f 93       	push	r22
    28fa:	7f 93       	push	r23
    28fc:	8f 93       	push	r24
    28fe:	9f 93       	push	r25
    2900:	af 93       	push	r26
    2902:	bf 93       	push	r27
    2904:	ef 93       	push	r30
    2906:	ff 93       	push	r31
    2908:	e0 91 6b 21 	lds	r30, 0x216B
    290c:	f0 91 6c 21 	lds	r31, 0x216C
    2910:	30 97       	sbiw	r30, 0x00	; 0
    2912:	29 f0       	breq	.+10     	; 0x291e <__vector_61+0x3c>
    2914:	80 91 61 22 	lds	r24, 0x2261
    2918:	90 91 62 22 	lds	r25, 0x2262
    291c:	19 95       	eicall
    291e:	ff 91       	pop	r31
    2920:	ef 91       	pop	r30
    2922:	bf 91       	pop	r27
    2924:	af 91       	pop	r26
    2926:	9f 91       	pop	r25
    2928:	8f 91       	pop	r24
    292a:	7f 91       	pop	r23
    292c:	6f 91       	pop	r22
    292e:	5f 91       	pop	r21
    2930:	4f 91       	pop	r20
    2932:	3f 91       	pop	r19
    2934:	2f 91       	pop	r18
    2936:	0f 90       	pop	r0
    2938:	0b be       	out	0x3b, r0	; 59
    293a:	0f 90       	pop	r0
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	0f 90       	pop	r0
    2940:	1f 90       	pop	r1
    2942:	18 95       	reti

00002944 <__vector_62>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_DRE_vect)      /* Data Register Empty Interrupt */
    2944:	1f 92       	push	r1
    2946:	0f 92       	push	r0
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	0f 92       	push	r0
    294c:	11 24       	eor	r1, r1
    294e:	0b b6       	in	r0, 0x3b	; 59
    2950:	0f 92       	push	r0
    2952:	2f 93       	push	r18
    2954:	3f 93       	push	r19
    2956:	4f 93       	push	r20
    2958:	5f 93       	push	r21
    295a:	6f 93       	push	r22
    295c:	7f 93       	push	r23
    295e:	8f 93       	push	r24
    2960:	9f 93       	push	r25
    2962:	af 93       	push	r26
    2964:	bf 93       	push	r27
    2966:	ef 93       	push	r30
    2968:	ff 93       	push	r31
    296a:	e0 91 6d 21 	lds	r30, 0x216D
    296e:	f0 91 6e 21 	lds	r31, 0x216E
    2972:	30 97       	sbiw	r30, 0x00	; 0
    2974:	29 f0       	breq	.+10     	; 0x2980 <__vector_62+0x3c>
    2976:	80 91 63 22 	lds	r24, 0x2263
    297a:	90 91 64 22 	lds	r25, 0x2264
    297e:	19 95       	eicall
    2980:	ff 91       	pop	r31
    2982:	ef 91       	pop	r30
    2984:	bf 91       	pop	r27
    2986:	af 91       	pop	r26
    2988:	9f 91       	pop	r25
    298a:	8f 91       	pop	r24
    298c:	7f 91       	pop	r23
    298e:	6f 91       	pop	r22
    2990:	5f 91       	pop	r21
    2992:	4f 91       	pop	r20
    2994:	3f 91       	pop	r19
    2996:	2f 91       	pop	r18
    2998:	0f 90       	pop	r0
    299a:	0b be       	out	0x3b, r0	; 59
    299c:	0f 90       	pop	r0
    299e:	0f be       	out	0x3f, r0	; 63
    29a0:	0f 90       	pop	r0
    29a2:	1f 90       	pop	r1
    29a4:	18 95       	reti

000029a6 <__vector_63>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_TXC_vect)      /* Transmission Complete Interrupt */
    29a6:	1f 92       	push	r1
    29a8:	0f 92       	push	r0
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	0f 92       	push	r0
    29ae:	11 24       	eor	r1, r1
    29b0:	0b b6       	in	r0, 0x3b	; 59
    29b2:	0f 92       	push	r0
    29b4:	2f 93       	push	r18
    29b6:	3f 93       	push	r19
    29b8:	4f 93       	push	r20
    29ba:	5f 93       	push	r21
    29bc:	6f 93       	push	r22
    29be:	7f 93       	push	r23
    29c0:	8f 93       	push	r24
    29c2:	9f 93       	push	r25
    29c4:	af 93       	push	r26
    29c6:	bf 93       	push	r27
    29c8:	ef 93       	push	r30
    29ca:	ff 93       	push	r31
    29cc:	e0 91 6f 21 	lds	r30, 0x216F
    29d0:	f0 91 70 21 	lds	r31, 0x2170
    29d4:	30 97       	sbiw	r30, 0x00	; 0
    29d6:	29 f0       	breq	.+10     	; 0x29e2 <__vector_63+0x3c>
    29d8:	80 91 65 22 	lds	r24, 0x2265
    29dc:	90 91 66 22 	lds	r25, 0x2266
    29e0:	19 95       	eicall
    29e2:	ff 91       	pop	r31
    29e4:	ef 91       	pop	r30
    29e6:	bf 91       	pop	r27
    29e8:	af 91       	pop	r26
    29ea:	9f 91       	pop	r25
    29ec:	8f 91       	pop	r24
    29ee:	7f 91       	pop	r23
    29f0:	6f 91       	pop	r22
    29f2:	5f 91       	pop	r21
    29f4:	4f 91       	pop	r20
    29f6:	3f 91       	pop	r19
    29f8:	2f 91       	pop	r18
    29fa:	0f 90       	pop	r0
    29fc:	0b be       	out	0x3b, r0	; 59
    29fe:	0f 90       	pop	r0
    2a00:	0f be       	out	0x3f, r0	; 63
    2a02:	0f 90       	pop	r0
    2a04:	1f 90       	pop	r1
    2a06:	18 95       	reti

00002a08 <__vector_64>:

/* PORTD interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT0_vect)      /* External Interrupt 0 */
    2a08:	1f 92       	push	r1
    2a0a:	0f 92       	push	r0
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	0f 92       	push	r0
    2a10:	11 24       	eor	r1, r1
    2a12:	0b b6       	in	r0, 0x3b	; 59
    2a14:	0f 92       	push	r0
    2a16:	2f 93       	push	r18
    2a18:	3f 93       	push	r19
    2a1a:	4f 93       	push	r20
    2a1c:	5f 93       	push	r21
    2a1e:	6f 93       	push	r22
    2a20:	7f 93       	push	r23
    2a22:	8f 93       	push	r24
    2a24:	9f 93       	push	r25
    2a26:	af 93       	push	r26
    2a28:	bf 93       	push	r27
    2a2a:	ef 93       	push	r30
    2a2c:	ff 93       	push	r31
    2a2e:	e0 91 71 21 	lds	r30, 0x2171
    2a32:	f0 91 72 21 	lds	r31, 0x2172
    2a36:	30 97       	sbiw	r30, 0x00	; 0
    2a38:	29 f0       	breq	.+10     	; 0x2a44 <__vector_64+0x3c>
    2a3a:	80 91 67 22 	lds	r24, 0x2267
    2a3e:	90 91 68 22 	lds	r25, 0x2268
    2a42:	19 95       	eicall
    2a44:	ff 91       	pop	r31
    2a46:	ef 91       	pop	r30
    2a48:	bf 91       	pop	r27
    2a4a:	af 91       	pop	r26
    2a4c:	9f 91       	pop	r25
    2a4e:	8f 91       	pop	r24
    2a50:	7f 91       	pop	r23
    2a52:	6f 91       	pop	r22
    2a54:	5f 91       	pop	r21
    2a56:	4f 91       	pop	r20
    2a58:	3f 91       	pop	r19
    2a5a:	2f 91       	pop	r18
    2a5c:	0f 90       	pop	r0
    2a5e:	0b be       	out	0x3b, r0	; 59
    2a60:	0f 90       	pop	r0
    2a62:	0f be       	out	0x3f, r0	; 63
    2a64:	0f 90       	pop	r0
    2a66:	1f 90       	pop	r1
    2a68:	18 95       	reti

00002a6a <__vector_65>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT1_vect)      /* External Interrupt 1 */
    2a6a:	1f 92       	push	r1
    2a6c:	0f 92       	push	r0
    2a6e:	0f b6       	in	r0, 0x3f	; 63
    2a70:	0f 92       	push	r0
    2a72:	11 24       	eor	r1, r1
    2a74:	0b b6       	in	r0, 0x3b	; 59
    2a76:	0f 92       	push	r0
    2a78:	2f 93       	push	r18
    2a7a:	3f 93       	push	r19
    2a7c:	4f 93       	push	r20
    2a7e:	5f 93       	push	r21
    2a80:	6f 93       	push	r22
    2a82:	7f 93       	push	r23
    2a84:	8f 93       	push	r24
    2a86:	9f 93       	push	r25
    2a88:	af 93       	push	r26
    2a8a:	bf 93       	push	r27
    2a8c:	ef 93       	push	r30
    2a8e:	ff 93       	push	r31
    2a90:	e0 91 73 21 	lds	r30, 0x2173
    2a94:	f0 91 74 21 	lds	r31, 0x2174
    2a98:	30 97       	sbiw	r30, 0x00	; 0
    2a9a:	29 f0       	breq	.+10     	; 0x2aa6 <__vector_65+0x3c>
    2a9c:	80 91 69 22 	lds	r24, 0x2269
    2aa0:	90 91 6a 22 	lds	r25, 0x226A
    2aa4:	19 95       	eicall
    2aa6:	ff 91       	pop	r31
    2aa8:	ef 91       	pop	r30
    2aaa:	bf 91       	pop	r27
    2aac:	af 91       	pop	r26
    2aae:	9f 91       	pop	r25
    2ab0:	8f 91       	pop	r24
    2ab2:	7f 91       	pop	r23
    2ab4:	6f 91       	pop	r22
    2ab6:	5f 91       	pop	r21
    2ab8:	4f 91       	pop	r20
    2aba:	3f 91       	pop	r19
    2abc:	2f 91       	pop	r18
    2abe:	0f 90       	pop	r0
    2ac0:	0b be       	out	0x3b, r0	; 59
    2ac2:	0f 90       	pop	r0
    2ac4:	0f be       	out	0x3f, r0	; 63
    2ac6:	0f 90       	pop	r0
    2ac8:	1f 90       	pop	r1
    2aca:	18 95       	reti

00002acc <__vector_66>:

/* PORTA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT0_vect)      /* External Interrupt 0 */
    2acc:	1f 92       	push	r1
    2ace:	0f 92       	push	r0
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	0f 92       	push	r0
    2ad4:	11 24       	eor	r1, r1
    2ad6:	0b b6       	in	r0, 0x3b	; 59
    2ad8:	0f 92       	push	r0
    2ada:	2f 93       	push	r18
    2adc:	3f 93       	push	r19
    2ade:	4f 93       	push	r20
    2ae0:	5f 93       	push	r21
    2ae2:	6f 93       	push	r22
    2ae4:	7f 93       	push	r23
    2ae6:	8f 93       	push	r24
    2ae8:	9f 93       	push	r25
    2aea:	af 93       	push	r26
    2aec:	bf 93       	push	r27
    2aee:	ef 93       	push	r30
    2af0:	ff 93       	push	r31
    2af2:	e0 91 75 21 	lds	r30, 0x2175
    2af6:	f0 91 76 21 	lds	r31, 0x2176
    2afa:	30 97       	sbiw	r30, 0x00	; 0
    2afc:	29 f0       	breq	.+10     	; 0x2b08 <__vector_66+0x3c>
    2afe:	80 91 6b 22 	lds	r24, 0x226B
    2b02:	90 91 6c 22 	lds	r25, 0x226C
    2b06:	19 95       	eicall
    2b08:	ff 91       	pop	r31
    2b0a:	ef 91       	pop	r30
    2b0c:	bf 91       	pop	r27
    2b0e:	af 91       	pop	r26
    2b10:	9f 91       	pop	r25
    2b12:	8f 91       	pop	r24
    2b14:	7f 91       	pop	r23
    2b16:	6f 91       	pop	r22
    2b18:	5f 91       	pop	r21
    2b1a:	4f 91       	pop	r20
    2b1c:	3f 91       	pop	r19
    2b1e:	2f 91       	pop	r18
    2b20:	0f 90       	pop	r0
    2b22:	0b be       	out	0x3b, r0	; 59
    2b24:	0f 90       	pop	r0
    2b26:	0f be       	out	0x3f, r0	; 63
    2b28:	0f 90       	pop	r0
    2b2a:	1f 90       	pop	r1
    2b2c:	18 95       	reti

00002b2e <__vector_67>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT1_vect)      /* External Interrupt 1 */
    2b2e:	1f 92       	push	r1
    2b30:	0f 92       	push	r0
    2b32:	0f b6       	in	r0, 0x3f	; 63
    2b34:	0f 92       	push	r0
    2b36:	11 24       	eor	r1, r1
    2b38:	0b b6       	in	r0, 0x3b	; 59
    2b3a:	0f 92       	push	r0
    2b3c:	2f 93       	push	r18
    2b3e:	3f 93       	push	r19
    2b40:	4f 93       	push	r20
    2b42:	5f 93       	push	r21
    2b44:	6f 93       	push	r22
    2b46:	7f 93       	push	r23
    2b48:	8f 93       	push	r24
    2b4a:	9f 93       	push	r25
    2b4c:	af 93       	push	r26
    2b4e:	bf 93       	push	r27
    2b50:	ef 93       	push	r30
    2b52:	ff 93       	push	r31
    2b54:	e0 91 77 21 	lds	r30, 0x2177
    2b58:	f0 91 78 21 	lds	r31, 0x2178
    2b5c:	30 97       	sbiw	r30, 0x00	; 0
    2b5e:	29 f0       	breq	.+10     	; 0x2b6a <__vector_67+0x3c>
    2b60:	80 91 6d 22 	lds	r24, 0x226D
    2b64:	90 91 6e 22 	lds	r25, 0x226E
    2b68:	19 95       	eicall
    2b6a:	ff 91       	pop	r31
    2b6c:	ef 91       	pop	r30
    2b6e:	bf 91       	pop	r27
    2b70:	af 91       	pop	r26
    2b72:	9f 91       	pop	r25
    2b74:	8f 91       	pop	r24
    2b76:	7f 91       	pop	r23
    2b78:	6f 91       	pop	r22
    2b7a:	5f 91       	pop	r21
    2b7c:	4f 91       	pop	r20
    2b7e:	3f 91       	pop	r19
    2b80:	2f 91       	pop	r18
    2b82:	0f 90       	pop	r0
    2b84:	0b be       	out	0x3b, r0	; 59
    2b86:	0f 90       	pop	r0
    2b88:	0f be       	out	0x3f, r0	; 63
    2b8a:	0f 90       	pop	r0
    2b8c:	1f 90       	pop	r1
    2b8e:	18 95       	reti

00002b90 <__vector_68>:

/* ACA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC0_vect)      /* AC0 Interrupt */
    2b90:	1f 92       	push	r1
    2b92:	0f 92       	push	r0
    2b94:	0f b6       	in	r0, 0x3f	; 63
    2b96:	0f 92       	push	r0
    2b98:	11 24       	eor	r1, r1
    2b9a:	0b b6       	in	r0, 0x3b	; 59
    2b9c:	0f 92       	push	r0
    2b9e:	2f 93       	push	r18
    2ba0:	3f 93       	push	r19
    2ba2:	4f 93       	push	r20
    2ba4:	5f 93       	push	r21
    2ba6:	6f 93       	push	r22
    2ba8:	7f 93       	push	r23
    2baa:	8f 93       	push	r24
    2bac:	9f 93       	push	r25
    2bae:	af 93       	push	r26
    2bb0:	bf 93       	push	r27
    2bb2:	ef 93       	push	r30
    2bb4:	ff 93       	push	r31
    2bb6:	e0 91 79 21 	lds	r30, 0x2179
    2bba:	f0 91 7a 21 	lds	r31, 0x217A
    2bbe:	30 97       	sbiw	r30, 0x00	; 0
    2bc0:	29 f0       	breq	.+10     	; 0x2bcc <__vector_68+0x3c>
    2bc2:	80 91 6f 22 	lds	r24, 0x226F
    2bc6:	90 91 70 22 	lds	r25, 0x2270
    2bca:	19 95       	eicall
    2bcc:	ff 91       	pop	r31
    2bce:	ef 91       	pop	r30
    2bd0:	bf 91       	pop	r27
    2bd2:	af 91       	pop	r26
    2bd4:	9f 91       	pop	r25
    2bd6:	8f 91       	pop	r24
    2bd8:	7f 91       	pop	r23
    2bda:	6f 91       	pop	r22
    2bdc:	5f 91       	pop	r21
    2bde:	4f 91       	pop	r20
    2be0:	3f 91       	pop	r19
    2be2:	2f 91       	pop	r18
    2be4:	0f 90       	pop	r0
    2be6:	0b be       	out	0x3b, r0	; 59
    2be8:	0f 90       	pop	r0
    2bea:	0f be       	out	0x3f, r0	; 63
    2bec:	0f 90       	pop	r0
    2bee:	1f 90       	pop	r1
    2bf0:	18 95       	reti

00002bf2 <__vector_69>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC1_vect)      /* AC1 Interrupt */
    2bf2:	1f 92       	push	r1
    2bf4:	0f 92       	push	r0
    2bf6:	0f b6       	in	r0, 0x3f	; 63
    2bf8:	0f 92       	push	r0
    2bfa:	11 24       	eor	r1, r1
    2bfc:	0b b6       	in	r0, 0x3b	; 59
    2bfe:	0f 92       	push	r0
    2c00:	2f 93       	push	r18
    2c02:	3f 93       	push	r19
    2c04:	4f 93       	push	r20
    2c06:	5f 93       	push	r21
    2c08:	6f 93       	push	r22
    2c0a:	7f 93       	push	r23
    2c0c:	8f 93       	push	r24
    2c0e:	9f 93       	push	r25
    2c10:	af 93       	push	r26
    2c12:	bf 93       	push	r27
    2c14:	ef 93       	push	r30
    2c16:	ff 93       	push	r31
    2c18:	e0 91 7b 21 	lds	r30, 0x217B
    2c1c:	f0 91 7c 21 	lds	r31, 0x217C
    2c20:	30 97       	sbiw	r30, 0x00	; 0
    2c22:	29 f0       	breq	.+10     	; 0x2c2e <__vector_69+0x3c>
    2c24:	80 91 71 22 	lds	r24, 0x2271
    2c28:	90 91 72 22 	lds	r25, 0x2272
    2c2c:	19 95       	eicall
    2c2e:	ff 91       	pop	r31
    2c30:	ef 91       	pop	r30
    2c32:	bf 91       	pop	r27
    2c34:	af 91       	pop	r26
    2c36:	9f 91       	pop	r25
    2c38:	8f 91       	pop	r24
    2c3a:	7f 91       	pop	r23
    2c3c:	6f 91       	pop	r22
    2c3e:	5f 91       	pop	r21
    2c40:	4f 91       	pop	r20
    2c42:	3f 91       	pop	r19
    2c44:	2f 91       	pop	r18
    2c46:	0f 90       	pop	r0
    2c48:	0b be       	out	0x3b, r0	; 59
    2c4a:	0f 90       	pop	r0
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	0f 90       	pop	r0
    2c50:	1f 90       	pop	r1
    2c52:	18 95       	reti

00002c54 <__vector_70>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_ACW_vect)      /* ACW Window Mode Interrupt */
    2c54:	1f 92       	push	r1
    2c56:	0f 92       	push	r0
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	0f 92       	push	r0
    2c5c:	11 24       	eor	r1, r1
    2c5e:	0b b6       	in	r0, 0x3b	; 59
    2c60:	0f 92       	push	r0
    2c62:	2f 93       	push	r18
    2c64:	3f 93       	push	r19
    2c66:	4f 93       	push	r20
    2c68:	5f 93       	push	r21
    2c6a:	6f 93       	push	r22
    2c6c:	7f 93       	push	r23
    2c6e:	8f 93       	push	r24
    2c70:	9f 93       	push	r25
    2c72:	af 93       	push	r26
    2c74:	bf 93       	push	r27
    2c76:	ef 93       	push	r30
    2c78:	ff 93       	push	r31
    2c7a:	e0 91 7d 21 	lds	r30, 0x217D
    2c7e:	f0 91 7e 21 	lds	r31, 0x217E
    2c82:	30 97       	sbiw	r30, 0x00	; 0
    2c84:	29 f0       	breq	.+10     	; 0x2c90 <__vector_70+0x3c>
    2c86:	80 91 73 22 	lds	r24, 0x2273
    2c8a:	90 91 74 22 	lds	r25, 0x2274
    2c8e:	19 95       	eicall
    2c90:	ff 91       	pop	r31
    2c92:	ef 91       	pop	r30
    2c94:	bf 91       	pop	r27
    2c96:	af 91       	pop	r26
    2c98:	9f 91       	pop	r25
    2c9a:	8f 91       	pop	r24
    2c9c:	7f 91       	pop	r23
    2c9e:	6f 91       	pop	r22
    2ca0:	5f 91       	pop	r21
    2ca2:	4f 91       	pop	r20
    2ca4:	3f 91       	pop	r19
    2ca6:	2f 91       	pop	r18
    2ca8:	0f 90       	pop	r0
    2caa:	0b be       	out	0x3b, r0	; 59
    2cac:	0f 90       	pop	r0
    2cae:	0f be       	out	0x3f, r0	; 63
    2cb0:	0f 90       	pop	r0
    2cb2:	1f 90       	pop	r1
    2cb4:	18 95       	reti

00002cb6 <__vector_71>:

/* ADCA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH0_vect)      /* Interrupt 0 */
    2cb6:	1f 92       	push	r1
    2cb8:	0f 92       	push	r0
    2cba:	0f b6       	in	r0, 0x3f	; 63
    2cbc:	0f 92       	push	r0
    2cbe:	11 24       	eor	r1, r1
    2cc0:	0b b6       	in	r0, 0x3b	; 59
    2cc2:	0f 92       	push	r0
    2cc4:	2f 93       	push	r18
    2cc6:	3f 93       	push	r19
    2cc8:	4f 93       	push	r20
    2cca:	5f 93       	push	r21
    2ccc:	6f 93       	push	r22
    2cce:	7f 93       	push	r23
    2cd0:	8f 93       	push	r24
    2cd2:	9f 93       	push	r25
    2cd4:	af 93       	push	r26
    2cd6:	bf 93       	push	r27
    2cd8:	ef 93       	push	r30
    2cda:	ff 93       	push	r31
    2cdc:	e0 91 7f 21 	lds	r30, 0x217F
    2ce0:	f0 91 80 21 	lds	r31, 0x2180
    2ce4:	30 97       	sbiw	r30, 0x00	; 0
    2ce6:	29 f0       	breq	.+10     	; 0x2cf2 <__vector_71+0x3c>
    2ce8:	80 91 75 22 	lds	r24, 0x2275
    2cec:	90 91 76 22 	lds	r25, 0x2276
    2cf0:	19 95       	eicall
    2cf2:	ff 91       	pop	r31
    2cf4:	ef 91       	pop	r30
    2cf6:	bf 91       	pop	r27
    2cf8:	af 91       	pop	r26
    2cfa:	9f 91       	pop	r25
    2cfc:	8f 91       	pop	r24
    2cfe:	7f 91       	pop	r23
    2d00:	6f 91       	pop	r22
    2d02:	5f 91       	pop	r21
    2d04:	4f 91       	pop	r20
    2d06:	3f 91       	pop	r19
    2d08:	2f 91       	pop	r18
    2d0a:	0f 90       	pop	r0
    2d0c:	0b be       	out	0x3b, r0	; 59
    2d0e:	0f 90       	pop	r0
    2d10:	0f be       	out	0x3f, r0	; 63
    2d12:	0f 90       	pop	r0
    2d14:	1f 90       	pop	r1
    2d16:	18 95       	reti

00002d18 <__vector_72>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH1_vect)      /* Interrupt 1 */
    2d18:	1f 92       	push	r1
    2d1a:	0f 92       	push	r0
    2d1c:	0f b6       	in	r0, 0x3f	; 63
    2d1e:	0f 92       	push	r0
    2d20:	11 24       	eor	r1, r1
    2d22:	0b b6       	in	r0, 0x3b	; 59
    2d24:	0f 92       	push	r0
    2d26:	2f 93       	push	r18
    2d28:	3f 93       	push	r19
    2d2a:	4f 93       	push	r20
    2d2c:	5f 93       	push	r21
    2d2e:	6f 93       	push	r22
    2d30:	7f 93       	push	r23
    2d32:	8f 93       	push	r24
    2d34:	9f 93       	push	r25
    2d36:	af 93       	push	r26
    2d38:	bf 93       	push	r27
    2d3a:	ef 93       	push	r30
    2d3c:	ff 93       	push	r31
    2d3e:	e0 91 81 21 	lds	r30, 0x2181
    2d42:	f0 91 82 21 	lds	r31, 0x2182
    2d46:	30 97       	sbiw	r30, 0x00	; 0
    2d48:	29 f0       	breq	.+10     	; 0x2d54 <__vector_72+0x3c>
    2d4a:	80 91 77 22 	lds	r24, 0x2277
    2d4e:	90 91 78 22 	lds	r25, 0x2278
    2d52:	19 95       	eicall
    2d54:	ff 91       	pop	r31
    2d56:	ef 91       	pop	r30
    2d58:	bf 91       	pop	r27
    2d5a:	af 91       	pop	r26
    2d5c:	9f 91       	pop	r25
    2d5e:	8f 91       	pop	r24
    2d60:	7f 91       	pop	r23
    2d62:	6f 91       	pop	r22
    2d64:	5f 91       	pop	r21
    2d66:	4f 91       	pop	r20
    2d68:	3f 91       	pop	r19
    2d6a:	2f 91       	pop	r18
    2d6c:	0f 90       	pop	r0
    2d6e:	0b be       	out	0x3b, r0	; 59
    2d70:	0f 90       	pop	r0
    2d72:	0f be       	out	0x3f, r0	; 63
    2d74:	0f 90       	pop	r0
    2d76:	1f 90       	pop	r1
    2d78:	18 95       	reti

00002d7a <__vector_73>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH2_vect)      /* Interrupt 2 */
    2d7a:	1f 92       	push	r1
    2d7c:	0f 92       	push	r0
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	0f 92       	push	r0
    2d82:	11 24       	eor	r1, r1
    2d84:	0b b6       	in	r0, 0x3b	; 59
    2d86:	0f 92       	push	r0
    2d88:	2f 93       	push	r18
    2d8a:	3f 93       	push	r19
    2d8c:	4f 93       	push	r20
    2d8e:	5f 93       	push	r21
    2d90:	6f 93       	push	r22
    2d92:	7f 93       	push	r23
    2d94:	8f 93       	push	r24
    2d96:	9f 93       	push	r25
    2d98:	af 93       	push	r26
    2d9a:	bf 93       	push	r27
    2d9c:	ef 93       	push	r30
    2d9e:	ff 93       	push	r31
    2da0:	e0 91 83 21 	lds	r30, 0x2183
    2da4:	f0 91 84 21 	lds	r31, 0x2184
    2da8:	30 97       	sbiw	r30, 0x00	; 0
    2daa:	29 f0       	breq	.+10     	; 0x2db6 <__vector_73+0x3c>
    2dac:	80 91 79 22 	lds	r24, 0x2279
    2db0:	90 91 7a 22 	lds	r25, 0x227A
    2db4:	19 95       	eicall
    2db6:	ff 91       	pop	r31
    2db8:	ef 91       	pop	r30
    2dba:	bf 91       	pop	r27
    2dbc:	af 91       	pop	r26
    2dbe:	9f 91       	pop	r25
    2dc0:	8f 91       	pop	r24
    2dc2:	7f 91       	pop	r23
    2dc4:	6f 91       	pop	r22
    2dc6:	5f 91       	pop	r21
    2dc8:	4f 91       	pop	r20
    2dca:	3f 91       	pop	r19
    2dcc:	2f 91       	pop	r18
    2dce:	0f 90       	pop	r0
    2dd0:	0b be       	out	0x3b, r0	; 59
    2dd2:	0f 90       	pop	r0
    2dd4:	0f be       	out	0x3f, r0	; 63
    2dd6:	0f 90       	pop	r0
    2dd8:	1f 90       	pop	r1
    2dda:	18 95       	reti

00002ddc <__vector_74>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH3_vect)      /* Interrupt 3 */
    2ddc:	1f 92       	push	r1
    2dde:	0f 92       	push	r0
    2de0:	0f b6       	in	r0, 0x3f	; 63
    2de2:	0f 92       	push	r0
    2de4:	11 24       	eor	r1, r1
    2de6:	0b b6       	in	r0, 0x3b	; 59
    2de8:	0f 92       	push	r0
    2dea:	2f 93       	push	r18
    2dec:	3f 93       	push	r19
    2dee:	4f 93       	push	r20
    2df0:	5f 93       	push	r21
    2df2:	6f 93       	push	r22
    2df4:	7f 93       	push	r23
    2df6:	8f 93       	push	r24
    2df8:	9f 93       	push	r25
    2dfa:	af 93       	push	r26
    2dfc:	bf 93       	push	r27
    2dfe:	ef 93       	push	r30
    2e00:	ff 93       	push	r31
    2e02:	e0 91 85 21 	lds	r30, 0x2185
    2e06:	f0 91 86 21 	lds	r31, 0x2186
    2e0a:	30 97       	sbiw	r30, 0x00	; 0
    2e0c:	29 f0       	breq	.+10     	; 0x2e18 <__vector_74+0x3c>
    2e0e:	80 91 7b 22 	lds	r24, 0x227B
    2e12:	90 91 7c 22 	lds	r25, 0x227C
    2e16:	19 95       	eicall
    2e18:	ff 91       	pop	r31
    2e1a:	ef 91       	pop	r30
    2e1c:	bf 91       	pop	r27
    2e1e:	af 91       	pop	r26
    2e20:	9f 91       	pop	r25
    2e22:	8f 91       	pop	r24
    2e24:	7f 91       	pop	r23
    2e26:	6f 91       	pop	r22
    2e28:	5f 91       	pop	r21
    2e2a:	4f 91       	pop	r20
    2e2c:	3f 91       	pop	r19
    2e2e:	2f 91       	pop	r18
    2e30:	0f 90       	pop	r0
    2e32:	0b be       	out	0x3b, r0	; 59
    2e34:	0f 90       	pop	r0
    2e36:	0f be       	out	0x3f, r0	; 63
    2e38:	0f 90       	pop	r0
    2e3a:	1f 90       	pop	r1
    2e3c:	18 95       	reti

00002e3e <__vector_77>:

/* TCD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_OVF_vect)      /* Overflow Interrupt */
    2e3e:	1f 92       	push	r1
    2e40:	0f 92       	push	r0
    2e42:	0f b6       	in	r0, 0x3f	; 63
    2e44:	0f 92       	push	r0
    2e46:	11 24       	eor	r1, r1
    2e48:	0b b6       	in	r0, 0x3b	; 59
    2e4a:	0f 92       	push	r0
    2e4c:	2f 93       	push	r18
    2e4e:	3f 93       	push	r19
    2e50:	4f 93       	push	r20
    2e52:	5f 93       	push	r21
    2e54:	6f 93       	push	r22
    2e56:	7f 93       	push	r23
    2e58:	8f 93       	push	r24
    2e5a:	9f 93       	push	r25
    2e5c:	af 93       	push	r26
    2e5e:	bf 93       	push	r27
    2e60:	ef 93       	push	r30
    2e62:	ff 93       	push	r31
    2e64:	e0 91 8b 21 	lds	r30, 0x218B
    2e68:	f0 91 8c 21 	lds	r31, 0x218C
    2e6c:	30 97       	sbiw	r30, 0x00	; 0
    2e6e:	29 f0       	breq	.+10     	; 0x2e7a <__vector_77+0x3c>
    2e70:	80 91 81 22 	lds	r24, 0x2281
    2e74:	90 91 82 22 	lds	r25, 0x2282
    2e78:	19 95       	eicall
    2e7a:	ff 91       	pop	r31
    2e7c:	ef 91       	pop	r30
    2e7e:	bf 91       	pop	r27
    2e80:	af 91       	pop	r26
    2e82:	9f 91       	pop	r25
    2e84:	8f 91       	pop	r24
    2e86:	7f 91       	pop	r23
    2e88:	6f 91       	pop	r22
    2e8a:	5f 91       	pop	r21
    2e8c:	4f 91       	pop	r20
    2e8e:	3f 91       	pop	r19
    2e90:	2f 91       	pop	r18
    2e92:	0f 90       	pop	r0
    2e94:	0b be       	out	0x3b, r0	; 59
    2e96:	0f 90       	pop	r0
    2e98:	0f be       	out	0x3f, r0	; 63
    2e9a:	0f 90       	pop	r0
    2e9c:	1f 90       	pop	r1
    2e9e:	18 95       	reti

00002ea0 <__vector_78>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_ERR_vect)      /* Error Interrupt */
    2ea0:	1f 92       	push	r1
    2ea2:	0f 92       	push	r0
    2ea4:	0f b6       	in	r0, 0x3f	; 63
    2ea6:	0f 92       	push	r0
    2ea8:	11 24       	eor	r1, r1
    2eaa:	0b b6       	in	r0, 0x3b	; 59
    2eac:	0f 92       	push	r0
    2eae:	2f 93       	push	r18
    2eb0:	3f 93       	push	r19
    2eb2:	4f 93       	push	r20
    2eb4:	5f 93       	push	r21
    2eb6:	6f 93       	push	r22
    2eb8:	7f 93       	push	r23
    2eba:	8f 93       	push	r24
    2ebc:	9f 93       	push	r25
    2ebe:	af 93       	push	r26
    2ec0:	bf 93       	push	r27
    2ec2:	ef 93       	push	r30
    2ec4:	ff 93       	push	r31
    2ec6:	e0 91 8d 21 	lds	r30, 0x218D
    2eca:	f0 91 8e 21 	lds	r31, 0x218E
    2ece:	30 97       	sbiw	r30, 0x00	; 0
    2ed0:	29 f0       	breq	.+10     	; 0x2edc <__vector_78+0x3c>
    2ed2:	80 91 83 22 	lds	r24, 0x2283
    2ed6:	90 91 84 22 	lds	r25, 0x2284
    2eda:	19 95       	eicall
    2edc:	ff 91       	pop	r31
    2ede:	ef 91       	pop	r30
    2ee0:	bf 91       	pop	r27
    2ee2:	af 91       	pop	r26
    2ee4:	9f 91       	pop	r25
    2ee6:	8f 91       	pop	r24
    2ee8:	7f 91       	pop	r23
    2eea:	6f 91       	pop	r22
    2eec:	5f 91       	pop	r21
    2eee:	4f 91       	pop	r20
    2ef0:	3f 91       	pop	r19
    2ef2:	2f 91       	pop	r18
    2ef4:	0f 90       	pop	r0
    2ef6:	0b be       	out	0x3b, r0	; 59
    2ef8:	0f 90       	pop	r0
    2efa:	0f be       	out	0x3f, r0	; 63
    2efc:	0f 90       	pop	r0
    2efe:	1f 90       	pop	r1
    2f00:	18 95       	reti

00002f02 <__vector_79>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCA_vect)      /* Compare or Capture A Interrupt */
    2f02:	1f 92       	push	r1
    2f04:	0f 92       	push	r0
    2f06:	0f b6       	in	r0, 0x3f	; 63
    2f08:	0f 92       	push	r0
    2f0a:	11 24       	eor	r1, r1
    2f0c:	0b b6       	in	r0, 0x3b	; 59
    2f0e:	0f 92       	push	r0
    2f10:	2f 93       	push	r18
    2f12:	3f 93       	push	r19
    2f14:	4f 93       	push	r20
    2f16:	5f 93       	push	r21
    2f18:	6f 93       	push	r22
    2f1a:	7f 93       	push	r23
    2f1c:	8f 93       	push	r24
    2f1e:	9f 93       	push	r25
    2f20:	af 93       	push	r26
    2f22:	bf 93       	push	r27
    2f24:	ef 93       	push	r30
    2f26:	ff 93       	push	r31
    2f28:	e0 91 8f 21 	lds	r30, 0x218F
    2f2c:	f0 91 90 21 	lds	r31, 0x2190
    2f30:	30 97       	sbiw	r30, 0x00	; 0
    2f32:	29 f0       	breq	.+10     	; 0x2f3e <__vector_79+0x3c>
    2f34:	80 91 85 22 	lds	r24, 0x2285
    2f38:	90 91 86 22 	lds	r25, 0x2286
    2f3c:	19 95       	eicall
    2f3e:	ff 91       	pop	r31
    2f40:	ef 91       	pop	r30
    2f42:	bf 91       	pop	r27
    2f44:	af 91       	pop	r26
    2f46:	9f 91       	pop	r25
    2f48:	8f 91       	pop	r24
    2f4a:	7f 91       	pop	r23
    2f4c:	6f 91       	pop	r22
    2f4e:	5f 91       	pop	r21
    2f50:	4f 91       	pop	r20
    2f52:	3f 91       	pop	r19
    2f54:	2f 91       	pop	r18
    2f56:	0f 90       	pop	r0
    2f58:	0b be       	out	0x3b, r0	; 59
    2f5a:	0f 90       	pop	r0
    2f5c:	0f be       	out	0x3f, r0	; 63
    2f5e:	0f 90       	pop	r0
    2f60:	1f 90       	pop	r1
    2f62:	18 95       	reti

00002f64 <__vector_80>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCB_vect)      /* Compare or Capture B Interrupt */
    2f64:	1f 92       	push	r1
    2f66:	0f 92       	push	r0
    2f68:	0f b6       	in	r0, 0x3f	; 63
    2f6a:	0f 92       	push	r0
    2f6c:	11 24       	eor	r1, r1
    2f6e:	0b b6       	in	r0, 0x3b	; 59
    2f70:	0f 92       	push	r0
    2f72:	2f 93       	push	r18
    2f74:	3f 93       	push	r19
    2f76:	4f 93       	push	r20
    2f78:	5f 93       	push	r21
    2f7a:	6f 93       	push	r22
    2f7c:	7f 93       	push	r23
    2f7e:	8f 93       	push	r24
    2f80:	9f 93       	push	r25
    2f82:	af 93       	push	r26
    2f84:	bf 93       	push	r27
    2f86:	ef 93       	push	r30
    2f88:	ff 93       	push	r31
    2f8a:	e0 91 91 21 	lds	r30, 0x2191
    2f8e:	f0 91 92 21 	lds	r31, 0x2192
    2f92:	30 97       	sbiw	r30, 0x00	; 0
    2f94:	29 f0       	breq	.+10     	; 0x2fa0 <__vector_80+0x3c>
    2f96:	80 91 87 22 	lds	r24, 0x2287
    2f9a:	90 91 88 22 	lds	r25, 0x2288
    2f9e:	19 95       	eicall
    2fa0:	ff 91       	pop	r31
    2fa2:	ef 91       	pop	r30
    2fa4:	bf 91       	pop	r27
    2fa6:	af 91       	pop	r26
    2fa8:	9f 91       	pop	r25
    2faa:	8f 91       	pop	r24
    2fac:	7f 91       	pop	r23
    2fae:	6f 91       	pop	r22
    2fb0:	5f 91       	pop	r21
    2fb2:	4f 91       	pop	r20
    2fb4:	3f 91       	pop	r19
    2fb6:	2f 91       	pop	r18
    2fb8:	0f 90       	pop	r0
    2fba:	0b be       	out	0x3b, r0	; 59
    2fbc:	0f 90       	pop	r0
    2fbe:	0f be       	out	0x3f, r0	; 63
    2fc0:	0f 90       	pop	r0
    2fc2:	1f 90       	pop	r1
    2fc4:	18 95       	reti

00002fc6 <__vector_81>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCC_vect)      /* Compare or Capture C Interrupt */
    2fc6:	1f 92       	push	r1
    2fc8:	0f 92       	push	r0
    2fca:	0f b6       	in	r0, 0x3f	; 63
    2fcc:	0f 92       	push	r0
    2fce:	11 24       	eor	r1, r1
    2fd0:	0b b6       	in	r0, 0x3b	; 59
    2fd2:	0f 92       	push	r0
    2fd4:	2f 93       	push	r18
    2fd6:	3f 93       	push	r19
    2fd8:	4f 93       	push	r20
    2fda:	5f 93       	push	r21
    2fdc:	6f 93       	push	r22
    2fde:	7f 93       	push	r23
    2fe0:	8f 93       	push	r24
    2fe2:	9f 93       	push	r25
    2fe4:	af 93       	push	r26
    2fe6:	bf 93       	push	r27
    2fe8:	ef 93       	push	r30
    2fea:	ff 93       	push	r31
    2fec:	e0 91 93 21 	lds	r30, 0x2193
    2ff0:	f0 91 94 21 	lds	r31, 0x2194
    2ff4:	30 97       	sbiw	r30, 0x00	; 0
    2ff6:	29 f0       	breq	.+10     	; 0x3002 <__vector_81+0x3c>
    2ff8:	80 91 89 22 	lds	r24, 0x2289
    2ffc:	90 91 8a 22 	lds	r25, 0x228A
    3000:	19 95       	eicall
    3002:	ff 91       	pop	r31
    3004:	ef 91       	pop	r30
    3006:	bf 91       	pop	r27
    3008:	af 91       	pop	r26
    300a:	9f 91       	pop	r25
    300c:	8f 91       	pop	r24
    300e:	7f 91       	pop	r23
    3010:	6f 91       	pop	r22
    3012:	5f 91       	pop	r21
    3014:	4f 91       	pop	r20
    3016:	3f 91       	pop	r19
    3018:	2f 91       	pop	r18
    301a:	0f 90       	pop	r0
    301c:	0b be       	out	0x3b, r0	; 59
    301e:	0f 90       	pop	r0
    3020:	0f be       	out	0x3f, r0	; 63
    3022:	0f 90       	pop	r0
    3024:	1f 90       	pop	r1
    3026:	18 95       	reti

00003028 <__vector_82>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCD_vect)      /* Compare or Capture D Interrupt */
    3028:	1f 92       	push	r1
    302a:	0f 92       	push	r0
    302c:	0f b6       	in	r0, 0x3f	; 63
    302e:	0f 92       	push	r0
    3030:	11 24       	eor	r1, r1
    3032:	0b b6       	in	r0, 0x3b	; 59
    3034:	0f 92       	push	r0
    3036:	2f 93       	push	r18
    3038:	3f 93       	push	r19
    303a:	4f 93       	push	r20
    303c:	5f 93       	push	r21
    303e:	6f 93       	push	r22
    3040:	7f 93       	push	r23
    3042:	8f 93       	push	r24
    3044:	9f 93       	push	r25
    3046:	af 93       	push	r26
    3048:	bf 93       	push	r27
    304a:	ef 93       	push	r30
    304c:	ff 93       	push	r31
    304e:	e0 91 95 21 	lds	r30, 0x2195
    3052:	f0 91 96 21 	lds	r31, 0x2196
    3056:	30 97       	sbiw	r30, 0x00	; 0
    3058:	29 f0       	breq	.+10     	; 0x3064 <__vector_82+0x3c>
    305a:	80 91 8b 22 	lds	r24, 0x228B
    305e:	90 91 8c 22 	lds	r25, 0x228C
    3062:	19 95       	eicall
    3064:	ff 91       	pop	r31
    3066:	ef 91       	pop	r30
    3068:	bf 91       	pop	r27
    306a:	af 91       	pop	r26
    306c:	9f 91       	pop	r25
    306e:	8f 91       	pop	r24
    3070:	7f 91       	pop	r23
    3072:	6f 91       	pop	r22
    3074:	5f 91       	pop	r21
    3076:	4f 91       	pop	r20
    3078:	3f 91       	pop	r19
    307a:	2f 91       	pop	r18
    307c:	0f 90       	pop	r0
    307e:	0b be       	out	0x3b, r0	; 59
    3080:	0f 90       	pop	r0
    3082:	0f be       	out	0x3f, r0	; 63
    3084:	0f 90       	pop	r0
    3086:	1f 90       	pop	r1
    3088:	18 95       	reti

0000308a <__vector_83>:

/* TCD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_OVF_vect)      /* Overflow Interrupt */
    308a:	1f 92       	push	r1
    308c:	0f 92       	push	r0
    308e:	0f b6       	in	r0, 0x3f	; 63
    3090:	0f 92       	push	r0
    3092:	11 24       	eor	r1, r1
    3094:	0b b6       	in	r0, 0x3b	; 59
    3096:	0f 92       	push	r0
    3098:	2f 93       	push	r18
    309a:	3f 93       	push	r19
    309c:	4f 93       	push	r20
    309e:	5f 93       	push	r21
    30a0:	6f 93       	push	r22
    30a2:	7f 93       	push	r23
    30a4:	8f 93       	push	r24
    30a6:	9f 93       	push	r25
    30a8:	af 93       	push	r26
    30aa:	bf 93       	push	r27
    30ac:	ef 93       	push	r30
    30ae:	ff 93       	push	r31
    30b0:	e0 91 97 21 	lds	r30, 0x2197
    30b4:	f0 91 98 21 	lds	r31, 0x2198
    30b8:	30 97       	sbiw	r30, 0x00	; 0
    30ba:	29 f0       	breq	.+10     	; 0x30c6 <__vector_83+0x3c>
    30bc:	80 91 8d 22 	lds	r24, 0x228D
    30c0:	90 91 8e 22 	lds	r25, 0x228E
    30c4:	19 95       	eicall
    30c6:	ff 91       	pop	r31
    30c8:	ef 91       	pop	r30
    30ca:	bf 91       	pop	r27
    30cc:	af 91       	pop	r26
    30ce:	9f 91       	pop	r25
    30d0:	8f 91       	pop	r24
    30d2:	7f 91       	pop	r23
    30d4:	6f 91       	pop	r22
    30d6:	5f 91       	pop	r21
    30d8:	4f 91       	pop	r20
    30da:	3f 91       	pop	r19
    30dc:	2f 91       	pop	r18
    30de:	0f 90       	pop	r0
    30e0:	0b be       	out	0x3b, r0	; 59
    30e2:	0f 90       	pop	r0
    30e4:	0f be       	out	0x3f, r0	; 63
    30e6:	0f 90       	pop	r0
    30e8:	1f 90       	pop	r1
    30ea:	18 95       	reti

000030ec <__vector_84>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_ERR_vect)      /* Error Interrupt */
    30ec:	1f 92       	push	r1
    30ee:	0f 92       	push	r0
    30f0:	0f b6       	in	r0, 0x3f	; 63
    30f2:	0f 92       	push	r0
    30f4:	11 24       	eor	r1, r1
    30f6:	0b b6       	in	r0, 0x3b	; 59
    30f8:	0f 92       	push	r0
    30fa:	2f 93       	push	r18
    30fc:	3f 93       	push	r19
    30fe:	4f 93       	push	r20
    3100:	5f 93       	push	r21
    3102:	6f 93       	push	r22
    3104:	7f 93       	push	r23
    3106:	8f 93       	push	r24
    3108:	9f 93       	push	r25
    310a:	af 93       	push	r26
    310c:	bf 93       	push	r27
    310e:	ef 93       	push	r30
    3110:	ff 93       	push	r31
    3112:	e0 91 99 21 	lds	r30, 0x2199
    3116:	f0 91 9a 21 	lds	r31, 0x219A
    311a:	30 97       	sbiw	r30, 0x00	; 0
    311c:	29 f0       	breq	.+10     	; 0x3128 <__vector_84+0x3c>
    311e:	80 91 8f 22 	lds	r24, 0x228F
    3122:	90 91 90 22 	lds	r25, 0x2290
    3126:	19 95       	eicall
    3128:	ff 91       	pop	r31
    312a:	ef 91       	pop	r30
    312c:	bf 91       	pop	r27
    312e:	af 91       	pop	r26
    3130:	9f 91       	pop	r25
    3132:	8f 91       	pop	r24
    3134:	7f 91       	pop	r23
    3136:	6f 91       	pop	r22
    3138:	5f 91       	pop	r21
    313a:	4f 91       	pop	r20
    313c:	3f 91       	pop	r19
    313e:	2f 91       	pop	r18
    3140:	0f 90       	pop	r0
    3142:	0b be       	out	0x3b, r0	; 59
    3144:	0f 90       	pop	r0
    3146:	0f be       	out	0x3f, r0	; 63
    3148:	0f 90       	pop	r0
    314a:	1f 90       	pop	r1
    314c:	18 95       	reti

0000314e <__vector_85>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCA_vect)      /* Compare or Capture A Interrupt */
    314e:	1f 92       	push	r1
    3150:	0f 92       	push	r0
    3152:	0f b6       	in	r0, 0x3f	; 63
    3154:	0f 92       	push	r0
    3156:	11 24       	eor	r1, r1
    3158:	0b b6       	in	r0, 0x3b	; 59
    315a:	0f 92       	push	r0
    315c:	2f 93       	push	r18
    315e:	3f 93       	push	r19
    3160:	4f 93       	push	r20
    3162:	5f 93       	push	r21
    3164:	6f 93       	push	r22
    3166:	7f 93       	push	r23
    3168:	8f 93       	push	r24
    316a:	9f 93       	push	r25
    316c:	af 93       	push	r26
    316e:	bf 93       	push	r27
    3170:	ef 93       	push	r30
    3172:	ff 93       	push	r31
    3174:	e0 91 9b 21 	lds	r30, 0x219B
    3178:	f0 91 9c 21 	lds	r31, 0x219C
    317c:	30 97       	sbiw	r30, 0x00	; 0
    317e:	29 f0       	breq	.+10     	; 0x318a <__vector_85+0x3c>
    3180:	80 91 91 22 	lds	r24, 0x2291
    3184:	90 91 92 22 	lds	r25, 0x2292
    3188:	19 95       	eicall
    318a:	ff 91       	pop	r31
    318c:	ef 91       	pop	r30
    318e:	bf 91       	pop	r27
    3190:	af 91       	pop	r26
    3192:	9f 91       	pop	r25
    3194:	8f 91       	pop	r24
    3196:	7f 91       	pop	r23
    3198:	6f 91       	pop	r22
    319a:	5f 91       	pop	r21
    319c:	4f 91       	pop	r20
    319e:	3f 91       	pop	r19
    31a0:	2f 91       	pop	r18
    31a2:	0f 90       	pop	r0
    31a4:	0b be       	out	0x3b, r0	; 59
    31a6:	0f 90       	pop	r0
    31a8:	0f be       	out	0x3f, r0	; 63
    31aa:	0f 90       	pop	r0
    31ac:	1f 90       	pop	r1
    31ae:	18 95       	reti

000031b0 <__vector_86>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCB_vect)      /* Compare or Capture B Interrupt */
    31b0:	1f 92       	push	r1
    31b2:	0f 92       	push	r0
    31b4:	0f b6       	in	r0, 0x3f	; 63
    31b6:	0f 92       	push	r0
    31b8:	11 24       	eor	r1, r1
    31ba:	0b b6       	in	r0, 0x3b	; 59
    31bc:	0f 92       	push	r0
    31be:	2f 93       	push	r18
    31c0:	3f 93       	push	r19
    31c2:	4f 93       	push	r20
    31c4:	5f 93       	push	r21
    31c6:	6f 93       	push	r22
    31c8:	7f 93       	push	r23
    31ca:	8f 93       	push	r24
    31cc:	9f 93       	push	r25
    31ce:	af 93       	push	r26
    31d0:	bf 93       	push	r27
    31d2:	ef 93       	push	r30
    31d4:	ff 93       	push	r31
    31d6:	e0 91 9d 21 	lds	r30, 0x219D
    31da:	f0 91 9e 21 	lds	r31, 0x219E
    31de:	30 97       	sbiw	r30, 0x00	; 0
    31e0:	29 f0       	breq	.+10     	; 0x31ec <__vector_86+0x3c>
    31e2:	80 91 93 22 	lds	r24, 0x2293
    31e6:	90 91 94 22 	lds	r25, 0x2294
    31ea:	19 95       	eicall
    31ec:	ff 91       	pop	r31
    31ee:	ef 91       	pop	r30
    31f0:	bf 91       	pop	r27
    31f2:	af 91       	pop	r26
    31f4:	9f 91       	pop	r25
    31f6:	8f 91       	pop	r24
    31f8:	7f 91       	pop	r23
    31fa:	6f 91       	pop	r22
    31fc:	5f 91       	pop	r21
    31fe:	4f 91       	pop	r20
    3200:	3f 91       	pop	r19
    3202:	2f 91       	pop	r18
    3204:	0f 90       	pop	r0
    3206:	0b be       	out	0x3b, r0	; 59
    3208:	0f 90       	pop	r0
    320a:	0f be       	out	0x3f, r0	; 63
    320c:	0f 90       	pop	r0
    320e:	1f 90       	pop	r1
    3210:	18 95       	reti

00003212 <__vector_87>:

/* SPID interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPID_INT_vect)      /* SPI Interrupt */
    3212:	1f 92       	push	r1
    3214:	0f 92       	push	r0
    3216:	0f b6       	in	r0, 0x3f	; 63
    3218:	0f 92       	push	r0
    321a:	11 24       	eor	r1, r1
    321c:	0b b6       	in	r0, 0x3b	; 59
    321e:	0f 92       	push	r0
    3220:	2f 93       	push	r18
    3222:	3f 93       	push	r19
    3224:	4f 93       	push	r20
    3226:	5f 93       	push	r21
    3228:	6f 93       	push	r22
    322a:	7f 93       	push	r23
    322c:	8f 93       	push	r24
    322e:	9f 93       	push	r25
    3230:	af 93       	push	r26
    3232:	bf 93       	push	r27
    3234:	ef 93       	push	r30
    3236:	ff 93       	push	r31
    3238:	e0 91 9f 21 	lds	r30, 0x219F
    323c:	f0 91 a0 21 	lds	r31, 0x21A0
    3240:	30 97       	sbiw	r30, 0x00	; 0
    3242:	29 f0       	breq	.+10     	; 0x324e <__vector_87+0x3c>
    3244:	80 91 95 22 	lds	r24, 0x2295
    3248:	90 91 96 22 	lds	r25, 0x2296
    324c:	19 95       	eicall
    324e:	ff 91       	pop	r31
    3250:	ef 91       	pop	r30
    3252:	bf 91       	pop	r27
    3254:	af 91       	pop	r26
    3256:	9f 91       	pop	r25
    3258:	8f 91       	pop	r24
    325a:	7f 91       	pop	r23
    325c:	6f 91       	pop	r22
    325e:	5f 91       	pop	r21
    3260:	4f 91       	pop	r20
    3262:	3f 91       	pop	r19
    3264:	2f 91       	pop	r18
    3266:	0f 90       	pop	r0
    3268:	0b be       	out	0x3b, r0	; 59
    326a:	0f 90       	pop	r0
    326c:	0f be       	out	0x3f, r0	; 63
    326e:	0f 90       	pop	r0
    3270:	1f 90       	pop	r1
    3272:	18 95       	reti

00003274 <__vector_88>:

/* USARTD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_RXC_vect)      /* Reception Complete Interrupt */
    3274:	1f 92       	push	r1
    3276:	0f 92       	push	r0
    3278:	0f b6       	in	r0, 0x3f	; 63
    327a:	0f 92       	push	r0
    327c:	11 24       	eor	r1, r1
    327e:	0b b6       	in	r0, 0x3b	; 59
    3280:	0f 92       	push	r0
    3282:	2f 93       	push	r18
    3284:	3f 93       	push	r19
    3286:	4f 93       	push	r20
    3288:	5f 93       	push	r21
    328a:	6f 93       	push	r22
    328c:	7f 93       	push	r23
    328e:	8f 93       	push	r24
    3290:	9f 93       	push	r25
    3292:	af 93       	push	r26
    3294:	bf 93       	push	r27
    3296:	ef 93       	push	r30
    3298:	ff 93       	push	r31
    329a:	e0 91 a1 21 	lds	r30, 0x21A1
    329e:	f0 91 a2 21 	lds	r31, 0x21A2
    32a2:	30 97       	sbiw	r30, 0x00	; 0
    32a4:	29 f0       	breq	.+10     	; 0x32b0 <__vector_88+0x3c>
    32a6:	80 91 97 22 	lds	r24, 0x2297
    32aa:	90 91 98 22 	lds	r25, 0x2298
    32ae:	19 95       	eicall
    32b0:	ff 91       	pop	r31
    32b2:	ef 91       	pop	r30
    32b4:	bf 91       	pop	r27
    32b6:	af 91       	pop	r26
    32b8:	9f 91       	pop	r25
    32ba:	8f 91       	pop	r24
    32bc:	7f 91       	pop	r23
    32be:	6f 91       	pop	r22
    32c0:	5f 91       	pop	r21
    32c2:	4f 91       	pop	r20
    32c4:	3f 91       	pop	r19
    32c6:	2f 91       	pop	r18
    32c8:	0f 90       	pop	r0
    32ca:	0b be       	out	0x3b, r0	; 59
    32cc:	0f 90       	pop	r0
    32ce:	0f be       	out	0x3f, r0	; 63
    32d0:	0f 90       	pop	r0
    32d2:	1f 90       	pop	r1
    32d4:	18 95       	reti

000032d6 <__vector_89>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_DRE_vect)      /* Data Register Empty Interrupt */
    32d6:	1f 92       	push	r1
    32d8:	0f 92       	push	r0
    32da:	0f b6       	in	r0, 0x3f	; 63
    32dc:	0f 92       	push	r0
    32de:	11 24       	eor	r1, r1
    32e0:	0b b6       	in	r0, 0x3b	; 59
    32e2:	0f 92       	push	r0
    32e4:	2f 93       	push	r18
    32e6:	3f 93       	push	r19
    32e8:	4f 93       	push	r20
    32ea:	5f 93       	push	r21
    32ec:	6f 93       	push	r22
    32ee:	7f 93       	push	r23
    32f0:	8f 93       	push	r24
    32f2:	9f 93       	push	r25
    32f4:	af 93       	push	r26
    32f6:	bf 93       	push	r27
    32f8:	ef 93       	push	r30
    32fa:	ff 93       	push	r31
    32fc:	e0 91 a3 21 	lds	r30, 0x21A3
    3300:	f0 91 a4 21 	lds	r31, 0x21A4
    3304:	30 97       	sbiw	r30, 0x00	; 0
    3306:	29 f0       	breq	.+10     	; 0x3312 <__vector_89+0x3c>
    3308:	80 91 99 22 	lds	r24, 0x2299
    330c:	90 91 9a 22 	lds	r25, 0x229A
    3310:	19 95       	eicall
    3312:	ff 91       	pop	r31
    3314:	ef 91       	pop	r30
    3316:	bf 91       	pop	r27
    3318:	af 91       	pop	r26
    331a:	9f 91       	pop	r25
    331c:	8f 91       	pop	r24
    331e:	7f 91       	pop	r23
    3320:	6f 91       	pop	r22
    3322:	5f 91       	pop	r21
    3324:	4f 91       	pop	r20
    3326:	3f 91       	pop	r19
    3328:	2f 91       	pop	r18
    332a:	0f 90       	pop	r0
    332c:	0b be       	out	0x3b, r0	; 59
    332e:	0f 90       	pop	r0
    3330:	0f be       	out	0x3f, r0	; 63
    3332:	0f 90       	pop	r0
    3334:	1f 90       	pop	r1
    3336:	18 95       	reti

00003338 <__vector_90>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_TXC_vect)      /* Transmission Complete Interrupt */
    3338:	1f 92       	push	r1
    333a:	0f 92       	push	r0
    333c:	0f b6       	in	r0, 0x3f	; 63
    333e:	0f 92       	push	r0
    3340:	11 24       	eor	r1, r1
    3342:	0b b6       	in	r0, 0x3b	; 59
    3344:	0f 92       	push	r0
    3346:	2f 93       	push	r18
    3348:	3f 93       	push	r19
    334a:	4f 93       	push	r20
    334c:	5f 93       	push	r21
    334e:	6f 93       	push	r22
    3350:	7f 93       	push	r23
    3352:	8f 93       	push	r24
    3354:	9f 93       	push	r25
    3356:	af 93       	push	r26
    3358:	bf 93       	push	r27
    335a:	ef 93       	push	r30
    335c:	ff 93       	push	r31
    335e:	e0 91 a5 21 	lds	r30, 0x21A5
    3362:	f0 91 a6 21 	lds	r31, 0x21A6
    3366:	30 97       	sbiw	r30, 0x00	; 0
    3368:	29 f0       	breq	.+10     	; 0x3374 <__vector_90+0x3c>
    336a:	80 91 9b 22 	lds	r24, 0x229B
    336e:	90 91 9c 22 	lds	r25, 0x229C
    3372:	19 95       	eicall
    3374:	ff 91       	pop	r31
    3376:	ef 91       	pop	r30
    3378:	bf 91       	pop	r27
    337a:	af 91       	pop	r26
    337c:	9f 91       	pop	r25
    337e:	8f 91       	pop	r24
    3380:	7f 91       	pop	r23
    3382:	6f 91       	pop	r22
    3384:	5f 91       	pop	r21
    3386:	4f 91       	pop	r20
    3388:	3f 91       	pop	r19
    338a:	2f 91       	pop	r18
    338c:	0f 90       	pop	r0
    338e:	0b be       	out	0x3b, r0	; 59
    3390:	0f 90       	pop	r0
    3392:	0f be       	out	0x3f, r0	; 63
    3394:	0f 90       	pop	r0
    3396:	1f 90       	pop	r1
    3398:	18 95       	reti

0000339a <__vector_91>:

/* USARTD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_RXC_vect)      /* Reception Complete Interrupt */
    339a:	1f 92       	push	r1
    339c:	0f 92       	push	r0
    339e:	0f b6       	in	r0, 0x3f	; 63
    33a0:	0f 92       	push	r0
    33a2:	11 24       	eor	r1, r1
    33a4:	0b b6       	in	r0, 0x3b	; 59
    33a6:	0f 92       	push	r0
    33a8:	2f 93       	push	r18
    33aa:	3f 93       	push	r19
    33ac:	4f 93       	push	r20
    33ae:	5f 93       	push	r21
    33b0:	6f 93       	push	r22
    33b2:	7f 93       	push	r23
    33b4:	8f 93       	push	r24
    33b6:	9f 93       	push	r25
    33b8:	af 93       	push	r26
    33ba:	bf 93       	push	r27
    33bc:	ef 93       	push	r30
    33be:	ff 93       	push	r31
    33c0:	e0 91 a7 21 	lds	r30, 0x21A7
    33c4:	f0 91 a8 21 	lds	r31, 0x21A8
    33c8:	30 97       	sbiw	r30, 0x00	; 0
    33ca:	29 f0       	breq	.+10     	; 0x33d6 <__vector_91+0x3c>
    33cc:	80 91 9d 22 	lds	r24, 0x229D
    33d0:	90 91 9e 22 	lds	r25, 0x229E
    33d4:	19 95       	eicall
    33d6:	ff 91       	pop	r31
    33d8:	ef 91       	pop	r30
    33da:	bf 91       	pop	r27
    33dc:	af 91       	pop	r26
    33de:	9f 91       	pop	r25
    33e0:	8f 91       	pop	r24
    33e2:	7f 91       	pop	r23
    33e4:	6f 91       	pop	r22
    33e6:	5f 91       	pop	r21
    33e8:	4f 91       	pop	r20
    33ea:	3f 91       	pop	r19
    33ec:	2f 91       	pop	r18
    33ee:	0f 90       	pop	r0
    33f0:	0b be       	out	0x3b, r0	; 59
    33f2:	0f 90       	pop	r0
    33f4:	0f be       	out	0x3f, r0	; 63
    33f6:	0f 90       	pop	r0
    33f8:	1f 90       	pop	r1
    33fa:	18 95       	reti

000033fc <__vector_92>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_DRE_vect)      /* Data Register Empty Interrupt */
    33fc:	1f 92       	push	r1
    33fe:	0f 92       	push	r0
    3400:	0f b6       	in	r0, 0x3f	; 63
    3402:	0f 92       	push	r0
    3404:	11 24       	eor	r1, r1
    3406:	0b b6       	in	r0, 0x3b	; 59
    3408:	0f 92       	push	r0
    340a:	2f 93       	push	r18
    340c:	3f 93       	push	r19
    340e:	4f 93       	push	r20
    3410:	5f 93       	push	r21
    3412:	6f 93       	push	r22
    3414:	7f 93       	push	r23
    3416:	8f 93       	push	r24
    3418:	9f 93       	push	r25
    341a:	af 93       	push	r26
    341c:	bf 93       	push	r27
    341e:	ef 93       	push	r30
    3420:	ff 93       	push	r31
    3422:	e0 91 a9 21 	lds	r30, 0x21A9
    3426:	f0 91 aa 21 	lds	r31, 0x21AA
    342a:	30 97       	sbiw	r30, 0x00	; 0
    342c:	29 f0       	breq	.+10     	; 0x3438 <__vector_92+0x3c>
    342e:	80 91 9f 22 	lds	r24, 0x229F
    3432:	90 91 a0 22 	lds	r25, 0x22A0
    3436:	19 95       	eicall
    3438:	ff 91       	pop	r31
    343a:	ef 91       	pop	r30
    343c:	bf 91       	pop	r27
    343e:	af 91       	pop	r26
    3440:	9f 91       	pop	r25
    3442:	8f 91       	pop	r24
    3444:	7f 91       	pop	r23
    3446:	6f 91       	pop	r22
    3448:	5f 91       	pop	r21
    344a:	4f 91       	pop	r20
    344c:	3f 91       	pop	r19
    344e:	2f 91       	pop	r18
    3450:	0f 90       	pop	r0
    3452:	0b be       	out	0x3b, r0	; 59
    3454:	0f 90       	pop	r0
    3456:	0f be       	out	0x3f, r0	; 63
    3458:	0f 90       	pop	r0
    345a:	1f 90       	pop	r1
    345c:	18 95       	reti

0000345e <__vector_93>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_TXC_vect)      /* Transmission Complete Interrupt */
    345e:	1f 92       	push	r1
    3460:	0f 92       	push	r0
    3462:	0f b6       	in	r0, 0x3f	; 63
    3464:	0f 92       	push	r0
    3466:	11 24       	eor	r1, r1
    3468:	0b b6       	in	r0, 0x3b	; 59
    346a:	0f 92       	push	r0
    346c:	2f 93       	push	r18
    346e:	3f 93       	push	r19
    3470:	4f 93       	push	r20
    3472:	5f 93       	push	r21
    3474:	6f 93       	push	r22
    3476:	7f 93       	push	r23
    3478:	8f 93       	push	r24
    347a:	9f 93       	push	r25
    347c:	af 93       	push	r26
    347e:	bf 93       	push	r27
    3480:	ef 93       	push	r30
    3482:	ff 93       	push	r31
    3484:	e0 91 ab 21 	lds	r30, 0x21AB
    3488:	f0 91 ac 21 	lds	r31, 0x21AC
    348c:	30 97       	sbiw	r30, 0x00	; 0
    348e:	29 f0       	breq	.+10     	; 0x349a <__vector_93+0x3c>
    3490:	80 91 a1 22 	lds	r24, 0x22A1
    3494:	90 91 a2 22 	lds	r25, 0x22A2
    3498:	19 95       	eicall
    349a:	ff 91       	pop	r31
    349c:	ef 91       	pop	r30
    349e:	bf 91       	pop	r27
    34a0:	af 91       	pop	r26
    34a2:	9f 91       	pop	r25
    34a4:	8f 91       	pop	r24
    34a6:	7f 91       	pop	r23
    34a8:	6f 91       	pop	r22
    34aa:	5f 91       	pop	r21
    34ac:	4f 91       	pop	r20
    34ae:	3f 91       	pop	r19
    34b0:	2f 91       	pop	r18
    34b2:	0f 90       	pop	r0
    34b4:	0b be       	out	0x3b, r0	; 59
    34b6:	0f 90       	pop	r0
    34b8:	0f be       	out	0x3f, r0	; 63
    34ba:	0f 90       	pop	r0
    34bc:	1f 90       	pop	r1
    34be:	18 95       	reti

000034c0 <__vector_104>:

/* PORTF interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT0_vect)      /* External Interrupt 0 */
    34c0:	1f 92       	push	r1
    34c2:	0f 92       	push	r0
    34c4:	0f b6       	in	r0, 0x3f	; 63
    34c6:	0f 92       	push	r0
    34c8:	11 24       	eor	r1, r1
    34ca:	0b b6       	in	r0, 0x3b	; 59
    34cc:	0f 92       	push	r0
    34ce:	2f 93       	push	r18
    34d0:	3f 93       	push	r19
    34d2:	4f 93       	push	r20
    34d4:	5f 93       	push	r21
    34d6:	6f 93       	push	r22
    34d8:	7f 93       	push	r23
    34da:	8f 93       	push	r24
    34dc:	9f 93       	push	r25
    34de:	af 93       	push	r26
    34e0:	bf 93       	push	r27
    34e2:	ef 93       	push	r30
    34e4:	ff 93       	push	r31
    34e6:	e0 91 c1 21 	lds	r30, 0x21C1
    34ea:	f0 91 c2 21 	lds	r31, 0x21C2
    34ee:	30 97       	sbiw	r30, 0x00	; 0
    34f0:	29 f0       	breq	.+10     	; 0x34fc <__vector_104+0x3c>
    34f2:	80 91 b7 22 	lds	r24, 0x22B7
    34f6:	90 91 b8 22 	lds	r25, 0x22B8
    34fa:	19 95       	eicall
    34fc:	ff 91       	pop	r31
    34fe:	ef 91       	pop	r30
    3500:	bf 91       	pop	r27
    3502:	af 91       	pop	r26
    3504:	9f 91       	pop	r25
    3506:	8f 91       	pop	r24
    3508:	7f 91       	pop	r23
    350a:	6f 91       	pop	r22
    350c:	5f 91       	pop	r21
    350e:	4f 91       	pop	r20
    3510:	3f 91       	pop	r19
    3512:	2f 91       	pop	r18
    3514:	0f 90       	pop	r0
    3516:	0b be       	out	0x3b, r0	; 59
    3518:	0f 90       	pop	r0
    351a:	0f be       	out	0x3f, r0	; 63
    351c:	0f 90       	pop	r0
    351e:	1f 90       	pop	r1
    3520:	18 95       	reti

00003522 <__vector_105>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT1_vect)      /* External Interrupt 1 */
    3522:	1f 92       	push	r1
    3524:	0f 92       	push	r0
    3526:	0f b6       	in	r0, 0x3f	; 63
    3528:	0f 92       	push	r0
    352a:	11 24       	eor	r1, r1
    352c:	0b b6       	in	r0, 0x3b	; 59
    352e:	0f 92       	push	r0
    3530:	2f 93       	push	r18
    3532:	3f 93       	push	r19
    3534:	4f 93       	push	r20
    3536:	5f 93       	push	r21
    3538:	6f 93       	push	r22
    353a:	7f 93       	push	r23
    353c:	8f 93       	push	r24
    353e:	9f 93       	push	r25
    3540:	af 93       	push	r26
    3542:	bf 93       	push	r27
    3544:	ef 93       	push	r30
    3546:	ff 93       	push	r31
    3548:	e0 91 c3 21 	lds	r30, 0x21C3
    354c:	f0 91 c4 21 	lds	r31, 0x21C4
    3550:	30 97       	sbiw	r30, 0x00	; 0
    3552:	29 f0       	breq	.+10     	; 0x355e <__vector_105+0x3c>
    3554:	80 91 b9 22 	lds	r24, 0x22B9
    3558:	90 91 ba 22 	lds	r25, 0x22BA
    355c:	19 95       	eicall
    355e:	ff 91       	pop	r31
    3560:	ef 91       	pop	r30
    3562:	bf 91       	pop	r27
    3564:	af 91       	pop	r26
    3566:	9f 91       	pop	r25
    3568:	8f 91       	pop	r24
    356a:	7f 91       	pop	r23
    356c:	6f 91       	pop	r22
    356e:	5f 91       	pop	r21
    3570:	4f 91       	pop	r20
    3572:	3f 91       	pop	r19
    3574:	2f 91       	pop	r18
    3576:	0f 90       	pop	r0
    3578:	0b be       	out	0x3b, r0	; 59
    357a:	0f 90       	pop	r0
    357c:	0f be       	out	0x3f, r0	; 63
    357e:	0f 90       	pop	r0
    3580:	1f 90       	pop	r1
    3582:	18 95       	reti

00003584 <__vector_108>:

/* TCF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_OVF_vect)      /* Overflow Interrupt */
    3584:	1f 92       	push	r1
    3586:	0f 92       	push	r0
    3588:	0f b6       	in	r0, 0x3f	; 63
    358a:	0f 92       	push	r0
    358c:	11 24       	eor	r1, r1
    358e:	0b b6       	in	r0, 0x3b	; 59
    3590:	0f 92       	push	r0
    3592:	2f 93       	push	r18
    3594:	3f 93       	push	r19
    3596:	4f 93       	push	r20
    3598:	5f 93       	push	r21
    359a:	6f 93       	push	r22
    359c:	7f 93       	push	r23
    359e:	8f 93       	push	r24
    35a0:	9f 93       	push	r25
    35a2:	af 93       	push	r26
    35a4:	bf 93       	push	r27
    35a6:	ef 93       	push	r30
    35a8:	ff 93       	push	r31
    35aa:	e0 91 c9 21 	lds	r30, 0x21C9
    35ae:	f0 91 ca 21 	lds	r31, 0x21CA
    35b2:	30 97       	sbiw	r30, 0x00	; 0
    35b4:	29 f0       	breq	.+10     	; 0x35c0 <__vector_108+0x3c>
    35b6:	80 91 bf 22 	lds	r24, 0x22BF
    35ba:	90 91 c0 22 	lds	r25, 0x22C0
    35be:	19 95       	eicall
    35c0:	ff 91       	pop	r31
    35c2:	ef 91       	pop	r30
    35c4:	bf 91       	pop	r27
    35c6:	af 91       	pop	r26
    35c8:	9f 91       	pop	r25
    35ca:	8f 91       	pop	r24
    35cc:	7f 91       	pop	r23
    35ce:	6f 91       	pop	r22
    35d0:	5f 91       	pop	r21
    35d2:	4f 91       	pop	r20
    35d4:	3f 91       	pop	r19
    35d6:	2f 91       	pop	r18
    35d8:	0f 90       	pop	r0
    35da:	0b be       	out	0x3b, r0	; 59
    35dc:	0f 90       	pop	r0
    35de:	0f be       	out	0x3f, r0	; 63
    35e0:	0f 90       	pop	r0
    35e2:	1f 90       	pop	r1
    35e4:	18 95       	reti

000035e6 <__vector_109>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_ERR_vect)      /* Error Interrupt */
    35e6:	1f 92       	push	r1
    35e8:	0f 92       	push	r0
    35ea:	0f b6       	in	r0, 0x3f	; 63
    35ec:	0f 92       	push	r0
    35ee:	11 24       	eor	r1, r1
    35f0:	0b b6       	in	r0, 0x3b	; 59
    35f2:	0f 92       	push	r0
    35f4:	2f 93       	push	r18
    35f6:	3f 93       	push	r19
    35f8:	4f 93       	push	r20
    35fa:	5f 93       	push	r21
    35fc:	6f 93       	push	r22
    35fe:	7f 93       	push	r23
    3600:	8f 93       	push	r24
    3602:	9f 93       	push	r25
    3604:	af 93       	push	r26
    3606:	bf 93       	push	r27
    3608:	ef 93       	push	r30
    360a:	ff 93       	push	r31
    360c:	e0 91 cb 21 	lds	r30, 0x21CB
    3610:	f0 91 cc 21 	lds	r31, 0x21CC
    3614:	30 97       	sbiw	r30, 0x00	; 0
    3616:	29 f0       	breq	.+10     	; 0x3622 <__vector_109+0x3c>
    3618:	80 91 c1 22 	lds	r24, 0x22C1
    361c:	90 91 c2 22 	lds	r25, 0x22C2
    3620:	19 95       	eicall
    3622:	ff 91       	pop	r31
    3624:	ef 91       	pop	r30
    3626:	bf 91       	pop	r27
    3628:	af 91       	pop	r26
    362a:	9f 91       	pop	r25
    362c:	8f 91       	pop	r24
    362e:	7f 91       	pop	r23
    3630:	6f 91       	pop	r22
    3632:	5f 91       	pop	r21
    3634:	4f 91       	pop	r20
    3636:	3f 91       	pop	r19
    3638:	2f 91       	pop	r18
    363a:	0f 90       	pop	r0
    363c:	0b be       	out	0x3b, r0	; 59
    363e:	0f 90       	pop	r0
    3640:	0f be       	out	0x3f, r0	; 63
    3642:	0f 90       	pop	r0
    3644:	1f 90       	pop	r1
    3646:	18 95       	reti

00003648 <__vector_110>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCA_vect)      /* Compare or Capture A Interrupt */
    3648:	1f 92       	push	r1
    364a:	0f 92       	push	r0
    364c:	0f b6       	in	r0, 0x3f	; 63
    364e:	0f 92       	push	r0
    3650:	11 24       	eor	r1, r1
    3652:	0b b6       	in	r0, 0x3b	; 59
    3654:	0f 92       	push	r0
    3656:	2f 93       	push	r18
    3658:	3f 93       	push	r19
    365a:	4f 93       	push	r20
    365c:	5f 93       	push	r21
    365e:	6f 93       	push	r22
    3660:	7f 93       	push	r23
    3662:	8f 93       	push	r24
    3664:	9f 93       	push	r25
    3666:	af 93       	push	r26
    3668:	bf 93       	push	r27
    366a:	ef 93       	push	r30
    366c:	ff 93       	push	r31
    366e:	e0 91 cd 21 	lds	r30, 0x21CD
    3672:	f0 91 ce 21 	lds	r31, 0x21CE
    3676:	30 97       	sbiw	r30, 0x00	; 0
    3678:	29 f0       	breq	.+10     	; 0x3684 <__vector_110+0x3c>
    367a:	80 91 c3 22 	lds	r24, 0x22C3
    367e:	90 91 c4 22 	lds	r25, 0x22C4
    3682:	19 95       	eicall
    3684:	ff 91       	pop	r31
    3686:	ef 91       	pop	r30
    3688:	bf 91       	pop	r27
    368a:	af 91       	pop	r26
    368c:	9f 91       	pop	r25
    368e:	8f 91       	pop	r24
    3690:	7f 91       	pop	r23
    3692:	6f 91       	pop	r22
    3694:	5f 91       	pop	r21
    3696:	4f 91       	pop	r20
    3698:	3f 91       	pop	r19
    369a:	2f 91       	pop	r18
    369c:	0f 90       	pop	r0
    369e:	0b be       	out	0x3b, r0	; 59
    36a0:	0f 90       	pop	r0
    36a2:	0f be       	out	0x3f, r0	; 63
    36a4:	0f 90       	pop	r0
    36a6:	1f 90       	pop	r1
    36a8:	18 95       	reti

000036aa <__vector_111>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCB_vect)      /* Compare or Capture B Interrupt */
    36aa:	1f 92       	push	r1
    36ac:	0f 92       	push	r0
    36ae:	0f b6       	in	r0, 0x3f	; 63
    36b0:	0f 92       	push	r0
    36b2:	11 24       	eor	r1, r1
    36b4:	0b b6       	in	r0, 0x3b	; 59
    36b6:	0f 92       	push	r0
    36b8:	2f 93       	push	r18
    36ba:	3f 93       	push	r19
    36bc:	4f 93       	push	r20
    36be:	5f 93       	push	r21
    36c0:	6f 93       	push	r22
    36c2:	7f 93       	push	r23
    36c4:	8f 93       	push	r24
    36c6:	9f 93       	push	r25
    36c8:	af 93       	push	r26
    36ca:	bf 93       	push	r27
    36cc:	ef 93       	push	r30
    36ce:	ff 93       	push	r31
    36d0:	e0 91 cf 21 	lds	r30, 0x21CF
    36d4:	f0 91 d0 21 	lds	r31, 0x21D0
    36d8:	30 97       	sbiw	r30, 0x00	; 0
    36da:	29 f0       	breq	.+10     	; 0x36e6 <__vector_111+0x3c>
    36dc:	80 91 c5 22 	lds	r24, 0x22C5
    36e0:	90 91 c6 22 	lds	r25, 0x22C6
    36e4:	19 95       	eicall
    36e6:	ff 91       	pop	r31
    36e8:	ef 91       	pop	r30
    36ea:	bf 91       	pop	r27
    36ec:	af 91       	pop	r26
    36ee:	9f 91       	pop	r25
    36f0:	8f 91       	pop	r24
    36f2:	7f 91       	pop	r23
    36f4:	6f 91       	pop	r22
    36f6:	5f 91       	pop	r21
    36f8:	4f 91       	pop	r20
    36fa:	3f 91       	pop	r19
    36fc:	2f 91       	pop	r18
    36fe:	0f 90       	pop	r0
    3700:	0b be       	out	0x3b, r0	; 59
    3702:	0f 90       	pop	r0
    3704:	0f be       	out	0x3f, r0	; 63
    3706:	0f 90       	pop	r0
    3708:	1f 90       	pop	r1
    370a:	18 95       	reti

0000370c <__vector_112>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCC_vect)      /* Compare or Capture C Interrupt */
    370c:	1f 92       	push	r1
    370e:	0f 92       	push	r0
    3710:	0f b6       	in	r0, 0x3f	; 63
    3712:	0f 92       	push	r0
    3714:	11 24       	eor	r1, r1
    3716:	0b b6       	in	r0, 0x3b	; 59
    3718:	0f 92       	push	r0
    371a:	2f 93       	push	r18
    371c:	3f 93       	push	r19
    371e:	4f 93       	push	r20
    3720:	5f 93       	push	r21
    3722:	6f 93       	push	r22
    3724:	7f 93       	push	r23
    3726:	8f 93       	push	r24
    3728:	9f 93       	push	r25
    372a:	af 93       	push	r26
    372c:	bf 93       	push	r27
    372e:	ef 93       	push	r30
    3730:	ff 93       	push	r31
    3732:	e0 91 d1 21 	lds	r30, 0x21D1
    3736:	f0 91 d2 21 	lds	r31, 0x21D2
    373a:	30 97       	sbiw	r30, 0x00	; 0
    373c:	29 f0       	breq	.+10     	; 0x3748 <__vector_112+0x3c>
    373e:	80 91 c7 22 	lds	r24, 0x22C7
    3742:	90 91 c8 22 	lds	r25, 0x22C8
    3746:	19 95       	eicall
    3748:	ff 91       	pop	r31
    374a:	ef 91       	pop	r30
    374c:	bf 91       	pop	r27
    374e:	af 91       	pop	r26
    3750:	9f 91       	pop	r25
    3752:	8f 91       	pop	r24
    3754:	7f 91       	pop	r23
    3756:	6f 91       	pop	r22
    3758:	5f 91       	pop	r21
    375a:	4f 91       	pop	r20
    375c:	3f 91       	pop	r19
    375e:	2f 91       	pop	r18
    3760:	0f 90       	pop	r0
    3762:	0b be       	out	0x3b, r0	; 59
    3764:	0f 90       	pop	r0
    3766:	0f be       	out	0x3f, r0	; 63
    3768:	0f 90       	pop	r0
    376a:	1f 90       	pop	r1
    376c:	18 95       	reti

0000376e <__vector_113>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCD_vect)      /* Compare or Capture D Interrupt */
    376e:	1f 92       	push	r1
    3770:	0f 92       	push	r0
    3772:	0f b6       	in	r0, 0x3f	; 63
    3774:	0f 92       	push	r0
    3776:	11 24       	eor	r1, r1
    3778:	0b b6       	in	r0, 0x3b	; 59
    377a:	0f 92       	push	r0
    377c:	2f 93       	push	r18
    377e:	3f 93       	push	r19
    3780:	4f 93       	push	r20
    3782:	5f 93       	push	r21
    3784:	6f 93       	push	r22
    3786:	7f 93       	push	r23
    3788:	8f 93       	push	r24
    378a:	9f 93       	push	r25
    378c:	af 93       	push	r26
    378e:	bf 93       	push	r27
    3790:	ef 93       	push	r30
    3792:	ff 93       	push	r31
    3794:	e0 91 d3 21 	lds	r30, 0x21D3
    3798:	f0 91 d4 21 	lds	r31, 0x21D4
    379c:	30 97       	sbiw	r30, 0x00	; 0
    379e:	29 f0       	breq	.+10     	; 0x37aa <__vector_113+0x3c>
    37a0:	80 91 c9 22 	lds	r24, 0x22C9
    37a4:	90 91 ca 22 	lds	r25, 0x22CA
    37a8:	19 95       	eicall
    37aa:	ff 91       	pop	r31
    37ac:	ef 91       	pop	r30
    37ae:	bf 91       	pop	r27
    37b0:	af 91       	pop	r26
    37b2:	9f 91       	pop	r25
    37b4:	8f 91       	pop	r24
    37b6:	7f 91       	pop	r23
    37b8:	6f 91       	pop	r22
    37ba:	5f 91       	pop	r21
    37bc:	4f 91       	pop	r20
    37be:	3f 91       	pop	r19
    37c0:	2f 91       	pop	r18
    37c2:	0f 90       	pop	r0
    37c4:	0b be       	out	0x3b, r0	; 59
    37c6:	0f 90       	pop	r0
    37c8:	0f be       	out	0x3f, r0	; 63
    37ca:	0f 90       	pop	r0
    37cc:	1f 90       	pop	r1
    37ce:	18 95       	reti

000037d0 <__vector_119>:

/* USARTF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_RXC_vect)      /* Reception Complete Interrupt */
    37d0:	1f 92       	push	r1
    37d2:	0f 92       	push	r0
    37d4:	0f b6       	in	r0, 0x3f	; 63
    37d6:	0f 92       	push	r0
    37d8:	11 24       	eor	r1, r1
    37da:	0b b6       	in	r0, 0x3b	; 59
    37dc:	0f 92       	push	r0
    37de:	2f 93       	push	r18
    37e0:	3f 93       	push	r19
    37e2:	4f 93       	push	r20
    37e4:	5f 93       	push	r21
    37e6:	6f 93       	push	r22
    37e8:	7f 93       	push	r23
    37ea:	8f 93       	push	r24
    37ec:	9f 93       	push	r25
    37ee:	af 93       	push	r26
    37f0:	bf 93       	push	r27
    37f2:	ef 93       	push	r30
    37f4:	ff 93       	push	r31
    37f6:	e0 91 df 21 	lds	r30, 0x21DF
    37fa:	f0 91 e0 21 	lds	r31, 0x21E0
    37fe:	30 97       	sbiw	r30, 0x00	; 0
    3800:	29 f0       	breq	.+10     	; 0x380c <__vector_119+0x3c>
    3802:	80 91 d5 22 	lds	r24, 0x22D5
    3806:	90 91 d6 22 	lds	r25, 0x22D6
    380a:	19 95       	eicall
    380c:	ff 91       	pop	r31
    380e:	ef 91       	pop	r30
    3810:	bf 91       	pop	r27
    3812:	af 91       	pop	r26
    3814:	9f 91       	pop	r25
    3816:	8f 91       	pop	r24
    3818:	7f 91       	pop	r23
    381a:	6f 91       	pop	r22
    381c:	5f 91       	pop	r21
    381e:	4f 91       	pop	r20
    3820:	3f 91       	pop	r19
    3822:	2f 91       	pop	r18
    3824:	0f 90       	pop	r0
    3826:	0b be       	out	0x3b, r0	; 59
    3828:	0f 90       	pop	r0
    382a:	0f be       	out	0x3f, r0	; 63
    382c:	0f 90       	pop	r0
    382e:	1f 90       	pop	r1
    3830:	18 95       	reti

00003832 <__vector_120>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_DRE_vect)      /* Data Register Empty Interrupt */
    3832:	1f 92       	push	r1
    3834:	0f 92       	push	r0
    3836:	0f b6       	in	r0, 0x3f	; 63
    3838:	0f 92       	push	r0
    383a:	11 24       	eor	r1, r1
    383c:	0b b6       	in	r0, 0x3b	; 59
    383e:	0f 92       	push	r0
    3840:	2f 93       	push	r18
    3842:	3f 93       	push	r19
    3844:	4f 93       	push	r20
    3846:	5f 93       	push	r21
    3848:	6f 93       	push	r22
    384a:	7f 93       	push	r23
    384c:	8f 93       	push	r24
    384e:	9f 93       	push	r25
    3850:	af 93       	push	r26
    3852:	bf 93       	push	r27
    3854:	ef 93       	push	r30
    3856:	ff 93       	push	r31
    3858:	e0 91 e1 21 	lds	r30, 0x21E1
    385c:	f0 91 e2 21 	lds	r31, 0x21E2
    3860:	30 97       	sbiw	r30, 0x00	; 0
    3862:	29 f0       	breq	.+10     	; 0x386e <__vector_120+0x3c>
    3864:	80 91 d7 22 	lds	r24, 0x22D7
    3868:	90 91 d8 22 	lds	r25, 0x22D8
    386c:	19 95       	eicall
    386e:	ff 91       	pop	r31
    3870:	ef 91       	pop	r30
    3872:	bf 91       	pop	r27
    3874:	af 91       	pop	r26
    3876:	9f 91       	pop	r25
    3878:	8f 91       	pop	r24
    387a:	7f 91       	pop	r23
    387c:	6f 91       	pop	r22
    387e:	5f 91       	pop	r21
    3880:	4f 91       	pop	r20
    3882:	3f 91       	pop	r19
    3884:	2f 91       	pop	r18
    3886:	0f 90       	pop	r0
    3888:	0b be       	out	0x3b, r0	; 59
    388a:	0f 90       	pop	r0
    388c:	0f be       	out	0x3f, r0	; 63
    388e:	0f 90       	pop	r0
    3890:	1f 90       	pop	r1
    3892:	18 95       	reti

00003894 <__vector_121>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_TXC_vect)      /* Transmission Complete Interrupt */
    3894:	1f 92       	push	r1
    3896:	0f 92       	push	r0
    3898:	0f b6       	in	r0, 0x3f	; 63
    389a:	0f 92       	push	r0
    389c:	11 24       	eor	r1, r1
    389e:	0b b6       	in	r0, 0x3b	; 59
    38a0:	0f 92       	push	r0
    38a2:	2f 93       	push	r18
    38a4:	3f 93       	push	r19
    38a6:	4f 93       	push	r20
    38a8:	5f 93       	push	r21
    38aa:	6f 93       	push	r22
    38ac:	7f 93       	push	r23
    38ae:	8f 93       	push	r24
    38b0:	9f 93       	push	r25
    38b2:	af 93       	push	r26
    38b4:	bf 93       	push	r27
    38b6:	ef 93       	push	r30
    38b8:	ff 93       	push	r31
    38ba:	e0 91 e3 21 	lds	r30, 0x21E3
    38be:	f0 91 e4 21 	lds	r31, 0x21E4
    38c2:	30 97       	sbiw	r30, 0x00	; 0
    38c4:	29 f0       	breq	.+10     	; 0x38d0 <__vector_121+0x3c>
    38c6:	80 91 d9 22 	lds	r24, 0x22D9
    38ca:	90 91 da 22 	lds	r25, 0x22DA
    38ce:	19 95       	eicall
    38d0:	ff 91       	pop	r31
    38d2:	ef 91       	pop	r30
    38d4:	bf 91       	pop	r27
    38d6:	af 91       	pop	r26
    38d8:	9f 91       	pop	r25
    38da:	8f 91       	pop	r24
    38dc:	7f 91       	pop	r23
    38de:	6f 91       	pop	r22
    38e0:	5f 91       	pop	r21
    38e2:	4f 91       	pop	r20
    38e4:	3f 91       	pop	r19
    38e6:	2f 91       	pop	r18
    38e8:	0f 90       	pop	r0
    38ea:	0b be       	out	0x3b, r0	; 59
    38ec:	0f 90       	pop	r0
    38ee:	0f be       	out	0x3f, r0	; 63
    38f0:	0f 90       	pop	r0
    38f2:	1f 90       	pop	r1
    38f4:	18 95       	reti

000038f6 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual()
{	
	while(1)
	{
		laserBoard.BeepClassError();
    38f6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN11CLaserBoard14BeepClassErrorEv>
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;

extern "C" void __cxa_pure_virtual()
    38fa:	fd cf       	rjmp	.-6      	; 0x38f6 <__cxa_pure_virtual>

000038fc <_GLOBAL__sub_I_dacSPI>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    38fc:	88 e1       	ldi	r24, 0x18	; 24
    38fe:	93 e2       	ldi	r25, 0x23	; 35
    3900:	0e 94 86 08 	call	0x110c	; 0x110c <_ZN4CSPIC1Ev>
CDGUSUSART usart;
    3904:	86 e1       	ldi	r24, 0x16	; 22
    3906:	93 e2       	ldi	r25, 0x23	; 35
    3908:	0e 94 54 02 	call	0x4a8	; 0x4a8 <_ZN10CDGUSUSARTC1Ev>
CMBSender sender;
    390c:	8d ef       	ldi	r24, 0xFD	; 253
    390e:	92 e2       	ldi	r25, 0x22	; 34
    3910:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <_ZN9CMBSenderC1Ev>
CLaserBoard laserBoard;
    3914:	8c ef       	ldi	r24, 0xFC	; 252
    3916:	92 e2       	ldi	r25, 0x22	; 34
    3918:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN11CLaserBoardC1Ev>
CSoundPlayer player;
    391c:	8b ef       	ldi	r24, 0xFB	; 251
    391e:	92 e2       	ldi	r25, 0x22	; 34
    3920:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <_ZN12CSoundPlayerC1Ev>
CLaserControlApp App;
    3924:	8f ed       	ldi	r24, 0xDF	; 223
    3926:	92 e2       	ldi	r25, 0x22	; 34
    3928:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN16CLaserControlAppC1Ev>
    392c:	08 95       	ret

0000392e <_GLOBAL__sub_D_dacSPI>:
    392e:	8f ed       	ldi	r24, 0xDF	; 223
    3930:	92 e2       	ldi	r25, 0x22	; 34
    3932:	0e 94 80 03 	call	0x700	; 0x700 <_ZN16CLaserControlAppD1Ev>
/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
    3936:	8b ef       	ldi	r24, 0xFB	; 251
    3938:	92 e2       	ldi	r25, 0x22	; 34
    393a:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <_ZN12CSoundPlayerD1Ev>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
    393e:	8c ef       	ldi	r24, 0xFC	; 252
    3940:	92 e2       	ldi	r25, 0x22	; 34
    3942:	0e 94 69 02 	call	0x4d2	; 0x4d2 <_ZN11CLaserBoardD1Ev>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
    3946:	8d ef       	ldi	r24, 0xFD	; 253
    3948:	92 e2       	ldi	r25, 0x22	; 34
    394a:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <_ZN9CMBSenderD1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
    394e:	86 e1       	ldi	r24, 0x16	; 22
    3950:	93 e2       	ldi	r25, 0x23	; 35
    3952:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN10CDGUSUSARTD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    3956:	88 e1       	ldi	r24, 0x18	; 24
    3958:	93 e2       	ldi	r25, 0x23	; 35
    395a:	0e 94 87 08 	call	0x110e	; 0x110e <_ZN4CSPID1Ev>
    395e:	08 95       	ret

00003960 <_Z16SystemInitializev>:
		laserBoard.BeepClassError();
	}
}

void SystemInitialize()
{
    3960:	ef 92       	push	r14
    3962:	0f 93       	push	r16
    3964:	1f 93       	push	r17
	cli();	/* Disable global interrupts */
    3966:	f8 94       	cli
	
	// Initialize modules
	laserBoard.InitializeIO();
    3968:	8c ef       	ldi	r24, 0xFC	; 252
    396a:	92 e2       	ldi	r25, 0x22	; 34
    396c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN11CLaserBoard12InitializeIOEv>
	player.Initialize();
    3970:	8b ef       	ldi	r24, 0xFB	; 251
    3972:	92 e2       	ldi	r25, 0x22	; 34
    3974:	0e 94 55 07 	call	0xeaa	; 0xeaa <_ZN12CSoundPlayer10InitializeEv>
	dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    3978:	0f 2e       	mov	r0, r31
    397a:	f3 e0       	ldi	r31, 0x03	; 3
    397c:	ef 2e       	mov	r14, r31
    397e:	f0 2d       	mov	r31, r0
    3980:	00 e0       	ldi	r16, 0x00	; 0
    3982:	23 e0       	ldi	r18, 0x03	; 3
    3984:	40 e0       	ldi	r20, 0x00	; 0
    3986:	61 e0       	ldi	r22, 0x01	; 1
    3988:	88 e1       	ldi	r24, 0x18	; 24
    398a:	93 e2       	ldi	r25, 0x23	; 35
    398c:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
	usart.Initialize(BAUD_115200_ERM0P1, PARITY_DISABLE, STOPBITS_1BIT, true);
    3990:	01 e0       	ldi	r16, 0x01	; 1
    3992:	20 e0       	ldi	r18, 0x00	; 0
    3994:	40 e0       	ldi	r20, 0x00	; 0
    3996:	6d e0       	ldi	r22, 0x0D	; 13
    3998:	86 e1       	ldi	r24, 0x16	; 22
    399a:	93 e2       	ldi	r25, 0x23	; 35
    399c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
	sender.Initialize(&usart, &App, 256, 256);
    39a0:	00 e0       	ldi	r16, 0x00	; 0
    39a2:	11 e0       	ldi	r17, 0x01	; 1
    39a4:	20 e0       	ldi	r18, 0x00	; 0
    39a6:	31 e0       	ldi	r19, 0x01	; 1
    39a8:	4f ed       	ldi	r20, 0xDF	; 223
    39aa:	52 e2       	ldi	r21, 0x22	; 34
    39ac:	66 e1       	ldi	r22, 0x16	; 22
    39ae:	73 e2       	ldi	r23, 0x23	; 35
    39b0:	8d ef       	ldi	r24, 0xFD	; 253
    39b2:	92 e2       	ldi	r25, 0x22	; 34
    39b4:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj>
	App.Initialize(&sender);
    39b8:	6d ef       	ldi	r22, 0xFD	; 253
    39ba:	72 e2       	ldi	r23, 0x22	; 34
    39bc:	8f ed       	ldi	r24, 0xDF	; 223
    39be:	92 e2       	ldi	r25, 0x22	; 34
    39c0:	0e 94 3b 04 	call	0x876	; 0x876 <_ZN16CLaserControlApp10InitializeEP9CMBSender>
	laserBoard.InitializeClock();
    39c4:	8c ef       	ldi	r24, 0xFC	; 252
    39c6:	92 e2       	ldi	r25, 0x22	; 34
    39c8:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN11CLaserBoard15InitializeClockEv>
	
	sei();	/* Enable global interrupts */
    39cc:	78 94       	sei
}
    39ce:	1f 91       	pop	r17
    39d0:	0f 91       	pop	r16
    39d2:	ef 90       	pop	r14
    39d4:	08 95       	ret

000039d6 <main>:
int main(void)
{
	float x = 0.0f;
	
	// Initialization system
	SystemInitialize();
    39d6:	0e 94 b0 1c 	call	0x3960	; 0x3960 <_Z16SystemInitializev>
	
	// Startup delay (Beep "Imperial March")
	player.Play();
    39da:	8b ef       	ldi	r24, 0xFB	; 251
    39dc:	92 e2       	ldi	r25, 0x22	; 34
    39de:	0e 94 60 07 	call	0xec0	; 0xec0 <_ZN12CSoundPlayer4PlayEv>
	
	// Initialize application GUI
	App.Start();
    39e2:	8f ed       	ldi	r24, 0xDF	; 223
    39e4:	92 e2       	ldi	r25, 0x22	; 34
    39e6:	0e 94 88 03 	call	0x710	; 0x710 <_ZN16CLaserControlApp5StartEv>
		// Loop delay
		_delay_ms(1);
		
		// Process application
		static uint16_t prs = 0;
		if ((prs++ % 200) == 0)
    39ea:	c8 ec       	ldi	r28, 0xC8	; 200
    39ec:	8f e3       	ldi	r24, 0x3F	; 63
    39ee:	9f e1       	ldi	r25, 0x1F	; 31
    39f0:	01 97       	sbiw	r24, 0x01	; 1
    39f2:	f1 f7       	brne	.-4      	; 0x39f0 <main+0x1a>
    39f4:	00 c0       	rjmp	.+0      	; 0x39f6 <main+0x20>
    39f6:	00 00       	nop
    39f8:	40 91 dd 22 	lds	r20, 0x22DD
    39fc:	50 91 de 22 	lds	r21, 0x22DE
    3a00:	ca 01       	movw	r24, r20
    3a02:	01 96       	adiw	r24, 0x01	; 1
    3a04:	80 93 dd 22 	sts	0x22DD, r24
    3a08:	90 93 de 22 	sts	0x22DE, r25
    3a0c:	9a 01       	movw	r18, r20
    3a0e:	36 95       	lsr	r19
    3a10:	27 95       	ror	r18
    3a12:	36 95       	lsr	r19
    3a14:	27 95       	ror	r18
    3a16:	36 95       	lsr	r19
    3a18:	27 95       	ror	r18
    3a1a:	ab e7       	ldi	r26, 0x7B	; 123
    3a1c:	b4 e1       	ldi	r27, 0x14	; 20
    3a1e:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__umulhisi3>
    3a22:	96 95       	lsr	r25
    3a24:	87 95       	ror	r24
    3a26:	c8 9f       	mul	r28, r24
    3a28:	90 01       	movw	r18, r0
    3a2a:	c9 9f       	mul	r28, r25
    3a2c:	30 0d       	add	r19, r0
    3a2e:	11 24       	eor	r1, r1
    3a30:	42 17       	cp	r20, r18
    3a32:	53 07       	cpc	r21, r19
    3a34:	d9 f6       	brne	.-74     	; 0x39ec <main+0x16>
			App.Run();
    3a36:	8f ed       	ldi	r24, 0xDF	; 223
    3a38:	92 e2       	ldi	r25, 0x22	; 34
    3a3a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <_ZN16CLaserControlApp3RunEv>
    3a3e:	d6 cf       	rjmp	.-84     	; 0x39ec <main+0x16>

00003a40 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
	free(tx_buffer);
}

// local methods
void CMBEventsHandler::FillRegDataTx(uint8_t addr, uint8_t* data, uint8_t length)
{
    3a40:	cf 93       	push	r28
    3a42:	df 93       	push	r29
    3a44:	ec 01       	movw	r28, r24
		// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    3a46:	ec 81       	ldd	r30, Y+4	; 0x04
    3a48:	fd 81       	ldd	r31, Y+5	; 0x05
    3a4a:	8a ea       	ldi	r24, 0xAA	; 170
    3a4c:	80 83       	st	Z, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    3a4e:	ec 81       	ldd	r30, Y+4	; 0x04
    3a50:	fd 81       	ldd	r31, Y+5	; 0x05
    3a52:	8c ec       	ldi	r24, 0xCC	; 204
    3a54:	81 83       	std	Z+1, r24	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 4; //CMD (1) + DATA(length) + CRC(2) + ADDR(1)
#else
	tx_buffer[2] = length + 2; //CMD (1) + DATA(length) + ADDR(1)
    3a56:	ec 81       	ldd	r30, Y+4	; 0x04
    3a58:	fd 81       	ldd	r31, Y+5	; 0x05
    3a5a:	82 e0       	ldi	r24, 0x02	; 2
    3a5c:	82 0f       	add	r24, r18
    3a5e:	82 83       	std	Z+2, r24	; 0x02
#endif
	tx_buffer[3] = 0x80;	// Frame command
    3a60:	ec 81       	ldd	r30, Y+4	; 0x04
    3a62:	fd 81       	ldd	r31, Y+5	; 0x05
    3a64:	80 e8       	ldi	r24, 0x80	; 128
    3a66:	83 83       	std	Z+3, r24	; 0x03
	tx_buffer[4] = addr;	// Register address
    3a68:	ec 81       	ldd	r30, Y+4	; 0x04
    3a6a:	fd 81       	ldd	r31, Y+5	; 0x05
    3a6c:	64 83       	std	Z+4, r22	; 0x04
	tx_frame_length = length + 5;
    3a6e:	85 e0       	ldi	r24, 0x05	; 5
    3a70:	82 0f       	add	r24, r18
    3a72:	89 87       	std	Y+9, r24	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	21 15       	cp	r18, r1
    3a78:	31 05       	cpc	r19, r1
    3a7a:	81 f0       	breq	.+32     	; 0x3a9c <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x5c>
    3a7c:	da 01       	movw	r26, r20
    3a7e:	42 0f       	add	r20, r18
    3a80:	53 1f       	adc	r21, r19
    3a82:	65 e0       	ldi	r22, 0x05	; 5
    3a84:	70 e0       	ldi	r23, 0x00	; 0
		tx_buffer[i+5] = data[i];
    3a86:	9d 91       	ld	r25, X+
    3a88:	ec 81       	ldd	r30, Y+4	; 0x04
    3a8a:	fd 81       	ldd	r31, Y+5	; 0x05
    3a8c:	e6 0f       	add	r30, r22
    3a8e:	f7 1f       	adc	r31, r23
    3a90:	90 83       	st	Z, r25
    3a92:	6f 5f       	subi	r22, 0xFF	; 255
    3a94:	7f 4f       	sbci	r23, 0xFF	; 255
	tx_buffer[3] = 0x80;	// Frame command
	tx_buffer[4] = addr;	// Register address
	tx_frame_length = length + 5;
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    3a96:	a4 17       	cp	r26, r20
    3a98:	b5 07       	cpc	r27, r21
    3a9a:	a9 f7       	brne	.-22     	; 0x3a86 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length]   = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	tx_frame_length = length + 7;
#endif
}
    3a9c:	df 91       	pop	r29
    3a9e:	cf 91       	pop	r28
    3aa0:	08 95       	ret

00003aa2 <_ZN16CMBEventsHandler13FillRegDataRqEhh>:

void CMBEventsHandler::FillRegDataRq(uint8_t addr, uint8_t length)
{
    3aa2:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    3aa4:	a4 81       	ldd	r26, Z+4	; 0x04
    3aa6:	b5 81       	ldd	r27, Z+5	; 0x05
    3aa8:	8a ea       	ldi	r24, 0xAA	; 170
    3aaa:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    3aac:	a4 81       	ldd	r26, Z+4	; 0x04
    3aae:	b5 81       	ldd	r27, Z+5	; 0x05
    3ab0:	8c ec       	ldi	r24, 0xCC	; 204
    3ab2:	11 96       	adiw	r26, 0x01	; 1
    3ab4:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 5; //CMD(1) + DATA(2) + CRC(2)
#else
	tx_buffer[2] = 3; //CMD(1) + DATA(2)
    3ab6:	a4 81       	ldd	r26, Z+4	; 0x04
    3ab8:	b5 81       	ldd	r27, Z+5	; 0x05
    3aba:	83 e0       	ldi	r24, 0x03	; 3
    3abc:	12 96       	adiw	r26, 0x02	; 2
    3abe:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x81;	// Frame command
    3ac0:	a4 81       	ldd	r26, Z+4	; 0x04
    3ac2:	b5 81       	ldd	r27, Z+5	; 0x05
    3ac4:	81 e8       	ldi	r24, 0x81	; 129
    3ac6:	13 96       	adiw	r26, 0x03	; 3
    3ac8:	8c 93       	st	X, r24
	tx_buffer[4] = addr;	// Register address
    3aca:	a4 81       	ldd	r26, Z+4	; 0x04
    3acc:	b5 81       	ldd	r27, Z+5	; 0x05
    3ace:	14 96       	adiw	r26, 0x04	; 4
    3ad0:	6c 93       	st	X, r22
	tx_buffer[5] = length;	// Data
    3ad2:	a4 81       	ldd	r26, Z+4	; 0x04
    3ad4:	b5 81       	ldd	r27, Z+5	; 0x05
    3ad6:	15 96       	adiw	r26, 0x05	; 5
    3ad8:	4c 93       	st	X, r20
	tx_frame_length = 6;
    3ada:	86 e0       	ldi	r24, 0x06	; 6
    3adc:	81 87       	std	Z+9, r24	; 0x09
    3ade:	08 95       	ret

00003ae0 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	tx_frame_length = length + 8;
#endif
}

void CMBEventsHandler::FillVarDataTx(uint16_t addr, uint16_t* data, uint16_t length)
{
    3ae0:	0f 93       	push	r16
    3ae2:	1f 93       	push	r17
    3ae4:	cf 93       	push	r28
    3ae6:	df 93       	push	r29
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    3ae8:	dc 01       	movw	r26, r24
    3aea:	14 96       	adiw	r26, 0x04	; 4
    3aec:	ed 91       	ld	r30, X+
    3aee:	fc 91       	ld	r31, X
    3af0:	15 97       	sbiw	r26, 0x05	; 5
    3af2:	aa ea       	ldi	r26, 0xAA	; 170
    3af4:	a0 83       	st	Z, r26
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    3af6:	ec 01       	movw	r28, r24
    3af8:	ec 81       	ldd	r30, Y+4	; 0x04
    3afa:	fd 81       	ldd	r31, Y+5	; 0x05
    3afc:	ac ec       	ldi	r26, 0xCC	; 204
    3afe:	a1 83       	std	Z+1, r26	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length * 2 + 5; //CMD (1) + DATA(length * 2) + CRC(2) + ADDR(2)
#else
	tx_buffer[2] = length * 2 + 3; //CMD (1) + DATA(length * 2) + ADDR(2)
    3b00:	ac 81       	ldd	r26, Y+4	; 0x04
    3b02:	bd 81       	ldd	r27, Y+5	; 0x05
    3b04:	e2 2f       	mov	r30, r18
    3b06:	ee 0f       	add	r30, r30
    3b08:	ed 5f       	subi	r30, 0xFD	; 253
    3b0a:	12 96       	adiw	r26, 0x02	; 2
    3b0c:	ec 93       	st	X, r30
#endif
	tx_buffer[3] = 0x82;	// Frame command
    3b0e:	ec 81       	ldd	r30, Y+4	; 0x04
    3b10:	fd 81       	ldd	r31, Y+5	; 0x05
    3b12:	a2 e8       	ldi	r26, 0x82	; 130
    3b14:	a3 83       	std	Z+3, r26	; 0x03
	tx_buffer[4] = addr >> 8;
    3b16:	ec 81       	ldd	r30, Y+4	; 0x04
    3b18:	fd 81       	ldd	r31, Y+5	; 0x05
    3b1a:	74 83       	std	Z+4, r23	; 0x04
	tx_buffer[5] = addr & 0xff;
    3b1c:	ec 81       	ldd	r30, Y+4	; 0x04
    3b1e:	fd 81       	ldd	r31, Y+5	; 0x05
    3b20:	65 83       	std	Z+5, r22	; 0x05
	tx_frame_length = length * 2 + 6;
    3b22:	b9 01       	movw	r22, r18
    3b24:	6d 5f       	subi	r22, 0xFD	; 253
    3b26:	7f 4f       	sbci	r23, 0xFF	; 255
    3b28:	e6 2f       	mov	r30, r22
    3b2a:	ee 0f       	add	r30, r30
    3b2c:	e9 87       	std	Y+9, r30	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    3b2e:	23 2b       	or	r18, r19
    3b30:	d9 f0       	breq	.+54     	; 0x3b68 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x88>
    3b32:	e4 2f       	mov	r30, r20
    3b34:	f5 2f       	mov	r31, r21
    3b36:	ab 01       	movw	r20, r22
    3b38:	44 0f       	add	r20, r20
    3b3a:	55 1f       	adc	r21, r21
    3b3c:	26 e0       	ldi	r18, 0x06	; 6
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
	{
		tx_buffer[6 + i*2 + 0] = data[i] >> 8;
    3b40:	ec 01       	movw	r28, r24
    3b42:	ac 81       	ldd	r26, Y+4	; 0x04
    3b44:	bd 81       	ldd	r27, Y+5	; 0x05
    3b46:	a2 0f       	add	r26, r18
    3b48:	b3 1f       	adc	r27, r19
    3b4a:	61 81       	ldd	r22, Z+1	; 0x01
    3b4c:	6c 93       	st	X, r22
		tx_buffer[6 + i*2 + 1] = data[i] & 0xff;
    3b4e:	ac 81       	ldd	r26, Y+4	; 0x04
    3b50:	bd 81       	ldd	r27, Y+5	; 0x05
    3b52:	a2 0f       	add	r26, r18
    3b54:	b3 1f       	adc	r27, r19
    3b56:	60 81       	ld	r22, Z
    3b58:	32 96       	adiw	r30, 0x02	; 2
    3b5a:	11 96       	adiw	r26, 0x01	; 1
    3b5c:	6c 93       	st	X, r22
    3b5e:	2e 5f       	subi	r18, 0xFE	; 254
    3b60:	3f 4f       	sbci	r19, 0xFF	; 255
	tx_buffer[4] = addr >> 8;
	tx_buffer[5] = addr & 0xff;
	tx_frame_length = length * 2 + 6;
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    3b62:	24 17       	cp	r18, r20
    3b64:	35 07       	cpc	r19, r21
    3b66:	61 f7       	brne	.-40     	; 0x3b40 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x60>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length] = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	this->tx_frame_length = length * 2 + 8;
#endif
}
    3b68:	df 91       	pop	r29
    3b6a:	cf 91       	pop	r28
    3b6c:	1f 91       	pop	r17
    3b6e:	0f 91       	pop	r16
    3b70:	08 95       	ret

00003b72 <_ZN16CMBEventsHandler13FillVarDataRqEjj>:

void CMBEventsHandler::FillVarDataRq(uint16_t addr, uint16_t length)
{
    3b72:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    3b74:	a4 81       	ldd	r26, Z+4	; 0x04
    3b76:	b5 81       	ldd	r27, Z+5	; 0x05
    3b78:	8a ea       	ldi	r24, 0xAA	; 170
    3b7a:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    3b7c:	a4 81       	ldd	r26, Z+4	; 0x04
    3b7e:	b5 81       	ldd	r27, Z+5	; 0x05
    3b80:	8c ec       	ldi	r24, 0xCC	; 204
    3b82:	11 96       	adiw	r26, 0x01	; 1
    3b84:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 6; //CMD(1) + DATA(3) + CRC(2)
#else
	tx_buffer[2] = 4; //CMD(1) + DATA(3)
    3b86:	a4 81       	ldd	r26, Z+4	; 0x04
    3b88:	b5 81       	ldd	r27, Z+5	; 0x05
    3b8a:	84 e0       	ldi	r24, 0x04	; 4
    3b8c:	12 96       	adiw	r26, 0x02	; 2
    3b8e:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x83;				// Frame command
    3b90:	a4 81       	ldd	r26, Z+4	; 0x04
    3b92:	b5 81       	ldd	r27, Z+5	; 0x05
    3b94:	83 e8       	ldi	r24, 0x83	; 131
    3b96:	13 96       	adiw	r26, 0x03	; 3
    3b98:	8c 93       	st	X, r24
	tx_buffer[4] = addr >> 8;			// Register address
    3b9a:	a4 81       	ldd	r26, Z+4	; 0x04
    3b9c:	b5 81       	ldd	r27, Z+5	; 0x05
    3b9e:	14 96       	adiw	r26, 0x04	; 4
    3ba0:	7c 93       	st	X, r23
	tx_buffer[5] = addr & 0xff;			// Register address
    3ba2:	a4 81       	ldd	r26, Z+4	; 0x04
    3ba4:	b5 81       	ldd	r27, Z+5	; 0x05
    3ba6:	15 96       	adiw	r26, 0x05	; 5
    3ba8:	6c 93       	st	X, r22
	tx_buffer[6] = length * 2;			// Data
    3baa:	a4 81       	ldd	r26, Z+4	; 0x04
    3bac:	b5 81       	ldd	r27, Z+5	; 0x05
    3bae:	44 0f       	add	r20, r20
    3bb0:	16 96       	adiw	r26, 0x06	; 6
    3bb2:	4c 93       	st	X, r20
	tx_frame_length = 7;
    3bb4:	87 e0       	ldi	r24, 0x07	; 7
    3bb6:	81 87       	std	Z+9, r24	; 0x09
    3bb8:	08 95       	ret

00003bba <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
CMBEventsHandler::~CMBEventsHandler()
{
} //~CMBProtocol

void CMBEventsHandler::AllocateBuffers(uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    3bba:	0f 93       	push	r16
    3bbc:	1f 93       	push	r17
    3bbe:	cf 93       	push	r28
    3bc0:	df 93       	push	r29
    3bc2:	ec 01       	movw	r28, r24
    3bc4:	cb 01       	movw	r24, r22
    3bc6:	8a 01       	movw	r16, r20
	rx_bufferSize = rx_bufSize;
    3bc8:	6f 83       	std	Y+7, r22	; 0x07
    3bca:	78 87       	std	Y+8, r23	; 0x08
	tx_bufferSize = tx_bufSize;
    3bcc:	4a 87       	std	Y+10, r20	; 0x0a
    3bce:	5b 87       	std	Y+11, r21	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    3bd0:	0e 94 94 20 	call	0x4128	; 0x4128 <malloc>
    3bd4:	8a 83       	std	Y+2, r24	; 0x02
    3bd6:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    3bd8:	c8 01       	movw	r24, r16
    3bda:	0e 94 94 20 	call	0x4128	; 0x4128 <malloc>
    3bde:	8c 83       	std	Y+4, r24	; 0x04
    3be0:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_frame_length  = 0x00;
    3be2:	19 86       	std	Y+9, r1	; 0x09
	rx_frame_length  = 0x00;
    3be4:	1e 82       	std	Y+6, r1	; 0x06
}
    3be6:	df 91       	pop	r29
    3be8:	cf 91       	pop	r28
    3bea:	1f 91       	pop	r17
    3bec:	0f 91       	pop	r16
    3bee:	08 95       	ret

00003bf0 <_ZN16CMBEventsHandler11FreeBuffersEv>:

void CMBEventsHandler::FreeBuffers()
{
    3bf0:	cf 93       	push	r28
    3bf2:	df 93       	push	r29
    3bf4:	ec 01       	movw	r28, r24
	free(rx_buffer);
    3bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf8:	9b 81       	ldd	r25, Y+3	; 0x03
    3bfa:	0e 94 29 21 	call	0x4252	; 0x4252 <free>
	free(tx_buffer);
    3bfe:	8c 81       	ldd	r24, Y+4	; 0x04
    3c00:	9d 81       	ldd	r25, Y+5	; 0x05
    3c02:	0e 94 29 21 	call	0x4252	; 0x4252 <free>
}
    3c06:	df 91       	pop	r29
    3c08:	cf 91       	pop	r28
    3c0a:	08 95       	ret

00003c0c <_ZN16CMBEventsHandlerD1Ev>:

#include "CMBProtocol.h"
#include <avr/io.h>
#include <util/crc16.h>

CMBEventsHandler::~CMBEventsHandler()
    3c0c:	08 95       	ret

00003c0e <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	CMBSender::ProcessTransaction(data, length);
}

void CMBSender::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
	if (CallbackHandler != 0)
    3c0e:	dc 01       	movw	r26, r24
    3c10:	57 96       	adiw	r26, 0x17	; 23
    3c12:	8d 91       	ld	r24, X+
    3c14:	9c 91       	ld	r25, X
    3c16:	58 97       	sbiw	r26, 0x18	; 24
    3c18:	00 97       	sbiw	r24, 0x00	; 0
    3c1a:	39 f0       	breq	.+14     	; 0x3c2a <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
		CallbackHandler->OnVariableReceived(addr, data, length);
    3c1c:	dc 01       	movw	r26, r24
    3c1e:	ed 91       	ld	r30, X+
    3c20:	fc 91       	ld	r31, X
    3c22:	02 80       	ldd	r0, Z+2	; 0x02
    3c24:	f3 81       	ldd	r31, Z+3	; 0x03
    3c26:	e0 2d       	mov	r30, r0
    3c28:	19 95       	eicall
    3c2a:	08 95       	ret

00003c2c <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
}


void CMBSender::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
	if (CallbackHandler != 0)
    3c2c:	dc 01       	movw	r26, r24
    3c2e:	57 96       	adiw	r26, 0x17	; 23
    3c30:	8d 91       	ld	r24, X+
    3c32:	9c 91       	ld	r25, X
    3c34:	58 97       	sbiw	r26, 0x18	; 24
    3c36:	00 97       	sbiw	r24, 0x00	; 0
    3c38:	39 f0       	breq	.+14     	; 0x3c48 <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
		CallbackHandler->OnRegisterReceived(addr, data, length);
    3c3a:	dc 01       	movw	r26, r24
    3c3c:	ed 91       	ld	r30, X+
    3c3e:	fc 91       	ld	r31, X
    3c40:	04 80       	ldd	r0, Z+4	; 0x04
    3c42:	f5 81       	ldd	r31, Z+5	; 0x05
    3c44:	e0 2d       	mov	r30, r0
    3c46:	19 95       	eicall
    3c48:	08 95       	ret

00003c4a <_ZN9CMBSenderC1Ev>:
#include "CMBSender.h"
#include <avr/io.h>
#include <util/crc16.h>

// default constructor
CMBSender::CMBSender()
    3c4a:	2b ed       	ldi	r18, 0xDB	; 219
    3c4c:	30 e2       	ldi	r19, 0x20	; 32
    3c4e:	fc 01       	movw	r30, r24
    3c50:	20 83       	st	Z, r18
    3c52:	31 83       	std	Z+1, r19	; 0x01
    3c54:	08 95       	ret

00003c56 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj>:
	
}


void CMBSender::Initialize(CUSART* usart, CMBEventsHandler *handler, uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    3c56:	cf 92       	push	r12
    3c58:	df 92       	push	r13
    3c5a:	ef 92       	push	r14
    3c5c:	ff 92       	push	r15
    3c5e:	0f 93       	push	r16
    3c60:	1f 93       	push	r17
    3c62:	cf 93       	push	r28
    3c64:	df 93       	push	r29
    3c66:	ec 01       	movw	r28, r24
    3c68:	7b 01       	movw	r14, r22
    3c6a:	6a 01       	movw	r12, r20
    3c6c:	c9 01       	movw	r24, r18
	rx_bufferSize = rx_bufSize;
    3c6e:	2f 83       	std	Y+7, r18	; 0x07
    3c70:	38 87       	std	Y+8, r19	; 0x08
	tx_bufferSize = tx_bufSize;
    3c72:	0a 87       	std	Y+10, r16	; 0x0a
    3c74:	1b 87       	std	Y+11, r17	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    3c76:	0e 94 94 20 	call	0x4128	; 0x4128 <malloc>
    3c7a:	8a 83       	std	Y+2, r24	; 0x02
    3c7c:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    3c7e:	c8 01       	movw	r24, r16
    3c80:	0e 94 94 20 	call	0x4128	; 0x4128 <malloc>
    3c84:	8c 83       	std	Y+4, r24	; 0x04
    3c86:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_buffer_pos    = 0x00;
    3c88:	1d 8a       	std	Y+21, r1	; 0x15
	tx_frame_length  = 0x00;
    3c8a:	19 86       	std	Y+9, r1	; 0x09
	rx_buffer_pos    = 0x00;
    3c8c:	1f 86       	std	Y+15, r1	; 0x0f
	rx_frame_length  = 0x00;
    3c8e:	1e 82       	std	Y+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    3c90:	18 8a       	std	Y+16, r1	; 0x10
    3c92:	19 8a       	std	Y+17, r1	; 0x11
	rx_currt_crc     = 0x00;
    3c94:	1a 8a       	std	Y+18, r1	; 0x12
    3c96:	1b 8a       	std	Y+19, r1	; 0x13
	modbus_receiver_state  = rx_Idle;
    3c98:	87 e0       	ldi	r24, 0x07	; 7
    3c9a:	8e 87       	std	Y+14, r24	; 0x0e
	modbus_transmitter_state  = tx_Idle;
    3c9c:	82 e0       	ldi	r24, 0x02	; 2
    3c9e:	8c 8b       	std	Y+20, r24	; 0x14
	isTransaction = false;
    3ca0:	1e 8a       	std	Y+22, r1	; 0x16
	
	// Set usart interface interrupts
	pUSART = usart;
    3ca2:	ec 86       	std	Y+12, r14	; 0x0c
    3ca4:	fd 86       	std	Y+13, r15	; 0x0d
	usart->SetRxInterruptionCallback((void*)this, OnUSARTRxInterrupt);
    3ca6:	d7 01       	movw	r26, r14
    3ca8:	ed 91       	ld	r30, X+
    3caa:	fc 91       	ld	r31, X
    3cac:	04 84       	ldd	r0, Z+12	; 0x0c
    3cae:	f5 85       	ldd	r31, Z+13	; 0x0d
    3cb0:	e0 2d       	mov	r30, r0
    3cb2:	4f e2       	ldi	r20, 0x2F	; 47
    3cb4:	5f e1       	ldi	r21, 0x1F	; 31
    3cb6:	be 01       	movw	r22, r28
    3cb8:	c7 01       	movw	r24, r14
    3cba:	19 95       	eicall
	usart->SetTxInterruptionCallback((void*)this, OnUSARTTxInterrupt);
    3cbc:	d7 01       	movw	r26, r14
    3cbe:	ed 91       	ld	r30, X+
    3cc0:	fc 91       	ld	r31, X
    3cc2:	06 84       	ldd	r0, Z+14	; 0x0e
    3cc4:	f7 85       	ldd	r31, Z+15	; 0x0f
    3cc6:	e0 2d       	mov	r30, r0
    3cc8:	44 e9       	ldi	r20, 0x94	; 148
    3cca:	5f e1       	ldi	r21, 0x1F	; 31
    3ccc:	be 01       	movw	r22, r28
    3cce:	c7 01       	movw	r24, r14
    3cd0:	19 95       	eicall
	
	// Set event handler
	if (handler)
    3cd2:	c1 14       	cp	r12, r1
    3cd4:	d1 04       	cpc	r13, r1
    3cd6:	19 f0       	breq	.+6      	; 0x3cde <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj+0x88>
		CallbackHandler = handler;
    3cd8:	cf 8a       	std	Y+23, r12	; 0x17
    3cda:	d8 8e       	std	Y+24, r13	; 0x18
    3cdc:	02 c0       	rjmp	.+4      	; 0x3ce2 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj+0x8c>
	else
		CallbackHandler = this;
    3cde:	cf 8b       	std	Y+23, r28	; 0x17
    3ce0:	d8 8f       	std	Y+24, r29	; 0x18
} //CMBSender
    3ce2:	df 91       	pop	r29
    3ce4:	cf 91       	pop	r28
    3ce6:	1f 91       	pop	r17
    3ce8:	0f 91       	pop	r16
    3cea:	ff 90       	pop	r15
    3cec:	ef 90       	pop	r14
    3cee:	df 90       	pop	r13
    3cf0:	cf 90       	pop	r12
    3cf2:	08 95       	ret

00003cf4 <_ZN9CMBSenderD1Ev>:
	free(rx_buffer);
	free(tx_buffer);
}

// default destructor
CMBSender::~CMBSender()
    3cf4:	2b ed       	ldi	r18, 0xDB	; 219
    3cf6:	30 e2       	ldi	r19, 0x20	; 32
    3cf8:	fc 01       	movw	r30, r24
    3cfa:	20 83       	st	Z, r18
    3cfc:	31 83       	std	Z+1, r19	; 0x01
    3cfe:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <_ZN16CMBEventsHandlerD1Ev>
    3d02:	08 95       	ret

00003d04 <_ZN9CMBSender13OnReceiveByteEh>:

//void CMBSender::RequestDataFromRegister(uint8_t addr, uint8_t length);
//void CMBSender::RequestDataFromSRAM(uint16_t addr, uint8_t length);

void CMBSender::OnReceiveByte(uint8_t data)
{
    3d04:	cf 93       	push	r28
    3d06:	df 93       	push	r29
    3d08:	ec 01       	movw	r28, r24
    3d0a:	96 2f       	mov	r25, r22
	switch (modbus_receiver_state)
    3d0c:	4e 85       	ldd	r20, Y+14	; 0x0e
    3d0e:	50 e0       	ldi	r21, 0x00	; 0
    3d10:	4b 30       	cpi	r20, 0x0B	; 11
    3d12:	51 05       	cpc	r21, r1
    3d14:	08 f0       	brcs	.+2      	; 0x3d18 <_ZN9CMBSender13OnReceiveByteEh+0x14>
    3d16:	a0 c0       	rjmp	.+320    	; 0x3e58 <_ZN9CMBSender13OnReceiveByteEh+0x154>
    3d18:	fa 01       	movw	r30, r20
    3d1a:	88 27       	eor	r24, r24
    3d1c:	e8 5f       	subi	r30, 0xF8	; 248
    3d1e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d20:	8f 4f       	sbci	r24, 0xFF	; 255
    3d22:	0c 94 5b 20 	jmp	0x40b6	; 0x40b6 <__tablejump2__>
	{
		case rx_Start :
		case rx_FrameHeader0 :
			if (data == FRAMEHEADER_LOWBYTE)
    3d26:	9a 3a       	cpi	r25, 0xAA	; 170
    3d28:	19 f4       	brne	.+6      	; 0x3d30 <_ZN9CMBSender13OnReceiveByteEh+0x2c>
				modbus_receiver_state = rx_FrameHeader1;
    3d2a:	82 e0       	ldi	r24, 0x02	; 2
    3d2c:	8e 87       	std	Y+14, r24	; 0x0e
    3d2e:	94 c0       	rjmp	.+296    	; 0x3e58 <_ZN9CMBSender13OnReceiveByteEh+0x154>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    3d30:	81 e0       	ldi	r24, 0x01	; 1
    3d32:	8e 87       	std	Y+14, r24	; 0x0e
    3d34:	91 c0       	rjmp	.+290    	; 0x3e58 <_ZN9CMBSender13OnReceiveByteEh+0x154>
			break;
		case rx_FrameHeader1 :
			if (data == FRAMEHEADER_HIGHBYTE)
    3d36:	9c 3c       	cpi	r25, 0xCC	; 204
    3d38:	19 f4       	brne	.+6      	; 0x3d40 <_ZN9CMBSender13OnReceiveByteEh+0x3c>
				modbus_receiver_state = rx_FrameLength;
    3d3a:	83 e0       	ldi	r24, 0x03	; 3
    3d3c:	8e 87       	std	Y+14, r24	; 0x0e
    3d3e:	8c c0       	rjmp	.+280    	; 0x3e58 <_ZN9CMBSender13OnReceiveByteEh+0x154>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	8e 87       	std	Y+14, r24	; 0x0e
    3d44:	89 c0       	rjmp	.+274    	; 0x3e58 <_ZN9CMBSender13OnReceiveByteEh+0x154>
			break;
		case rx_FrameLength :
			rx_frame_length = data;
    3d46:	9e 83       	std	Y+6, r25	; 0x06
			rx_buffer_pos = 0;
    3d48:	1f 86       	std	Y+15, r1	; 0x0f
			rx_currt_crc = 0;
    3d4a:	1a 8a       	std	Y+18, r1	; 0x12
    3d4c:	1b 8a       	std	Y+19, r1	; 0x13
			modbus_receiver_state = rx_FrameReceive;
    3d4e:	84 e0       	ldi	r24, 0x04	; 4
    3d50:	8e 87       	std	Y+14, r24	; 0x0e
			break;
    3d52:	82 c0       	rjmp	.+260    	; 0x3e58 <_ZN9CMBSender13OnReceiveByteEh+0x154>
		case rx_FrameReceive :
			rx_buffer[rx_buffer_pos] = data;
    3d54:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d56:	ea 81       	ldd	r30, Y+2	; 0x02
    3d58:	fb 81       	ldd	r31, Y+3	; 0x03
    3d5a:	e8 0f       	add	r30, r24
    3d5c:	f1 1d       	adc	r31, r1
    3d5e:	90 83       	st	Z, r25
			if (rx_buffer_pos > rx_bufferSize)
    3d60:	2f 85       	ldd	r18, Y+15	; 0x0f
    3d62:	30 e0       	ldi	r19, 0x00	; 0
    3d64:	4f 81       	ldd	r20, Y+7	; 0x07
    3d66:	58 85       	ldd	r21, Y+8	; 0x08
    3d68:	42 17       	cp	r20, r18
    3d6a:	53 07       	cpc	r21, r19
    3d6c:	18 f4       	brcc	.+6      	; 0x3d74 <_ZN9CMBSender13OnReceiveByteEh+0x70>
			{
				modbus_receiver_state = rx_Error;
    3d6e:	89 e0       	ldi	r24, 0x09	; 9
    3d70:	8e 87       	std	Y+14, r24	; 0x0e
				break;
    3d72:	72 c0       	rjmp	.+228    	; 0x3e58 <_ZN9CMBSender13OnReceiveByteEh+0x154>
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
    3d74:	2a 89       	ldd	r18, Y+18	; 0x12
    3d76:	3b 89       	ldd	r19, Y+19	; 0x13
    3d78:	29 27       	eor	r18, r25
    3d7a:	92 2f       	mov	r25, r18
    3d7c:	92 95       	swap	r25
    3d7e:	92 27       	eor	r25, r18
    3d80:	09 2e       	mov	r0, r25
    3d82:	96 95       	lsr	r25
    3d84:	96 95       	lsr	r25
    3d86:	90 25       	eor	r25, r0
    3d88:	09 2e       	mov	r0, r25
    3d8a:	96 95       	lsr	r25
    3d8c:	90 25       	eor	r25, r0
    3d8e:	97 70       	andi	r25, 0x07	; 7
    3d90:	02 2e       	mov	r0, r18
    3d92:	23 2f       	mov	r18, r19
    3d94:	96 95       	lsr	r25
    3d96:	07 94       	ror	r0
    3d98:	97 95       	ror	r25
    3d9a:	30 2d       	mov	r19, r0
    3d9c:	29 27       	eor	r18, r25
    3d9e:	06 94       	lsr	r0
    3da0:	97 95       	ror	r25
    3da2:	30 25       	eor	r19, r0
    3da4:	29 27       	eor	r18, r25
			}
			rx_currt_crc = _crc16_update(rx_currt_crc, data);
    3da6:	2a 8b       	std	Y+18, r18	; 0x12
    3da8:	3b 8b       	std	Y+19, r19	; 0x13
			rx_buffer_pos++;
    3daa:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dac:	8f 5f       	subi	r24, 0xFF	; 255
    3dae:	8f 87       	std	Y+15, r24	; 0x0f
			if (rx_buffer_pos == rx_frame_length)
    3db0:	4f 85       	ldd	r20, Y+15	; 0x0f
    3db2:	8e 81       	ldd	r24, Y+6	; 0x06
    3db4:	48 13       	cpse	r20, r24
    3db6:	50 c0       	rjmp	.+160    	; 0x3e58 <_ZN9CMBSender13OnReceiveByteEh+0x154>
			{
#ifdef USE_CRC
				modbus_receiver_state = rx_CRC0;
#else
				modbus_receiver_state = rx_Complete;
    3db8:	88 e0       	ldi	r24, 0x08	; 8
    3dba:	8e 87       	std	Y+14, r24	; 0x0e
#endif
				OnTransactionCallback(rx_buffer, rx_frame_length);
    3dbc:	e8 81       	ld	r30, Y
    3dbe:	f9 81       	ldd	r31, Y+1	; 0x01
    3dc0:	50 e0       	ldi	r21, 0x00	; 0
    3dc2:	6a 81       	ldd	r22, Y+2	; 0x02
    3dc4:	7b 81       	ldd	r23, Y+3	; 0x03
    3dc6:	01 90       	ld	r0, Z+
    3dc8:	f0 81       	ld	r31, Z
    3dca:	e0 2d       	mov	r30, r0
    3dcc:	ce 01       	movw	r24, r28
    3dce:	19 95       	eicall
				if (CallbackHandler != 0)
    3dd0:	8f 89       	ldd	r24, Y+23	; 0x17
    3dd2:	98 8d       	ldd	r25, Y+24	; 0x18
    3dd4:	00 97       	sbiw	r24, 0x00	; 0
    3dd6:	09 f4       	brne	.+2      	; 0x3dda <_ZN9CMBSender13OnReceiveByteEh+0xd6>
    3dd8:	3f c0       	rjmp	.+126    	; 0x3e58 <_ZN9CMBSender13OnReceiveByteEh+0x154>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    3dda:	dc 01       	movw	r26, r24
    3ddc:	ed 91       	ld	r30, X+
    3dde:	fc 91       	ld	r31, X
    3de0:	4e 81       	ldd	r20, Y+6	; 0x06
    3de2:	50 e0       	ldi	r21, 0x00	; 0
    3de4:	6a 81       	ldd	r22, Y+2	; 0x02
    3de6:	7b 81       	ldd	r23, Y+3	; 0x03
    3de8:	01 90       	ld	r0, Z+
    3dea:	f0 81       	ld	r31, Z
    3dec:	e0 2d       	mov	r30, r0
    3dee:	19 95       	eicall
    3df0:	33 c0       	rjmp	.+102    	; 0x3e58 <_ZN9CMBSender13OnReceiveByteEh+0x154>
			}
			break;
		case rx_CRC0 :
			rx_frame_crc = data;
    3df2:	69 2f       	mov	r22, r25
    3df4:	70 e0       	ldi	r23, 0x00	; 0
    3df6:	68 8b       	std	Y+16, r22	; 0x10
    3df8:	79 8b       	std	Y+17, r23	; 0x11
			modbus_receiver_state = rx_CRC1;
    3dfa:	86 e0       	ldi	r24, 0x06	; 6
    3dfc:	8e 87       	std	Y+14, r24	; 0x0e
			break;
    3dfe:	2c c0       	rjmp	.+88     	; 0x3e58 <_ZN9CMBSender13OnReceiveByteEh+0x154>
		case rx_CRC1 :
			rx_frame_crc |= (data << 8);
    3e00:	28 89       	ldd	r18, Y+16	; 0x10
    3e02:	39 89       	ldd	r19, Y+17	; 0x11
    3e04:	a9 01       	movw	r20, r18
    3e06:	59 2b       	or	r21, r25
    3e08:	48 8b       	std	Y+16, r20	; 0x10
    3e0a:	59 8b       	std	Y+17, r21	; 0x11
			if (rx_currt_crc == rx_frame_crc)
    3e0c:	2a 89       	ldd	r18, Y+18	; 0x12
    3e0e:	3b 89       	ldd	r19, Y+19	; 0x13
    3e10:	42 17       	cp	r20, r18
    3e12:	53 07       	cpc	r21, r19
    3e14:	e9 f4       	brne	.+58     	; 0x3e50 <_ZN9CMBSender13OnReceiveByteEh+0x14c>
			{
				modbus_receiver_state = rx_Complete;
    3e16:	88 e0       	ldi	r24, 0x08	; 8
    3e18:	8e 87       	std	Y+14, r24	; 0x0e
				
				OnTransactionCallback(rx_buffer, rx_frame_length);
    3e1a:	e8 81       	ld	r30, Y
    3e1c:	f9 81       	ldd	r31, Y+1	; 0x01
    3e1e:	4e 81       	ldd	r20, Y+6	; 0x06
    3e20:	50 e0       	ldi	r21, 0x00	; 0
    3e22:	6a 81       	ldd	r22, Y+2	; 0x02
    3e24:	7b 81       	ldd	r23, Y+3	; 0x03
    3e26:	01 90       	ld	r0, Z+
    3e28:	f0 81       	ld	r31, Z
    3e2a:	e0 2d       	mov	r30, r0
    3e2c:	ce 01       	movw	r24, r28
    3e2e:	19 95       	eicall
				if (CallbackHandler != 0)
    3e30:	8f 89       	ldd	r24, Y+23	; 0x17
    3e32:	98 8d       	ldd	r25, Y+24	; 0x18
    3e34:	00 97       	sbiw	r24, 0x00	; 0
    3e36:	81 f0       	breq	.+32     	; 0x3e58 <_ZN9CMBSender13OnReceiveByteEh+0x154>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    3e38:	dc 01       	movw	r26, r24
    3e3a:	ed 91       	ld	r30, X+
    3e3c:	fc 91       	ld	r31, X
    3e3e:	4e 81       	ldd	r20, Y+6	; 0x06
    3e40:	50 e0       	ldi	r21, 0x00	; 0
    3e42:	6a 81       	ldd	r22, Y+2	; 0x02
    3e44:	7b 81       	ldd	r23, Y+3	; 0x03
    3e46:	01 90       	ld	r0, Z+
    3e48:	f0 81       	ld	r31, Z
    3e4a:	e0 2d       	mov	r30, r0
    3e4c:	19 95       	eicall
    3e4e:	04 c0       	rjmp	.+8      	; 0x3e58 <_ZN9CMBSender13OnReceiveByteEh+0x154>
			}
			else
				modbus_receiver_state = rx_Error;
    3e50:	89 e0       	ldi	r24, 0x09	; 9
    3e52:	8e 87       	std	Y+14, r24	; 0x0e
    3e54:	01 c0       	rjmp	.+2      	; 0x3e58 <_ZN9CMBSender13OnReceiveByteEh+0x154>
			break;
		case rx_Error :
		case rx_TimeOut :
			isTransaction = false;
    3e56:	1e 8a       	std	Y+22, r1	; 0x16
		case rx_Complete :
		case rx_Idle :
		default:
		break;
	};
}
    3e58:	df 91       	pop	r29
    3e5a:	cf 91       	pop	r28
    3e5c:	08 95       	ret

00003e5e <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
{
	modbus_transmitter_state = tx_Idle;
}

void CMBSender::OnUSARTRxInterrupt(void* sender)
{
    3e5e:	cf 93       	push	r28
    3e60:	df 93       	push	r29
    3e62:	ec 01       	movw	r28, r24
	CMBSender* owner = (CMBSender*)sender;
	uint8_t data = owner->pUSART->GetReceivedByte();
    3e64:	8c 85       	ldd	r24, Y+12	; 0x0c
    3e66:	9d 85       	ldd	r25, Y+13	; 0x0d
    3e68:	dc 01       	movw	r26, r24
    3e6a:	ed 91       	ld	r30, X+
    3e6c:	fc 91       	ld	r31, X
    3e6e:	02 80       	ldd	r0, Z+2	; 0x02
    3e70:	f3 81       	ldd	r31, Z+3	; 0x03
    3e72:	e0 2d       	mov	r30, r0
    3e74:	19 95       	eicall
	owner->OnReceiveByte(data);
    3e76:	68 2f       	mov	r22, r24
    3e78:	ce 01       	movw	r24, r28
    3e7a:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <_ZN9CMBSender13OnReceiveByteEh>
}
    3e7e:	df 91       	pop	r29
    3e80:	cf 91       	pop	r28
    3e82:	08 95       	ret

00003e84 <_ZN9CMBSender19StartMODBUSListenerEv>:
	if (modbus_receiver_state != rx_Complete)
		modbus_receiver_state = rx_TimeOut;
}

void CMBSender::StartMODBUSListener()
{
    3e84:	fc 01       	movw	r30, r24
	rx_buffer_pos    = 0x00;
    3e86:	17 86       	std	Z+15, r1	; 0x0f
	rx_frame_length  = 0x00;
    3e88:	16 82       	std	Z+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    3e8a:	10 8a       	std	Z+16, r1	; 0x10
    3e8c:	11 8a       	std	Z+17, r1	; 0x11
	rx_currt_crc     = 0x00;
    3e8e:	12 8a       	std	Z+18, r1	; 0x12
    3e90:	13 8a       	std	Z+19, r1	; 0x13
	modbus_receiver_state  = rx_Start;
    3e92:	16 86       	std	Z+14, r1	; 0x0e
    3e94:	08 95       	ret

00003e96 <_ZN9CMBSender14OnTransmitByteEv>:
		break;
	};
}

void CMBSender::OnTransmitByte()
{
    3e96:	cf 93       	push	r28
    3e98:	df 93       	push	r29
    3e9a:	ec 01       	movw	r28, r24
	switch (modbus_transmitter_state)
    3e9c:	8c 89       	ldd	r24, Y+20	; 0x14
    3e9e:	84 30       	cpi	r24, 0x04	; 4
    3ea0:	38 f4       	brcc	.+14     	; 0x3eb0 <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    3ea2:	82 30       	cpi	r24, 0x02	; 2
    3ea4:	b8 f5       	brcc	.+110    	; 0x3f14 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    3ea6:	88 23       	and	r24, r24
    3ea8:	31 f0       	breq	.+12     	; 0x3eb6 <_ZN9CMBSender14OnTransmitByteEv+0x20>
    3eaa:	81 30       	cpi	r24, 0x01	; 1
    3eac:	d1 f0       	breq	.+52     	; 0x3ee2 <_ZN9CMBSender14OnTransmitByteEv+0x4c>
    3eae:	39 c0       	rjmp	.+114    	; 0x3f22 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    3eb0:	85 30       	cpi	r24, 0x05	; 5
    3eb2:	81 f1       	breq	.+96     	; 0x3f14 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    3eb4:	36 c0       	rjmp	.+108    	; 0x3f22 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
	{
		case tx_Start :
			modbus_transmitter_state = tx_Transmitting; // Start receiving packet
    3eb6:	81 e0       	ldi	r24, 0x01	; 1
    3eb8:	8c 8b       	std	Y+20, r24	; 0x14
			tx_buffer_pos = 0;
    3eba:	1d 8a       	std	Y+21, r1	; 0x15
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    3ebc:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ebe:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ec0:	2d 89       	ldd	r18, Y+21	; 0x15
    3ec2:	dc 01       	movw	r26, r24
    3ec4:	ed 91       	ld	r30, X+
    3ec6:	fc 91       	ld	r31, X
    3ec8:	ac 81       	ldd	r26, Y+4	; 0x04
    3eca:	bd 81       	ldd	r27, Y+5	; 0x05
    3ecc:	a2 0f       	add	r26, r18
    3ece:	b1 1d       	adc	r27, r1
    3ed0:	04 80       	ldd	r0, Z+4	; 0x04
    3ed2:	f5 81       	ldd	r31, Z+5	; 0x05
    3ed4:	e0 2d       	mov	r30, r0
    3ed6:	6c 91       	ld	r22, X
    3ed8:	19 95       	eicall
			tx_buffer_pos++;
    3eda:	8d 89       	ldd	r24, Y+21	; 0x15
    3edc:	8f 5f       	subi	r24, 0xFF	; 255
    3ede:	8d 8b       	std	Y+21, r24	; 0x15
			break;
    3ee0:	20 c0       	rjmp	.+64     	; 0x3f22 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
		case tx_Transmitting :
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    3ee2:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ee4:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ee6:	2d 89       	ldd	r18, Y+21	; 0x15
    3ee8:	dc 01       	movw	r26, r24
    3eea:	ed 91       	ld	r30, X+
    3eec:	fc 91       	ld	r31, X
    3eee:	ac 81       	ldd	r26, Y+4	; 0x04
    3ef0:	bd 81       	ldd	r27, Y+5	; 0x05
    3ef2:	a2 0f       	add	r26, r18
    3ef4:	b1 1d       	adc	r27, r1
    3ef6:	04 80       	ldd	r0, Z+4	; 0x04
    3ef8:	f5 81       	ldd	r31, Z+5	; 0x05
    3efa:	e0 2d       	mov	r30, r0
    3efc:	6c 91       	ld	r22, X
    3efe:	19 95       	eicall
			tx_buffer_pos++;
    3f00:	8d 89       	ldd	r24, Y+21	; 0x15
    3f02:	8f 5f       	subi	r24, 0xFF	; 255
    3f04:	8d 8b       	std	Y+21, r24	; 0x15
			if (tx_buffer_pos == tx_frame_length)
    3f06:	9d 89       	ldd	r25, Y+21	; 0x15
    3f08:	89 85       	ldd	r24, Y+9	; 0x09
    3f0a:	98 13       	cpse	r25, r24
    3f0c:	0a c0       	rjmp	.+20     	; 0x3f22 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
				modbus_transmitter_state = tx_Complete;
    3f0e:	83 e0       	ldi	r24, 0x03	; 3
    3f10:	8c 8b       	std	Y+20, r24	; 0x14
    3f12:	07 c0       	rjmp	.+14     	; 0x3f22 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
			break;
		case tx_Idle :
		case tx_TimeOut :
		case tx_Complete :
			if (isTransaction)
    3f14:	8e 89       	ldd	r24, Y+22	; 0x16
    3f16:	88 23       	and	r24, r24
    3f18:	19 f0       	breq	.+6      	; 0x3f20 <_ZN9CMBSender14OnTransmitByteEv+0x8a>
				StartMODBUSListener();
    3f1a:	ce 01       	movw	r24, r28
    3f1c:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <_ZN9CMBSender19StartMODBUSListenerEv>
			isTransaction = false;
    3f20:	1e 8a       	std	Y+22, r1	; 0x16
		default :
		break;
	}
}
    3f22:	df 91       	pop	r29
    3f24:	cf 91       	pop	r28
    3f26:	08 95       	ret

00003f28 <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
}

void CMBSender::OnUSARTTxInterrupt(void* sender)
{
	CMBSender* owner = (CMBSender*)sender;
	owner->OnTransmitByte();
    3f28:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <_ZN9CMBSender14OnTransmitByteEv>
    3f2c:	08 95       	ret

00003f2e <_ZN9CMBSender18WaitMODBUSListenerEv>:
	rx_currt_crc     = 0x00;
	modbus_receiver_state  = rx_Start;
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
    3f2e:	fc 01       	movw	r30, r24
	while (modbus_receiver_state != rx_Complete)
    3f30:	06 c0       	rjmp	.+12     	; 0x3f3e <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
	{
		if (modbus_receiver_state == rx_Error)
    3f32:	86 85       	ldd	r24, Z+14	; 0x0e
    3f34:	89 30       	cpi	r24, 0x09	; 9
    3f36:	41 f0       	breq	.+16     	; 0x3f48 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
    3f38:	86 85       	ldd	r24, Z+14	; 0x0e
    3f3a:	8a 30       	cpi	r24, 0x0A	; 10
    3f3c:	39 f0       	breq	.+14     	; 0x3f4c <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
	modbus_receiver_state  = rx_Start;
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
    3f3e:	86 85       	ldd	r24, Z+14	; 0x0e
    3f40:	88 30       	cpi	r24, 0x08	; 8
    3f42:	b9 f7       	brne	.-18     	; 0x3f32 <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
		if (modbus_receiver_state == rx_Error)
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
	}
	return Complete;
    3f44:	81 e0       	ldi	r24, 0x01	; 1
    3f46:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
	{
		if (modbus_receiver_state == rx_Error)
			return Error;
    3f48:	82 e0       	ldi	r24, 0x02	; 2
    3f4a:	08 95       	ret
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
    3f4c:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    3f4e:	08 95       	ret

00003f50 <_ZN9CMBSender22StartMODBUSTransmitterEv>:
	modbus_receiver_state  = rx_Idle;
}

void CMBSender::StartMODBUSTransmitter()
{
	tx_buffer_pos = 0x00;
    3f50:	fc 01       	movw	r30, r24
    3f52:	15 8a       	std	Z+21, r1	; 0x15
	modbus_transmitter_state  = tx_Start;
    3f54:	14 8a       	std	Z+20, r1	; 0x14
	OnTransmitByte();
    3f56:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <_ZN9CMBSender14OnTransmitByteEv>
    3f5a:	08 95       	ret

00003f5c <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
{
} //~CMBSender

// MODBUS write data to register command
void CMBSender::WriteDataToRegisterAsync(uint8_t addr, uint8_t* data, uint8_t length)
{
    3f5c:	cf 93       	push	r28
    3f5e:	df 93       	push	r29
    3f60:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataTx(addr, data, length);
    3f62:	e8 81       	ld	r30, Y
    3f64:	f9 81       	ldd	r31, Y+1	; 0x01
    3f66:	02 84       	ldd	r0, Z+10	; 0x0a
    3f68:	f3 85       	ldd	r31, Z+11	; 0x0b
    3f6a:	e0 2d       	mov	r30, r0
    3f6c:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    3f6e:	ce 01       	movw	r24, r28
    3f70:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    3f74:	df 91       	pop	r29
    3f76:	cf 91       	pop	r28
    3f78:	08 95       	ret

00003f7a <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:

void CMBSender::WriteDataToSRAMAsync(uint16_t addr, uint16_t* data, uint16_t length)
{
    3f7a:	cf 93       	push	r28
    3f7c:	df 93       	push	r29
    3f7e:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataTx(addr, data, length);
    3f80:	e8 81       	ld	r30, Y
    3f82:	f9 81       	ldd	r31, Y+1	; 0x01
    3f84:	06 84       	ldd	r0, Z+14	; 0x0e
    3f86:	f7 85       	ldd	r31, Z+15	; 0x0f
    3f88:	e0 2d       	mov	r30, r0
    3f8a:	19 95       	eicall
		
	// Start transition
	StartMODBUSTransmitter();
    3f8c:	ce 01       	movw	r24, r28
    3f8e:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    3f92:	df 91       	pop	r29
    3f94:	cf 91       	pop	r28
    3f96:	08 95       	ret

00003f98 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:

void CMBSender::RequestDataFromRegisterAsync(uint8_t addr, uint8_t length)
{
    3f98:	cf 93       	push	r28
    3f9a:	df 93       	push	r29
    3f9c:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataRq(addr, length);
    3f9e:	e8 81       	ld	r30, Y
    3fa0:	f9 81       	ldd	r31, Y+1	; 0x01
    3fa2:	04 84       	ldd	r0, Z+12	; 0x0c
    3fa4:	f5 85       	ldd	r31, Z+13	; 0x0d
    3fa6:	e0 2d       	mov	r30, r0
    3fa8:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    3faa:	ce 01       	movw	r24, r28
    3fac:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    3fb0:	df 91       	pop	r29
    3fb2:	cf 91       	pop	r28
    3fb4:	08 95       	ret

00003fb6 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:

void CMBSender::RequestDataFromSRAMAsync(uint16_t addr, uint8_t length)
{
    3fb6:	cf 93       	push	r28
    3fb8:	df 93       	push	r29
    3fba:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataRq(addr, length);
    3fbc:	e8 81       	ld	r30, Y
    3fbe:	f9 81       	ldd	r31, Y+1	; 0x01
    3fc0:	50 e0       	ldi	r21, 0x00	; 0
    3fc2:	00 88       	ldd	r0, Z+16	; 0x10
    3fc4:	f1 89       	ldd	r31, Z+17	; 0x11
    3fc6:	e0 2d       	mov	r30, r0
    3fc8:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    3fca:	ce 01       	movw	r24, r28
    3fcc:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    3fd0:	df 91       	pop	r29
    3fd2:	cf 91       	pop	r28
    3fd4:	08 95       	ret

00003fd6 <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
	modbus_transmitter_state  = tx_Start;
	OnTransmitByte();
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
    3fd6:	fc 01       	movw	r30, r24
	while (modbus_transmitter_state != tx_Complete)
    3fd8:	06 c0       	rjmp	.+12     	; 0x3fe6 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
	{
		if (modbus_transmitter_state == tx_Error)
    3fda:	84 89       	ldd	r24, Z+20	; 0x14
    3fdc:	84 30       	cpi	r24, 0x04	; 4
    3fde:	41 f0       	breq	.+16     	; 0x3ff0 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
    3fe0:	84 89       	ldd	r24, Z+20	; 0x14
    3fe2:	85 30       	cpi	r24, 0x05	; 5
    3fe4:	39 f0       	breq	.+14     	; 0x3ff4 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
	OnTransmitByte();
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
    3fe6:	84 89       	ldd	r24, Z+20	; 0x14
    3fe8:	83 30       	cpi	r24, 0x03	; 3
    3fea:	b9 f7       	brne	.-18     	; 0x3fda <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
		if (modbus_transmitter_state == tx_Error)
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
	}
	return Complete;
    3fec:	81 e0       	ldi	r24, 0x01	; 1
    3fee:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
	{
		if (modbus_transmitter_state == tx_Error)
		return Error;
    3ff0:	82 e0       	ldi	r24, 0x02	; 2
    3ff2:	08 95       	ret
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
    3ff4:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    3ff6:	08 95       	ret

00003ff8 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTransmitByte();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    3ff8:	21 e0       	ldi	r18, 0x01	; 1
    3ffa:	fc 01       	movw	r30, r24
    3ffc:	26 8b       	std	Z+22, r18	; 0x16
	RequestDataFromRegisterAsync(addr, length);
    3ffe:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    4002:	08 95       	ret

00004004 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    4004:	21 e0       	ldi	r18, 0x01	; 1
    4006:	fc 01       	movw	r30, r24
    4008:	26 8b       	std	Z+22, r18	; 0x16
	RequestDataFromSRAMAsync(addr, length);
    400a:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    400e:	08 95       	ret

00004010 <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    4010:	0f 93       	push	r16
    4012:	1f 93       	push	r17
    4014:	cf 93       	push	r28
    4016:	df 93       	push	r29
    4018:	8c 01       	movw	r16, r24
    401a:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    401c:	98 81       	ld	r25, Y
    401e:	91 38       	cpi	r25, 0x81	; 129
    4020:	69 f4       	brne	.+26     	; 0x403c <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    4022:	d8 01       	movw	r26, r16
    4024:	ed 91       	ld	r30, X+
    4026:	fc 91       	ld	r31, X
    4028:	04 80       	ldd	r0, Z+4	; 0x04
    402a:	f5 81       	ldd	r31, Z+5	; 0x05
    402c:	e0 2d       	mov	r30, r0
    402e:	2a 81       	ldd	r18, Y+2	; 0x02
    4030:	ab 01       	movw	r20, r22
    4032:	4d 5f       	subi	r20, 0xFD	; 253
    4034:	5f 4f       	sbci	r21, 0xFF	; 255
    4036:	69 81       	ldd	r22, Y+1	; 0x01
    4038:	c8 01       	movw	r24, r16
    403a:	19 95       	eicall
	}
	if (data[0] == 0x83)
    403c:	98 81       	ld	r25, Y
    403e:	93 38       	cpi	r25, 0x83	; 131
    4040:	99 f4       	brne	.+38     	; 0x4068 <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], (data[2] << 8) | data[3]);
    4042:	6a 81       	ldd	r22, Y+2	; 0x02
    4044:	70 e0       	ldi	r23, 0x00	; 0
    4046:	d8 01       	movw	r26, r16
    4048:	ed 91       	ld	r30, X+
    404a:	fc 91       	ld	r31, X
    404c:	36 2f       	mov	r19, r22
    404e:	22 27       	eor	r18, r18
    4050:	8b 81       	ldd	r24, Y+3	; 0x03
    4052:	28 2b       	or	r18, r24
    4054:	ae 01       	movw	r20, r28
    4056:	4c 5f       	subi	r20, 0xFC	; 252
    4058:	5f 4f       	sbci	r21, 0xFF	; 255
    405a:	89 81       	ldd	r24, Y+1	; 0x01
    405c:	78 2b       	or	r23, r24
    405e:	02 80       	ldd	r0, Z+2	; 0x02
    4060:	f3 81       	ldd	r31, Z+3	; 0x03
    4062:	e0 2d       	mov	r30, r0
    4064:	c8 01       	movw	r24, r16
    4066:	19 95       	eicall
	}
}
    4068:	df 91       	pop	r29
    406a:	cf 91       	pop	r28
    406c:	1f 91       	pop	r17
    406e:	0f 91       	pop	r16
    4070:	08 95       	ret

00004072 <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    4072:	0e 94 08 20 	call	0x4010	; 0x4010 <_ZN9CMBSender18ProcessTransactionEPhj>
    4076:	08 95       	ret

00004078 <__divmodsi4>:
    4078:	05 2e       	mov	r0, r21
    407a:	97 fb       	bst	r25, 7
    407c:	1e f4       	brtc	.+6      	; 0x4084 <__divmodsi4+0xc>
    407e:	00 94       	com	r0
    4080:	0e 94 53 20 	call	0x40a6	; 0x40a6 <__negsi2>
    4084:	57 fd       	sbrc	r21, 7
    4086:	07 d0       	rcall	.+14     	; 0x4096 <__divmodsi4_neg2>
    4088:	0e 94 72 20 	call	0x40e4	; 0x40e4 <__udivmodsi4>
    408c:	07 fc       	sbrc	r0, 7
    408e:	03 d0       	rcall	.+6      	; 0x4096 <__divmodsi4_neg2>
    4090:	4e f4       	brtc	.+18     	; 0x40a4 <__divmodsi4_exit>
    4092:	0c 94 53 20 	jmp	0x40a6	; 0x40a6 <__negsi2>

00004096 <__divmodsi4_neg2>:
    4096:	50 95       	com	r21
    4098:	40 95       	com	r20
    409a:	30 95       	com	r19
    409c:	21 95       	neg	r18
    409e:	3f 4f       	sbci	r19, 0xFF	; 255
    40a0:	4f 4f       	sbci	r20, 0xFF	; 255
    40a2:	5f 4f       	sbci	r21, 0xFF	; 255

000040a4 <__divmodsi4_exit>:
    40a4:	08 95       	ret

000040a6 <__negsi2>:
    40a6:	90 95       	com	r25
    40a8:	80 95       	com	r24
    40aa:	70 95       	com	r23
    40ac:	61 95       	neg	r22
    40ae:	7f 4f       	sbci	r23, 0xFF	; 255
    40b0:	8f 4f       	sbci	r24, 0xFF	; 255
    40b2:	9f 4f       	sbci	r25, 0xFF	; 255
    40b4:	08 95       	ret

000040b6 <__tablejump2__>:
    40b6:	ee 0f       	add	r30, r30
    40b8:	ff 1f       	adc	r31, r31
    40ba:	88 1f       	adc	r24, r24
    40bc:	8b bf       	out	0x3b, r24	; 59
    40be:	07 90       	elpm	r0, Z+
    40c0:	f6 91       	elpm	r31, Z
    40c2:	e0 2d       	mov	r30, r0
    40c4:	19 94       	eijmp

000040c6 <__umulhisi3>:
    40c6:	a2 9f       	mul	r26, r18
    40c8:	b0 01       	movw	r22, r0
    40ca:	b3 9f       	mul	r27, r19
    40cc:	c0 01       	movw	r24, r0
    40ce:	a3 9f       	mul	r26, r19
    40d0:	70 0d       	add	r23, r0
    40d2:	81 1d       	adc	r24, r1
    40d4:	11 24       	eor	r1, r1
    40d6:	91 1d       	adc	r25, r1
    40d8:	b2 9f       	mul	r27, r18
    40da:	70 0d       	add	r23, r0
    40dc:	81 1d       	adc	r24, r1
    40de:	11 24       	eor	r1, r1
    40e0:	91 1d       	adc	r25, r1
    40e2:	08 95       	ret

000040e4 <__udivmodsi4>:
    40e4:	a1 e2       	ldi	r26, 0x21	; 33
    40e6:	1a 2e       	mov	r1, r26
    40e8:	aa 1b       	sub	r26, r26
    40ea:	bb 1b       	sub	r27, r27
    40ec:	fd 01       	movw	r30, r26
    40ee:	0d c0       	rjmp	.+26     	; 0x410a <__udivmodsi4_ep>

000040f0 <__udivmodsi4_loop>:
    40f0:	aa 1f       	adc	r26, r26
    40f2:	bb 1f       	adc	r27, r27
    40f4:	ee 1f       	adc	r30, r30
    40f6:	ff 1f       	adc	r31, r31
    40f8:	a2 17       	cp	r26, r18
    40fa:	b3 07       	cpc	r27, r19
    40fc:	e4 07       	cpc	r30, r20
    40fe:	f5 07       	cpc	r31, r21
    4100:	20 f0       	brcs	.+8      	; 0x410a <__udivmodsi4_ep>
    4102:	a2 1b       	sub	r26, r18
    4104:	b3 0b       	sbc	r27, r19
    4106:	e4 0b       	sbc	r30, r20
    4108:	f5 0b       	sbc	r31, r21

0000410a <__udivmodsi4_ep>:
    410a:	66 1f       	adc	r22, r22
    410c:	77 1f       	adc	r23, r23
    410e:	88 1f       	adc	r24, r24
    4110:	99 1f       	adc	r25, r25
    4112:	1a 94       	dec	r1
    4114:	69 f7       	brne	.-38     	; 0x40f0 <__udivmodsi4_loop>
    4116:	60 95       	com	r22
    4118:	70 95       	com	r23
    411a:	80 95       	com	r24
    411c:	90 95       	com	r25
    411e:	9b 01       	movw	r18, r22
    4120:	ac 01       	movw	r20, r24
    4122:	bd 01       	movw	r22, r26
    4124:	cf 01       	movw	r24, r30
    4126:	08 95       	ret

00004128 <malloc>:
    4128:	cf 93       	push	r28
    412a:	df 93       	push	r29
    412c:	82 30       	cpi	r24, 0x02	; 2
    412e:	91 05       	cpc	r25, r1
    4130:	10 f4       	brcc	.+4      	; 0x4136 <malloc+0xe>
    4132:	82 e0       	ldi	r24, 0x02	; 2
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	e0 91 20 23 	lds	r30, 0x2320
    413a:	f0 91 21 23 	lds	r31, 0x2321
    413e:	20 e0       	ldi	r18, 0x00	; 0
    4140:	30 e0       	ldi	r19, 0x00	; 0
    4142:	c0 e0       	ldi	r28, 0x00	; 0
    4144:	d0 e0       	ldi	r29, 0x00	; 0
    4146:	30 97       	sbiw	r30, 0x00	; 0
    4148:	11 f1       	breq	.+68     	; 0x418e <malloc+0x66>
    414a:	40 81       	ld	r20, Z
    414c:	51 81       	ldd	r21, Z+1	; 0x01
    414e:	48 17       	cp	r20, r24
    4150:	59 07       	cpc	r21, r25
    4152:	c0 f0       	brcs	.+48     	; 0x4184 <malloc+0x5c>
    4154:	48 17       	cp	r20, r24
    4156:	59 07       	cpc	r21, r25
    4158:	61 f4       	brne	.+24     	; 0x4172 <malloc+0x4a>
    415a:	82 81       	ldd	r24, Z+2	; 0x02
    415c:	93 81       	ldd	r25, Z+3	; 0x03
    415e:	20 97       	sbiw	r28, 0x00	; 0
    4160:	19 f0       	breq	.+6      	; 0x4168 <malloc+0x40>
    4162:	8a 83       	std	Y+2, r24	; 0x02
    4164:	9b 83       	std	Y+3, r25	; 0x03
    4166:	2b c0       	rjmp	.+86     	; 0x41be <malloc+0x96>
    4168:	80 93 20 23 	sts	0x2320, r24
    416c:	90 93 21 23 	sts	0x2321, r25
    4170:	26 c0       	rjmp	.+76     	; 0x41be <malloc+0x96>
    4172:	21 15       	cp	r18, r1
    4174:	31 05       	cpc	r19, r1
    4176:	19 f0       	breq	.+6      	; 0x417e <malloc+0x56>
    4178:	42 17       	cp	r20, r18
    417a:	53 07       	cpc	r21, r19
    417c:	18 f4       	brcc	.+6      	; 0x4184 <malloc+0x5c>
    417e:	9a 01       	movw	r18, r20
    4180:	be 01       	movw	r22, r28
    4182:	df 01       	movw	r26, r30
    4184:	ef 01       	movw	r28, r30
    4186:	02 80       	ldd	r0, Z+2	; 0x02
    4188:	f3 81       	ldd	r31, Z+3	; 0x03
    418a:	e0 2d       	mov	r30, r0
    418c:	dc cf       	rjmp	.-72     	; 0x4146 <malloc+0x1e>
    418e:	21 15       	cp	r18, r1
    4190:	31 05       	cpc	r19, r1
    4192:	09 f1       	breq	.+66     	; 0x41d6 <malloc+0xae>
    4194:	28 1b       	sub	r18, r24
    4196:	39 0b       	sbc	r19, r25
    4198:	24 30       	cpi	r18, 0x04	; 4
    419a:	31 05       	cpc	r19, r1
    419c:	90 f4       	brcc	.+36     	; 0x41c2 <malloc+0x9a>
    419e:	12 96       	adiw	r26, 0x02	; 2
    41a0:	8d 91       	ld	r24, X+
    41a2:	9c 91       	ld	r25, X
    41a4:	13 97       	sbiw	r26, 0x03	; 3
    41a6:	61 15       	cp	r22, r1
    41a8:	71 05       	cpc	r23, r1
    41aa:	21 f0       	breq	.+8      	; 0x41b4 <malloc+0x8c>
    41ac:	fb 01       	movw	r30, r22
    41ae:	82 83       	std	Z+2, r24	; 0x02
    41b0:	93 83       	std	Z+3, r25	; 0x03
    41b2:	04 c0       	rjmp	.+8      	; 0x41bc <malloc+0x94>
    41b4:	80 93 20 23 	sts	0x2320, r24
    41b8:	90 93 21 23 	sts	0x2321, r25
    41bc:	fd 01       	movw	r30, r26
    41be:	32 96       	adiw	r30, 0x02	; 2
    41c0:	44 c0       	rjmp	.+136    	; 0x424a <malloc+0x122>
    41c2:	fd 01       	movw	r30, r26
    41c4:	e2 0f       	add	r30, r18
    41c6:	f3 1f       	adc	r31, r19
    41c8:	81 93       	st	Z+, r24
    41ca:	91 93       	st	Z+, r25
    41cc:	22 50       	subi	r18, 0x02	; 2
    41ce:	31 09       	sbc	r19, r1
    41d0:	2d 93       	st	X+, r18
    41d2:	3c 93       	st	X, r19
    41d4:	3a c0       	rjmp	.+116    	; 0x424a <malloc+0x122>
    41d6:	20 91 1e 23 	lds	r18, 0x231E
    41da:	30 91 1f 23 	lds	r19, 0x231F
    41de:	23 2b       	or	r18, r19
    41e0:	41 f4       	brne	.+16     	; 0x41f2 <malloc+0xca>
    41e2:	20 91 02 20 	lds	r18, 0x2002
    41e6:	30 91 03 20 	lds	r19, 0x2003
    41ea:	20 93 1e 23 	sts	0x231E, r18
    41ee:	30 93 1f 23 	sts	0x231F, r19
    41f2:	20 91 00 20 	lds	r18, 0x2000
    41f6:	30 91 01 20 	lds	r19, 0x2001
    41fa:	21 15       	cp	r18, r1
    41fc:	31 05       	cpc	r19, r1
    41fe:	41 f4       	brne	.+16     	; 0x4210 <malloc+0xe8>
    4200:	2d b7       	in	r18, 0x3d	; 61
    4202:	3e b7       	in	r19, 0x3e	; 62
    4204:	40 91 04 20 	lds	r20, 0x2004
    4208:	50 91 05 20 	lds	r21, 0x2005
    420c:	24 1b       	sub	r18, r20
    420e:	35 0b       	sbc	r19, r21
    4210:	e0 91 1e 23 	lds	r30, 0x231E
    4214:	f0 91 1f 23 	lds	r31, 0x231F
    4218:	e2 17       	cp	r30, r18
    421a:	f3 07       	cpc	r31, r19
    421c:	a0 f4       	brcc	.+40     	; 0x4246 <malloc+0x11e>
    421e:	2e 1b       	sub	r18, r30
    4220:	3f 0b       	sbc	r19, r31
    4222:	28 17       	cp	r18, r24
    4224:	39 07       	cpc	r19, r25
    4226:	78 f0       	brcs	.+30     	; 0x4246 <malloc+0x11e>
    4228:	ac 01       	movw	r20, r24
    422a:	4e 5f       	subi	r20, 0xFE	; 254
    422c:	5f 4f       	sbci	r21, 0xFF	; 255
    422e:	24 17       	cp	r18, r20
    4230:	35 07       	cpc	r19, r21
    4232:	48 f0       	brcs	.+18     	; 0x4246 <malloc+0x11e>
    4234:	4e 0f       	add	r20, r30
    4236:	5f 1f       	adc	r21, r31
    4238:	40 93 1e 23 	sts	0x231E, r20
    423c:	50 93 1f 23 	sts	0x231F, r21
    4240:	81 93       	st	Z+, r24
    4242:	91 93       	st	Z+, r25
    4244:	02 c0       	rjmp	.+4      	; 0x424a <malloc+0x122>
    4246:	e0 e0       	ldi	r30, 0x00	; 0
    4248:	f0 e0       	ldi	r31, 0x00	; 0
    424a:	cf 01       	movw	r24, r30
    424c:	df 91       	pop	r29
    424e:	cf 91       	pop	r28
    4250:	08 95       	ret

00004252 <free>:
    4252:	0f 93       	push	r16
    4254:	1f 93       	push	r17
    4256:	cf 93       	push	r28
    4258:	df 93       	push	r29
    425a:	00 97       	sbiw	r24, 0x00	; 0
    425c:	09 f4       	brne	.+2      	; 0x4260 <free+0xe>
    425e:	8c c0       	rjmp	.+280    	; 0x4378 <free+0x126>
    4260:	fc 01       	movw	r30, r24
    4262:	32 97       	sbiw	r30, 0x02	; 2
    4264:	12 82       	std	Z+2, r1	; 0x02
    4266:	13 82       	std	Z+3, r1	; 0x03
    4268:	00 91 20 23 	lds	r16, 0x2320
    426c:	10 91 21 23 	lds	r17, 0x2321
    4270:	01 15       	cp	r16, r1
    4272:	11 05       	cpc	r17, r1
    4274:	81 f4       	brne	.+32     	; 0x4296 <free+0x44>
    4276:	20 81       	ld	r18, Z
    4278:	31 81       	ldd	r19, Z+1	; 0x01
    427a:	82 0f       	add	r24, r18
    427c:	93 1f       	adc	r25, r19
    427e:	20 91 1e 23 	lds	r18, 0x231E
    4282:	30 91 1f 23 	lds	r19, 0x231F
    4286:	28 17       	cp	r18, r24
    4288:	39 07       	cpc	r19, r25
    428a:	79 f5       	brne	.+94     	; 0x42ea <free+0x98>
    428c:	e0 93 1e 23 	sts	0x231E, r30
    4290:	f0 93 1f 23 	sts	0x231F, r31
    4294:	71 c0       	rjmp	.+226    	; 0x4378 <free+0x126>
    4296:	d8 01       	movw	r26, r16
    4298:	40 e0       	ldi	r20, 0x00	; 0
    429a:	50 e0       	ldi	r21, 0x00	; 0
    429c:	ae 17       	cp	r26, r30
    429e:	bf 07       	cpc	r27, r31
    42a0:	50 f4       	brcc	.+20     	; 0x42b6 <free+0x64>
    42a2:	12 96       	adiw	r26, 0x02	; 2
    42a4:	2d 91       	ld	r18, X+
    42a6:	3c 91       	ld	r19, X
    42a8:	13 97       	sbiw	r26, 0x03	; 3
    42aa:	ad 01       	movw	r20, r26
    42ac:	21 15       	cp	r18, r1
    42ae:	31 05       	cpc	r19, r1
    42b0:	09 f1       	breq	.+66     	; 0x42f4 <free+0xa2>
    42b2:	d9 01       	movw	r26, r18
    42b4:	f3 cf       	rjmp	.-26     	; 0x429c <free+0x4a>
    42b6:	9d 01       	movw	r18, r26
    42b8:	da 01       	movw	r26, r20
    42ba:	22 83       	std	Z+2, r18	; 0x02
    42bc:	33 83       	std	Z+3, r19	; 0x03
    42be:	60 81       	ld	r22, Z
    42c0:	71 81       	ldd	r23, Z+1	; 0x01
    42c2:	86 0f       	add	r24, r22
    42c4:	97 1f       	adc	r25, r23
    42c6:	82 17       	cp	r24, r18
    42c8:	93 07       	cpc	r25, r19
    42ca:	69 f4       	brne	.+26     	; 0x42e6 <free+0x94>
    42cc:	ec 01       	movw	r28, r24
    42ce:	28 81       	ld	r18, Y
    42d0:	39 81       	ldd	r19, Y+1	; 0x01
    42d2:	26 0f       	add	r18, r22
    42d4:	37 1f       	adc	r19, r23
    42d6:	2e 5f       	subi	r18, 0xFE	; 254
    42d8:	3f 4f       	sbci	r19, 0xFF	; 255
    42da:	20 83       	st	Z, r18
    42dc:	31 83       	std	Z+1, r19	; 0x01
    42de:	8a 81       	ldd	r24, Y+2	; 0x02
    42e0:	9b 81       	ldd	r25, Y+3	; 0x03
    42e2:	82 83       	std	Z+2, r24	; 0x02
    42e4:	93 83       	std	Z+3, r25	; 0x03
    42e6:	45 2b       	or	r20, r21
    42e8:	29 f4       	brne	.+10     	; 0x42f4 <free+0xa2>
    42ea:	e0 93 20 23 	sts	0x2320, r30
    42ee:	f0 93 21 23 	sts	0x2321, r31
    42f2:	42 c0       	rjmp	.+132    	; 0x4378 <free+0x126>
    42f4:	12 96       	adiw	r26, 0x02	; 2
    42f6:	ed 93       	st	X+, r30
    42f8:	fc 93       	st	X, r31
    42fa:	13 97       	sbiw	r26, 0x03	; 3
    42fc:	ed 01       	movw	r28, r26
    42fe:	49 91       	ld	r20, Y+
    4300:	59 91       	ld	r21, Y+
    4302:	9e 01       	movw	r18, r28
    4304:	24 0f       	add	r18, r20
    4306:	35 1f       	adc	r19, r21
    4308:	e2 17       	cp	r30, r18
    430a:	f3 07       	cpc	r31, r19
    430c:	71 f4       	brne	.+28     	; 0x432a <free+0xd8>
    430e:	80 81       	ld	r24, Z
    4310:	91 81       	ldd	r25, Z+1	; 0x01
    4312:	84 0f       	add	r24, r20
    4314:	95 1f       	adc	r25, r21
    4316:	02 96       	adiw	r24, 0x02	; 2
    4318:	8d 93       	st	X+, r24
    431a:	9c 93       	st	X, r25
    431c:	11 97       	sbiw	r26, 0x01	; 1
    431e:	82 81       	ldd	r24, Z+2	; 0x02
    4320:	93 81       	ldd	r25, Z+3	; 0x03
    4322:	12 96       	adiw	r26, 0x02	; 2
    4324:	8d 93       	st	X+, r24
    4326:	9c 93       	st	X, r25
    4328:	13 97       	sbiw	r26, 0x03	; 3
    432a:	e0 e0       	ldi	r30, 0x00	; 0
    432c:	f0 e0       	ldi	r31, 0x00	; 0
    432e:	d8 01       	movw	r26, r16
    4330:	12 96       	adiw	r26, 0x02	; 2
    4332:	8d 91       	ld	r24, X+
    4334:	9c 91       	ld	r25, X
    4336:	13 97       	sbiw	r26, 0x03	; 3
    4338:	00 97       	sbiw	r24, 0x00	; 0
    433a:	19 f0       	breq	.+6      	; 0x4342 <free+0xf0>
    433c:	f8 01       	movw	r30, r16
    433e:	8c 01       	movw	r16, r24
    4340:	f6 cf       	rjmp	.-20     	; 0x432e <free+0xdc>
    4342:	8d 91       	ld	r24, X+
    4344:	9c 91       	ld	r25, X
    4346:	98 01       	movw	r18, r16
    4348:	2e 5f       	subi	r18, 0xFE	; 254
    434a:	3f 4f       	sbci	r19, 0xFF	; 255
    434c:	82 0f       	add	r24, r18
    434e:	93 1f       	adc	r25, r19
    4350:	20 91 1e 23 	lds	r18, 0x231E
    4354:	30 91 1f 23 	lds	r19, 0x231F
    4358:	28 17       	cp	r18, r24
    435a:	39 07       	cpc	r19, r25
    435c:	69 f4       	brne	.+26     	; 0x4378 <free+0x126>
    435e:	30 97       	sbiw	r30, 0x00	; 0
    4360:	29 f4       	brne	.+10     	; 0x436c <free+0x11a>
    4362:	10 92 20 23 	sts	0x2320, r1
    4366:	10 92 21 23 	sts	0x2321, r1
    436a:	02 c0       	rjmp	.+4      	; 0x4370 <free+0x11e>
    436c:	12 82       	std	Z+2, r1	; 0x02
    436e:	13 82       	std	Z+3, r1	; 0x03
    4370:	00 93 1e 23 	sts	0x231E, r16
    4374:	10 93 1f 23 	sts	0x231F, r17
    4378:	df 91       	pop	r29
    437a:	cf 91       	pop	r28
    437c:	1f 91       	pop	r17
    437e:	0f 91       	pop	r16
    4380:	08 95       	ret

00004382 <__do_global_dtors>:
    4382:	11 e0       	ldi	r17, 0x01	; 1
    4384:	c3 ea       	ldi	r28, 0xA3	; 163
    4386:	d1 e0       	ldi	r29, 0x01	; 1
    4388:	00 e0       	ldi	r16, 0x00	; 0
    438a:	06 c0       	rjmp	.+12     	; 0x4398 <__do_global_dtors+0x16>
    438c:	80 2f       	mov	r24, r16
    438e:	fe 01       	movw	r30, r28
    4390:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <__tablejump2__>
    4394:	21 96       	adiw	r28, 0x01	; 1
    4396:	01 1d       	adc	r16, r1
    4398:	c5 3a       	cpi	r28, 0xA5	; 165
    439a:	d1 07       	cpc	r29, r17
    439c:	80 e0       	ldi	r24, 0x00	; 0
    439e:	08 07       	cpc	r16, r24
    43a0:	a9 f7       	brne	.-22     	; 0x438c <__do_global_dtors+0xa>
    43a2:	f8 94       	cli

000043a4 <__stop_program>:
    43a4:	ff cf       	rjmp	.-2      	; 0x43a4 <__stop_program>
