
ATxmegaElectroporation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004f3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00802000  00004f3c  00004fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000295  00802128  00802128  000050f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000050f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005128  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000938  00000000  00000000  00005168  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cd0b  00000000  00000000  00005aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000251a  00000000  00000000  000127ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b3b  00000000  00000000  00014cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000311c  00000000  00000000  00017800  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004ca0  00000000  00000000  0001a91c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000899e  00000000  00000000  0001f5bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000858  00000000  00000000  00027f5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 10 02 	jmp	0x420	; 0x420 <__dtors_end>
       4:	0c 94 2a 0e 	jmp	0x1c54	; 0x1c54 <__vector_1>
       8:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__vector_2>
       c:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__vector_3>
      10:	0c 94 bd 0e 	jmp	0x1d7a	; 0x1d7a <__vector_4>
      14:	0c 94 ee 0e 	jmp	0x1ddc	; 0x1ddc <__vector_5>
      18:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__vector_6>
      1c:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <__vector_7>
      20:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <__vector_8>
      24:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <__vector_9>
      28:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <__vector_10>
      2c:	0c 94 14 10 	jmp	0x2028	; 0x2028 <__vector_11>
      30:	0c 94 45 10 	jmp	0x208a	; 0x208a <__vector_12>
      34:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__vector_13>
      38:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_14>
      3c:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__vector_15>
      40:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__vector_16>
      44:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__vector_17>
      48:	0c 94 6b 11 	jmp	0x22d6	; 0x22d6 <__vector_18>
      4c:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__vector_19>
      50:	0c 94 cd 11 	jmp	0x239a	; 0x239a <__vector_20>
      54:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__vector_21>
      58:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__vector_22>
      5c:	0c 94 60 12 	jmp	0x24c0	; 0x24c0 <__vector_23>
      60:	0c 94 91 12 	jmp	0x2522	; 0x2522 <__vector_24>
      64:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__vector_25>
      68:	0c 94 f3 12 	jmp	0x25e6	; 0x25e6 <__vector_26>
      6c:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__vector_27>
      70:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <__vector_28>
      74:	0c 94 86 13 	jmp	0x270c	; 0x270c <__vector_29>
      78:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__vector_30>
      7c:	0c 94 e8 13 	jmp	0x27d0	; 0x27d0 <__vector_31>
      80:	0c 94 19 14 	jmp	0x2832	; 0x2832 <__vector_32>
      84:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__vector_33>
      88:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__vector_34>
      8c:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__vector_35>
      90:	0c 94 dd 14 	jmp	0x29ba	; 0x29ba <__vector_36>
      94:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <__vector_37>
      98:	0c 94 3f 15 	jmp	0x2a7e	; 0x2a7e <__vector_38>
      9c:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <__vector_39>
      a0:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <__vector_40>
      a4:	0c 94 d2 15 	jmp	0x2ba4	; 0x2ba4 <__vector_41>
      a8:	0c 94 03 16 	jmp	0x2c06	; 0x2c06 <__vector_42>
      ac:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <__vector_43>
      b0:	0c 94 65 16 	jmp	0x2cca	; 0x2cca <__vector_44>
      b4:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <__vector_45>
      b8:	0c 94 c7 16 	jmp	0x2d8e	; 0x2d8e <__vector_46>
      bc:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <__vector_47>
      c0:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <__vector_48>
      c4:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__vector_49>
      c8:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <__vector_50>
      cc:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__vector_51>
      d0:	0c 94 ed 17 	jmp	0x2fda	; 0x2fda <__vector_52>
      d4:	0c 94 1e 18 	jmp	0x303c	; 0x303c <__vector_53>
      d8:	0c 94 4f 18 	jmp	0x309e	; 0x309e <__vector_54>
      dc:	0c 94 80 18 	jmp	0x3100	; 0x3100 <__vector_55>
      e0:	0c 94 b1 18 	jmp	0x3162	; 0x3162 <__vector_56>
      e4:	0c 94 e2 18 	jmp	0x31c4	; 0x31c4 <__vector_57>
      e8:	0c 94 13 19 	jmp	0x3226	; 0x3226 <__vector_58>
      ec:	0c 94 44 19 	jmp	0x3288	; 0x3288 <__vector_59>
      f0:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <__vector_60>
      f4:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__vector_61>
      f8:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__vector_62>
      fc:	0c 94 08 1a 	jmp	0x3410	; 0x3410 <__vector_63>
     100:	0c 94 39 1a 	jmp	0x3472	; 0x3472 <__vector_64>
     104:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <__vector_65>
     108:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <__vector_66>
     10c:	0c 94 cc 1a 	jmp	0x3598	; 0x3598 <__vector_67>
     110:	0c 94 fd 1a 	jmp	0x35fa	; 0x35fa <__vector_68>
     114:	0c 94 2e 1b 	jmp	0x365c	; 0x365c <__vector_69>
     118:	0c 94 5f 1b 	jmp	0x36be	; 0x36be <__vector_70>
     11c:	0c 94 90 1b 	jmp	0x3720	; 0x3720 <__vector_71>
     120:	0c 94 c1 1b 	jmp	0x3782	; 0x3782 <__vector_72>
     124:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__vector_73>
     128:	0c 94 23 1c 	jmp	0x3846	; 0x3846 <__vector_74>
     12c:	0c 94 41 02 	jmp	0x482	; 0x482 <__bad_interrupt>
     130:	0c 94 41 02 	jmp	0x482	; 0x482 <__bad_interrupt>
     134:	0c 94 54 1c 	jmp	0x38a8	; 0x38a8 <__vector_77>
     138:	0c 94 85 1c 	jmp	0x390a	; 0x390a <__vector_78>
     13c:	0c 94 b6 1c 	jmp	0x396c	; 0x396c <__vector_79>
     140:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <__vector_80>
     144:	0c 94 18 1d 	jmp	0x3a30	; 0x3a30 <__vector_81>
     148:	0c 94 49 1d 	jmp	0x3a92	; 0x3a92 <__vector_82>
     14c:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <__vector_83>
     150:	0c 94 ab 1d 	jmp	0x3b56	; 0x3b56 <__vector_84>
     154:	0c 94 dc 1d 	jmp	0x3bb8	; 0x3bb8 <__vector_85>
     158:	0c 94 0d 1e 	jmp	0x3c1a	; 0x3c1a <__vector_86>
     15c:	0c 94 3e 1e 	jmp	0x3c7c	; 0x3c7c <__vector_87>
     160:	0c 94 6f 1e 	jmp	0x3cde	; 0x3cde <__vector_88>
     164:	0c 94 a0 1e 	jmp	0x3d40	; 0x3d40 <__vector_89>
     168:	0c 94 d1 1e 	jmp	0x3da2	; 0x3da2 <__vector_90>
     16c:	0c 94 02 1f 	jmp	0x3e04	; 0x3e04 <__vector_91>
     170:	0c 94 33 1f 	jmp	0x3e66	; 0x3e66 <__vector_92>
     174:	0c 94 64 1f 	jmp	0x3ec8	; 0x3ec8 <__vector_93>
     178:	0c 94 41 02 	jmp	0x482	; 0x482 <__bad_interrupt>
     17c:	0c 94 41 02 	jmp	0x482	; 0x482 <__bad_interrupt>
     180:	0c 94 41 02 	jmp	0x482	; 0x482 <__bad_interrupt>
     184:	0c 94 41 02 	jmp	0x482	; 0x482 <__bad_interrupt>
     188:	0c 94 41 02 	jmp	0x482	; 0x482 <__bad_interrupt>
     18c:	0c 94 41 02 	jmp	0x482	; 0x482 <__bad_interrupt>
     190:	0c 94 41 02 	jmp	0x482	; 0x482 <__bad_interrupt>
     194:	0c 94 41 02 	jmp	0x482	; 0x482 <__bad_interrupt>
     198:	0c 94 41 02 	jmp	0x482	; 0x482 <__bad_interrupt>
     19c:	0c 94 41 02 	jmp	0x482	; 0x482 <__bad_interrupt>
     1a0:	0c 94 95 1f 	jmp	0x3f2a	; 0x3f2a <__vector_104>
     1a4:	0c 94 c6 1f 	jmp	0x3f8c	; 0x3f8c <__vector_105>
     1a8:	0c 94 41 02 	jmp	0x482	; 0x482 <__bad_interrupt>
     1ac:	0c 94 41 02 	jmp	0x482	; 0x482 <__bad_interrupt>
     1b0:	0c 94 f7 1f 	jmp	0x3fee	; 0x3fee <__vector_108>
     1b4:	0c 94 28 20 	jmp	0x4050	; 0x4050 <__vector_109>
     1b8:	0c 94 59 20 	jmp	0x40b2	; 0x40b2 <__vector_110>
     1bc:	0c 94 8a 20 	jmp	0x4114	; 0x4114 <__vector_111>
     1c0:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <__vector_112>
     1c4:	0c 94 ec 20 	jmp	0x41d8	; 0x41d8 <__vector_113>
     1c8:	0c 94 41 02 	jmp	0x482	; 0x482 <__bad_interrupt>
     1cc:	0c 94 41 02 	jmp	0x482	; 0x482 <__bad_interrupt>
     1d0:	0c 94 41 02 	jmp	0x482	; 0x482 <__bad_interrupt>
     1d4:	0c 94 41 02 	jmp	0x482	; 0x482 <__bad_interrupt>
     1d8:	0c 94 41 02 	jmp	0x482	; 0x482 <__bad_interrupt>
     1dc:	0c 94 1d 21 	jmp	0x423a	; 0x423a <__vector_119>
     1e0:	0c 94 4e 21 	jmp	0x429c	; 0x429c <__vector_120>
     1e4:	0c 94 7f 21 	jmp	0x42fe	; 0x42fe <__vector_121>
     1e8:	b2 04       	cpc	r11, r2
     1ea:	f1 04       	cpc	r15, r1
     1ec:	f1 04       	cpc	r15, r1
     1ee:	f1 04       	cpc	r15, r1
     1f0:	f1 04       	cpc	r15, r1
     1f2:	e1 04       	cpc	r14, r1
     1f4:	f1 04       	cpc	r15, r1
     1f6:	d9 04       	cpc	r13, r9
     1f8:	f1 04       	cpc	r15, r1
     1fa:	e5 04       	cpc	r14, r5
     1fc:	f1 04       	cpc	r15, r1
     1fe:	dd 04       	cpc	r13, r13
     200:	f1 04       	cpc	r15, r1
     202:	f1 04       	cpc	r15, r1
     204:	f1 04       	cpc	r15, r1
     206:	f1 04       	cpc	r15, r1
     208:	f1 04       	cpc	r15, r1
     20a:	f1 04       	cpc	r15, r1
     20c:	f1 04       	cpc	r15, r1
     20e:	f1 04       	cpc	r15, r1
     210:	f1 04       	cpc	r15, r1
     212:	e5 04       	cpc	r14, r5
     214:	f1 04       	cpc	r15, r1
     216:	b5 04       	cpc	r11, r5
     218:	f1 04       	cpc	r15, r1
     21a:	b9 04       	cpc	r11, r9
     21c:	f1 04       	cpc	r15, r1
     21e:	f1 04       	cpc	r15, r1
     220:	c1 04       	cpc	r12, r1
     222:	d1 04       	cpc	r13, r1
     224:	c5 04       	cpc	r12, r5
     226:	c9 04       	cpc	r12, r9
     228:	cd 04       	cpc	r12, r13
     22a:	bd 04       	cpc	r11, r13
     22c:	d5 04       	cpc	r13, r5
     22e:	ed 04       	cpc	r14, r13
     230:	f1 04       	cpc	r15, r1
     232:	e9 04       	cpc	r14, r9
     234:	d5 06       	cpc	r13, r21
     236:	d9 06       	cpc	r13, r25
     238:	ad 07       	cpc	r26, r29
     23a:	dc 07       	cpc	r29, r28
     23c:	17 08       	sbc	r1, r7
     23e:	4d 08       	sbc	r4, r13
     240:	d9 08       	sbc	r13, r9
     242:	78 08       	sbc	r7, r8
     244:	fc 08       	sbc	r15, r12
     246:	58 09       	sbc	r21, r8
     248:	81 09       	sbc	r24, r1
     24a:	f9 09       	sbc	r31, r9
     24c:	e0 09       	sbc	r30, r0
     24e:	95 09       	sbc	r25, r5
     250:	12 0a       	sbc	r1, r18
     252:	4e 0a       	sbc	r4, r30
     254:	17 0a       	sbc	r1, r23
     256:	2b 24       	eor	r2, r11
     258:	2b 24       	eor	r2, r11
     25a:	33 24       	eor	r3, r3
     25c:	3b 24       	eor	r3, r11
     25e:	46 24       	eor	r4, r6
     260:	9e 24       	eor	r9, r14
     262:	a5 24       	eor	r10, r5
     264:	d1 24       	eor	r13, r1
     266:	d1 24       	eor	r13, r1
     268:	d0 24       	eor	r13, r0
     26a:	d0 24       	eor	r13, r0

0000026c <__trampolines_start>:
     26c:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <_ZN7CTimerF8SetCOMPDEj>
     270:	0c 94 52 23 	jmp	0x46a4	; 0x46a4 <_ZN16CMBEventsHandler13FillVarDataRqEjj>
     274:	0c 94 40 0c 	jmp	0x1880	; 0x1880 <_ZN7CTimerC8SetCOMPAEj>
     278:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x6c>
     27c:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <_ZN7CTimerF5StartEj>
     280:	0c 94 a5 24 	jmp	0x494a	; 0x494a <_ZN9CMBSender13OnReceiveByteEh+0x116>
     284:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <_ZN16CLaserControlApp3RunEv+0x4be>
     288:	0c 94 4f 0c 	jmp	0x189e	; 0x189e <_ZN7CTimerC8SetCOMPDEj>
     28c:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <_GLOBAL__sub_D_timer>
     290:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <_ZN16CLaserControlApp3RunEv+0x6b8>
     294:	0c 94 a1 03 	jmp	0x742	; 0x742 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>
     298:	0c 94 ed 04 	jmp	0x9da	; 0x9da <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xa4>
     29c:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
     2a0:	0c 94 25 0c 	jmp	0x184a	; 0x184a <_ZN7CTimerC4StopEv>
     2a4:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <_ZN16CLaserControlApp3RunEv+0x686>
     2a8:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <_ZN16CLaserControlApp3RunEv+0x78>
     2ac:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <_ZN7CTimerC9SetPeriodEj>
     2b0:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>
     2b4:	0c 94 d4 24 	jmp	0x49a8	; 0x49a8 <_ZN9CMBSender18OnUSARTRxInterruptEPv>
     2b8:	0c 94 cd 04 	jmp	0x99a	; 0x99a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x64>
     2bc:	0c 94 83 0d 	jmp	0x1b06	; 0x1b06 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     2c0:	0c 94 95 09 	jmp	0x132a	; 0x132a <_ZN16CLaserControlApp3RunEv+0x5f0>
     2c4:	0c 94 9c 0c 	jmp	0x1938	; 0x1938 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     2c8:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>
     2cc:	0c 94 9f 23 	jmp	0x473e	; 0x473e <_ZN9CMBSender18OnVariableReceivedEjPjj>
     2d0:	0c 94 c1 04 	jmp	0x982	; 0x982 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x4c>
     2d4:	0c 94 4a 0c 	jmp	0x1894	; 0x1894 <_ZN7CTimerC8SetCOMPCEj>
     2d8:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x84>
     2dc:	0c 94 95 0d 	jmp	0x1b2a	; 0x1b2a <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     2e0:	0c 94 3b 0d 	jmp	0x1a76	; 0x1a76 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     2e4:	0c 94 9b 04 	jmp	0x936	; 0x936 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>
     2e8:	0c 94 c5 04 	jmp	0x98a	; 0x98a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x54>
     2ec:	0c 94 54 0c 	jmp	0x18a8	; 0x18a8 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     2f0:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <_ZN16CLaserControlApp3RunEv+0x70>
     2f4:	0c 94 75 23 	jmp	0x46ea	; 0x46ea <_ZN16CMBEventsHandler15AllocateBuffersEjj>
     2f8:	0c 94 4d 08 	jmp	0x109a	; 0x109a <_ZN16CLaserControlApp3RunEv+0x360>
     2fc:	0c 94 0a 23 	jmp	0x4614	; 0x4614 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>
     300:	0c 94 aa 03 	jmp	0x754	; 0x754 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>
     304:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     308:	0c 94 8a 0c 	jmp	0x1914	; 0x1914 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     30c:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     310:	0c 94 17 08 	jmp	0x102e	; 0x102e <_ZN16CLaserControlApp3RunEv+0x2f4>
     314:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x9c>
     318:	0c 94 3b 24 	jmp	0x4876	; 0x4876 <_ZN9CMBSender13OnReceiveByteEh+0x42>
     31c:	0c 94 c9 04 	jmp	0x992	; 0x992 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x5c>
     320:	0c 94 9e 24 	jmp	0x493c	; 0x493c <_ZN9CMBSender13OnReceiveByteEh+0x108>
     324:	0c 94 bc 03 	jmp	0x778	; 0x778 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>
     328:	0c 94 8a 03 	jmp	0x714	; 0x714 <_ZN10CDGUSUSART14IsTransmittingEv>
     32c:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <_ZN7CTimerF8SetCOMPBEj>
     330:	0c 94 b3 03 	jmp	0x766	; 0x766 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>
     334:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <_ZN7CTimerF8SetCOMPAEj>
     338:	0c 94 78 08 	jmp	0x10f0	; 0x10f0 <_ZN16CLaserControlApp3RunEv+0x3b6>
     33c:	0c 94 ae 23 	jmp	0x475c	; 0x475c <_ZN9CMBSender18OnRegisterReceivedEhPhh>
     340:	0c 94 22 0d 	jmp	0x1a44	; 0x1a44 <_ZN7CTimerF9SetPeriodEj>
     344:	0c 94 bd 04 	jmp	0x97a	; 0x97a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x44>
     348:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x8c>
     34c:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <_ZN7CTimerF8SetCOMPCEj>
     350:	0c 94 9a 04 	jmp	0x934	; 0x934 <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>
     354:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <_ZN16CLaserControlApp3RunEv+0x220>
     358:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <_ZN16CLaserControlApp3RunEv+0x6ea>
     35c:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <_GLOBAL__sub_I_timer>
     360:	0c 94 b0 21 	jmp	0x4360	; 0x4360 <__cxa_pure_virtual>
     364:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <_ZN16CLaserControlApp3RunEv+0x762>
     368:	0c 94 2b 24 	jmp	0x4856	; 0x4856 <_ZN9CMBSender13OnReceiveByteEh+0x22>
     36c:	0c 94 d1 24 	jmp	0x49a2	; 0x49a2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
     370:	0c 94 81 09 	jmp	0x1302	; 0x1302 <_ZN16CLaserControlApp3RunEv+0x5c8>
     374:	0c 94 04 0d 	jmp	0x1a08	; 0x1a08 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
     378:	0c 94 84 03 	jmp	0x708	; 0x708 <_ZN10CDGUSUSART15GetReceivedByteEv>
     37c:	0c 94 fc 0c 	jmp	0x19f8	; 0x19f8 <_ZN7CTimerF4StopEv>
     380:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <_ZN7CTimerC5StartEj>
     384:	0c 94 b2 04 	jmp	0x964	; 0x964 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x2e>
     388:	0c 94 99 03 	jmp	0x732	; 0x732 <_ZN10CDGUSUSART11IsDataEmptyEv>
     38c:	0c 94 90 23 	jmp	0x4720	; 0x4720 <_ZN16CMBEventsHandler11FreeBuffersEv>
     390:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xac>
     394:	0c 94 49 03 	jmp	0x692	; 0x692 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
     398:	0c 94 d4 21 	jmp	0x43a8	; 0x43a8 <_GLOBAL__sub_D_dacSPI>
     39c:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <_ZN16CLaserControlApp3RunEv+0x478>
     3a0:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>
     3a4:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
     3a8:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>
     3ac:	0c 94 b3 21 	jmp	0x4366	; 0x4366 <_GLOBAL__sub_I_dacSPI>
     3b0:	0c 94 66 0c 	jmp	0x18cc	; 0x18cc <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     3b4:	0c 94 b5 04 	jmp	0x96a	; 0x96a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x34>
     3b8:	0c 94 ba 22 	jmp	0x4574	; 0x4574 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>
     3bc:	0c 94 17 0a 	jmp	0x142e	; 0x142e <_ZN16CLaserControlApp3RunEv+0x6f4>
     3c0:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     3c4:	0c 94 39 25 	jmp	0x4a72	; 0x4a72 <_ZN9CMBSender18OnUSARTTxInterruptEPv>
     3c8:	0c 94 eb 22 	jmp	0x45d6	; 0x45d6 <_ZN16CMBEventsHandler13FillRegDataRqEhh>
     3cc:	0c 94 d0 24 	jmp	0x49a0	; 0x49a0 <_ZN9CMBSender13OnReceiveByteEh+0x16c>
     3d0:	0c 94 45 0c 	jmp	0x188a	; 0x188a <_ZN7CTimerC8SetCOMPBEj>
     3d4:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x94>
     3d8:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x7c>
     3dc:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     3e0:	0c 94 92 03 	jmp	0x724	; 0x724 <_ZN10CDGUSUSART11IsReceivingEv>
     3e4:	0c 94 fd 0b 	jmp	0x17fa	; 0x17fa <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     3e8:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <_ZN16CLaserControlApp3RunEv+0x27e>
     3ec:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     3f0:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <_ZN4CSPI16StaticOnTransmitEPv>
     3f4:	0c 94 33 24 	jmp	0x4866	; 0x4866 <_ZN9CMBSender13OnReceiveByteEh+0x32>
     3f8:	0c 94 87 03 	jmp	0x70e	; 0x70e <_ZN10CDGUSUSART19SetTransmittingByteEh>
     3fc:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <_ZN16CLaserControlApp3RunEv+0x576>
     400:	0c 94 b9 04 	jmp	0x972	; 0x972 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x3c>
     404:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     408:	0c 94 de 25 	jmp	0x4bbc	; 0x4bbc <_ZN9CMBSender21OnTransactionCallbackEPhj>
     40c:	0c 94 46 24 	jmp	0x488c	; 0x488c <_ZN9CMBSender13OnReceiveByteEh+0x58>
     410:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <_ZN16CLaserControlApp13OnTimerStaticEPv>
     414:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>

00000418 <__ctors_start>:
     418:	5e 06       	cpc	r5, r30
     41a:	b3 21       	and	r27, r3

0000041c <__ctors_end>:
     41c:	63 06       	cpc	r6, r19
     41e:	d4 21       	and	r29, r4

00000420 <__dtors_end>:
     420:	11 24       	eor	r1, r1
     422:	1f be       	out	0x3f, r1	; 63
     424:	cf ef       	ldi	r28, 0xFF	; 255
     426:	cd bf       	out	0x3d, r28	; 61
     428:	df e3       	ldi	r29, 0x3F	; 63
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	00 e0       	ldi	r16, 0x00	; 0
     42e:	0c bf       	out	0x3c, r16	; 60

00000430 <__do_copy_data>:
     430:	11 e2       	ldi	r17, 0x21	; 33
     432:	a0 e0       	ldi	r26, 0x00	; 0
     434:	b0 e2       	ldi	r27, 0x20	; 32
     436:	ec e3       	ldi	r30, 0x3C	; 60
     438:	ff e4       	ldi	r31, 0x4F	; 79
     43a:	00 e0       	ldi	r16, 0x00	; 0
     43c:	0b bf       	out	0x3b, r16	; 59
     43e:	02 c0       	rjmp	.+4      	; 0x444 <__do_copy_data+0x14>
     440:	07 90       	elpm	r0, Z+
     442:	0d 92       	st	X+, r0
     444:	a8 32       	cpi	r26, 0x28	; 40
     446:	b1 07       	cpc	r27, r17
     448:	d9 f7       	brne	.-10     	; 0x440 <__do_copy_data+0x10>

0000044a <__do_clear_bss>:
     44a:	23 e2       	ldi	r18, 0x23	; 35
     44c:	a8 e2       	ldi	r26, 0x28	; 40
     44e:	b1 e2       	ldi	r27, 0x21	; 33
     450:	01 c0       	rjmp	.+2      	; 0x454 <.do_clear_bss_start>

00000452 <.do_clear_bss_loop>:
     452:	1d 92       	st	X+, r1

00000454 <.do_clear_bss_start>:
     454:	ad 3b       	cpi	r26, 0xBD	; 189
     456:	b2 07       	cpc	r27, r18
     458:	e1 f7       	brne	.-8      	; 0x452 <.do_clear_bss_loop>

0000045a <__do_global_ctors>:
     45a:	12 e0       	ldi	r17, 0x02	; 2
     45c:	ce e0       	ldi	r28, 0x0E	; 14
     45e:	d2 e0       	ldi	r29, 0x02	; 2
     460:	00 e0       	ldi	r16, 0x00	; 0
     462:	06 c0       	rjmp	.+12     	; 0x470 <__do_global_ctors+0x16>
     464:	21 97       	sbiw	r28, 0x01	; 1
     466:	01 09       	sbc	r16, r1
     468:	80 2f       	mov	r24, r16
     46a:	fe 01       	movw	r30, r28
     46c:	0e 94 14 26 	call	0x4c28	; 0x4c28 <__tablejump2__>
     470:	cc 30       	cpi	r28, 0x0C	; 12
     472:	d1 07       	cpc	r29, r17
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	08 07       	cpc	r16, r24
     478:	a9 f7       	brne	.-22     	; 0x464 <__do_global_ctors+0xa>
     47a:	0e 94 4e 22 	call	0x449c	; 0x449c <main>
     47e:	0c 94 8c 27 	jmp	0x4f18	; 0x4f18 <__do_global_dtors>

00000482 <__bad_interrupt>:
     482:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000486 <_ZN13CDGUSDatabaseC1Ev>:
#define F_CPU 32000000

#include "util/delay.h"

// default constructor
CDGUSDatabase::CDGUSDatabase()
     486:	08 95       	ret

00000488 <_ZN13CDGUSDatabaseD1Ev>:
{
} //CDGUSDatabase

// default destructor
CDGUSDatabase::~CDGUSDatabase()
     488:	08 95       	ret

0000048a <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>:
{
} //~CDGUSDatabase

void CDGUSDatabase::Initialize(CMBSender* sender, uint16_t vp)
{
     48a:	fc 01       	movw	r30, r24
	// GUI class initialization
	m_cpSender = sender;
     48c:	62 83       	std	Z+2, r22	; 0x02
     48e:	73 83       	std	Z+3, r23	; 0x03
	vp_addr = (vp >> 8) | (vp << 8);
     490:	94 2f       	mov	r25, r20
     492:	85 2f       	mov	r24, r21
     494:	84 83       	std	Z+4, r24	; 0x04
     496:	95 83       	std	Z+5, r25	; 0x05
	vp_addres = vp;
     498:	46 83       	std	Z+6, r20	; 0x06
     49a:	57 83       	std	Z+7, r21	; 0x07
	data_transaction = 0;
     49c:	10 82       	st	Z, r1
     49e:	11 82       	std	Z+1, r1	; 0x01
     4a0:	08 95       	ret

000004a2 <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>:
	m_cpSender->WaitMODBUSListener();
	data_transaction = (uint16_t*)data;
}

void CDGUSDatabase::MapDatabaseToWrite(uint16_t vp, uint32_t addr, uint16_t length)
{
     4a2:	8f 92       	push	r8
     4a4:	9f 92       	push	r9
     4a6:	af 92       	push	r10
     4a8:	bf 92       	push	r11
     4aa:	ef 92       	push	r14
     4ac:	ff 92       	push	r15
     4ae:	0f 93       	push	r16
     4b0:	1f 93       	push	r17
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	cd b7       	in	r28, 0x3d	; 61
     4b8:	de b7       	in	r29, 0x3e	; 62
     4ba:	2a 97       	sbiw	r28, 0x0a	; 10
     4bc:	cd bf       	out	0x3d, r28	; 61
     4be:	de bf       	out	0x3e, r29	; 62
     4c0:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     4c2:	8a e5       	ldi	r24, 0x5A	; 90
     4c4:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0x50;
     4c6:	80 e5       	ldi	r24, 0x50	; 80
     4c8:	8a 83       	std	Y+2, r24	; 0x02
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     4ca:	85 2e       	mov	r8, r21
     4cc:	99 24       	eor	r9, r9
     4ce:	aa 24       	eor	r10, r10
     4d0:	bb 24       	eor	r11, r11
     4d2:	b2 2f       	mov	r27, r18
     4d4:	aa 27       	eor	r26, r26
     4d6:	99 27       	eor	r25, r25
     4d8:	88 27       	eor	r24, r24
     4da:	88 29       	or	r24, r8
     4dc:	99 29       	or	r25, r9
     4de:	aa 29       	or	r26, r10
     4e0:	bb 29       	or	r27, r11
     4e2:	49 01       	movw	r8, r18
     4e4:	5a 01       	movw	r10, r20
     4e6:	88 24       	eor	r8, r8
     4e8:	aa 24       	eor	r10, r10
     4ea:	bb 24       	eor	r11, r11
     4ec:	ba 2c       	mov	r11, r10
     4ee:	a9 2c       	mov	r10, r9
     4f0:	98 2c       	mov	r9, r8
     4f2:	88 24       	eor	r8, r8
     4f4:	88 29       	or	r24, r8
     4f6:	99 29       	or	r25, r9
     4f8:	aa 29       	or	r26, r10
     4fa:	bb 29       	or	r27, r11
     4fc:	49 01       	movw	r8, r18
     4fe:	5a 01       	movw	r10, r20
     500:	88 24       	eor	r8, r8
     502:	99 24       	eor	r9, r9
     504:	bb 24       	eor	r11, r11
     506:	89 2c       	mov	r8, r9
     508:	9a 2c       	mov	r9, r10
     50a:	ab 2c       	mov	r10, r11
     50c:	bb 24       	eor	r11, r11
     50e:	88 29       	or	r24, r8
     510:	99 29       	or	r25, r9
     512:	aa 29       	or	r26, r10
     514:	bb 29       	or	r27, r11
     516:	8b 83       	std	Y+3, r24	; 0x03
     518:	9c 83       	std	Y+4, r25	; 0x04
     51a:	ad 83       	std	Y+5, r26	; 0x05
     51c:	be 83       	std	Y+6, r27	; 0x06
	//FLASH.addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) | ((addr & 0xff0000) << 8) | ((addr & 0xff000000) >> 8);
	//FLASH.addr = addr;
	FLASH.vp = (vp >> 8) | (vp << 8);
     51e:	76 27       	eor	r23, r22
     520:	67 27       	eor	r22, r23
     522:	76 27       	eor	r23, r22
     524:	6f 83       	std	Y+7, r22	; 0x07
     526:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     528:	10 27       	eor	r17, r16
     52a:	01 27       	eor	r16, r17
     52c:	10 27       	eor	r17, r16
     52e:	09 87       	std	Y+9, r16	; 0x09
     530:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     532:	2a e0       	ldi	r18, 0x0A	; 10
     534:	ae 01       	movw	r20, r28
     536:	4f 5f       	subi	r20, 0xFF	; 255
     538:	5f 4f       	sbci	r21, 0xFF	; 255
     53a:	66 e5       	ldi	r22, 0x56	; 86
     53c:	f7 01       	movw	r30, r14
     53e:	82 81       	ldd	r24, Z+2	; 0x02
     540:	93 81       	ldd	r25, Z+3	; 0x03
     542:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     546:	f7 01       	movw	r30, r14
     548:	82 81       	ldd	r24, Z+2	; 0x02
     54a:	93 81       	ldd	r25, Z+3	; 0x03
     54c:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     550:	2a 96       	adiw	r28, 0x0a	; 10
     552:	cd bf       	out	0x3d, r28	; 61
     554:	de bf       	out	0x3e, r29	; 62
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	ff 90       	pop	r15
     560:	ef 90       	pop	r14
     562:	bf 90       	pop	r11
     564:	af 90       	pop	r10
     566:	9f 90       	pop	r9
     568:	8f 90       	pop	r8
     56a:	08 95       	ret

0000056c <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>:

void CDGUSDatabase::MapDatabaseToRead(uint16_t vp, uint32_t addr, uint16_t length)
{
     56c:	8f 92       	push	r8
     56e:	9f 92       	push	r9
     570:	af 92       	push	r10
     572:	bf 92       	push	r11
     574:	ef 92       	push	r14
     576:	ff 92       	push	r15
     578:	0f 93       	push	r16
     57a:	1f 93       	push	r17
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	cd b7       	in	r28, 0x3d	; 61
     582:	de b7       	in	r29, 0x3e	; 62
     584:	2a 97       	sbiw	r28, 0x0a	; 10
     586:	cd bf       	out	0x3d, r28	; 61
     588:	de bf       	out	0x3e, r29	; 62
     58a:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     58c:	8a e5       	ldi	r24, 0x5A	; 90
     58e:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0xA0;
     590:	80 ea       	ldi	r24, 0xA0	; 160
     592:	8a 83       	std	Y+2, r24	; 0x02
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     594:	85 2e       	mov	r8, r21
     596:	99 24       	eor	r9, r9
     598:	aa 24       	eor	r10, r10
     59a:	bb 24       	eor	r11, r11
     59c:	b2 2f       	mov	r27, r18
     59e:	aa 27       	eor	r26, r26
     5a0:	99 27       	eor	r25, r25
     5a2:	88 27       	eor	r24, r24
     5a4:	88 29       	or	r24, r8
     5a6:	99 29       	or	r25, r9
     5a8:	aa 29       	or	r26, r10
     5aa:	bb 29       	or	r27, r11
     5ac:	49 01       	movw	r8, r18
     5ae:	5a 01       	movw	r10, r20
     5b0:	88 24       	eor	r8, r8
     5b2:	aa 24       	eor	r10, r10
     5b4:	bb 24       	eor	r11, r11
     5b6:	ba 2c       	mov	r11, r10
     5b8:	a9 2c       	mov	r10, r9
     5ba:	98 2c       	mov	r9, r8
     5bc:	88 24       	eor	r8, r8
     5be:	88 29       	or	r24, r8
     5c0:	99 29       	or	r25, r9
     5c2:	aa 29       	or	r26, r10
     5c4:	bb 29       	or	r27, r11
     5c6:	49 01       	movw	r8, r18
     5c8:	5a 01       	movw	r10, r20
     5ca:	88 24       	eor	r8, r8
     5cc:	99 24       	eor	r9, r9
     5ce:	bb 24       	eor	r11, r11
     5d0:	89 2c       	mov	r8, r9
     5d2:	9a 2c       	mov	r9, r10
     5d4:	ab 2c       	mov	r10, r11
     5d6:	bb 24       	eor	r11, r11
     5d8:	88 29       	or	r24, r8
     5da:	99 29       	or	r25, r9
     5dc:	aa 29       	or	r26, r10
     5de:	bb 29       	or	r27, r11
     5e0:	8b 83       	std	Y+3, r24	; 0x03
     5e2:	9c 83       	std	Y+4, r25	; 0x04
     5e4:	ad 83       	std	Y+5, r26	; 0x05
     5e6:	be 83       	std	Y+6, r27	; 0x06
	//FLASH.addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) | ((addr & 0xff0000) << 8) | ((addr & 0xff000000) >> 8);
	//FLASH.addr = addr;
	FLASH.vp = (vp >> 8) | (vp << 8);
     5e8:	76 27       	eor	r23, r22
     5ea:	67 27       	eor	r22, r23
     5ec:	76 27       	eor	r23, r22
     5ee:	6f 83       	std	Y+7, r22	; 0x07
     5f0:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     5f2:	10 27       	eor	r17, r16
     5f4:	01 27       	eor	r16, r17
     5f6:	10 27       	eor	r17, r16
     5f8:	09 87       	std	Y+9, r16	; 0x09
     5fa:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     5fc:	2a e0       	ldi	r18, 0x0A	; 10
     5fe:	ae 01       	movw	r20, r28
     600:	4f 5f       	subi	r20, 0xFF	; 255
     602:	5f 4f       	sbci	r21, 0xFF	; 255
     604:	66 e5       	ldi	r22, 0x56	; 86
     606:	f7 01       	movw	r30, r14
     608:	82 81       	ldd	r24, Z+2	; 0x02
     60a:	93 81       	ldd	r25, Z+3	; 0x03
     60c:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     610:	f7 01       	movw	r30, r14
     612:	82 81       	ldd	r24, Z+2	; 0x02
     614:	93 81       	ldd	r25, Z+3	; 0x03
     616:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     61a:	2a 96       	adiw	r28, 0x0a	; 10
     61c:	cd bf       	out	0x3d, r28	; 61
     61e:	de bf       	out	0x3e, r29	; 62
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	1f 91       	pop	r17
     626:	0f 91       	pop	r16
     628:	ff 90       	pop	r15
     62a:	ef 90       	pop	r14
     62c:	bf 90       	pop	r11
     62e:	af 90       	pop	r10
     630:	9f 90       	pop	r9
     632:	8f 90       	pop	r8
     634:	08 95       	ret

00000636 <_ZN13CDGUSDatabase5UnMapEv>:

void CDGUSDatabase::UnMap()
{
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	1f 92       	push	r1
     640:	cd b7       	in	r28, 0x3d	; 61
     642:	de b7       	in	r29, 0x3e	; 62
     644:	8c 01       	movw	r16, r24
	uint8_t en = 0x00;
     646:	19 82       	std	Y+1, r1	; 0x01
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&en, sizeof(en));
     648:	21 e0       	ldi	r18, 0x01	; 1
     64a:	ae 01       	movw	r20, r28
     64c:	4f 5f       	subi	r20, 0xFF	; 255
     64e:	5f 4f       	sbci	r21, 0xFF	; 255
     650:	66 e5       	ldi	r22, 0x56	; 86
     652:	fc 01       	movw	r30, r24
     654:	82 81       	ldd	r24, Z+2	; 0x02
     656:	93 81       	ldd	r25, Z+3	; 0x03
     658:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     65c:	f8 01       	movw	r30, r16
     65e:	82 81       	ldd	r24, Z+2	; 0x02
     660:	93 81       	ldd	r25, Z+3	; 0x03
     662:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     666:	0f 90       	pop	r0
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
     670:	08 95       	ret

00000672 <_ZN13CDGUSDatabase18OnVariableReceivedEjPjj>:
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&en, sizeof(en));
	m_cpSender->WaitMODBUSTransmitter();
}

void CDGUSDatabase::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	ec 01       	movw	r28, r24
     678:	ba 01       	movw	r22, r20
	if (data_transaction != 0)
     67a:	88 81       	ld	r24, Y
     67c:	99 81       	ldd	r25, Y+1	; 0x01
     67e:	00 97       	sbiw	r24, 0x00	; 0
     680:	19 f0       	breq	.+6      	; 0x688 <_ZN13CDGUSDatabase18OnVariableReceivedEjPjj+0x16>
		memcpy(data_transaction, data, length);
     682:	a9 01       	movw	r20, r18
     684:	0e 94 7a 27 	call	0x4ef4	; 0x4ef4 <memcpy>
	data_transaction = 0;
     688:	18 82       	st	Y, r1
     68a:	19 82       	std	Y+1, r1	; 0x01
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
     692:	0f 93       	push	r16
	PORTD.DIRSET = PIN3_bm; // Set TX to output
     694:	e0 e6       	ldi	r30, 0x60	; 96
     696:	f6 e0       	ldi	r31, 0x06	; 6
     698:	88 e0       	ldi	r24, 0x08	; 8
     69a:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; // Set RX to input
     69c:	84 e0       	ldi	r24, 0x04	; 4
     69e:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN2CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
     6a0:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
     6a2:	13 8a       	std	Z+19, r1	; 0x13
	
	// Turn on interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_LO_gc/* | USART_DREINTLVL_LO_gc*/;
     6a4:	e0 ea       	ldi	r30, 0xA0	; 160
     6a6:	f9 e0       	ldi	r31, 0x09	; 9
     6a8:	84 e1       	ldi	r24, 0x14	; 20
     6aa:	83 83       	std	Z+3, r24	; 0x03
	
	// Enable RX, TX
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     6ac:	88 e1       	ldi	r24, 0x18	; 24
     6ae:	84 83       	std	Z+4, r24	; 0x04
	
	// Double transmission speed
#ifdef U2X
	USARTD0.CTRLB |=  (1 << USART_CLK2X_bm);
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
     6b0:	84 81       	ldd	r24, Z+4	; 0x04
     6b2:	84 83       	std	Z+4, r24	; 0x04
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
     6b4:	41 30       	cpi	r20, 0x01	; 1
     6b6:	19 f0       	breq	.+6      	; 0x6be <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x2c>
     6b8:	42 30       	cpi	r20, 0x02	; 2
     6ba:	19 f0       	breq	.+6      	; 0x6c2 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x30>
     6bc:	04 c0       	rjmp	.+8      	; 0x6c6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
	{
		case PARITY_DISABLE:
			temp |= USART_PMODE_DISABLED_gc;
		break;
		case PARITY_EVEN:
			temp |= USART_PMODE_EVEN_gc;
     6be:	80 e2       	ldi	r24, 0x20	; 32
     6c0:	03 c0       	rjmp	.+6      	; 0x6c8 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
		break;
		case PARITY_ODD:
			temp |= USART_PMODE_ODD_gc;
     6c2:	80 e3       	ldi	r24, 0x30	; 48
		break;
     6c4:	01 c0       	rjmp	.+2      	; 0x6c8 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
#endif

	// Parity param set
	uint8_t temp = 0;
     6c6:	80 e0       	ldi	r24, 0x00	; 0
			temp |= USART_PMODE_ODD_gc;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
     6c8:	22 23       	and	r18, r18
     6ca:	19 f0       	breq	.+6      	; 0x6d2 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x40>
     6cc:	21 30       	cpi	r18, 0x01	; 1
     6ce:	19 f0       	breq	.+6      	; 0x6d6 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x44>
     6d0:	03 c0       	rjmp	.+6      	; 0x6d8 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
	{
		case STOPBITS_1BIT:
			temp &= ~USART_SBMODE_bm;
     6d2:	87 7f       	andi	r24, 0xF7	; 247
		break;
     6d4:	01 c0       	rjmp	.+2      	; 0x6d8 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
		case STOPBITS_2BIT:
			temp |=  USART_SBMODE_bm;
     6d6:	88 60       	ori	r24, 0x08	; 8
		break;
	}
	
	// USART mode asynchronous, 8bit
	USARTD0.CTRLC = (Async?USART_CMODE_ASYNCHRONOUS_gc:USART_CMODE_SYNCHRONOUS_gc) | USART_CHSIZE_8BIT_gc | temp;
     6d8:	01 11       	cpse	r16, r1
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x4e>
     6dc:	93 e4       	ldi	r25, 0x43	; 67
     6de:	01 c0       	rjmp	.+2      	; 0x6e2 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x50>
     6e0:	93 e0       	ldi	r25, 0x03	; 3
     6e2:	89 2b       	or	r24, r25
     6e4:	e0 ea       	ldi	r30, 0xA0	; 160
     6e6:	f9 e0       	ldi	r31, 0x09	; 9
     6e8:	85 83       	std	Z+5, r24	; 0x05
	
	// Set baud rate
	USARTD0.BAUDCTRLA = bsel_table[baud];
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	db 01       	movw	r26, r22
     6ee:	aa 5d       	subi	r26, 0xDA	; 218
     6f0:	bf 4d       	sbci	r27, 0xDF	; 223
     6f2:	8c 91       	ld	r24, X
     6f4:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (((int8_t)(16 + bscale_table[baud])) << USART_BSCALE0_bp) | ((bsel_table[baud] >> 8) & 0x0F);	
     6f6:	db 01       	movw	r26, r22
     6f8:	aa 5f       	subi	r26, 0xFA	; 250
     6fa:	bf 4d       	sbci	r27, 0xDF	; 223
     6fc:	8c 91       	ld	r24, X
     6fe:	82 95       	swap	r24
     700:	80 7f       	andi	r24, 0xF0	; 240
     702:	87 83       	std	Z+7, r24	; 0x07
} //CUSART
     704:	0f 91       	pop	r16
     706:	08 95       	ret

00000708 <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return USARTD0.DATA;
     708:	80 91 a0 09 	lds	r24, 0x09A0
}
     70c:	08 95       	ret

0000070e <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( ( USARTD0.STATUS & (1<<USART_DREIF_bm)) );
	USARTD0.DATA = data;
     70e:	60 93 a0 09 	sts	0x09A0, r22
     712:	08 95       	ret

00000714 <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return !( USARTD0.STATUS & USART_TXCIF_bm);
     714:	80 91 a1 09 	lds	r24, 0x09A1
     718:	86 fb       	bst	r24, 6
     71a:	88 27       	eor	r24, r24
     71c:	80 f9       	bld	r24, 0
}
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	89 27       	eor	r24, r25
     722:	08 95       	ret

00000724 <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return !( USARTD0.STATUS & USART_RXCIF_bm);
     724:	80 91 a1 09 	lds	r24, 0x09A1
     728:	80 95       	com	r24
}
     72a:	88 1f       	adc	r24, r24
     72c:	88 27       	eor	r24, r24
     72e:	88 1f       	adc	r24, r24
     730:	08 95       	ret

00000732 <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return !( USARTD0.STATUS & USART_DREIF_bm);
     732:	80 91 a1 09 	lds	r24, 0x09A1
     736:	85 fb       	bst	r24, 5
     738:	88 27       	eor	r24, r24
     73a:	80 f9       	bld	r24, 0
}
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	89 27       	eor	r24, r25
     740:	08 95       	ret

00000742 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_RXC_vect_num] = sender;
     742:	60 93 d3 22 	sts	0x22D3, r22
     746:	70 93 d4 22 	sts	0x22D4, r23
	InterruptFuncTable[USARTD0_RXC_vect_num] = callback;
     74a:	40 93 dd 21 	sts	0x21DD, r20
     74e:	50 93 de 21 	sts	0x21DE, r21
     752:	08 95       	ret

00000754 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_TXC_vect_num] = sender;
     754:	60 93 d7 22 	sts	0x22D7, r22
     758:	70 93 d8 22 	sts	0x22D8, r23
	InterruptFuncTable[USARTD0_TXC_vect_num] = callback;
     75c:	40 93 e1 21 	sts	0x21E1, r20
     760:	50 93 e2 21 	sts	0x21E2, r21
     764:	08 95       	ret

00000766 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMARxTrig(DMA_CH_t *dma_channel)
{
     766:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_RXC_gc;
     768:	8b e6       	ldi	r24, 0x6B	; 107
     76a:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->SRCADDR0 = (int)&USARTD0.DATA;
     76c:	80 ea       	ldi	r24, 0xA0	; 160
     76e:	80 87       	std	Z+8, r24	; 0x08
	dma_channel->SRCADDR1 = (int)&USARTD0.DATA >> 8;
     770:	89 e0       	ldi	r24, 0x09	; 9
     772:	81 87       	std	Z+9, r24	; 0x09
	dma_channel->SRCADDR2 = 0;
     774:	12 86       	std	Z+10, r1	; 0x0a
     776:	08 95       	ret

00000778 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMATxTrig(DMA_CH_t *dma_channel)
{
     778:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_DRE_gc;
     77a:	8c e6       	ldi	r24, 0x6C	; 108
     77c:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->DESTADDR0 = (int)&USARTD0.DATA;
     77e:	80 ea       	ldi	r24, 0xA0	; 160
     780:	84 87       	std	Z+12, r24	; 0x0c
	dma_channel->DESTADDR1 = (int)&USARTD0.DATA >> 8;
     782:	89 e0       	ldi	r24, 0x09	; 9
     784:	85 87       	std	Z+13, r24	; 0x0d
	dma_channel->DESTADDR2 = 0;
     786:	16 86       	std	Z+14, r1	; 0x0e
     788:	08 95       	ret

0000078a <_ZN10CDGUSUSARTC1Ev>:
								true, true, true, true, true, true, true, true, true, true,
								true, true};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	ec 01       	movw	r28, r24
     790:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <_ZN6CUSARTC1Ev>
     794:	8b e5       	ldi	r24, 0x5B	; 91
     796:	90 e2       	ldi	r25, 0x20	; 32
     798:	88 83       	st	Y, r24
     79a:	99 83       	std	Y+1, r25	; 0x01
{
} //CDGUSUSART
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	08 95       	ret

000007a2 <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
     7a2:	2b e5       	ldi	r18, 0x5B	; 91
     7a4:	30 e2       	ldi	r19, 0x20	; 32
     7a6:	fc 01       	movw	r30, r24
     7a8:	20 83       	st	Z, r18
     7aa:	31 83       	std	Z+1, r19	; 0x01
     7ac:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_ZN6CUSARTD1Ev>
     7b0:	08 95       	ret

000007b2 <_ZN11CLaserBoardC1Ev>:
#include <avr/interrupt.h>
#include <avr/io.h>
#include <util/delay.h>

// default constructor
CLaserBoard::CLaserBoard()
     7b2:	08 95       	ret

000007b4 <_ZN11CLaserBoardD1Ev>:
{
} //CLaserBoard

// default destructor
CLaserBoard::~CLaserBoard()
     7b4:	08 95       	ret

000007b6 <_ZN11CLaserBoard12InitializeIOEv>:
} //~CLaserBoard

void CLaserBoard::InitializeIO()
{
	// Set all output
	PORTC.DIRSET = 0xFF;
     7b6:	e0 e4       	ldi	r30, 0x40	; 64
     7b8:	f6 e0       	ldi	r31, 0x06	; 6
     7ba:	9f ef       	ldi	r25, 0xFF	; 255
     7bc:	91 83       	std	Z+1, r25	; 0x01
	
	// Configure all pins to "wired and"
	PORTC.PIN0CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     7be:	88 ea       	ldi	r24, 0xA8	; 168
     7c0:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     7c2:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.PIN2CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     7c4:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     7c6:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     7c8:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     7ca:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     7cc:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     7ce:	87 8b       	std	Z+23, r24	; 0x17
	
	// Set all down
	PORTC.OUT = 0x00;
     7d0:	14 82       	std	Z+4, r1	; 0x04
	
	// Buzzer pin initialize
	PORTE.DIRSET = PIN3_bm;
     7d2:	e0 e8       	ldi	r30, 0x80	; 128
     7d4:	f6 e0       	ldi	r31, 0x06	; 6
     7d6:	88 e0       	ldi	r24, 0x08	; 8
     7d8:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRSET = PIN2_bm; // PWM pin
     7da:	84 e0       	ldi	r24, 0x04	; 4
     7dc:	81 83       	std	Z+1, r24	; 0x01
	
	// Configure
	PORTE.PIN3CTRL = PORT_OPC_TOTEM_gc;
     7de:	13 8a       	std	Z+19, r1	; 0x13
	PORTE.PIN2CTRL = PORT_OPC_TOTEM_gc; // PWN inverted
     7e0:	12 8a       	std	Z+18, r1	; 0x12
	PORTE.OUT = 0;
     7e2:	14 82       	std	Z+4, r1	; 0x04
	
	// Configure all pins of PWM to inverted
	PORTF.PIN0CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     7e4:	e0 ea       	ldi	r30, 0xA0	; 160
     7e6:	f6 e0       	ldi	r31, 0x06	; 6
     7e8:	80 ec       	ldi	r24, 0xC0	; 192
     7ea:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     7ec:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = /*PORT_INVEN_bm |*/ PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     7ee:	20 e8       	ldi	r18, 0x80	; 128
     7f0:	22 8b       	std	Z+18, r18	; 0x12
	PORTF.PIN3CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     7f2:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     7f4:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     7f6:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     7f8:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     7fa:	87 8b       	std	Z+23, r24	; 0x17

	// Set all down
	PORTF.OUT = 0x00;
     7fc:	14 82       	std	Z+4, r1	; 0x04

	// Set all output
	PORTF.DIRSET = 0xFF;
     7fe:	91 83       	std	Z+1, r25	; 0x01
	
	// Set PD0 and PD4
	PORTD.DIRSET = PIN0_bm | PIN4_bm;
     800:	e0 e6       	ldi	r30, 0x60	; 96
     802:	f6 e0       	ldi	r31, 0x06	; 6
     804:	91 e1       	ldi	r25, 0x11	; 17
     806:	91 83       	std	Z+1, r25	; 0x01
	
	// Configure all pins to "wired and"
	PORTD.PIN0CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     808:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN4CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     80a:	84 8b       	std	Z+20, r24	; 0x14
	
	PORTD.OUT = 0;//PIN0_bm;
     80c:	14 82       	std	Z+4, r1	; 0x04
	
	// Enable low level interrupts
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
     80e:	e0 ea       	ldi	r30, 0xA0	; 160
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	82 81       	ldd	r24, Z+2	; 0x02
     814:	81 60       	ori	r24, 0x01	; 1
     816:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
     818:	82 81       	ldd	r24, Z+2	; 0x02
     81a:	82 60       	ori	r24, 0x02	; 2
     81c:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_HILVLEN_bm;
     81e:	82 81       	ldd	r24, Z+2	; 0x02
     820:	84 60       	ori	r24, 0x04	; 4
     822:	82 83       	std	Z+2, r24	; 0x02
     824:	08 95       	ret

00000826 <_ZN11CLaserBoard15InitializeClockEv>:

void CLaserBoard::InitializeClock()
{
	//-----------------------
	// External 16000.000 kHz oscillator initialization
	OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
     826:	e0 e5       	ldi	r30, 0x50	; 80
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	8b ec       	ldi	r24, 0xCB	; 203
     82c:	82 83       	std	Z+2, r24	; 0x02
	// Enable the external oscillator
	OSC.CTRL |= OSC_XOSCEN_bm;
     82e:	80 81       	ld	r24, Z
     830:	88 60       	ori	r24, 0x08	; 8
     832:	80 83       	st	Z, r24
	// Wait for the external oscillator to stabilize
	while ((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
     834:	81 81       	ldd	r24, Z+1	; 0x01
     836:	83 ff       	sbrs	r24, 3
     838:	fd cf       	rjmp	.-6      	; 0x834 <_ZN11CLaserBoard15InitializeClockEv+0xe>
	// PLL initialization
	// PLL clock source: External Osc. or Clock
	// PLL multiplication factor: 2
	// PLL frequency: 32.000000 MHz
	// Set the PLL clock source and multiplication factor
	unsigned char n = (OSC.PLLCTRL & (~(OSC_PLLSRC_gm | OSC_PLLFAC_gm))) |    OSC_PLLSRC_XOSC_gc | OSC_PLLFAC2_bm;
     83a:	e0 e5       	ldi	r30, 0x50	; 80
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	85 81       	ldd	r24, Z+5	; 0x05
	CCP = CCP_IOREG_gc;
     840:	98 ed       	ldi	r25, 0xD8	; 216
     842:	94 bf       	out	0x34, r25	; 52
	OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | OSC_PLLFAC2_bm;//n;
     844:	84 ec       	ldi	r24, 0xC4	; 196
     846:	85 83       	std	Z+5, r24	; 0x05
	// Enable the PLL
	OSC.CTRL |= OSC_PLLEN_bm;
     848:	80 81       	ld	r24, Z
     84a:	80 61       	ori	r24, 0x10	; 16
     84c:	80 83       	st	Z, r24
	// ClkPer4: 32000.000 kHz
	// ClkPer2: 32000.000 kHz
	// ClkPer:  32000.000 kHz
	// ClkCPU:  32000.000 kHz
	n = (CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
     84e:	e0 e4       	ldi	r30, 0x40	; 64
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	81 81       	ldd	r24, Z+1	; 0x01
	CCP = CCP_IOREG_gc;
     854:	94 bf       	out	0x34, r25	; 52
	CLK.PSCTRL = CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;//n;
     856:	11 82       	std	Z+1, r1	; 0x01
	// Wait for the PLL to stabilize
	while ((OSC.STATUS & OSC_PLLRDY_bm)==0);
     858:	e0 e5       	ldi	r30, 0x50	; 80
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	81 81       	ldd	r24, Z+1	; 0x01
     85e:	84 ff       	sbrs	r24, 4
     860:	fd cf       	rjmp	.-6      	; 0x85c <_ZN11CLaserBoard15InitializeClockEv+0x36>
	// Select the system clock source: Phase Locked Loop
	n = (CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_PLL_gc;
     862:	e0 e4       	ldi	r30, 0x40	; 64
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	80 81       	ld	r24, Z
     868:	88 7f       	andi	r24, 0xF8	; 248
     86a:	84 60       	ori	r24, 0x04	; 4
	CCP = CCP_IOREG_gc;
     86c:	98 ed       	ldi	r25, 0xD8	; 216
     86e:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = n;
     870:	80 83       	st	Z, r24
	// Disable the unused oscillators: 2 MHz, 32 MHz, internal 32 kHz
	OSC.CTRL &= ~(OSC_RC2MEN_bm | OSC_RC32MEN_bm | OSC_RC32KEN_bm);
     872:	a0 e5       	ldi	r26, 0x50	; 80
     874:	b0 e0       	ldi	r27, 0x00	; 0
     876:	8c 91       	ld	r24, X
     878:	88 7f       	andi	r24, 0xF8	; 248
     87a:	8c 93       	st	X, r24
	// Lock the CLK.CTRL and CLK.PSCTRL registers
	n = CLK.LOCK | CLK_LOCK_bm;
     87c:	82 81       	ldd	r24, Z+2	; 0x02
	CCP = CCP_IOREG_gc;
     87e:	94 bf       	out	0x34, r25	; 52
	CLK.LOCK = CLK_LOCK_bm;//n;
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	82 83       	std	Z+2, r24	; 0x02
	// Peripheral Clock output: Disabled
	PORTCFG.CLKEVOUT = (PORTCFG.CLKEVOUT & (~PORTCFG_CLKOUT_gm)) | PORTCFG_CLKOUT_OFF_gc;
     884:	e0 eb       	ldi	r30, 0xB0	; 176
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	84 81       	ldd	r24, Z+4	; 0x04
     88a:	8c 7f       	andi	r24, 0xFC	; 252
     88c:	84 83       	std	Z+4, r24	; 0x04
     88e:	08 95       	ret

00000890 <_ZN11CLaserBoard8Relay1OnEv>:
	//-----------------------
}

void CLaserBoard::Relay1On()
{
	PORTD.DIRCLR = PIN0_bm;
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	80 93 62 06 	sts	0x0662, r24
     896:	08 95       	ret

00000898 <_ZN11CLaserBoard8Relay2OnEv>:
}

void CLaserBoard::Relay2On()
{
	PORTD.DIRCLR = PIN4_bm;
     898:	80 e1       	ldi	r24, 0x10	; 16
     89a:	80 93 62 06 	sts	0x0662, r24
     89e:	08 95       	ret

000008a0 <_ZN11CLaserBoard9Relay1OffEv>:
}

void CLaserBoard::Relay1Off()
{
	PORTD.DIRSET = PIN0_bm;
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	80 93 61 06 	sts	0x0661, r24
     8a6:	08 95       	ret

000008a8 <_ZN11CLaserBoard9Relay2OffEv>:
}

void CLaserBoard::Relay2Off()
{
	PORTD.DIRSET = PIN4_bm;
     8a8:	80 e1       	ldi	r24, 0x10	; 16
     8aa:	80 93 61 06 	sts	0x0661, r24
     8ae:	08 95       	ret

000008b0 <_ZN11CLaserBoard4BeepEv>:
}

void CLaserBoard::Beep()
{
	cli();
     8b0:	f8 94       	cli
     8b2:	84 e6       	ldi	r24, 0x64	; 100
     8b4:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 100; i++)
	{
		PORTE.OUTSET = PIN3_bm;
     8b6:	e0 e8       	ldi	r30, 0x80	; 128
     8b8:	f6 e0       	ldi	r31, 0x06	; 6
     8ba:	28 e0       	ldi	r18, 0x08	; 8
     8bc:	25 83       	std	Z+5, r18	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8be:	af e9       	ldi	r26, 0x9F	; 159
     8c0:	bf e0       	ldi	r27, 0x0F	; 15
     8c2:	11 97       	sbiw	r26, 0x01	; 1
     8c4:	f1 f7       	brne	.-4      	; 0x8c2 <_ZN11CLaserBoard4BeepEv+0x12>
     8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <_ZN11CLaserBoard4BeepEv+0x18>
     8c8:	00 00       	nop
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
     8ca:	26 83       	std	Z+6, r18	; 0x06
     8cc:	af e9       	ldi	r26, 0x9F	; 159
     8ce:	bf e0       	ldi	r27, 0x0F	; 15
     8d0:	11 97       	sbiw	r26, 0x01	; 1
     8d2:	f1 f7       	brne	.-4      	; 0x8d0 <_ZN11CLaserBoard4BeepEv+0x20>
     8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <_ZN11CLaserBoard4BeepEv+0x26>
     8d6:	00 00       	nop
     8d8:	01 97       	sbiw	r24, 0x01	; 1

void CLaserBoard::Beep()
{
	cli();
	
	for (int i = 0; i < 100; i++)
     8da:	81 f7       	brne	.-32     	; 0x8bc <_ZN11CLaserBoard4BeepEv+0xc>
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
		_delay_us(500);
	}
	
	sei();
     8dc:	78 94       	sei
     8de:	08 95       	ret

000008e0 <_ZN11CLaserBoard14BeepClassErrorEv>:
}

void CLaserBoard::BeepClassError()
{
	cli();
     8e0:	f8 94       	cli
     8e2:	45 e0       	ldi	r20, 0x05	; 5
     8e4:	50 e0       	ldi	r21, 0x00	; 0
	
	sei();
}

void CLaserBoard::BeepClassError()
{
     8e6:	64 e6       	ldi	r22, 0x64	; 100
     8e8:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
		{
			PORTE.OUTSET = PIN3_bm;
     8ea:	e0 e8       	ldi	r30, 0x80	; 128
     8ec:	f6 e0       	ldi	r31, 0x06	; 6
     8ee:	28 e0       	ldi	r18, 0x08	; 8
     8f0:	1c c0       	rjmp	.+56     	; 0x92a <_ZN11CLaserBoard14BeepClassErrorEv+0x4a>
     8f2:	25 83       	std	Z+5, r18	; 0x05
     8f4:	af e9       	ldi	r26, 0x9F	; 159
     8f6:	bf e0       	ldi	r27, 0x0F	; 15
     8f8:	11 97       	sbiw	r26, 0x01	; 1
     8fa:	f1 f7       	brne	.-4      	; 0x8f8 <_ZN11CLaserBoard14BeepClassErrorEv+0x18>
     8fc:	00 c0       	rjmp	.+0      	; 0x8fe <_ZN11CLaserBoard14BeepClassErrorEv+0x1e>
     8fe:	00 00       	nop
			_delay_us(500);
			PORTE.OUTCLR = PIN3_bm;
     900:	26 83       	std	Z+6, r18	; 0x06
     902:	af e9       	ldi	r26, 0x9F	; 159
     904:	bf e0       	ldi	r27, 0x0F	; 15
     906:	11 97       	sbiw	r26, 0x01	; 1
     908:	f1 f7       	brne	.-4      	; 0x906 <_ZN11CLaserBoard14BeepClassErrorEv+0x26>
     90a:	00 c0       	rjmp	.+0      	; 0x90c <_ZN11CLaserBoard14BeepClassErrorEv+0x2c>
     90c:	00 00       	nop
     90e:	01 97       	sbiw	r24, 0x01	; 1
{
	cli();
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
     910:	81 f7       	brne	.-32     	; 0x8f2 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     912:	bf ef       	ldi	r27, 0xFF	; 255
     914:	73 ec       	ldi	r23, 0xC3	; 195
     916:	89 e0       	ldi	r24, 0x09	; 9
     918:	b1 50       	subi	r27, 0x01	; 1
     91a:	70 40       	sbci	r23, 0x00	; 0
     91c:	80 40       	sbci	r24, 0x00	; 0
     91e:	e1 f7       	brne	.-8      	; 0x918 <_ZN11CLaserBoard14BeepClassErrorEv+0x38>
     920:	00 c0       	rjmp	.+0      	; 0x922 <_ZN11CLaserBoard14BeepClassErrorEv+0x42>
     922:	00 00       	nop
     924:	41 50       	subi	r20, 0x01	; 1
     926:	51 09       	sbc	r21, r1

void CLaserBoard::BeepClassError()
{
	cli();
	
	for (int j = 0; j < 5; j++)
     928:	19 f0       	breq	.+6      	; 0x930 <_ZN11CLaserBoard14BeepClassErrorEv+0x50>
	
	sei();
}

void CLaserBoard::BeepClassError()
{
     92a:	86 2f       	mov	r24, r22
     92c:	93 2f       	mov	r25, r19
     92e:	e1 cf       	rjmp	.-62     	; 0x8f2 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
			_delay_us(500);
		}
		_delay_ms(100);
	}
	
	sei();
     930:	78 94       	sei
     932:	08 95       	ret

00000934 <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
{
} //~CLaserControlApp

// CMBEventsHandler
void CLaserControlApp::OnTransactionCallback(uint8_t* data, uint16_t length)
{
     934:	08 95       	ret

00000936 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
			CLaserBoard::Beep();
	}
}

void CLaserControlApp::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
     936:	dc 01       	movw	r26, r24
	// Update GUI registers
	if (addr == 0x03)	PIC_ID = data[1];
     938:	63 30       	cpi	r22, 0x03	; 3
     93a:	29 f4       	brne	.+10     	; 0x946 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x10>
     93c:	fa 01       	movw	r30, r20
     93e:	81 81       	ldd	r24, Z+1	; 0x01
     940:	1d 96       	adiw	r26, 0x0d	; 13
     942:	8c 93       	st	X, r24
     944:	1d 97       	sbiw	r26, 0x0d	; 13
	
	switch (PIC_ID)
     946:	1d 96       	adiw	r26, 0x0d	; 13
     948:	4c 91       	ld	r20, X
     94a:	1d 97       	sbiw	r26, 0x0d	; 13
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	46 32       	cpi	r20, 0x26	; 38
     950:	51 05       	cpc	r21, r1
     952:	08 f0       	brcs	.+2      	; 0x956 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x20>
     954:	46 c0       	rjmp	.+140    	; 0x9e2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xac>
     956:	fa 01       	movw	r30, r20
     958:	88 27       	eor	r24, r24
     95a:	ec 50       	subi	r30, 0x0C	; 12
     95c:	ff 4f       	sbci	r31, 0xFF	; 255
     95e:	8f 4f       	sbci	r24, 0xFF	; 255
     960:	0c 94 14 26 	jmp	0x4c28	; 0x4c28 <__tablejump2__>
	{
		case PICID_LOGO:
			state = APP_LOGO;
     964:	1c 96       	adiw	r26, 0x0c	; 12
     966:	1c 92       	st	X, r1
		break;
     968:	08 95       	ret
		case PICID_SETUP:
			state = APP_SETUP;
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	1c 96       	adiw	r26, 0x0c	; 12
     96e:	8c 93       	st	X, r24
		break;
     970:	08 95       	ret
		case PICID_TIMER:
			state = APP_RUN;
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	1c 96       	adiw	r26, 0x0c	; 12
     976:	8c 93       	st	X, r24
		break;
     978:	08 95       	ret
		case PICID_OnTimerStart:
			state = APP_OnTimerResume;
     97a:	85 e0       	ldi	r24, 0x05	; 5
     97c:	1c 96       	adiw	r26, 0x0c	; 12
     97e:	8c 93       	st	X, r24
		break;
     980:	08 95       	ret
		case PICID_OnStart:
			state = APP_OnTimerStart;
     982:	84 e0       	ldi	r24, 0x04	; 4
     984:	1c 96       	adiw	r26, 0x0c	; 12
     986:	8c 93       	st	X, r24
		break;
     988:	08 95       	ret
		case PICID_OnPause:
			state = APP_OnTimerPause;
     98a:	86 e0       	ldi	r24, 0x06	; 6
     98c:	1c 96       	adiw	r26, 0x0c	; 12
     98e:	8c 93       	st	X, r24
		break;
     990:	08 95       	ret
		case PICID_OnRestart:
			state = APP_OnTimerRestart;
     992:	88 e0       	ldi	r24, 0x08	; 8
     994:	1c 96       	adiw	r26, 0x0c	; 12
     996:	8c 93       	st	X, r24
		break;
     998:	08 95       	ret
		case PICID_OnStop:
			state = APP_OnTimerStop;
     99a:	87 e0       	ldi	r24, 0x07	; 7
     99c:	1c 96       	adiw	r26, 0x0c	; 12
     99e:	8c 93       	st	X, r24
		break;
     9a0:	08 95       	ret
		case PICID_OnH_L:
			state = APP_OnHL;
     9a2:	89 e0       	ldi	r24, 0x09	; 9
     9a4:	1c 96       	adiw	r26, 0x0c	; 12
     9a6:	8c 93       	st	X, r24
		break;
     9a8:	08 95       	ret
		case PICID_OnTimerSave:
			state = APP_OnSaveSetup;
     9aa:	8a e0       	ldi	r24, 0x0A	; 10
     9ac:	1c 96       	adiw	r26, 0x0c	; 12
     9ae:	8c 93       	st	X, r24
		break;
     9b0:	08 95       	ret
		
		case PICID_PROFILEPOP:
			state = APP_READPROFILE;
     9b2:	8c e0       	ldi	r24, 0x0C	; 12
     9b4:	1c 96       	adiw	r26, 0x0c	; 12
     9b6:	8c 93       	st	X, r24
		break;
     9b8:	08 95       	ret
		case PICID_PROFILEPUSH:
			state = APP_SAVEPROFILE;
     9ba:	8b e0       	ldi	r24, 0x0B	; 11
     9bc:	1c 96       	adiw	r26, 0x0c	; 12
     9be:	8c 93       	st	X, r24
		break;
     9c0:	08 95       	ret
		case PICID_DATABASE:
			state = APP_SHOWDATABASE;
     9c2:	8d e0       	ldi	r24, 0x0D	; 13
     9c4:	1c 96       	adiw	r26, 0x0c	; 12
     9c6:	8c 93       	st	X, r24
		break;
     9c8:	08 95       	ret
		case PICID_EDITPROFILE:
		case PICID_NEWPROFILE:
			state = APP_UNMAPDATABASE;
     9ca:	8e e0       	ldi	r24, 0x0E	; 14
     9cc:	1c 96       	adiw	r26, 0x0c	; 12
     9ce:	8c 93       	st	X, r24
		break;
     9d0:	08 95       	ret
		
		case PICID_Password:
			state = APP_PASSWORD;
     9d2:	80 e1       	ldi	r24, 0x10	; 16
     9d4:	1c 96       	adiw	r26, 0x0c	; 12
     9d6:	8c 93       	st	X, r24
		break;
     9d8:	08 95       	ret
		case PICID_Service:
			state = APP_SERVICE;
     9da:	8f e0       	ldi	r24, 0x0F	; 15
     9dc:	1c 96       	adiw	r26, 0x0c	; 12
     9de:	8c 93       	st	X, r24
		break;
     9e0:	08 95       	ret
		
		default:
			//state = APP_SETUPtoRUN_ANIM;
			state = APP_IDLE;
     9e2:	81 e1       	ldi	r24, 0x11	; 17
     9e4:	1c 96       	adiw	r26, 0x0c	; 12
     9e6:	8c 93       	st	X, r24
     9e8:	08 95       	ret

000009ea <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:
{
	//no code
}

void CLaserControlApp::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
     9ea:	cf 93       	push	r28
     9ec:	df 93       	push	r29
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
}

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
     9ee:	da 01       	movw	r26, r20
     9f0:	ed 91       	ld	r30, X+
     9f2:	fc 91       	ld	r31, X
     9f4:	fe 27       	eor	r31, r30
     9f6:	ef 27       	eor	r30, r31
     9f8:	fe 27       	eor	r31, r30

void CLaserControlApp::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
	// Update GUI variables	
	uint16_t val = swap(*((uint16_t*)data));
	switch (addr)
     9fa:	68 30       	cpi	r22, 0x08	; 8
     9fc:	71 05       	cpc	r23, r1
     9fe:	09 f4       	brne	.+2      	; 0xa02 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18>
     a00:	49 c0       	rjmp	.+146    	; 0xa94 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xaa>
     a02:	ea 01       	movw	r28, r20
     a04:	dc 01       	movw	r26, r24
     a06:	69 30       	cpi	r22, 0x09	; 9
     a08:	71 05       	cpc	r23, r1
     a0a:	98 f4       	brcc	.+38     	; 0xa32 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x48>
     a0c:	62 30       	cpi	r22, 0x02	; 2
     a0e:	71 05       	cpc	r23, r1
     a10:	09 f4       	brne	.+2      	; 0xa14 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x2a>
     a12:	6e c0       	rjmp	.+220    	; 0xaf0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x106>
     a14:	38 f4       	brcc	.+14     	; 0xa24 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x3a>
     a16:	61 15       	cp	r22, r1
     a18:	71 05       	cpc	r23, r1
     a1a:	01 f1       	breq	.+64     	; 0xa5c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x72>
     a1c:	61 30       	cpi	r22, 0x01	; 1
     a1e:	71 05       	cpc	r23, r1
     a20:	31 f1       	breq	.+76     	; 0xa6e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x84>
     a22:	64 c0       	rjmp	.+200    	; 0xaec <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x102>
     a24:	63 30       	cpi	r22, 0x03	; 3
     a26:	71 05       	cpc	r23, r1
     a28:	59 f1       	breq	.+86     	; 0xa80 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x96>
     a2a:	67 30       	cpi	r22, 0x07	; 7
     a2c:	71 05       	cpc	r23, r1
     a2e:	69 f1       	breq	.+90     	; 0xa8a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xa0>
     a30:	5d c0       	rjmp	.+186    	; 0xaec <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x102>
     a32:	6d 30       	cpi	r22, 0x0D	; 13
     a34:	71 05       	cpc	r23, r1
     a36:	09 f4       	brne	.+2      	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x50>
     a38:	54 c0       	rjmp	.+168    	; 0xae2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xf8>
     a3a:	48 f4       	brcc	.+18     	; 0xa4e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x64>
     a3c:	6b 30       	cpi	r22, 0x0B	; 11
     a3e:	71 05       	cpc	r23, r1
     a40:	09 f4       	brne	.+2      	; 0xa44 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x5a>
     a42:	45 c0       	rjmp	.+138    	; 0xace <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xe4>
     a44:	6c 30       	cpi	r22, 0x0C	; 12
     a46:	71 05       	cpc	r23, r1
     a48:	09 f4       	brne	.+2      	; 0xa4c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x62>
     a4a:	46 c0       	rjmp	.+140    	; 0xad8 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xee>
     a4c:	4f c0       	rjmp	.+158    	; 0xaec <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x102>
     a4e:	60 31       	cpi	r22, 0x10	; 16
     a50:	71 05       	cpc	r23, r1
     a52:	69 f1       	breq	.+90     	; 0xaae <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xc4>
     a54:	61 15       	cp	r22, r1
     a56:	71 40       	sbci	r23, 0x01	; 1
     a58:	19 f1       	breq	.+70     	; 0xaa0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xb6>
     a5a:	48 c0       	rjmp	.+144    	; 0xaec <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x102>
	{
		case VARIABLE_ADDR_MIN:
			m_wSetMin = val;
     a5c:	54 96       	adiw	r26, 0x14	; 20
     a5e:	ed 93       	st	X+, r30
     a60:	fc 93       	st	X, r31
     a62:	55 97       	sbiw	r26, 0x15	; 21
			m_wMinutes = val;
     a64:	1e 96       	adiw	r26, 0x0e	; 14
     a66:	ed 93       	st	X+, r30
     a68:	fc 93       	st	X, r31
     a6a:	1f 97       	sbiw	r26, 0x0f	; 15
		break;
     a6c:	41 c0       	rjmp	.+130    	; 0xaf0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x106>
		case VARIABLE_ADDR_SEC:
			m_wSetSec = val;
     a6e:	56 96       	adiw	r26, 0x16	; 22
     a70:	ed 93       	st	X+, r30
     a72:	fc 93       	st	X, r31
     a74:	57 97       	sbiw	r26, 0x17	; 23
			m_wSeconds = val;
     a76:	50 96       	adiw	r26, 0x10	; 16
     a78:	ed 93       	st	X+, r30
     a7a:	fc 93       	st	X, r31
     a7c:	51 97       	sbiw	r26, 0x11	; 17
		break;
     a7e:	38 c0       	rjmp	.+112    	; 0xaf0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x106>
		case VARIABLE_ADDR_MSC:
			// Not used
		break;
		case VARIABLE_ADDR_PWR:
			m_wPower = val;
     a80:	58 96       	adiw	r26, 0x18	; 24
     a82:	ed 93       	st	X+, r30
     a84:	fc 93       	st	X, r31
     a86:	59 97       	sbiw	r26, 0x19	; 25
		break;
     a88:	33 c0       	rjmp	.+102    	; 0xaf0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x106>
		case VARIABLE_ADDR_DATAPAGE:
			m_wDatabasePage = val;
     a8a:	94 96       	adiw	r26, 0x24	; 36
     a8c:	ed 93       	st	X+, r30
     a8e:	fc 93       	st	X, r31
     a90:	95 97       	sbiw	r26, 0x25	; 37
		break;
     a92:	2e c0       	rjmp	.+92     	; 0xaf0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x106>
		case VARIABLE_ADDR_SEL:
			m_wDatabaseSelInx = val;
     a94:	dc 01       	movw	r26, r24
     a96:	96 96       	adiw	r26, 0x26	; 38
     a98:	ed 93       	st	X+, r30
     a9a:	fc 93       	st	X, r31
     a9c:	97 97       	sbiw	r26, 0x27	; 39
		break;
     a9e:	28 c0       	rjmp	.+80     	; 0xaf0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x106>
		case VARIABLE_ADDR_DATABASE:
			Database.OnVariableReceived(addr, data, length);
     aa0:	60 e0       	ldi	r22, 0x00	; 0
     aa2:	71 e0       	ldi	r23, 0x01	; 1
     aa4:	82 e6       	ldi	r24, 0x62	; 98
     aa6:	93 e2       	ldi	r25, 0x23	; 35
     aa8:	0e 94 39 03 	call	0x672	; 0x672 <_ZN13CDGUSDatabase18OnVariableReceivedEjPjj>
		break;
     aac:	21 c0       	rjmp	.+66     	; 0xaf0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x106>
		// Input password
		case VARIABLE_ADDR_PASSWORD:
			m_wPassword[0] = ((char*)data)[0];
     aae:	28 81       	ld	r18, Y
     ab0:	5a 96       	adiw	r26, 0x1a	; 26
     ab2:	2c 93       	st	X, r18
     ab4:	5a 97       	sbiw	r26, 0x1a	; 26
			m_wPassword[1] = ((char*)data)[1];
     ab6:	29 81       	ldd	r18, Y+1	; 0x01
     ab8:	5b 96       	adiw	r26, 0x1b	; 27
     aba:	2c 93       	st	X, r18
     abc:	5b 97       	sbiw	r26, 0x1b	; 27
			m_wPassword[2] = ((char*)data)[2];
     abe:	2a 81       	ldd	r18, Y+2	; 0x02
     ac0:	5c 96       	adiw	r26, 0x1c	; 28
     ac2:	2c 93       	st	X, r18
     ac4:	5c 97       	sbiw	r26, 0x1c	; 28
			m_wPassword[3] = ((char*)data)[3];
     ac6:	2b 81       	ldd	r18, Y+3	; 0x03
     ac8:	5d 96       	adiw	r26, 0x1d	; 29
     aca:	2c 93       	st	X, r18
		break;
     acc:	11 c0       	rjmp	.+34     	; 0xaf0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x106>
		// Input secure settings
		case VARIABLE_ADDR_DACOFFSET:
			m_wDAC_Offset = val;
     ace:	5e 96       	adiw	r26, 0x1e	; 30
     ad0:	ed 93       	st	X+, r30
     ad2:	fc 93       	st	X, r31
     ad4:	5f 97       	sbiw	r26, 0x1f	; 31
		break;
     ad6:	0c c0       	rjmp	.+24     	; 0xaf0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x106>
		case VARIABLE_ADDR_DACP:
			m_wDAC_P = val;
     ad8:	90 96       	adiw	r26, 0x20	; 32
     ada:	ed 93       	st	X+, r30
     adc:	fc 93       	st	X, r31
     ade:	91 97       	sbiw	r26, 0x21	; 33
		break;
     ae0:	07 c0       	rjmp	.+14     	; 0xaf0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x106>
		case VARIABLE_ADDR_DACM:
			m_wDAC_M = val;
     ae2:	92 96       	adiw	r26, 0x22	; 34
     ae4:	ed 93       	st	X+, r30
     ae6:	fc 93       	st	X, r31
     ae8:	93 97       	sbiw	r26, 0x23	; 35
		break;
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x106>
		
		default:
			// Error
			CLaserBoard::Beep();
     aec:	0e 94 58 04 	call	0x8b0	; 0x8b0 <_ZN11CLaserBoard4BeepEv>
	}
}
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	08 95       	ret

00000af6 <_Z11ConvertDataPvS_jj>:
extern CSoundPlayer player;
extern CDGUSDatabase Database;
extern CTimerF PWMTimer;

void ConvertData(void* dst, void* src, uint16_t size, uint16_t offset = 0)
{
     af6:	cf 92       	push	r12
     af8:	df 92       	push	r13
     afa:	ef 92       	push	r14
     afc:	ff 92       	push	r15
     afe:	0f 93       	push	r16
     b00:	1f 93       	push	r17
     b02:	cf 93       	push	r28
     b04:	df 93       	push	r29
     b06:	7c 01       	movw	r14, r24
     b08:	8a 01       	movw	r16, r20
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
     b0a:	41 15       	cp	r20, r1
     b0c:	51 05       	cpc	r21, r1
     b0e:	b1 f0       	breq	.+44     	; 0xb3c <_Z11ConvertDataPvS_jj+0x46>
     b10:	6b 01       	movw	r12, r22
     b12:	c4 0e       	add	r12, r20
     b14:	d5 1e       	adc	r13, r21
     b16:	eb 01       	movw	r28, r22
     b18:	26 1b       	sub	r18, r22
     b1a:	37 0b       	sbc	r19, r23
     b1c:	c9 01       	movw	r24, r18
     b1e:	8c 0f       	add	r24, r28
     b20:	9d 1f       	adc	r25, r29
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
     b22:	b8 01       	movw	r22, r16
     b24:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <__udivmodhi4>
     b28:	fc 01       	movw	r30, r24
     b2a:	41 e0       	ldi	r20, 0x01	; 1
     b2c:	e4 27       	eor	r30, r20
     b2e:	ee 0d       	add	r30, r14
     b30:	ff 1d       	adc	r31, r15
     b32:	89 91       	ld	r24, Y+
     b34:	80 83       	st	Z, r24
	
	// swap bytes in words
	/*for (uint16_t i = 0; i < length; i++)
		dest[(i + offset) % length] = swap(source[i]);*/
		
	for (uint16_t i = 0; i < size; i++)
     b36:	cc 15       	cp	r28, r12
     b38:	dd 05       	cpc	r29, r13
     b3a:	81 f7       	brne	.-32     	; 0xb1c <_Z11ConvertDataPvS_jj+0x26>
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
}
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	ff 90       	pop	r15
     b46:	ef 90       	pop	r14
     b48:	df 90       	pop	r13
     b4a:	cf 90       	pop	r12
     b4c:	08 95       	ret

00000b4e <_ZN16CLaserControlAppC1Ev>:
	else
		return y;
}

// default constructor
CLaserControlApp::CLaserControlApp()
     b4e:	28 e7       	ldi	r18, 0x78	; 120
     b50:	30 e2       	ldi	r19, 0x20	; 32
     b52:	fc 01       	movw	r30, r24
     b54:	20 83       	st	Z, r18
     b56:	31 83       	std	Z+1, r19	; 0x01
     b58:	08 95       	ret

00000b5a <_ZN16CLaserControlAppD1Ev>:
{
} //CLaserControlApp

// default destructor
CLaserControlApp::~CLaserControlApp()
     b5a:	28 e7       	ldi	r18, 0x78	; 120
     b5c:	30 e2       	ldi	r19, 0x20	; 32
     b5e:	fc 01       	movw	r30, r24
     b60:	20 83       	st	Z, r18
     b62:	31 83       	std	Z+1, r19	; 0x01
     b64:	0e 94 9e 23 	call	0x473c	; 0x473c <_ZN16CMBEventsHandlerD1Ev>
     b68:	08 95       	ret

00000b6a <_ZN16CLaserControlApp5StartEv>:
	m_wDatabasePage = 0;
	m_wDatabaseSelInx = 0;
}

void CLaserControlApp::Start()
{	
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	28 97       	sbiw	r28, 0x08	; 8
     b78:	cd bf       	out	0x3d, r28	; 61
     b7a:	de bf       	out	0x3e, r29	; 62
     b7c:	8c 01       	movw	r16, r24
	// Startup DGUS initialization
	uint16_t pic_id = swap(1);
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	8f 83       	std	Y+7, r24	; 0x07
     b84:	98 87       	std	Y+8, r25	; 0x08
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     b86:	22 e0       	ldi	r18, 0x02	; 2
     b88:	ae 01       	movw	r20, r28
     b8a:	49 5f       	subi	r20, 0xF9	; 249
     b8c:	5f 4f       	sbci	r21, 0xFF	; 255
     b8e:	63 e0       	ldi	r22, 0x03	; 3
     b90:	f8 01       	movw	r30, r16
     b92:	80 a5       	ldd	r24, Z+40	; 0x28
     b94:	91 a5       	ldd	r25, Z+41	; 0x29
     b96:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     b9a:	f8 01       	movw	r30, r16
     b9c:	80 a5       	ldd	r24, Z+40	; 0x28
     b9e:	91 a5       	ldd	r25, Z+41	; 0x29
     ba0:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	//Setup variables
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MIN, (uint16_t*)&m_wSetMin, 2);
     ba4:	a8 01       	movw	r20, r16
     ba6:	4c 5e       	subi	r20, 0xEC	; 236
     ba8:	5f 4f       	sbci	r21, 0xFF	; 255
     baa:	22 e0       	ldi	r18, 0x02	; 2
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	60 e0       	ldi	r22, 0x00	; 0
     bb0:	70 e0       	ldi	r23, 0x00	; 0
     bb2:	f8 01       	movw	r30, r16
     bb4:	80 a5       	ldd	r24, Z+40	; 0x28
     bb6:	91 a5       	ldd	r25, Z+41	; 0x29
     bb8:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     bbc:	f8 01       	movw	r30, r16
     bbe:	80 a5       	ldd	r24, Z+40	; 0x28
     bc0:	91 a5       	ldd	r25, Z+41	; 0x29
     bc2:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_SEC, (uint16_t*)&m_wSetSec, 2);
     bc6:	a8 01       	movw	r20, r16
     bc8:	4a 5e       	subi	r20, 0xEA	; 234
     bca:	5f 4f       	sbci	r21, 0xFF	; 255
     bcc:	22 e0       	ldi	r18, 0x02	; 2
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	61 e0       	ldi	r22, 0x01	; 1
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	f8 01       	movw	r30, r16
     bd6:	80 a5       	ldd	r24, Z+40	; 0x28
     bd8:	91 a5       	ldd	r25, Z+41	; 0x29
     bda:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     bde:	f8 01       	movw	r30, r16
     be0:	80 a5       	ldd	r24, Z+40	; 0x28
     be2:	91 a5       	ldd	r25, Z+41	; 0x29
     be4:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MSC, (uint16_t*)&m_wMillSec, 2);
     be8:	a8 01       	movw	r20, r16
     bea:	4e 5e       	subi	r20, 0xEE	; 238
     bec:	5f 4f       	sbci	r21, 0xFF	; 255
     bee:	22 e0       	ldi	r18, 0x02	; 2
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	62 e0       	ldi	r22, 0x02	; 2
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	f8 01       	movw	r30, r16
     bf8:	80 a5       	ldd	r24, Z+40	; 0x28
     bfa:	91 a5       	ldd	r25, Z+41	; 0x29
     bfc:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     c00:	f8 01       	movw	r30, r16
     c02:	80 a5       	ldd	r24, Z+40	; 0x28
     c04:	91 a5       	ldd	r25, Z+41	; 0x29
     c06:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_PWR, (uint16_t*)&m_wPower, 2);
     c0a:	a8 01       	movw	r20, r16
     c0c:	48 5e       	subi	r20, 0xE8	; 232
     c0e:	5f 4f       	sbci	r21, 0xFF	; 255
     c10:	22 e0       	ldi	r18, 0x02	; 2
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	63 e0       	ldi	r22, 0x03	; 3
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	f8 01       	movw	r30, r16
     c1a:	80 a5       	ldd	r24, Z+40	; 0x28
     c1c:	91 a5       	ldd	r25, Z+41	; 0x29
     c1e:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     c22:	f8 01       	movw	r30, r16
     c24:	80 a5       	ldd	r24, Z+40	; 0x28
     c26:	91 a5       	ldd	r25, Z+41	; 0x29
     c28:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	uint16_t bar = 0;
	uint16_t bar1 = min(bar, 12);
     c2c:	1d 82       	std	Y+5, r1	; 0x05
     c2e:	1e 82       	std	Y+6, r1	; 0x06
	uint16_t bar2 = min(max(bar, 11), 24);
     c30:	8b e0       	ldi	r24, 0x0B	; 11
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	8b 83       	std	Y+3, r24	; 0x03
     c36:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t bar3 = max(bar, 23);
     c38:	87 e1       	ldi	r24, 0x17	; 23
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	89 83       	std	Y+1, r24	; 0x01
     c3e:	9a 83       	std	Y+2, r25	; 0x02
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR1, (uint16_t*)&bar1, 2);
     c40:	22 e0       	ldi	r18, 0x02	; 2
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	ae 01       	movw	r20, r28
     c46:	4b 5f       	subi	r20, 0xFB	; 251
     c48:	5f 4f       	sbci	r21, 0xFF	; 255
     c4a:	64 e0       	ldi	r22, 0x04	; 4
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	f8 01       	movw	r30, r16
     c50:	80 a5       	ldd	r24, Z+40	; 0x28
     c52:	91 a5       	ldd	r25, Z+41	; 0x29
     c54:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     c58:	f8 01       	movw	r30, r16
     c5a:	80 a5       	ldd	r24, Z+40	; 0x28
     c5c:	91 a5       	ldd	r25, Z+41	; 0x29
     c5e:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR2, (uint16_t*)&bar2, 2);
     c62:	22 e0       	ldi	r18, 0x02	; 2
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	ae 01       	movw	r20, r28
     c68:	4d 5f       	subi	r20, 0xFD	; 253
     c6a:	5f 4f       	sbci	r21, 0xFF	; 255
     c6c:	65 e0       	ldi	r22, 0x05	; 5
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	f8 01       	movw	r30, r16
     c72:	80 a5       	ldd	r24, Z+40	; 0x28
     c74:	91 a5       	ldd	r25, Z+41	; 0x29
     c76:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     c7a:	f8 01       	movw	r30, r16
     c7c:	80 a5       	ldd	r24, Z+40	; 0x28
     c7e:	91 a5       	ldd	r25, Z+41	; 0x29
     c80:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR3, (uint16_t*)&bar3, 2);
     c84:	22 e0       	ldi	r18, 0x02	; 2
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	ae 01       	movw	r20, r28
     c8a:	4f 5f       	subi	r20, 0xFF	; 255
     c8c:	5f 4f       	sbci	r21, 0xFF	; 255
     c8e:	66 e0       	ldi	r22, 0x06	; 6
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	f8 01       	movw	r30, r16
     c94:	80 a5       	ldd	r24, Z+40	; 0x28
     c96:	91 a5       	ldd	r25, Z+41	; 0x29
     c98:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     c9c:	f8 01       	movw	r30, r16
     c9e:	80 a5       	ldd	r24, Z+40	; 0x28
     ca0:	91 a5       	ldd	r25, Z+41	; 0x29
     ca2:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	state = APP_SETUP;
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	f8 01       	movw	r30, r16
     caa:	84 87       	std	Z+12, r24	; 0x0c
}
     cac:	28 96       	adiw	r28, 0x08	; 8
     cae:	cd bf       	out	0x3d, r28	; 61
     cb0:	de bf       	out	0x3e, r29	; 62
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	1f 91       	pop	r17
     cb8:	0f 91       	pop	r16
     cba:	08 95       	ret

00000cbc <_GLOBAL__sub_I_timer>:
#include "CLaserControlApp.h"
#include "CSoundPlayer.h"
#include <util/delay.h>


CTimerC timer;
     cbc:	8a e2       	ldi	r24, 0x2A	; 42
     cbe:	91 e2       	ldi	r25, 0x21	; 33
     cc0:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN7CTimerCC1Ev>
     cc4:	08 95       	ret

00000cc6 <_GLOBAL__sub_D_timer>:
     cc6:	8a e2       	ldi	r24, 0x2A	; 42
     cc8:	91 e2       	ldi	r25, 0x21	; 33
     cca:	0e 94 cc 0c 	call	0x1998	; 0x1998 <_ZN7CTimerCD1Ev>
     cce:	08 95       	ret

00000cd0 <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	ec 01       	movw	r28, r24
	// GUI class initialization
	m_cpSender = sender;
     cd6:	68 a7       	std	Y+40, r22	; 0x28
     cd8:	79 a7       	std	Y+41, r23	; 0x29
	timer.Initialize(WGM_Normal, CS_DIV256);
     cda:	46 e0       	ldi	r20, 0x06	; 6
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	8a e2       	ldi	r24, 0x2A	; 42
     ce0:	91 e2       	ldi	r25, 0x21	; 33
     ce2:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timer.SetPeriod(25000); // Every 10 ms
     ce6:	68 ea       	ldi	r22, 0xA8	; 168
     ce8:	71 e6       	ldi	r23, 0x61	; 97
     cea:	8a e2       	ldi	r24, 0x2A	; 42
     cec:	91 e2       	ldi	r25, 0x21	; 33
     cee:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN7CTimerC9SetPeriodEj>
	timer.SetOVFCallback(OnTimerStatic, this, TC_OVFINTLVL_LO_gc); // Enable interrupt
     cf2:	21 e0       	ldi	r18, 0x01	; 1
     cf4:	ae 01       	movw	r20, r28
     cf6:	60 ef       	ldi	r22, 0xF0	; 240
     cf8:	7a e0       	ldi	r23, 0x0A	; 10
     cfa:	8a e2       	ldi	r24, 0x2A	; 42
     cfc:	91 e2       	ldi	r25, 0x21	; 33
     cfe:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	
	// Set global variables
	PIC_ID = 0;
     d02:	1d 86       	std	Y+13, r1	; 0x0d
	m_wSetMin = 1;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	8c 8b       	std	Y+20, r24	; 0x14
     d0a:	9d 8b       	std	Y+21, r25	; 0x15
	m_wSetSec = 30;
     d0c:	8e e1       	ldi	r24, 0x1E	; 30
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	8e 8b       	std	Y+22, r24	; 0x16
     d12:	9f 8b       	std	Y+23, r25	; 0x17
	m_wMillSec = 0;
     d14:	1a 8a       	std	Y+18, r1	; 0x12
     d16:	1b 8a       	std	Y+19, r1	; 0x13
	m_wMinutes = m_wSetMin;
     d18:	8c 89       	ldd	r24, Y+20	; 0x14
     d1a:	9d 89       	ldd	r25, Y+21	; 0x15
     d1c:	8e 87       	std	Y+14, r24	; 0x0e
     d1e:	9f 87       	std	Y+15, r25	; 0x0f
	m_wSeconds = m_wSetSec;
     d20:	8e 89       	ldd	r24, Y+22	; 0x16
     d22:	9f 89       	ldd	r25, Y+23	; 0x17
     d24:	88 8b       	std	Y+16, r24	; 0x10
     d26:	99 8b       	std	Y+17, r25	; 0x11
	m_wPower = 0;
     d28:	18 8e       	std	Y+24, r1	; 0x18
     d2a:	19 8e       	std	Y+25, r1	; 0x19
	m_wDatabasePage = 0;
     d2c:	1c a2       	std	Y+36, r1	; 0x24
     d2e:	1d a2       	std	Y+37, r1	; 0x25
	m_wDatabaseSelInx = 0;
     d30:	1e a2       	std	Y+38, r1	; 0x26
     d32:	1f a2       	std	Y+39, r1	; 0x27
}
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	08 95       	ret

00000d3a <_ZN16CLaserControlApp3RunEv>:
	state = APP_SETUP;
}

// Process GUI
void CLaserControlApp::Run()
{
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	28 97       	sbiw	r28, 0x08	; 8
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	8c 01       	movw	r16, r24
	// Get PIC ID
	m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
     d4e:	42 e0       	ldi	r20, 0x02	; 2
     d50:	63 e0       	ldi	r22, 0x03	; 3
     d52:	fc 01       	movw	r30, r24
     d54:	80 a5       	ldd	r24, Z+40	; 0x28
     d56:	91 a5       	ldd	r25, Z+41	; 0x29
     d58:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
	m_cpSender->WaitMODBUSTransmitter();
     d5c:	f8 01       	movw	r30, r16
     d5e:	80 a5       	ldd	r24, Z+40	; 0x28
     d60:	91 a5       	ldd	r25, Z+41	; 0x29
     d62:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WaitMODBUSListener();
     d66:	f8 01       	movw	r30, r16
     d68:	80 a5       	ldd	r24, Z+40	; 0x28
     d6a:	91 a5       	ldd	r25, Z+41	; 0x29
     d6c:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <_ZN9CMBSender18WaitMODBUSListenerEv>
     d70:	ff ef       	ldi	r31, 0xFF	; 255
     d72:	21 ee       	ldi	r18, 0xE1	; 225
     d74:	84 e0       	ldi	r24, 0x04	; 4
     d76:	f1 50       	subi	r31, 0x01	; 1
     d78:	20 40       	sbci	r18, 0x00	; 0
     d7a:	80 40       	sbci	r24, 0x00	; 0
     d7c:	e1 f7       	brne	.-8      	; 0xd76 <_ZN16CLaserControlApp3RunEv+0x3c>
     d7e:	00 c0       	rjmp	.+0      	; 0xd80 <_ZN16CLaserControlApp3RunEv+0x46>
     d80:	00 00       	nop
	
	static uint16_t anim = 5;
	uint16_t pic_id;
	
	static uint16_t bar = 0;
	uint16_t bar1 = 0;
     d82:	1d 82       	std	Y+5, r1	; 0x05
     d84:	1e 82       	std	Y+6, r1	; 0x06
	uint16_t bar2 = 0;
     d86:	1b 82       	std	Y+3, r1	; 0x03
     d88:	1c 82       	std	Y+4, r1	; 0x04
	uint16_t bar3 = 0;
     d8a:	19 82       	std	Y+1, r1	; 0x01
     d8c:	1a 82       	std	Y+2, r1	; 0x02
	
	switch (state)
     d8e:	f8 01       	movw	r30, r16
     d90:	84 85       	ldd	r24, Z+12	; 0x0c
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	81 31       	cpi	r24, 0x11	; 17
     d96:	91 05       	cpc	r25, r1
     d98:	08 f0       	brcs	.+2      	; 0xd9c <_ZN16CLaserControlApp3RunEv+0x62>
     d9a:	80 c3       	rjmp	.+1792   	; 0x149c <_ZN16CLaserControlApp3RunEv+0x762>
     d9c:	fc 01       	movw	r30, r24
     d9e:	88 27       	eor	r24, r24
     da0:	e6 5e       	subi	r30, 0xE6	; 230
     da2:	fe 4f       	sbci	r31, 0xFE	; 254
     da4:	8f 4f       	sbci	r24, 0xFF	; 255
     da6:	0c 94 14 26 	jmp	0x4c28	; 0x4c28 <__tablejump2__>
	{
		case APP_LOGO:
			Start(); // Start if logo
     daa:	c8 01       	movw	r24, r16
     dac:	0e 94 b5 05 	call	0xb6a	; 0xb6a <_ZN16CLaserControlApp5StartEv>
		break;
     db0:	8e c3       	rjmp	.+1820   	; 0x14ce <_ZN16CLaserControlApp3RunEv+0x794>
		case APP_SETUP:
			// Get Variables
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_MIN, 2);
     db2:	42 e0       	ldi	r20, 0x02	; 2
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	f8 01       	movw	r30, r16
     dba:	80 a5       	ldd	r24, Z+40	; 0x28
     dbc:	91 a5       	ldd	r25, Z+41	; 0x29
     dbe:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
			m_cpSender->WaitMODBUSTransmitter();
     dc2:	f8 01       	movw	r30, r16
     dc4:	80 a5       	ldd	r24, Z+40	; 0x28
     dc6:	91 a5       	ldd	r25, Z+41	; 0x29
     dc8:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSListener();
     dcc:	f8 01       	movw	r30, r16
     dce:	80 a5       	ldd	r24, Z+40	; 0x28
     dd0:	91 a5       	ldd	r25, Z+41	; 0x29
     dd2:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <_ZN9CMBSender18WaitMODBUSListenerEv>
     dd6:	ff ef       	ldi	r31, 0xFF	; 255
     dd8:	21 ee       	ldi	r18, 0xE1	; 225
     dda:	84 e0       	ldi	r24, 0x04	; 4
     ddc:	f1 50       	subi	r31, 0x01	; 1
     dde:	20 40       	sbci	r18, 0x00	; 0
     de0:	80 40       	sbci	r24, 0x00	; 0
     de2:	e1 f7       	brne	.-8      	; 0xddc <_ZN16CLaserControlApp3RunEv+0xa2>
     de4:	00 c0       	rjmp	.+0      	; 0xde6 <_ZN16CLaserControlApp3RunEv+0xac>
     de6:	00 00       	nop
			_delay_ms(50);
			
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_SEC, 2);
     de8:	42 e0       	ldi	r20, 0x02	; 2
     dea:	61 e0       	ldi	r22, 0x01	; 1
     dec:	70 e0       	ldi	r23, 0x00	; 0
     dee:	f8 01       	movw	r30, r16
     df0:	80 a5       	ldd	r24, Z+40	; 0x28
     df2:	91 a5       	ldd	r25, Z+41	; 0x29
     df4:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
			m_cpSender->WaitMODBUSTransmitter();
     df8:	f8 01       	movw	r30, r16
     dfa:	80 a5       	ldd	r24, Z+40	; 0x28
     dfc:	91 a5       	ldd	r25, Z+41	; 0x29
     dfe:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSListener();
     e02:	f8 01       	movw	r30, r16
     e04:	80 a5       	ldd	r24, Z+40	; 0x28
     e06:	91 a5       	ldd	r25, Z+41	; 0x29
     e08:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <_ZN9CMBSender18WaitMODBUSListenerEv>
     e0c:	ff ef       	ldi	r31, 0xFF	; 255
     e0e:	21 ee       	ldi	r18, 0xE1	; 225
     e10:	84 e0       	ldi	r24, 0x04	; 4
     e12:	f1 50       	subi	r31, 0x01	; 1
     e14:	20 40       	sbci	r18, 0x00	; 0
     e16:	80 40       	sbci	r24, 0x00	; 0
     e18:	e1 f7       	brne	.-8      	; 0xe12 <_ZN16CLaserControlApp3RunEv+0xd8>
     e1a:	00 c0       	rjmp	.+0      	; 0xe1c <_ZN16CLaserControlApp3RunEv+0xe2>
     e1c:	00 00       	nop
			_delay_ms(50);
			
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_PWR, 2);
     e1e:	42 e0       	ldi	r20, 0x02	; 2
     e20:	63 e0       	ldi	r22, 0x03	; 3
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	f8 01       	movw	r30, r16
     e26:	80 a5       	ldd	r24, Z+40	; 0x28
     e28:	91 a5       	ldd	r25, Z+41	; 0x29
     e2a:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
			m_cpSender->WaitMODBUSTransmitter();
     e2e:	f8 01       	movw	r30, r16
     e30:	80 a5       	ldd	r24, Z+40	; 0x28
     e32:	91 a5       	ldd	r25, Z+41	; 0x29
     e34:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSListener();
     e38:	f8 01       	movw	r30, r16
     e3a:	80 a5       	ldd	r24, Z+40	; 0x28
     e3c:	91 a5       	ldd	r25, Z+41	; 0x29
     e3e:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <_ZN9CMBSender18WaitMODBUSListenerEv>
     e42:	ff ef       	ldi	r31, 0xFF	; 255
     e44:	21 ee       	ldi	r18, 0xE1	; 225
     e46:	84 e0       	ldi	r24, 0x04	; 4
     e48:	f1 50       	subi	r31, 0x01	; 1
     e4a:	20 40       	sbci	r18, 0x00	; 0
     e4c:	80 40       	sbci	r24, 0x00	; 0
     e4e:	e1 f7       	brne	.-8      	; 0xe48 <_ZN16CLaserControlApp3RunEv+0x10e>
     e50:	00 c0       	rjmp	.+0      	; 0xe52 <_ZN16CLaserControlApp3RunEv+0x118>
     e52:	00 00       	nop
			_delay_ms(50);
			
			bar = (m_wPower * 70) / 100;
     e54:	f8 01       	movw	r30, r16
     e56:	80 8d       	ldd	r24, Z+24	; 0x18
     e58:	91 8d       	ldd	r25, Z+25	; 0x19
     e5a:	46 e4       	ldi	r20, 0x46	; 70
     e5c:	48 9f       	mul	r20, r24
     e5e:	90 01       	movw	r18, r0
     e60:	49 9f       	mul	r20, r25
     e62:	30 0d       	add	r19, r0
     e64:	11 24       	eor	r1, r1
     e66:	36 95       	lsr	r19
     e68:	27 95       	ror	r18
     e6a:	36 95       	lsr	r19
     e6c:	27 95       	ror	r18
     e6e:	ab e7       	ldi	r26, 0x7B	; 123
     e70:	b4 e1       	ldi	r27, 0x14	; 20
     e72:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <__umulhisi3>
     e76:	96 95       	lsr	r25
     e78:	87 95       	ror	r24
     e7a:	80 93 28 21 	sts	0x2128, r24
     e7e:	90 93 29 21 	sts	0x2129, r25
	return (data >> 8) | (data << 8);
}

uint16_t min(uint16_t x, uint16_t y)
{
	if (x < y)
     e82:	87 31       	cpi	r24, 0x17	; 23
     e84:	91 05       	cpc	r25, r1
     e86:	18 f0       	brcs	.+6      	; 0xe8e <_ZN16CLaserControlApp3RunEv+0x154>
		return x;
	else
		return y;
     e88:	37 e1       	ldi	r19, 0x17	; 23
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <_ZN16CLaserControlApp3RunEv+0x158>
}

uint16_t min(uint16_t x, uint16_t y)
{
	if (x < y)
		return x;
     e8e:	38 2f       	mov	r19, r24
     e90:	29 2f       	mov	r18, r25
			m_cpSender->WaitMODBUSTransmitter();
			m_cpSender->WaitMODBUSListener();
			_delay_ms(50);
			
			bar = (m_wPower * 70) / 100;
			bar1 = min(bar, 23);
     e92:	3d 83       	std	Y+5, r19	; 0x05
     e94:	2e 83       	std	Y+6, r18	; 0x06
			if (bar >= 22)	bar2 = min(bar-22, 25); else bar2 = 0;
     e96:	86 31       	cpi	r24, 0x16	; 22
     e98:	91 05       	cpc	r25, r1
     e9a:	58 f0       	brcs	.+22     	; 0xeb2 <_ZN16CLaserControlApp3RunEv+0x178>
     e9c:	9c 01       	movw	r18, r24
     e9e:	26 51       	subi	r18, 0x16	; 22
     ea0:	31 09       	sbc	r19, r1
	return (data >> 8) | (data << 8);
}

uint16_t min(uint16_t x, uint16_t y)
{
	if (x < y)
     ea2:	29 31       	cpi	r18, 0x19	; 25
     ea4:	31 05       	cpc	r19, r1
     ea6:	10 f0       	brcs	.+4      	; 0xeac <_ZN16CLaserControlApp3RunEv+0x172>
		return x;
	else
		return y;
     ea8:	29 e1       	ldi	r18, 0x19	; 25
     eaa:	30 e0       	ldi	r19, 0x00	; 0
			m_cpSender->WaitMODBUSListener();
			_delay_ms(50);
			
			bar = (m_wPower * 70) / 100;
			bar1 = min(bar, 23);
			if (bar >= 22)	bar2 = min(bar-22, 25); else bar2 = 0;
     eac:	2b 83       	std	Y+3, r18	; 0x03
     eae:	3c 83       	std	Y+4, r19	; 0x04
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <_ZN16CLaserControlApp3RunEv+0x17c>
     eb2:	1b 82       	std	Y+3, r1	; 0x03
     eb4:	1c 82       	std	Y+4, r1	; 0x04
			if (bar >= 46)	bar3 = min(bar-46, 22); else bar3 = 0;
     eb6:	8e 32       	cpi	r24, 0x2E	; 46
     eb8:	91 05       	cpc	r25, r1
     eba:	48 f0       	brcs	.+18     	; 0xece <_ZN16CLaserControlApp3RunEv+0x194>
     ebc:	8e 97       	sbiw	r24, 0x2e	; 46
	return (data >> 8) | (data << 8);
}

uint16_t min(uint16_t x, uint16_t y)
{
	if (x < y)
     ebe:	86 31       	cpi	r24, 0x16	; 22
     ec0:	91 05       	cpc	r25, r1
     ec2:	10 f0       	brcs	.+4      	; 0xec8 <_ZN16CLaserControlApp3RunEv+0x18e>
		return x;
	else
		return y;
     ec4:	86 e1       	ldi	r24, 0x16	; 22
     ec6:	90 e0       	ldi	r25, 0x00	; 0
			_delay_ms(50);
			
			bar = (m_wPower * 70) / 100;
			bar1 = min(bar, 23);
			if (bar >= 22)	bar2 = min(bar-22, 25); else bar2 = 0;
			if (bar >= 46)	bar3 = min(bar-46, 22); else bar3 = 0;
     ec8:	89 83       	std	Y+1, r24	; 0x01
     eca:	9a 83       	std	Y+2, r25	; 0x02
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <_ZN16CLaserControlApp3RunEv+0x198>
     ece:	19 82       	std	Y+1, r1	; 0x01
     ed0:	1a 82       	std	Y+2, r1	; 0x02
			
			PWMTimer.SetCOMPC(m_wPower * 327); //PWMTimer.SetCOMPC(m_wPower * 32768 / 100);
     ed2:	f8 01       	movw	r30, r16
     ed4:	20 8d       	ldd	r18, Z+24	; 0x18
     ed6:	31 8d       	ldd	r19, Z+25	; 0x19
     ed8:	87 e4       	ldi	r24, 0x47	; 71
     eda:	91 e0       	ldi	r25, 0x01	; 1
     edc:	28 9f       	mul	r18, r24
     ede:	b0 01       	movw	r22, r0
     ee0:	29 9f       	mul	r18, r25
     ee2:	70 0d       	add	r23, r0
     ee4:	38 9f       	mul	r19, r24
     ee6:	70 0d       	add	r23, r0
     ee8:	11 24       	eor	r1, r1
     eea:	8f e5       	ldi	r24, 0x5F	; 95
     eec:	93 e2       	ldi	r25, 0x23	; 35
     eee:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <_ZN7CTimerF8SetCOMPCEj>
			
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR1, (uint16_t*)&bar1, 2);
     ef2:	22 e0       	ldi	r18, 0x02	; 2
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	ae 01       	movw	r20, r28
     ef8:	4b 5f       	subi	r20, 0xFB	; 251
     efa:	5f 4f       	sbci	r21, 0xFF	; 255
     efc:	64 e0       	ldi	r22, 0x04	; 4
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	f8 01       	movw	r30, r16
     f02:	80 a5       	ldd	r24, Z+40	; 0x28
     f04:	91 a5       	ldd	r25, Z+41	; 0x29
     f06:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     f0a:	f8 01       	movw	r30, r16
     f0c:	80 a5       	ldd	r24, Z+40	; 0x28
     f0e:	91 a5       	ldd	r25, Z+41	; 0x29
     f10:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR2, (uint16_t*)&bar2, 2);
     f14:	22 e0       	ldi	r18, 0x02	; 2
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	ae 01       	movw	r20, r28
     f1a:	4d 5f       	subi	r20, 0xFD	; 253
     f1c:	5f 4f       	sbci	r21, 0xFF	; 255
     f1e:	65 e0       	ldi	r22, 0x05	; 5
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	f8 01       	movw	r30, r16
     f24:	80 a5       	ldd	r24, Z+40	; 0x28
     f26:	91 a5       	ldd	r25, Z+41	; 0x29
     f28:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     f2c:	f8 01       	movw	r30, r16
     f2e:	80 a5       	ldd	r24, Z+40	; 0x28
     f30:	91 a5       	ldd	r25, Z+41	; 0x29
     f32:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR3, (uint16_t*)&bar3, 2);
     f36:	22 e0       	ldi	r18, 0x02	; 2
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	ae 01       	movw	r20, r28
     f3c:	4f 5f       	subi	r20, 0xFF	; 255
     f3e:	5f 4f       	sbci	r21, 0xFF	; 255
     f40:	66 e0       	ldi	r22, 0x06	; 6
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	f8 01       	movw	r30, r16
     f46:	80 a5       	ldd	r24, Z+40	; 0x28
     f48:	91 a5       	ldd	r25, Z+41	; 0x29
     f4a:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     f4e:	f8 01       	movw	r30, r16
     f50:	80 a5       	ldd	r24, Z+40	; 0x28
     f52:	91 a5       	ldd	r25, Z+41	; 0x29
     f54:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		break;
     f58:	ba c2       	rjmp	.+1396   	; 0x14ce <_ZN16CLaserControlApp3RunEv+0x794>
		case APP_SETUPtoRUN_ANIM:
			// Play animation
			anim++;
     f5a:	80 91 47 20 	lds	r24, 0x2047
     f5e:	90 91 48 20 	lds	r25, 0x2048
     f62:	01 96       	adiw	r24, 0x01	; 1
			if (anim > 9) {
     f64:	8a 30       	cpi	r24, 0x0A	; 10
     f66:	91 05       	cpc	r25, r1
     f68:	28 f4       	brcc	.+10     	; 0xf74 <_ZN16CLaserControlApp3RunEv+0x23a>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR3, (uint16_t*)&bar3, 2);
			m_cpSender->WaitMODBUSTransmitter();
		break;
		case APP_SETUPtoRUN_ANIM:
			// Play animation
			anim++;
     f6a:	80 93 47 20 	sts	0x2047, r24
     f6e:	90 93 48 20 	sts	0x2048, r25
     f72:	09 c0       	rjmp	.+18     	; 0xf86 <_ZN16CLaserControlApp3RunEv+0x24c>
			if (anim > 9) {
				anim = 9;
     f74:	89 e0       	ldi	r24, 0x09	; 9
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	80 93 47 20 	sts	0x2047, r24
     f7c:	90 93 48 20 	sts	0x2048, r25
				state = APP_RUN;
     f80:	83 e0       	ldi	r24, 0x03	; 3
     f82:	f8 01       	movw	r30, r16
     f84:	84 87       	std	Z+12, r24	; 0x0c
		((uint8_t*)dst)[((i + offset) % size) ^ 1] = ((uint8_t*)src)[i];
}

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
     f86:	80 91 47 20 	lds	r24, 0x2047
     f8a:	90 91 48 20 	lds	r25, 0x2048
     f8e:	98 27       	eor	r25, r24
     f90:	89 27       	eor	r24, r25
     f92:	98 27       	eor	r25, r24
			anim++;
			if (anim > 9) {
				anim = 9;
				state = APP_RUN;
			}
			pic_id = swap(anim);
     f94:	8f 83       	std	Y+7, r24	; 0x07
     f96:	98 87       	std	Y+8, r25	; 0x08
			
			// Timer setup to timer run animation
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     f98:	22 e0       	ldi	r18, 0x02	; 2
     f9a:	ae 01       	movw	r20, r28
     f9c:	49 5f       	subi	r20, 0xF9	; 249
     f9e:	5f 4f       	sbci	r21, 0xFF	; 255
     fa0:	63 e0       	ldi	r22, 0x03	; 3
     fa2:	f8 01       	movw	r30, r16
     fa4:	80 a5       	ldd	r24, Z+40	; 0x28
     fa6:	91 a5       	ldd	r25, Z+41	; 0x29
     fa8:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     fac:	f8 01       	movw	r30, r16
     fae:	80 a5       	ldd	r24, Z+40	; 0x28
     fb0:	91 a5       	ldd	r25, Z+41	; 0x29
     fb2:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		break;
     fb6:	8b c2       	rjmp	.+1302   	; 0x14ce <_ZN16CLaserControlApp3RunEv+0x794>
		case APP_RUN:
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MIN, (uint16_t*)&m_wMinutes, 2);
     fb8:	a8 01       	movw	r20, r16
     fba:	42 5f       	subi	r20, 0xF2	; 242
     fbc:	5f 4f       	sbci	r21, 0xFF	; 255
     fbe:	22 e0       	ldi	r18, 0x02	; 2
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	70 e0       	ldi	r23, 0x00	; 0
     fc6:	f8 01       	movw	r30, r16
     fc8:	80 a5       	ldd	r24, Z+40	; 0x28
     fca:	91 a5       	ldd	r25, Z+41	; 0x29
     fcc:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     fd0:	f8 01       	movw	r30, r16
     fd2:	80 a5       	ldd	r24, Z+40	; 0x28
     fd4:	91 a5       	ldd	r25, Z+41	; 0x29
     fd6:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_SEC, (uint16_t*)&m_wSeconds, 2);
     fda:	a8 01       	movw	r20, r16
     fdc:	40 5f       	subi	r20, 0xF0	; 240
     fde:	5f 4f       	sbci	r21, 0xFF	; 255
     fe0:	22 e0       	ldi	r18, 0x02	; 2
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	61 e0       	ldi	r22, 0x01	; 1
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	f8 01       	movw	r30, r16
     fea:	80 a5       	ldd	r24, Z+40	; 0x28
     fec:	91 a5       	ldd	r25, Z+41	; 0x29
     fee:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     ff2:	f8 01       	movw	r30, r16
     ff4:	80 a5       	ldd	r24, Z+40	; 0x28
     ff6:	91 a5       	ldd	r25, Z+41	; 0x29
     ff8:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MSC, (uint16_t*)&m_wMillSec, 2);
     ffc:	a8 01       	movw	r20, r16
     ffe:	4e 5e       	subi	r20, 0xEE	; 238
    1000:	5f 4f       	sbci	r21, 0xFF	; 255
    1002:	22 e0       	ldi	r18, 0x02	; 2
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	62 e0       	ldi	r22, 0x02	; 2
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	f8 01       	movw	r30, r16
    100c:	80 a5       	ldd	r24, Z+40	; 0x28
    100e:	91 a5       	ldd	r25, Z+41	; 0x29
    1010:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
    1014:	f8 01       	movw	r30, r16
    1016:	80 a5       	ldd	r24, Z+40	; 0x28
    1018:	91 a5       	ldd	r25, Z+41	; 0x29
    101a:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			player.SetPWM(m_wPower);
    101e:	f8 01       	movw	r30, r16
    1020:	60 8d       	ldd	r22, Z+24	; 0x18
    1022:	71 8d       	ldd	r23, Z+25	; 0x19
    1024:	84 e9       	ldi	r24, 0x94	; 148
    1026:	93 e2       	ldi	r25, 0x23	; 35
    1028:	0e 94 80 0b 	call	0x1700	; 0x1700 <_ZN12CSoundPlayer6SetPWMEj>
			m_cpSender->WaitMODBUSTransmitter();
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR2, (uint16_t*)&bar2, 2);
			m_cpSender->WaitMODBUSTransmitter();
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR3, (uint16_t*)&bar3, 2);
			m_cpSender->WaitMODBUSTransmitter();*/
		break;
    102c:	50 c2       	rjmp	.+1184   	; 0x14ce <_ZN16CLaserControlApp3RunEv+0x794>
		case APP_OnTimerStart:
			// Set Run state
			anim = 5;
    102e:	85 e0       	ldi	r24, 0x05	; 5
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	80 93 47 20 	sts	0x2047, r24
    1036:	90 93 48 20 	sts	0x2048, r25
			pic_id = swap(PICID_TIMER);
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	99 e1       	ldi	r25, 0x19	; 25
    103e:	8f 83       	std	Y+7, r24	; 0x07
    1040:	98 87       	std	Y+8, r25	; 0x08
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    1042:	22 e0       	ldi	r18, 0x02	; 2
    1044:	ae 01       	movw	r20, r28
    1046:	49 5f       	subi	r20, 0xF9	; 249
    1048:	5f 4f       	sbci	r21, 0xFF	; 255
    104a:	63 e0       	ldi	r22, 0x03	; 3
    104c:	f8 01       	movw	r30, r16
    104e:	80 a5       	ldd	r24, Z+40	; 0x28
    1050:	91 a5       	ldd	r25, Z+41	; 0x29
    1052:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
    1056:	f8 01       	movw	r30, r16
    1058:	80 a5       	ldd	r24, Z+40	; 0x28
    105a:	91 a5       	ldd	r25, Z+41	; 0x29
    105c:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			m_wMinutes = m_wSetMin;
    1060:	f8 01       	movw	r30, r16
    1062:	84 89       	ldd	r24, Z+20	; 0x14
    1064:	95 89       	ldd	r25, Z+21	; 0x15
    1066:	86 87       	std	Z+14, r24	; 0x0e
    1068:	97 87       	std	Z+15, r25	; 0x0f
			m_wSeconds = m_wSetSec;
    106a:	86 89       	ldd	r24, Z+22	; 0x16
    106c:	97 89       	ldd	r25, Z+23	; 0x17
    106e:	80 8b       	std	Z+16, r24	; 0x10
    1070:	91 8b       	std	Z+17, r25	; 0x11
			m_wMillSec = 0;
    1072:	12 8a       	std	Z+18, r1	; 0x12
    1074:	13 8a       	std	Z+19, r1	; 0x13
			
			// Start timer
			timer.Start(25000);
    1076:	68 ea       	ldi	r22, 0xA8	; 168
    1078:	71 e6       	ldi	r23, 0x61	; 97
    107a:	8a e2       	ldi	r24, 0x2A	; 42
    107c:	91 e2       	ldi	r25, 0x21	; 33
    107e:	0e 94 18 0c 	call	0x1830	; 0x1830 <_ZN7CTimerC5StartEj>
			laserBoard.Relay1On();
    1082:	85 e9       	ldi	r24, 0x95	; 149
    1084:	93 e2       	ldi	r25, 0x23	; 35
    1086:	0e 94 48 04 	call	0x890	; 0x890 <_ZN11CLaserBoard8Relay1OnEv>
			player.Lock();
    108a:	84 e9       	ldi	r24, 0x94	; 148
    108c:	93 e2       	ldi	r25, 0x23	; 35
    108e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN12CSoundPlayer4LockEv>
			
			state = APP_RUN;
    1092:	83 e0       	ldi	r24, 0x03	; 3
    1094:	f8 01       	movw	r30, r16
    1096:	84 87       	std	Z+12, r24	; 0x0c
		break;
    1098:	1a c2       	rjmp	.+1076   	; 0x14ce <_ZN16CLaserControlApp3RunEv+0x794>
		case APP_OnTimerResume:
			// Set Run state
			//m_wPower = 0;
			anim = 5;
    109a:	85 e0       	ldi	r24, 0x05	; 5
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	80 93 47 20 	sts	0x2047, r24
    10a2:	90 93 48 20 	sts	0x2048, r25
			pic_id = swap(PICID_TIMER);
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	99 e1       	ldi	r25, 0x19	; 25
    10aa:	8f 83       	std	Y+7, r24	; 0x07
    10ac:	98 87       	std	Y+8, r25	; 0x08
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    10ae:	22 e0       	ldi	r18, 0x02	; 2
    10b0:	ae 01       	movw	r20, r28
    10b2:	49 5f       	subi	r20, 0xF9	; 249
    10b4:	5f 4f       	sbci	r21, 0xFF	; 255
    10b6:	63 e0       	ldi	r22, 0x03	; 3
    10b8:	f8 01       	movw	r30, r16
    10ba:	80 a5       	ldd	r24, Z+40	; 0x28
    10bc:	91 a5       	ldd	r25, Z+41	; 0x29
    10be:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
    10c2:	f8 01       	movw	r30, r16
    10c4:	80 a5       	ldd	r24, Z+40	; 0x28
    10c6:	91 a5       	ldd	r25, Z+41	; 0x29
    10c8:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			// Start timer
			timer.Start(25000);
    10cc:	68 ea       	ldi	r22, 0xA8	; 168
    10ce:	71 e6       	ldi	r23, 0x61	; 97
    10d0:	8a e2       	ldi	r24, 0x2A	; 42
    10d2:	91 e2       	ldi	r25, 0x21	; 33
    10d4:	0e 94 18 0c 	call	0x1830	; 0x1830 <_ZN7CTimerC5StartEj>
			laserBoard.Relay1On();
    10d8:	85 e9       	ldi	r24, 0x95	; 149
    10da:	93 e2       	ldi	r25, 0x23	; 35
    10dc:	0e 94 48 04 	call	0x890	; 0x890 <_ZN11CLaserBoard8Relay1OnEv>
			player.Lock();
    10e0:	84 e9       	ldi	r24, 0x94	; 148
    10e2:	93 e2       	ldi	r25, 0x23	; 35
    10e4:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN12CSoundPlayer4LockEv>
			
			state = APP_RUN;
    10e8:	83 e0       	ldi	r24, 0x03	; 3
    10ea:	f8 01       	movw	r30, r16
    10ec:	84 87       	std	Z+12, r24	; 0x0c
		break;
    10ee:	ef c1       	rjmp	.+990    	; 0x14ce <_ZN16CLaserControlApp3RunEv+0x794>
		case APP_OnTimerStop:
			// Set Stop (return to Setup) state
			pic_id = swap(PICID_SETUP);
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	97 e1       	ldi	r25, 0x17	; 23
    10f4:	8f 83       	std	Y+7, r24	; 0x07
    10f6:	98 87       	std	Y+8, r25	; 0x08
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    10f8:	22 e0       	ldi	r18, 0x02	; 2
    10fa:	ae 01       	movw	r20, r28
    10fc:	49 5f       	subi	r20, 0xF9	; 249
    10fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1100:	63 e0       	ldi	r22, 0x03	; 3
    1102:	f8 01       	movw	r30, r16
    1104:	80 a5       	ldd	r24, Z+40	; 0x28
    1106:	91 a5       	ldd	r25, Z+41	; 0x29
    1108:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
    110c:	f8 01       	movw	r30, r16
    110e:	80 a5       	ldd	r24, Z+40	; 0x28
    1110:	91 a5       	ldd	r25, Z+41	; 0x29
    1112:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			// Stop timer
			timer.Stop();
    1116:	8a e2       	ldi	r24, 0x2A	; 42
    1118:	91 e2       	ldi	r25, 0x21	; 33
    111a:	0e 94 25 0c 	call	0x184a	; 0x184a <_ZN7CTimerC4StopEv>
			laserBoard.Relay1Off();
    111e:	85 e9       	ldi	r24, 0x95	; 149
    1120:	93 e2       	ldi	r25, 0x23	; 35
    1122:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_ZN11CLaserBoard9Relay1OffEv>
			
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MIN, (uint16_t*)&m_wSetMin, 2);
    1126:	a8 01       	movw	r20, r16
    1128:	4c 5e       	subi	r20, 0xEC	; 236
    112a:	5f 4f       	sbci	r21, 0xFF	; 255
    112c:	22 e0       	ldi	r18, 0x02	; 2
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	f8 01       	movw	r30, r16
    1136:	80 a5       	ldd	r24, Z+40	; 0x28
    1138:	91 a5       	ldd	r25, Z+41	; 0x29
    113a:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
    113e:	f8 01       	movw	r30, r16
    1140:	80 a5       	ldd	r24, Z+40	; 0x28
    1142:	91 a5       	ldd	r25, Z+41	; 0x29
    1144:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_SEC, (uint16_t*)&m_wSetSec, 2);
    1148:	a8 01       	movw	r20, r16
    114a:	4a 5e       	subi	r20, 0xEA	; 234
    114c:	5f 4f       	sbci	r21, 0xFF	; 255
    114e:	22 e0       	ldi	r18, 0x02	; 2
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	61 e0       	ldi	r22, 0x01	; 1
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	f8 01       	movw	r30, r16
    1158:	80 a5       	ldd	r24, Z+40	; 0x28
    115a:	91 a5       	ldd	r25, Z+41	; 0x29
    115c:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
    1160:	f8 01       	movw	r30, r16
    1162:	80 a5       	ldd	r24, Z+40	; 0x28
    1164:	91 a5       	ldd	r25, Z+41	; 0x29
    1166:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MSC, (uint16_t*)&m_wMillSec, 2);
    116a:	a8 01       	movw	r20, r16
    116c:	4e 5e       	subi	r20, 0xEE	; 238
    116e:	5f 4f       	sbci	r21, 0xFF	; 255
    1170:	22 e0       	ldi	r18, 0x02	; 2
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	62 e0       	ldi	r22, 0x02	; 2
    1176:	70 e0       	ldi	r23, 0x00	; 0
    1178:	f8 01       	movw	r30, r16
    117a:	80 a5       	ldd	r24, Z+40	; 0x28
    117c:	91 a5       	ldd	r25, Z+41	; 0x29
    117e:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
    1182:	f8 01       	movw	r30, r16
    1184:	80 a5       	ldd	r24, Z+40	; 0x28
    1186:	91 a5       	ldd	r25, Z+41	; 0x29
    1188:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			m_wMinutes = m_wSetMin;
    118c:	f8 01       	movw	r30, r16
    118e:	84 89       	ldd	r24, Z+20	; 0x14
    1190:	95 89       	ldd	r25, Z+21	; 0x15
    1192:	86 87       	std	Z+14, r24	; 0x0e
    1194:	97 87       	std	Z+15, r25	; 0x0f
			m_wSeconds = m_wSetSec;
    1196:	86 89       	ldd	r24, Z+22	; 0x16
    1198:	97 89       	ldd	r25, Z+23	; 0x17
    119a:	80 8b       	std	Z+16, r24	; 0x10
    119c:	91 8b       	std	Z+17, r25	; 0x11
			m_wMillSec = 0;
    119e:	12 8a       	std	Z+18, r1	; 0x12
    11a0:	13 8a       	std	Z+19, r1	; 0x13
			
			player.UnLock();
    11a2:	84 e9       	ldi	r24, 0x94	; 148
    11a4:	93 e2       	ldi	r25, 0x23	; 35
    11a6:	0e 94 96 0b 	call	0x172c	; 0x172c <_ZN12CSoundPlayer6UnLockEv>
			
			state = APP_SETUP;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	f8 01       	movw	r30, r16
    11ae:	84 87       	std	Z+12, r24	; 0x0c
		break;
    11b0:	8e c1       	rjmp	.+796    	; 0x14ce <_ZN16CLaserControlApp3RunEv+0x794>
		case APP_OnTimerPause:
			// Pause (return to Run) state
			pic_id = swap(PICID_TIMERPAUSED);
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	9a e1       	ldi	r25, 0x1A	; 26
    11b6:	8f 83       	std	Y+7, r24	; 0x07
    11b8:	98 87       	std	Y+8, r25	; 0x08
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    11ba:	22 e0       	ldi	r18, 0x02	; 2
    11bc:	ae 01       	movw	r20, r28
    11be:	49 5f       	subi	r20, 0xF9	; 249
    11c0:	5f 4f       	sbci	r21, 0xFF	; 255
    11c2:	63 e0       	ldi	r22, 0x03	; 3
    11c4:	f8 01       	movw	r30, r16
    11c6:	80 a5       	ldd	r24, Z+40	; 0x28
    11c8:	91 a5       	ldd	r25, Z+41	; 0x29
    11ca:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
    11ce:	f8 01       	movw	r30, r16
    11d0:	80 a5       	ldd	r24, Z+40	; 0x28
    11d2:	91 a5       	ldd	r25, Z+41	; 0x29
    11d4:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			timer.Stop();
    11d8:	8a e2       	ldi	r24, 0x2A	; 42
    11da:	91 e2       	ldi	r25, 0x21	; 33
    11dc:	0e 94 25 0c 	call	0x184a	; 0x184a <_ZN7CTimerC4StopEv>
			
			laserBoard.Relay1Off();
    11e0:	85 e9       	ldi	r24, 0x95	; 149
    11e2:	93 e2       	ldi	r25, 0x23	; 35
    11e4:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_ZN11CLaserBoard9Relay1OffEv>
			
			player.UnLock();
    11e8:	84 e9       	ldi	r24, 0x94	; 148
    11ea:	93 e2       	ldi	r25, 0x23	; 35
    11ec:	0e 94 96 0b 	call	0x172c	; 0x172c <_ZN12CSoundPlayer6UnLockEv>
			
			state = APP_RUN;
    11f0:	83 e0       	ldi	r24, 0x03	; 3
    11f2:	f8 01       	movw	r30, r16
    11f4:	84 87       	std	Z+12, r24	; 0x0c
		break;
    11f6:	6b c1       	rjmp	.+726    	; 0x14ce <_ZN16CLaserControlApp3RunEv+0x794>
		case APP_OnTimerRestart:
			// Restart (return to Run) state
			pic_id = swap(PICID_TIMER);
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	99 e1       	ldi	r25, 0x19	; 25
    11fc:	8f 83       	std	Y+7, r24	; 0x07
    11fe:	98 87       	std	Y+8, r25	; 0x08
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    1200:	22 e0       	ldi	r18, 0x02	; 2
    1202:	ae 01       	movw	r20, r28
    1204:	49 5f       	subi	r20, 0xF9	; 249
    1206:	5f 4f       	sbci	r21, 0xFF	; 255
    1208:	63 e0       	ldi	r22, 0x03	; 3
    120a:	f8 01       	movw	r30, r16
    120c:	80 a5       	ldd	r24, Z+40	; 0x28
    120e:	91 a5       	ldd	r25, Z+41	; 0x29
    1210:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
    1214:	f8 01       	movw	r30, r16
    1216:	80 a5       	ldd	r24, Z+40	; 0x28
    1218:	91 a5       	ldd	r25, Z+41	; 0x29
    121a:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			// Reset
			m_wMinutes = m_wSetMin;
    121e:	f8 01       	movw	r30, r16
    1220:	84 89       	ldd	r24, Z+20	; 0x14
    1222:	95 89       	ldd	r25, Z+21	; 0x15
    1224:	86 87       	std	Z+14, r24	; 0x0e
    1226:	97 87       	std	Z+15, r25	; 0x0f
			m_wSeconds = m_wSetSec;
    1228:	86 89       	ldd	r24, Z+22	; 0x16
    122a:	97 89       	ldd	r25, Z+23	; 0x17
    122c:	80 8b       	std	Z+16, r24	; 0x10
    122e:	91 8b       	std	Z+17, r25	; 0x11
			m_wMillSec = 0;
    1230:	12 8a       	std	Z+18, r1	; 0x12
    1232:	13 8a       	std	Z+19, r1	; 0x13
			
			timer.Stop();
    1234:	8a e2       	ldi	r24, 0x2A	; 42
    1236:	91 e2       	ldi	r25, 0x21	; 33
    1238:	0e 94 25 0c 	call	0x184a	; 0x184a <_ZN7CTimerC4StopEv>
			
			player.SoundStart(1000, 50, 1);
    123c:	21 e0       	ldi	r18, 0x01	; 1
    123e:	42 e3       	ldi	r20, 0x32	; 50
    1240:	50 e0       	ldi	r21, 0x00	; 0
    1242:	68 ee       	ldi	r22, 0xE8	; 232
    1244:	73 e0       	ldi	r23, 0x03	; 3
    1246:	84 e9       	ldi	r24, 0x94	; 148
    1248:	93 e2       	ldi	r25, 0x23	; 35
    124a:	0e 94 14 0b 	call	0x1628	; 0x1628 <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
    124e:	84 e9       	ldi	r24, 0x94	; 148
    1250:	93 e2       	ldi	r25, 0x23	; 35
    1252:	0e 94 48 0b 	call	0x1690	; 0x1690 <_ZN12CSoundPlayer9SoundStopEv>
    1256:	ff ef       	ldi	r31, 0xFF	; 255
    1258:	21 ee       	ldi	r18, 0xE1	; 225
    125a:	84 e0       	ldi	r24, 0x04	; 4
    125c:	f1 50       	subi	r31, 0x01	; 1
    125e:	20 40       	sbci	r18, 0x00	; 0
    1260:	80 40       	sbci	r24, 0x00	; 0
    1262:	e1 f7       	brne	.-8      	; 0x125c <_ZN16CLaserControlApp3RunEv+0x522>
    1264:	00 c0       	rjmp	.+0      	; 0x1266 <_ZN16CLaserControlApp3RunEv+0x52c>
    1266:	00 00       	nop
			_delay_ms(50);
			player.SoundStart(1000, 50, 1);
    1268:	21 e0       	ldi	r18, 0x01	; 1
    126a:	42 e3       	ldi	r20, 0x32	; 50
    126c:	50 e0       	ldi	r21, 0x00	; 0
    126e:	68 ee       	ldi	r22, 0xE8	; 232
    1270:	73 e0       	ldi	r23, 0x03	; 3
    1272:	84 e9       	ldi	r24, 0x94	; 148
    1274:	93 e2       	ldi	r25, 0x23	; 35
    1276:	0e 94 14 0b 	call	0x1628	; 0x1628 <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
    127a:	84 e9       	ldi	r24, 0x94	; 148
    127c:	93 e2       	ldi	r25, 0x23	; 35
    127e:	0e 94 48 0b 	call	0x1690	; 0x1690 <_ZN12CSoundPlayer9SoundStopEv>
    1282:	9f ef       	ldi	r25, 0xFF	; 255
    1284:	e1 ee       	ldi	r30, 0xE1	; 225
    1286:	f4 e0       	ldi	r31, 0x04	; 4
    1288:	91 50       	subi	r25, 0x01	; 1
    128a:	e0 40       	sbci	r30, 0x00	; 0
    128c:	f0 40       	sbci	r31, 0x00	; 0
    128e:	e1 f7       	brne	.-8      	; 0x1288 <_ZN16CLaserControlApp3RunEv+0x54e>
    1290:	00 c0       	rjmp	.+0      	; 0x1292 <_ZN16CLaserControlApp3RunEv+0x558>
    1292:	00 00       	nop
			_delay_ms(50);
			
			// Stop timer
			timer.Start(25000);
    1294:	68 ea       	ldi	r22, 0xA8	; 168
    1296:	71 e6       	ldi	r23, 0x61	; 97
    1298:	8a e2       	ldi	r24, 0x2A	; 42
    129a:	91 e2       	ldi	r25, 0x21	; 33
    129c:	0e 94 18 0c 	call	0x1830	; 0x1830 <_ZN7CTimerC5StartEj>
			laserBoard.Relay1On();
    12a0:	85 e9       	ldi	r24, 0x95	; 149
    12a2:	93 e2       	ldi	r25, 0x23	; 35
    12a4:	0e 94 48 04 	call	0x890	; 0x890 <_ZN11CLaserBoard8Relay1OnEv>
			
			state = APP_RUN;
    12a8:	83 e0       	ldi	r24, 0x03	; 3
    12aa:	f8 01       	movw	r30, r16
    12ac:	84 87       	std	Z+12, r24	; 0x0c
		break;
    12ae:	0f c1       	rjmp	.+542    	; 0x14ce <_ZN16CLaserControlApp3RunEv+0x794>
		case APP_OnHL:
			// Turn HL (return to Setup) state
			pic_id = swap(PICID_SETUP);
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	97 e1       	ldi	r25, 0x17	; 23
    12b4:	8f 83       	std	Y+7, r24	; 0x07
    12b6:	98 87       	std	Y+8, r25	; 0x08
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    12b8:	22 e0       	ldi	r18, 0x02	; 2
    12ba:	ae 01       	movw	r20, r28
    12bc:	49 5f       	subi	r20, 0xF9	; 249
    12be:	5f 4f       	sbci	r21, 0xFF	; 255
    12c0:	63 e0       	ldi	r22, 0x03	; 3
    12c2:	f8 01       	movw	r30, r16
    12c4:	80 a5       	ldd	r24, Z+40	; 0x28
    12c6:	91 a5       	ldd	r25, Z+41	; 0x29
    12c8:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
    12cc:	f8 01       	movw	r30, r16
    12ce:	80 a5       	ldd	r24, Z+40	; 0x28
    12d0:	91 a5       	ldd	r25, Z+41	; 0x29
    12d2:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			static bool hl = true;
			
			if (hl)
    12d6:	80 91 46 20 	lds	r24, 0x2046
    12da:	88 23       	and	r24, r24
    12dc:	29 f0       	breq	.+10     	; 0x12e8 <_ZN16CLaserControlApp3RunEv+0x5ae>
				laserBoard.Relay2On();
    12de:	85 e9       	ldi	r24, 0x95	; 149
    12e0:	93 e2       	ldi	r25, 0x23	; 35
    12e2:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN11CLaserBoard8Relay2OnEv>
    12e6:	04 c0       	rjmp	.+8      	; 0x12f0 <_ZN16CLaserControlApp3RunEv+0x5b6>
			else
				laserBoard.Relay2Off();
    12e8:	85 e9       	ldi	r24, 0x95	; 149
    12ea:	93 e2       	ldi	r25, 0x23	; 35
    12ec:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_ZN11CLaserBoard9Relay2OffEv>
				
			hl = !hl;
    12f0:	80 91 46 20 	lds	r24, 0x2046
    12f4:	91 e0       	ldi	r25, 0x01	; 1
    12f6:	89 27       	eor	r24, r25
    12f8:	80 93 46 20 	sts	0x2046, r24
			
			state = APP_SETUP;
    12fc:	f8 01       	movw	r30, r16
    12fe:	94 87       	std	Z+12, r25	; 0x0c
		break;
    1300:	e6 c0       	rjmp	.+460    	; 0x14ce <_ZN16CLaserControlApp3RunEv+0x794>
		case APP_OnSaveSetup :
			pic_id = swap(PICID_SETUP);
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	97 e1       	ldi	r25, 0x17	; 23
    1306:	8f 83       	std	Y+7, r24	; 0x07
    1308:	98 87       	std	Y+8, r25	; 0x08
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    130a:	22 e0       	ldi	r18, 0x02	; 2
    130c:	ae 01       	movw	r20, r28
    130e:	49 5f       	subi	r20, 0xF9	; 249
    1310:	5f 4f       	sbci	r21, 0xFF	; 255
    1312:	63 e0       	ldi	r22, 0x03	; 3
    1314:	f8 01       	movw	r30, r16
    1316:	80 a5       	ldd	r24, Z+40	; 0x28
    1318:	91 a5       	ldd	r25, Z+41	; 0x29
    131a:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
    131e:	f8 01       	movw	r30, r16
    1320:	80 a5       	ldd	r24, Z+40	; 0x28
    1322:	91 a5       	ldd	r25, Z+41	; 0x29
    1324:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		break;
    1328:	d2 c0       	rjmp	.+420    	; 0x14ce <_ZN16CLaserControlApp3RunEv+0x794>
		
		case APP_SHOWDATABASE:
			//Database.UnMap();
			
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_DATAPAGE, 2);
    132a:	42 e0       	ldi	r20, 0x02	; 2
    132c:	67 e0       	ldi	r22, 0x07	; 7
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	f8 01       	movw	r30, r16
    1332:	80 a5       	ldd	r24, Z+40	; 0x28
    1334:	91 a5       	ldd	r25, Z+41	; 0x29
    1336:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
			m_cpSender->WaitMODBUSTransmitter();
    133a:	f8 01       	movw	r30, r16
    133c:	80 a5       	ldd	r24, Z+40	; 0x28
    133e:	91 a5       	ldd	r25, Z+41	; 0x29
    1340:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSListener();
    1344:	f8 01       	movw	r30, r16
    1346:	80 a5       	ldd	r24, Z+40	; 0x28
    1348:	91 a5       	ldd	r25, Z+41	; 0x29
    134a:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <_ZN9CMBSender18WaitMODBUSListenerEv>
    134e:	ff ef       	ldi	r31, 0xFF	; 255
    1350:	21 ee       	ldi	r18, 0xE1	; 225
    1352:	84 e0       	ldi	r24, 0x04	; 4
    1354:	f1 50       	subi	r31, 0x01	; 1
    1356:	20 40       	sbci	r18, 0x00	; 0
    1358:	80 40       	sbci	r24, 0x00	; 0
    135a:	e1 f7       	brne	.-8      	; 0x1354 <_ZN16CLaserControlApp3RunEv+0x61a>
    135c:	00 c0       	rjmp	.+0      	; 0x135e <_ZN16CLaserControlApp3RunEv+0x624>
    135e:	00 00       	nop
			_delay_ms(50);
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_SEL, 2);
    1360:	42 e0       	ldi	r20, 0x02	; 2
    1362:	68 e0       	ldi	r22, 0x08	; 8
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	f8 01       	movw	r30, r16
    1368:	80 a5       	ldd	r24, Z+40	; 0x28
    136a:	91 a5       	ldd	r25, Z+41	; 0x29
    136c:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
			m_cpSender->WaitMODBUSTransmitter();
    1370:	f8 01       	movw	r30, r16
    1372:	80 a5       	ldd	r24, Z+40	; 0x28
    1374:	91 a5       	ldd	r25, Z+41	; 0x29
    1376:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSListener();
    137a:	f8 01       	movw	r30, r16
    137c:	80 a5       	ldd	r24, Z+40	; 0x28
    137e:	91 a5       	ldd	r25, Z+41	; 0x29
    1380:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <_ZN9CMBSender18WaitMODBUSListenerEv>
    1384:	ff ef       	ldi	r31, 0xFF	; 255
    1386:	21 ee       	ldi	r18, 0xE1	; 225
    1388:	84 e0       	ldi	r24, 0x04	; 4
    138a:	f1 50       	subi	r31, 0x01	; 1
    138c:	20 40       	sbci	r18, 0x00	; 0
    138e:	80 40       	sbci	r24, 0x00	; 0
    1390:	e1 f7       	brne	.-8      	; 0x138a <_ZN16CLaserControlApp3RunEv+0x650>
    1392:	00 c0       	rjmp	.+0      	; 0x1394 <_ZN16CLaserControlApp3RunEv+0x65a>
    1394:	00 00       	nop
			_delay_ms(50);
		
			Database.MapDatabaseToRead(VARIABLE_ADDR_DATABASE, DGUS_DATABASE_ADDR + m_wDatabasePage*PROFILE_SIZE, 0x0C00);
    1396:	f8 01       	movw	r30, r16
    1398:	24 a1       	ldd	r18, Z+36	; 0x24
    139a:	35 a1       	ldd	r19, Z+37	; 0x25
    139c:	32 2f       	mov	r19, r18
    139e:	22 27       	eor	r18, r18
    13a0:	c9 01       	movw	r24, r18
    13a2:	a0 e0       	ldi	r26, 0x00	; 0
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	9c 01       	movw	r18, r24
    13a8:	ad 01       	movw	r20, r26
    13aa:	40 57       	subi	r20, 0x70	; 112
    13ac:	5f 4f       	sbci	r21, 0xFF	; 255
    13ae:	00 e0       	ldi	r16, 0x00	; 0
    13b0:	1c e0       	ldi	r17, 0x0C	; 12
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	71 e0       	ldi	r23, 0x01	; 1
    13b6:	82 e6       	ldi	r24, 0x62	; 98
    13b8:	93 e2       	ldi	r25, 0x23	; 35
    13ba:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
		break;
    13be:	87 c0       	rjmp	.+270    	; 0x14ce <_ZN16CLaserControlApp3RunEv+0x794>
		case APP_READPROFILE:
			Database.MapDatabaseToRead(VARIABLE_ADDR_PROFILE, DGUS_DATABASE_ADDR + (m_wDatabasePage + m_wDatabaseSelInx)*PROFILE_SIZE, 0x0100);
    13c0:	f8 01       	movw	r30, r16
    13c2:	84 a1       	ldd	r24, Z+36	; 0x24
    13c4:	95 a1       	ldd	r25, Z+37	; 0x25
    13c6:	26 a1       	ldd	r18, Z+38	; 0x26
    13c8:	37 a1       	ldd	r19, Z+39	; 0x27
    13ca:	28 0f       	add	r18, r24
    13cc:	39 1f       	adc	r19, r25
    13ce:	32 2f       	mov	r19, r18
    13d0:	22 27       	eor	r18, r18
    13d2:	c9 01       	movw	r24, r18
    13d4:	a0 e0       	ldi	r26, 0x00	; 0
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	9c 01       	movw	r18, r24
    13da:	ad 01       	movw	r20, r26
    13dc:	40 57       	subi	r20, 0x70	; 112
    13de:	5f 4f       	sbci	r21, 0xFF	; 255
    13e0:	00 e0       	ldi	r16, 0x00	; 0
    13e2:	11 e0       	ldi	r17, 0x01	; 1
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	7d e0       	ldi	r23, 0x0D	; 13
    13e8:	82 e6       	ldi	r24, 0x62	; 98
    13ea:	93 e2       	ldi	r25, 0x23	; 35
    13ec:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
		break;
    13f0:	6e c0       	rjmp	.+220    	; 0x14ce <_ZN16CLaserControlApp3RunEv+0x794>
		case APP_SAVEPROFILE:
			Database.MapDatabaseToWrite(VARIABLE_ADDR_PROFILE, DGUS_DATABASE_ADDR + (m_wDatabasePage + m_wDatabaseSelInx)*PROFILE_SIZE, 0x0100);
    13f2:	f8 01       	movw	r30, r16
    13f4:	84 a1       	ldd	r24, Z+36	; 0x24
    13f6:	95 a1       	ldd	r25, Z+37	; 0x25
    13f8:	26 a1       	ldd	r18, Z+38	; 0x26
    13fa:	37 a1       	ldd	r19, Z+39	; 0x27
    13fc:	28 0f       	add	r18, r24
    13fe:	39 1f       	adc	r19, r25
    1400:	32 2f       	mov	r19, r18
    1402:	22 27       	eor	r18, r18
    1404:	c9 01       	movw	r24, r18
    1406:	a0 e0       	ldi	r26, 0x00	; 0
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	9c 01       	movw	r18, r24
    140c:	ad 01       	movw	r20, r26
    140e:	40 57       	subi	r20, 0x70	; 112
    1410:	5f 4f       	sbci	r21, 0xFF	; 255
    1412:	00 e0       	ldi	r16, 0x00	; 0
    1414:	11 e0       	ldi	r17, 0x01	; 1
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	7d e0       	ldi	r23, 0x0D	; 13
    141a:	82 e6       	ldi	r24, 0x62	; 98
    141c:	93 e2       	ldi	r25, 0x23	; 35
    141e:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>
		break;
    1422:	55 c0       	rjmp	.+170    	; 0x14ce <_ZN16CLaserControlApp3RunEv+0x794>
		case APP_UNMAPDATABASE:
			Database.UnMap();
    1424:	82 e6       	ldi	r24, 0x62	; 98
    1426:	93 e2       	ldi	r25, 0x23	; 35
    1428:	0e 94 1b 03 	call	0x636	; 0x636 <_ZN13CDGUSDatabase5UnMapEv>
		break;
    142c:	50 c0       	rjmp	.+160    	; 0x14ce <_ZN16CLaserControlApp3RunEv+0x794>
		
		case APP_PASSWORD:
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_PASSWORD, 2);
    142e:	42 e0       	ldi	r20, 0x02	; 2
    1430:	60 e1       	ldi	r22, 0x10	; 16
    1432:	70 e0       	ldi	r23, 0x00	; 0
    1434:	f8 01       	movw	r30, r16
    1436:	80 a5       	ldd	r24, Z+40	; 0x28
    1438:	91 a5       	ldd	r25, Z+41	; 0x29
    143a:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
			m_cpSender->WaitMODBUSTransmitter();
    143e:	f8 01       	movw	r30, r16
    1440:	80 a5       	ldd	r24, Z+40	; 0x28
    1442:	91 a5       	ldd	r25, Z+41	; 0x29
    1444:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSListener();
    1448:	f8 01       	movw	r30, r16
    144a:	80 a5       	ldd	r24, Z+40	; 0x28
    144c:	91 a5       	ldd	r25, Z+41	; 0x29
    144e:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <_ZN9CMBSender18WaitMODBUSListenerEv>
    1452:	ff ef       	ldi	r31, 0xFF	; 255
    1454:	21 ee       	ldi	r18, 0xE1	; 225
    1456:	84 e0       	ldi	r24, 0x04	; 4
    1458:	f1 50       	subi	r31, 0x01	; 1
    145a:	20 40       	sbci	r18, 0x00	; 0
    145c:	80 40       	sbci	r24, 0x00	; 0
    145e:	e1 f7       	brne	.-8      	; 0x1458 <_ZN16CLaserControlApp3RunEv+0x71e>
    1460:	00 c0       	rjmp	.+0      	; 0x1462 <_ZN16CLaserControlApp3RunEv+0x728>
    1462:	00 00       	nop
			_delay_ms(50);
			
			if (strcmp((char*)m_wPassword, "1234") == 0)
    1464:	6f e6       	ldi	r22, 0x6F	; 111
    1466:	70 e2       	ldi	r23, 0x20	; 32
    1468:	c8 01       	movw	r24, r16
    146a:	4a 96       	adiw	r24, 0x1a	; 26
    146c:	0e 94 83 27 	call	0x4f06	; 0x4f06 <strcmp>
    1470:	89 2b       	or	r24, r25
    1472:	69 f5       	brne	.+90     	; 0x14ce <_ZN16CLaserControlApp3RunEv+0x794>
			{
				pic_id = swap(PICID_Service);
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	93 e2       	ldi	r25, 0x23	; 35
    1478:	8f 83       	std	Y+7, r24	; 0x07
    147a:	98 87       	std	Y+8, r25	; 0x08
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    147c:	22 e0       	ldi	r18, 0x02	; 2
    147e:	ae 01       	movw	r20, r28
    1480:	49 5f       	subi	r20, 0xF9	; 249
    1482:	5f 4f       	sbci	r21, 0xFF	; 255
    1484:	63 e0       	ldi	r22, 0x03	; 3
    1486:	f8 01       	movw	r30, r16
    1488:	80 a5       	ldd	r24, Z+40	; 0x28
    148a:	91 a5       	ldd	r25, Z+41	; 0x29
    148c:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
    1490:	f8 01       	movw	r30, r16
    1492:	80 a5       	ldd	r24, Z+40	; 0x28
    1494:	91 a5       	ldd	r25, Z+41	; 0x29
    1496:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
    149a:	19 c0       	rjmp	.+50     	; 0x14ce <_ZN16CLaserControlApp3RunEv+0x794>
			}
		break;
		
		default:
			Database.UnMap();
    149c:	82 e6       	ldi	r24, 0x62	; 98
    149e:	93 e2       	ldi	r25, 0x23	; 35
    14a0:	0e 94 1b 03 	call	0x636	; 0x636 <_ZN13CDGUSDatabase5UnMapEv>
			m_wPassword[0] = 0;
    14a4:	f8 01       	movw	r30, r16
    14a6:	12 8e       	std	Z+26, r1	; 0x1a
			m_wPassword[1] = 0;
    14a8:	13 8e       	std	Z+27, r1	; 0x1b
			m_wPassword[2] = 0;
    14aa:	14 8e       	std	Z+28, r1	; 0x1c
			m_wPassword[3] = 0;
    14ac:	15 8e       	std	Z+29, r1	; 0x1d
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_PASSWORD, (uint16_t*)&m_wPassword, 2);
    14ae:	a8 01       	movw	r20, r16
    14b0:	46 5e       	subi	r20, 0xE6	; 230
    14b2:	5f 4f       	sbci	r21, 0xFF	; 255
    14b4:	22 e0       	ldi	r18, 0x02	; 2
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	60 e1       	ldi	r22, 0x10	; 16
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	80 a5       	ldd	r24, Z+40	; 0x28
    14be:	91 a5       	ldd	r25, Z+41	; 0x29
    14c0:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
    14c4:	f8 01       	movw	r30, r16
    14c6:	80 a5       	ldd	r24, Z+40	; 0x28
    14c8:	91 a5       	ldd	r25, Z+41	; 0x29
    14ca:	0e 94 90 25 	call	0x4b20	; 0x4b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		break;
	}
}
    14ce:	28 96       	adiw	r28, 0x08	; 8
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	de bf       	out	0x3e, r29	; 62
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	1f 91       	pop	r17
    14da:	0f 91       	pop	r16
    14dc:	08 95       	ret

000014de <_ZN16CLaserControlApp9OnTimeoutEv>:
	m_wMillSec-=10;
}

void CLaserControlApp::OnTimeout()
{
	timer.Stop();
    14de:	8a e2       	ldi	r24, 0x2A	; 42
    14e0:	91 e2       	ldi	r25, 0x21	; 33
    14e2:	0e 94 25 0c 	call	0x184a	; 0x184a <_ZN7CTimerC4StopEv>
	laserBoard.Relay1Off();
    14e6:	85 e9       	ldi	r24, 0x95	; 149
    14e8:	93 e2       	ldi	r25, 0x23	; 35
    14ea:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_ZN11CLaserBoard9Relay1OffEv>
    14ee:	08 95       	ret

000014f0 <_ZN16CLaserControlApp7OnTimerEv>:
		break;
	}
}

void CLaserControlApp::OnTimer()
{
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	ec 01       	movw	r28, r24
	if (m_wMillSec == 0)
    14f6:	8a 89       	ldd	r24, Y+18	; 0x12
    14f8:	9b 89       	ldd	r25, Y+19	; 0x13
    14fa:	89 2b       	or	r24, r25
    14fc:	c9 f5       	brne	.+114    	; 0x1570 <_ZN16CLaserControlApp7OnTimerEv+0x80>
	{
		if (m_wSeconds == 0)
    14fe:	88 89       	ldd	r24, Y+16	; 0x10
    1500:	99 89       	ldd	r25, Y+17	; 0x11
    1502:	89 2b       	or	r24, r25
    1504:	f1 f4       	brne	.+60     	; 0x1542 <_ZN16CLaserControlApp7OnTimerEv+0x52>
		{
			if (m_wMinutes == 0)
    1506:	8e 85       	ldd	r24, Y+14	; 0x0e
    1508:	9f 85       	ldd	r25, Y+15	; 0x0f
    150a:	89 2b       	or	r24, r25
    150c:	89 f4       	brne	.+34     	; 0x1530 <_ZN16CLaserControlApp7OnTimerEv+0x40>
			{
				OnTimeout();
    150e:	ce 01       	movw	r24, r28
    1510:	0e 94 6f 0a 	call	0x14de	; 0x14de <_ZN16CLaserControlApp9OnTimeoutEv>
				player.SoundStart(1000, 1000, 0);
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	48 ee       	ldi	r20, 0xE8	; 232
    1518:	53 e0       	ldi	r21, 0x03	; 3
    151a:	68 ee       	ldi	r22, 0xE8	; 232
    151c:	73 e0       	ldi	r23, 0x03	; 3
    151e:	84 e9       	ldi	r24, 0x94	; 148
    1520:	93 e2       	ldi	r25, 0x23	; 35
    1522:	0e 94 14 0b 	call	0x1628	; 0x1628 <_ZN12CSoundPlayer10SoundStartEjjh>
				player.SoundStop();
    1526:	84 e9       	ldi	r24, 0x94	; 148
    1528:	93 e2       	ldi	r25, 0x23	; 35
    152a:	0e 94 48 0b 	call	0x1690	; 0x1690 <_ZN12CSoundPlayer9SoundStopEv>
				//player.beep(1000, 1000);
				return;
    152e:	55 c0       	rjmp	.+170    	; 0x15da <_ZN16CLaserControlApp7OnTimerEv+0xea>
			}
			m_wSeconds = 60;
    1530:	8c e3       	ldi	r24, 0x3C	; 60
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	88 8b       	std	Y+16, r24	; 0x10
    1536:	99 8b       	std	Y+17, r25	; 0x11
			m_wMinutes--;
    1538:	8e 85       	ldd	r24, Y+14	; 0x0e
    153a:	9f 85       	ldd	r25, Y+15	; 0x0f
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	8e 87       	std	Y+14, r24	; 0x0e
    1540:	9f 87       	std	Y+15, r25	; 0x0f
		}
		m_wMillSec = 100; // Every 10 ms
    1542:	84 e6       	ldi	r24, 0x64	; 100
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	8a 8b       	std	Y+18, r24	; 0x12
    1548:	9b 8b       	std	Y+19, r25	; 0x13
		m_wSeconds--;
    154a:	88 89       	ldd	r24, Y+16	; 0x10
    154c:	99 89       	ldd	r25, Y+17	; 0x11
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	88 8b       	std	Y+16, r24	; 0x10
    1552:	99 8b       	std	Y+17, r25	; 0x11
		if (m_wMinutes == 0 && m_wSeconds < 10)
    1554:	8e 85       	ldd	r24, Y+14	; 0x0e
    1556:	9f 85       	ldd	r25, Y+15	; 0x0f
    1558:	89 2b       	or	r24, r25
    155a:	81 f4       	brne	.+32     	; 0x157c <_ZN16CLaserControlApp7OnTimerEv+0x8c>
    155c:	88 89       	ldd	r24, Y+16	; 0x10
    155e:	99 89       	ldd	r25, Y+17	; 0x11
    1560:	0a 97       	sbiw	r24, 0x0a	; 10
    1562:	d0 f0       	brcs	.+52     	; 0x1598 <_ZN16CLaserControlApp7OnTimerEv+0xa8>
    1564:	0b c0       	rjmp	.+22     	; 0x157c <_ZN16CLaserControlApp7OnTimerEv+0x8c>
		{
			if (m_wMinutes == 0 && m_wSeconds < 5)
    1566:	88 89       	ldd	r24, Y+16	; 0x10
    1568:	99 89       	ldd	r25, Y+17	; 0x11
    156a:	05 97       	sbiw	r24, 0x05	; 5
    156c:	d0 f0       	brcs	.+52     	; 0x15a2 <_ZN16CLaserControlApp7OnTimerEv+0xb2>
    156e:	27 c0       	rjmp	.+78     	; 0x15be <_ZN16CLaserControlApp7OnTimerEv+0xce>
			player.SoundStart(1000, 25, 2);
			player.SoundStop();
			//player.beep(1000, 25);
		}
	}
	m_wMillSec-=10;
    1570:	8a 89       	ldd	r24, Y+18	; 0x12
    1572:	9b 89       	ldd	r25, Y+19	; 0x13
    1574:	0a 97       	sbiw	r24, 0x0a	; 10
    1576:	8a 8b       	std	Y+18, r24	; 0x12
    1578:	9b 8b       	std	Y+19, r25	; 0x13
    157a:	2f c0       	rjmp	.+94     	; 0x15da <_ZN16CLaserControlApp7OnTimerEv+0xea>
				//player.beep(1000, 50);
			}
		}
		else
		{
			player.SoundStart(1000, 25, 2);
    157c:	22 e0       	ldi	r18, 0x02	; 2
    157e:	49 e1       	ldi	r20, 0x19	; 25
    1580:	50 e0       	ldi	r21, 0x00	; 0
    1582:	68 ee       	ldi	r22, 0xE8	; 232
    1584:	73 e0       	ldi	r23, 0x03	; 3
    1586:	84 e9       	ldi	r24, 0x94	; 148
    1588:	93 e2       	ldi	r25, 0x23	; 35
    158a:	0e 94 14 0b 	call	0x1628	; 0x1628 <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
    158e:	84 e9       	ldi	r24, 0x94	; 148
    1590:	93 e2       	ldi	r25, 0x23	; 35
    1592:	0e 94 48 0b 	call	0x1690	; 0x1690 <_ZN12CSoundPlayer9SoundStopEv>
    1596:	ec cf       	rjmp	.-40     	; 0x1570 <_ZN16CLaserControlApp7OnTimerEv+0x80>
		}
		m_wMillSec = 100; // Every 10 ms
		m_wSeconds--;
		if (m_wMinutes == 0 && m_wSeconds < 10)
		{
			if (m_wMinutes == 0 && m_wSeconds < 5)
    1598:	8e 85       	ldd	r24, Y+14	; 0x0e
    159a:	9f 85       	ldd	r25, Y+15	; 0x0f
    159c:	89 2b       	or	r24, r25
    159e:	19 f3       	breq	.-58     	; 0x1566 <_ZN16CLaserControlApp7OnTimerEv+0x76>
    15a0:	0e c0       	rjmp	.+28     	; 0x15be <_ZN16CLaserControlApp7OnTimerEv+0xce>
			{
				player.SoundStart(1000, 100, 0);
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	44 e6       	ldi	r20, 0x64	; 100
    15a6:	50 e0       	ldi	r21, 0x00	; 0
    15a8:	68 ee       	ldi	r22, 0xE8	; 232
    15aa:	73 e0       	ldi	r23, 0x03	; 3
    15ac:	84 e9       	ldi	r24, 0x94	; 148
    15ae:	93 e2       	ldi	r25, 0x23	; 35
    15b0:	0e 94 14 0b 	call	0x1628	; 0x1628 <_ZN12CSoundPlayer10SoundStartEjjh>
				player.SoundStop();
    15b4:	84 e9       	ldi	r24, 0x94	; 148
    15b6:	93 e2       	ldi	r25, 0x23	; 35
    15b8:	0e 94 48 0b 	call	0x1690	; 0x1690 <_ZN12CSoundPlayer9SoundStopEv>
    15bc:	d9 cf       	rjmp	.-78     	; 0x1570 <_ZN16CLaserControlApp7OnTimerEv+0x80>
				//player.beep(1000, 100);
			}
			else
			{
				player.SoundStart(1000, 50, 1);
    15be:	21 e0       	ldi	r18, 0x01	; 1
    15c0:	42 e3       	ldi	r20, 0x32	; 50
    15c2:	50 e0       	ldi	r21, 0x00	; 0
    15c4:	68 ee       	ldi	r22, 0xE8	; 232
    15c6:	73 e0       	ldi	r23, 0x03	; 3
    15c8:	84 e9       	ldi	r24, 0x94	; 148
    15ca:	93 e2       	ldi	r25, 0x23	; 35
    15cc:	0e 94 14 0b 	call	0x1628	; 0x1628 <_ZN12CSoundPlayer10SoundStartEjjh>
				player.SoundStop();
    15d0:	84 e9       	ldi	r24, 0x94	; 148
    15d2:	93 e2       	ldi	r25, 0x23	; 35
    15d4:	0e 94 48 0b 	call	0x1690	; 0x1690 <_ZN12CSoundPlayer9SoundStopEv>
    15d8:	cb cf       	rjmp	.-106    	; 0x1570 <_ZN16CLaserControlApp7OnTimerEv+0x80>
			player.SoundStop();
			//player.beep(1000, 25);
		}
	}
	m_wMillSec-=10;
}
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	08 95       	ret

000015e0 <_ZN16CLaserControlApp13OnTimerStaticEPv>:
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnTimer();
    15e0:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_ZN16CLaserControlApp7OnTimerEv>
    15e4:	08 95       	ret

000015e6 <_ZN12CSoundPlayerC1Ev>:
	SoundStart(note, duration, 3);
	SoundStop();
}

// default constructor
CSoundPlayer::CSoundPlayer()
    15e6:	08 95       	ret

000015e8 <_ZN12CSoundPlayerD1Ev>:
{
} //CSoundPlayer

// default destructor
CSoundPlayer::~CSoundPlayer()
    15e8:	08 95       	ret

000015ea <_ZN12CSoundPlayer19InitializeToneTimerEv>:
} //~CSoundPlayer

void CSoundPlayer::InitializeToneTimer()
{
	// Start timer 4MHz tick rate
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;
    15ea:	e0 e0       	ldi	r30, 0x00	; 0
    15ec:	fa e0       	ldi	r31, 0x0A	; 10
    15ee:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE0.CTRLB = TC0_CCDEN_bm | TC0_CCCEN_bm | TC_WGMODE_DS_B_gc;
    15f0:	87 ec       	ldi	r24, 0xC7	; 199
    15f2:	81 83       	std	Z+1, r24	; 0x01
	
	// No events
	TCE0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    15f4:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1.000 Hz PWM
	TCE0.PER = PERIOD_1Hz;
    15f6:	84 e2       	ldi	r24, 0x24	; 36
    15f8:	94 ef       	ldi	r25, 0xF4	; 244
    15fa:	86 a3       	std	Z+38, r24	; 0x26
    15fc:	97 a3       	std	Z+39, r25	; 0x27
	
	// Set 50% duty cycle
	TCE0.CCC = 0;
    15fe:	14 a6       	std	Z+44, r1	; 0x2c
    1600:	15 a6       	std	Z+45, r1	; 0x2d
	TCE0.CCD = 0;//MAXVOLUME_CC;
    1602:	16 a6       	std	Z+46, r1	; 0x2e
    1604:	17 a6       	std	Z+47, r1	; 0x2f
	
	TCE0.CTRLA = TC_CLKSEL_DIV256_gc;	//Start tone timer;
    1606:	86 e0       	ldi	r24, 0x06	; 6
    1608:	80 83       	st	Z, r24
	
	// Disable interrupt
	TCE0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    160a:	16 82       	std	Z+6, r1	; 0x06
	TCE0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    160c:	17 82       	std	Z+7, r1	; 0x07
    160e:	08 95       	ret

00001610 <_ZN12CSoundPlayer23InitializeDurationTimerEv>:

void CSoundPlayer::InitializeDurationTimer()
{
	// Start timer 4MHz tick rate
	//TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;
    1610:	e0 e4       	ldi	r30, 0x40	; 64
    1612:	fa e0       	ldi	r31, 0x0A	; 10
    1614:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE1.CTRLB = TC_WGMODE_NORMAL_gc;
    1616:	11 82       	std	Z+1, r1	; 0x01
	
	// No events
	TCE1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    1618:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1s
	TCE1.PER = DELAYPERIOD_1s;
    161a:	84 e2       	ldi	r24, 0x24	; 36
    161c:	94 ef       	ldi	r25, 0xF4	; 244
    161e:	86 a3       	std	Z+38, r24	; 0x26
    1620:	97 a3       	std	Z+39, r25	; 0x27
	
	// Disable interrupt
	TCE1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    1622:	16 82       	std	Z+6, r1	; 0x06
	TCE1.INTCTRLB = TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    1624:	17 82       	std	Z+7, r1	; 0x07
    1626:	08 95       	ret

00001628 <_ZN12CSoundPlayer10SoundStartEjjh>:
}

void CSoundPlayer::SoundStart(uint16_t freq, uint16_t time, uint8_t volume)
{
    1628:	0f 93       	push	r16
    162a:	1f 93       	push	r17
    162c:	cf 93       	push	r28
    162e:	8a 01       	movw	r16, r20
    1630:	c2 2f       	mov	r28, r18
	if (lock) return;
    1632:	fc 01       	movw	r30, r24
    1634:	80 81       	ld	r24, Z
    1636:	81 11       	cpse	r24, r1
    1638:	27 c0       	rjmp	.+78     	; 0x1688 <_ZN12CSoundPlayer10SoundStartEjjh+0x60>
	
	uint16_t period_tc0 = PERIOD_1Hz/freq;
    163a:	9b 01       	movw	r18, r22
    163c:	40 e0       	ldi	r20, 0x00	; 0
    163e:	50 e0       	ldi	r21, 0x00	; 0
    1640:	64 e2       	ldi	r22, 0x24	; 36
    1642:	74 ef       	ldi	r23, 0xF4	; 244
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 94 f5 25 	call	0x4bea	; 0x4bea <__divmodsi4>
	uint16_t period_tc1 = DELAYPERIOD_A1s * time + (time >> DELAYPERIOD_S1s);
    164c:	b8 01       	movw	r22, r16
    164e:	76 95       	lsr	r23
    1650:	67 95       	ror	r22
    1652:	ee e3       	ldi	r30, 0x3E	; 62
    1654:	e0 9f       	mul	r30, r16
    1656:	c0 01       	movw	r24, r0
    1658:	e1 9f       	mul	r30, r17
    165a:	90 0d       	add	r25, r0
    165c:	11 24       	eor	r1, r1
    165e:	86 0f       	add	r24, r22
    1660:	97 1f       	adc	r25, r23
	
	// Config
	TCE0.CCD = period_tc0 >> (volume + 1);
    1662:	cf 5f       	subi	r28, 0xFF	; 255
    1664:	b9 01       	movw	r22, r18
    1666:	02 c0       	rjmp	.+4      	; 0x166c <_ZN12CSoundPlayer10SoundStartEjjh+0x44>
    1668:	76 95       	lsr	r23
    166a:	67 95       	ror	r22
    166c:	ca 95       	dec	r28
    166e:	e2 f7       	brpl	.-8      	; 0x1668 <_ZN12CSoundPlayer10SoundStartEjjh+0x40>
    1670:	e0 e0       	ldi	r30, 0x00	; 0
    1672:	fa e0       	ldi	r31, 0x0A	; 10
    1674:	66 a7       	std	Z+46, r22	; 0x2e
    1676:	77 a7       	std	Z+47, r23	; 0x2f
	TCE0.PER = period_tc0;
    1678:	26 a3       	std	Z+38, r18	; 0x26
    167a:	37 a3       	std	Z+39, r19	; 0x27
	TCE1.PER = period_tc1;
    167c:	e0 e4       	ldi	r30, 0x40	; 64
    167e:	fa e0       	ldi	r31, 0x0A	; 10
    1680:	86 a3       	std	Z+38, r24	; 0x26
    1682:	97 a3       	std	Z+39, r25	; 0x27
	
	//Start timer
	//TCE0.CTRLA = TC_CLKSEL_DIV256_gc;	//Start tone timer
	TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;	//Start duration timer
    1684:	87 e0       	ldi	r24, 0x07	; 7
    1686:	80 83       	st	Z, r24
}
    1688:	cf 91       	pop	r28
    168a:	1f 91       	pop	r17
    168c:	0f 91       	pop	r16
    168e:	08 95       	ret

00001690 <_ZN12CSoundPlayer9SoundStopEv>:

void CSoundPlayer::SoundStop()
{
	if (lock) return;
    1690:	fc 01       	movw	r30, r24
    1692:	80 81       	ld	r24, Z
    1694:	81 11       	cpse	r24, r1
    1696:	20 c0       	rjmp	.+64     	; 0x16d8 <_ZN12CSoundPlayer9SoundStopEv+0x48>
	
	while (!(TCE1.INTFLAGS & TC0_OVFIF_bm));
    1698:	e0 e4       	ldi	r30, 0x40	; 64
    169a:	fa e0       	ldi	r31, 0x0A	; 10
    169c:	84 85       	ldd	r24, Z+12	; 0x0c
    169e:	80 ff       	sbrs	r24, 0
    16a0:	fd cf       	rjmp	.-6      	; 0x169c <_ZN12CSoundPlayer9SoundStopEv+0xc>
	TCE1.INTFLAGS &= TC0_OVFIF_bm;
    16a2:	e0 e4       	ldi	r30, 0x40	; 64
    16a4:	fa e0       	ldi	r31, 0x0A	; 10
    16a6:	84 85       	ldd	r24, Z+12	; 0x0c
    16a8:	81 70       	andi	r24, 0x01	; 1
    16aa:	84 87       	std	Z+12, r24	; 0x0c

	//Stop timer
	//TCE0.CTRLA = TC_CLKSEL_OFF_gc;		//Stop tone timer
	TCE0.CCD = 0;
    16ac:	a0 e0       	ldi	r26, 0x00	; 0
    16ae:	ba e0       	ldi	r27, 0x0A	; 10
    16b0:	9e 96       	adiw	r26, 0x2e	; 46
    16b2:	1d 92       	st	X+, r1
    16b4:	1c 92       	st	X, r1
    16b6:	9f 97       	sbiw	r26, 0x2f	; 47
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;		//Stop duration timer
    16b8:	10 82       	st	Z, r1

	// Reset duration timer
	TCE1.CNT = 0;
    16ba:	10 a2       	std	Z+32, r1	; 0x20
    16bc:	11 a2       	std	Z+33, r1	; 0x21
	TCE0.CNT = 0;
    16be:	90 96       	adiw	r26, 0x20	; 32
    16c0:	1d 92       	st	X+, r1
    16c2:	1c 92       	st	X, r1
    16c4:	91 97       	sbiw	r26, 0x21	; 33
    16c6:	ff ef       	ldi	r31, 0xFF	; 255
    16c8:	23 ef       	ldi	r18, 0xF3	; 243
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	f1 50       	subi	r31, 0x01	; 1
    16ce:	20 40       	sbci	r18, 0x00	; 0
    16d0:	80 40       	sbci	r24, 0x00	; 0
    16d2:	e1 f7       	brne	.-8      	; 0x16cc <_ZN12CSoundPlayer9SoundStopEv+0x3c>
    16d4:	00 c0       	rjmp	.+0      	; 0x16d6 <_ZN12CSoundPlayer9SoundStopEv+0x46>
    16d6:	00 00       	nop
    16d8:	08 95       	ret

000016da <_ZN12CSoundPlayer4beepEjj>:

extern void __builtin_avr_delay_cycles(unsigned long);

//This function generates the square wave that makes the piezo speaker sound at a determinated frequency.
void CSoundPlayer::beep(uint16_t note, uint16_t duration)
{
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	ec 01       	movw	r28, r24
	SoundStart(note, duration, 3);
    16e0:	23 e0       	ldi	r18, 0x03	; 3
    16e2:	0e 94 14 0b 	call	0x1628	; 0x1628 <_ZN12CSoundPlayer10SoundStartEjjh>
	SoundStop();
    16e6:	ce 01       	movw	r24, r28
    16e8:	0e 94 48 0b 	call	0x1690	; 0x1690 <_ZN12CSoundPlayer9SoundStopEv>
}
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	08 95       	ret

000016f2 <_ZN12CSoundPlayer4LockEv>:
	_delay_ms(20);
} 

void CSoundPlayer::Lock()
{
	lock = true;
    16f2:	21 e0       	ldi	r18, 0x01	; 1
    16f4:	fc 01       	movw	r30, r24
    16f6:	20 83       	st	Z, r18
	TCE0.CTRLA = TC_CLKSEL_DIV256_gc;
    16f8:	86 e0       	ldi	r24, 0x06	; 6
    16fa:	80 93 00 0a 	sts	0x0A00, r24
    16fe:	08 95       	ret

00001700 <_ZN12CSoundPlayer6SetPWMEj>:
}

void CSoundPlayer::SetPWM(uint16_t duty_cycle)
{
	TCE0.PER = 1024;	
    1700:	e0 e0       	ldi	r30, 0x00	; 0
    1702:	fa e0       	ldi	r31, 0x0A	; 10
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	94 e0       	ldi	r25, 0x04	; 4
    1708:	86 a3       	std	Z+38, r24	; 0x26
    170a:	97 a3       	std	Z+39, r25	; 0x27
	TCE0.CCC = duty_cycle * 10;
    170c:	cb 01       	movw	r24, r22
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	66 0f       	add	r22, r22
    1714:	77 1f       	adc	r23, r23
    1716:	66 0f       	add	r22, r22
    1718:	77 1f       	adc	r23, r23
    171a:	66 0f       	add	r22, r22
    171c:	77 1f       	adc	r23, r23
    171e:	68 0f       	add	r22, r24
    1720:	79 1f       	adc	r23, r25
    1722:	64 a7       	std	Z+44, r22	; 0x2c
    1724:	75 a7       	std	Z+45, r23	; 0x2d
	TCE0.CTRLA = TC_CLKSEL_DIV4_gc;
    1726:	83 e0       	ldi	r24, 0x03	; 3
    1728:	80 83       	st	Z, r24
    172a:	08 95       	ret

0000172c <_ZN12CSoundPlayer6UnLockEv>:
}

void CSoundPlayer::UnLock()
{
	lock = false;
    172c:	fc 01       	movw	r30, r24
    172e:	10 82       	st	Z, r1
	TCE0.CTRLA = TC_CLKSEL_DIV256_gc;
    1730:	e0 e0       	ldi	r30, 0x00	; 0
    1732:	fa e0       	ldi	r31, 0x0A	; 10
    1734:	86 e0       	ldi	r24, 0x06	; 6
    1736:	80 83       	st	Z, r24
	TCE0.CCC = 0;
    1738:	14 a6       	std	Z+44, r1	; 0x2c
    173a:	15 a6       	std	Z+45, r1	; 0x2d
    173c:	08 95       	ret

0000173e <_ZN12CSoundPlayer10InitializeEv>:
}

void CSoundPlayer::Initialize()
{
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	ec 01       	movw	r28, r24
	InitializeToneTimer();
    1744:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <_ZN12CSoundPlayer19InitializeToneTimerEv>
	InitializeDurationTimer();
    1748:	ce 01       	movw	r24, r28
    174a:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN12CSoundPlayer23InitializeDurationTimerEv>
}
    174e:	df 91       	pop	r29
    1750:	cf 91       	pop	r28
    1752:	08 95       	ret

00001754 <_ZN12CSoundPlayer4PlayEv>:

void CSoundPlayer::Play()
{
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
	if (lock) return;
    1758:	fc 01       	movw	r30, r24
    175a:	20 81       	ld	r18, Z
    175c:	21 11       	cpse	r18, r1
    175e:	4a c0       	rjmp	.+148    	; 0x17f4 <_ZN12CSoundPlayer4PlayEv+0xa0>
    1760:	ec 01       	movw	r28, r24
	cli();
    1762:	f8 94       	cli

	beep(a, 500);
    1764:	44 ef       	ldi	r20, 0xF4	; 244
    1766:	51 e0       	ldi	r21, 0x01	; 1
    1768:	68 eb       	ldi	r22, 0xB8	; 184
    176a:	71 e0       	ldi	r23, 0x01	; 1
    176c:	0e 94 6d 0b 	call	0x16da	; 0x16da <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
    1770:	44 ef       	ldi	r20, 0xF4	; 244
    1772:	51 e0       	ldi	r21, 0x01	; 1
    1774:	68 eb       	ldi	r22, 0xB8	; 184
    1776:	71 e0       	ldi	r23, 0x01	; 1
    1778:	ce 01       	movw	r24, r28
    177a:	0e 94 6d 0b 	call	0x16da	; 0x16da <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
    177e:	44 ef       	ldi	r20, 0xF4	; 244
    1780:	51 e0       	ldi	r21, 0x01	; 1
    1782:	68 eb       	ldi	r22, 0xB8	; 184
    1784:	71 e0       	ldi	r23, 0x01	; 1
    1786:	ce 01       	movw	r24, r28
    1788:	0e 94 6d 0b 	call	0x16da	; 0x16da <_ZN12CSoundPlayer4beepEjj>
	beep(f, 350);
    178c:	4e e5       	ldi	r20, 0x5E	; 94
    178e:	51 e0       	ldi	r21, 0x01	; 1
    1790:	6d e5       	ldi	r22, 0x5D	; 93
    1792:	71 e0       	ldi	r23, 0x01	; 1
    1794:	ce 01       	movw	r24, r28
    1796:	0e 94 6d 0b 	call	0x16da	; 0x16da <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 150);
    179a:	46 e9       	ldi	r20, 0x96	; 150
    179c:	50 e0       	ldi	r21, 0x00	; 0
    179e:	6b e0       	ldi	r22, 0x0B	; 11
    17a0:	72 e0       	ldi	r23, 0x02	; 2
    17a2:	ce 01       	movw	r24, r28
    17a4:	0e 94 6d 0b 	call	0x16da	; 0x16da <_ZN12CSoundPlayer4beepEjj>
	beep(a, 500);
    17a8:	44 ef       	ldi	r20, 0xF4	; 244
    17aa:	51 e0       	ldi	r21, 0x01	; 1
    17ac:	68 eb       	ldi	r22, 0xB8	; 184
    17ae:	71 e0       	ldi	r23, 0x01	; 1
    17b0:	ce 01       	movw	r24, r28
    17b2:	0e 94 6d 0b 	call	0x16da	; 0x16da <_ZN12CSoundPlayer4beepEjj>
	beep(f, 350);
    17b6:	4e e5       	ldi	r20, 0x5E	; 94
    17b8:	51 e0       	ldi	r21, 0x01	; 1
    17ba:	6d e5       	ldi	r22, 0x5D	; 93
    17bc:	71 e0       	ldi	r23, 0x01	; 1
    17be:	ce 01       	movw	r24, r28
    17c0:	0e 94 6d 0b 	call	0x16da	; 0x16da <_ZN12CSoundPlayer4beepEjj>
	beep(cH, 150);
    17c4:	46 e9       	ldi	r20, 0x96	; 150
    17c6:	50 e0       	ldi	r21, 0x00	; 0
    17c8:	6b e0       	ldi	r22, 0x0B	; 11
    17ca:	72 e0       	ldi	r23, 0x02	; 2
    17cc:	ce 01       	movw	r24, r28
    17ce:	0e 94 6d 0b 	call	0x16da	; 0x16da <_ZN12CSoundPlayer4beepEjj>
	beep(a, 650);
    17d2:	4a e8       	ldi	r20, 0x8A	; 138
    17d4:	52 e0       	ldi	r21, 0x02	; 2
    17d6:	68 eb       	ldi	r22, 0xB8	; 184
    17d8:	71 e0       	ldi	r23, 0x01	; 1
    17da:	ce 01       	movw	r24, r28
    17dc:	0e 94 6d 0b 	call	0x16da	; 0x16da <_ZN12CSoundPlayer4beepEjj>
    17e0:	ff ef       	ldi	r31, 0xFF	; 255
    17e2:	25 ea       	ldi	r18, 0xA5	; 165
    17e4:	8e e0       	ldi	r24, 0x0E	; 14
    17e6:	f1 50       	subi	r31, 0x01	; 1
    17e8:	20 40       	sbci	r18, 0x00	; 0
    17ea:	80 40       	sbci	r24, 0x00	; 0
    17ec:	e1 f7       	brne	.-8      	; 0x17e6 <_ZN12CSoundPlayer4PlayEv+0x92>
    17ee:	00 c0       	rjmp	.+0      	; 0x17f0 <_ZN12CSoundPlayer4PlayEv+0x9c>
    17f0:	00 00       	nop
	beep(f, 375);
	beep(cH, 125);
	beep(a, 650);
	//end of the song*/

	sei();
    17f2:	78 94       	sei
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	08 95       	ret

000017fa <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerC::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    17fa:	fc 01       	movw	r30, r24
    17fc:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    17fe:	e0 e0       	ldi	r30, 0x00	; 0
    1800:	f8 e0       	ldi	r31, 0x08	; 8
    1802:	80 81       	ld	r24, Z
    1804:	80 7f       	andi	r24, 0xF0	; 240
    1806:	80 83       	st	Z, r24
	
	// No events
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    1808:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC0.CNT = 0;
    180a:	10 a2       	std	Z+32, r1	; 0x20
    180c:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CCA = 0;
    180e:	10 a6       	std	Z+40, r1	; 0x28
    1810:	11 a6       	std	Z+41, r1	; 0x29
	TCC0.CCB = 0;
    1812:	12 a6       	std	Z+42, r1	; 0x2a
    1814:	13 a6       	std	Z+43, r1	; 0x2b
	TCC0.CCC = 0;
    1816:	14 a6       	std	Z+44, r1	; 0x2c
    1818:	15 a6       	std	Z+45, r1	; 0x2d
	TCC0.CCD = 0;
    181a:	16 a6       	std	Z+46, r1	; 0x2e
    181c:	17 a6       	std	Z+47, r1	; 0x2f
	TCC0.PER = 0;
    181e:	16 a2       	std	Z+38, r1	; 0x26
    1820:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    1822:	81 81       	ldd	r24, Z+1	; 0x01
    1824:	88 7f       	andi	r24, 0xF8	; 248
    1826:	68 2b       	or	r22, r24
    1828:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC0.CTRLA = (TCC0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    182a:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    182c:	17 82       	std	Z+7, r1	; 0x07
    182e:	08 95       	ret

00001830 <_ZN7CTimerC5StartEj>:
}

void CTimerC::Start(uint16_t period)
{
	// Set period of timer
	TCC0.PER = period;
    1830:	e0 e0       	ldi	r30, 0x00	; 0
    1832:	f8 e0       	ldi	r31, 0x08	; 8
    1834:	66 a3       	std	Z+38, r22	; 0x26
    1836:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    1838:	20 81       	ld	r18, Z
    183a:	20 7f       	andi	r18, 0xF0	; 240
    183c:	dc 01       	movw	r26, r24
    183e:	12 96       	adiw	r26, 0x02	; 2
    1840:	9c 91       	ld	r25, X
    1842:	82 2f       	mov	r24, r18
    1844:	89 2b       	or	r24, r25
    1846:	80 83       	st	Z, r24
    1848:	08 95       	ret

0000184a <_ZN7CTimerC4StopEv>:
}

void CTimerC::Stop()
{
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    184a:	e0 e0       	ldi	r30, 0x00	; 0
    184c:	f8 e0       	ldi	r31, 0x08	; 8
    184e:	80 81       	ld	r24, Z
    1850:	80 7f       	andi	r24, 0xF0	; 240
    1852:	80 83       	st	Z, r24
	TCC0.CNT = 0;
    1854:	10 a2       	std	Z+32, r1	; 0x20
    1856:	11 a2       	std	Z+33, r1	; 0x21
    1858:	08 95       	ret

0000185a <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::EnableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB = (TCC0.CTRLB & ~0xF0) | channels;
    185a:	e0 e0       	ldi	r30, 0x00	; 0
    185c:	f8 e0       	ldi	r31, 0x08	; 8
    185e:	81 81       	ldd	r24, Z+1	; 0x01
    1860:	8f 70       	andi	r24, 0x0F	; 15
    1862:	68 2b       	or	r22, r24
    1864:	61 83       	std	Z+1, r22	; 0x01
    1866:	08 95       	ret

00001868 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::DisableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB &= ~channels;
    1868:	e0 e0       	ldi	r30, 0x00	; 0
    186a:	f8 e0       	ldi	r31, 0x08	; 8
    186c:	81 81       	ldd	r24, Z+1	; 0x01
    186e:	60 95       	com	r22
    1870:	68 23       	and	r22, r24
    1872:	61 83       	std	Z+1, r22	; 0x01
    1874:	08 95       	ret

00001876 <_ZN7CTimerC9SetPeriodEj>:
}

void CTimerC::SetPeriod(uint16_t value)
{
	TCC0.PER = value;
    1876:	60 93 26 08 	sts	0x0826, r22
    187a:	70 93 27 08 	sts	0x0827, r23
    187e:	08 95       	ret

00001880 <_ZN7CTimerC8SetCOMPAEj>:
}

void CTimerC::SetCOMPA(uint16_t value)
{
	TCC0.CCA = value;
    1880:	60 93 28 08 	sts	0x0828, r22
    1884:	70 93 29 08 	sts	0x0829, r23
    1888:	08 95       	ret

0000188a <_ZN7CTimerC8SetCOMPBEj>:
}

void CTimerC::SetCOMPB(uint16_t value)
{
	TCC0.CCB = value;
    188a:	60 93 2a 08 	sts	0x082A, r22
    188e:	70 93 2b 08 	sts	0x082B, r23
    1892:	08 95       	ret

00001894 <_ZN7CTimerC8SetCOMPCEj>:
}

void CTimerC::SetCOMPC(uint16_t value)
{
	TCC0.CCC = value;
    1894:	60 93 2c 08 	sts	0x082C, r22
    1898:	70 93 2d 08 	sts	0x082D, r23
    189c:	08 95       	ret

0000189e <_ZN7CTimerC8SetCOMPDEj>:
}

void CTimerC::SetCOMPD(uint16_t value)
{
	TCC0.CCD = value;
    189e:	60 93 2e 08 	sts	0x082E, r22
    18a2:	70 93 2f 08 	sts	0x082F, r23
    18a6:	08 95       	ret

000018a8 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    18a8:	61 15       	cp	r22, r1
    18aa:	71 05       	cpc	r23, r1
    18ac:	31 f0       	breq	.+12     	; 0x18ba <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    18ae:	e0 e0       	ldi	r30, 0x00	; 0
    18b0:	f8 e0       	ldi	r31, 0x08	; 8
    18b2:	86 81       	ldd	r24, Z+6	; 0x06
    18b4:	83 70       	andi	r24, 0x03	; 3
    18b6:	28 2b       	or	r18, r24
    18b8:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCC0_OVF_vect_num] = func;
    18ba:	60 93 49 21 	sts	0x2149, r22
    18be:	70 93 4a 21 	sts	0x214A, r23
	InterruptSenderTable[TCC0_OVF_vect_num] = owner;
    18c2:	40 93 3f 22 	sts	0x223F, r20
    18c6:	50 93 40 22 	sts	0x2240, r21
    18ca:	08 95       	ret

000018cc <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    18cc:	61 15       	cp	r22, r1
    18ce:	71 05       	cpc	r23, r1
    18d0:	31 f0       	breq	.+12     	; 0x18de <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    18d2:	e0 e0       	ldi	r30, 0x00	; 0
    18d4:	f8 e0       	ldi	r31, 0x08	; 8
    18d6:	86 81       	ldd	r24, Z+6	; 0x06
    18d8:	8c 70       	andi	r24, 0x0C	; 12
    18da:	28 2b       	or	r18, r24
    18dc:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC0_ERR_vect_num] = func;
    18de:	60 93 4b 21 	sts	0x214B, r22
    18e2:	70 93 4c 21 	sts	0x214C, r23
	InterruptSenderTable[TCC0_ERR_vect_num] = owner;
    18e6:	40 93 41 22 	sts	0x2241, r20
    18ea:	50 93 42 22 	sts	0x2242, r21
    18ee:	08 95       	ret

000018f0 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    18f0:	61 15       	cp	r22, r1
    18f2:	71 05       	cpc	r23, r1
    18f4:	31 f0       	breq	.+12     	; 0x1902 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    18f6:	e0 e0       	ldi	r30, 0x00	; 0
    18f8:	f8 e0       	ldi	r31, 0x08	; 8
    18fa:	87 81       	ldd	r24, Z+7	; 0x07
    18fc:	83 70       	andi	r24, 0x03	; 3
    18fe:	28 2b       	or	r18, r24
    1900:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCA_vect_num] = func;
    1902:	60 93 4d 21 	sts	0x214D, r22
    1906:	70 93 4e 21 	sts	0x214E, r23
	InterruptSenderTable[TCC0_CCA_vect_num] = owner;
    190a:	40 93 43 22 	sts	0x2243, r20
    190e:	50 93 44 22 	sts	0x2244, r21
    1912:	08 95       	ret

00001914 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    1914:	61 15       	cp	r22, r1
    1916:	71 05       	cpc	r23, r1
    1918:	31 f0       	breq	.+12     	; 0x1926 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    191a:	e0 e0       	ldi	r30, 0x00	; 0
    191c:	f8 e0       	ldi	r31, 0x08	; 8
    191e:	87 81       	ldd	r24, Z+7	; 0x07
    1920:	8c 70       	andi	r24, 0x0C	; 12
    1922:	28 2b       	or	r18, r24
    1924:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCB_vect_num] = func;
    1926:	60 93 4f 21 	sts	0x214F, r22
    192a:	70 93 50 21 	sts	0x2150, r23
	InterruptSenderTable[TCC0_CCB_vect_num] = owner;
    192e:	40 93 45 22 	sts	0x2245, r20
    1932:	50 93 46 22 	sts	0x2246, r21
    1936:	08 95       	ret

00001938 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerC::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    1938:	61 15       	cp	r22, r1
    193a:	71 05       	cpc	r23, r1
    193c:	31 f0       	breq	.+12     	; 0x194a <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    193e:	e0 e0       	ldi	r30, 0x00	; 0
    1940:	f8 e0       	ldi	r31, 0x08	; 8
    1942:	87 81       	ldd	r24, Z+7	; 0x07
    1944:	80 73       	andi	r24, 0x30	; 48
    1946:	28 2b       	or	r18, r24
    1948:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCC_vect_num] = func;
    194a:	60 93 51 21 	sts	0x2151, r22
    194e:	70 93 52 21 	sts	0x2152, r23
	InterruptSenderTable[TCC0_CCC_vect_num] = owner;
    1952:	40 93 47 22 	sts	0x2247, r20
    1956:	50 93 48 22 	sts	0x2248, r21
    195a:	08 95       	ret

0000195c <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerC::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    195c:	61 15       	cp	r22, r1
    195e:	71 05       	cpc	r23, r1
    1960:	31 f0       	breq	.+12     	; 0x196e <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    1962:	e0 e0       	ldi	r30, 0x00	; 0
    1964:	f8 e0       	ldi	r31, 0x08	; 8
    1966:	87 81       	ldd	r24, Z+7	; 0x07
    1968:	80 7c       	andi	r24, 0xC0	; 192
    196a:	28 2b       	or	r18, r24
    196c:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCD_vect_num] = func;
    196e:	60 93 53 21 	sts	0x2153, r22
    1972:	70 93 54 21 	sts	0x2154, r23
	InterruptSenderTable[TCC0_CCD_vect_num] = owner;
    1976:	40 93 49 22 	sts	0x2249, r20
    197a:	50 93 4a 22 	sts	0x224A, r21
    197e:	08 95       	ret

00001980 <_ZN7CTimerCC1Ev>:

#include "CTimerC.h"
#include "LaserLib/intx128.h"

// default constructor
CTimerC::CTimerC()
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	ec 01       	movw	r28, r24
    1986:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZN6CTimerC1Ev>
    198a:	8e e8       	ldi	r24, 0x8E	; 142
    198c:	90 e2       	ldi	r25, 0x20	; 32
    198e:	88 83       	st	Y, r24
    1990:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    1992:	df 91       	pop	r29
    1994:	cf 91       	pop	r28
    1996:	08 95       	ret

00001998 <_ZN7CTimerCD1Ev>:

// default destructor
CTimerC::~CTimerC()
    1998:	2e e8       	ldi	r18, 0x8E	; 142
    199a:	30 e2       	ldi	r19, 0x20	; 32
    199c:	fc 01       	movw	r30, r24
    199e:	20 83       	st	Z, r18
    19a0:	31 83       	std	Z+1, r19	; 0x01
    19a2:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <_ZN6CTimerD1Ev>
    19a6:	08 95       	ret

000019a8 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerF::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{
	clockSrc = clock;
    19a8:	fc 01       	movw	r30, r24
    19aa:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    19ac:	e0 e0       	ldi	r30, 0x00	; 0
    19ae:	fb e0       	ldi	r31, 0x0B	; 11
    19b0:	80 81       	ld	r24, Z
    19b2:	80 7f       	andi	r24, 0xF0	; 240
    19b4:	80 83       	st	Z, r24
	
	// No events
	TCF0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    19b6:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCF0.CNT = 0;
    19b8:	10 a2       	std	Z+32, r1	; 0x20
    19ba:	11 a2       	std	Z+33, r1	; 0x21
	TCF0.CCA = 0;
    19bc:	10 a6       	std	Z+40, r1	; 0x28
    19be:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB = 0;
    19c0:	12 a6       	std	Z+42, r1	; 0x2a
    19c2:	13 a6       	std	Z+43, r1	; 0x2b
	TCF0.CCC = 0;
    19c4:	14 a6       	std	Z+44, r1	; 0x2c
    19c6:	15 a6       	std	Z+45, r1	; 0x2d
	TCF0.CCD = 0;
    19c8:	16 a6       	std	Z+46, r1	; 0x2e
    19ca:	17 a6       	std	Z+47, r1	; 0x2f
	TCF0.PER = 0;
    19cc:	16 a2       	std	Z+38, r1	; 0x26
    19ce:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCF0.CTRLB = (TCF0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    19d0:	81 81       	ldd	r24, Z+1	; 0x01
    19d2:	88 7f       	andi	r24, 0xF8	; 248
    19d4:	68 2b       	or	r22, r24
    19d6:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCF0.CTRLA = (TCF0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCF0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    19d8:	16 82       	std	Z+6, r1	; 0x06
	TCF0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    19da:	17 82       	std	Z+7, r1	; 0x07
    19dc:	08 95       	ret

000019de <_ZN7CTimerF5StartEj>:
}

void CTimerF::Start(uint16_t period)
{
	// Set period of timer
	TCF0.PER = period;
    19de:	e0 e0       	ldi	r30, 0x00	; 0
    19e0:	fb e0       	ldi	r31, 0x0B	; 11
    19e2:	66 a3       	std	Z+38, r22	; 0x26
    19e4:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    19e6:	20 81       	ld	r18, Z
    19e8:	20 7f       	andi	r18, 0xF0	; 240
    19ea:	dc 01       	movw	r26, r24
    19ec:	12 96       	adiw	r26, 0x02	; 2
    19ee:	9c 91       	ld	r25, X
    19f0:	82 2f       	mov	r24, r18
    19f2:	89 2b       	or	r24, r25
    19f4:	80 83       	st	Z, r24
    19f6:	08 95       	ret

000019f8 <_ZN7CTimerF4StopEv>:
}

void CTimerF::Stop()
{
	// Stop timer
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    19f8:	e0 e0       	ldi	r30, 0x00	; 0
    19fa:	fb e0       	ldi	r31, 0x0B	; 11
    19fc:	80 81       	ld	r24, Z
    19fe:	80 7f       	andi	r24, 0xF0	; 240
    1a00:	80 83       	st	Z, r24
	TCF0.CNT = 0;
    1a02:	10 a2       	std	Z+32, r1	; 0x20
    1a04:	11 a2       	std	Z+33, r1	; 0x21
    1a06:	08 95       	ret

00001a08 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::EnableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB |= channels;
    1a08:	e0 e0       	ldi	r30, 0x00	; 0
    1a0a:	fb e0       	ldi	r31, 0x0B	; 11
    1a0c:	81 81       	ldd	r24, Z+1	; 0x01
    1a0e:	68 2b       	or	r22, r24
    1a10:	61 83       	std	Z+1, r22	; 0x01
    1a12:	08 95       	ret

00001a14 <_ZN7CTimerF14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::DisableChannel(TIMER_CHANNELS channels)
{
	TCF0.CTRLB &= ~channels;
    1a14:	e0 e0       	ldi	r30, 0x00	; 0
    1a16:	fb e0       	ldi	r31, 0x0B	; 11
    1a18:	81 81       	ldd	r24, Z+1	; 0x01
    1a1a:	60 95       	com	r22
    1a1c:	68 23       	and	r22, r24
    1a1e:	61 83       	std	Z+1, r22	; 0x01
    1a20:	08 95       	ret

00001a22 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelSet(TIMER_CHANNELS channels)
{
	TCF0.CTRLC |= (channels >> 4);
    1a22:	e0 e0       	ldi	r30, 0x00	; 0
    1a24:	fb e0       	ldi	r31, 0x0B	; 11
    1a26:	82 81       	ldd	r24, Z+2	; 0x02
    1a28:	62 95       	swap	r22
    1a2a:	6f 70       	andi	r22, 0x0F	; 15
    1a2c:	68 2b       	or	r22, r24
    1a2e:	62 83       	std	Z+2, r22	; 0x02
    1a30:	08 95       	ret

00001a32 <_ZN7CTimerF12ChannelResetE19TIMER_CHANNELS_ENUM>:
}

void CTimerF::ChannelReset(TIMER_CHANNELS channels)
{
	TCF0.CTRLC &= ~(channels >> 4);
    1a32:	e0 e0       	ldi	r30, 0x00	; 0
    1a34:	fb e0       	ldi	r31, 0x0B	; 11
    1a36:	82 81       	ldd	r24, Z+2	; 0x02
    1a38:	62 95       	swap	r22
    1a3a:	6f 70       	andi	r22, 0x0F	; 15
    1a3c:	60 95       	com	r22
    1a3e:	68 23       	and	r22, r24
    1a40:	62 83       	std	Z+2, r22	; 0x02
    1a42:	08 95       	ret

00001a44 <_ZN7CTimerF9SetPeriodEj>:
}

void CTimerF::SetPeriod(uint16_t value)
{
	TCF0.PER = value;
    1a44:	60 93 26 0b 	sts	0x0B26, r22
    1a48:	70 93 27 0b 	sts	0x0B27, r23
    1a4c:	08 95       	ret

00001a4e <_ZN7CTimerF8SetCOMPAEj>:
}

void CTimerF::SetCOMPA(uint16_t value)
{
	TCF0.CCA = value;
    1a4e:	60 93 28 0b 	sts	0x0B28, r22
    1a52:	70 93 29 0b 	sts	0x0B29, r23
    1a56:	08 95       	ret

00001a58 <_ZN7CTimerF8SetCOMPBEj>:
}

void CTimerF::SetCOMPB(uint16_t value)
{
	TCF0.CCB = value;
    1a58:	60 93 2a 0b 	sts	0x0B2A, r22
    1a5c:	70 93 2b 0b 	sts	0x0B2B, r23
    1a60:	08 95       	ret

00001a62 <_ZN7CTimerF8SetCOMPCEj>:
}

void CTimerF::SetCOMPC(uint16_t value)
{
	TCF0.CCC = value;
    1a62:	60 93 2c 0b 	sts	0x0B2C, r22
    1a66:	70 93 2d 0b 	sts	0x0B2D, r23
    1a6a:	08 95       	ret

00001a6c <_ZN7CTimerF8SetCOMPDEj>:
}

void CTimerF::SetCOMPD(uint16_t value)
{
	TCF0.CCD = value;
    1a6c:	60 93 2e 0b 	sts	0x0B2E, r22
    1a70:	70 93 2f 0b 	sts	0x0B2F, r23
    1a74:	08 95       	ret

00001a76 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerF::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    1a76:	61 15       	cp	r22, r1
    1a78:	71 05       	cpc	r23, r1
    1a7a:	31 f0       	breq	.+12     	; 0x1a88 <_ZN7CTimerF14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCF0.INTCTRLA = (TCF0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    1a7c:	e0 e0       	ldi	r30, 0x00	; 0
    1a7e:	fb e0       	ldi	r31, 0x0B	; 11
    1a80:	86 81       	ldd	r24, Z+6	; 0x06
    1a82:	83 70       	andi	r24, 0x03	; 3
    1a84:	28 2b       	or	r18, r24
    1a86:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_OVF_vect_num] = func;
    1a88:	60 93 05 22 	sts	0x2205, r22
    1a8c:	70 93 06 22 	sts	0x2206, r23
	InterruptSenderTable[TCF0_OVF_vect_num] = owner;
    1a90:	40 93 fb 22 	sts	0x22FB, r20
    1a94:	50 93 fc 22 	sts	0x22FC, r21
    1a98:	08 95       	ret

00001a9a <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerF::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    1a9a:	61 15       	cp	r22, r1
    1a9c:	71 05       	cpc	r23, r1
    1a9e:	31 f0       	breq	.+12     	; 0x1aac <_ZN7CTimerF14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCF0.INTCTRLA = (TCF0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    1aa0:	e0 e0       	ldi	r30, 0x00	; 0
    1aa2:	fb e0       	ldi	r31, 0x0B	; 11
    1aa4:	86 81       	ldd	r24, Z+6	; 0x06
    1aa6:	8c 70       	andi	r24, 0x0C	; 12
    1aa8:	28 2b       	or	r18, r24
    1aaa:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCF0_ERR_vect_num] = func;
    1aac:	60 93 07 22 	sts	0x2207, r22
    1ab0:	70 93 08 22 	sts	0x2208, r23
	InterruptSenderTable[TCF0_ERR_vect_num] = owner;
    1ab4:	40 93 fd 22 	sts	0x22FD, r20
    1ab8:	50 93 fe 22 	sts	0x22FE, r21
    1abc:	08 95       	ret

00001abe <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerF::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    1abe:	61 15       	cp	r22, r1
    1ac0:	71 05       	cpc	r23, r1
    1ac2:	31 f0       	breq	.+12     	; 0x1ad0 <_ZN7CTimerF16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    1ac4:	e0 e0       	ldi	r30, 0x00	; 0
    1ac6:	fb e0       	ldi	r31, 0x0B	; 11
    1ac8:	87 81       	ldd	r24, Z+7	; 0x07
    1aca:	83 70       	andi	r24, 0x03	; 3
    1acc:	28 2b       	or	r18, r24
    1ace:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCA_vect_num] = func;
    1ad0:	60 93 09 22 	sts	0x2209, r22
    1ad4:	70 93 0a 22 	sts	0x220A, r23
	InterruptSenderTable[TCF0_CCA_vect_num] = owner;
    1ad8:	40 93 ff 22 	sts	0x22FF, r20
    1adc:	50 93 00 23 	sts	0x2300, r21
    1ae0:	08 95       	ret

00001ae2 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerF::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    1ae2:	61 15       	cp	r22, r1
    1ae4:	71 05       	cpc	r23, r1
    1ae6:	31 f0       	breq	.+12     	; 0x1af4 <_ZN7CTimerF16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    1ae8:	e0 e0       	ldi	r30, 0x00	; 0
    1aea:	fb e0       	ldi	r31, 0x0B	; 11
    1aec:	87 81       	ldd	r24, Z+7	; 0x07
    1aee:	8c 70       	andi	r24, 0x0C	; 12
    1af0:	28 2b       	or	r18, r24
    1af2:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCB_vect_num] = func;
    1af4:	60 93 0b 22 	sts	0x220B, r22
    1af8:	70 93 0c 22 	sts	0x220C, r23
	InterruptSenderTable[TCF0_CCB_vect_num] = owner;
    1afc:	40 93 01 23 	sts	0x2301, r20
    1b00:	50 93 02 23 	sts	0x2302, r21
    1b04:	08 95       	ret

00001b06 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerF::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    1b06:	61 15       	cp	r22, r1
    1b08:	71 05       	cpc	r23, r1
    1b0a:	31 f0       	breq	.+12     	; 0x1b18 <_ZN7CTimerF16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    1b0c:	e0 e0       	ldi	r30, 0x00	; 0
    1b0e:	fb e0       	ldi	r31, 0x0B	; 11
    1b10:	87 81       	ldd	r24, Z+7	; 0x07
    1b12:	80 73       	andi	r24, 0x30	; 48
    1b14:	28 2b       	or	r18, r24
    1b16:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCC_vect_num] = func;
    1b18:	60 93 0d 22 	sts	0x220D, r22
    1b1c:	70 93 0e 22 	sts	0x220E, r23
	InterruptSenderTable[TCF0_CCC_vect_num] = owner;
    1b20:	40 93 03 23 	sts	0x2303, r20
    1b24:	50 93 04 23 	sts	0x2304, r21
    1b28:	08 95       	ret

00001b2a <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerF::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    1b2a:	61 15       	cp	r22, r1
    1b2c:	71 05       	cpc	r23, r1
    1b2e:	31 f0       	breq	.+12     	; 0x1b3c <_ZN7CTimerF16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCF0.INTCTRLB = (TCF0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    1b30:	e0 e0       	ldi	r30, 0x00	; 0
    1b32:	fb e0       	ldi	r31, 0x0B	; 11
    1b34:	87 81       	ldd	r24, Z+7	; 0x07
    1b36:	80 7c       	andi	r24, 0xC0	; 192
    1b38:	28 2b       	or	r18, r24
    1b3a:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCF0_CCD_vect_num] = func;
    1b3c:	60 93 0f 22 	sts	0x220F, r22
    1b40:	70 93 10 22 	sts	0x2210, r23
	InterruptSenderTable[TCF0_CCD_vect_num] = owner;
    1b44:	40 93 05 23 	sts	0x2305, r20
    1b48:	50 93 06 23 	sts	0x2306, r21
    1b4c:	08 95       	ret

00001b4e <_ZN7CTimerFC1Ev>:

#include "CTimerF.h"
#include "LaserLib/intx128.h"

// default constructor
CTimerF::CTimerF()
    1b4e:	cf 93       	push	r28
    1b50:	df 93       	push	r29
    1b52:	ec 01       	movw	r28, r24
    1b54:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZN6CTimerC1Ev>
    1b58:	82 eb       	ldi	r24, 0xB2	; 178
    1b5a:	90 e2       	ldi	r25, 0x20	; 32
    1b5c:	88 83       	st	Y, r24
    1b5e:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	08 95       	ret

00001b66 <_ZN7CTimerFD1Ev>:

// default destructor
CTimerF::~CTimerF()
    1b66:	22 eb       	ldi	r18, 0xB2	; 178
    1b68:	30 e2       	ldi	r19, 0x20	; 32
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	20 83       	st	Z, r18
    1b6e:	31 83       	std	Z+1, r19	; 0x01
    1b70:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <_ZN6CTimerD1Ev>
    1b74:	08 95       	ret

00001b76 <_ZN4CSPIC1Ev>:
#include <avr/io.h>
#include <stdlib.h>
#include <string.h>

// default constructor
CSPI::CSPI()
    1b76:	08 95       	ret

00001b78 <_ZN4CSPID1Ev>:
{
} //CSPI

// default destructor
CSPI::~CSPI()
    1b78:	08 95       	ret

00001b7a <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>:
{
} //~CSPI

void CSPI::Initialize(bool Master, SPI_DATA_ORDER dord, SPI_MODE mode, bool doubleClk, SPI_PRESCALER_t prescaler)
{
    1b7a:	ef 92       	push	r14
    1b7c:	0f 93       	push	r16
    1b7e:	1f 93       	push	r17
    1b80:	cf 93       	push	r28
    1b82:	df 93       	push	r29
    1b84:	ec 01       	movw	r28, r24
	PORTE.DIRSET = PIN4_bm | PIN5_bm | PIN7_bm; // MOSI, nSS, SCK to out
    1b86:	e0 e8       	ldi	r30, 0x80	; 128
    1b88:	f6 e0       	ldi	r31, 0x06	; 6
    1b8a:	80 eb       	ldi	r24, 0xB0	; 176
    1b8c:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRCLR = PIN6_bm;						// MISO to in
    1b8e:	90 e4       	ldi	r25, 0x40	; 64
    1b90:	92 83       	std	Z+2, r25	; 0x02
	
	// All slew rate limit enable with inverting
	PORTE.PIN4CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    1b92:	90 ec       	ldi	r25, 0xC0	; 192
    1b94:	94 8b       	std	Z+20, r25	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    1b96:	95 8b       	std	Z+21, r25	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    1b98:	96 8b       	std	Z+22, r25	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    1b9a:	97 8b       	std	Z+23, r25	; 0x17
	
	// Set high
	PORTE.OUTSET = PIN4_bm | PIN5_bm | PIN7_bm;
    1b9c:	85 83       	std	Z+5, r24	; 0x05
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
		prescaler;
    1b9e:	61 11       	cpse	r22, r1
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2c>
    1ba2:	80 e4       	ldi	r24, 0x40	; 64
    1ba4:	01 c0       	rjmp	.+2      	; 0x1ba8 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2e>
    1ba6:	80 e5       	ldi	r24, 0x50	; 80
    1ba8:	01 11       	cpse	r16, r1
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x36>
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	01 c0       	rjmp	.+2      	; 0x1bb2 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x38>
    1bb0:	30 e8       	ldi	r19, 0x80	; 128
    1bb2:	41 11       	cpse	r20, r1
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x40>
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	01 c0       	rjmp	.+2      	; 0x1bbc <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x42>
    1bba:	90 e2       	ldi	r25, 0x20	; 32
	SPIE.CTRL = 
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
    1bbc:	22 0f       	add	r18, r18
    1bbe:	22 0f       	add	r18, r18
    1bc0:	e2 2a       	or	r14, r18
    1bc2:	e8 2a       	or	r14, r24
    1bc4:	e3 2a       	or	r14, r19
		prescaler;
    1bc6:	e9 2a       	or	r14, r25
    1bc8:	00 ec       	ldi	r16, 0xC0	; 192
    1bca:	1a e0       	ldi	r17, 0x0A	; 10
    1bcc:	f8 01       	movw	r30, r16
    1bce:	e0 82       	st	Z, r14
		
	// Allocate transmit buffer
	buffer = (uint8_t*)malloc(256);
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	91 e0       	ldi	r25, 0x01	; 1
    1bd4:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <malloc>
    1bd8:	88 83       	st	Y, r24
    1bda:	99 83       	std	Y+1, r25	; 0x01
	
	// Enable interrupt
	SPIE.INTCTRL = SPI_INTLVL_LO_gc;
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	f8 01       	movw	r30, r16
    1be0:	81 83       	std	Z+1, r24	; 0x01
	
	// Set interrupts
	InterruptFuncTable[SPIE_INT_vect_num] = StaticOnTransmit;
    1be2:	89 e1       	ldi	r24, 0x19	; 25
    1be4:	9e e0       	ldi	r25, 0x0E	; 14
    1be6:	80 93 9f 21 	sts	0x219F, r24
    1bea:	90 93 a0 21 	sts	0x21A0, r25
	InterruptSenderTable[SPIE_INT_vect_num] = this;
    1bee:	c0 93 95 22 	sts	0x2295, r28
    1bf2:	d0 93 96 22 	sts	0x2296, r29
}
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	ef 90       	pop	r14
    1c00:	08 95       	ret

00001c02 <_ZN4CSPI10OnTransmitEv>:
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
}

void CSPI::OnTransmit()
{
    1c02:	fc 01       	movw	r30, r24
	if (rx_pos != 0)
    1c04:	82 81       	ldd	r24, Z+2	; 0x02
    1c06:	93 81       	ldd	r25, Z+3	; 0x03
    1c08:	89 2b       	or	r24, r25
    1c0a:	79 f0       	breq	.+30     	; 0x1c2a <_ZN4CSPI10OnTransmitEv+0x28>
		SPIE.DATA = buffer[--rx_pos];
    1c0c:	40 81       	ld	r20, Z
    1c0e:	51 81       	ldd	r21, Z+1	; 0x01
    1c10:	22 81       	ldd	r18, Z+2	; 0x02
    1c12:	33 81       	ldd	r19, Z+3	; 0x03
    1c14:	c9 01       	movw	r24, r18
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	82 83       	std	Z+2, r24	; 0x02
    1c1a:	93 83       	std	Z+3, r25	; 0x03
    1c1c:	fa 01       	movw	r30, r20
    1c1e:	e8 0f       	add	r30, r24
    1c20:	f9 1f       	adc	r31, r25
    1c22:	80 81       	ld	r24, Z
    1c24:	80 93 c3 0a 	sts	0x0AC3, r24
    1c28:	08 95       	ret
	else
		PORTE.OUTSET = PIN4_bm;
    1c2a:	80 e1       	ldi	r24, 0x10	; 16
    1c2c:	80 93 85 06 	sts	0x0685, r24
    1c30:	08 95       	ret

00001c32 <_ZN4CSPI16StaticOnTransmitEPv>:
}

void CSPI::StaticOnTransmit(void* sender)
{
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
    1c32:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN4CSPI10OnTransmitEv>
    1c36:	08 95       	ret

00001c38 <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
    1c38:	2a ed       	ldi	r18, 0xDA	; 218
    1c3a:	30 e2       	ldi	r19, 0x20	; 32
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	20 83       	st	Z, r18
    1c40:	31 83       	std	Z+1, r19	; 0x01
    1c42:	08 95       	ret

00001c44 <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
    1c44:	08 95       	ret

00001c46 <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
    1c46:	2e ef       	ldi	r18, 0xFE	; 254
    1c48:	30 e2       	ldi	r19, 0x20	; 32
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	20 83       	st	Z, r18
    1c4e:	31 83       	std	Z+1, r19	; 0x01
    1c50:	08 95       	ret

00001c52 <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
    1c52:	08 95       	ret

00001c54 <__vector_1>:
		if (InterruptFuncTable[vector_id##_num] != 0)										\
		(*(InterruptFuncTable[vector_id##_num]))(InterruptSenderTable[vector_id##_num]);	\
	}

/* OSC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(OSC_OSCF_vect)      /* External Oscillator Failure Interrupt (NMI) */
    1c54:	1f 92       	push	r1
    1c56:	0f 92       	push	r0
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	0f 92       	push	r0
    1c5c:	11 24       	eor	r1, r1
    1c5e:	0b b6       	in	r0, 0x3b	; 59
    1c60:	0f 92       	push	r0
    1c62:	2f 93       	push	r18
    1c64:	3f 93       	push	r19
    1c66:	4f 93       	push	r20
    1c68:	5f 93       	push	r21
    1c6a:	6f 93       	push	r22
    1c6c:	7f 93       	push	r23
    1c6e:	8f 93       	push	r24
    1c70:	9f 93       	push	r25
    1c72:	af 93       	push	r26
    1c74:	bf 93       	push	r27
    1c76:	ef 93       	push	r30
    1c78:	ff 93       	push	r31
    1c7a:	e0 91 2f 21 	lds	r30, 0x212F
    1c7e:	f0 91 30 21 	lds	r31, 0x2130
    1c82:	30 97       	sbiw	r30, 0x00	; 0
    1c84:	29 f0       	breq	.+10     	; 0x1c90 <__vector_1+0x3c>
    1c86:	80 91 25 22 	lds	r24, 0x2225
    1c8a:	90 91 26 22 	lds	r25, 0x2226
    1c8e:	19 95       	eicall
    1c90:	ff 91       	pop	r31
    1c92:	ef 91       	pop	r30
    1c94:	bf 91       	pop	r27
    1c96:	af 91       	pop	r26
    1c98:	9f 91       	pop	r25
    1c9a:	8f 91       	pop	r24
    1c9c:	7f 91       	pop	r23
    1c9e:	6f 91       	pop	r22
    1ca0:	5f 91       	pop	r21
    1ca2:	4f 91       	pop	r20
    1ca4:	3f 91       	pop	r19
    1ca6:	2f 91       	pop	r18
    1ca8:	0f 90       	pop	r0
    1caa:	0b be       	out	0x3b, r0	; 59
    1cac:	0f 90       	pop	r0
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	0f 90       	pop	r0
    1cb2:	1f 90       	pop	r1
    1cb4:	18 95       	reti

00001cb6 <__vector_2>:

/* PORTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT0_vect)      /* External Interrupt 0 */
    1cb6:	1f 92       	push	r1
    1cb8:	0f 92       	push	r0
    1cba:	0f b6       	in	r0, 0x3f	; 63
    1cbc:	0f 92       	push	r0
    1cbe:	11 24       	eor	r1, r1
    1cc0:	0b b6       	in	r0, 0x3b	; 59
    1cc2:	0f 92       	push	r0
    1cc4:	2f 93       	push	r18
    1cc6:	3f 93       	push	r19
    1cc8:	4f 93       	push	r20
    1cca:	5f 93       	push	r21
    1ccc:	6f 93       	push	r22
    1cce:	7f 93       	push	r23
    1cd0:	8f 93       	push	r24
    1cd2:	9f 93       	push	r25
    1cd4:	af 93       	push	r26
    1cd6:	bf 93       	push	r27
    1cd8:	ef 93       	push	r30
    1cda:	ff 93       	push	r31
    1cdc:	e0 91 31 21 	lds	r30, 0x2131
    1ce0:	f0 91 32 21 	lds	r31, 0x2132
    1ce4:	30 97       	sbiw	r30, 0x00	; 0
    1ce6:	29 f0       	breq	.+10     	; 0x1cf2 <__vector_2+0x3c>
    1ce8:	80 91 27 22 	lds	r24, 0x2227
    1cec:	90 91 28 22 	lds	r25, 0x2228
    1cf0:	19 95       	eicall
    1cf2:	ff 91       	pop	r31
    1cf4:	ef 91       	pop	r30
    1cf6:	bf 91       	pop	r27
    1cf8:	af 91       	pop	r26
    1cfa:	9f 91       	pop	r25
    1cfc:	8f 91       	pop	r24
    1cfe:	7f 91       	pop	r23
    1d00:	6f 91       	pop	r22
    1d02:	5f 91       	pop	r21
    1d04:	4f 91       	pop	r20
    1d06:	3f 91       	pop	r19
    1d08:	2f 91       	pop	r18
    1d0a:	0f 90       	pop	r0
    1d0c:	0b be       	out	0x3b, r0	; 59
    1d0e:	0f 90       	pop	r0
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	0f 90       	pop	r0
    1d14:	1f 90       	pop	r1
    1d16:	18 95       	reti

00001d18 <__vector_3>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT1_vect)      /* External Interrupt 1 */
    1d18:	1f 92       	push	r1
    1d1a:	0f 92       	push	r0
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	0f 92       	push	r0
    1d20:	11 24       	eor	r1, r1
    1d22:	0b b6       	in	r0, 0x3b	; 59
    1d24:	0f 92       	push	r0
    1d26:	2f 93       	push	r18
    1d28:	3f 93       	push	r19
    1d2a:	4f 93       	push	r20
    1d2c:	5f 93       	push	r21
    1d2e:	6f 93       	push	r22
    1d30:	7f 93       	push	r23
    1d32:	8f 93       	push	r24
    1d34:	9f 93       	push	r25
    1d36:	af 93       	push	r26
    1d38:	bf 93       	push	r27
    1d3a:	ef 93       	push	r30
    1d3c:	ff 93       	push	r31
    1d3e:	e0 91 33 21 	lds	r30, 0x2133
    1d42:	f0 91 34 21 	lds	r31, 0x2134
    1d46:	30 97       	sbiw	r30, 0x00	; 0
    1d48:	29 f0       	breq	.+10     	; 0x1d54 <__vector_3+0x3c>
    1d4a:	80 91 29 22 	lds	r24, 0x2229
    1d4e:	90 91 2a 22 	lds	r25, 0x222A
    1d52:	19 95       	eicall
    1d54:	ff 91       	pop	r31
    1d56:	ef 91       	pop	r30
    1d58:	bf 91       	pop	r27
    1d5a:	af 91       	pop	r26
    1d5c:	9f 91       	pop	r25
    1d5e:	8f 91       	pop	r24
    1d60:	7f 91       	pop	r23
    1d62:	6f 91       	pop	r22
    1d64:	5f 91       	pop	r21
    1d66:	4f 91       	pop	r20
    1d68:	3f 91       	pop	r19
    1d6a:	2f 91       	pop	r18
    1d6c:	0f 90       	pop	r0
    1d6e:	0b be       	out	0x3b, r0	; 59
    1d70:	0f 90       	pop	r0
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	0f 90       	pop	r0
    1d76:	1f 90       	pop	r1
    1d78:	18 95       	reti

00001d7a <__vector_4>:

/* PORTR interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT0_vect)      /* External Interrupt 0 */
    1d7a:	1f 92       	push	r1
    1d7c:	0f 92       	push	r0
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	0f 92       	push	r0
    1d82:	11 24       	eor	r1, r1
    1d84:	0b b6       	in	r0, 0x3b	; 59
    1d86:	0f 92       	push	r0
    1d88:	2f 93       	push	r18
    1d8a:	3f 93       	push	r19
    1d8c:	4f 93       	push	r20
    1d8e:	5f 93       	push	r21
    1d90:	6f 93       	push	r22
    1d92:	7f 93       	push	r23
    1d94:	8f 93       	push	r24
    1d96:	9f 93       	push	r25
    1d98:	af 93       	push	r26
    1d9a:	bf 93       	push	r27
    1d9c:	ef 93       	push	r30
    1d9e:	ff 93       	push	r31
    1da0:	e0 91 35 21 	lds	r30, 0x2135
    1da4:	f0 91 36 21 	lds	r31, 0x2136
    1da8:	30 97       	sbiw	r30, 0x00	; 0
    1daa:	29 f0       	breq	.+10     	; 0x1db6 <__vector_4+0x3c>
    1dac:	80 91 2b 22 	lds	r24, 0x222B
    1db0:	90 91 2c 22 	lds	r25, 0x222C
    1db4:	19 95       	eicall
    1db6:	ff 91       	pop	r31
    1db8:	ef 91       	pop	r30
    1dba:	bf 91       	pop	r27
    1dbc:	af 91       	pop	r26
    1dbe:	9f 91       	pop	r25
    1dc0:	8f 91       	pop	r24
    1dc2:	7f 91       	pop	r23
    1dc4:	6f 91       	pop	r22
    1dc6:	5f 91       	pop	r21
    1dc8:	4f 91       	pop	r20
    1dca:	3f 91       	pop	r19
    1dcc:	2f 91       	pop	r18
    1dce:	0f 90       	pop	r0
    1dd0:	0b be       	out	0x3b, r0	; 59
    1dd2:	0f 90       	pop	r0
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	0f 90       	pop	r0
    1dd8:	1f 90       	pop	r1
    1dda:	18 95       	reti

00001ddc <__vector_5>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT1_vect)      /* External Interrupt 1 */
    1ddc:	1f 92       	push	r1
    1dde:	0f 92       	push	r0
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	0f 92       	push	r0
    1de4:	11 24       	eor	r1, r1
    1de6:	0b b6       	in	r0, 0x3b	; 59
    1de8:	0f 92       	push	r0
    1dea:	2f 93       	push	r18
    1dec:	3f 93       	push	r19
    1dee:	4f 93       	push	r20
    1df0:	5f 93       	push	r21
    1df2:	6f 93       	push	r22
    1df4:	7f 93       	push	r23
    1df6:	8f 93       	push	r24
    1df8:	9f 93       	push	r25
    1dfa:	af 93       	push	r26
    1dfc:	bf 93       	push	r27
    1dfe:	ef 93       	push	r30
    1e00:	ff 93       	push	r31
    1e02:	e0 91 37 21 	lds	r30, 0x2137
    1e06:	f0 91 38 21 	lds	r31, 0x2138
    1e0a:	30 97       	sbiw	r30, 0x00	; 0
    1e0c:	29 f0       	breq	.+10     	; 0x1e18 <__vector_5+0x3c>
    1e0e:	80 91 2d 22 	lds	r24, 0x222D
    1e12:	90 91 2e 22 	lds	r25, 0x222E
    1e16:	19 95       	eicall
    1e18:	ff 91       	pop	r31
    1e1a:	ef 91       	pop	r30
    1e1c:	bf 91       	pop	r27
    1e1e:	af 91       	pop	r26
    1e20:	9f 91       	pop	r25
    1e22:	8f 91       	pop	r24
    1e24:	7f 91       	pop	r23
    1e26:	6f 91       	pop	r22
    1e28:	5f 91       	pop	r21
    1e2a:	4f 91       	pop	r20
    1e2c:	3f 91       	pop	r19
    1e2e:	2f 91       	pop	r18
    1e30:	0f 90       	pop	r0
    1e32:	0b be       	out	0x3b, r0	; 59
    1e34:	0f 90       	pop	r0
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	0f 90       	pop	r0
    1e3a:	1f 90       	pop	r1
    1e3c:	18 95       	reti

00001e3e <__vector_6>:

/* DMA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH0_vect)      /* Channel 0 Interrupt */
    1e3e:	1f 92       	push	r1
    1e40:	0f 92       	push	r0
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	0f 92       	push	r0
    1e46:	11 24       	eor	r1, r1
    1e48:	0b b6       	in	r0, 0x3b	; 59
    1e4a:	0f 92       	push	r0
    1e4c:	2f 93       	push	r18
    1e4e:	3f 93       	push	r19
    1e50:	4f 93       	push	r20
    1e52:	5f 93       	push	r21
    1e54:	6f 93       	push	r22
    1e56:	7f 93       	push	r23
    1e58:	8f 93       	push	r24
    1e5a:	9f 93       	push	r25
    1e5c:	af 93       	push	r26
    1e5e:	bf 93       	push	r27
    1e60:	ef 93       	push	r30
    1e62:	ff 93       	push	r31
    1e64:	e0 91 39 21 	lds	r30, 0x2139
    1e68:	f0 91 3a 21 	lds	r31, 0x213A
    1e6c:	30 97       	sbiw	r30, 0x00	; 0
    1e6e:	29 f0       	breq	.+10     	; 0x1e7a <__vector_6+0x3c>
    1e70:	80 91 2f 22 	lds	r24, 0x222F
    1e74:	90 91 30 22 	lds	r25, 0x2230
    1e78:	19 95       	eicall
    1e7a:	ff 91       	pop	r31
    1e7c:	ef 91       	pop	r30
    1e7e:	bf 91       	pop	r27
    1e80:	af 91       	pop	r26
    1e82:	9f 91       	pop	r25
    1e84:	8f 91       	pop	r24
    1e86:	7f 91       	pop	r23
    1e88:	6f 91       	pop	r22
    1e8a:	5f 91       	pop	r21
    1e8c:	4f 91       	pop	r20
    1e8e:	3f 91       	pop	r19
    1e90:	2f 91       	pop	r18
    1e92:	0f 90       	pop	r0
    1e94:	0b be       	out	0x3b, r0	; 59
    1e96:	0f 90       	pop	r0
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	0f 90       	pop	r0
    1e9c:	1f 90       	pop	r1
    1e9e:	18 95       	reti

00001ea0 <__vector_7>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH1_vect)      /* Channel 1 Interrupt */
    1ea0:	1f 92       	push	r1
    1ea2:	0f 92       	push	r0
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	0f 92       	push	r0
    1ea8:	11 24       	eor	r1, r1
    1eaa:	0b b6       	in	r0, 0x3b	; 59
    1eac:	0f 92       	push	r0
    1eae:	2f 93       	push	r18
    1eb0:	3f 93       	push	r19
    1eb2:	4f 93       	push	r20
    1eb4:	5f 93       	push	r21
    1eb6:	6f 93       	push	r22
    1eb8:	7f 93       	push	r23
    1eba:	8f 93       	push	r24
    1ebc:	9f 93       	push	r25
    1ebe:	af 93       	push	r26
    1ec0:	bf 93       	push	r27
    1ec2:	ef 93       	push	r30
    1ec4:	ff 93       	push	r31
    1ec6:	e0 91 3b 21 	lds	r30, 0x213B
    1eca:	f0 91 3c 21 	lds	r31, 0x213C
    1ece:	30 97       	sbiw	r30, 0x00	; 0
    1ed0:	29 f0       	breq	.+10     	; 0x1edc <__vector_7+0x3c>
    1ed2:	80 91 31 22 	lds	r24, 0x2231
    1ed6:	90 91 32 22 	lds	r25, 0x2232
    1eda:	19 95       	eicall
    1edc:	ff 91       	pop	r31
    1ede:	ef 91       	pop	r30
    1ee0:	bf 91       	pop	r27
    1ee2:	af 91       	pop	r26
    1ee4:	9f 91       	pop	r25
    1ee6:	8f 91       	pop	r24
    1ee8:	7f 91       	pop	r23
    1eea:	6f 91       	pop	r22
    1eec:	5f 91       	pop	r21
    1eee:	4f 91       	pop	r20
    1ef0:	3f 91       	pop	r19
    1ef2:	2f 91       	pop	r18
    1ef4:	0f 90       	pop	r0
    1ef6:	0b be       	out	0x3b, r0	; 59
    1ef8:	0f 90       	pop	r0
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	0f 90       	pop	r0
    1efe:	1f 90       	pop	r1
    1f00:	18 95       	reti

00001f02 <__vector_8>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH2_vect)      /* Channel 2 Interrupt */
    1f02:	1f 92       	push	r1
    1f04:	0f 92       	push	r0
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	0f 92       	push	r0
    1f0a:	11 24       	eor	r1, r1
    1f0c:	0b b6       	in	r0, 0x3b	; 59
    1f0e:	0f 92       	push	r0
    1f10:	2f 93       	push	r18
    1f12:	3f 93       	push	r19
    1f14:	4f 93       	push	r20
    1f16:	5f 93       	push	r21
    1f18:	6f 93       	push	r22
    1f1a:	7f 93       	push	r23
    1f1c:	8f 93       	push	r24
    1f1e:	9f 93       	push	r25
    1f20:	af 93       	push	r26
    1f22:	bf 93       	push	r27
    1f24:	ef 93       	push	r30
    1f26:	ff 93       	push	r31
    1f28:	e0 91 3d 21 	lds	r30, 0x213D
    1f2c:	f0 91 3e 21 	lds	r31, 0x213E
    1f30:	30 97       	sbiw	r30, 0x00	; 0
    1f32:	29 f0       	breq	.+10     	; 0x1f3e <__vector_8+0x3c>
    1f34:	80 91 33 22 	lds	r24, 0x2233
    1f38:	90 91 34 22 	lds	r25, 0x2234
    1f3c:	19 95       	eicall
    1f3e:	ff 91       	pop	r31
    1f40:	ef 91       	pop	r30
    1f42:	bf 91       	pop	r27
    1f44:	af 91       	pop	r26
    1f46:	9f 91       	pop	r25
    1f48:	8f 91       	pop	r24
    1f4a:	7f 91       	pop	r23
    1f4c:	6f 91       	pop	r22
    1f4e:	5f 91       	pop	r21
    1f50:	4f 91       	pop	r20
    1f52:	3f 91       	pop	r19
    1f54:	2f 91       	pop	r18
    1f56:	0f 90       	pop	r0
    1f58:	0b be       	out	0x3b, r0	; 59
    1f5a:	0f 90       	pop	r0
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	0f 90       	pop	r0
    1f60:	1f 90       	pop	r1
    1f62:	18 95       	reti

00001f64 <__vector_9>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH3_vect)      /* Channel 3 Interrupt */
    1f64:	1f 92       	push	r1
    1f66:	0f 92       	push	r0
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	0f 92       	push	r0
    1f6c:	11 24       	eor	r1, r1
    1f6e:	0b b6       	in	r0, 0x3b	; 59
    1f70:	0f 92       	push	r0
    1f72:	2f 93       	push	r18
    1f74:	3f 93       	push	r19
    1f76:	4f 93       	push	r20
    1f78:	5f 93       	push	r21
    1f7a:	6f 93       	push	r22
    1f7c:	7f 93       	push	r23
    1f7e:	8f 93       	push	r24
    1f80:	9f 93       	push	r25
    1f82:	af 93       	push	r26
    1f84:	bf 93       	push	r27
    1f86:	ef 93       	push	r30
    1f88:	ff 93       	push	r31
    1f8a:	e0 91 3f 21 	lds	r30, 0x213F
    1f8e:	f0 91 40 21 	lds	r31, 0x2140
    1f92:	30 97       	sbiw	r30, 0x00	; 0
    1f94:	29 f0       	breq	.+10     	; 0x1fa0 <__vector_9+0x3c>
    1f96:	80 91 35 22 	lds	r24, 0x2235
    1f9a:	90 91 36 22 	lds	r25, 0x2236
    1f9e:	19 95       	eicall
    1fa0:	ff 91       	pop	r31
    1fa2:	ef 91       	pop	r30
    1fa4:	bf 91       	pop	r27
    1fa6:	af 91       	pop	r26
    1fa8:	9f 91       	pop	r25
    1faa:	8f 91       	pop	r24
    1fac:	7f 91       	pop	r23
    1fae:	6f 91       	pop	r22
    1fb0:	5f 91       	pop	r21
    1fb2:	4f 91       	pop	r20
    1fb4:	3f 91       	pop	r19
    1fb6:	2f 91       	pop	r18
    1fb8:	0f 90       	pop	r0
    1fba:	0b be       	out	0x3b, r0	; 59
    1fbc:	0f 90       	pop	r0
    1fbe:	0f be       	out	0x3f, r0	; 63
    1fc0:	0f 90       	pop	r0
    1fc2:	1f 90       	pop	r1
    1fc4:	18 95       	reti

00001fc6 <__vector_10>:

/* RTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_OVF_vect)      /* Overflow Interrupt */
    1fc6:	1f 92       	push	r1
    1fc8:	0f 92       	push	r0
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	0f 92       	push	r0
    1fce:	11 24       	eor	r1, r1
    1fd0:	0b b6       	in	r0, 0x3b	; 59
    1fd2:	0f 92       	push	r0
    1fd4:	2f 93       	push	r18
    1fd6:	3f 93       	push	r19
    1fd8:	4f 93       	push	r20
    1fda:	5f 93       	push	r21
    1fdc:	6f 93       	push	r22
    1fde:	7f 93       	push	r23
    1fe0:	8f 93       	push	r24
    1fe2:	9f 93       	push	r25
    1fe4:	af 93       	push	r26
    1fe6:	bf 93       	push	r27
    1fe8:	ef 93       	push	r30
    1fea:	ff 93       	push	r31
    1fec:	e0 91 41 21 	lds	r30, 0x2141
    1ff0:	f0 91 42 21 	lds	r31, 0x2142
    1ff4:	30 97       	sbiw	r30, 0x00	; 0
    1ff6:	29 f0       	breq	.+10     	; 0x2002 <__vector_10+0x3c>
    1ff8:	80 91 37 22 	lds	r24, 0x2237
    1ffc:	90 91 38 22 	lds	r25, 0x2238
    2000:	19 95       	eicall
    2002:	ff 91       	pop	r31
    2004:	ef 91       	pop	r30
    2006:	bf 91       	pop	r27
    2008:	af 91       	pop	r26
    200a:	9f 91       	pop	r25
    200c:	8f 91       	pop	r24
    200e:	7f 91       	pop	r23
    2010:	6f 91       	pop	r22
    2012:	5f 91       	pop	r21
    2014:	4f 91       	pop	r20
    2016:	3f 91       	pop	r19
    2018:	2f 91       	pop	r18
    201a:	0f 90       	pop	r0
    201c:	0b be       	out	0x3b, r0	; 59
    201e:	0f 90       	pop	r0
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	0f 90       	pop	r0
    2024:	1f 90       	pop	r1
    2026:	18 95       	reti

00002028 <__vector_11>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_COMP_vect)      /* Compare Interrupt */
    2028:	1f 92       	push	r1
    202a:	0f 92       	push	r0
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	0f 92       	push	r0
    2030:	11 24       	eor	r1, r1
    2032:	0b b6       	in	r0, 0x3b	; 59
    2034:	0f 92       	push	r0
    2036:	2f 93       	push	r18
    2038:	3f 93       	push	r19
    203a:	4f 93       	push	r20
    203c:	5f 93       	push	r21
    203e:	6f 93       	push	r22
    2040:	7f 93       	push	r23
    2042:	8f 93       	push	r24
    2044:	9f 93       	push	r25
    2046:	af 93       	push	r26
    2048:	bf 93       	push	r27
    204a:	ef 93       	push	r30
    204c:	ff 93       	push	r31
    204e:	e0 91 43 21 	lds	r30, 0x2143
    2052:	f0 91 44 21 	lds	r31, 0x2144
    2056:	30 97       	sbiw	r30, 0x00	; 0
    2058:	29 f0       	breq	.+10     	; 0x2064 <__vector_11+0x3c>
    205a:	80 91 39 22 	lds	r24, 0x2239
    205e:	90 91 3a 22 	lds	r25, 0x223A
    2062:	19 95       	eicall
    2064:	ff 91       	pop	r31
    2066:	ef 91       	pop	r30
    2068:	bf 91       	pop	r27
    206a:	af 91       	pop	r26
    206c:	9f 91       	pop	r25
    206e:	8f 91       	pop	r24
    2070:	7f 91       	pop	r23
    2072:	6f 91       	pop	r22
    2074:	5f 91       	pop	r21
    2076:	4f 91       	pop	r20
    2078:	3f 91       	pop	r19
    207a:	2f 91       	pop	r18
    207c:	0f 90       	pop	r0
    207e:	0b be       	out	0x3b, r0	; 59
    2080:	0f 90       	pop	r0
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	0f 90       	pop	r0
    2086:	1f 90       	pop	r1
    2088:	18 95       	reti

0000208a <__vector_12>:

/* TWIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIS_vect)      /* TWI Slave Interrupt */
    208a:	1f 92       	push	r1
    208c:	0f 92       	push	r0
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	0f 92       	push	r0
    2092:	11 24       	eor	r1, r1
    2094:	0b b6       	in	r0, 0x3b	; 59
    2096:	0f 92       	push	r0
    2098:	2f 93       	push	r18
    209a:	3f 93       	push	r19
    209c:	4f 93       	push	r20
    209e:	5f 93       	push	r21
    20a0:	6f 93       	push	r22
    20a2:	7f 93       	push	r23
    20a4:	8f 93       	push	r24
    20a6:	9f 93       	push	r25
    20a8:	af 93       	push	r26
    20aa:	bf 93       	push	r27
    20ac:	ef 93       	push	r30
    20ae:	ff 93       	push	r31
    20b0:	e0 91 45 21 	lds	r30, 0x2145
    20b4:	f0 91 46 21 	lds	r31, 0x2146
    20b8:	30 97       	sbiw	r30, 0x00	; 0
    20ba:	29 f0       	breq	.+10     	; 0x20c6 <__vector_12+0x3c>
    20bc:	80 91 3b 22 	lds	r24, 0x223B
    20c0:	90 91 3c 22 	lds	r25, 0x223C
    20c4:	19 95       	eicall
    20c6:	ff 91       	pop	r31
    20c8:	ef 91       	pop	r30
    20ca:	bf 91       	pop	r27
    20cc:	af 91       	pop	r26
    20ce:	9f 91       	pop	r25
    20d0:	8f 91       	pop	r24
    20d2:	7f 91       	pop	r23
    20d4:	6f 91       	pop	r22
    20d6:	5f 91       	pop	r21
    20d8:	4f 91       	pop	r20
    20da:	3f 91       	pop	r19
    20dc:	2f 91       	pop	r18
    20de:	0f 90       	pop	r0
    20e0:	0b be       	out	0x3b, r0	; 59
    20e2:	0f 90       	pop	r0
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	0f 90       	pop	r0
    20e8:	1f 90       	pop	r1
    20ea:	18 95       	reti

000020ec <__vector_13>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIM_vect)      /* TWI Master Interrupt */
    20ec:	1f 92       	push	r1
    20ee:	0f 92       	push	r0
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	0f 92       	push	r0
    20f4:	11 24       	eor	r1, r1
    20f6:	0b b6       	in	r0, 0x3b	; 59
    20f8:	0f 92       	push	r0
    20fa:	2f 93       	push	r18
    20fc:	3f 93       	push	r19
    20fe:	4f 93       	push	r20
    2100:	5f 93       	push	r21
    2102:	6f 93       	push	r22
    2104:	7f 93       	push	r23
    2106:	8f 93       	push	r24
    2108:	9f 93       	push	r25
    210a:	af 93       	push	r26
    210c:	bf 93       	push	r27
    210e:	ef 93       	push	r30
    2110:	ff 93       	push	r31
    2112:	e0 91 47 21 	lds	r30, 0x2147
    2116:	f0 91 48 21 	lds	r31, 0x2148
    211a:	30 97       	sbiw	r30, 0x00	; 0
    211c:	29 f0       	breq	.+10     	; 0x2128 <__vector_13+0x3c>
    211e:	80 91 3d 22 	lds	r24, 0x223D
    2122:	90 91 3e 22 	lds	r25, 0x223E
    2126:	19 95       	eicall
    2128:	ff 91       	pop	r31
    212a:	ef 91       	pop	r30
    212c:	bf 91       	pop	r27
    212e:	af 91       	pop	r26
    2130:	9f 91       	pop	r25
    2132:	8f 91       	pop	r24
    2134:	7f 91       	pop	r23
    2136:	6f 91       	pop	r22
    2138:	5f 91       	pop	r21
    213a:	4f 91       	pop	r20
    213c:	3f 91       	pop	r19
    213e:	2f 91       	pop	r18
    2140:	0f 90       	pop	r0
    2142:	0b be       	out	0x3b, r0	; 59
    2144:	0f 90       	pop	r0
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	0f 90       	pop	r0
    214a:	1f 90       	pop	r1
    214c:	18 95       	reti

0000214e <__vector_14>:

/* TCC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_OVF_vect)      /* Overflow Interrupt */
    214e:	1f 92       	push	r1
    2150:	0f 92       	push	r0
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	0f 92       	push	r0
    2156:	11 24       	eor	r1, r1
    2158:	0b b6       	in	r0, 0x3b	; 59
    215a:	0f 92       	push	r0
    215c:	2f 93       	push	r18
    215e:	3f 93       	push	r19
    2160:	4f 93       	push	r20
    2162:	5f 93       	push	r21
    2164:	6f 93       	push	r22
    2166:	7f 93       	push	r23
    2168:	8f 93       	push	r24
    216a:	9f 93       	push	r25
    216c:	af 93       	push	r26
    216e:	bf 93       	push	r27
    2170:	ef 93       	push	r30
    2172:	ff 93       	push	r31
    2174:	e0 91 49 21 	lds	r30, 0x2149
    2178:	f0 91 4a 21 	lds	r31, 0x214A
    217c:	30 97       	sbiw	r30, 0x00	; 0
    217e:	29 f0       	breq	.+10     	; 0x218a <__vector_14+0x3c>
    2180:	80 91 3f 22 	lds	r24, 0x223F
    2184:	90 91 40 22 	lds	r25, 0x2240
    2188:	19 95       	eicall
    218a:	ff 91       	pop	r31
    218c:	ef 91       	pop	r30
    218e:	bf 91       	pop	r27
    2190:	af 91       	pop	r26
    2192:	9f 91       	pop	r25
    2194:	8f 91       	pop	r24
    2196:	7f 91       	pop	r23
    2198:	6f 91       	pop	r22
    219a:	5f 91       	pop	r21
    219c:	4f 91       	pop	r20
    219e:	3f 91       	pop	r19
    21a0:	2f 91       	pop	r18
    21a2:	0f 90       	pop	r0
    21a4:	0b be       	out	0x3b, r0	; 59
    21a6:	0f 90       	pop	r0
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	0f 90       	pop	r0
    21ac:	1f 90       	pop	r1
    21ae:	18 95       	reti

000021b0 <__vector_15>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_ERR_vect)      /* Error Interrupt */
    21b0:	1f 92       	push	r1
    21b2:	0f 92       	push	r0
    21b4:	0f b6       	in	r0, 0x3f	; 63
    21b6:	0f 92       	push	r0
    21b8:	11 24       	eor	r1, r1
    21ba:	0b b6       	in	r0, 0x3b	; 59
    21bc:	0f 92       	push	r0
    21be:	2f 93       	push	r18
    21c0:	3f 93       	push	r19
    21c2:	4f 93       	push	r20
    21c4:	5f 93       	push	r21
    21c6:	6f 93       	push	r22
    21c8:	7f 93       	push	r23
    21ca:	8f 93       	push	r24
    21cc:	9f 93       	push	r25
    21ce:	af 93       	push	r26
    21d0:	bf 93       	push	r27
    21d2:	ef 93       	push	r30
    21d4:	ff 93       	push	r31
    21d6:	e0 91 4b 21 	lds	r30, 0x214B
    21da:	f0 91 4c 21 	lds	r31, 0x214C
    21de:	30 97       	sbiw	r30, 0x00	; 0
    21e0:	29 f0       	breq	.+10     	; 0x21ec <__vector_15+0x3c>
    21e2:	80 91 41 22 	lds	r24, 0x2241
    21e6:	90 91 42 22 	lds	r25, 0x2242
    21ea:	19 95       	eicall
    21ec:	ff 91       	pop	r31
    21ee:	ef 91       	pop	r30
    21f0:	bf 91       	pop	r27
    21f2:	af 91       	pop	r26
    21f4:	9f 91       	pop	r25
    21f6:	8f 91       	pop	r24
    21f8:	7f 91       	pop	r23
    21fa:	6f 91       	pop	r22
    21fc:	5f 91       	pop	r21
    21fe:	4f 91       	pop	r20
    2200:	3f 91       	pop	r19
    2202:	2f 91       	pop	r18
    2204:	0f 90       	pop	r0
    2206:	0b be       	out	0x3b, r0	; 59
    2208:	0f 90       	pop	r0
    220a:	0f be       	out	0x3f, r0	; 63
    220c:	0f 90       	pop	r0
    220e:	1f 90       	pop	r1
    2210:	18 95       	reti

00002212 <__vector_16>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCA_vect)      /* Compare or Capture A Interrupt */
    2212:	1f 92       	push	r1
    2214:	0f 92       	push	r0
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	0f 92       	push	r0
    221a:	11 24       	eor	r1, r1
    221c:	0b b6       	in	r0, 0x3b	; 59
    221e:	0f 92       	push	r0
    2220:	2f 93       	push	r18
    2222:	3f 93       	push	r19
    2224:	4f 93       	push	r20
    2226:	5f 93       	push	r21
    2228:	6f 93       	push	r22
    222a:	7f 93       	push	r23
    222c:	8f 93       	push	r24
    222e:	9f 93       	push	r25
    2230:	af 93       	push	r26
    2232:	bf 93       	push	r27
    2234:	ef 93       	push	r30
    2236:	ff 93       	push	r31
    2238:	e0 91 4d 21 	lds	r30, 0x214D
    223c:	f0 91 4e 21 	lds	r31, 0x214E
    2240:	30 97       	sbiw	r30, 0x00	; 0
    2242:	29 f0       	breq	.+10     	; 0x224e <__vector_16+0x3c>
    2244:	80 91 43 22 	lds	r24, 0x2243
    2248:	90 91 44 22 	lds	r25, 0x2244
    224c:	19 95       	eicall
    224e:	ff 91       	pop	r31
    2250:	ef 91       	pop	r30
    2252:	bf 91       	pop	r27
    2254:	af 91       	pop	r26
    2256:	9f 91       	pop	r25
    2258:	8f 91       	pop	r24
    225a:	7f 91       	pop	r23
    225c:	6f 91       	pop	r22
    225e:	5f 91       	pop	r21
    2260:	4f 91       	pop	r20
    2262:	3f 91       	pop	r19
    2264:	2f 91       	pop	r18
    2266:	0f 90       	pop	r0
    2268:	0b be       	out	0x3b, r0	; 59
    226a:	0f 90       	pop	r0
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	0f 90       	pop	r0
    2270:	1f 90       	pop	r1
    2272:	18 95       	reti

00002274 <__vector_17>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCB_vect)      /* Compare or Capture B Interrupt */
    2274:	1f 92       	push	r1
    2276:	0f 92       	push	r0
    2278:	0f b6       	in	r0, 0x3f	; 63
    227a:	0f 92       	push	r0
    227c:	11 24       	eor	r1, r1
    227e:	0b b6       	in	r0, 0x3b	; 59
    2280:	0f 92       	push	r0
    2282:	2f 93       	push	r18
    2284:	3f 93       	push	r19
    2286:	4f 93       	push	r20
    2288:	5f 93       	push	r21
    228a:	6f 93       	push	r22
    228c:	7f 93       	push	r23
    228e:	8f 93       	push	r24
    2290:	9f 93       	push	r25
    2292:	af 93       	push	r26
    2294:	bf 93       	push	r27
    2296:	ef 93       	push	r30
    2298:	ff 93       	push	r31
    229a:	e0 91 4f 21 	lds	r30, 0x214F
    229e:	f0 91 50 21 	lds	r31, 0x2150
    22a2:	30 97       	sbiw	r30, 0x00	; 0
    22a4:	29 f0       	breq	.+10     	; 0x22b0 <__vector_17+0x3c>
    22a6:	80 91 45 22 	lds	r24, 0x2245
    22aa:	90 91 46 22 	lds	r25, 0x2246
    22ae:	19 95       	eicall
    22b0:	ff 91       	pop	r31
    22b2:	ef 91       	pop	r30
    22b4:	bf 91       	pop	r27
    22b6:	af 91       	pop	r26
    22b8:	9f 91       	pop	r25
    22ba:	8f 91       	pop	r24
    22bc:	7f 91       	pop	r23
    22be:	6f 91       	pop	r22
    22c0:	5f 91       	pop	r21
    22c2:	4f 91       	pop	r20
    22c4:	3f 91       	pop	r19
    22c6:	2f 91       	pop	r18
    22c8:	0f 90       	pop	r0
    22ca:	0b be       	out	0x3b, r0	; 59
    22cc:	0f 90       	pop	r0
    22ce:	0f be       	out	0x3f, r0	; 63
    22d0:	0f 90       	pop	r0
    22d2:	1f 90       	pop	r1
    22d4:	18 95       	reti

000022d6 <__vector_18>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCC_vect)      /* Compare or Capture C Interrupt */
    22d6:	1f 92       	push	r1
    22d8:	0f 92       	push	r0
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	0f 92       	push	r0
    22de:	11 24       	eor	r1, r1
    22e0:	0b b6       	in	r0, 0x3b	; 59
    22e2:	0f 92       	push	r0
    22e4:	2f 93       	push	r18
    22e6:	3f 93       	push	r19
    22e8:	4f 93       	push	r20
    22ea:	5f 93       	push	r21
    22ec:	6f 93       	push	r22
    22ee:	7f 93       	push	r23
    22f0:	8f 93       	push	r24
    22f2:	9f 93       	push	r25
    22f4:	af 93       	push	r26
    22f6:	bf 93       	push	r27
    22f8:	ef 93       	push	r30
    22fa:	ff 93       	push	r31
    22fc:	e0 91 51 21 	lds	r30, 0x2151
    2300:	f0 91 52 21 	lds	r31, 0x2152
    2304:	30 97       	sbiw	r30, 0x00	; 0
    2306:	29 f0       	breq	.+10     	; 0x2312 <__vector_18+0x3c>
    2308:	80 91 47 22 	lds	r24, 0x2247
    230c:	90 91 48 22 	lds	r25, 0x2248
    2310:	19 95       	eicall
    2312:	ff 91       	pop	r31
    2314:	ef 91       	pop	r30
    2316:	bf 91       	pop	r27
    2318:	af 91       	pop	r26
    231a:	9f 91       	pop	r25
    231c:	8f 91       	pop	r24
    231e:	7f 91       	pop	r23
    2320:	6f 91       	pop	r22
    2322:	5f 91       	pop	r21
    2324:	4f 91       	pop	r20
    2326:	3f 91       	pop	r19
    2328:	2f 91       	pop	r18
    232a:	0f 90       	pop	r0
    232c:	0b be       	out	0x3b, r0	; 59
    232e:	0f 90       	pop	r0
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	0f 90       	pop	r0
    2334:	1f 90       	pop	r1
    2336:	18 95       	reti

00002338 <__vector_19>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCD_vect)      /* Compare or Capture D Interrupt */
    2338:	1f 92       	push	r1
    233a:	0f 92       	push	r0
    233c:	0f b6       	in	r0, 0x3f	; 63
    233e:	0f 92       	push	r0
    2340:	11 24       	eor	r1, r1
    2342:	0b b6       	in	r0, 0x3b	; 59
    2344:	0f 92       	push	r0
    2346:	2f 93       	push	r18
    2348:	3f 93       	push	r19
    234a:	4f 93       	push	r20
    234c:	5f 93       	push	r21
    234e:	6f 93       	push	r22
    2350:	7f 93       	push	r23
    2352:	8f 93       	push	r24
    2354:	9f 93       	push	r25
    2356:	af 93       	push	r26
    2358:	bf 93       	push	r27
    235a:	ef 93       	push	r30
    235c:	ff 93       	push	r31
    235e:	e0 91 53 21 	lds	r30, 0x2153
    2362:	f0 91 54 21 	lds	r31, 0x2154
    2366:	30 97       	sbiw	r30, 0x00	; 0
    2368:	29 f0       	breq	.+10     	; 0x2374 <__vector_19+0x3c>
    236a:	80 91 49 22 	lds	r24, 0x2249
    236e:	90 91 4a 22 	lds	r25, 0x224A
    2372:	19 95       	eicall
    2374:	ff 91       	pop	r31
    2376:	ef 91       	pop	r30
    2378:	bf 91       	pop	r27
    237a:	af 91       	pop	r26
    237c:	9f 91       	pop	r25
    237e:	8f 91       	pop	r24
    2380:	7f 91       	pop	r23
    2382:	6f 91       	pop	r22
    2384:	5f 91       	pop	r21
    2386:	4f 91       	pop	r20
    2388:	3f 91       	pop	r19
    238a:	2f 91       	pop	r18
    238c:	0f 90       	pop	r0
    238e:	0b be       	out	0x3b, r0	; 59
    2390:	0f 90       	pop	r0
    2392:	0f be       	out	0x3f, r0	; 63
    2394:	0f 90       	pop	r0
    2396:	1f 90       	pop	r1
    2398:	18 95       	reti

0000239a <__vector_20>:

/* TCC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_OVF_vect)      /* Overflow Interrupt */
    239a:	1f 92       	push	r1
    239c:	0f 92       	push	r0
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	0f 92       	push	r0
    23a2:	11 24       	eor	r1, r1
    23a4:	0b b6       	in	r0, 0x3b	; 59
    23a6:	0f 92       	push	r0
    23a8:	2f 93       	push	r18
    23aa:	3f 93       	push	r19
    23ac:	4f 93       	push	r20
    23ae:	5f 93       	push	r21
    23b0:	6f 93       	push	r22
    23b2:	7f 93       	push	r23
    23b4:	8f 93       	push	r24
    23b6:	9f 93       	push	r25
    23b8:	af 93       	push	r26
    23ba:	bf 93       	push	r27
    23bc:	ef 93       	push	r30
    23be:	ff 93       	push	r31
    23c0:	e0 91 55 21 	lds	r30, 0x2155
    23c4:	f0 91 56 21 	lds	r31, 0x2156
    23c8:	30 97       	sbiw	r30, 0x00	; 0
    23ca:	29 f0       	breq	.+10     	; 0x23d6 <__vector_20+0x3c>
    23cc:	80 91 4b 22 	lds	r24, 0x224B
    23d0:	90 91 4c 22 	lds	r25, 0x224C
    23d4:	19 95       	eicall
    23d6:	ff 91       	pop	r31
    23d8:	ef 91       	pop	r30
    23da:	bf 91       	pop	r27
    23dc:	af 91       	pop	r26
    23de:	9f 91       	pop	r25
    23e0:	8f 91       	pop	r24
    23e2:	7f 91       	pop	r23
    23e4:	6f 91       	pop	r22
    23e6:	5f 91       	pop	r21
    23e8:	4f 91       	pop	r20
    23ea:	3f 91       	pop	r19
    23ec:	2f 91       	pop	r18
    23ee:	0f 90       	pop	r0
    23f0:	0b be       	out	0x3b, r0	; 59
    23f2:	0f 90       	pop	r0
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	0f 90       	pop	r0
    23f8:	1f 90       	pop	r1
    23fa:	18 95       	reti

000023fc <__vector_21>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_ERR_vect)      /* Error Interrupt */
    23fc:	1f 92       	push	r1
    23fe:	0f 92       	push	r0
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	0f 92       	push	r0
    2404:	11 24       	eor	r1, r1
    2406:	0b b6       	in	r0, 0x3b	; 59
    2408:	0f 92       	push	r0
    240a:	2f 93       	push	r18
    240c:	3f 93       	push	r19
    240e:	4f 93       	push	r20
    2410:	5f 93       	push	r21
    2412:	6f 93       	push	r22
    2414:	7f 93       	push	r23
    2416:	8f 93       	push	r24
    2418:	9f 93       	push	r25
    241a:	af 93       	push	r26
    241c:	bf 93       	push	r27
    241e:	ef 93       	push	r30
    2420:	ff 93       	push	r31
    2422:	e0 91 57 21 	lds	r30, 0x2157
    2426:	f0 91 58 21 	lds	r31, 0x2158
    242a:	30 97       	sbiw	r30, 0x00	; 0
    242c:	29 f0       	breq	.+10     	; 0x2438 <__vector_21+0x3c>
    242e:	80 91 4d 22 	lds	r24, 0x224D
    2432:	90 91 4e 22 	lds	r25, 0x224E
    2436:	19 95       	eicall
    2438:	ff 91       	pop	r31
    243a:	ef 91       	pop	r30
    243c:	bf 91       	pop	r27
    243e:	af 91       	pop	r26
    2440:	9f 91       	pop	r25
    2442:	8f 91       	pop	r24
    2444:	7f 91       	pop	r23
    2446:	6f 91       	pop	r22
    2448:	5f 91       	pop	r21
    244a:	4f 91       	pop	r20
    244c:	3f 91       	pop	r19
    244e:	2f 91       	pop	r18
    2450:	0f 90       	pop	r0
    2452:	0b be       	out	0x3b, r0	; 59
    2454:	0f 90       	pop	r0
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	0f 90       	pop	r0
    245a:	1f 90       	pop	r1
    245c:	18 95       	reti

0000245e <__vector_22>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCA_vect)      /* Compare or Capture A Interrupt */
    245e:	1f 92       	push	r1
    2460:	0f 92       	push	r0
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	0f 92       	push	r0
    2466:	11 24       	eor	r1, r1
    2468:	0b b6       	in	r0, 0x3b	; 59
    246a:	0f 92       	push	r0
    246c:	2f 93       	push	r18
    246e:	3f 93       	push	r19
    2470:	4f 93       	push	r20
    2472:	5f 93       	push	r21
    2474:	6f 93       	push	r22
    2476:	7f 93       	push	r23
    2478:	8f 93       	push	r24
    247a:	9f 93       	push	r25
    247c:	af 93       	push	r26
    247e:	bf 93       	push	r27
    2480:	ef 93       	push	r30
    2482:	ff 93       	push	r31
    2484:	e0 91 59 21 	lds	r30, 0x2159
    2488:	f0 91 5a 21 	lds	r31, 0x215A
    248c:	30 97       	sbiw	r30, 0x00	; 0
    248e:	29 f0       	breq	.+10     	; 0x249a <__vector_22+0x3c>
    2490:	80 91 4f 22 	lds	r24, 0x224F
    2494:	90 91 50 22 	lds	r25, 0x2250
    2498:	19 95       	eicall
    249a:	ff 91       	pop	r31
    249c:	ef 91       	pop	r30
    249e:	bf 91       	pop	r27
    24a0:	af 91       	pop	r26
    24a2:	9f 91       	pop	r25
    24a4:	8f 91       	pop	r24
    24a6:	7f 91       	pop	r23
    24a8:	6f 91       	pop	r22
    24aa:	5f 91       	pop	r21
    24ac:	4f 91       	pop	r20
    24ae:	3f 91       	pop	r19
    24b0:	2f 91       	pop	r18
    24b2:	0f 90       	pop	r0
    24b4:	0b be       	out	0x3b, r0	; 59
    24b6:	0f 90       	pop	r0
    24b8:	0f be       	out	0x3f, r0	; 63
    24ba:	0f 90       	pop	r0
    24bc:	1f 90       	pop	r1
    24be:	18 95       	reti

000024c0 <__vector_23>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCB_vect)      /* Compare or Capture B Interrupt */
    24c0:	1f 92       	push	r1
    24c2:	0f 92       	push	r0
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	0f 92       	push	r0
    24c8:	11 24       	eor	r1, r1
    24ca:	0b b6       	in	r0, 0x3b	; 59
    24cc:	0f 92       	push	r0
    24ce:	2f 93       	push	r18
    24d0:	3f 93       	push	r19
    24d2:	4f 93       	push	r20
    24d4:	5f 93       	push	r21
    24d6:	6f 93       	push	r22
    24d8:	7f 93       	push	r23
    24da:	8f 93       	push	r24
    24dc:	9f 93       	push	r25
    24de:	af 93       	push	r26
    24e0:	bf 93       	push	r27
    24e2:	ef 93       	push	r30
    24e4:	ff 93       	push	r31
    24e6:	e0 91 5b 21 	lds	r30, 0x215B
    24ea:	f0 91 5c 21 	lds	r31, 0x215C
    24ee:	30 97       	sbiw	r30, 0x00	; 0
    24f0:	29 f0       	breq	.+10     	; 0x24fc <__vector_23+0x3c>
    24f2:	80 91 51 22 	lds	r24, 0x2251
    24f6:	90 91 52 22 	lds	r25, 0x2252
    24fa:	19 95       	eicall
    24fc:	ff 91       	pop	r31
    24fe:	ef 91       	pop	r30
    2500:	bf 91       	pop	r27
    2502:	af 91       	pop	r26
    2504:	9f 91       	pop	r25
    2506:	8f 91       	pop	r24
    2508:	7f 91       	pop	r23
    250a:	6f 91       	pop	r22
    250c:	5f 91       	pop	r21
    250e:	4f 91       	pop	r20
    2510:	3f 91       	pop	r19
    2512:	2f 91       	pop	r18
    2514:	0f 90       	pop	r0
    2516:	0b be       	out	0x3b, r0	; 59
    2518:	0f 90       	pop	r0
    251a:	0f be       	out	0x3f, r0	; 63
    251c:	0f 90       	pop	r0
    251e:	1f 90       	pop	r1
    2520:	18 95       	reti

00002522 <__vector_24>:

/* SPIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIC_INT_vect)      /* SPI Interrupt */
    2522:	1f 92       	push	r1
    2524:	0f 92       	push	r0
    2526:	0f b6       	in	r0, 0x3f	; 63
    2528:	0f 92       	push	r0
    252a:	11 24       	eor	r1, r1
    252c:	0b b6       	in	r0, 0x3b	; 59
    252e:	0f 92       	push	r0
    2530:	2f 93       	push	r18
    2532:	3f 93       	push	r19
    2534:	4f 93       	push	r20
    2536:	5f 93       	push	r21
    2538:	6f 93       	push	r22
    253a:	7f 93       	push	r23
    253c:	8f 93       	push	r24
    253e:	9f 93       	push	r25
    2540:	af 93       	push	r26
    2542:	bf 93       	push	r27
    2544:	ef 93       	push	r30
    2546:	ff 93       	push	r31
    2548:	e0 91 5d 21 	lds	r30, 0x215D
    254c:	f0 91 5e 21 	lds	r31, 0x215E
    2550:	30 97       	sbiw	r30, 0x00	; 0
    2552:	29 f0       	breq	.+10     	; 0x255e <__vector_24+0x3c>
    2554:	80 91 53 22 	lds	r24, 0x2253
    2558:	90 91 54 22 	lds	r25, 0x2254
    255c:	19 95       	eicall
    255e:	ff 91       	pop	r31
    2560:	ef 91       	pop	r30
    2562:	bf 91       	pop	r27
    2564:	af 91       	pop	r26
    2566:	9f 91       	pop	r25
    2568:	8f 91       	pop	r24
    256a:	7f 91       	pop	r23
    256c:	6f 91       	pop	r22
    256e:	5f 91       	pop	r21
    2570:	4f 91       	pop	r20
    2572:	3f 91       	pop	r19
    2574:	2f 91       	pop	r18
    2576:	0f 90       	pop	r0
    2578:	0b be       	out	0x3b, r0	; 59
    257a:	0f 90       	pop	r0
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	0f 90       	pop	r0
    2580:	1f 90       	pop	r1
    2582:	18 95       	reti

00002584 <__vector_25>:

/* USARTC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_RXC_vect)      /* Reception Complete Interrupt */
    2584:	1f 92       	push	r1
    2586:	0f 92       	push	r0
    2588:	0f b6       	in	r0, 0x3f	; 63
    258a:	0f 92       	push	r0
    258c:	11 24       	eor	r1, r1
    258e:	0b b6       	in	r0, 0x3b	; 59
    2590:	0f 92       	push	r0
    2592:	2f 93       	push	r18
    2594:	3f 93       	push	r19
    2596:	4f 93       	push	r20
    2598:	5f 93       	push	r21
    259a:	6f 93       	push	r22
    259c:	7f 93       	push	r23
    259e:	8f 93       	push	r24
    25a0:	9f 93       	push	r25
    25a2:	af 93       	push	r26
    25a4:	bf 93       	push	r27
    25a6:	ef 93       	push	r30
    25a8:	ff 93       	push	r31
    25aa:	e0 91 5f 21 	lds	r30, 0x215F
    25ae:	f0 91 60 21 	lds	r31, 0x2160
    25b2:	30 97       	sbiw	r30, 0x00	; 0
    25b4:	29 f0       	breq	.+10     	; 0x25c0 <__vector_25+0x3c>
    25b6:	80 91 55 22 	lds	r24, 0x2255
    25ba:	90 91 56 22 	lds	r25, 0x2256
    25be:	19 95       	eicall
    25c0:	ff 91       	pop	r31
    25c2:	ef 91       	pop	r30
    25c4:	bf 91       	pop	r27
    25c6:	af 91       	pop	r26
    25c8:	9f 91       	pop	r25
    25ca:	8f 91       	pop	r24
    25cc:	7f 91       	pop	r23
    25ce:	6f 91       	pop	r22
    25d0:	5f 91       	pop	r21
    25d2:	4f 91       	pop	r20
    25d4:	3f 91       	pop	r19
    25d6:	2f 91       	pop	r18
    25d8:	0f 90       	pop	r0
    25da:	0b be       	out	0x3b, r0	; 59
    25dc:	0f 90       	pop	r0
    25de:	0f be       	out	0x3f, r0	; 63
    25e0:	0f 90       	pop	r0
    25e2:	1f 90       	pop	r1
    25e4:	18 95       	reti

000025e6 <__vector_26>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_DRE_vect)      /* Data Register Empty Interrupt */
    25e6:	1f 92       	push	r1
    25e8:	0f 92       	push	r0
    25ea:	0f b6       	in	r0, 0x3f	; 63
    25ec:	0f 92       	push	r0
    25ee:	11 24       	eor	r1, r1
    25f0:	0b b6       	in	r0, 0x3b	; 59
    25f2:	0f 92       	push	r0
    25f4:	2f 93       	push	r18
    25f6:	3f 93       	push	r19
    25f8:	4f 93       	push	r20
    25fa:	5f 93       	push	r21
    25fc:	6f 93       	push	r22
    25fe:	7f 93       	push	r23
    2600:	8f 93       	push	r24
    2602:	9f 93       	push	r25
    2604:	af 93       	push	r26
    2606:	bf 93       	push	r27
    2608:	ef 93       	push	r30
    260a:	ff 93       	push	r31
    260c:	e0 91 61 21 	lds	r30, 0x2161
    2610:	f0 91 62 21 	lds	r31, 0x2162
    2614:	30 97       	sbiw	r30, 0x00	; 0
    2616:	29 f0       	breq	.+10     	; 0x2622 <__vector_26+0x3c>
    2618:	80 91 57 22 	lds	r24, 0x2257
    261c:	90 91 58 22 	lds	r25, 0x2258
    2620:	19 95       	eicall
    2622:	ff 91       	pop	r31
    2624:	ef 91       	pop	r30
    2626:	bf 91       	pop	r27
    2628:	af 91       	pop	r26
    262a:	9f 91       	pop	r25
    262c:	8f 91       	pop	r24
    262e:	7f 91       	pop	r23
    2630:	6f 91       	pop	r22
    2632:	5f 91       	pop	r21
    2634:	4f 91       	pop	r20
    2636:	3f 91       	pop	r19
    2638:	2f 91       	pop	r18
    263a:	0f 90       	pop	r0
    263c:	0b be       	out	0x3b, r0	; 59
    263e:	0f 90       	pop	r0
    2640:	0f be       	out	0x3f, r0	; 63
    2642:	0f 90       	pop	r0
    2644:	1f 90       	pop	r1
    2646:	18 95       	reti

00002648 <__vector_27>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_TXC_vect)      /* Transmission Complete Interrupt */
    2648:	1f 92       	push	r1
    264a:	0f 92       	push	r0
    264c:	0f b6       	in	r0, 0x3f	; 63
    264e:	0f 92       	push	r0
    2650:	11 24       	eor	r1, r1
    2652:	0b b6       	in	r0, 0x3b	; 59
    2654:	0f 92       	push	r0
    2656:	2f 93       	push	r18
    2658:	3f 93       	push	r19
    265a:	4f 93       	push	r20
    265c:	5f 93       	push	r21
    265e:	6f 93       	push	r22
    2660:	7f 93       	push	r23
    2662:	8f 93       	push	r24
    2664:	9f 93       	push	r25
    2666:	af 93       	push	r26
    2668:	bf 93       	push	r27
    266a:	ef 93       	push	r30
    266c:	ff 93       	push	r31
    266e:	e0 91 63 21 	lds	r30, 0x2163
    2672:	f0 91 64 21 	lds	r31, 0x2164
    2676:	30 97       	sbiw	r30, 0x00	; 0
    2678:	29 f0       	breq	.+10     	; 0x2684 <__vector_27+0x3c>
    267a:	80 91 59 22 	lds	r24, 0x2259
    267e:	90 91 5a 22 	lds	r25, 0x225A
    2682:	19 95       	eicall
    2684:	ff 91       	pop	r31
    2686:	ef 91       	pop	r30
    2688:	bf 91       	pop	r27
    268a:	af 91       	pop	r26
    268c:	9f 91       	pop	r25
    268e:	8f 91       	pop	r24
    2690:	7f 91       	pop	r23
    2692:	6f 91       	pop	r22
    2694:	5f 91       	pop	r21
    2696:	4f 91       	pop	r20
    2698:	3f 91       	pop	r19
    269a:	2f 91       	pop	r18
    269c:	0f 90       	pop	r0
    269e:	0b be       	out	0x3b, r0	; 59
    26a0:	0f 90       	pop	r0
    26a2:	0f be       	out	0x3f, r0	; 63
    26a4:	0f 90       	pop	r0
    26a6:	1f 90       	pop	r1
    26a8:	18 95       	reti

000026aa <__vector_28>:

/* USARTC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_RXC_vect)      /* Reception Complete Interrupt */
    26aa:	1f 92       	push	r1
    26ac:	0f 92       	push	r0
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	0f 92       	push	r0
    26b2:	11 24       	eor	r1, r1
    26b4:	0b b6       	in	r0, 0x3b	; 59
    26b6:	0f 92       	push	r0
    26b8:	2f 93       	push	r18
    26ba:	3f 93       	push	r19
    26bc:	4f 93       	push	r20
    26be:	5f 93       	push	r21
    26c0:	6f 93       	push	r22
    26c2:	7f 93       	push	r23
    26c4:	8f 93       	push	r24
    26c6:	9f 93       	push	r25
    26c8:	af 93       	push	r26
    26ca:	bf 93       	push	r27
    26cc:	ef 93       	push	r30
    26ce:	ff 93       	push	r31
    26d0:	e0 91 65 21 	lds	r30, 0x2165
    26d4:	f0 91 66 21 	lds	r31, 0x2166
    26d8:	30 97       	sbiw	r30, 0x00	; 0
    26da:	29 f0       	breq	.+10     	; 0x26e6 <__vector_28+0x3c>
    26dc:	80 91 5b 22 	lds	r24, 0x225B
    26e0:	90 91 5c 22 	lds	r25, 0x225C
    26e4:	19 95       	eicall
    26e6:	ff 91       	pop	r31
    26e8:	ef 91       	pop	r30
    26ea:	bf 91       	pop	r27
    26ec:	af 91       	pop	r26
    26ee:	9f 91       	pop	r25
    26f0:	8f 91       	pop	r24
    26f2:	7f 91       	pop	r23
    26f4:	6f 91       	pop	r22
    26f6:	5f 91       	pop	r21
    26f8:	4f 91       	pop	r20
    26fa:	3f 91       	pop	r19
    26fc:	2f 91       	pop	r18
    26fe:	0f 90       	pop	r0
    2700:	0b be       	out	0x3b, r0	; 59
    2702:	0f 90       	pop	r0
    2704:	0f be       	out	0x3f, r0	; 63
    2706:	0f 90       	pop	r0
    2708:	1f 90       	pop	r1
    270a:	18 95       	reti

0000270c <__vector_29>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_DRE_vect)      /* Data Register Empty Interrupt */
    270c:	1f 92       	push	r1
    270e:	0f 92       	push	r0
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	0f 92       	push	r0
    2714:	11 24       	eor	r1, r1
    2716:	0b b6       	in	r0, 0x3b	; 59
    2718:	0f 92       	push	r0
    271a:	2f 93       	push	r18
    271c:	3f 93       	push	r19
    271e:	4f 93       	push	r20
    2720:	5f 93       	push	r21
    2722:	6f 93       	push	r22
    2724:	7f 93       	push	r23
    2726:	8f 93       	push	r24
    2728:	9f 93       	push	r25
    272a:	af 93       	push	r26
    272c:	bf 93       	push	r27
    272e:	ef 93       	push	r30
    2730:	ff 93       	push	r31
    2732:	e0 91 67 21 	lds	r30, 0x2167
    2736:	f0 91 68 21 	lds	r31, 0x2168
    273a:	30 97       	sbiw	r30, 0x00	; 0
    273c:	29 f0       	breq	.+10     	; 0x2748 <__vector_29+0x3c>
    273e:	80 91 5d 22 	lds	r24, 0x225D
    2742:	90 91 5e 22 	lds	r25, 0x225E
    2746:	19 95       	eicall
    2748:	ff 91       	pop	r31
    274a:	ef 91       	pop	r30
    274c:	bf 91       	pop	r27
    274e:	af 91       	pop	r26
    2750:	9f 91       	pop	r25
    2752:	8f 91       	pop	r24
    2754:	7f 91       	pop	r23
    2756:	6f 91       	pop	r22
    2758:	5f 91       	pop	r21
    275a:	4f 91       	pop	r20
    275c:	3f 91       	pop	r19
    275e:	2f 91       	pop	r18
    2760:	0f 90       	pop	r0
    2762:	0b be       	out	0x3b, r0	; 59
    2764:	0f 90       	pop	r0
    2766:	0f be       	out	0x3f, r0	; 63
    2768:	0f 90       	pop	r0
    276a:	1f 90       	pop	r1
    276c:	18 95       	reti

0000276e <__vector_30>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_TXC_vect)      /* Transmission Complete Interrupt */
    276e:	1f 92       	push	r1
    2770:	0f 92       	push	r0
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	0f 92       	push	r0
    2776:	11 24       	eor	r1, r1
    2778:	0b b6       	in	r0, 0x3b	; 59
    277a:	0f 92       	push	r0
    277c:	2f 93       	push	r18
    277e:	3f 93       	push	r19
    2780:	4f 93       	push	r20
    2782:	5f 93       	push	r21
    2784:	6f 93       	push	r22
    2786:	7f 93       	push	r23
    2788:	8f 93       	push	r24
    278a:	9f 93       	push	r25
    278c:	af 93       	push	r26
    278e:	bf 93       	push	r27
    2790:	ef 93       	push	r30
    2792:	ff 93       	push	r31
    2794:	e0 91 69 21 	lds	r30, 0x2169
    2798:	f0 91 6a 21 	lds	r31, 0x216A
    279c:	30 97       	sbiw	r30, 0x00	; 0
    279e:	29 f0       	breq	.+10     	; 0x27aa <__vector_30+0x3c>
    27a0:	80 91 5f 22 	lds	r24, 0x225F
    27a4:	90 91 60 22 	lds	r25, 0x2260
    27a8:	19 95       	eicall
    27aa:	ff 91       	pop	r31
    27ac:	ef 91       	pop	r30
    27ae:	bf 91       	pop	r27
    27b0:	af 91       	pop	r26
    27b2:	9f 91       	pop	r25
    27b4:	8f 91       	pop	r24
    27b6:	7f 91       	pop	r23
    27b8:	6f 91       	pop	r22
    27ba:	5f 91       	pop	r21
    27bc:	4f 91       	pop	r20
    27be:	3f 91       	pop	r19
    27c0:	2f 91       	pop	r18
    27c2:	0f 90       	pop	r0
    27c4:	0b be       	out	0x3b, r0	; 59
    27c6:	0f 90       	pop	r0
    27c8:	0f be       	out	0x3f, r0	; 63
    27ca:	0f 90       	pop	r0
    27cc:	1f 90       	pop	r1
    27ce:	18 95       	reti

000027d0 <__vector_31>:

/* AES interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(AES_INT_vect)      /* AES Interrupt */
    27d0:	1f 92       	push	r1
    27d2:	0f 92       	push	r0
    27d4:	0f b6       	in	r0, 0x3f	; 63
    27d6:	0f 92       	push	r0
    27d8:	11 24       	eor	r1, r1
    27da:	0b b6       	in	r0, 0x3b	; 59
    27dc:	0f 92       	push	r0
    27de:	2f 93       	push	r18
    27e0:	3f 93       	push	r19
    27e2:	4f 93       	push	r20
    27e4:	5f 93       	push	r21
    27e6:	6f 93       	push	r22
    27e8:	7f 93       	push	r23
    27ea:	8f 93       	push	r24
    27ec:	9f 93       	push	r25
    27ee:	af 93       	push	r26
    27f0:	bf 93       	push	r27
    27f2:	ef 93       	push	r30
    27f4:	ff 93       	push	r31
    27f6:	e0 91 6b 21 	lds	r30, 0x216B
    27fa:	f0 91 6c 21 	lds	r31, 0x216C
    27fe:	30 97       	sbiw	r30, 0x00	; 0
    2800:	29 f0       	breq	.+10     	; 0x280c <__vector_31+0x3c>
    2802:	80 91 61 22 	lds	r24, 0x2261
    2806:	90 91 62 22 	lds	r25, 0x2262
    280a:	19 95       	eicall
    280c:	ff 91       	pop	r31
    280e:	ef 91       	pop	r30
    2810:	bf 91       	pop	r27
    2812:	af 91       	pop	r26
    2814:	9f 91       	pop	r25
    2816:	8f 91       	pop	r24
    2818:	7f 91       	pop	r23
    281a:	6f 91       	pop	r22
    281c:	5f 91       	pop	r21
    281e:	4f 91       	pop	r20
    2820:	3f 91       	pop	r19
    2822:	2f 91       	pop	r18
    2824:	0f 90       	pop	r0
    2826:	0b be       	out	0x3b, r0	; 59
    2828:	0f 90       	pop	r0
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	0f 90       	pop	r0
    282e:	1f 90       	pop	r1
    2830:	18 95       	reti

00002832 <__vector_32>:

/* NVM interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_EE_vect)      /* EE Interrupt */
    2832:	1f 92       	push	r1
    2834:	0f 92       	push	r0
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	0f 92       	push	r0
    283a:	11 24       	eor	r1, r1
    283c:	0b b6       	in	r0, 0x3b	; 59
    283e:	0f 92       	push	r0
    2840:	2f 93       	push	r18
    2842:	3f 93       	push	r19
    2844:	4f 93       	push	r20
    2846:	5f 93       	push	r21
    2848:	6f 93       	push	r22
    284a:	7f 93       	push	r23
    284c:	8f 93       	push	r24
    284e:	9f 93       	push	r25
    2850:	af 93       	push	r26
    2852:	bf 93       	push	r27
    2854:	ef 93       	push	r30
    2856:	ff 93       	push	r31
    2858:	e0 91 6d 21 	lds	r30, 0x216D
    285c:	f0 91 6e 21 	lds	r31, 0x216E
    2860:	30 97       	sbiw	r30, 0x00	; 0
    2862:	29 f0       	breq	.+10     	; 0x286e <__vector_32+0x3c>
    2864:	80 91 63 22 	lds	r24, 0x2263
    2868:	90 91 64 22 	lds	r25, 0x2264
    286c:	19 95       	eicall
    286e:	ff 91       	pop	r31
    2870:	ef 91       	pop	r30
    2872:	bf 91       	pop	r27
    2874:	af 91       	pop	r26
    2876:	9f 91       	pop	r25
    2878:	8f 91       	pop	r24
    287a:	7f 91       	pop	r23
    287c:	6f 91       	pop	r22
    287e:	5f 91       	pop	r21
    2880:	4f 91       	pop	r20
    2882:	3f 91       	pop	r19
    2884:	2f 91       	pop	r18
    2886:	0f 90       	pop	r0
    2888:	0b be       	out	0x3b, r0	; 59
    288a:	0f 90       	pop	r0
    288c:	0f be       	out	0x3f, r0	; 63
    288e:	0f 90       	pop	r0
    2890:	1f 90       	pop	r1
    2892:	18 95       	reti

00002894 <__vector_33>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_SPM_vect)      /* SPM Interrupt */
    2894:	1f 92       	push	r1
    2896:	0f 92       	push	r0
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	0f 92       	push	r0
    289c:	11 24       	eor	r1, r1
    289e:	0b b6       	in	r0, 0x3b	; 59
    28a0:	0f 92       	push	r0
    28a2:	2f 93       	push	r18
    28a4:	3f 93       	push	r19
    28a6:	4f 93       	push	r20
    28a8:	5f 93       	push	r21
    28aa:	6f 93       	push	r22
    28ac:	7f 93       	push	r23
    28ae:	8f 93       	push	r24
    28b0:	9f 93       	push	r25
    28b2:	af 93       	push	r26
    28b4:	bf 93       	push	r27
    28b6:	ef 93       	push	r30
    28b8:	ff 93       	push	r31
    28ba:	e0 91 6f 21 	lds	r30, 0x216F
    28be:	f0 91 70 21 	lds	r31, 0x2170
    28c2:	30 97       	sbiw	r30, 0x00	; 0
    28c4:	29 f0       	breq	.+10     	; 0x28d0 <__vector_33+0x3c>
    28c6:	80 91 65 22 	lds	r24, 0x2265
    28ca:	90 91 66 22 	lds	r25, 0x2266
    28ce:	19 95       	eicall
    28d0:	ff 91       	pop	r31
    28d2:	ef 91       	pop	r30
    28d4:	bf 91       	pop	r27
    28d6:	af 91       	pop	r26
    28d8:	9f 91       	pop	r25
    28da:	8f 91       	pop	r24
    28dc:	7f 91       	pop	r23
    28de:	6f 91       	pop	r22
    28e0:	5f 91       	pop	r21
    28e2:	4f 91       	pop	r20
    28e4:	3f 91       	pop	r19
    28e6:	2f 91       	pop	r18
    28e8:	0f 90       	pop	r0
    28ea:	0b be       	out	0x3b, r0	; 59
    28ec:	0f 90       	pop	r0
    28ee:	0f be       	out	0x3f, r0	; 63
    28f0:	0f 90       	pop	r0
    28f2:	1f 90       	pop	r1
    28f4:	18 95       	reti

000028f6 <__vector_34>:

/* PORTB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT0_vect)      /* External Interrupt 0 */
    28f6:	1f 92       	push	r1
    28f8:	0f 92       	push	r0
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	0f 92       	push	r0
    28fe:	11 24       	eor	r1, r1
    2900:	0b b6       	in	r0, 0x3b	; 59
    2902:	0f 92       	push	r0
    2904:	2f 93       	push	r18
    2906:	3f 93       	push	r19
    2908:	4f 93       	push	r20
    290a:	5f 93       	push	r21
    290c:	6f 93       	push	r22
    290e:	7f 93       	push	r23
    2910:	8f 93       	push	r24
    2912:	9f 93       	push	r25
    2914:	af 93       	push	r26
    2916:	bf 93       	push	r27
    2918:	ef 93       	push	r30
    291a:	ff 93       	push	r31
    291c:	e0 91 71 21 	lds	r30, 0x2171
    2920:	f0 91 72 21 	lds	r31, 0x2172
    2924:	30 97       	sbiw	r30, 0x00	; 0
    2926:	29 f0       	breq	.+10     	; 0x2932 <__vector_34+0x3c>
    2928:	80 91 67 22 	lds	r24, 0x2267
    292c:	90 91 68 22 	lds	r25, 0x2268
    2930:	19 95       	eicall
    2932:	ff 91       	pop	r31
    2934:	ef 91       	pop	r30
    2936:	bf 91       	pop	r27
    2938:	af 91       	pop	r26
    293a:	9f 91       	pop	r25
    293c:	8f 91       	pop	r24
    293e:	7f 91       	pop	r23
    2940:	6f 91       	pop	r22
    2942:	5f 91       	pop	r21
    2944:	4f 91       	pop	r20
    2946:	3f 91       	pop	r19
    2948:	2f 91       	pop	r18
    294a:	0f 90       	pop	r0
    294c:	0b be       	out	0x3b, r0	; 59
    294e:	0f 90       	pop	r0
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	0f 90       	pop	r0
    2954:	1f 90       	pop	r1
    2956:	18 95       	reti

00002958 <__vector_35>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT1_vect)      /* External Interrupt 1 */
    2958:	1f 92       	push	r1
    295a:	0f 92       	push	r0
    295c:	0f b6       	in	r0, 0x3f	; 63
    295e:	0f 92       	push	r0
    2960:	11 24       	eor	r1, r1
    2962:	0b b6       	in	r0, 0x3b	; 59
    2964:	0f 92       	push	r0
    2966:	2f 93       	push	r18
    2968:	3f 93       	push	r19
    296a:	4f 93       	push	r20
    296c:	5f 93       	push	r21
    296e:	6f 93       	push	r22
    2970:	7f 93       	push	r23
    2972:	8f 93       	push	r24
    2974:	9f 93       	push	r25
    2976:	af 93       	push	r26
    2978:	bf 93       	push	r27
    297a:	ef 93       	push	r30
    297c:	ff 93       	push	r31
    297e:	e0 91 73 21 	lds	r30, 0x2173
    2982:	f0 91 74 21 	lds	r31, 0x2174
    2986:	30 97       	sbiw	r30, 0x00	; 0
    2988:	29 f0       	breq	.+10     	; 0x2994 <__vector_35+0x3c>
    298a:	80 91 69 22 	lds	r24, 0x2269
    298e:	90 91 6a 22 	lds	r25, 0x226A
    2992:	19 95       	eicall
    2994:	ff 91       	pop	r31
    2996:	ef 91       	pop	r30
    2998:	bf 91       	pop	r27
    299a:	af 91       	pop	r26
    299c:	9f 91       	pop	r25
    299e:	8f 91       	pop	r24
    29a0:	7f 91       	pop	r23
    29a2:	6f 91       	pop	r22
    29a4:	5f 91       	pop	r21
    29a6:	4f 91       	pop	r20
    29a8:	3f 91       	pop	r19
    29aa:	2f 91       	pop	r18
    29ac:	0f 90       	pop	r0
    29ae:	0b be       	out	0x3b, r0	; 59
    29b0:	0f 90       	pop	r0
    29b2:	0f be       	out	0x3f, r0	; 63
    29b4:	0f 90       	pop	r0
    29b6:	1f 90       	pop	r1
    29b8:	18 95       	reti

000029ba <__vector_36>:

/* ACB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC0_vect)      /* AC0 Interrupt */
    29ba:	1f 92       	push	r1
    29bc:	0f 92       	push	r0
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	0f 92       	push	r0
    29c2:	11 24       	eor	r1, r1
    29c4:	0b b6       	in	r0, 0x3b	; 59
    29c6:	0f 92       	push	r0
    29c8:	2f 93       	push	r18
    29ca:	3f 93       	push	r19
    29cc:	4f 93       	push	r20
    29ce:	5f 93       	push	r21
    29d0:	6f 93       	push	r22
    29d2:	7f 93       	push	r23
    29d4:	8f 93       	push	r24
    29d6:	9f 93       	push	r25
    29d8:	af 93       	push	r26
    29da:	bf 93       	push	r27
    29dc:	ef 93       	push	r30
    29de:	ff 93       	push	r31
    29e0:	e0 91 75 21 	lds	r30, 0x2175
    29e4:	f0 91 76 21 	lds	r31, 0x2176
    29e8:	30 97       	sbiw	r30, 0x00	; 0
    29ea:	29 f0       	breq	.+10     	; 0x29f6 <__vector_36+0x3c>
    29ec:	80 91 6b 22 	lds	r24, 0x226B
    29f0:	90 91 6c 22 	lds	r25, 0x226C
    29f4:	19 95       	eicall
    29f6:	ff 91       	pop	r31
    29f8:	ef 91       	pop	r30
    29fa:	bf 91       	pop	r27
    29fc:	af 91       	pop	r26
    29fe:	9f 91       	pop	r25
    2a00:	8f 91       	pop	r24
    2a02:	7f 91       	pop	r23
    2a04:	6f 91       	pop	r22
    2a06:	5f 91       	pop	r21
    2a08:	4f 91       	pop	r20
    2a0a:	3f 91       	pop	r19
    2a0c:	2f 91       	pop	r18
    2a0e:	0f 90       	pop	r0
    2a10:	0b be       	out	0x3b, r0	; 59
    2a12:	0f 90       	pop	r0
    2a14:	0f be       	out	0x3f, r0	; 63
    2a16:	0f 90       	pop	r0
    2a18:	1f 90       	pop	r1
    2a1a:	18 95       	reti

00002a1c <__vector_37>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC1_vect)      /* AC1 Interrupt */
    2a1c:	1f 92       	push	r1
    2a1e:	0f 92       	push	r0
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	0f 92       	push	r0
    2a24:	11 24       	eor	r1, r1
    2a26:	0b b6       	in	r0, 0x3b	; 59
    2a28:	0f 92       	push	r0
    2a2a:	2f 93       	push	r18
    2a2c:	3f 93       	push	r19
    2a2e:	4f 93       	push	r20
    2a30:	5f 93       	push	r21
    2a32:	6f 93       	push	r22
    2a34:	7f 93       	push	r23
    2a36:	8f 93       	push	r24
    2a38:	9f 93       	push	r25
    2a3a:	af 93       	push	r26
    2a3c:	bf 93       	push	r27
    2a3e:	ef 93       	push	r30
    2a40:	ff 93       	push	r31
    2a42:	e0 91 77 21 	lds	r30, 0x2177
    2a46:	f0 91 78 21 	lds	r31, 0x2178
    2a4a:	30 97       	sbiw	r30, 0x00	; 0
    2a4c:	29 f0       	breq	.+10     	; 0x2a58 <__vector_37+0x3c>
    2a4e:	80 91 6d 22 	lds	r24, 0x226D
    2a52:	90 91 6e 22 	lds	r25, 0x226E
    2a56:	19 95       	eicall
    2a58:	ff 91       	pop	r31
    2a5a:	ef 91       	pop	r30
    2a5c:	bf 91       	pop	r27
    2a5e:	af 91       	pop	r26
    2a60:	9f 91       	pop	r25
    2a62:	8f 91       	pop	r24
    2a64:	7f 91       	pop	r23
    2a66:	6f 91       	pop	r22
    2a68:	5f 91       	pop	r21
    2a6a:	4f 91       	pop	r20
    2a6c:	3f 91       	pop	r19
    2a6e:	2f 91       	pop	r18
    2a70:	0f 90       	pop	r0
    2a72:	0b be       	out	0x3b, r0	; 59
    2a74:	0f 90       	pop	r0
    2a76:	0f be       	out	0x3f, r0	; 63
    2a78:	0f 90       	pop	r0
    2a7a:	1f 90       	pop	r1
    2a7c:	18 95       	reti

00002a7e <__vector_38>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_ACW_vect)      /* ACW Window Mode Interrupt */
    2a7e:	1f 92       	push	r1
    2a80:	0f 92       	push	r0
    2a82:	0f b6       	in	r0, 0x3f	; 63
    2a84:	0f 92       	push	r0
    2a86:	11 24       	eor	r1, r1
    2a88:	0b b6       	in	r0, 0x3b	; 59
    2a8a:	0f 92       	push	r0
    2a8c:	2f 93       	push	r18
    2a8e:	3f 93       	push	r19
    2a90:	4f 93       	push	r20
    2a92:	5f 93       	push	r21
    2a94:	6f 93       	push	r22
    2a96:	7f 93       	push	r23
    2a98:	8f 93       	push	r24
    2a9a:	9f 93       	push	r25
    2a9c:	af 93       	push	r26
    2a9e:	bf 93       	push	r27
    2aa0:	ef 93       	push	r30
    2aa2:	ff 93       	push	r31
    2aa4:	e0 91 79 21 	lds	r30, 0x2179
    2aa8:	f0 91 7a 21 	lds	r31, 0x217A
    2aac:	30 97       	sbiw	r30, 0x00	; 0
    2aae:	29 f0       	breq	.+10     	; 0x2aba <__vector_38+0x3c>
    2ab0:	80 91 6f 22 	lds	r24, 0x226F
    2ab4:	90 91 70 22 	lds	r25, 0x2270
    2ab8:	19 95       	eicall
    2aba:	ff 91       	pop	r31
    2abc:	ef 91       	pop	r30
    2abe:	bf 91       	pop	r27
    2ac0:	af 91       	pop	r26
    2ac2:	9f 91       	pop	r25
    2ac4:	8f 91       	pop	r24
    2ac6:	7f 91       	pop	r23
    2ac8:	6f 91       	pop	r22
    2aca:	5f 91       	pop	r21
    2acc:	4f 91       	pop	r20
    2ace:	3f 91       	pop	r19
    2ad0:	2f 91       	pop	r18
    2ad2:	0f 90       	pop	r0
    2ad4:	0b be       	out	0x3b, r0	; 59
    2ad6:	0f 90       	pop	r0
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	0f 90       	pop	r0
    2adc:	1f 90       	pop	r1
    2ade:	18 95       	reti

00002ae0 <__vector_39>:

/* ADCB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH0_vect)      /* Interrupt 0 */
    2ae0:	1f 92       	push	r1
    2ae2:	0f 92       	push	r0
    2ae4:	0f b6       	in	r0, 0x3f	; 63
    2ae6:	0f 92       	push	r0
    2ae8:	11 24       	eor	r1, r1
    2aea:	0b b6       	in	r0, 0x3b	; 59
    2aec:	0f 92       	push	r0
    2aee:	2f 93       	push	r18
    2af0:	3f 93       	push	r19
    2af2:	4f 93       	push	r20
    2af4:	5f 93       	push	r21
    2af6:	6f 93       	push	r22
    2af8:	7f 93       	push	r23
    2afa:	8f 93       	push	r24
    2afc:	9f 93       	push	r25
    2afe:	af 93       	push	r26
    2b00:	bf 93       	push	r27
    2b02:	ef 93       	push	r30
    2b04:	ff 93       	push	r31
    2b06:	e0 91 7b 21 	lds	r30, 0x217B
    2b0a:	f0 91 7c 21 	lds	r31, 0x217C
    2b0e:	30 97       	sbiw	r30, 0x00	; 0
    2b10:	29 f0       	breq	.+10     	; 0x2b1c <__vector_39+0x3c>
    2b12:	80 91 71 22 	lds	r24, 0x2271
    2b16:	90 91 72 22 	lds	r25, 0x2272
    2b1a:	19 95       	eicall
    2b1c:	ff 91       	pop	r31
    2b1e:	ef 91       	pop	r30
    2b20:	bf 91       	pop	r27
    2b22:	af 91       	pop	r26
    2b24:	9f 91       	pop	r25
    2b26:	8f 91       	pop	r24
    2b28:	7f 91       	pop	r23
    2b2a:	6f 91       	pop	r22
    2b2c:	5f 91       	pop	r21
    2b2e:	4f 91       	pop	r20
    2b30:	3f 91       	pop	r19
    2b32:	2f 91       	pop	r18
    2b34:	0f 90       	pop	r0
    2b36:	0b be       	out	0x3b, r0	; 59
    2b38:	0f 90       	pop	r0
    2b3a:	0f be       	out	0x3f, r0	; 63
    2b3c:	0f 90       	pop	r0
    2b3e:	1f 90       	pop	r1
    2b40:	18 95       	reti

00002b42 <__vector_40>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH1_vect)      /* Interrupt 1 */
    2b42:	1f 92       	push	r1
    2b44:	0f 92       	push	r0
    2b46:	0f b6       	in	r0, 0x3f	; 63
    2b48:	0f 92       	push	r0
    2b4a:	11 24       	eor	r1, r1
    2b4c:	0b b6       	in	r0, 0x3b	; 59
    2b4e:	0f 92       	push	r0
    2b50:	2f 93       	push	r18
    2b52:	3f 93       	push	r19
    2b54:	4f 93       	push	r20
    2b56:	5f 93       	push	r21
    2b58:	6f 93       	push	r22
    2b5a:	7f 93       	push	r23
    2b5c:	8f 93       	push	r24
    2b5e:	9f 93       	push	r25
    2b60:	af 93       	push	r26
    2b62:	bf 93       	push	r27
    2b64:	ef 93       	push	r30
    2b66:	ff 93       	push	r31
    2b68:	e0 91 7d 21 	lds	r30, 0x217D
    2b6c:	f0 91 7e 21 	lds	r31, 0x217E
    2b70:	30 97       	sbiw	r30, 0x00	; 0
    2b72:	29 f0       	breq	.+10     	; 0x2b7e <__vector_40+0x3c>
    2b74:	80 91 73 22 	lds	r24, 0x2273
    2b78:	90 91 74 22 	lds	r25, 0x2274
    2b7c:	19 95       	eicall
    2b7e:	ff 91       	pop	r31
    2b80:	ef 91       	pop	r30
    2b82:	bf 91       	pop	r27
    2b84:	af 91       	pop	r26
    2b86:	9f 91       	pop	r25
    2b88:	8f 91       	pop	r24
    2b8a:	7f 91       	pop	r23
    2b8c:	6f 91       	pop	r22
    2b8e:	5f 91       	pop	r21
    2b90:	4f 91       	pop	r20
    2b92:	3f 91       	pop	r19
    2b94:	2f 91       	pop	r18
    2b96:	0f 90       	pop	r0
    2b98:	0b be       	out	0x3b, r0	; 59
    2b9a:	0f 90       	pop	r0
    2b9c:	0f be       	out	0x3f, r0	; 63
    2b9e:	0f 90       	pop	r0
    2ba0:	1f 90       	pop	r1
    2ba2:	18 95       	reti

00002ba4 <__vector_41>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH2_vect)      /* Interrupt 2 */
    2ba4:	1f 92       	push	r1
    2ba6:	0f 92       	push	r0
    2ba8:	0f b6       	in	r0, 0x3f	; 63
    2baa:	0f 92       	push	r0
    2bac:	11 24       	eor	r1, r1
    2bae:	0b b6       	in	r0, 0x3b	; 59
    2bb0:	0f 92       	push	r0
    2bb2:	2f 93       	push	r18
    2bb4:	3f 93       	push	r19
    2bb6:	4f 93       	push	r20
    2bb8:	5f 93       	push	r21
    2bba:	6f 93       	push	r22
    2bbc:	7f 93       	push	r23
    2bbe:	8f 93       	push	r24
    2bc0:	9f 93       	push	r25
    2bc2:	af 93       	push	r26
    2bc4:	bf 93       	push	r27
    2bc6:	ef 93       	push	r30
    2bc8:	ff 93       	push	r31
    2bca:	e0 91 7f 21 	lds	r30, 0x217F
    2bce:	f0 91 80 21 	lds	r31, 0x2180
    2bd2:	30 97       	sbiw	r30, 0x00	; 0
    2bd4:	29 f0       	breq	.+10     	; 0x2be0 <__vector_41+0x3c>
    2bd6:	80 91 75 22 	lds	r24, 0x2275
    2bda:	90 91 76 22 	lds	r25, 0x2276
    2bde:	19 95       	eicall
    2be0:	ff 91       	pop	r31
    2be2:	ef 91       	pop	r30
    2be4:	bf 91       	pop	r27
    2be6:	af 91       	pop	r26
    2be8:	9f 91       	pop	r25
    2bea:	8f 91       	pop	r24
    2bec:	7f 91       	pop	r23
    2bee:	6f 91       	pop	r22
    2bf0:	5f 91       	pop	r21
    2bf2:	4f 91       	pop	r20
    2bf4:	3f 91       	pop	r19
    2bf6:	2f 91       	pop	r18
    2bf8:	0f 90       	pop	r0
    2bfa:	0b be       	out	0x3b, r0	; 59
    2bfc:	0f 90       	pop	r0
    2bfe:	0f be       	out	0x3f, r0	; 63
    2c00:	0f 90       	pop	r0
    2c02:	1f 90       	pop	r1
    2c04:	18 95       	reti

00002c06 <__vector_42>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH3_vect)      /* Interrupt 3 */
    2c06:	1f 92       	push	r1
    2c08:	0f 92       	push	r0
    2c0a:	0f b6       	in	r0, 0x3f	; 63
    2c0c:	0f 92       	push	r0
    2c0e:	11 24       	eor	r1, r1
    2c10:	0b b6       	in	r0, 0x3b	; 59
    2c12:	0f 92       	push	r0
    2c14:	2f 93       	push	r18
    2c16:	3f 93       	push	r19
    2c18:	4f 93       	push	r20
    2c1a:	5f 93       	push	r21
    2c1c:	6f 93       	push	r22
    2c1e:	7f 93       	push	r23
    2c20:	8f 93       	push	r24
    2c22:	9f 93       	push	r25
    2c24:	af 93       	push	r26
    2c26:	bf 93       	push	r27
    2c28:	ef 93       	push	r30
    2c2a:	ff 93       	push	r31
    2c2c:	e0 91 81 21 	lds	r30, 0x2181
    2c30:	f0 91 82 21 	lds	r31, 0x2182
    2c34:	30 97       	sbiw	r30, 0x00	; 0
    2c36:	29 f0       	breq	.+10     	; 0x2c42 <__vector_42+0x3c>
    2c38:	80 91 77 22 	lds	r24, 0x2277
    2c3c:	90 91 78 22 	lds	r25, 0x2278
    2c40:	19 95       	eicall
    2c42:	ff 91       	pop	r31
    2c44:	ef 91       	pop	r30
    2c46:	bf 91       	pop	r27
    2c48:	af 91       	pop	r26
    2c4a:	9f 91       	pop	r25
    2c4c:	8f 91       	pop	r24
    2c4e:	7f 91       	pop	r23
    2c50:	6f 91       	pop	r22
    2c52:	5f 91       	pop	r21
    2c54:	4f 91       	pop	r20
    2c56:	3f 91       	pop	r19
    2c58:	2f 91       	pop	r18
    2c5a:	0f 90       	pop	r0
    2c5c:	0b be       	out	0x3b, r0	; 59
    2c5e:	0f 90       	pop	r0
    2c60:	0f be       	out	0x3f, r0	; 63
    2c62:	0f 90       	pop	r0
    2c64:	1f 90       	pop	r1
    2c66:	18 95       	reti

00002c68 <__vector_43>:

/* PORTE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT0_vect)      /* External Interrupt 0 */
    2c68:	1f 92       	push	r1
    2c6a:	0f 92       	push	r0
    2c6c:	0f b6       	in	r0, 0x3f	; 63
    2c6e:	0f 92       	push	r0
    2c70:	11 24       	eor	r1, r1
    2c72:	0b b6       	in	r0, 0x3b	; 59
    2c74:	0f 92       	push	r0
    2c76:	2f 93       	push	r18
    2c78:	3f 93       	push	r19
    2c7a:	4f 93       	push	r20
    2c7c:	5f 93       	push	r21
    2c7e:	6f 93       	push	r22
    2c80:	7f 93       	push	r23
    2c82:	8f 93       	push	r24
    2c84:	9f 93       	push	r25
    2c86:	af 93       	push	r26
    2c88:	bf 93       	push	r27
    2c8a:	ef 93       	push	r30
    2c8c:	ff 93       	push	r31
    2c8e:	e0 91 83 21 	lds	r30, 0x2183
    2c92:	f0 91 84 21 	lds	r31, 0x2184
    2c96:	30 97       	sbiw	r30, 0x00	; 0
    2c98:	29 f0       	breq	.+10     	; 0x2ca4 <__vector_43+0x3c>
    2c9a:	80 91 79 22 	lds	r24, 0x2279
    2c9e:	90 91 7a 22 	lds	r25, 0x227A
    2ca2:	19 95       	eicall
    2ca4:	ff 91       	pop	r31
    2ca6:	ef 91       	pop	r30
    2ca8:	bf 91       	pop	r27
    2caa:	af 91       	pop	r26
    2cac:	9f 91       	pop	r25
    2cae:	8f 91       	pop	r24
    2cb0:	7f 91       	pop	r23
    2cb2:	6f 91       	pop	r22
    2cb4:	5f 91       	pop	r21
    2cb6:	4f 91       	pop	r20
    2cb8:	3f 91       	pop	r19
    2cba:	2f 91       	pop	r18
    2cbc:	0f 90       	pop	r0
    2cbe:	0b be       	out	0x3b, r0	; 59
    2cc0:	0f 90       	pop	r0
    2cc2:	0f be       	out	0x3f, r0	; 63
    2cc4:	0f 90       	pop	r0
    2cc6:	1f 90       	pop	r1
    2cc8:	18 95       	reti

00002cca <__vector_44>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT1_vect)      /* External Interrupt 1 */
    2cca:	1f 92       	push	r1
    2ccc:	0f 92       	push	r0
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	0f 92       	push	r0
    2cd2:	11 24       	eor	r1, r1
    2cd4:	0b b6       	in	r0, 0x3b	; 59
    2cd6:	0f 92       	push	r0
    2cd8:	2f 93       	push	r18
    2cda:	3f 93       	push	r19
    2cdc:	4f 93       	push	r20
    2cde:	5f 93       	push	r21
    2ce0:	6f 93       	push	r22
    2ce2:	7f 93       	push	r23
    2ce4:	8f 93       	push	r24
    2ce6:	9f 93       	push	r25
    2ce8:	af 93       	push	r26
    2cea:	bf 93       	push	r27
    2cec:	ef 93       	push	r30
    2cee:	ff 93       	push	r31
    2cf0:	e0 91 85 21 	lds	r30, 0x2185
    2cf4:	f0 91 86 21 	lds	r31, 0x2186
    2cf8:	30 97       	sbiw	r30, 0x00	; 0
    2cfa:	29 f0       	breq	.+10     	; 0x2d06 <__vector_44+0x3c>
    2cfc:	80 91 7b 22 	lds	r24, 0x227B
    2d00:	90 91 7c 22 	lds	r25, 0x227C
    2d04:	19 95       	eicall
    2d06:	ff 91       	pop	r31
    2d08:	ef 91       	pop	r30
    2d0a:	bf 91       	pop	r27
    2d0c:	af 91       	pop	r26
    2d0e:	9f 91       	pop	r25
    2d10:	8f 91       	pop	r24
    2d12:	7f 91       	pop	r23
    2d14:	6f 91       	pop	r22
    2d16:	5f 91       	pop	r21
    2d18:	4f 91       	pop	r20
    2d1a:	3f 91       	pop	r19
    2d1c:	2f 91       	pop	r18
    2d1e:	0f 90       	pop	r0
    2d20:	0b be       	out	0x3b, r0	; 59
    2d22:	0f 90       	pop	r0
    2d24:	0f be       	out	0x3f, r0	; 63
    2d26:	0f 90       	pop	r0
    2d28:	1f 90       	pop	r1
    2d2a:	18 95       	reti

00002d2c <__vector_45>:

/* TWIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIS_vect)      /* TWI Slave Interrupt */
    2d2c:	1f 92       	push	r1
    2d2e:	0f 92       	push	r0
    2d30:	0f b6       	in	r0, 0x3f	; 63
    2d32:	0f 92       	push	r0
    2d34:	11 24       	eor	r1, r1
    2d36:	0b b6       	in	r0, 0x3b	; 59
    2d38:	0f 92       	push	r0
    2d3a:	2f 93       	push	r18
    2d3c:	3f 93       	push	r19
    2d3e:	4f 93       	push	r20
    2d40:	5f 93       	push	r21
    2d42:	6f 93       	push	r22
    2d44:	7f 93       	push	r23
    2d46:	8f 93       	push	r24
    2d48:	9f 93       	push	r25
    2d4a:	af 93       	push	r26
    2d4c:	bf 93       	push	r27
    2d4e:	ef 93       	push	r30
    2d50:	ff 93       	push	r31
    2d52:	e0 91 87 21 	lds	r30, 0x2187
    2d56:	f0 91 88 21 	lds	r31, 0x2188
    2d5a:	30 97       	sbiw	r30, 0x00	; 0
    2d5c:	29 f0       	breq	.+10     	; 0x2d68 <__vector_45+0x3c>
    2d5e:	80 91 7d 22 	lds	r24, 0x227D
    2d62:	90 91 7e 22 	lds	r25, 0x227E
    2d66:	19 95       	eicall
    2d68:	ff 91       	pop	r31
    2d6a:	ef 91       	pop	r30
    2d6c:	bf 91       	pop	r27
    2d6e:	af 91       	pop	r26
    2d70:	9f 91       	pop	r25
    2d72:	8f 91       	pop	r24
    2d74:	7f 91       	pop	r23
    2d76:	6f 91       	pop	r22
    2d78:	5f 91       	pop	r21
    2d7a:	4f 91       	pop	r20
    2d7c:	3f 91       	pop	r19
    2d7e:	2f 91       	pop	r18
    2d80:	0f 90       	pop	r0
    2d82:	0b be       	out	0x3b, r0	; 59
    2d84:	0f 90       	pop	r0
    2d86:	0f be       	out	0x3f, r0	; 63
    2d88:	0f 90       	pop	r0
    2d8a:	1f 90       	pop	r1
    2d8c:	18 95       	reti

00002d8e <__vector_46>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIM_vect)		/* TWI Master Interrupt */
    2d8e:	1f 92       	push	r1
    2d90:	0f 92       	push	r0
    2d92:	0f b6       	in	r0, 0x3f	; 63
    2d94:	0f 92       	push	r0
    2d96:	11 24       	eor	r1, r1
    2d98:	0b b6       	in	r0, 0x3b	; 59
    2d9a:	0f 92       	push	r0
    2d9c:	2f 93       	push	r18
    2d9e:	3f 93       	push	r19
    2da0:	4f 93       	push	r20
    2da2:	5f 93       	push	r21
    2da4:	6f 93       	push	r22
    2da6:	7f 93       	push	r23
    2da8:	8f 93       	push	r24
    2daa:	9f 93       	push	r25
    2dac:	af 93       	push	r26
    2dae:	bf 93       	push	r27
    2db0:	ef 93       	push	r30
    2db2:	ff 93       	push	r31
    2db4:	e0 91 89 21 	lds	r30, 0x2189
    2db8:	f0 91 8a 21 	lds	r31, 0x218A
    2dbc:	30 97       	sbiw	r30, 0x00	; 0
    2dbe:	29 f0       	breq	.+10     	; 0x2dca <__vector_46+0x3c>
    2dc0:	80 91 7f 22 	lds	r24, 0x227F
    2dc4:	90 91 80 22 	lds	r25, 0x2280
    2dc8:	19 95       	eicall
    2dca:	ff 91       	pop	r31
    2dcc:	ef 91       	pop	r30
    2dce:	bf 91       	pop	r27
    2dd0:	af 91       	pop	r26
    2dd2:	9f 91       	pop	r25
    2dd4:	8f 91       	pop	r24
    2dd6:	7f 91       	pop	r23
    2dd8:	6f 91       	pop	r22
    2dda:	5f 91       	pop	r21
    2ddc:	4f 91       	pop	r20
    2dde:	3f 91       	pop	r19
    2de0:	2f 91       	pop	r18
    2de2:	0f 90       	pop	r0
    2de4:	0b be       	out	0x3b, r0	; 59
    2de6:	0f 90       	pop	r0
    2de8:	0f be       	out	0x3f, r0	; 63
    2dea:	0f 90       	pop	r0
    2dec:	1f 90       	pop	r1
    2dee:	18 95       	reti

00002df0 <__vector_47>:

/* TCE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_OVF_vect)      /* Overflow Interrupt */
    2df0:	1f 92       	push	r1
    2df2:	0f 92       	push	r0
    2df4:	0f b6       	in	r0, 0x3f	; 63
    2df6:	0f 92       	push	r0
    2df8:	11 24       	eor	r1, r1
    2dfa:	0b b6       	in	r0, 0x3b	; 59
    2dfc:	0f 92       	push	r0
    2dfe:	2f 93       	push	r18
    2e00:	3f 93       	push	r19
    2e02:	4f 93       	push	r20
    2e04:	5f 93       	push	r21
    2e06:	6f 93       	push	r22
    2e08:	7f 93       	push	r23
    2e0a:	8f 93       	push	r24
    2e0c:	9f 93       	push	r25
    2e0e:	af 93       	push	r26
    2e10:	bf 93       	push	r27
    2e12:	ef 93       	push	r30
    2e14:	ff 93       	push	r31
    2e16:	e0 91 8b 21 	lds	r30, 0x218B
    2e1a:	f0 91 8c 21 	lds	r31, 0x218C
    2e1e:	30 97       	sbiw	r30, 0x00	; 0
    2e20:	29 f0       	breq	.+10     	; 0x2e2c <__vector_47+0x3c>
    2e22:	80 91 81 22 	lds	r24, 0x2281
    2e26:	90 91 82 22 	lds	r25, 0x2282
    2e2a:	19 95       	eicall
    2e2c:	ff 91       	pop	r31
    2e2e:	ef 91       	pop	r30
    2e30:	bf 91       	pop	r27
    2e32:	af 91       	pop	r26
    2e34:	9f 91       	pop	r25
    2e36:	8f 91       	pop	r24
    2e38:	7f 91       	pop	r23
    2e3a:	6f 91       	pop	r22
    2e3c:	5f 91       	pop	r21
    2e3e:	4f 91       	pop	r20
    2e40:	3f 91       	pop	r19
    2e42:	2f 91       	pop	r18
    2e44:	0f 90       	pop	r0
    2e46:	0b be       	out	0x3b, r0	; 59
    2e48:	0f 90       	pop	r0
    2e4a:	0f be       	out	0x3f, r0	; 63
    2e4c:	0f 90       	pop	r0
    2e4e:	1f 90       	pop	r1
    2e50:	18 95       	reti

00002e52 <__vector_48>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_ERR_vect)      /* Error Interrupt */
    2e52:	1f 92       	push	r1
    2e54:	0f 92       	push	r0
    2e56:	0f b6       	in	r0, 0x3f	; 63
    2e58:	0f 92       	push	r0
    2e5a:	11 24       	eor	r1, r1
    2e5c:	0b b6       	in	r0, 0x3b	; 59
    2e5e:	0f 92       	push	r0
    2e60:	2f 93       	push	r18
    2e62:	3f 93       	push	r19
    2e64:	4f 93       	push	r20
    2e66:	5f 93       	push	r21
    2e68:	6f 93       	push	r22
    2e6a:	7f 93       	push	r23
    2e6c:	8f 93       	push	r24
    2e6e:	9f 93       	push	r25
    2e70:	af 93       	push	r26
    2e72:	bf 93       	push	r27
    2e74:	ef 93       	push	r30
    2e76:	ff 93       	push	r31
    2e78:	e0 91 8d 21 	lds	r30, 0x218D
    2e7c:	f0 91 8e 21 	lds	r31, 0x218E
    2e80:	30 97       	sbiw	r30, 0x00	; 0
    2e82:	29 f0       	breq	.+10     	; 0x2e8e <__vector_48+0x3c>
    2e84:	80 91 83 22 	lds	r24, 0x2283
    2e88:	90 91 84 22 	lds	r25, 0x2284
    2e8c:	19 95       	eicall
    2e8e:	ff 91       	pop	r31
    2e90:	ef 91       	pop	r30
    2e92:	bf 91       	pop	r27
    2e94:	af 91       	pop	r26
    2e96:	9f 91       	pop	r25
    2e98:	8f 91       	pop	r24
    2e9a:	7f 91       	pop	r23
    2e9c:	6f 91       	pop	r22
    2e9e:	5f 91       	pop	r21
    2ea0:	4f 91       	pop	r20
    2ea2:	3f 91       	pop	r19
    2ea4:	2f 91       	pop	r18
    2ea6:	0f 90       	pop	r0
    2ea8:	0b be       	out	0x3b, r0	; 59
    2eaa:	0f 90       	pop	r0
    2eac:	0f be       	out	0x3f, r0	; 63
    2eae:	0f 90       	pop	r0
    2eb0:	1f 90       	pop	r1
    2eb2:	18 95       	reti

00002eb4 <__vector_49>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCA_vect)      /* Compare or Capture A Interrupt */
    2eb4:	1f 92       	push	r1
    2eb6:	0f 92       	push	r0
    2eb8:	0f b6       	in	r0, 0x3f	; 63
    2eba:	0f 92       	push	r0
    2ebc:	11 24       	eor	r1, r1
    2ebe:	0b b6       	in	r0, 0x3b	; 59
    2ec0:	0f 92       	push	r0
    2ec2:	2f 93       	push	r18
    2ec4:	3f 93       	push	r19
    2ec6:	4f 93       	push	r20
    2ec8:	5f 93       	push	r21
    2eca:	6f 93       	push	r22
    2ecc:	7f 93       	push	r23
    2ece:	8f 93       	push	r24
    2ed0:	9f 93       	push	r25
    2ed2:	af 93       	push	r26
    2ed4:	bf 93       	push	r27
    2ed6:	ef 93       	push	r30
    2ed8:	ff 93       	push	r31
    2eda:	e0 91 8f 21 	lds	r30, 0x218F
    2ede:	f0 91 90 21 	lds	r31, 0x2190
    2ee2:	30 97       	sbiw	r30, 0x00	; 0
    2ee4:	29 f0       	breq	.+10     	; 0x2ef0 <__vector_49+0x3c>
    2ee6:	80 91 85 22 	lds	r24, 0x2285
    2eea:	90 91 86 22 	lds	r25, 0x2286
    2eee:	19 95       	eicall
    2ef0:	ff 91       	pop	r31
    2ef2:	ef 91       	pop	r30
    2ef4:	bf 91       	pop	r27
    2ef6:	af 91       	pop	r26
    2ef8:	9f 91       	pop	r25
    2efa:	8f 91       	pop	r24
    2efc:	7f 91       	pop	r23
    2efe:	6f 91       	pop	r22
    2f00:	5f 91       	pop	r21
    2f02:	4f 91       	pop	r20
    2f04:	3f 91       	pop	r19
    2f06:	2f 91       	pop	r18
    2f08:	0f 90       	pop	r0
    2f0a:	0b be       	out	0x3b, r0	; 59
    2f0c:	0f 90       	pop	r0
    2f0e:	0f be       	out	0x3f, r0	; 63
    2f10:	0f 90       	pop	r0
    2f12:	1f 90       	pop	r1
    2f14:	18 95       	reti

00002f16 <__vector_50>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCB_vect)      /* Compare or Capture B Interrupt */
    2f16:	1f 92       	push	r1
    2f18:	0f 92       	push	r0
    2f1a:	0f b6       	in	r0, 0x3f	; 63
    2f1c:	0f 92       	push	r0
    2f1e:	11 24       	eor	r1, r1
    2f20:	0b b6       	in	r0, 0x3b	; 59
    2f22:	0f 92       	push	r0
    2f24:	2f 93       	push	r18
    2f26:	3f 93       	push	r19
    2f28:	4f 93       	push	r20
    2f2a:	5f 93       	push	r21
    2f2c:	6f 93       	push	r22
    2f2e:	7f 93       	push	r23
    2f30:	8f 93       	push	r24
    2f32:	9f 93       	push	r25
    2f34:	af 93       	push	r26
    2f36:	bf 93       	push	r27
    2f38:	ef 93       	push	r30
    2f3a:	ff 93       	push	r31
    2f3c:	e0 91 91 21 	lds	r30, 0x2191
    2f40:	f0 91 92 21 	lds	r31, 0x2192
    2f44:	30 97       	sbiw	r30, 0x00	; 0
    2f46:	29 f0       	breq	.+10     	; 0x2f52 <__vector_50+0x3c>
    2f48:	80 91 87 22 	lds	r24, 0x2287
    2f4c:	90 91 88 22 	lds	r25, 0x2288
    2f50:	19 95       	eicall
    2f52:	ff 91       	pop	r31
    2f54:	ef 91       	pop	r30
    2f56:	bf 91       	pop	r27
    2f58:	af 91       	pop	r26
    2f5a:	9f 91       	pop	r25
    2f5c:	8f 91       	pop	r24
    2f5e:	7f 91       	pop	r23
    2f60:	6f 91       	pop	r22
    2f62:	5f 91       	pop	r21
    2f64:	4f 91       	pop	r20
    2f66:	3f 91       	pop	r19
    2f68:	2f 91       	pop	r18
    2f6a:	0f 90       	pop	r0
    2f6c:	0b be       	out	0x3b, r0	; 59
    2f6e:	0f 90       	pop	r0
    2f70:	0f be       	out	0x3f, r0	; 63
    2f72:	0f 90       	pop	r0
    2f74:	1f 90       	pop	r1
    2f76:	18 95       	reti

00002f78 <__vector_51>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCC_vect)      /* Compare or Capture C Interrupt */
    2f78:	1f 92       	push	r1
    2f7a:	0f 92       	push	r0
    2f7c:	0f b6       	in	r0, 0x3f	; 63
    2f7e:	0f 92       	push	r0
    2f80:	11 24       	eor	r1, r1
    2f82:	0b b6       	in	r0, 0x3b	; 59
    2f84:	0f 92       	push	r0
    2f86:	2f 93       	push	r18
    2f88:	3f 93       	push	r19
    2f8a:	4f 93       	push	r20
    2f8c:	5f 93       	push	r21
    2f8e:	6f 93       	push	r22
    2f90:	7f 93       	push	r23
    2f92:	8f 93       	push	r24
    2f94:	9f 93       	push	r25
    2f96:	af 93       	push	r26
    2f98:	bf 93       	push	r27
    2f9a:	ef 93       	push	r30
    2f9c:	ff 93       	push	r31
    2f9e:	e0 91 93 21 	lds	r30, 0x2193
    2fa2:	f0 91 94 21 	lds	r31, 0x2194
    2fa6:	30 97       	sbiw	r30, 0x00	; 0
    2fa8:	29 f0       	breq	.+10     	; 0x2fb4 <__vector_51+0x3c>
    2faa:	80 91 89 22 	lds	r24, 0x2289
    2fae:	90 91 8a 22 	lds	r25, 0x228A
    2fb2:	19 95       	eicall
    2fb4:	ff 91       	pop	r31
    2fb6:	ef 91       	pop	r30
    2fb8:	bf 91       	pop	r27
    2fba:	af 91       	pop	r26
    2fbc:	9f 91       	pop	r25
    2fbe:	8f 91       	pop	r24
    2fc0:	7f 91       	pop	r23
    2fc2:	6f 91       	pop	r22
    2fc4:	5f 91       	pop	r21
    2fc6:	4f 91       	pop	r20
    2fc8:	3f 91       	pop	r19
    2fca:	2f 91       	pop	r18
    2fcc:	0f 90       	pop	r0
    2fce:	0b be       	out	0x3b, r0	; 59
    2fd0:	0f 90       	pop	r0
    2fd2:	0f be       	out	0x3f, r0	; 63
    2fd4:	0f 90       	pop	r0
    2fd6:	1f 90       	pop	r1
    2fd8:	18 95       	reti

00002fda <__vector_52>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCD_vect)      /* Compare or Capture D Interrupt */
    2fda:	1f 92       	push	r1
    2fdc:	0f 92       	push	r0
    2fde:	0f b6       	in	r0, 0x3f	; 63
    2fe0:	0f 92       	push	r0
    2fe2:	11 24       	eor	r1, r1
    2fe4:	0b b6       	in	r0, 0x3b	; 59
    2fe6:	0f 92       	push	r0
    2fe8:	2f 93       	push	r18
    2fea:	3f 93       	push	r19
    2fec:	4f 93       	push	r20
    2fee:	5f 93       	push	r21
    2ff0:	6f 93       	push	r22
    2ff2:	7f 93       	push	r23
    2ff4:	8f 93       	push	r24
    2ff6:	9f 93       	push	r25
    2ff8:	af 93       	push	r26
    2ffa:	bf 93       	push	r27
    2ffc:	ef 93       	push	r30
    2ffe:	ff 93       	push	r31
    3000:	e0 91 95 21 	lds	r30, 0x2195
    3004:	f0 91 96 21 	lds	r31, 0x2196
    3008:	30 97       	sbiw	r30, 0x00	; 0
    300a:	29 f0       	breq	.+10     	; 0x3016 <__vector_52+0x3c>
    300c:	80 91 8b 22 	lds	r24, 0x228B
    3010:	90 91 8c 22 	lds	r25, 0x228C
    3014:	19 95       	eicall
    3016:	ff 91       	pop	r31
    3018:	ef 91       	pop	r30
    301a:	bf 91       	pop	r27
    301c:	af 91       	pop	r26
    301e:	9f 91       	pop	r25
    3020:	8f 91       	pop	r24
    3022:	7f 91       	pop	r23
    3024:	6f 91       	pop	r22
    3026:	5f 91       	pop	r21
    3028:	4f 91       	pop	r20
    302a:	3f 91       	pop	r19
    302c:	2f 91       	pop	r18
    302e:	0f 90       	pop	r0
    3030:	0b be       	out	0x3b, r0	; 59
    3032:	0f 90       	pop	r0
    3034:	0f be       	out	0x3f, r0	; 63
    3036:	0f 90       	pop	r0
    3038:	1f 90       	pop	r1
    303a:	18 95       	reti

0000303c <__vector_53>:

/* TCE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_OVF_vect)      /* Overflow Interrupt */
    303c:	1f 92       	push	r1
    303e:	0f 92       	push	r0
    3040:	0f b6       	in	r0, 0x3f	; 63
    3042:	0f 92       	push	r0
    3044:	11 24       	eor	r1, r1
    3046:	0b b6       	in	r0, 0x3b	; 59
    3048:	0f 92       	push	r0
    304a:	2f 93       	push	r18
    304c:	3f 93       	push	r19
    304e:	4f 93       	push	r20
    3050:	5f 93       	push	r21
    3052:	6f 93       	push	r22
    3054:	7f 93       	push	r23
    3056:	8f 93       	push	r24
    3058:	9f 93       	push	r25
    305a:	af 93       	push	r26
    305c:	bf 93       	push	r27
    305e:	ef 93       	push	r30
    3060:	ff 93       	push	r31
    3062:	e0 91 97 21 	lds	r30, 0x2197
    3066:	f0 91 98 21 	lds	r31, 0x2198
    306a:	30 97       	sbiw	r30, 0x00	; 0
    306c:	29 f0       	breq	.+10     	; 0x3078 <__vector_53+0x3c>
    306e:	80 91 8d 22 	lds	r24, 0x228D
    3072:	90 91 8e 22 	lds	r25, 0x228E
    3076:	19 95       	eicall
    3078:	ff 91       	pop	r31
    307a:	ef 91       	pop	r30
    307c:	bf 91       	pop	r27
    307e:	af 91       	pop	r26
    3080:	9f 91       	pop	r25
    3082:	8f 91       	pop	r24
    3084:	7f 91       	pop	r23
    3086:	6f 91       	pop	r22
    3088:	5f 91       	pop	r21
    308a:	4f 91       	pop	r20
    308c:	3f 91       	pop	r19
    308e:	2f 91       	pop	r18
    3090:	0f 90       	pop	r0
    3092:	0b be       	out	0x3b, r0	; 59
    3094:	0f 90       	pop	r0
    3096:	0f be       	out	0x3f, r0	; 63
    3098:	0f 90       	pop	r0
    309a:	1f 90       	pop	r1
    309c:	18 95       	reti

0000309e <__vector_54>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_ERR_vect)      /* Error Interrupt */
    309e:	1f 92       	push	r1
    30a0:	0f 92       	push	r0
    30a2:	0f b6       	in	r0, 0x3f	; 63
    30a4:	0f 92       	push	r0
    30a6:	11 24       	eor	r1, r1
    30a8:	0b b6       	in	r0, 0x3b	; 59
    30aa:	0f 92       	push	r0
    30ac:	2f 93       	push	r18
    30ae:	3f 93       	push	r19
    30b0:	4f 93       	push	r20
    30b2:	5f 93       	push	r21
    30b4:	6f 93       	push	r22
    30b6:	7f 93       	push	r23
    30b8:	8f 93       	push	r24
    30ba:	9f 93       	push	r25
    30bc:	af 93       	push	r26
    30be:	bf 93       	push	r27
    30c0:	ef 93       	push	r30
    30c2:	ff 93       	push	r31
    30c4:	e0 91 99 21 	lds	r30, 0x2199
    30c8:	f0 91 9a 21 	lds	r31, 0x219A
    30cc:	30 97       	sbiw	r30, 0x00	; 0
    30ce:	29 f0       	breq	.+10     	; 0x30da <__vector_54+0x3c>
    30d0:	80 91 8f 22 	lds	r24, 0x228F
    30d4:	90 91 90 22 	lds	r25, 0x2290
    30d8:	19 95       	eicall
    30da:	ff 91       	pop	r31
    30dc:	ef 91       	pop	r30
    30de:	bf 91       	pop	r27
    30e0:	af 91       	pop	r26
    30e2:	9f 91       	pop	r25
    30e4:	8f 91       	pop	r24
    30e6:	7f 91       	pop	r23
    30e8:	6f 91       	pop	r22
    30ea:	5f 91       	pop	r21
    30ec:	4f 91       	pop	r20
    30ee:	3f 91       	pop	r19
    30f0:	2f 91       	pop	r18
    30f2:	0f 90       	pop	r0
    30f4:	0b be       	out	0x3b, r0	; 59
    30f6:	0f 90       	pop	r0
    30f8:	0f be       	out	0x3f, r0	; 63
    30fa:	0f 90       	pop	r0
    30fc:	1f 90       	pop	r1
    30fe:	18 95       	reti

00003100 <__vector_55>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCA_vect)      /* Compare or Capture A Interrupt */
    3100:	1f 92       	push	r1
    3102:	0f 92       	push	r0
    3104:	0f b6       	in	r0, 0x3f	; 63
    3106:	0f 92       	push	r0
    3108:	11 24       	eor	r1, r1
    310a:	0b b6       	in	r0, 0x3b	; 59
    310c:	0f 92       	push	r0
    310e:	2f 93       	push	r18
    3110:	3f 93       	push	r19
    3112:	4f 93       	push	r20
    3114:	5f 93       	push	r21
    3116:	6f 93       	push	r22
    3118:	7f 93       	push	r23
    311a:	8f 93       	push	r24
    311c:	9f 93       	push	r25
    311e:	af 93       	push	r26
    3120:	bf 93       	push	r27
    3122:	ef 93       	push	r30
    3124:	ff 93       	push	r31
    3126:	e0 91 9b 21 	lds	r30, 0x219B
    312a:	f0 91 9c 21 	lds	r31, 0x219C
    312e:	30 97       	sbiw	r30, 0x00	; 0
    3130:	29 f0       	breq	.+10     	; 0x313c <__vector_55+0x3c>
    3132:	80 91 91 22 	lds	r24, 0x2291
    3136:	90 91 92 22 	lds	r25, 0x2292
    313a:	19 95       	eicall
    313c:	ff 91       	pop	r31
    313e:	ef 91       	pop	r30
    3140:	bf 91       	pop	r27
    3142:	af 91       	pop	r26
    3144:	9f 91       	pop	r25
    3146:	8f 91       	pop	r24
    3148:	7f 91       	pop	r23
    314a:	6f 91       	pop	r22
    314c:	5f 91       	pop	r21
    314e:	4f 91       	pop	r20
    3150:	3f 91       	pop	r19
    3152:	2f 91       	pop	r18
    3154:	0f 90       	pop	r0
    3156:	0b be       	out	0x3b, r0	; 59
    3158:	0f 90       	pop	r0
    315a:	0f be       	out	0x3f, r0	; 63
    315c:	0f 90       	pop	r0
    315e:	1f 90       	pop	r1
    3160:	18 95       	reti

00003162 <__vector_56>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCB_vect)      /* Compare or Capture B Interrupt */
    3162:	1f 92       	push	r1
    3164:	0f 92       	push	r0
    3166:	0f b6       	in	r0, 0x3f	; 63
    3168:	0f 92       	push	r0
    316a:	11 24       	eor	r1, r1
    316c:	0b b6       	in	r0, 0x3b	; 59
    316e:	0f 92       	push	r0
    3170:	2f 93       	push	r18
    3172:	3f 93       	push	r19
    3174:	4f 93       	push	r20
    3176:	5f 93       	push	r21
    3178:	6f 93       	push	r22
    317a:	7f 93       	push	r23
    317c:	8f 93       	push	r24
    317e:	9f 93       	push	r25
    3180:	af 93       	push	r26
    3182:	bf 93       	push	r27
    3184:	ef 93       	push	r30
    3186:	ff 93       	push	r31
    3188:	e0 91 9d 21 	lds	r30, 0x219D
    318c:	f0 91 9e 21 	lds	r31, 0x219E
    3190:	30 97       	sbiw	r30, 0x00	; 0
    3192:	29 f0       	breq	.+10     	; 0x319e <__vector_56+0x3c>
    3194:	80 91 93 22 	lds	r24, 0x2293
    3198:	90 91 94 22 	lds	r25, 0x2294
    319c:	19 95       	eicall
    319e:	ff 91       	pop	r31
    31a0:	ef 91       	pop	r30
    31a2:	bf 91       	pop	r27
    31a4:	af 91       	pop	r26
    31a6:	9f 91       	pop	r25
    31a8:	8f 91       	pop	r24
    31aa:	7f 91       	pop	r23
    31ac:	6f 91       	pop	r22
    31ae:	5f 91       	pop	r21
    31b0:	4f 91       	pop	r20
    31b2:	3f 91       	pop	r19
    31b4:	2f 91       	pop	r18
    31b6:	0f 90       	pop	r0
    31b8:	0b be       	out	0x3b, r0	; 59
    31ba:	0f 90       	pop	r0
    31bc:	0f be       	out	0x3f, r0	; 63
    31be:	0f 90       	pop	r0
    31c0:	1f 90       	pop	r1
    31c2:	18 95       	reti

000031c4 <__vector_57>:

/* SPIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIE_INT_vect)      /* SPI Interrupt */
    31c4:	1f 92       	push	r1
    31c6:	0f 92       	push	r0
    31c8:	0f b6       	in	r0, 0x3f	; 63
    31ca:	0f 92       	push	r0
    31cc:	11 24       	eor	r1, r1
    31ce:	0b b6       	in	r0, 0x3b	; 59
    31d0:	0f 92       	push	r0
    31d2:	2f 93       	push	r18
    31d4:	3f 93       	push	r19
    31d6:	4f 93       	push	r20
    31d8:	5f 93       	push	r21
    31da:	6f 93       	push	r22
    31dc:	7f 93       	push	r23
    31de:	8f 93       	push	r24
    31e0:	9f 93       	push	r25
    31e2:	af 93       	push	r26
    31e4:	bf 93       	push	r27
    31e6:	ef 93       	push	r30
    31e8:	ff 93       	push	r31
    31ea:	e0 91 9f 21 	lds	r30, 0x219F
    31ee:	f0 91 a0 21 	lds	r31, 0x21A0
    31f2:	30 97       	sbiw	r30, 0x00	; 0
    31f4:	29 f0       	breq	.+10     	; 0x3200 <__vector_57+0x3c>
    31f6:	80 91 95 22 	lds	r24, 0x2295
    31fa:	90 91 96 22 	lds	r25, 0x2296
    31fe:	19 95       	eicall
    3200:	ff 91       	pop	r31
    3202:	ef 91       	pop	r30
    3204:	bf 91       	pop	r27
    3206:	af 91       	pop	r26
    3208:	9f 91       	pop	r25
    320a:	8f 91       	pop	r24
    320c:	7f 91       	pop	r23
    320e:	6f 91       	pop	r22
    3210:	5f 91       	pop	r21
    3212:	4f 91       	pop	r20
    3214:	3f 91       	pop	r19
    3216:	2f 91       	pop	r18
    3218:	0f 90       	pop	r0
    321a:	0b be       	out	0x3b, r0	; 59
    321c:	0f 90       	pop	r0
    321e:	0f be       	out	0x3f, r0	; 63
    3220:	0f 90       	pop	r0
    3222:	1f 90       	pop	r1
    3224:	18 95       	reti

00003226 <__vector_58>:

/* USARTE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_RXC_vect)      /* Reception Complete Interrupt */
    3226:	1f 92       	push	r1
    3228:	0f 92       	push	r0
    322a:	0f b6       	in	r0, 0x3f	; 63
    322c:	0f 92       	push	r0
    322e:	11 24       	eor	r1, r1
    3230:	0b b6       	in	r0, 0x3b	; 59
    3232:	0f 92       	push	r0
    3234:	2f 93       	push	r18
    3236:	3f 93       	push	r19
    3238:	4f 93       	push	r20
    323a:	5f 93       	push	r21
    323c:	6f 93       	push	r22
    323e:	7f 93       	push	r23
    3240:	8f 93       	push	r24
    3242:	9f 93       	push	r25
    3244:	af 93       	push	r26
    3246:	bf 93       	push	r27
    3248:	ef 93       	push	r30
    324a:	ff 93       	push	r31
    324c:	e0 91 a1 21 	lds	r30, 0x21A1
    3250:	f0 91 a2 21 	lds	r31, 0x21A2
    3254:	30 97       	sbiw	r30, 0x00	; 0
    3256:	29 f0       	breq	.+10     	; 0x3262 <__vector_58+0x3c>
    3258:	80 91 97 22 	lds	r24, 0x2297
    325c:	90 91 98 22 	lds	r25, 0x2298
    3260:	19 95       	eicall
    3262:	ff 91       	pop	r31
    3264:	ef 91       	pop	r30
    3266:	bf 91       	pop	r27
    3268:	af 91       	pop	r26
    326a:	9f 91       	pop	r25
    326c:	8f 91       	pop	r24
    326e:	7f 91       	pop	r23
    3270:	6f 91       	pop	r22
    3272:	5f 91       	pop	r21
    3274:	4f 91       	pop	r20
    3276:	3f 91       	pop	r19
    3278:	2f 91       	pop	r18
    327a:	0f 90       	pop	r0
    327c:	0b be       	out	0x3b, r0	; 59
    327e:	0f 90       	pop	r0
    3280:	0f be       	out	0x3f, r0	; 63
    3282:	0f 90       	pop	r0
    3284:	1f 90       	pop	r1
    3286:	18 95       	reti

00003288 <__vector_59>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_DRE_vect)      /* Data Register Empty Interrupt */
    3288:	1f 92       	push	r1
    328a:	0f 92       	push	r0
    328c:	0f b6       	in	r0, 0x3f	; 63
    328e:	0f 92       	push	r0
    3290:	11 24       	eor	r1, r1
    3292:	0b b6       	in	r0, 0x3b	; 59
    3294:	0f 92       	push	r0
    3296:	2f 93       	push	r18
    3298:	3f 93       	push	r19
    329a:	4f 93       	push	r20
    329c:	5f 93       	push	r21
    329e:	6f 93       	push	r22
    32a0:	7f 93       	push	r23
    32a2:	8f 93       	push	r24
    32a4:	9f 93       	push	r25
    32a6:	af 93       	push	r26
    32a8:	bf 93       	push	r27
    32aa:	ef 93       	push	r30
    32ac:	ff 93       	push	r31
    32ae:	e0 91 a3 21 	lds	r30, 0x21A3
    32b2:	f0 91 a4 21 	lds	r31, 0x21A4
    32b6:	30 97       	sbiw	r30, 0x00	; 0
    32b8:	29 f0       	breq	.+10     	; 0x32c4 <__vector_59+0x3c>
    32ba:	80 91 99 22 	lds	r24, 0x2299
    32be:	90 91 9a 22 	lds	r25, 0x229A
    32c2:	19 95       	eicall
    32c4:	ff 91       	pop	r31
    32c6:	ef 91       	pop	r30
    32c8:	bf 91       	pop	r27
    32ca:	af 91       	pop	r26
    32cc:	9f 91       	pop	r25
    32ce:	8f 91       	pop	r24
    32d0:	7f 91       	pop	r23
    32d2:	6f 91       	pop	r22
    32d4:	5f 91       	pop	r21
    32d6:	4f 91       	pop	r20
    32d8:	3f 91       	pop	r19
    32da:	2f 91       	pop	r18
    32dc:	0f 90       	pop	r0
    32de:	0b be       	out	0x3b, r0	; 59
    32e0:	0f 90       	pop	r0
    32e2:	0f be       	out	0x3f, r0	; 63
    32e4:	0f 90       	pop	r0
    32e6:	1f 90       	pop	r1
    32e8:	18 95       	reti

000032ea <__vector_60>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_TXC_vect)      /* Transmission Complete Interrupt */
    32ea:	1f 92       	push	r1
    32ec:	0f 92       	push	r0
    32ee:	0f b6       	in	r0, 0x3f	; 63
    32f0:	0f 92       	push	r0
    32f2:	11 24       	eor	r1, r1
    32f4:	0b b6       	in	r0, 0x3b	; 59
    32f6:	0f 92       	push	r0
    32f8:	2f 93       	push	r18
    32fa:	3f 93       	push	r19
    32fc:	4f 93       	push	r20
    32fe:	5f 93       	push	r21
    3300:	6f 93       	push	r22
    3302:	7f 93       	push	r23
    3304:	8f 93       	push	r24
    3306:	9f 93       	push	r25
    3308:	af 93       	push	r26
    330a:	bf 93       	push	r27
    330c:	ef 93       	push	r30
    330e:	ff 93       	push	r31
    3310:	e0 91 a5 21 	lds	r30, 0x21A5
    3314:	f0 91 a6 21 	lds	r31, 0x21A6
    3318:	30 97       	sbiw	r30, 0x00	; 0
    331a:	29 f0       	breq	.+10     	; 0x3326 <__vector_60+0x3c>
    331c:	80 91 9b 22 	lds	r24, 0x229B
    3320:	90 91 9c 22 	lds	r25, 0x229C
    3324:	19 95       	eicall
    3326:	ff 91       	pop	r31
    3328:	ef 91       	pop	r30
    332a:	bf 91       	pop	r27
    332c:	af 91       	pop	r26
    332e:	9f 91       	pop	r25
    3330:	8f 91       	pop	r24
    3332:	7f 91       	pop	r23
    3334:	6f 91       	pop	r22
    3336:	5f 91       	pop	r21
    3338:	4f 91       	pop	r20
    333a:	3f 91       	pop	r19
    333c:	2f 91       	pop	r18
    333e:	0f 90       	pop	r0
    3340:	0b be       	out	0x3b, r0	; 59
    3342:	0f 90       	pop	r0
    3344:	0f be       	out	0x3f, r0	; 63
    3346:	0f 90       	pop	r0
    3348:	1f 90       	pop	r1
    334a:	18 95       	reti

0000334c <__vector_61>:

/* USARTE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_RXC_vect)      /* Reception Complete Interrupt */
    334c:	1f 92       	push	r1
    334e:	0f 92       	push	r0
    3350:	0f b6       	in	r0, 0x3f	; 63
    3352:	0f 92       	push	r0
    3354:	11 24       	eor	r1, r1
    3356:	0b b6       	in	r0, 0x3b	; 59
    3358:	0f 92       	push	r0
    335a:	2f 93       	push	r18
    335c:	3f 93       	push	r19
    335e:	4f 93       	push	r20
    3360:	5f 93       	push	r21
    3362:	6f 93       	push	r22
    3364:	7f 93       	push	r23
    3366:	8f 93       	push	r24
    3368:	9f 93       	push	r25
    336a:	af 93       	push	r26
    336c:	bf 93       	push	r27
    336e:	ef 93       	push	r30
    3370:	ff 93       	push	r31
    3372:	e0 91 a7 21 	lds	r30, 0x21A7
    3376:	f0 91 a8 21 	lds	r31, 0x21A8
    337a:	30 97       	sbiw	r30, 0x00	; 0
    337c:	29 f0       	breq	.+10     	; 0x3388 <__vector_61+0x3c>
    337e:	80 91 9d 22 	lds	r24, 0x229D
    3382:	90 91 9e 22 	lds	r25, 0x229E
    3386:	19 95       	eicall
    3388:	ff 91       	pop	r31
    338a:	ef 91       	pop	r30
    338c:	bf 91       	pop	r27
    338e:	af 91       	pop	r26
    3390:	9f 91       	pop	r25
    3392:	8f 91       	pop	r24
    3394:	7f 91       	pop	r23
    3396:	6f 91       	pop	r22
    3398:	5f 91       	pop	r21
    339a:	4f 91       	pop	r20
    339c:	3f 91       	pop	r19
    339e:	2f 91       	pop	r18
    33a0:	0f 90       	pop	r0
    33a2:	0b be       	out	0x3b, r0	; 59
    33a4:	0f 90       	pop	r0
    33a6:	0f be       	out	0x3f, r0	; 63
    33a8:	0f 90       	pop	r0
    33aa:	1f 90       	pop	r1
    33ac:	18 95       	reti

000033ae <__vector_62>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_DRE_vect)      /* Data Register Empty Interrupt */
    33ae:	1f 92       	push	r1
    33b0:	0f 92       	push	r0
    33b2:	0f b6       	in	r0, 0x3f	; 63
    33b4:	0f 92       	push	r0
    33b6:	11 24       	eor	r1, r1
    33b8:	0b b6       	in	r0, 0x3b	; 59
    33ba:	0f 92       	push	r0
    33bc:	2f 93       	push	r18
    33be:	3f 93       	push	r19
    33c0:	4f 93       	push	r20
    33c2:	5f 93       	push	r21
    33c4:	6f 93       	push	r22
    33c6:	7f 93       	push	r23
    33c8:	8f 93       	push	r24
    33ca:	9f 93       	push	r25
    33cc:	af 93       	push	r26
    33ce:	bf 93       	push	r27
    33d0:	ef 93       	push	r30
    33d2:	ff 93       	push	r31
    33d4:	e0 91 a9 21 	lds	r30, 0x21A9
    33d8:	f0 91 aa 21 	lds	r31, 0x21AA
    33dc:	30 97       	sbiw	r30, 0x00	; 0
    33de:	29 f0       	breq	.+10     	; 0x33ea <__vector_62+0x3c>
    33e0:	80 91 9f 22 	lds	r24, 0x229F
    33e4:	90 91 a0 22 	lds	r25, 0x22A0
    33e8:	19 95       	eicall
    33ea:	ff 91       	pop	r31
    33ec:	ef 91       	pop	r30
    33ee:	bf 91       	pop	r27
    33f0:	af 91       	pop	r26
    33f2:	9f 91       	pop	r25
    33f4:	8f 91       	pop	r24
    33f6:	7f 91       	pop	r23
    33f8:	6f 91       	pop	r22
    33fa:	5f 91       	pop	r21
    33fc:	4f 91       	pop	r20
    33fe:	3f 91       	pop	r19
    3400:	2f 91       	pop	r18
    3402:	0f 90       	pop	r0
    3404:	0b be       	out	0x3b, r0	; 59
    3406:	0f 90       	pop	r0
    3408:	0f be       	out	0x3f, r0	; 63
    340a:	0f 90       	pop	r0
    340c:	1f 90       	pop	r1
    340e:	18 95       	reti

00003410 <__vector_63>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_TXC_vect)      /* Transmission Complete Interrupt */
    3410:	1f 92       	push	r1
    3412:	0f 92       	push	r0
    3414:	0f b6       	in	r0, 0x3f	; 63
    3416:	0f 92       	push	r0
    3418:	11 24       	eor	r1, r1
    341a:	0b b6       	in	r0, 0x3b	; 59
    341c:	0f 92       	push	r0
    341e:	2f 93       	push	r18
    3420:	3f 93       	push	r19
    3422:	4f 93       	push	r20
    3424:	5f 93       	push	r21
    3426:	6f 93       	push	r22
    3428:	7f 93       	push	r23
    342a:	8f 93       	push	r24
    342c:	9f 93       	push	r25
    342e:	af 93       	push	r26
    3430:	bf 93       	push	r27
    3432:	ef 93       	push	r30
    3434:	ff 93       	push	r31
    3436:	e0 91 ab 21 	lds	r30, 0x21AB
    343a:	f0 91 ac 21 	lds	r31, 0x21AC
    343e:	30 97       	sbiw	r30, 0x00	; 0
    3440:	29 f0       	breq	.+10     	; 0x344c <__vector_63+0x3c>
    3442:	80 91 a1 22 	lds	r24, 0x22A1
    3446:	90 91 a2 22 	lds	r25, 0x22A2
    344a:	19 95       	eicall
    344c:	ff 91       	pop	r31
    344e:	ef 91       	pop	r30
    3450:	bf 91       	pop	r27
    3452:	af 91       	pop	r26
    3454:	9f 91       	pop	r25
    3456:	8f 91       	pop	r24
    3458:	7f 91       	pop	r23
    345a:	6f 91       	pop	r22
    345c:	5f 91       	pop	r21
    345e:	4f 91       	pop	r20
    3460:	3f 91       	pop	r19
    3462:	2f 91       	pop	r18
    3464:	0f 90       	pop	r0
    3466:	0b be       	out	0x3b, r0	; 59
    3468:	0f 90       	pop	r0
    346a:	0f be       	out	0x3f, r0	; 63
    346c:	0f 90       	pop	r0
    346e:	1f 90       	pop	r1
    3470:	18 95       	reti

00003472 <__vector_64>:

/* PORTD interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT0_vect)      /* External Interrupt 0 */
    3472:	1f 92       	push	r1
    3474:	0f 92       	push	r0
    3476:	0f b6       	in	r0, 0x3f	; 63
    3478:	0f 92       	push	r0
    347a:	11 24       	eor	r1, r1
    347c:	0b b6       	in	r0, 0x3b	; 59
    347e:	0f 92       	push	r0
    3480:	2f 93       	push	r18
    3482:	3f 93       	push	r19
    3484:	4f 93       	push	r20
    3486:	5f 93       	push	r21
    3488:	6f 93       	push	r22
    348a:	7f 93       	push	r23
    348c:	8f 93       	push	r24
    348e:	9f 93       	push	r25
    3490:	af 93       	push	r26
    3492:	bf 93       	push	r27
    3494:	ef 93       	push	r30
    3496:	ff 93       	push	r31
    3498:	e0 91 ad 21 	lds	r30, 0x21AD
    349c:	f0 91 ae 21 	lds	r31, 0x21AE
    34a0:	30 97       	sbiw	r30, 0x00	; 0
    34a2:	29 f0       	breq	.+10     	; 0x34ae <__vector_64+0x3c>
    34a4:	80 91 a3 22 	lds	r24, 0x22A3
    34a8:	90 91 a4 22 	lds	r25, 0x22A4
    34ac:	19 95       	eicall
    34ae:	ff 91       	pop	r31
    34b0:	ef 91       	pop	r30
    34b2:	bf 91       	pop	r27
    34b4:	af 91       	pop	r26
    34b6:	9f 91       	pop	r25
    34b8:	8f 91       	pop	r24
    34ba:	7f 91       	pop	r23
    34bc:	6f 91       	pop	r22
    34be:	5f 91       	pop	r21
    34c0:	4f 91       	pop	r20
    34c2:	3f 91       	pop	r19
    34c4:	2f 91       	pop	r18
    34c6:	0f 90       	pop	r0
    34c8:	0b be       	out	0x3b, r0	; 59
    34ca:	0f 90       	pop	r0
    34cc:	0f be       	out	0x3f, r0	; 63
    34ce:	0f 90       	pop	r0
    34d0:	1f 90       	pop	r1
    34d2:	18 95       	reti

000034d4 <__vector_65>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT1_vect)      /* External Interrupt 1 */
    34d4:	1f 92       	push	r1
    34d6:	0f 92       	push	r0
    34d8:	0f b6       	in	r0, 0x3f	; 63
    34da:	0f 92       	push	r0
    34dc:	11 24       	eor	r1, r1
    34de:	0b b6       	in	r0, 0x3b	; 59
    34e0:	0f 92       	push	r0
    34e2:	2f 93       	push	r18
    34e4:	3f 93       	push	r19
    34e6:	4f 93       	push	r20
    34e8:	5f 93       	push	r21
    34ea:	6f 93       	push	r22
    34ec:	7f 93       	push	r23
    34ee:	8f 93       	push	r24
    34f0:	9f 93       	push	r25
    34f2:	af 93       	push	r26
    34f4:	bf 93       	push	r27
    34f6:	ef 93       	push	r30
    34f8:	ff 93       	push	r31
    34fa:	e0 91 af 21 	lds	r30, 0x21AF
    34fe:	f0 91 b0 21 	lds	r31, 0x21B0
    3502:	30 97       	sbiw	r30, 0x00	; 0
    3504:	29 f0       	breq	.+10     	; 0x3510 <__vector_65+0x3c>
    3506:	80 91 a5 22 	lds	r24, 0x22A5
    350a:	90 91 a6 22 	lds	r25, 0x22A6
    350e:	19 95       	eicall
    3510:	ff 91       	pop	r31
    3512:	ef 91       	pop	r30
    3514:	bf 91       	pop	r27
    3516:	af 91       	pop	r26
    3518:	9f 91       	pop	r25
    351a:	8f 91       	pop	r24
    351c:	7f 91       	pop	r23
    351e:	6f 91       	pop	r22
    3520:	5f 91       	pop	r21
    3522:	4f 91       	pop	r20
    3524:	3f 91       	pop	r19
    3526:	2f 91       	pop	r18
    3528:	0f 90       	pop	r0
    352a:	0b be       	out	0x3b, r0	; 59
    352c:	0f 90       	pop	r0
    352e:	0f be       	out	0x3f, r0	; 63
    3530:	0f 90       	pop	r0
    3532:	1f 90       	pop	r1
    3534:	18 95       	reti

00003536 <__vector_66>:

/* PORTA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT0_vect)      /* External Interrupt 0 */
    3536:	1f 92       	push	r1
    3538:	0f 92       	push	r0
    353a:	0f b6       	in	r0, 0x3f	; 63
    353c:	0f 92       	push	r0
    353e:	11 24       	eor	r1, r1
    3540:	0b b6       	in	r0, 0x3b	; 59
    3542:	0f 92       	push	r0
    3544:	2f 93       	push	r18
    3546:	3f 93       	push	r19
    3548:	4f 93       	push	r20
    354a:	5f 93       	push	r21
    354c:	6f 93       	push	r22
    354e:	7f 93       	push	r23
    3550:	8f 93       	push	r24
    3552:	9f 93       	push	r25
    3554:	af 93       	push	r26
    3556:	bf 93       	push	r27
    3558:	ef 93       	push	r30
    355a:	ff 93       	push	r31
    355c:	e0 91 b1 21 	lds	r30, 0x21B1
    3560:	f0 91 b2 21 	lds	r31, 0x21B2
    3564:	30 97       	sbiw	r30, 0x00	; 0
    3566:	29 f0       	breq	.+10     	; 0x3572 <__vector_66+0x3c>
    3568:	80 91 a7 22 	lds	r24, 0x22A7
    356c:	90 91 a8 22 	lds	r25, 0x22A8
    3570:	19 95       	eicall
    3572:	ff 91       	pop	r31
    3574:	ef 91       	pop	r30
    3576:	bf 91       	pop	r27
    3578:	af 91       	pop	r26
    357a:	9f 91       	pop	r25
    357c:	8f 91       	pop	r24
    357e:	7f 91       	pop	r23
    3580:	6f 91       	pop	r22
    3582:	5f 91       	pop	r21
    3584:	4f 91       	pop	r20
    3586:	3f 91       	pop	r19
    3588:	2f 91       	pop	r18
    358a:	0f 90       	pop	r0
    358c:	0b be       	out	0x3b, r0	; 59
    358e:	0f 90       	pop	r0
    3590:	0f be       	out	0x3f, r0	; 63
    3592:	0f 90       	pop	r0
    3594:	1f 90       	pop	r1
    3596:	18 95       	reti

00003598 <__vector_67>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT1_vect)      /* External Interrupt 1 */
    3598:	1f 92       	push	r1
    359a:	0f 92       	push	r0
    359c:	0f b6       	in	r0, 0x3f	; 63
    359e:	0f 92       	push	r0
    35a0:	11 24       	eor	r1, r1
    35a2:	0b b6       	in	r0, 0x3b	; 59
    35a4:	0f 92       	push	r0
    35a6:	2f 93       	push	r18
    35a8:	3f 93       	push	r19
    35aa:	4f 93       	push	r20
    35ac:	5f 93       	push	r21
    35ae:	6f 93       	push	r22
    35b0:	7f 93       	push	r23
    35b2:	8f 93       	push	r24
    35b4:	9f 93       	push	r25
    35b6:	af 93       	push	r26
    35b8:	bf 93       	push	r27
    35ba:	ef 93       	push	r30
    35bc:	ff 93       	push	r31
    35be:	e0 91 b3 21 	lds	r30, 0x21B3
    35c2:	f0 91 b4 21 	lds	r31, 0x21B4
    35c6:	30 97       	sbiw	r30, 0x00	; 0
    35c8:	29 f0       	breq	.+10     	; 0x35d4 <__vector_67+0x3c>
    35ca:	80 91 a9 22 	lds	r24, 0x22A9
    35ce:	90 91 aa 22 	lds	r25, 0x22AA
    35d2:	19 95       	eicall
    35d4:	ff 91       	pop	r31
    35d6:	ef 91       	pop	r30
    35d8:	bf 91       	pop	r27
    35da:	af 91       	pop	r26
    35dc:	9f 91       	pop	r25
    35de:	8f 91       	pop	r24
    35e0:	7f 91       	pop	r23
    35e2:	6f 91       	pop	r22
    35e4:	5f 91       	pop	r21
    35e6:	4f 91       	pop	r20
    35e8:	3f 91       	pop	r19
    35ea:	2f 91       	pop	r18
    35ec:	0f 90       	pop	r0
    35ee:	0b be       	out	0x3b, r0	; 59
    35f0:	0f 90       	pop	r0
    35f2:	0f be       	out	0x3f, r0	; 63
    35f4:	0f 90       	pop	r0
    35f6:	1f 90       	pop	r1
    35f8:	18 95       	reti

000035fa <__vector_68>:

/* ACA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC0_vect)      /* AC0 Interrupt */
    35fa:	1f 92       	push	r1
    35fc:	0f 92       	push	r0
    35fe:	0f b6       	in	r0, 0x3f	; 63
    3600:	0f 92       	push	r0
    3602:	11 24       	eor	r1, r1
    3604:	0b b6       	in	r0, 0x3b	; 59
    3606:	0f 92       	push	r0
    3608:	2f 93       	push	r18
    360a:	3f 93       	push	r19
    360c:	4f 93       	push	r20
    360e:	5f 93       	push	r21
    3610:	6f 93       	push	r22
    3612:	7f 93       	push	r23
    3614:	8f 93       	push	r24
    3616:	9f 93       	push	r25
    3618:	af 93       	push	r26
    361a:	bf 93       	push	r27
    361c:	ef 93       	push	r30
    361e:	ff 93       	push	r31
    3620:	e0 91 b5 21 	lds	r30, 0x21B5
    3624:	f0 91 b6 21 	lds	r31, 0x21B6
    3628:	30 97       	sbiw	r30, 0x00	; 0
    362a:	29 f0       	breq	.+10     	; 0x3636 <__vector_68+0x3c>
    362c:	80 91 ab 22 	lds	r24, 0x22AB
    3630:	90 91 ac 22 	lds	r25, 0x22AC
    3634:	19 95       	eicall
    3636:	ff 91       	pop	r31
    3638:	ef 91       	pop	r30
    363a:	bf 91       	pop	r27
    363c:	af 91       	pop	r26
    363e:	9f 91       	pop	r25
    3640:	8f 91       	pop	r24
    3642:	7f 91       	pop	r23
    3644:	6f 91       	pop	r22
    3646:	5f 91       	pop	r21
    3648:	4f 91       	pop	r20
    364a:	3f 91       	pop	r19
    364c:	2f 91       	pop	r18
    364e:	0f 90       	pop	r0
    3650:	0b be       	out	0x3b, r0	; 59
    3652:	0f 90       	pop	r0
    3654:	0f be       	out	0x3f, r0	; 63
    3656:	0f 90       	pop	r0
    3658:	1f 90       	pop	r1
    365a:	18 95       	reti

0000365c <__vector_69>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC1_vect)      /* AC1 Interrupt */
    365c:	1f 92       	push	r1
    365e:	0f 92       	push	r0
    3660:	0f b6       	in	r0, 0x3f	; 63
    3662:	0f 92       	push	r0
    3664:	11 24       	eor	r1, r1
    3666:	0b b6       	in	r0, 0x3b	; 59
    3668:	0f 92       	push	r0
    366a:	2f 93       	push	r18
    366c:	3f 93       	push	r19
    366e:	4f 93       	push	r20
    3670:	5f 93       	push	r21
    3672:	6f 93       	push	r22
    3674:	7f 93       	push	r23
    3676:	8f 93       	push	r24
    3678:	9f 93       	push	r25
    367a:	af 93       	push	r26
    367c:	bf 93       	push	r27
    367e:	ef 93       	push	r30
    3680:	ff 93       	push	r31
    3682:	e0 91 b7 21 	lds	r30, 0x21B7
    3686:	f0 91 b8 21 	lds	r31, 0x21B8
    368a:	30 97       	sbiw	r30, 0x00	; 0
    368c:	29 f0       	breq	.+10     	; 0x3698 <__vector_69+0x3c>
    368e:	80 91 ad 22 	lds	r24, 0x22AD
    3692:	90 91 ae 22 	lds	r25, 0x22AE
    3696:	19 95       	eicall
    3698:	ff 91       	pop	r31
    369a:	ef 91       	pop	r30
    369c:	bf 91       	pop	r27
    369e:	af 91       	pop	r26
    36a0:	9f 91       	pop	r25
    36a2:	8f 91       	pop	r24
    36a4:	7f 91       	pop	r23
    36a6:	6f 91       	pop	r22
    36a8:	5f 91       	pop	r21
    36aa:	4f 91       	pop	r20
    36ac:	3f 91       	pop	r19
    36ae:	2f 91       	pop	r18
    36b0:	0f 90       	pop	r0
    36b2:	0b be       	out	0x3b, r0	; 59
    36b4:	0f 90       	pop	r0
    36b6:	0f be       	out	0x3f, r0	; 63
    36b8:	0f 90       	pop	r0
    36ba:	1f 90       	pop	r1
    36bc:	18 95       	reti

000036be <__vector_70>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_ACW_vect)      /* ACW Window Mode Interrupt */
    36be:	1f 92       	push	r1
    36c0:	0f 92       	push	r0
    36c2:	0f b6       	in	r0, 0x3f	; 63
    36c4:	0f 92       	push	r0
    36c6:	11 24       	eor	r1, r1
    36c8:	0b b6       	in	r0, 0x3b	; 59
    36ca:	0f 92       	push	r0
    36cc:	2f 93       	push	r18
    36ce:	3f 93       	push	r19
    36d0:	4f 93       	push	r20
    36d2:	5f 93       	push	r21
    36d4:	6f 93       	push	r22
    36d6:	7f 93       	push	r23
    36d8:	8f 93       	push	r24
    36da:	9f 93       	push	r25
    36dc:	af 93       	push	r26
    36de:	bf 93       	push	r27
    36e0:	ef 93       	push	r30
    36e2:	ff 93       	push	r31
    36e4:	e0 91 b9 21 	lds	r30, 0x21B9
    36e8:	f0 91 ba 21 	lds	r31, 0x21BA
    36ec:	30 97       	sbiw	r30, 0x00	; 0
    36ee:	29 f0       	breq	.+10     	; 0x36fa <__vector_70+0x3c>
    36f0:	80 91 af 22 	lds	r24, 0x22AF
    36f4:	90 91 b0 22 	lds	r25, 0x22B0
    36f8:	19 95       	eicall
    36fa:	ff 91       	pop	r31
    36fc:	ef 91       	pop	r30
    36fe:	bf 91       	pop	r27
    3700:	af 91       	pop	r26
    3702:	9f 91       	pop	r25
    3704:	8f 91       	pop	r24
    3706:	7f 91       	pop	r23
    3708:	6f 91       	pop	r22
    370a:	5f 91       	pop	r21
    370c:	4f 91       	pop	r20
    370e:	3f 91       	pop	r19
    3710:	2f 91       	pop	r18
    3712:	0f 90       	pop	r0
    3714:	0b be       	out	0x3b, r0	; 59
    3716:	0f 90       	pop	r0
    3718:	0f be       	out	0x3f, r0	; 63
    371a:	0f 90       	pop	r0
    371c:	1f 90       	pop	r1
    371e:	18 95       	reti

00003720 <__vector_71>:

/* ADCA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH0_vect)      /* Interrupt 0 */
    3720:	1f 92       	push	r1
    3722:	0f 92       	push	r0
    3724:	0f b6       	in	r0, 0x3f	; 63
    3726:	0f 92       	push	r0
    3728:	11 24       	eor	r1, r1
    372a:	0b b6       	in	r0, 0x3b	; 59
    372c:	0f 92       	push	r0
    372e:	2f 93       	push	r18
    3730:	3f 93       	push	r19
    3732:	4f 93       	push	r20
    3734:	5f 93       	push	r21
    3736:	6f 93       	push	r22
    3738:	7f 93       	push	r23
    373a:	8f 93       	push	r24
    373c:	9f 93       	push	r25
    373e:	af 93       	push	r26
    3740:	bf 93       	push	r27
    3742:	ef 93       	push	r30
    3744:	ff 93       	push	r31
    3746:	e0 91 bb 21 	lds	r30, 0x21BB
    374a:	f0 91 bc 21 	lds	r31, 0x21BC
    374e:	30 97       	sbiw	r30, 0x00	; 0
    3750:	29 f0       	breq	.+10     	; 0x375c <__vector_71+0x3c>
    3752:	80 91 b1 22 	lds	r24, 0x22B1
    3756:	90 91 b2 22 	lds	r25, 0x22B2
    375a:	19 95       	eicall
    375c:	ff 91       	pop	r31
    375e:	ef 91       	pop	r30
    3760:	bf 91       	pop	r27
    3762:	af 91       	pop	r26
    3764:	9f 91       	pop	r25
    3766:	8f 91       	pop	r24
    3768:	7f 91       	pop	r23
    376a:	6f 91       	pop	r22
    376c:	5f 91       	pop	r21
    376e:	4f 91       	pop	r20
    3770:	3f 91       	pop	r19
    3772:	2f 91       	pop	r18
    3774:	0f 90       	pop	r0
    3776:	0b be       	out	0x3b, r0	; 59
    3778:	0f 90       	pop	r0
    377a:	0f be       	out	0x3f, r0	; 63
    377c:	0f 90       	pop	r0
    377e:	1f 90       	pop	r1
    3780:	18 95       	reti

00003782 <__vector_72>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH1_vect)      /* Interrupt 1 */
    3782:	1f 92       	push	r1
    3784:	0f 92       	push	r0
    3786:	0f b6       	in	r0, 0x3f	; 63
    3788:	0f 92       	push	r0
    378a:	11 24       	eor	r1, r1
    378c:	0b b6       	in	r0, 0x3b	; 59
    378e:	0f 92       	push	r0
    3790:	2f 93       	push	r18
    3792:	3f 93       	push	r19
    3794:	4f 93       	push	r20
    3796:	5f 93       	push	r21
    3798:	6f 93       	push	r22
    379a:	7f 93       	push	r23
    379c:	8f 93       	push	r24
    379e:	9f 93       	push	r25
    37a0:	af 93       	push	r26
    37a2:	bf 93       	push	r27
    37a4:	ef 93       	push	r30
    37a6:	ff 93       	push	r31
    37a8:	e0 91 bd 21 	lds	r30, 0x21BD
    37ac:	f0 91 be 21 	lds	r31, 0x21BE
    37b0:	30 97       	sbiw	r30, 0x00	; 0
    37b2:	29 f0       	breq	.+10     	; 0x37be <__vector_72+0x3c>
    37b4:	80 91 b3 22 	lds	r24, 0x22B3
    37b8:	90 91 b4 22 	lds	r25, 0x22B4
    37bc:	19 95       	eicall
    37be:	ff 91       	pop	r31
    37c0:	ef 91       	pop	r30
    37c2:	bf 91       	pop	r27
    37c4:	af 91       	pop	r26
    37c6:	9f 91       	pop	r25
    37c8:	8f 91       	pop	r24
    37ca:	7f 91       	pop	r23
    37cc:	6f 91       	pop	r22
    37ce:	5f 91       	pop	r21
    37d0:	4f 91       	pop	r20
    37d2:	3f 91       	pop	r19
    37d4:	2f 91       	pop	r18
    37d6:	0f 90       	pop	r0
    37d8:	0b be       	out	0x3b, r0	; 59
    37da:	0f 90       	pop	r0
    37dc:	0f be       	out	0x3f, r0	; 63
    37de:	0f 90       	pop	r0
    37e0:	1f 90       	pop	r1
    37e2:	18 95       	reti

000037e4 <__vector_73>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH2_vect)      /* Interrupt 2 */
    37e4:	1f 92       	push	r1
    37e6:	0f 92       	push	r0
    37e8:	0f b6       	in	r0, 0x3f	; 63
    37ea:	0f 92       	push	r0
    37ec:	11 24       	eor	r1, r1
    37ee:	0b b6       	in	r0, 0x3b	; 59
    37f0:	0f 92       	push	r0
    37f2:	2f 93       	push	r18
    37f4:	3f 93       	push	r19
    37f6:	4f 93       	push	r20
    37f8:	5f 93       	push	r21
    37fa:	6f 93       	push	r22
    37fc:	7f 93       	push	r23
    37fe:	8f 93       	push	r24
    3800:	9f 93       	push	r25
    3802:	af 93       	push	r26
    3804:	bf 93       	push	r27
    3806:	ef 93       	push	r30
    3808:	ff 93       	push	r31
    380a:	e0 91 bf 21 	lds	r30, 0x21BF
    380e:	f0 91 c0 21 	lds	r31, 0x21C0
    3812:	30 97       	sbiw	r30, 0x00	; 0
    3814:	29 f0       	breq	.+10     	; 0x3820 <__vector_73+0x3c>
    3816:	80 91 b5 22 	lds	r24, 0x22B5
    381a:	90 91 b6 22 	lds	r25, 0x22B6
    381e:	19 95       	eicall
    3820:	ff 91       	pop	r31
    3822:	ef 91       	pop	r30
    3824:	bf 91       	pop	r27
    3826:	af 91       	pop	r26
    3828:	9f 91       	pop	r25
    382a:	8f 91       	pop	r24
    382c:	7f 91       	pop	r23
    382e:	6f 91       	pop	r22
    3830:	5f 91       	pop	r21
    3832:	4f 91       	pop	r20
    3834:	3f 91       	pop	r19
    3836:	2f 91       	pop	r18
    3838:	0f 90       	pop	r0
    383a:	0b be       	out	0x3b, r0	; 59
    383c:	0f 90       	pop	r0
    383e:	0f be       	out	0x3f, r0	; 63
    3840:	0f 90       	pop	r0
    3842:	1f 90       	pop	r1
    3844:	18 95       	reti

00003846 <__vector_74>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH3_vect)      /* Interrupt 3 */
    3846:	1f 92       	push	r1
    3848:	0f 92       	push	r0
    384a:	0f b6       	in	r0, 0x3f	; 63
    384c:	0f 92       	push	r0
    384e:	11 24       	eor	r1, r1
    3850:	0b b6       	in	r0, 0x3b	; 59
    3852:	0f 92       	push	r0
    3854:	2f 93       	push	r18
    3856:	3f 93       	push	r19
    3858:	4f 93       	push	r20
    385a:	5f 93       	push	r21
    385c:	6f 93       	push	r22
    385e:	7f 93       	push	r23
    3860:	8f 93       	push	r24
    3862:	9f 93       	push	r25
    3864:	af 93       	push	r26
    3866:	bf 93       	push	r27
    3868:	ef 93       	push	r30
    386a:	ff 93       	push	r31
    386c:	e0 91 c1 21 	lds	r30, 0x21C1
    3870:	f0 91 c2 21 	lds	r31, 0x21C2
    3874:	30 97       	sbiw	r30, 0x00	; 0
    3876:	29 f0       	breq	.+10     	; 0x3882 <__vector_74+0x3c>
    3878:	80 91 b7 22 	lds	r24, 0x22B7
    387c:	90 91 b8 22 	lds	r25, 0x22B8
    3880:	19 95       	eicall
    3882:	ff 91       	pop	r31
    3884:	ef 91       	pop	r30
    3886:	bf 91       	pop	r27
    3888:	af 91       	pop	r26
    388a:	9f 91       	pop	r25
    388c:	8f 91       	pop	r24
    388e:	7f 91       	pop	r23
    3890:	6f 91       	pop	r22
    3892:	5f 91       	pop	r21
    3894:	4f 91       	pop	r20
    3896:	3f 91       	pop	r19
    3898:	2f 91       	pop	r18
    389a:	0f 90       	pop	r0
    389c:	0b be       	out	0x3b, r0	; 59
    389e:	0f 90       	pop	r0
    38a0:	0f be       	out	0x3f, r0	; 63
    38a2:	0f 90       	pop	r0
    38a4:	1f 90       	pop	r1
    38a6:	18 95       	reti

000038a8 <__vector_77>:

/* TCD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_OVF_vect)      /* Overflow Interrupt */
    38a8:	1f 92       	push	r1
    38aa:	0f 92       	push	r0
    38ac:	0f b6       	in	r0, 0x3f	; 63
    38ae:	0f 92       	push	r0
    38b0:	11 24       	eor	r1, r1
    38b2:	0b b6       	in	r0, 0x3b	; 59
    38b4:	0f 92       	push	r0
    38b6:	2f 93       	push	r18
    38b8:	3f 93       	push	r19
    38ba:	4f 93       	push	r20
    38bc:	5f 93       	push	r21
    38be:	6f 93       	push	r22
    38c0:	7f 93       	push	r23
    38c2:	8f 93       	push	r24
    38c4:	9f 93       	push	r25
    38c6:	af 93       	push	r26
    38c8:	bf 93       	push	r27
    38ca:	ef 93       	push	r30
    38cc:	ff 93       	push	r31
    38ce:	e0 91 c7 21 	lds	r30, 0x21C7
    38d2:	f0 91 c8 21 	lds	r31, 0x21C8
    38d6:	30 97       	sbiw	r30, 0x00	; 0
    38d8:	29 f0       	breq	.+10     	; 0x38e4 <__vector_77+0x3c>
    38da:	80 91 bd 22 	lds	r24, 0x22BD
    38de:	90 91 be 22 	lds	r25, 0x22BE
    38e2:	19 95       	eicall
    38e4:	ff 91       	pop	r31
    38e6:	ef 91       	pop	r30
    38e8:	bf 91       	pop	r27
    38ea:	af 91       	pop	r26
    38ec:	9f 91       	pop	r25
    38ee:	8f 91       	pop	r24
    38f0:	7f 91       	pop	r23
    38f2:	6f 91       	pop	r22
    38f4:	5f 91       	pop	r21
    38f6:	4f 91       	pop	r20
    38f8:	3f 91       	pop	r19
    38fa:	2f 91       	pop	r18
    38fc:	0f 90       	pop	r0
    38fe:	0b be       	out	0x3b, r0	; 59
    3900:	0f 90       	pop	r0
    3902:	0f be       	out	0x3f, r0	; 63
    3904:	0f 90       	pop	r0
    3906:	1f 90       	pop	r1
    3908:	18 95       	reti

0000390a <__vector_78>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_ERR_vect)      /* Error Interrupt */
    390a:	1f 92       	push	r1
    390c:	0f 92       	push	r0
    390e:	0f b6       	in	r0, 0x3f	; 63
    3910:	0f 92       	push	r0
    3912:	11 24       	eor	r1, r1
    3914:	0b b6       	in	r0, 0x3b	; 59
    3916:	0f 92       	push	r0
    3918:	2f 93       	push	r18
    391a:	3f 93       	push	r19
    391c:	4f 93       	push	r20
    391e:	5f 93       	push	r21
    3920:	6f 93       	push	r22
    3922:	7f 93       	push	r23
    3924:	8f 93       	push	r24
    3926:	9f 93       	push	r25
    3928:	af 93       	push	r26
    392a:	bf 93       	push	r27
    392c:	ef 93       	push	r30
    392e:	ff 93       	push	r31
    3930:	e0 91 c9 21 	lds	r30, 0x21C9
    3934:	f0 91 ca 21 	lds	r31, 0x21CA
    3938:	30 97       	sbiw	r30, 0x00	; 0
    393a:	29 f0       	breq	.+10     	; 0x3946 <__vector_78+0x3c>
    393c:	80 91 bf 22 	lds	r24, 0x22BF
    3940:	90 91 c0 22 	lds	r25, 0x22C0
    3944:	19 95       	eicall
    3946:	ff 91       	pop	r31
    3948:	ef 91       	pop	r30
    394a:	bf 91       	pop	r27
    394c:	af 91       	pop	r26
    394e:	9f 91       	pop	r25
    3950:	8f 91       	pop	r24
    3952:	7f 91       	pop	r23
    3954:	6f 91       	pop	r22
    3956:	5f 91       	pop	r21
    3958:	4f 91       	pop	r20
    395a:	3f 91       	pop	r19
    395c:	2f 91       	pop	r18
    395e:	0f 90       	pop	r0
    3960:	0b be       	out	0x3b, r0	; 59
    3962:	0f 90       	pop	r0
    3964:	0f be       	out	0x3f, r0	; 63
    3966:	0f 90       	pop	r0
    3968:	1f 90       	pop	r1
    396a:	18 95       	reti

0000396c <__vector_79>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCA_vect)      /* Compare or Capture A Interrupt */
    396c:	1f 92       	push	r1
    396e:	0f 92       	push	r0
    3970:	0f b6       	in	r0, 0x3f	; 63
    3972:	0f 92       	push	r0
    3974:	11 24       	eor	r1, r1
    3976:	0b b6       	in	r0, 0x3b	; 59
    3978:	0f 92       	push	r0
    397a:	2f 93       	push	r18
    397c:	3f 93       	push	r19
    397e:	4f 93       	push	r20
    3980:	5f 93       	push	r21
    3982:	6f 93       	push	r22
    3984:	7f 93       	push	r23
    3986:	8f 93       	push	r24
    3988:	9f 93       	push	r25
    398a:	af 93       	push	r26
    398c:	bf 93       	push	r27
    398e:	ef 93       	push	r30
    3990:	ff 93       	push	r31
    3992:	e0 91 cb 21 	lds	r30, 0x21CB
    3996:	f0 91 cc 21 	lds	r31, 0x21CC
    399a:	30 97       	sbiw	r30, 0x00	; 0
    399c:	29 f0       	breq	.+10     	; 0x39a8 <__vector_79+0x3c>
    399e:	80 91 c1 22 	lds	r24, 0x22C1
    39a2:	90 91 c2 22 	lds	r25, 0x22C2
    39a6:	19 95       	eicall
    39a8:	ff 91       	pop	r31
    39aa:	ef 91       	pop	r30
    39ac:	bf 91       	pop	r27
    39ae:	af 91       	pop	r26
    39b0:	9f 91       	pop	r25
    39b2:	8f 91       	pop	r24
    39b4:	7f 91       	pop	r23
    39b6:	6f 91       	pop	r22
    39b8:	5f 91       	pop	r21
    39ba:	4f 91       	pop	r20
    39bc:	3f 91       	pop	r19
    39be:	2f 91       	pop	r18
    39c0:	0f 90       	pop	r0
    39c2:	0b be       	out	0x3b, r0	; 59
    39c4:	0f 90       	pop	r0
    39c6:	0f be       	out	0x3f, r0	; 63
    39c8:	0f 90       	pop	r0
    39ca:	1f 90       	pop	r1
    39cc:	18 95       	reti

000039ce <__vector_80>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCB_vect)      /* Compare or Capture B Interrupt */
    39ce:	1f 92       	push	r1
    39d0:	0f 92       	push	r0
    39d2:	0f b6       	in	r0, 0x3f	; 63
    39d4:	0f 92       	push	r0
    39d6:	11 24       	eor	r1, r1
    39d8:	0b b6       	in	r0, 0x3b	; 59
    39da:	0f 92       	push	r0
    39dc:	2f 93       	push	r18
    39de:	3f 93       	push	r19
    39e0:	4f 93       	push	r20
    39e2:	5f 93       	push	r21
    39e4:	6f 93       	push	r22
    39e6:	7f 93       	push	r23
    39e8:	8f 93       	push	r24
    39ea:	9f 93       	push	r25
    39ec:	af 93       	push	r26
    39ee:	bf 93       	push	r27
    39f0:	ef 93       	push	r30
    39f2:	ff 93       	push	r31
    39f4:	e0 91 cd 21 	lds	r30, 0x21CD
    39f8:	f0 91 ce 21 	lds	r31, 0x21CE
    39fc:	30 97       	sbiw	r30, 0x00	; 0
    39fe:	29 f0       	breq	.+10     	; 0x3a0a <__vector_80+0x3c>
    3a00:	80 91 c3 22 	lds	r24, 0x22C3
    3a04:	90 91 c4 22 	lds	r25, 0x22C4
    3a08:	19 95       	eicall
    3a0a:	ff 91       	pop	r31
    3a0c:	ef 91       	pop	r30
    3a0e:	bf 91       	pop	r27
    3a10:	af 91       	pop	r26
    3a12:	9f 91       	pop	r25
    3a14:	8f 91       	pop	r24
    3a16:	7f 91       	pop	r23
    3a18:	6f 91       	pop	r22
    3a1a:	5f 91       	pop	r21
    3a1c:	4f 91       	pop	r20
    3a1e:	3f 91       	pop	r19
    3a20:	2f 91       	pop	r18
    3a22:	0f 90       	pop	r0
    3a24:	0b be       	out	0x3b, r0	; 59
    3a26:	0f 90       	pop	r0
    3a28:	0f be       	out	0x3f, r0	; 63
    3a2a:	0f 90       	pop	r0
    3a2c:	1f 90       	pop	r1
    3a2e:	18 95       	reti

00003a30 <__vector_81>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCC_vect)      /* Compare or Capture C Interrupt */
    3a30:	1f 92       	push	r1
    3a32:	0f 92       	push	r0
    3a34:	0f b6       	in	r0, 0x3f	; 63
    3a36:	0f 92       	push	r0
    3a38:	11 24       	eor	r1, r1
    3a3a:	0b b6       	in	r0, 0x3b	; 59
    3a3c:	0f 92       	push	r0
    3a3e:	2f 93       	push	r18
    3a40:	3f 93       	push	r19
    3a42:	4f 93       	push	r20
    3a44:	5f 93       	push	r21
    3a46:	6f 93       	push	r22
    3a48:	7f 93       	push	r23
    3a4a:	8f 93       	push	r24
    3a4c:	9f 93       	push	r25
    3a4e:	af 93       	push	r26
    3a50:	bf 93       	push	r27
    3a52:	ef 93       	push	r30
    3a54:	ff 93       	push	r31
    3a56:	e0 91 cf 21 	lds	r30, 0x21CF
    3a5a:	f0 91 d0 21 	lds	r31, 0x21D0
    3a5e:	30 97       	sbiw	r30, 0x00	; 0
    3a60:	29 f0       	breq	.+10     	; 0x3a6c <__vector_81+0x3c>
    3a62:	80 91 c5 22 	lds	r24, 0x22C5
    3a66:	90 91 c6 22 	lds	r25, 0x22C6
    3a6a:	19 95       	eicall
    3a6c:	ff 91       	pop	r31
    3a6e:	ef 91       	pop	r30
    3a70:	bf 91       	pop	r27
    3a72:	af 91       	pop	r26
    3a74:	9f 91       	pop	r25
    3a76:	8f 91       	pop	r24
    3a78:	7f 91       	pop	r23
    3a7a:	6f 91       	pop	r22
    3a7c:	5f 91       	pop	r21
    3a7e:	4f 91       	pop	r20
    3a80:	3f 91       	pop	r19
    3a82:	2f 91       	pop	r18
    3a84:	0f 90       	pop	r0
    3a86:	0b be       	out	0x3b, r0	; 59
    3a88:	0f 90       	pop	r0
    3a8a:	0f be       	out	0x3f, r0	; 63
    3a8c:	0f 90       	pop	r0
    3a8e:	1f 90       	pop	r1
    3a90:	18 95       	reti

00003a92 <__vector_82>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCD_vect)      /* Compare or Capture D Interrupt */
    3a92:	1f 92       	push	r1
    3a94:	0f 92       	push	r0
    3a96:	0f b6       	in	r0, 0x3f	; 63
    3a98:	0f 92       	push	r0
    3a9a:	11 24       	eor	r1, r1
    3a9c:	0b b6       	in	r0, 0x3b	; 59
    3a9e:	0f 92       	push	r0
    3aa0:	2f 93       	push	r18
    3aa2:	3f 93       	push	r19
    3aa4:	4f 93       	push	r20
    3aa6:	5f 93       	push	r21
    3aa8:	6f 93       	push	r22
    3aaa:	7f 93       	push	r23
    3aac:	8f 93       	push	r24
    3aae:	9f 93       	push	r25
    3ab0:	af 93       	push	r26
    3ab2:	bf 93       	push	r27
    3ab4:	ef 93       	push	r30
    3ab6:	ff 93       	push	r31
    3ab8:	e0 91 d1 21 	lds	r30, 0x21D1
    3abc:	f0 91 d2 21 	lds	r31, 0x21D2
    3ac0:	30 97       	sbiw	r30, 0x00	; 0
    3ac2:	29 f0       	breq	.+10     	; 0x3ace <__vector_82+0x3c>
    3ac4:	80 91 c7 22 	lds	r24, 0x22C7
    3ac8:	90 91 c8 22 	lds	r25, 0x22C8
    3acc:	19 95       	eicall
    3ace:	ff 91       	pop	r31
    3ad0:	ef 91       	pop	r30
    3ad2:	bf 91       	pop	r27
    3ad4:	af 91       	pop	r26
    3ad6:	9f 91       	pop	r25
    3ad8:	8f 91       	pop	r24
    3ada:	7f 91       	pop	r23
    3adc:	6f 91       	pop	r22
    3ade:	5f 91       	pop	r21
    3ae0:	4f 91       	pop	r20
    3ae2:	3f 91       	pop	r19
    3ae4:	2f 91       	pop	r18
    3ae6:	0f 90       	pop	r0
    3ae8:	0b be       	out	0x3b, r0	; 59
    3aea:	0f 90       	pop	r0
    3aec:	0f be       	out	0x3f, r0	; 63
    3aee:	0f 90       	pop	r0
    3af0:	1f 90       	pop	r1
    3af2:	18 95       	reti

00003af4 <__vector_83>:

/* TCD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_OVF_vect)      /* Overflow Interrupt */
    3af4:	1f 92       	push	r1
    3af6:	0f 92       	push	r0
    3af8:	0f b6       	in	r0, 0x3f	; 63
    3afa:	0f 92       	push	r0
    3afc:	11 24       	eor	r1, r1
    3afe:	0b b6       	in	r0, 0x3b	; 59
    3b00:	0f 92       	push	r0
    3b02:	2f 93       	push	r18
    3b04:	3f 93       	push	r19
    3b06:	4f 93       	push	r20
    3b08:	5f 93       	push	r21
    3b0a:	6f 93       	push	r22
    3b0c:	7f 93       	push	r23
    3b0e:	8f 93       	push	r24
    3b10:	9f 93       	push	r25
    3b12:	af 93       	push	r26
    3b14:	bf 93       	push	r27
    3b16:	ef 93       	push	r30
    3b18:	ff 93       	push	r31
    3b1a:	e0 91 d3 21 	lds	r30, 0x21D3
    3b1e:	f0 91 d4 21 	lds	r31, 0x21D4
    3b22:	30 97       	sbiw	r30, 0x00	; 0
    3b24:	29 f0       	breq	.+10     	; 0x3b30 <__vector_83+0x3c>
    3b26:	80 91 c9 22 	lds	r24, 0x22C9
    3b2a:	90 91 ca 22 	lds	r25, 0x22CA
    3b2e:	19 95       	eicall
    3b30:	ff 91       	pop	r31
    3b32:	ef 91       	pop	r30
    3b34:	bf 91       	pop	r27
    3b36:	af 91       	pop	r26
    3b38:	9f 91       	pop	r25
    3b3a:	8f 91       	pop	r24
    3b3c:	7f 91       	pop	r23
    3b3e:	6f 91       	pop	r22
    3b40:	5f 91       	pop	r21
    3b42:	4f 91       	pop	r20
    3b44:	3f 91       	pop	r19
    3b46:	2f 91       	pop	r18
    3b48:	0f 90       	pop	r0
    3b4a:	0b be       	out	0x3b, r0	; 59
    3b4c:	0f 90       	pop	r0
    3b4e:	0f be       	out	0x3f, r0	; 63
    3b50:	0f 90       	pop	r0
    3b52:	1f 90       	pop	r1
    3b54:	18 95       	reti

00003b56 <__vector_84>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_ERR_vect)      /* Error Interrupt */
    3b56:	1f 92       	push	r1
    3b58:	0f 92       	push	r0
    3b5a:	0f b6       	in	r0, 0x3f	; 63
    3b5c:	0f 92       	push	r0
    3b5e:	11 24       	eor	r1, r1
    3b60:	0b b6       	in	r0, 0x3b	; 59
    3b62:	0f 92       	push	r0
    3b64:	2f 93       	push	r18
    3b66:	3f 93       	push	r19
    3b68:	4f 93       	push	r20
    3b6a:	5f 93       	push	r21
    3b6c:	6f 93       	push	r22
    3b6e:	7f 93       	push	r23
    3b70:	8f 93       	push	r24
    3b72:	9f 93       	push	r25
    3b74:	af 93       	push	r26
    3b76:	bf 93       	push	r27
    3b78:	ef 93       	push	r30
    3b7a:	ff 93       	push	r31
    3b7c:	e0 91 d5 21 	lds	r30, 0x21D5
    3b80:	f0 91 d6 21 	lds	r31, 0x21D6
    3b84:	30 97       	sbiw	r30, 0x00	; 0
    3b86:	29 f0       	breq	.+10     	; 0x3b92 <__vector_84+0x3c>
    3b88:	80 91 cb 22 	lds	r24, 0x22CB
    3b8c:	90 91 cc 22 	lds	r25, 0x22CC
    3b90:	19 95       	eicall
    3b92:	ff 91       	pop	r31
    3b94:	ef 91       	pop	r30
    3b96:	bf 91       	pop	r27
    3b98:	af 91       	pop	r26
    3b9a:	9f 91       	pop	r25
    3b9c:	8f 91       	pop	r24
    3b9e:	7f 91       	pop	r23
    3ba0:	6f 91       	pop	r22
    3ba2:	5f 91       	pop	r21
    3ba4:	4f 91       	pop	r20
    3ba6:	3f 91       	pop	r19
    3ba8:	2f 91       	pop	r18
    3baa:	0f 90       	pop	r0
    3bac:	0b be       	out	0x3b, r0	; 59
    3bae:	0f 90       	pop	r0
    3bb0:	0f be       	out	0x3f, r0	; 63
    3bb2:	0f 90       	pop	r0
    3bb4:	1f 90       	pop	r1
    3bb6:	18 95       	reti

00003bb8 <__vector_85>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCA_vect)      /* Compare or Capture A Interrupt */
    3bb8:	1f 92       	push	r1
    3bba:	0f 92       	push	r0
    3bbc:	0f b6       	in	r0, 0x3f	; 63
    3bbe:	0f 92       	push	r0
    3bc0:	11 24       	eor	r1, r1
    3bc2:	0b b6       	in	r0, 0x3b	; 59
    3bc4:	0f 92       	push	r0
    3bc6:	2f 93       	push	r18
    3bc8:	3f 93       	push	r19
    3bca:	4f 93       	push	r20
    3bcc:	5f 93       	push	r21
    3bce:	6f 93       	push	r22
    3bd0:	7f 93       	push	r23
    3bd2:	8f 93       	push	r24
    3bd4:	9f 93       	push	r25
    3bd6:	af 93       	push	r26
    3bd8:	bf 93       	push	r27
    3bda:	ef 93       	push	r30
    3bdc:	ff 93       	push	r31
    3bde:	e0 91 d7 21 	lds	r30, 0x21D7
    3be2:	f0 91 d8 21 	lds	r31, 0x21D8
    3be6:	30 97       	sbiw	r30, 0x00	; 0
    3be8:	29 f0       	breq	.+10     	; 0x3bf4 <__vector_85+0x3c>
    3bea:	80 91 cd 22 	lds	r24, 0x22CD
    3bee:	90 91 ce 22 	lds	r25, 0x22CE
    3bf2:	19 95       	eicall
    3bf4:	ff 91       	pop	r31
    3bf6:	ef 91       	pop	r30
    3bf8:	bf 91       	pop	r27
    3bfa:	af 91       	pop	r26
    3bfc:	9f 91       	pop	r25
    3bfe:	8f 91       	pop	r24
    3c00:	7f 91       	pop	r23
    3c02:	6f 91       	pop	r22
    3c04:	5f 91       	pop	r21
    3c06:	4f 91       	pop	r20
    3c08:	3f 91       	pop	r19
    3c0a:	2f 91       	pop	r18
    3c0c:	0f 90       	pop	r0
    3c0e:	0b be       	out	0x3b, r0	; 59
    3c10:	0f 90       	pop	r0
    3c12:	0f be       	out	0x3f, r0	; 63
    3c14:	0f 90       	pop	r0
    3c16:	1f 90       	pop	r1
    3c18:	18 95       	reti

00003c1a <__vector_86>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCB_vect)      /* Compare or Capture B Interrupt */
    3c1a:	1f 92       	push	r1
    3c1c:	0f 92       	push	r0
    3c1e:	0f b6       	in	r0, 0x3f	; 63
    3c20:	0f 92       	push	r0
    3c22:	11 24       	eor	r1, r1
    3c24:	0b b6       	in	r0, 0x3b	; 59
    3c26:	0f 92       	push	r0
    3c28:	2f 93       	push	r18
    3c2a:	3f 93       	push	r19
    3c2c:	4f 93       	push	r20
    3c2e:	5f 93       	push	r21
    3c30:	6f 93       	push	r22
    3c32:	7f 93       	push	r23
    3c34:	8f 93       	push	r24
    3c36:	9f 93       	push	r25
    3c38:	af 93       	push	r26
    3c3a:	bf 93       	push	r27
    3c3c:	ef 93       	push	r30
    3c3e:	ff 93       	push	r31
    3c40:	e0 91 d9 21 	lds	r30, 0x21D9
    3c44:	f0 91 da 21 	lds	r31, 0x21DA
    3c48:	30 97       	sbiw	r30, 0x00	; 0
    3c4a:	29 f0       	breq	.+10     	; 0x3c56 <__vector_86+0x3c>
    3c4c:	80 91 cf 22 	lds	r24, 0x22CF
    3c50:	90 91 d0 22 	lds	r25, 0x22D0
    3c54:	19 95       	eicall
    3c56:	ff 91       	pop	r31
    3c58:	ef 91       	pop	r30
    3c5a:	bf 91       	pop	r27
    3c5c:	af 91       	pop	r26
    3c5e:	9f 91       	pop	r25
    3c60:	8f 91       	pop	r24
    3c62:	7f 91       	pop	r23
    3c64:	6f 91       	pop	r22
    3c66:	5f 91       	pop	r21
    3c68:	4f 91       	pop	r20
    3c6a:	3f 91       	pop	r19
    3c6c:	2f 91       	pop	r18
    3c6e:	0f 90       	pop	r0
    3c70:	0b be       	out	0x3b, r0	; 59
    3c72:	0f 90       	pop	r0
    3c74:	0f be       	out	0x3f, r0	; 63
    3c76:	0f 90       	pop	r0
    3c78:	1f 90       	pop	r1
    3c7a:	18 95       	reti

00003c7c <__vector_87>:

/* SPID interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPID_INT_vect)      /* SPI Interrupt */
    3c7c:	1f 92       	push	r1
    3c7e:	0f 92       	push	r0
    3c80:	0f b6       	in	r0, 0x3f	; 63
    3c82:	0f 92       	push	r0
    3c84:	11 24       	eor	r1, r1
    3c86:	0b b6       	in	r0, 0x3b	; 59
    3c88:	0f 92       	push	r0
    3c8a:	2f 93       	push	r18
    3c8c:	3f 93       	push	r19
    3c8e:	4f 93       	push	r20
    3c90:	5f 93       	push	r21
    3c92:	6f 93       	push	r22
    3c94:	7f 93       	push	r23
    3c96:	8f 93       	push	r24
    3c98:	9f 93       	push	r25
    3c9a:	af 93       	push	r26
    3c9c:	bf 93       	push	r27
    3c9e:	ef 93       	push	r30
    3ca0:	ff 93       	push	r31
    3ca2:	e0 91 db 21 	lds	r30, 0x21DB
    3ca6:	f0 91 dc 21 	lds	r31, 0x21DC
    3caa:	30 97       	sbiw	r30, 0x00	; 0
    3cac:	29 f0       	breq	.+10     	; 0x3cb8 <__vector_87+0x3c>
    3cae:	80 91 d1 22 	lds	r24, 0x22D1
    3cb2:	90 91 d2 22 	lds	r25, 0x22D2
    3cb6:	19 95       	eicall
    3cb8:	ff 91       	pop	r31
    3cba:	ef 91       	pop	r30
    3cbc:	bf 91       	pop	r27
    3cbe:	af 91       	pop	r26
    3cc0:	9f 91       	pop	r25
    3cc2:	8f 91       	pop	r24
    3cc4:	7f 91       	pop	r23
    3cc6:	6f 91       	pop	r22
    3cc8:	5f 91       	pop	r21
    3cca:	4f 91       	pop	r20
    3ccc:	3f 91       	pop	r19
    3cce:	2f 91       	pop	r18
    3cd0:	0f 90       	pop	r0
    3cd2:	0b be       	out	0x3b, r0	; 59
    3cd4:	0f 90       	pop	r0
    3cd6:	0f be       	out	0x3f, r0	; 63
    3cd8:	0f 90       	pop	r0
    3cda:	1f 90       	pop	r1
    3cdc:	18 95       	reti

00003cde <__vector_88>:

/* USARTD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_RXC_vect)      /* Reception Complete Interrupt */
    3cde:	1f 92       	push	r1
    3ce0:	0f 92       	push	r0
    3ce2:	0f b6       	in	r0, 0x3f	; 63
    3ce4:	0f 92       	push	r0
    3ce6:	11 24       	eor	r1, r1
    3ce8:	0b b6       	in	r0, 0x3b	; 59
    3cea:	0f 92       	push	r0
    3cec:	2f 93       	push	r18
    3cee:	3f 93       	push	r19
    3cf0:	4f 93       	push	r20
    3cf2:	5f 93       	push	r21
    3cf4:	6f 93       	push	r22
    3cf6:	7f 93       	push	r23
    3cf8:	8f 93       	push	r24
    3cfa:	9f 93       	push	r25
    3cfc:	af 93       	push	r26
    3cfe:	bf 93       	push	r27
    3d00:	ef 93       	push	r30
    3d02:	ff 93       	push	r31
    3d04:	e0 91 dd 21 	lds	r30, 0x21DD
    3d08:	f0 91 de 21 	lds	r31, 0x21DE
    3d0c:	30 97       	sbiw	r30, 0x00	; 0
    3d0e:	29 f0       	breq	.+10     	; 0x3d1a <__vector_88+0x3c>
    3d10:	80 91 d3 22 	lds	r24, 0x22D3
    3d14:	90 91 d4 22 	lds	r25, 0x22D4
    3d18:	19 95       	eicall
    3d1a:	ff 91       	pop	r31
    3d1c:	ef 91       	pop	r30
    3d1e:	bf 91       	pop	r27
    3d20:	af 91       	pop	r26
    3d22:	9f 91       	pop	r25
    3d24:	8f 91       	pop	r24
    3d26:	7f 91       	pop	r23
    3d28:	6f 91       	pop	r22
    3d2a:	5f 91       	pop	r21
    3d2c:	4f 91       	pop	r20
    3d2e:	3f 91       	pop	r19
    3d30:	2f 91       	pop	r18
    3d32:	0f 90       	pop	r0
    3d34:	0b be       	out	0x3b, r0	; 59
    3d36:	0f 90       	pop	r0
    3d38:	0f be       	out	0x3f, r0	; 63
    3d3a:	0f 90       	pop	r0
    3d3c:	1f 90       	pop	r1
    3d3e:	18 95       	reti

00003d40 <__vector_89>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_DRE_vect)      /* Data Register Empty Interrupt */
    3d40:	1f 92       	push	r1
    3d42:	0f 92       	push	r0
    3d44:	0f b6       	in	r0, 0x3f	; 63
    3d46:	0f 92       	push	r0
    3d48:	11 24       	eor	r1, r1
    3d4a:	0b b6       	in	r0, 0x3b	; 59
    3d4c:	0f 92       	push	r0
    3d4e:	2f 93       	push	r18
    3d50:	3f 93       	push	r19
    3d52:	4f 93       	push	r20
    3d54:	5f 93       	push	r21
    3d56:	6f 93       	push	r22
    3d58:	7f 93       	push	r23
    3d5a:	8f 93       	push	r24
    3d5c:	9f 93       	push	r25
    3d5e:	af 93       	push	r26
    3d60:	bf 93       	push	r27
    3d62:	ef 93       	push	r30
    3d64:	ff 93       	push	r31
    3d66:	e0 91 df 21 	lds	r30, 0x21DF
    3d6a:	f0 91 e0 21 	lds	r31, 0x21E0
    3d6e:	30 97       	sbiw	r30, 0x00	; 0
    3d70:	29 f0       	breq	.+10     	; 0x3d7c <__vector_89+0x3c>
    3d72:	80 91 d5 22 	lds	r24, 0x22D5
    3d76:	90 91 d6 22 	lds	r25, 0x22D6
    3d7a:	19 95       	eicall
    3d7c:	ff 91       	pop	r31
    3d7e:	ef 91       	pop	r30
    3d80:	bf 91       	pop	r27
    3d82:	af 91       	pop	r26
    3d84:	9f 91       	pop	r25
    3d86:	8f 91       	pop	r24
    3d88:	7f 91       	pop	r23
    3d8a:	6f 91       	pop	r22
    3d8c:	5f 91       	pop	r21
    3d8e:	4f 91       	pop	r20
    3d90:	3f 91       	pop	r19
    3d92:	2f 91       	pop	r18
    3d94:	0f 90       	pop	r0
    3d96:	0b be       	out	0x3b, r0	; 59
    3d98:	0f 90       	pop	r0
    3d9a:	0f be       	out	0x3f, r0	; 63
    3d9c:	0f 90       	pop	r0
    3d9e:	1f 90       	pop	r1
    3da0:	18 95       	reti

00003da2 <__vector_90>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_TXC_vect)      /* Transmission Complete Interrupt */
    3da2:	1f 92       	push	r1
    3da4:	0f 92       	push	r0
    3da6:	0f b6       	in	r0, 0x3f	; 63
    3da8:	0f 92       	push	r0
    3daa:	11 24       	eor	r1, r1
    3dac:	0b b6       	in	r0, 0x3b	; 59
    3dae:	0f 92       	push	r0
    3db0:	2f 93       	push	r18
    3db2:	3f 93       	push	r19
    3db4:	4f 93       	push	r20
    3db6:	5f 93       	push	r21
    3db8:	6f 93       	push	r22
    3dba:	7f 93       	push	r23
    3dbc:	8f 93       	push	r24
    3dbe:	9f 93       	push	r25
    3dc0:	af 93       	push	r26
    3dc2:	bf 93       	push	r27
    3dc4:	ef 93       	push	r30
    3dc6:	ff 93       	push	r31
    3dc8:	e0 91 e1 21 	lds	r30, 0x21E1
    3dcc:	f0 91 e2 21 	lds	r31, 0x21E2
    3dd0:	30 97       	sbiw	r30, 0x00	; 0
    3dd2:	29 f0       	breq	.+10     	; 0x3dde <__vector_90+0x3c>
    3dd4:	80 91 d7 22 	lds	r24, 0x22D7
    3dd8:	90 91 d8 22 	lds	r25, 0x22D8
    3ddc:	19 95       	eicall
    3dde:	ff 91       	pop	r31
    3de0:	ef 91       	pop	r30
    3de2:	bf 91       	pop	r27
    3de4:	af 91       	pop	r26
    3de6:	9f 91       	pop	r25
    3de8:	8f 91       	pop	r24
    3dea:	7f 91       	pop	r23
    3dec:	6f 91       	pop	r22
    3dee:	5f 91       	pop	r21
    3df0:	4f 91       	pop	r20
    3df2:	3f 91       	pop	r19
    3df4:	2f 91       	pop	r18
    3df6:	0f 90       	pop	r0
    3df8:	0b be       	out	0x3b, r0	; 59
    3dfa:	0f 90       	pop	r0
    3dfc:	0f be       	out	0x3f, r0	; 63
    3dfe:	0f 90       	pop	r0
    3e00:	1f 90       	pop	r1
    3e02:	18 95       	reti

00003e04 <__vector_91>:

/* USARTD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_RXC_vect)      /* Reception Complete Interrupt */
    3e04:	1f 92       	push	r1
    3e06:	0f 92       	push	r0
    3e08:	0f b6       	in	r0, 0x3f	; 63
    3e0a:	0f 92       	push	r0
    3e0c:	11 24       	eor	r1, r1
    3e0e:	0b b6       	in	r0, 0x3b	; 59
    3e10:	0f 92       	push	r0
    3e12:	2f 93       	push	r18
    3e14:	3f 93       	push	r19
    3e16:	4f 93       	push	r20
    3e18:	5f 93       	push	r21
    3e1a:	6f 93       	push	r22
    3e1c:	7f 93       	push	r23
    3e1e:	8f 93       	push	r24
    3e20:	9f 93       	push	r25
    3e22:	af 93       	push	r26
    3e24:	bf 93       	push	r27
    3e26:	ef 93       	push	r30
    3e28:	ff 93       	push	r31
    3e2a:	e0 91 e3 21 	lds	r30, 0x21E3
    3e2e:	f0 91 e4 21 	lds	r31, 0x21E4
    3e32:	30 97       	sbiw	r30, 0x00	; 0
    3e34:	29 f0       	breq	.+10     	; 0x3e40 <__vector_91+0x3c>
    3e36:	80 91 d9 22 	lds	r24, 0x22D9
    3e3a:	90 91 da 22 	lds	r25, 0x22DA
    3e3e:	19 95       	eicall
    3e40:	ff 91       	pop	r31
    3e42:	ef 91       	pop	r30
    3e44:	bf 91       	pop	r27
    3e46:	af 91       	pop	r26
    3e48:	9f 91       	pop	r25
    3e4a:	8f 91       	pop	r24
    3e4c:	7f 91       	pop	r23
    3e4e:	6f 91       	pop	r22
    3e50:	5f 91       	pop	r21
    3e52:	4f 91       	pop	r20
    3e54:	3f 91       	pop	r19
    3e56:	2f 91       	pop	r18
    3e58:	0f 90       	pop	r0
    3e5a:	0b be       	out	0x3b, r0	; 59
    3e5c:	0f 90       	pop	r0
    3e5e:	0f be       	out	0x3f, r0	; 63
    3e60:	0f 90       	pop	r0
    3e62:	1f 90       	pop	r1
    3e64:	18 95       	reti

00003e66 <__vector_92>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_DRE_vect)      /* Data Register Empty Interrupt */
    3e66:	1f 92       	push	r1
    3e68:	0f 92       	push	r0
    3e6a:	0f b6       	in	r0, 0x3f	; 63
    3e6c:	0f 92       	push	r0
    3e6e:	11 24       	eor	r1, r1
    3e70:	0b b6       	in	r0, 0x3b	; 59
    3e72:	0f 92       	push	r0
    3e74:	2f 93       	push	r18
    3e76:	3f 93       	push	r19
    3e78:	4f 93       	push	r20
    3e7a:	5f 93       	push	r21
    3e7c:	6f 93       	push	r22
    3e7e:	7f 93       	push	r23
    3e80:	8f 93       	push	r24
    3e82:	9f 93       	push	r25
    3e84:	af 93       	push	r26
    3e86:	bf 93       	push	r27
    3e88:	ef 93       	push	r30
    3e8a:	ff 93       	push	r31
    3e8c:	e0 91 e5 21 	lds	r30, 0x21E5
    3e90:	f0 91 e6 21 	lds	r31, 0x21E6
    3e94:	30 97       	sbiw	r30, 0x00	; 0
    3e96:	29 f0       	breq	.+10     	; 0x3ea2 <__vector_92+0x3c>
    3e98:	80 91 db 22 	lds	r24, 0x22DB
    3e9c:	90 91 dc 22 	lds	r25, 0x22DC
    3ea0:	19 95       	eicall
    3ea2:	ff 91       	pop	r31
    3ea4:	ef 91       	pop	r30
    3ea6:	bf 91       	pop	r27
    3ea8:	af 91       	pop	r26
    3eaa:	9f 91       	pop	r25
    3eac:	8f 91       	pop	r24
    3eae:	7f 91       	pop	r23
    3eb0:	6f 91       	pop	r22
    3eb2:	5f 91       	pop	r21
    3eb4:	4f 91       	pop	r20
    3eb6:	3f 91       	pop	r19
    3eb8:	2f 91       	pop	r18
    3eba:	0f 90       	pop	r0
    3ebc:	0b be       	out	0x3b, r0	; 59
    3ebe:	0f 90       	pop	r0
    3ec0:	0f be       	out	0x3f, r0	; 63
    3ec2:	0f 90       	pop	r0
    3ec4:	1f 90       	pop	r1
    3ec6:	18 95       	reti

00003ec8 <__vector_93>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_TXC_vect)      /* Transmission Complete Interrupt */
    3ec8:	1f 92       	push	r1
    3eca:	0f 92       	push	r0
    3ecc:	0f b6       	in	r0, 0x3f	; 63
    3ece:	0f 92       	push	r0
    3ed0:	11 24       	eor	r1, r1
    3ed2:	0b b6       	in	r0, 0x3b	; 59
    3ed4:	0f 92       	push	r0
    3ed6:	2f 93       	push	r18
    3ed8:	3f 93       	push	r19
    3eda:	4f 93       	push	r20
    3edc:	5f 93       	push	r21
    3ede:	6f 93       	push	r22
    3ee0:	7f 93       	push	r23
    3ee2:	8f 93       	push	r24
    3ee4:	9f 93       	push	r25
    3ee6:	af 93       	push	r26
    3ee8:	bf 93       	push	r27
    3eea:	ef 93       	push	r30
    3eec:	ff 93       	push	r31
    3eee:	e0 91 e7 21 	lds	r30, 0x21E7
    3ef2:	f0 91 e8 21 	lds	r31, 0x21E8
    3ef6:	30 97       	sbiw	r30, 0x00	; 0
    3ef8:	29 f0       	breq	.+10     	; 0x3f04 <__vector_93+0x3c>
    3efa:	80 91 dd 22 	lds	r24, 0x22DD
    3efe:	90 91 de 22 	lds	r25, 0x22DE
    3f02:	19 95       	eicall
    3f04:	ff 91       	pop	r31
    3f06:	ef 91       	pop	r30
    3f08:	bf 91       	pop	r27
    3f0a:	af 91       	pop	r26
    3f0c:	9f 91       	pop	r25
    3f0e:	8f 91       	pop	r24
    3f10:	7f 91       	pop	r23
    3f12:	6f 91       	pop	r22
    3f14:	5f 91       	pop	r21
    3f16:	4f 91       	pop	r20
    3f18:	3f 91       	pop	r19
    3f1a:	2f 91       	pop	r18
    3f1c:	0f 90       	pop	r0
    3f1e:	0b be       	out	0x3b, r0	; 59
    3f20:	0f 90       	pop	r0
    3f22:	0f be       	out	0x3f, r0	; 63
    3f24:	0f 90       	pop	r0
    3f26:	1f 90       	pop	r1
    3f28:	18 95       	reti

00003f2a <__vector_104>:

/* PORTF interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT0_vect)      /* External Interrupt 0 */
    3f2a:	1f 92       	push	r1
    3f2c:	0f 92       	push	r0
    3f2e:	0f b6       	in	r0, 0x3f	; 63
    3f30:	0f 92       	push	r0
    3f32:	11 24       	eor	r1, r1
    3f34:	0b b6       	in	r0, 0x3b	; 59
    3f36:	0f 92       	push	r0
    3f38:	2f 93       	push	r18
    3f3a:	3f 93       	push	r19
    3f3c:	4f 93       	push	r20
    3f3e:	5f 93       	push	r21
    3f40:	6f 93       	push	r22
    3f42:	7f 93       	push	r23
    3f44:	8f 93       	push	r24
    3f46:	9f 93       	push	r25
    3f48:	af 93       	push	r26
    3f4a:	bf 93       	push	r27
    3f4c:	ef 93       	push	r30
    3f4e:	ff 93       	push	r31
    3f50:	e0 91 fd 21 	lds	r30, 0x21FD
    3f54:	f0 91 fe 21 	lds	r31, 0x21FE
    3f58:	30 97       	sbiw	r30, 0x00	; 0
    3f5a:	29 f0       	breq	.+10     	; 0x3f66 <__vector_104+0x3c>
    3f5c:	80 91 f3 22 	lds	r24, 0x22F3
    3f60:	90 91 f4 22 	lds	r25, 0x22F4
    3f64:	19 95       	eicall
    3f66:	ff 91       	pop	r31
    3f68:	ef 91       	pop	r30
    3f6a:	bf 91       	pop	r27
    3f6c:	af 91       	pop	r26
    3f6e:	9f 91       	pop	r25
    3f70:	8f 91       	pop	r24
    3f72:	7f 91       	pop	r23
    3f74:	6f 91       	pop	r22
    3f76:	5f 91       	pop	r21
    3f78:	4f 91       	pop	r20
    3f7a:	3f 91       	pop	r19
    3f7c:	2f 91       	pop	r18
    3f7e:	0f 90       	pop	r0
    3f80:	0b be       	out	0x3b, r0	; 59
    3f82:	0f 90       	pop	r0
    3f84:	0f be       	out	0x3f, r0	; 63
    3f86:	0f 90       	pop	r0
    3f88:	1f 90       	pop	r1
    3f8a:	18 95       	reti

00003f8c <__vector_105>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT1_vect)      /* External Interrupt 1 */
    3f8c:	1f 92       	push	r1
    3f8e:	0f 92       	push	r0
    3f90:	0f b6       	in	r0, 0x3f	; 63
    3f92:	0f 92       	push	r0
    3f94:	11 24       	eor	r1, r1
    3f96:	0b b6       	in	r0, 0x3b	; 59
    3f98:	0f 92       	push	r0
    3f9a:	2f 93       	push	r18
    3f9c:	3f 93       	push	r19
    3f9e:	4f 93       	push	r20
    3fa0:	5f 93       	push	r21
    3fa2:	6f 93       	push	r22
    3fa4:	7f 93       	push	r23
    3fa6:	8f 93       	push	r24
    3fa8:	9f 93       	push	r25
    3faa:	af 93       	push	r26
    3fac:	bf 93       	push	r27
    3fae:	ef 93       	push	r30
    3fb0:	ff 93       	push	r31
    3fb2:	e0 91 ff 21 	lds	r30, 0x21FF
    3fb6:	f0 91 00 22 	lds	r31, 0x2200
    3fba:	30 97       	sbiw	r30, 0x00	; 0
    3fbc:	29 f0       	breq	.+10     	; 0x3fc8 <__vector_105+0x3c>
    3fbe:	80 91 f5 22 	lds	r24, 0x22F5
    3fc2:	90 91 f6 22 	lds	r25, 0x22F6
    3fc6:	19 95       	eicall
    3fc8:	ff 91       	pop	r31
    3fca:	ef 91       	pop	r30
    3fcc:	bf 91       	pop	r27
    3fce:	af 91       	pop	r26
    3fd0:	9f 91       	pop	r25
    3fd2:	8f 91       	pop	r24
    3fd4:	7f 91       	pop	r23
    3fd6:	6f 91       	pop	r22
    3fd8:	5f 91       	pop	r21
    3fda:	4f 91       	pop	r20
    3fdc:	3f 91       	pop	r19
    3fde:	2f 91       	pop	r18
    3fe0:	0f 90       	pop	r0
    3fe2:	0b be       	out	0x3b, r0	; 59
    3fe4:	0f 90       	pop	r0
    3fe6:	0f be       	out	0x3f, r0	; 63
    3fe8:	0f 90       	pop	r0
    3fea:	1f 90       	pop	r1
    3fec:	18 95       	reti

00003fee <__vector_108>:

/* TCF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_OVF_vect)      /* Overflow Interrupt */
    3fee:	1f 92       	push	r1
    3ff0:	0f 92       	push	r0
    3ff2:	0f b6       	in	r0, 0x3f	; 63
    3ff4:	0f 92       	push	r0
    3ff6:	11 24       	eor	r1, r1
    3ff8:	0b b6       	in	r0, 0x3b	; 59
    3ffa:	0f 92       	push	r0
    3ffc:	2f 93       	push	r18
    3ffe:	3f 93       	push	r19
    4000:	4f 93       	push	r20
    4002:	5f 93       	push	r21
    4004:	6f 93       	push	r22
    4006:	7f 93       	push	r23
    4008:	8f 93       	push	r24
    400a:	9f 93       	push	r25
    400c:	af 93       	push	r26
    400e:	bf 93       	push	r27
    4010:	ef 93       	push	r30
    4012:	ff 93       	push	r31
    4014:	e0 91 05 22 	lds	r30, 0x2205
    4018:	f0 91 06 22 	lds	r31, 0x2206
    401c:	30 97       	sbiw	r30, 0x00	; 0
    401e:	29 f0       	breq	.+10     	; 0x402a <__stack+0x2b>
    4020:	80 91 fb 22 	lds	r24, 0x22FB
    4024:	90 91 fc 22 	lds	r25, 0x22FC
    4028:	19 95       	eicall
    402a:	ff 91       	pop	r31
    402c:	ef 91       	pop	r30
    402e:	bf 91       	pop	r27
    4030:	af 91       	pop	r26
    4032:	9f 91       	pop	r25
    4034:	8f 91       	pop	r24
    4036:	7f 91       	pop	r23
    4038:	6f 91       	pop	r22
    403a:	5f 91       	pop	r21
    403c:	4f 91       	pop	r20
    403e:	3f 91       	pop	r19
    4040:	2f 91       	pop	r18
    4042:	0f 90       	pop	r0
    4044:	0b be       	out	0x3b, r0	; 59
    4046:	0f 90       	pop	r0
    4048:	0f be       	out	0x3f, r0	; 63
    404a:	0f 90       	pop	r0
    404c:	1f 90       	pop	r1
    404e:	18 95       	reti

00004050 <__vector_109>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_ERR_vect)      /* Error Interrupt */
    4050:	1f 92       	push	r1
    4052:	0f 92       	push	r0
    4054:	0f b6       	in	r0, 0x3f	; 63
    4056:	0f 92       	push	r0
    4058:	11 24       	eor	r1, r1
    405a:	0b b6       	in	r0, 0x3b	; 59
    405c:	0f 92       	push	r0
    405e:	2f 93       	push	r18
    4060:	3f 93       	push	r19
    4062:	4f 93       	push	r20
    4064:	5f 93       	push	r21
    4066:	6f 93       	push	r22
    4068:	7f 93       	push	r23
    406a:	8f 93       	push	r24
    406c:	9f 93       	push	r25
    406e:	af 93       	push	r26
    4070:	bf 93       	push	r27
    4072:	ef 93       	push	r30
    4074:	ff 93       	push	r31
    4076:	e0 91 07 22 	lds	r30, 0x2207
    407a:	f0 91 08 22 	lds	r31, 0x2208
    407e:	30 97       	sbiw	r30, 0x00	; 0
    4080:	29 f0       	breq	.+10     	; 0x408c <__vector_109+0x3c>
    4082:	80 91 fd 22 	lds	r24, 0x22FD
    4086:	90 91 fe 22 	lds	r25, 0x22FE
    408a:	19 95       	eicall
    408c:	ff 91       	pop	r31
    408e:	ef 91       	pop	r30
    4090:	bf 91       	pop	r27
    4092:	af 91       	pop	r26
    4094:	9f 91       	pop	r25
    4096:	8f 91       	pop	r24
    4098:	7f 91       	pop	r23
    409a:	6f 91       	pop	r22
    409c:	5f 91       	pop	r21
    409e:	4f 91       	pop	r20
    40a0:	3f 91       	pop	r19
    40a2:	2f 91       	pop	r18
    40a4:	0f 90       	pop	r0
    40a6:	0b be       	out	0x3b, r0	; 59
    40a8:	0f 90       	pop	r0
    40aa:	0f be       	out	0x3f, r0	; 63
    40ac:	0f 90       	pop	r0
    40ae:	1f 90       	pop	r1
    40b0:	18 95       	reti

000040b2 <__vector_110>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCA_vect)      /* Compare or Capture A Interrupt */
    40b2:	1f 92       	push	r1
    40b4:	0f 92       	push	r0
    40b6:	0f b6       	in	r0, 0x3f	; 63
    40b8:	0f 92       	push	r0
    40ba:	11 24       	eor	r1, r1
    40bc:	0b b6       	in	r0, 0x3b	; 59
    40be:	0f 92       	push	r0
    40c0:	2f 93       	push	r18
    40c2:	3f 93       	push	r19
    40c4:	4f 93       	push	r20
    40c6:	5f 93       	push	r21
    40c8:	6f 93       	push	r22
    40ca:	7f 93       	push	r23
    40cc:	8f 93       	push	r24
    40ce:	9f 93       	push	r25
    40d0:	af 93       	push	r26
    40d2:	bf 93       	push	r27
    40d4:	ef 93       	push	r30
    40d6:	ff 93       	push	r31
    40d8:	e0 91 09 22 	lds	r30, 0x2209
    40dc:	f0 91 0a 22 	lds	r31, 0x220A
    40e0:	30 97       	sbiw	r30, 0x00	; 0
    40e2:	29 f0       	breq	.+10     	; 0x40ee <__vector_110+0x3c>
    40e4:	80 91 ff 22 	lds	r24, 0x22FF
    40e8:	90 91 00 23 	lds	r25, 0x2300
    40ec:	19 95       	eicall
    40ee:	ff 91       	pop	r31
    40f0:	ef 91       	pop	r30
    40f2:	bf 91       	pop	r27
    40f4:	af 91       	pop	r26
    40f6:	9f 91       	pop	r25
    40f8:	8f 91       	pop	r24
    40fa:	7f 91       	pop	r23
    40fc:	6f 91       	pop	r22
    40fe:	5f 91       	pop	r21
    4100:	4f 91       	pop	r20
    4102:	3f 91       	pop	r19
    4104:	2f 91       	pop	r18
    4106:	0f 90       	pop	r0
    4108:	0b be       	out	0x3b, r0	; 59
    410a:	0f 90       	pop	r0
    410c:	0f be       	out	0x3f, r0	; 63
    410e:	0f 90       	pop	r0
    4110:	1f 90       	pop	r1
    4112:	18 95       	reti

00004114 <__vector_111>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCB_vect)      /* Compare or Capture B Interrupt */
    4114:	1f 92       	push	r1
    4116:	0f 92       	push	r0
    4118:	0f b6       	in	r0, 0x3f	; 63
    411a:	0f 92       	push	r0
    411c:	11 24       	eor	r1, r1
    411e:	0b b6       	in	r0, 0x3b	; 59
    4120:	0f 92       	push	r0
    4122:	2f 93       	push	r18
    4124:	3f 93       	push	r19
    4126:	4f 93       	push	r20
    4128:	5f 93       	push	r21
    412a:	6f 93       	push	r22
    412c:	7f 93       	push	r23
    412e:	8f 93       	push	r24
    4130:	9f 93       	push	r25
    4132:	af 93       	push	r26
    4134:	bf 93       	push	r27
    4136:	ef 93       	push	r30
    4138:	ff 93       	push	r31
    413a:	e0 91 0b 22 	lds	r30, 0x220B
    413e:	f0 91 0c 22 	lds	r31, 0x220C
    4142:	30 97       	sbiw	r30, 0x00	; 0
    4144:	29 f0       	breq	.+10     	; 0x4150 <__vector_111+0x3c>
    4146:	80 91 01 23 	lds	r24, 0x2301
    414a:	90 91 02 23 	lds	r25, 0x2302
    414e:	19 95       	eicall
    4150:	ff 91       	pop	r31
    4152:	ef 91       	pop	r30
    4154:	bf 91       	pop	r27
    4156:	af 91       	pop	r26
    4158:	9f 91       	pop	r25
    415a:	8f 91       	pop	r24
    415c:	7f 91       	pop	r23
    415e:	6f 91       	pop	r22
    4160:	5f 91       	pop	r21
    4162:	4f 91       	pop	r20
    4164:	3f 91       	pop	r19
    4166:	2f 91       	pop	r18
    4168:	0f 90       	pop	r0
    416a:	0b be       	out	0x3b, r0	; 59
    416c:	0f 90       	pop	r0
    416e:	0f be       	out	0x3f, r0	; 63
    4170:	0f 90       	pop	r0
    4172:	1f 90       	pop	r1
    4174:	18 95       	reti

00004176 <__vector_112>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCC_vect)      /* Compare or Capture C Interrupt */
    4176:	1f 92       	push	r1
    4178:	0f 92       	push	r0
    417a:	0f b6       	in	r0, 0x3f	; 63
    417c:	0f 92       	push	r0
    417e:	11 24       	eor	r1, r1
    4180:	0b b6       	in	r0, 0x3b	; 59
    4182:	0f 92       	push	r0
    4184:	2f 93       	push	r18
    4186:	3f 93       	push	r19
    4188:	4f 93       	push	r20
    418a:	5f 93       	push	r21
    418c:	6f 93       	push	r22
    418e:	7f 93       	push	r23
    4190:	8f 93       	push	r24
    4192:	9f 93       	push	r25
    4194:	af 93       	push	r26
    4196:	bf 93       	push	r27
    4198:	ef 93       	push	r30
    419a:	ff 93       	push	r31
    419c:	e0 91 0d 22 	lds	r30, 0x220D
    41a0:	f0 91 0e 22 	lds	r31, 0x220E
    41a4:	30 97       	sbiw	r30, 0x00	; 0
    41a6:	29 f0       	breq	.+10     	; 0x41b2 <__vector_112+0x3c>
    41a8:	80 91 03 23 	lds	r24, 0x2303
    41ac:	90 91 04 23 	lds	r25, 0x2304
    41b0:	19 95       	eicall
    41b2:	ff 91       	pop	r31
    41b4:	ef 91       	pop	r30
    41b6:	bf 91       	pop	r27
    41b8:	af 91       	pop	r26
    41ba:	9f 91       	pop	r25
    41bc:	8f 91       	pop	r24
    41be:	7f 91       	pop	r23
    41c0:	6f 91       	pop	r22
    41c2:	5f 91       	pop	r21
    41c4:	4f 91       	pop	r20
    41c6:	3f 91       	pop	r19
    41c8:	2f 91       	pop	r18
    41ca:	0f 90       	pop	r0
    41cc:	0b be       	out	0x3b, r0	; 59
    41ce:	0f 90       	pop	r0
    41d0:	0f be       	out	0x3f, r0	; 63
    41d2:	0f 90       	pop	r0
    41d4:	1f 90       	pop	r1
    41d6:	18 95       	reti

000041d8 <__vector_113>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCD_vect)      /* Compare or Capture D Interrupt */
    41d8:	1f 92       	push	r1
    41da:	0f 92       	push	r0
    41dc:	0f b6       	in	r0, 0x3f	; 63
    41de:	0f 92       	push	r0
    41e0:	11 24       	eor	r1, r1
    41e2:	0b b6       	in	r0, 0x3b	; 59
    41e4:	0f 92       	push	r0
    41e6:	2f 93       	push	r18
    41e8:	3f 93       	push	r19
    41ea:	4f 93       	push	r20
    41ec:	5f 93       	push	r21
    41ee:	6f 93       	push	r22
    41f0:	7f 93       	push	r23
    41f2:	8f 93       	push	r24
    41f4:	9f 93       	push	r25
    41f6:	af 93       	push	r26
    41f8:	bf 93       	push	r27
    41fa:	ef 93       	push	r30
    41fc:	ff 93       	push	r31
    41fe:	e0 91 0f 22 	lds	r30, 0x220F
    4202:	f0 91 10 22 	lds	r31, 0x2210
    4206:	30 97       	sbiw	r30, 0x00	; 0
    4208:	29 f0       	breq	.+10     	; 0x4214 <__vector_113+0x3c>
    420a:	80 91 05 23 	lds	r24, 0x2305
    420e:	90 91 06 23 	lds	r25, 0x2306
    4212:	19 95       	eicall
    4214:	ff 91       	pop	r31
    4216:	ef 91       	pop	r30
    4218:	bf 91       	pop	r27
    421a:	af 91       	pop	r26
    421c:	9f 91       	pop	r25
    421e:	8f 91       	pop	r24
    4220:	7f 91       	pop	r23
    4222:	6f 91       	pop	r22
    4224:	5f 91       	pop	r21
    4226:	4f 91       	pop	r20
    4228:	3f 91       	pop	r19
    422a:	2f 91       	pop	r18
    422c:	0f 90       	pop	r0
    422e:	0b be       	out	0x3b, r0	; 59
    4230:	0f 90       	pop	r0
    4232:	0f be       	out	0x3f, r0	; 63
    4234:	0f 90       	pop	r0
    4236:	1f 90       	pop	r1
    4238:	18 95       	reti

0000423a <__vector_119>:

/* USARTF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_RXC_vect)      /* Reception Complete Interrupt */
    423a:	1f 92       	push	r1
    423c:	0f 92       	push	r0
    423e:	0f b6       	in	r0, 0x3f	; 63
    4240:	0f 92       	push	r0
    4242:	11 24       	eor	r1, r1
    4244:	0b b6       	in	r0, 0x3b	; 59
    4246:	0f 92       	push	r0
    4248:	2f 93       	push	r18
    424a:	3f 93       	push	r19
    424c:	4f 93       	push	r20
    424e:	5f 93       	push	r21
    4250:	6f 93       	push	r22
    4252:	7f 93       	push	r23
    4254:	8f 93       	push	r24
    4256:	9f 93       	push	r25
    4258:	af 93       	push	r26
    425a:	bf 93       	push	r27
    425c:	ef 93       	push	r30
    425e:	ff 93       	push	r31
    4260:	e0 91 1b 22 	lds	r30, 0x221B
    4264:	f0 91 1c 22 	lds	r31, 0x221C
    4268:	30 97       	sbiw	r30, 0x00	; 0
    426a:	29 f0       	breq	.+10     	; 0x4276 <__vector_119+0x3c>
    426c:	80 91 11 23 	lds	r24, 0x2311
    4270:	90 91 12 23 	lds	r25, 0x2312
    4274:	19 95       	eicall
    4276:	ff 91       	pop	r31
    4278:	ef 91       	pop	r30
    427a:	bf 91       	pop	r27
    427c:	af 91       	pop	r26
    427e:	9f 91       	pop	r25
    4280:	8f 91       	pop	r24
    4282:	7f 91       	pop	r23
    4284:	6f 91       	pop	r22
    4286:	5f 91       	pop	r21
    4288:	4f 91       	pop	r20
    428a:	3f 91       	pop	r19
    428c:	2f 91       	pop	r18
    428e:	0f 90       	pop	r0
    4290:	0b be       	out	0x3b, r0	; 59
    4292:	0f 90       	pop	r0
    4294:	0f be       	out	0x3f, r0	; 63
    4296:	0f 90       	pop	r0
    4298:	1f 90       	pop	r1
    429a:	18 95       	reti

0000429c <__vector_120>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_DRE_vect)      /* Data Register Empty Interrupt */
    429c:	1f 92       	push	r1
    429e:	0f 92       	push	r0
    42a0:	0f b6       	in	r0, 0x3f	; 63
    42a2:	0f 92       	push	r0
    42a4:	11 24       	eor	r1, r1
    42a6:	0b b6       	in	r0, 0x3b	; 59
    42a8:	0f 92       	push	r0
    42aa:	2f 93       	push	r18
    42ac:	3f 93       	push	r19
    42ae:	4f 93       	push	r20
    42b0:	5f 93       	push	r21
    42b2:	6f 93       	push	r22
    42b4:	7f 93       	push	r23
    42b6:	8f 93       	push	r24
    42b8:	9f 93       	push	r25
    42ba:	af 93       	push	r26
    42bc:	bf 93       	push	r27
    42be:	ef 93       	push	r30
    42c0:	ff 93       	push	r31
    42c2:	e0 91 1d 22 	lds	r30, 0x221D
    42c6:	f0 91 1e 22 	lds	r31, 0x221E
    42ca:	30 97       	sbiw	r30, 0x00	; 0
    42cc:	29 f0       	breq	.+10     	; 0x42d8 <__vector_120+0x3c>
    42ce:	80 91 13 23 	lds	r24, 0x2313
    42d2:	90 91 14 23 	lds	r25, 0x2314
    42d6:	19 95       	eicall
    42d8:	ff 91       	pop	r31
    42da:	ef 91       	pop	r30
    42dc:	bf 91       	pop	r27
    42de:	af 91       	pop	r26
    42e0:	9f 91       	pop	r25
    42e2:	8f 91       	pop	r24
    42e4:	7f 91       	pop	r23
    42e6:	6f 91       	pop	r22
    42e8:	5f 91       	pop	r21
    42ea:	4f 91       	pop	r20
    42ec:	3f 91       	pop	r19
    42ee:	2f 91       	pop	r18
    42f0:	0f 90       	pop	r0
    42f2:	0b be       	out	0x3b, r0	; 59
    42f4:	0f 90       	pop	r0
    42f6:	0f be       	out	0x3f, r0	; 63
    42f8:	0f 90       	pop	r0
    42fa:	1f 90       	pop	r1
    42fc:	18 95       	reti

000042fe <__vector_121>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_TXC_vect)      /* Transmission Complete Interrupt */
    42fe:	1f 92       	push	r1
    4300:	0f 92       	push	r0
    4302:	0f b6       	in	r0, 0x3f	; 63
    4304:	0f 92       	push	r0
    4306:	11 24       	eor	r1, r1
    4308:	0b b6       	in	r0, 0x3b	; 59
    430a:	0f 92       	push	r0
    430c:	2f 93       	push	r18
    430e:	3f 93       	push	r19
    4310:	4f 93       	push	r20
    4312:	5f 93       	push	r21
    4314:	6f 93       	push	r22
    4316:	7f 93       	push	r23
    4318:	8f 93       	push	r24
    431a:	9f 93       	push	r25
    431c:	af 93       	push	r26
    431e:	bf 93       	push	r27
    4320:	ef 93       	push	r30
    4322:	ff 93       	push	r31
    4324:	e0 91 1f 22 	lds	r30, 0x221F
    4328:	f0 91 20 22 	lds	r31, 0x2220
    432c:	30 97       	sbiw	r30, 0x00	; 0
    432e:	29 f0       	breq	.+10     	; 0x433a <__vector_121+0x3c>
    4330:	80 91 15 23 	lds	r24, 0x2315
    4334:	90 91 16 23 	lds	r25, 0x2316
    4338:	19 95       	eicall
    433a:	ff 91       	pop	r31
    433c:	ef 91       	pop	r30
    433e:	bf 91       	pop	r27
    4340:	af 91       	pop	r26
    4342:	9f 91       	pop	r25
    4344:	8f 91       	pop	r24
    4346:	7f 91       	pop	r23
    4348:	6f 91       	pop	r22
    434a:	5f 91       	pop	r21
    434c:	4f 91       	pop	r20
    434e:	3f 91       	pop	r19
    4350:	2f 91       	pop	r18
    4352:	0f 90       	pop	r0
    4354:	0b be       	out	0x3b, r0	; 59
    4356:	0f 90       	pop	r0
    4358:	0f be       	out	0x3f, r0	; 63
    435a:	0f 90       	pop	r0
    435c:	1f 90       	pop	r1
    435e:	18 95       	reti

00004360 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual()
{	
	while(1)
	{
		laserBoard.BeepClassError();
    4360:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN11CLaserBoard14BeepClassErrorEv>
CSoundPlayer player;
CLaserControlApp App;
CDGUSDatabase Database;
CTimerF PWMTimer;

extern "C" void __cxa_pure_virtual()
    4364:	fd cf       	rjmp	.-6      	; 0x4360 <__cxa_pure_virtual>

00004366 <_GLOBAL__sub_I_dacSPI>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    4366:	81 eb       	ldi	r24, 0xB1	; 177
    4368:	93 e2       	ldi	r25, 0x23	; 35
    436a:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <_ZN4CSPIC1Ev>
CDGUSUSART usart;
    436e:	8f ea       	ldi	r24, 0xAF	; 175
    4370:	93 e2       	ldi	r25, 0x23	; 35
    4372:	0e 94 c5 03 	call	0x78a	; 0x78a <_ZN10CDGUSUSARTC1Ev>
CMBSender sender;
    4376:	86 e9       	ldi	r24, 0x96	; 150
    4378:	93 e2       	ldi	r25, 0x23	; 35
    437a:	0e 94 bd 23 	call	0x477a	; 0x477a <_ZN9CMBSenderC1Ev>
CLaserBoard laserBoard;
    437e:	85 e9       	ldi	r24, 0x95	; 149
    4380:	93 e2       	ldi	r25, 0x23	; 35
    4382:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <_ZN11CLaserBoardC1Ev>
CSoundPlayer player;
    4386:	84 e9       	ldi	r24, 0x94	; 148
    4388:	93 e2       	ldi	r25, 0x23	; 35
    438a:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <_ZN12CSoundPlayerC1Ev>
CLaserControlApp App;
    438e:	8a e6       	ldi	r24, 0x6A	; 106
    4390:	93 e2       	ldi	r25, 0x23	; 35
    4392:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN16CLaserControlAppC1Ev>
CDGUSDatabase Database;
    4396:	82 e6       	ldi	r24, 0x62	; 98
    4398:	93 e2       	ldi	r25, 0x23	; 35
    439a:	0e 94 43 02 	call	0x486	; 0x486 <_ZN13CDGUSDatabaseC1Ev>
CTimerF PWMTimer;
    439e:	8f e5       	ldi	r24, 0x5F	; 95
    43a0:	93 e2       	ldi	r25, 0x23	; 35
    43a2:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <_ZN7CTimerFC1Ev>
    43a6:	08 95       	ret

000043a8 <_GLOBAL__sub_D_dacSPI>:
    43a8:	8f e5       	ldi	r24, 0x5F	; 95
    43aa:	93 e2       	ldi	r25, 0x23	; 35
    43ac:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <_ZN7CTimerFD1Ev>
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;
CDGUSDatabase Database;
    43b0:	82 e6       	ldi	r24, 0x62	; 98
    43b2:	93 e2       	ldi	r25, 0x23	; 35
    43b4:	0e 94 44 02 	call	0x488	; 0x488 <_ZN13CDGUSDatabaseD1Ev>
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;
    43b8:	8a e6       	ldi	r24, 0x6A	; 106
    43ba:	93 e2       	ldi	r25, 0x23	; 35
    43bc:	0e 94 ad 05 	call	0xb5a	; 0xb5a <_ZN16CLaserControlAppD1Ev>
/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
    43c0:	84 e9       	ldi	r24, 0x94	; 148
    43c2:	93 e2       	ldi	r25, 0x23	; 35
    43c4:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <_ZN12CSoundPlayerD1Ev>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
    43c8:	85 e9       	ldi	r24, 0x95	; 149
    43ca:	93 e2       	ldi	r25, 0x23	; 35
    43cc:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_ZN11CLaserBoardD1Ev>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
    43d0:	86 e9       	ldi	r24, 0x96	; 150
    43d2:	93 e2       	ldi	r25, 0x23	; 35
    43d4:	0e 94 12 24 	call	0x4824	; 0x4824 <_ZN9CMBSenderD1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
    43d8:	8f ea       	ldi	r24, 0xAF	; 175
    43da:	93 e2       	ldi	r25, 0x23	; 35
    43dc:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <_ZN10CDGUSUSARTD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    43e0:	81 eb       	ldi	r24, 0xB1	; 177
    43e2:	93 e2       	ldi	r25, 0x23	; 35
    43e4:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_ZN4CSPID1Ev>
    43e8:	08 95       	ret

000043ea <_Z16SystemInitializev>:
		laserBoard.BeepClassError();
	}
}

void SystemInitialize()
{
    43ea:	ef 92       	push	r14
    43ec:	0f 93       	push	r16
    43ee:	1f 93       	push	r17
	cli();	/* Disable global interrupts */
    43f0:	f8 94       	cli
	
	// Initialize modules
	laserBoard.InitializeIO();
    43f2:	85 e9       	ldi	r24, 0x95	; 149
    43f4:	93 e2       	ldi	r25, 0x23	; 35
    43f6:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_ZN11CLaserBoard12InitializeIOEv>
	player.Initialize();
    43fa:	84 e9       	ldi	r24, 0x94	; 148
    43fc:	93 e2       	ldi	r25, 0x23	; 35
    43fe:	0e 94 9f 0b 	call	0x173e	; 0x173e <_ZN12CSoundPlayer10InitializeEv>
	dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    4402:	0f 2e       	mov	r0, r31
    4404:	f3 e0       	ldi	r31, 0x03	; 3
    4406:	ef 2e       	mov	r14, r31
    4408:	f0 2d       	mov	r31, r0
    440a:	00 e0       	ldi	r16, 0x00	; 0
    440c:	23 e0       	ldi	r18, 0x03	; 3
    440e:	40 e0       	ldi	r20, 0x00	; 0
    4410:	61 e0       	ldi	r22, 0x01	; 1
    4412:	81 eb       	ldi	r24, 0xB1	; 177
    4414:	93 e2       	ldi	r25, 0x23	; 35
    4416:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
	usart.Initialize(BAUD_115200_ERM0P1, PARITY_DISABLE, STOPBITS_1BIT, true);
    441a:	01 e0       	ldi	r16, 0x01	; 1
    441c:	20 e0       	ldi	r18, 0x00	; 0
    441e:	40 e0       	ldi	r20, 0x00	; 0
    4420:	6d e0       	ldi	r22, 0x0D	; 13
    4422:	8f ea       	ldi	r24, 0xAF	; 175
    4424:	93 e2       	ldi	r25, 0x23	; 35
    4426:	0e 94 49 03 	call	0x692	; 0x692 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
	sender.Initialize(&usart, &App, 256, 256);
    442a:	00 e0       	ldi	r16, 0x00	; 0
    442c:	11 e0       	ldi	r17, 0x01	; 1
    442e:	20 e0       	ldi	r18, 0x00	; 0
    4430:	31 e0       	ldi	r19, 0x01	; 1
    4432:	4a e6       	ldi	r20, 0x6A	; 106
    4434:	53 e2       	ldi	r21, 0x23	; 35
    4436:	6f ea       	ldi	r22, 0xAF	; 175
    4438:	73 e2       	ldi	r23, 0x23	; 35
    443a:	86 e9       	ldi	r24, 0x96	; 150
    443c:	93 e2       	ldi	r25, 0x23	; 35
    443e:	0e 94 c3 23 	call	0x4786	; 0x4786 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj>
	App.Initialize(&sender);
    4442:	66 e9       	ldi	r22, 0x96	; 150
    4444:	73 e2       	ldi	r23, 0x23	; 35
    4446:	8a e6       	ldi	r24, 0x6A	; 106
    4448:	93 e2       	ldi	r25, 0x23	; 35
    444a:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_ZN16CLaserControlApp10InitializeEP9CMBSender>
	laserBoard.InitializeClock();
    444e:	85 e9       	ldi	r24, 0x95	; 149
    4450:	93 e2       	ldi	r25, 0x23	; 35
    4452:	0e 94 13 04 	call	0x826	; 0x826 <_ZN11CLaserBoard15InitializeClockEv>
	Database.Initialize(&sender, VARIABLE_ADDR_DATABASE);
    4456:	40 e0       	ldi	r20, 0x00	; 0
    4458:	51 e0       	ldi	r21, 0x01	; 1
    445a:	66 e9       	ldi	r22, 0x96	; 150
    445c:	73 e2       	ldi	r23, 0x23	; 35
    445e:	82 e6       	ldi	r24, 0x62	; 98
    4460:	93 e2       	ldi	r25, 0x23	; 35
    4462:	0e 94 45 02 	call	0x48a	; 0x48a <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>
	laserTimer.SetOVFCallback(OnLaserTimerStatic, this, TC_OVFINTLVL_LO_gc);
	laserTimer.EnableChannel(TIMER_CHANNEL_A); // Enable Laser TTL Gate
	laserTimer.EnableChannel(TIMER_CHANNEL_B); // Enable Laser TTL Gate
	laserTimer.ChannelSet(TIMER_CHANNEL_A);
	laserTimer.ChannelSet(TIMER_CHANNEL_B);*/
	PWMTimer.Initialize(WGM_SingleSlopePWM, CS_NoPrescale);
    4466:	41 e0       	ldi	r20, 0x01	; 1
    4468:	63 e0       	ldi	r22, 0x03	; 3
    446a:	8f e5       	ldi	r24, 0x5F	; 95
    446c:	93 e2       	ldi	r25, 0x23	; 35
    446e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <_ZN7CTimerF10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	//PWMTimer.SetPeriod(32768);
	PWMTimer.EnableChannel(TIMER_CHANNEL_C);
    4472:	60 e4       	ldi	r22, 0x40	; 64
    4474:	8f e5       	ldi	r24, 0x5F	; 95
    4476:	93 e2       	ldi	r25, 0x23	; 35
    4478:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <_ZN7CTimerF13EnableChannelE19TIMER_CHANNELS_ENUM>
	PWMTimer.ChannelSet(TIMER_CHANNEL_C);
    447c:	60 e4       	ldi	r22, 0x40	; 64
    447e:	8f e5       	ldi	r24, 0x5F	; 95
    4480:	93 e2       	ldi	r25, 0x23	; 35
    4482:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_ZN7CTimerF10ChannelSetE19TIMER_CHANNELS_ENUM>
	PWMTimer.Start(32768);
    4486:	60 e0       	ldi	r22, 0x00	; 0
    4488:	70 e8       	ldi	r23, 0x80	; 128
    448a:	8f e5       	ldi	r24, 0x5F	; 95
    448c:	93 e2       	ldi	r25, 0x23	; 35
    448e:	0e 94 ef 0c 	call	0x19de	; 0x19de <_ZN7CTimerF5StartEj>
	
	sei();	/* Enable global interrupts */
    4492:	78 94       	sei
}
    4494:	1f 91       	pop	r17
    4496:	0f 91       	pop	r16
    4498:	ef 90       	pop	r14
    449a:	08 95       	ret

0000449c <main>:
volatile char strxxxx[14] = "Empty";

DGUS_PROFILE empty_record;
	 
int main(void)
{
    449c:	cf 93       	push	r28
    449e:	df 93       	push	r29
    44a0:	cd b7       	in	r28, 0x3d	; 61
    44a2:	de b7       	in	r29, 0x3e	; 62
    44a4:	2e 97       	sbiw	r28, 0x0e	; 14
    44a6:	cd bf       	out	0x3d, r28	; 61
    44a8:	de bf       	out	0x3e, r29	; 62
	float x = 0.0f;
	char empty_name[] = "Empty\0";
    44aa:	87 e0       	ldi	r24, 0x07	; 7
    44ac:	e9 e4       	ldi	r30, 0x49	; 73
    44ae:	f0 e2       	ldi	r31, 0x20	; 32
    44b0:	de 01       	movw	r26, r28
    44b2:	18 96       	adiw	r26, 0x08	; 8
    44b4:	01 90       	ld	r0, Z+
    44b6:	0d 92       	st	X+, r0
    44b8:	8a 95       	dec	r24
    44ba:	e1 f7       	brne	.-8      	; 0x44b4 <main+0x18>
	char empty_time[] = "00:00\0";
    44bc:	87 e0       	ldi	r24, 0x07	; 7
    44be:	e0 e5       	ldi	r30, 0x50	; 80
    44c0:	f0 e2       	ldi	r31, 0x20	; 32
    44c2:	de 01       	movw	r26, r28
    44c4:	11 96       	adiw	r26, 0x01	; 1
    44c6:	01 90       	ld	r0, Z+
    44c8:	0d 92       	st	X+, r0
    44ca:	8a 95       	dec	r24
    44cc:	e1 f7       	brne	.-8      	; 0x44c6 <main+0x2a>
	
	empty_record.ID = 0;
    44ce:	10 92 1b 23 	sts	0x231B, r1
    44d2:	10 92 1c 23 	sts	0x231C, r1
	ConvertData(empty_record.Name, empty_name, 6, 0);
    44d6:	20 e0       	ldi	r18, 0x00	; 0
    44d8:	30 e0       	ldi	r19, 0x00	; 0
    44da:	46 e0       	ldi	r20, 0x06	; 6
    44dc:	50 e0       	ldi	r21, 0x00	; 0
    44de:	be 01       	movw	r22, r28
    44e0:	68 5f       	subi	r22, 0xF8	; 248
    44e2:	7f 4f       	sbci	r23, 0xFF	; 255
    44e4:	8d e1       	ldi	r24, 0x1D	; 29
    44e6:	93 e2       	ldi	r25, 0x23	; 35
    44e8:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_Z11ConvertDataPvS_jj>
	ConvertData(empty_record.Time, empty_time, 6, 0);
    44ec:	20 e0       	ldi	r18, 0x00	; 0
    44ee:	30 e0       	ldi	r19, 0x00	; 0
    44f0:	46 e0       	ldi	r20, 0x06	; 6
    44f2:	50 e0       	ldi	r21, 0x00	; 0
    44f4:	be 01       	movw	r22, r28
    44f6:	6f 5f       	subi	r22, 0xFF	; 255
    44f8:	7f 4f       	sbci	r23, 0xFF	; 255
    44fa:	8d e3       	ldi	r24, 0x3D	; 61
    44fc:	93 e2       	ldi	r25, 0x23	; 35
    44fe:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_Z11ConvertDataPvS_jj>
	empty_record.Power = 0;
    4502:	10 92 5d 23 	sts	0x235D, r1
    4506:	10 92 5e 23 	sts	0x235E, r1
	
	
	// Initialization system
	SystemInitialize();
    450a:	0e 94 f5 21 	call	0x43ea	; 0x43ea <_Z16SystemInitializev>
		
		_delay_ms(200);
	}*/
	
	// Startup delay (Beep "Imperial March")
	player.Play();
    450e:	84 e9       	ldi	r24, 0x94	; 148
    4510:	93 e2       	ldi	r25, 0x23	; 35
    4512:	0e 94 aa 0b 	call	0x1754	; 0x1754 <_ZN12CSoundPlayer4PlayEv>
	//_delay_ms(2000);
	
	// Initialize application GUI
	App.Start();
    4516:	8a e6       	ldi	r24, 0x6A	; 106
    4518:	93 e2       	ldi	r25, 0x23	; 35
    451a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <_ZN16CLaserControlApp5StartEv>
		// Loop delay
		_delay_ms(1);
		
		// Process application
		static uint16_t prs = 0;
		if ((prs++ % 200) == 0)
    451e:	18 ec       	ldi	r17, 0xC8	; 200
    4520:	8f e3       	ldi	r24, 0x3F	; 63
    4522:	9f e1       	ldi	r25, 0x1F	; 31
    4524:	01 97       	sbiw	r24, 0x01	; 1
    4526:	f1 f7       	brne	.-4      	; 0x4524 <main+0x88>
    4528:	00 c0       	rjmp	.+0      	; 0x452a <main+0x8e>
    452a:	00 00       	nop
    452c:	40 91 19 23 	lds	r20, 0x2319
    4530:	50 91 1a 23 	lds	r21, 0x231A
    4534:	ca 01       	movw	r24, r20
    4536:	01 96       	adiw	r24, 0x01	; 1
    4538:	80 93 19 23 	sts	0x2319, r24
    453c:	90 93 1a 23 	sts	0x231A, r25
    4540:	9a 01       	movw	r18, r20
    4542:	36 95       	lsr	r19
    4544:	27 95       	ror	r18
    4546:	36 95       	lsr	r19
    4548:	27 95       	ror	r18
    454a:	36 95       	lsr	r19
    454c:	27 95       	ror	r18
    454e:	ab e7       	ldi	r26, 0x7B	; 123
    4550:	b4 e1       	ldi	r27, 0x14	; 20
    4552:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <__umulhisi3>
    4556:	96 95       	lsr	r25
    4558:	87 95       	ror	r24
    455a:	18 9f       	mul	r17, r24
    455c:	90 01       	movw	r18, r0
    455e:	19 9f       	mul	r17, r25
    4560:	30 0d       	add	r19, r0
    4562:	11 24       	eor	r1, r1
    4564:	42 17       	cp	r20, r18
    4566:	53 07       	cpc	r21, r19
    4568:	d9 f6       	brne	.-74     	; 0x4520 <main+0x84>
			App.Run();
    456a:	8a e6       	ldi	r24, 0x6A	; 106
    456c:	93 e2       	ldi	r25, 0x23	; 35
    456e:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN16CLaserControlApp3RunEv>
    4572:	d6 cf       	rjmp	.-84     	; 0x4520 <main+0x84>

00004574 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
	free(tx_buffer);
}

// local methods
void CMBEventsHandler::FillRegDataTx(uint8_t addr, uint8_t* data, uint8_t length)
{
    4574:	cf 93       	push	r28
    4576:	df 93       	push	r29
    4578:	ec 01       	movw	r28, r24
		// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    457a:	ec 81       	ldd	r30, Y+4	; 0x04
    457c:	fd 81       	ldd	r31, Y+5	; 0x05
    457e:	8a ea       	ldi	r24, 0xAA	; 170
    4580:	80 83       	st	Z, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4582:	ec 81       	ldd	r30, Y+4	; 0x04
    4584:	fd 81       	ldd	r31, Y+5	; 0x05
    4586:	8c ec       	ldi	r24, 0xCC	; 204
    4588:	81 83       	std	Z+1, r24	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 4; //CMD (1) + DATA(length) + CRC(2) + ADDR(1)
#else
	tx_buffer[2] = length + 2; //CMD (1) + DATA(length) + ADDR(1)
    458a:	ec 81       	ldd	r30, Y+4	; 0x04
    458c:	fd 81       	ldd	r31, Y+5	; 0x05
    458e:	82 e0       	ldi	r24, 0x02	; 2
    4590:	82 0f       	add	r24, r18
    4592:	82 83       	std	Z+2, r24	; 0x02
#endif
	tx_buffer[3] = 0x80;	// Frame command
    4594:	ec 81       	ldd	r30, Y+4	; 0x04
    4596:	fd 81       	ldd	r31, Y+5	; 0x05
    4598:	80 e8       	ldi	r24, 0x80	; 128
    459a:	83 83       	std	Z+3, r24	; 0x03
	tx_buffer[4] = addr;	// Register address
    459c:	ec 81       	ldd	r30, Y+4	; 0x04
    459e:	fd 81       	ldd	r31, Y+5	; 0x05
    45a0:	64 83       	std	Z+4, r22	; 0x04
	tx_frame_length = length + 5;
    45a2:	85 e0       	ldi	r24, 0x05	; 5
    45a4:	82 0f       	add	r24, r18
    45a6:	89 87       	std	Y+9, r24	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    45a8:	30 e0       	ldi	r19, 0x00	; 0
    45aa:	21 15       	cp	r18, r1
    45ac:	31 05       	cpc	r19, r1
    45ae:	81 f0       	breq	.+32     	; 0x45d0 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x5c>
    45b0:	da 01       	movw	r26, r20
    45b2:	42 0f       	add	r20, r18
    45b4:	53 1f       	adc	r21, r19
    45b6:	65 e0       	ldi	r22, 0x05	; 5
    45b8:	70 e0       	ldi	r23, 0x00	; 0
		tx_buffer[i+5] = data[i];
    45ba:	9d 91       	ld	r25, X+
    45bc:	ec 81       	ldd	r30, Y+4	; 0x04
    45be:	fd 81       	ldd	r31, Y+5	; 0x05
    45c0:	e6 0f       	add	r30, r22
    45c2:	f7 1f       	adc	r31, r23
    45c4:	90 83       	st	Z, r25
    45c6:	6f 5f       	subi	r22, 0xFF	; 255
    45c8:	7f 4f       	sbci	r23, 0xFF	; 255
	tx_buffer[3] = 0x80;	// Frame command
	tx_buffer[4] = addr;	// Register address
	tx_frame_length = length + 5;
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    45ca:	a4 17       	cp	r26, r20
    45cc:	b5 07       	cpc	r27, r21
    45ce:	a9 f7       	brne	.-22     	; 0x45ba <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length]   = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	tx_frame_length = length + 7;
#endif
}
    45d0:	df 91       	pop	r29
    45d2:	cf 91       	pop	r28
    45d4:	08 95       	ret

000045d6 <_ZN16CMBEventsHandler13FillRegDataRqEhh>:

void CMBEventsHandler::FillRegDataRq(uint8_t addr, uint8_t length)
{
    45d6:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    45d8:	a4 81       	ldd	r26, Z+4	; 0x04
    45da:	b5 81       	ldd	r27, Z+5	; 0x05
    45dc:	8a ea       	ldi	r24, 0xAA	; 170
    45de:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    45e0:	a4 81       	ldd	r26, Z+4	; 0x04
    45e2:	b5 81       	ldd	r27, Z+5	; 0x05
    45e4:	8c ec       	ldi	r24, 0xCC	; 204
    45e6:	11 96       	adiw	r26, 0x01	; 1
    45e8:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 5; //CMD(1) + DATA(2) + CRC(2)
#else
	tx_buffer[2] = 3; //CMD(1) + DATA(2)
    45ea:	a4 81       	ldd	r26, Z+4	; 0x04
    45ec:	b5 81       	ldd	r27, Z+5	; 0x05
    45ee:	83 e0       	ldi	r24, 0x03	; 3
    45f0:	12 96       	adiw	r26, 0x02	; 2
    45f2:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x81;	// Frame command
    45f4:	a4 81       	ldd	r26, Z+4	; 0x04
    45f6:	b5 81       	ldd	r27, Z+5	; 0x05
    45f8:	81 e8       	ldi	r24, 0x81	; 129
    45fa:	13 96       	adiw	r26, 0x03	; 3
    45fc:	8c 93       	st	X, r24
	tx_buffer[4] = addr;	// Register address
    45fe:	a4 81       	ldd	r26, Z+4	; 0x04
    4600:	b5 81       	ldd	r27, Z+5	; 0x05
    4602:	14 96       	adiw	r26, 0x04	; 4
    4604:	6c 93       	st	X, r22
	tx_buffer[5] = length;	// Data
    4606:	a4 81       	ldd	r26, Z+4	; 0x04
    4608:	b5 81       	ldd	r27, Z+5	; 0x05
    460a:	15 96       	adiw	r26, 0x05	; 5
    460c:	4c 93       	st	X, r20
	tx_frame_length = 6;
    460e:	86 e0       	ldi	r24, 0x06	; 6
    4610:	81 87       	std	Z+9, r24	; 0x09
    4612:	08 95       	ret

00004614 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	tx_frame_length = length + 8;
#endif
}

void CMBEventsHandler::FillVarDataTx(uint16_t addr, uint16_t* data, uint16_t length)
{
    4614:	0f 93       	push	r16
    4616:	1f 93       	push	r17
    4618:	cf 93       	push	r28
    461a:	df 93       	push	r29
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    461c:	dc 01       	movw	r26, r24
    461e:	14 96       	adiw	r26, 0x04	; 4
    4620:	ed 91       	ld	r30, X+
    4622:	fc 91       	ld	r31, X
    4624:	15 97       	sbiw	r26, 0x05	; 5
    4626:	aa ea       	ldi	r26, 0xAA	; 170
    4628:	a0 83       	st	Z, r26
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    462a:	ec 01       	movw	r28, r24
    462c:	ec 81       	ldd	r30, Y+4	; 0x04
    462e:	fd 81       	ldd	r31, Y+5	; 0x05
    4630:	ac ec       	ldi	r26, 0xCC	; 204
    4632:	a1 83       	std	Z+1, r26	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 5; //CMD (1) + DATA(length * 2) + CRC(2) + ADDR(2)
#else
	tx_buffer[2] = length + 3; //CMD (1) + DATA(length * 2) + ADDR(2)
    4634:	ec 81       	ldd	r30, Y+4	; 0x04
    4636:	fd 81       	ldd	r31, Y+5	; 0x05
    4638:	a3 e0       	ldi	r26, 0x03	; 3
    463a:	a2 0f       	add	r26, r18
    463c:	a2 83       	std	Z+2, r26	; 0x02
#endif
	tx_buffer[3] = 0x82;	// Frame command
    463e:	ec 81       	ldd	r30, Y+4	; 0x04
    4640:	fd 81       	ldd	r31, Y+5	; 0x05
    4642:	a2 e8       	ldi	r26, 0x82	; 130
    4644:	a3 83       	std	Z+3, r26	; 0x03
	tx_buffer[4] = addr >> 8;
    4646:	ec 81       	ldd	r30, Y+4	; 0x04
    4648:	fd 81       	ldd	r31, Y+5	; 0x05
    464a:	74 83       	std	Z+4, r23	; 0x04
	tx_buffer[5] = addr & 0xff;
    464c:	ec 81       	ldd	r30, Y+4	; 0x04
    464e:	fd 81       	ldd	r31, Y+5	; 0x05
    4650:	65 83       	std	Z+5, r22	; 0x05
	tx_frame_length = length + 6;
    4652:	66 e0       	ldi	r22, 0x06	; 6
    4654:	62 0f       	add	r22, r18
    4656:	69 87       	std	Y+9, r22	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    4658:	36 95       	lsr	r19
    465a:	27 95       	ror	r18
    465c:	21 15       	cp	r18, r1
    465e:	31 05       	cpc	r19, r1
    4660:	e1 f0       	breq	.+56     	; 0x469a <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x86>
    4662:	e4 2f       	mov	r30, r20
    4664:	f5 2f       	mov	r31, r21
    4666:	2d 5f       	subi	r18, 0xFD	; 253
    4668:	3f 4f       	sbci	r19, 0xFF	; 255
    466a:	22 0f       	add	r18, r18
    466c:	33 1f       	adc	r19, r19
    466e:	46 e0       	ldi	r20, 0x06	; 6
    4670:	50 e0       	ldi	r21, 0x00	; 0
	{
		tx_buffer[6 + i*2 + 0] = data[i] >> 8;
    4672:	ec 01       	movw	r28, r24
    4674:	ac 81       	ldd	r26, Y+4	; 0x04
    4676:	bd 81       	ldd	r27, Y+5	; 0x05
    4678:	a4 0f       	add	r26, r20
    467a:	b5 1f       	adc	r27, r21
    467c:	61 81       	ldd	r22, Z+1	; 0x01
    467e:	6c 93       	st	X, r22
		tx_buffer[6 + i*2 + 1] = data[i] & 0xff;
    4680:	ac 81       	ldd	r26, Y+4	; 0x04
    4682:	bd 81       	ldd	r27, Y+5	; 0x05
    4684:	a4 0f       	add	r26, r20
    4686:	b5 1f       	adc	r27, r21
    4688:	60 81       	ld	r22, Z
    468a:	32 96       	adiw	r30, 0x02	; 2
    468c:	11 96       	adiw	r26, 0x01	; 1
    468e:	6c 93       	st	X, r22
    4690:	4e 5f       	subi	r20, 0xFE	; 254
    4692:	5f 4f       	sbci	r21, 0xFF	; 255
	tx_buffer[4] = addr >> 8;
	tx_buffer[5] = addr & 0xff;
	tx_frame_length = length + 6;
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    4694:	42 17       	cp	r20, r18
    4696:	53 07       	cpc	r21, r19
    4698:	61 f7       	brne	.-40     	; 0x4672 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x5e>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length] = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	this->tx_frame_length = length * 2 + 8;
#endif
}
    469a:	df 91       	pop	r29
    469c:	cf 91       	pop	r28
    469e:	1f 91       	pop	r17
    46a0:	0f 91       	pop	r16
    46a2:	08 95       	ret

000046a4 <_ZN16CMBEventsHandler13FillVarDataRqEjj>:

void CMBEventsHandler::FillVarDataRq(uint16_t addr, uint16_t length)
{
    46a4:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    46a6:	a4 81       	ldd	r26, Z+4	; 0x04
    46a8:	b5 81       	ldd	r27, Z+5	; 0x05
    46aa:	8a ea       	ldi	r24, 0xAA	; 170
    46ac:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    46ae:	a4 81       	ldd	r26, Z+4	; 0x04
    46b0:	b5 81       	ldd	r27, Z+5	; 0x05
    46b2:	8c ec       	ldi	r24, 0xCC	; 204
    46b4:	11 96       	adiw	r26, 0x01	; 1
    46b6:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 6; //CMD(1) + DATA(3) + CRC(2)
#else
	tx_buffer[2] = 4; //CMD(1) + DATA(3)
    46b8:	a4 81       	ldd	r26, Z+4	; 0x04
    46ba:	b5 81       	ldd	r27, Z+5	; 0x05
    46bc:	84 e0       	ldi	r24, 0x04	; 4
    46be:	12 96       	adiw	r26, 0x02	; 2
    46c0:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x83;				// Frame command
    46c2:	a4 81       	ldd	r26, Z+4	; 0x04
    46c4:	b5 81       	ldd	r27, Z+5	; 0x05
    46c6:	83 e8       	ldi	r24, 0x83	; 131
    46c8:	13 96       	adiw	r26, 0x03	; 3
    46ca:	8c 93       	st	X, r24
	tx_buffer[4] = addr >> 8;			// Register address
    46cc:	a4 81       	ldd	r26, Z+4	; 0x04
    46ce:	b5 81       	ldd	r27, Z+5	; 0x05
    46d0:	14 96       	adiw	r26, 0x04	; 4
    46d2:	7c 93       	st	X, r23
	tx_buffer[5] = addr & 0xff;			// Register address
    46d4:	a4 81       	ldd	r26, Z+4	; 0x04
    46d6:	b5 81       	ldd	r27, Z+5	; 0x05
    46d8:	15 96       	adiw	r26, 0x05	; 5
    46da:	6c 93       	st	X, r22
	tx_buffer[6] = length;				// Data
    46dc:	a4 81       	ldd	r26, Z+4	; 0x04
    46de:	b5 81       	ldd	r27, Z+5	; 0x05
    46e0:	16 96       	adiw	r26, 0x06	; 6
    46e2:	4c 93       	st	X, r20
	tx_frame_length = 7;
    46e4:	87 e0       	ldi	r24, 0x07	; 7
    46e6:	81 87       	std	Z+9, r24	; 0x09
    46e8:	08 95       	ret

000046ea <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
CMBEventsHandler::~CMBEventsHandler()
{
} //~CMBProtocol

void CMBEventsHandler::AllocateBuffers(uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    46ea:	0f 93       	push	r16
    46ec:	1f 93       	push	r17
    46ee:	cf 93       	push	r28
    46f0:	df 93       	push	r29
    46f2:	ec 01       	movw	r28, r24
    46f4:	cb 01       	movw	r24, r22
    46f6:	8a 01       	movw	r16, r20
	rx_bufferSize = rx_bufSize;
    46f8:	6f 83       	std	Y+7, r22	; 0x07
    46fa:	78 87       	std	Y+8, r23	; 0x08
	tx_bufferSize = tx_bufSize;
    46fc:	4a 87       	std	Y+10, r20	; 0x0a
    46fe:	5b 87       	std	Y+11, r21	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    4700:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <malloc>
    4704:	8a 83       	std	Y+2, r24	; 0x02
    4706:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    4708:	c8 01       	movw	r24, r16
    470a:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <malloc>
    470e:	8c 83       	std	Y+4, r24	; 0x04
    4710:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_frame_length  = 0x00;
    4712:	19 86       	std	Y+9, r1	; 0x09
	rx_frame_length  = 0x00;
    4714:	1e 82       	std	Y+6, r1	; 0x06
}
    4716:	df 91       	pop	r29
    4718:	cf 91       	pop	r28
    471a:	1f 91       	pop	r17
    471c:	0f 91       	pop	r16
    471e:	08 95       	ret

00004720 <_ZN16CMBEventsHandler11FreeBuffersEv>:

void CMBEventsHandler::FreeBuffers()
{
    4720:	cf 93       	push	r28
    4722:	df 93       	push	r29
    4724:	ec 01       	movw	r28, r24
	free(rx_buffer);
    4726:	8a 81       	ldd	r24, Y+2	; 0x02
    4728:	9b 81       	ldd	r25, Y+3	; 0x03
    472a:	0e 94 e2 26 	call	0x4dc4	; 0x4dc4 <free>
	free(tx_buffer);
    472e:	8c 81       	ldd	r24, Y+4	; 0x04
    4730:	9d 81       	ldd	r25, Y+5	; 0x05
    4732:	0e 94 e2 26 	call	0x4dc4	; 0x4dc4 <free>
}
    4736:	df 91       	pop	r29
    4738:	cf 91       	pop	r28
    473a:	08 95       	ret

0000473c <_ZN16CMBEventsHandlerD1Ev>:

#include "CMBProtocol.h"
#include <avr/io.h>
#include <util/crc16.h>

CMBEventsHandler::~CMBEventsHandler()
    473c:	08 95       	ret

0000473e <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	CMBSender::ProcessTransaction(data, length);
}

void CMBSender::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
	if (CallbackHandler != 0)
    473e:	dc 01       	movw	r26, r24
    4740:	57 96       	adiw	r26, 0x17	; 23
    4742:	8d 91       	ld	r24, X+
    4744:	9c 91       	ld	r25, X
    4746:	58 97       	sbiw	r26, 0x18	; 24
    4748:	00 97       	sbiw	r24, 0x00	; 0
    474a:	39 f0       	breq	.+14     	; 0x475a <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
		CallbackHandler->OnVariableReceived(addr, data, length);
    474c:	dc 01       	movw	r26, r24
    474e:	ed 91       	ld	r30, X+
    4750:	fc 91       	ld	r31, X
    4752:	02 80       	ldd	r0, Z+2	; 0x02
    4754:	f3 81       	ldd	r31, Z+3	; 0x03
    4756:	e0 2d       	mov	r30, r0
    4758:	19 95       	eicall
    475a:	08 95       	ret

0000475c <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
}


void CMBSender::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
	if (CallbackHandler != 0)
    475c:	dc 01       	movw	r26, r24
    475e:	57 96       	adiw	r26, 0x17	; 23
    4760:	8d 91       	ld	r24, X+
    4762:	9c 91       	ld	r25, X
    4764:	58 97       	sbiw	r26, 0x18	; 24
    4766:	00 97       	sbiw	r24, 0x00	; 0
    4768:	39 f0       	breq	.+14     	; 0x4778 <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
		CallbackHandler->OnRegisterReceived(addr, data, length);
    476a:	dc 01       	movw	r26, r24
    476c:	ed 91       	ld	r30, X+
    476e:	fc 91       	ld	r31, X
    4770:	04 80       	ldd	r0, Z+4	; 0x04
    4772:	f5 81       	ldd	r31, Z+5	; 0x05
    4774:	e0 2d       	mov	r30, r0
    4776:	19 95       	eicall
    4778:	08 95       	ret

0000477a <_ZN9CMBSenderC1Ev>:
#include "CMBSender.h"
#include <avr/io.h>
#include <util/crc16.h>

// default constructor
CMBSender::CMBSender()
    477a:	26 e1       	ldi	r18, 0x16	; 22
    477c:	31 e2       	ldi	r19, 0x21	; 33
    477e:	fc 01       	movw	r30, r24
    4780:	20 83       	st	Z, r18
    4782:	31 83       	std	Z+1, r19	; 0x01
    4784:	08 95       	ret

00004786 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj>:
	
}


void CMBSender::Initialize(CUSART* usart, CMBEventsHandler *handler, uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    4786:	cf 92       	push	r12
    4788:	df 92       	push	r13
    478a:	ef 92       	push	r14
    478c:	ff 92       	push	r15
    478e:	0f 93       	push	r16
    4790:	1f 93       	push	r17
    4792:	cf 93       	push	r28
    4794:	df 93       	push	r29
    4796:	ec 01       	movw	r28, r24
    4798:	7b 01       	movw	r14, r22
    479a:	6a 01       	movw	r12, r20
    479c:	c9 01       	movw	r24, r18
	rx_bufferSize = rx_bufSize;
    479e:	2f 83       	std	Y+7, r18	; 0x07
    47a0:	38 87       	std	Y+8, r19	; 0x08
	tx_bufferSize = tx_bufSize;
    47a2:	0a 87       	std	Y+10, r16	; 0x0a
    47a4:	1b 87       	std	Y+11, r17	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    47a6:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <malloc>
    47aa:	8a 83       	std	Y+2, r24	; 0x02
    47ac:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    47ae:	c8 01       	movw	r24, r16
    47b0:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <malloc>
    47b4:	8c 83       	std	Y+4, r24	; 0x04
    47b6:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_buffer_pos    = 0x00;
    47b8:	1d 8a       	std	Y+21, r1	; 0x15
	tx_frame_length  = 0x00;
    47ba:	19 86       	std	Y+9, r1	; 0x09
	rx_buffer_pos    = 0x00;
    47bc:	1f 86       	std	Y+15, r1	; 0x0f
	rx_frame_length  = 0x00;
    47be:	1e 82       	std	Y+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    47c0:	18 8a       	std	Y+16, r1	; 0x10
    47c2:	19 8a       	std	Y+17, r1	; 0x11
	rx_currt_crc     = 0x00;
    47c4:	1a 8a       	std	Y+18, r1	; 0x12
    47c6:	1b 8a       	std	Y+19, r1	; 0x13
	modbus_receiver_state  = rx_Idle;
    47c8:	87 e0       	ldi	r24, 0x07	; 7
    47ca:	8e 87       	std	Y+14, r24	; 0x0e
	modbus_transmitter_state  = tx_Idle;
    47cc:	82 e0       	ldi	r24, 0x02	; 2
    47ce:	8c 8b       	std	Y+20, r24	; 0x14
	isTransaction = false;
    47d0:	1e 8a       	std	Y+22, r1	; 0x16
	
	// Set usart interface interrupts
	pUSART = usart;
    47d2:	ec 86       	std	Y+12, r14	; 0x0c
    47d4:	fd 86       	std	Y+13, r15	; 0x0d
	usart->SetRxInterruptionCallback((void*)this, OnUSARTRxInterrupt);
    47d6:	d7 01       	movw	r26, r14
    47d8:	ed 91       	ld	r30, X+
    47da:	fc 91       	ld	r31, X
    47dc:	04 84       	ldd	r0, Z+12	; 0x0c
    47de:	f5 85       	ldd	r31, Z+13	; 0x0d
    47e0:	e0 2d       	mov	r30, r0
    47e2:	44 ed       	ldi	r20, 0xD4	; 212
    47e4:	54 e2       	ldi	r21, 0x24	; 36
    47e6:	be 01       	movw	r22, r28
    47e8:	c7 01       	movw	r24, r14
    47ea:	19 95       	eicall
	usart->SetTxInterruptionCallback((void*)this, OnUSARTTxInterrupt);
    47ec:	d7 01       	movw	r26, r14
    47ee:	ed 91       	ld	r30, X+
    47f0:	fc 91       	ld	r31, X
    47f2:	06 84       	ldd	r0, Z+14	; 0x0e
    47f4:	f7 85       	ldd	r31, Z+15	; 0x0f
    47f6:	e0 2d       	mov	r30, r0
    47f8:	49 e3       	ldi	r20, 0x39	; 57
    47fa:	55 e2       	ldi	r21, 0x25	; 37
    47fc:	be 01       	movw	r22, r28
    47fe:	c7 01       	movw	r24, r14
    4800:	19 95       	eicall
	
	// Set event handler
	if (handler)
    4802:	c1 14       	cp	r12, r1
    4804:	d1 04       	cpc	r13, r1
    4806:	19 f0       	breq	.+6      	; 0x480e <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj+0x88>
		CallbackHandler = handler;
    4808:	cf 8a       	std	Y+23, r12	; 0x17
    480a:	d8 8e       	std	Y+24, r13	; 0x18
    480c:	02 c0       	rjmp	.+4      	; 0x4812 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj+0x8c>
	else
		CallbackHandler = this;
    480e:	cf 8b       	std	Y+23, r28	; 0x17
    4810:	d8 8f       	std	Y+24, r29	; 0x18
} //CMBSender
    4812:	df 91       	pop	r29
    4814:	cf 91       	pop	r28
    4816:	1f 91       	pop	r17
    4818:	0f 91       	pop	r16
    481a:	ff 90       	pop	r15
    481c:	ef 90       	pop	r14
    481e:	df 90       	pop	r13
    4820:	cf 90       	pop	r12
    4822:	08 95       	ret

00004824 <_ZN9CMBSenderD1Ev>:
	free(rx_buffer);
	free(tx_buffer);
}

// default destructor
CMBSender::~CMBSender()
    4824:	26 e1       	ldi	r18, 0x16	; 22
    4826:	31 e2       	ldi	r19, 0x21	; 33
    4828:	fc 01       	movw	r30, r24
    482a:	20 83       	st	Z, r18
    482c:	31 83       	std	Z+1, r19	; 0x01
    482e:	0e 94 9e 23 	call	0x473c	; 0x473c <_ZN16CMBEventsHandlerD1Ev>
    4832:	08 95       	ret

00004834 <_ZN9CMBSender13OnReceiveByteEh>:
//void CMBSender::RequestDataFromSRAM(uint16_t addr, uint8_t length);

volatile uint16_t cnt = 0;

void CMBSender::OnReceiveByte(uint8_t data)
{
    4834:	cf 93       	push	r28
    4836:	df 93       	push	r29
    4838:	ec 01       	movw	r28, r24
    483a:	96 2f       	mov	r25, r22
	switch (modbus_receiver_state)
    483c:	4e 85       	ldd	r20, Y+14	; 0x0e
    483e:	50 e0       	ldi	r21, 0x00	; 0
    4840:	4b 30       	cpi	r20, 0x0B	; 11
    4842:	51 05       	cpc	r21, r1
    4844:	08 f0       	brcs	.+2      	; 0x4848 <_ZN9CMBSender13OnReceiveByteEh+0x14>
    4846:	ad c0       	rjmp	.+346    	; 0x49a2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
    4848:	fa 01       	movw	r30, r20
    484a:	88 27       	eor	r24, r24
    484c:	e5 5d       	subi	r30, 0xD5	; 213
    484e:	fe 4f       	sbci	r31, 0xFE	; 254
    4850:	8f 4f       	sbci	r24, 0xFF	; 255
    4852:	0c 94 14 26 	jmp	0x4c28	; 0x4c28 <__tablejump2__>
	{
		case rx_Start :
		case rx_FrameHeader0 :
			if (data == FRAMEHEADER_LOWBYTE)
    4856:	9a 3a       	cpi	r25, 0xAA	; 170
    4858:	19 f4       	brne	.+6      	; 0x4860 <_ZN9CMBSender13OnReceiveByteEh+0x2c>
				modbus_receiver_state = rx_FrameHeader1;
    485a:	82 e0       	ldi	r24, 0x02	; 2
    485c:	8e 87       	std	Y+14, r24	; 0x0e
    485e:	a1 c0       	rjmp	.+322    	; 0x49a2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    4860:	81 e0       	ldi	r24, 0x01	; 1
    4862:	8e 87       	std	Y+14, r24	; 0x0e
    4864:	9e c0       	rjmp	.+316    	; 0x49a2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_FrameHeader1 :
			if (data == FRAMEHEADER_HIGHBYTE)
    4866:	9c 3c       	cpi	r25, 0xCC	; 204
    4868:	19 f4       	brne	.+6      	; 0x4870 <_ZN9CMBSender13OnReceiveByteEh+0x3c>
				modbus_receiver_state = rx_FrameLength;
    486a:	83 e0       	ldi	r24, 0x03	; 3
    486c:	8e 87       	std	Y+14, r24	; 0x0e
    486e:	99 c0       	rjmp	.+306    	; 0x49a2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    4870:	81 e0       	ldi	r24, 0x01	; 1
    4872:	8e 87       	std	Y+14, r24	; 0x0e
    4874:	96 c0       	rjmp	.+300    	; 0x49a2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_FrameLength :
			rx_frame_length = data;
    4876:	9e 83       	std	Y+6, r25	; 0x06
			rx_buffer_pos = 0;
    4878:	1f 86       	std	Y+15, r1	; 0x0f
			rx_currt_crc = 0;
    487a:	1a 8a       	std	Y+18, r1	; 0x12
    487c:	1b 8a       	std	Y+19, r1	; 0x13
			cnt = 0;
    487e:	10 92 b7 23 	sts	0x23B7, r1
    4882:	10 92 b8 23 	sts	0x23B8, r1
			modbus_receiver_state = rx_FrameReceive;
    4886:	84 e0       	ldi	r24, 0x04	; 4
    4888:	8e 87       	std	Y+14, r24	; 0x0e
			break;
    488a:	8b c0       	rjmp	.+278    	; 0x49a2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		case rx_FrameReceive :
			rx_buffer[rx_buffer_pos] = data;
    488c:	8f 85       	ldd	r24, Y+15	; 0x0f
    488e:	ea 81       	ldd	r30, Y+2	; 0x02
    4890:	fb 81       	ldd	r31, Y+3	; 0x03
    4892:	e8 0f       	add	r30, r24
    4894:	f1 1d       	adc	r31, r1
    4896:	90 83       	st	Z, r25
			if (rx_buffer_pos > rx_bufferSize)
    4898:	2f 85       	ldd	r18, Y+15	; 0x0f
    489a:	30 e0       	ldi	r19, 0x00	; 0
    489c:	4f 81       	ldd	r20, Y+7	; 0x07
    489e:	58 85       	ldd	r21, Y+8	; 0x08
    48a0:	42 17       	cp	r20, r18
    48a2:	53 07       	cpc	r21, r19
    48a4:	18 f4       	brcc	.+6      	; 0x48ac <_ZN9CMBSender13OnReceiveByteEh+0x78>
			{
				modbus_receiver_state = rx_Error;
    48a6:	89 e0       	ldi	r24, 0x09	; 9
    48a8:	8e 87       	std	Y+14, r24	; 0x0e
				break;
    48aa:	7b c0       	rjmp	.+246    	; 0x49a2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
    48ac:	2a 89       	ldd	r18, Y+18	; 0x12
    48ae:	3b 89       	ldd	r19, Y+19	; 0x13
    48b0:	29 27       	eor	r18, r25
    48b2:	92 2f       	mov	r25, r18
    48b4:	92 95       	swap	r25
    48b6:	92 27       	eor	r25, r18
    48b8:	09 2e       	mov	r0, r25
    48ba:	96 95       	lsr	r25
    48bc:	96 95       	lsr	r25
    48be:	90 25       	eor	r25, r0
    48c0:	09 2e       	mov	r0, r25
    48c2:	96 95       	lsr	r25
    48c4:	90 25       	eor	r25, r0
    48c6:	97 70       	andi	r25, 0x07	; 7
    48c8:	02 2e       	mov	r0, r18
    48ca:	23 2f       	mov	r18, r19
    48cc:	96 95       	lsr	r25
    48ce:	07 94       	ror	r0
    48d0:	97 95       	ror	r25
    48d2:	30 2d       	mov	r19, r0
    48d4:	29 27       	eor	r18, r25
    48d6:	06 94       	lsr	r0
    48d8:	97 95       	ror	r25
    48da:	30 25       	eor	r19, r0
    48dc:	29 27       	eor	r18, r25
			}
			rx_currt_crc = _crc16_update(rx_currt_crc, data);
    48de:	2a 8b       	std	Y+18, r18	; 0x12
    48e0:	3b 8b       	std	Y+19, r19	; 0x13
			rx_buffer_pos++;
    48e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    48e4:	8f 5f       	subi	r24, 0xFF	; 255
    48e6:	8f 87       	std	Y+15, r24	; 0x0f
			cnt++;
    48e8:	80 91 b7 23 	lds	r24, 0x23B7
    48ec:	90 91 b8 23 	lds	r25, 0x23B8
    48f0:	01 96       	adiw	r24, 0x01	; 1
    48f2:	80 93 b7 23 	sts	0x23B7, r24
    48f6:	90 93 b8 23 	sts	0x23B8, r25
			if (rx_buffer_pos == rx_frame_length)
    48fa:	4f 85       	ldd	r20, Y+15	; 0x0f
    48fc:	8e 81       	ldd	r24, Y+6	; 0x06
    48fe:	48 13       	cpse	r20, r24
    4900:	50 c0       	rjmp	.+160    	; 0x49a2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			{
#ifdef USE_CRC
				modbus_receiver_state = rx_CRC0;
#else
				modbus_receiver_state = rx_Complete;
    4902:	88 e0       	ldi	r24, 0x08	; 8
    4904:	8e 87       	std	Y+14, r24	; 0x0e
#endif
				OnTransactionCallback(rx_buffer, rx_frame_length);
    4906:	e8 81       	ld	r30, Y
    4908:	f9 81       	ldd	r31, Y+1	; 0x01
    490a:	50 e0       	ldi	r21, 0x00	; 0
    490c:	6a 81       	ldd	r22, Y+2	; 0x02
    490e:	7b 81       	ldd	r23, Y+3	; 0x03
    4910:	01 90       	ld	r0, Z+
    4912:	f0 81       	ld	r31, Z
    4914:	e0 2d       	mov	r30, r0
    4916:	ce 01       	movw	r24, r28
    4918:	19 95       	eicall
				if (CallbackHandler != 0)
    491a:	8f 89       	ldd	r24, Y+23	; 0x17
    491c:	98 8d       	ldd	r25, Y+24	; 0x18
    491e:	00 97       	sbiw	r24, 0x00	; 0
    4920:	09 f4       	brne	.+2      	; 0x4924 <_ZN9CMBSender13OnReceiveByteEh+0xf0>
    4922:	3f c0       	rjmp	.+126    	; 0x49a2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    4924:	dc 01       	movw	r26, r24
    4926:	ed 91       	ld	r30, X+
    4928:	fc 91       	ld	r31, X
    492a:	4e 81       	ldd	r20, Y+6	; 0x06
    492c:	50 e0       	ldi	r21, 0x00	; 0
    492e:	6a 81       	ldd	r22, Y+2	; 0x02
    4930:	7b 81       	ldd	r23, Y+3	; 0x03
    4932:	01 90       	ld	r0, Z+
    4934:	f0 81       	ld	r31, Z
    4936:	e0 2d       	mov	r30, r0
    4938:	19 95       	eicall
    493a:	33 c0       	rjmp	.+102    	; 0x49a2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			}
			break;
		case rx_CRC0 :
			rx_frame_crc = data;
    493c:	69 2f       	mov	r22, r25
    493e:	70 e0       	ldi	r23, 0x00	; 0
    4940:	68 8b       	std	Y+16, r22	; 0x10
    4942:	79 8b       	std	Y+17, r23	; 0x11
			modbus_receiver_state = rx_CRC1;
    4944:	86 e0       	ldi	r24, 0x06	; 6
    4946:	8e 87       	std	Y+14, r24	; 0x0e
			break;
    4948:	2c c0       	rjmp	.+88     	; 0x49a2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		case rx_CRC1 :
			rx_frame_crc |= (data << 8);
    494a:	28 89       	ldd	r18, Y+16	; 0x10
    494c:	39 89       	ldd	r19, Y+17	; 0x11
    494e:	a9 01       	movw	r20, r18
    4950:	59 2b       	or	r21, r25
    4952:	48 8b       	std	Y+16, r20	; 0x10
    4954:	59 8b       	std	Y+17, r21	; 0x11
			if (rx_currt_crc == rx_frame_crc)
    4956:	2a 89       	ldd	r18, Y+18	; 0x12
    4958:	3b 89       	ldd	r19, Y+19	; 0x13
    495a:	42 17       	cp	r20, r18
    495c:	53 07       	cpc	r21, r19
    495e:	e9 f4       	brne	.+58     	; 0x499a <_ZN9CMBSender13OnReceiveByteEh+0x166>
			{
				modbus_receiver_state = rx_Complete;
    4960:	88 e0       	ldi	r24, 0x08	; 8
    4962:	8e 87       	std	Y+14, r24	; 0x0e
				
				OnTransactionCallback(rx_buffer, rx_frame_length);
    4964:	e8 81       	ld	r30, Y
    4966:	f9 81       	ldd	r31, Y+1	; 0x01
    4968:	4e 81       	ldd	r20, Y+6	; 0x06
    496a:	50 e0       	ldi	r21, 0x00	; 0
    496c:	6a 81       	ldd	r22, Y+2	; 0x02
    496e:	7b 81       	ldd	r23, Y+3	; 0x03
    4970:	01 90       	ld	r0, Z+
    4972:	f0 81       	ld	r31, Z
    4974:	e0 2d       	mov	r30, r0
    4976:	ce 01       	movw	r24, r28
    4978:	19 95       	eicall
				if (CallbackHandler != 0)
    497a:	8f 89       	ldd	r24, Y+23	; 0x17
    497c:	98 8d       	ldd	r25, Y+24	; 0x18
    497e:	00 97       	sbiw	r24, 0x00	; 0
    4980:	81 f0       	breq	.+32     	; 0x49a2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    4982:	dc 01       	movw	r26, r24
    4984:	ed 91       	ld	r30, X+
    4986:	fc 91       	ld	r31, X
    4988:	4e 81       	ldd	r20, Y+6	; 0x06
    498a:	50 e0       	ldi	r21, 0x00	; 0
    498c:	6a 81       	ldd	r22, Y+2	; 0x02
    498e:	7b 81       	ldd	r23, Y+3	; 0x03
    4990:	01 90       	ld	r0, Z+
    4992:	f0 81       	ld	r31, Z
    4994:	e0 2d       	mov	r30, r0
    4996:	19 95       	eicall
    4998:	04 c0       	rjmp	.+8      	; 0x49a2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			}
			else
				modbus_receiver_state = rx_Error;
    499a:	89 e0       	ldi	r24, 0x09	; 9
    499c:	8e 87       	std	Y+14, r24	; 0x0e
    499e:	01 c0       	rjmp	.+2      	; 0x49a2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_Error :
		case rx_TimeOut :
			isTransaction = false;
    49a0:	1e 8a       	std	Y+22, r1	; 0x16
		case rx_Complete :
		case rx_Idle :
		default:
		break;
	};
}
    49a2:	df 91       	pop	r29
    49a4:	cf 91       	pop	r28
    49a6:	08 95       	ret

000049a8 <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
{
	modbus_transmitter_state = tx_Idle;
}

void CMBSender::OnUSARTRxInterrupt(void* sender)
{
    49a8:	cf 93       	push	r28
    49aa:	df 93       	push	r29
    49ac:	ec 01       	movw	r28, r24
	CMBSender* owner = (CMBSender*)sender;
	uint8_t data = owner->pUSART->GetReceivedByte();
    49ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    49b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    49b2:	dc 01       	movw	r26, r24
    49b4:	ed 91       	ld	r30, X+
    49b6:	fc 91       	ld	r31, X
    49b8:	02 80       	ldd	r0, Z+2	; 0x02
    49ba:	f3 81       	ldd	r31, Z+3	; 0x03
    49bc:	e0 2d       	mov	r30, r0
    49be:	19 95       	eicall
	owner->OnReceiveByte(data);
    49c0:	68 2f       	mov	r22, r24
    49c2:	ce 01       	movw	r24, r28
    49c4:	0e 94 1a 24 	call	0x4834	; 0x4834 <_ZN9CMBSender13OnReceiveByteEh>
}
    49c8:	df 91       	pop	r29
    49ca:	cf 91       	pop	r28
    49cc:	08 95       	ret

000049ce <_ZN9CMBSender19StartMODBUSListenerEv>:
	if (modbus_receiver_state != rx_Complete)
		modbus_receiver_state = rx_TimeOut;
}

void CMBSender::StartMODBUSListener()
{
    49ce:	fc 01       	movw	r30, r24
	rx_buffer_pos    = 0x00;
    49d0:	17 86       	std	Z+15, r1	; 0x0f
	rx_frame_length  = 0x00;
    49d2:	16 82       	std	Z+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    49d4:	10 8a       	std	Z+16, r1	; 0x10
    49d6:	11 8a       	std	Z+17, r1	; 0x11
	rx_currt_crc     = 0x00;
    49d8:	12 8a       	std	Z+18, r1	; 0x12
    49da:	13 8a       	std	Z+19, r1	; 0x13
	modbus_receiver_state  = rx_Start;
    49dc:	16 86       	std	Z+14, r1	; 0x0e
    49de:	08 95       	ret

000049e0 <_ZN9CMBSender14OnTransmitByteEv>:
		break;
	};
}

void CMBSender::OnTransmitByte()
{
    49e0:	cf 93       	push	r28
    49e2:	df 93       	push	r29
    49e4:	ec 01       	movw	r28, r24
	switch (modbus_transmitter_state)
    49e6:	8c 89       	ldd	r24, Y+20	; 0x14
    49e8:	84 30       	cpi	r24, 0x04	; 4
    49ea:	38 f4       	brcc	.+14     	; 0x49fa <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    49ec:	82 30       	cpi	r24, 0x02	; 2
    49ee:	b8 f5       	brcc	.+110    	; 0x4a5e <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    49f0:	88 23       	and	r24, r24
    49f2:	31 f0       	breq	.+12     	; 0x4a00 <_ZN9CMBSender14OnTransmitByteEv+0x20>
    49f4:	81 30       	cpi	r24, 0x01	; 1
    49f6:	d1 f0       	breq	.+52     	; 0x4a2c <_ZN9CMBSender14OnTransmitByteEv+0x4c>
    49f8:	39 c0       	rjmp	.+114    	; 0x4a6c <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    49fa:	85 30       	cpi	r24, 0x05	; 5
    49fc:	81 f1       	breq	.+96     	; 0x4a5e <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    49fe:	36 c0       	rjmp	.+108    	; 0x4a6c <_ZN9CMBSender14OnTransmitByteEv+0x8c>
	{
		case tx_Start :
			modbus_transmitter_state = tx_Transmitting; // Start receiving packet
    4a00:	81 e0       	ldi	r24, 0x01	; 1
    4a02:	8c 8b       	std	Y+20, r24	; 0x14
			tx_buffer_pos = 0;
    4a04:	1d 8a       	std	Y+21, r1	; 0x15
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    4a06:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a08:	9d 85       	ldd	r25, Y+13	; 0x0d
    4a0a:	2d 89       	ldd	r18, Y+21	; 0x15
    4a0c:	dc 01       	movw	r26, r24
    4a0e:	ed 91       	ld	r30, X+
    4a10:	fc 91       	ld	r31, X
    4a12:	ac 81       	ldd	r26, Y+4	; 0x04
    4a14:	bd 81       	ldd	r27, Y+5	; 0x05
    4a16:	a2 0f       	add	r26, r18
    4a18:	b1 1d       	adc	r27, r1
    4a1a:	04 80       	ldd	r0, Z+4	; 0x04
    4a1c:	f5 81       	ldd	r31, Z+5	; 0x05
    4a1e:	e0 2d       	mov	r30, r0
    4a20:	6c 91       	ld	r22, X
    4a22:	19 95       	eicall
			tx_buffer_pos++;
    4a24:	8d 89       	ldd	r24, Y+21	; 0x15
    4a26:	8f 5f       	subi	r24, 0xFF	; 255
    4a28:	8d 8b       	std	Y+21, r24	; 0x15
			break;
    4a2a:	20 c0       	rjmp	.+64     	; 0x4a6c <_ZN9CMBSender14OnTransmitByteEv+0x8c>
		case tx_Transmitting :
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    4a2c:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a2e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4a30:	2d 89       	ldd	r18, Y+21	; 0x15
    4a32:	dc 01       	movw	r26, r24
    4a34:	ed 91       	ld	r30, X+
    4a36:	fc 91       	ld	r31, X
    4a38:	ac 81       	ldd	r26, Y+4	; 0x04
    4a3a:	bd 81       	ldd	r27, Y+5	; 0x05
    4a3c:	a2 0f       	add	r26, r18
    4a3e:	b1 1d       	adc	r27, r1
    4a40:	04 80       	ldd	r0, Z+4	; 0x04
    4a42:	f5 81       	ldd	r31, Z+5	; 0x05
    4a44:	e0 2d       	mov	r30, r0
    4a46:	6c 91       	ld	r22, X
    4a48:	19 95       	eicall
			tx_buffer_pos++;
    4a4a:	8d 89       	ldd	r24, Y+21	; 0x15
    4a4c:	8f 5f       	subi	r24, 0xFF	; 255
    4a4e:	8d 8b       	std	Y+21, r24	; 0x15
			if (tx_buffer_pos == tx_frame_length)
    4a50:	9d 89       	ldd	r25, Y+21	; 0x15
    4a52:	89 85       	ldd	r24, Y+9	; 0x09
    4a54:	98 13       	cpse	r25, r24
    4a56:	0a c0       	rjmp	.+20     	; 0x4a6c <_ZN9CMBSender14OnTransmitByteEv+0x8c>
				modbus_transmitter_state = tx_Complete;
    4a58:	83 e0       	ldi	r24, 0x03	; 3
    4a5a:	8c 8b       	std	Y+20, r24	; 0x14
    4a5c:	07 c0       	rjmp	.+14     	; 0x4a6c <_ZN9CMBSender14OnTransmitByteEv+0x8c>
			break;
		case tx_Idle :
		case tx_TimeOut :
		case tx_Complete :
			if (isTransaction)
    4a5e:	8e 89       	ldd	r24, Y+22	; 0x16
    4a60:	88 23       	and	r24, r24
    4a62:	19 f0       	breq	.+6      	; 0x4a6a <_ZN9CMBSender14OnTransmitByteEv+0x8a>
				StartMODBUSListener();
    4a64:	ce 01       	movw	r24, r28
    4a66:	0e 94 e7 24 	call	0x49ce	; 0x49ce <_ZN9CMBSender19StartMODBUSListenerEv>
			isTransaction = false;
    4a6a:	1e 8a       	std	Y+22, r1	; 0x16
		default :
		break;
	}
}
    4a6c:	df 91       	pop	r29
    4a6e:	cf 91       	pop	r28
    4a70:	08 95       	ret

00004a72 <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
}

void CMBSender::OnUSARTTxInterrupt(void* sender)
{
	CMBSender* owner = (CMBSender*)sender;
	owner->OnTransmitByte();
    4a72:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <_ZN9CMBSender14OnTransmitByteEv>
    4a76:	08 95       	ret

00004a78 <_ZN9CMBSender18WaitMODBUSListenerEv>:
	rx_currt_crc     = 0x00;
	modbus_receiver_state  = rx_Start;
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
    4a78:	fc 01       	movw	r30, r24
	while (modbus_receiver_state != rx_Complete)
    4a7a:	06 c0       	rjmp	.+12     	; 0x4a88 <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
	{
		if (modbus_receiver_state == rx_Error)
    4a7c:	86 85       	ldd	r24, Z+14	; 0x0e
    4a7e:	89 30       	cpi	r24, 0x09	; 9
    4a80:	41 f0       	breq	.+16     	; 0x4a92 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
    4a82:	86 85       	ldd	r24, Z+14	; 0x0e
    4a84:	8a 30       	cpi	r24, 0x0A	; 10
    4a86:	39 f0       	breq	.+14     	; 0x4a96 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
	modbus_receiver_state  = rx_Start;
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
    4a88:	86 85       	ldd	r24, Z+14	; 0x0e
    4a8a:	88 30       	cpi	r24, 0x08	; 8
    4a8c:	b9 f7       	brne	.-18     	; 0x4a7c <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
		if (modbus_receiver_state == rx_Error)
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
	}
	return Complete;
    4a8e:	81 e0       	ldi	r24, 0x01	; 1
    4a90:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
	{
		if (modbus_receiver_state == rx_Error)
			return Error;
    4a92:	82 e0       	ldi	r24, 0x02	; 2
    4a94:	08 95       	ret
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
    4a96:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    4a98:	08 95       	ret

00004a9a <_ZN9CMBSender22StartMODBUSTransmitterEv>:
	modbus_receiver_state  = rx_Idle;
}

void CMBSender::StartMODBUSTransmitter()
{
	tx_buffer_pos = 0x00;
    4a9a:	fc 01       	movw	r30, r24
    4a9c:	15 8a       	std	Z+21, r1	; 0x15
	modbus_transmitter_state  = tx_Start;
    4a9e:	14 8a       	std	Z+20, r1	; 0x14
	OnTransmitByte();
    4aa0:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <_ZN9CMBSender14OnTransmitByteEv>
    4aa4:	08 95       	ret

00004aa6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
{
} //~CMBSender

// MODBUS write data to register command
void CMBSender::WriteDataToRegisterAsync(uint8_t addr, uint8_t* data, uint8_t length)
{
    4aa6:	cf 93       	push	r28
    4aa8:	df 93       	push	r29
    4aaa:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataTx(addr, data, length);
    4aac:	e8 81       	ld	r30, Y
    4aae:	f9 81       	ldd	r31, Y+1	; 0x01
    4ab0:	02 84       	ldd	r0, Z+10	; 0x0a
    4ab2:	f3 85       	ldd	r31, Z+11	; 0x0b
    4ab4:	e0 2d       	mov	r30, r0
    4ab6:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    4ab8:	ce 01       	movw	r24, r28
    4aba:	0e 94 4d 25 	call	0x4a9a	; 0x4a9a <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    4abe:	df 91       	pop	r29
    4ac0:	cf 91       	pop	r28
    4ac2:	08 95       	ret

00004ac4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:

void CMBSender::WriteDataToSRAMAsync(uint16_t addr, uint16_t* data, uint16_t length)
{
    4ac4:	cf 93       	push	r28
    4ac6:	df 93       	push	r29
    4ac8:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataTx(addr, data, length);
    4aca:	e8 81       	ld	r30, Y
    4acc:	f9 81       	ldd	r31, Y+1	; 0x01
    4ace:	06 84       	ldd	r0, Z+14	; 0x0e
    4ad0:	f7 85       	ldd	r31, Z+15	; 0x0f
    4ad2:	e0 2d       	mov	r30, r0
    4ad4:	19 95       	eicall
		
	// Start transition
	StartMODBUSTransmitter();
    4ad6:	ce 01       	movw	r24, r28
    4ad8:	0e 94 4d 25 	call	0x4a9a	; 0x4a9a <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    4adc:	df 91       	pop	r29
    4ade:	cf 91       	pop	r28
    4ae0:	08 95       	ret

00004ae2 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:

void CMBSender::RequestDataFromRegisterAsync(uint8_t addr, uint8_t length)
{
    4ae2:	cf 93       	push	r28
    4ae4:	df 93       	push	r29
    4ae6:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataRq(addr, length);
    4ae8:	e8 81       	ld	r30, Y
    4aea:	f9 81       	ldd	r31, Y+1	; 0x01
    4aec:	04 84       	ldd	r0, Z+12	; 0x0c
    4aee:	f5 85       	ldd	r31, Z+13	; 0x0d
    4af0:	e0 2d       	mov	r30, r0
    4af2:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    4af4:	ce 01       	movw	r24, r28
    4af6:	0e 94 4d 25 	call	0x4a9a	; 0x4a9a <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    4afa:	df 91       	pop	r29
    4afc:	cf 91       	pop	r28
    4afe:	08 95       	ret

00004b00 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:

void CMBSender::RequestDataFromSRAMAsync(uint16_t addr, uint8_t length)
{
    4b00:	cf 93       	push	r28
    4b02:	df 93       	push	r29
    4b04:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataRq(addr, length);
    4b06:	e8 81       	ld	r30, Y
    4b08:	f9 81       	ldd	r31, Y+1	; 0x01
    4b0a:	50 e0       	ldi	r21, 0x00	; 0
    4b0c:	00 88       	ldd	r0, Z+16	; 0x10
    4b0e:	f1 89       	ldd	r31, Z+17	; 0x11
    4b10:	e0 2d       	mov	r30, r0
    4b12:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    4b14:	ce 01       	movw	r24, r28
    4b16:	0e 94 4d 25 	call	0x4a9a	; 0x4a9a <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    4b1a:	df 91       	pop	r29
    4b1c:	cf 91       	pop	r28
    4b1e:	08 95       	ret

00004b20 <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
	modbus_transmitter_state  = tx_Start;
	OnTransmitByte();
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
    4b20:	fc 01       	movw	r30, r24
	while (modbus_transmitter_state != tx_Complete)
    4b22:	06 c0       	rjmp	.+12     	; 0x4b30 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
	{
		if (modbus_transmitter_state == tx_Error)
    4b24:	84 89       	ldd	r24, Z+20	; 0x14
    4b26:	84 30       	cpi	r24, 0x04	; 4
    4b28:	41 f0       	breq	.+16     	; 0x4b3a <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
    4b2a:	84 89       	ldd	r24, Z+20	; 0x14
    4b2c:	85 30       	cpi	r24, 0x05	; 5
    4b2e:	39 f0       	breq	.+14     	; 0x4b3e <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
	OnTransmitByte();
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
    4b30:	84 89       	ldd	r24, Z+20	; 0x14
    4b32:	83 30       	cpi	r24, 0x03	; 3
    4b34:	b9 f7       	brne	.-18     	; 0x4b24 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
		if (modbus_transmitter_state == tx_Error)
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
	}
	return Complete;
    4b36:	81 e0       	ldi	r24, 0x01	; 1
    4b38:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
	{
		if (modbus_transmitter_state == tx_Error)
		return Error;
    4b3a:	82 e0       	ldi	r24, 0x02	; 2
    4b3c:	08 95       	ret
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
    4b3e:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    4b40:	08 95       	ret

00004b42 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTransmitByte();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    4b42:	21 e0       	ldi	r18, 0x01	; 1
    4b44:	fc 01       	movw	r30, r24
    4b46:	26 8b       	std	Z+22, r18	; 0x16
	RequestDataFromRegisterAsync(addr, length);
    4b48:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    4b4c:	08 95       	ret

00004b4e <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    4b4e:	21 e0       	ldi	r18, 0x01	; 1
    4b50:	fc 01       	movw	r30, r24
    4b52:	26 8b       	std	Z+22, r18	; 0x16
	RequestDataFromSRAMAsync(addr, length);
    4b54:	0e 94 80 25 	call	0x4b00	; 0x4b00 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    4b58:	08 95       	ret

00004b5a <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    4b5a:	0f 93       	push	r16
    4b5c:	1f 93       	push	r17
    4b5e:	cf 93       	push	r28
    4b60:	df 93       	push	r29
    4b62:	8c 01       	movw	r16, r24
    4b64:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    4b66:	98 81       	ld	r25, Y
    4b68:	91 38       	cpi	r25, 0x81	; 129
    4b6a:	69 f4       	brne	.+26     	; 0x4b86 <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    4b6c:	d8 01       	movw	r26, r16
    4b6e:	ed 91       	ld	r30, X+
    4b70:	fc 91       	ld	r31, X
    4b72:	04 80       	ldd	r0, Z+4	; 0x04
    4b74:	f5 81       	ldd	r31, Z+5	; 0x05
    4b76:	e0 2d       	mov	r30, r0
    4b78:	2a 81       	ldd	r18, Y+2	; 0x02
    4b7a:	ab 01       	movw	r20, r22
    4b7c:	4d 5f       	subi	r20, 0xFD	; 253
    4b7e:	5f 4f       	sbci	r21, 0xFF	; 255
    4b80:	69 81       	ldd	r22, Y+1	; 0x01
    4b82:	c8 01       	movw	r24, r16
    4b84:	19 95       	eicall
	}
	if (data[0] == 0x83)
    4b86:	98 81       	ld	r25, Y
    4b88:	93 38       	cpi	r25, 0x83	; 131
    4b8a:	99 f4       	brne	.+38     	; 0x4bb2 <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], data[3]);
    4b8c:	d8 01       	movw	r26, r16
    4b8e:	ed 91       	ld	r30, X+
    4b90:	fc 91       	ld	r31, X
    4b92:	2b 81       	ldd	r18, Y+3	; 0x03
    4b94:	30 e0       	ldi	r19, 0x00	; 0
    4b96:	ae 01       	movw	r20, r28
    4b98:	4c 5f       	subi	r20, 0xFC	; 252
    4b9a:	5f 4f       	sbci	r21, 0xFF	; 255
    4b9c:	69 81       	ldd	r22, Y+1	; 0x01
    4b9e:	70 e0       	ldi	r23, 0x00	; 0
    4ba0:	76 2f       	mov	r23, r22
    4ba2:	66 27       	eor	r22, r22
    4ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ba6:	68 2b       	or	r22, r24
    4ba8:	02 80       	ldd	r0, Z+2	; 0x02
    4baa:	f3 81       	ldd	r31, Z+3	; 0x03
    4bac:	e0 2d       	mov	r30, r0
    4bae:	c8 01       	movw	r24, r16
    4bb0:	19 95       	eicall
	}
}
    4bb2:	df 91       	pop	r29
    4bb4:	cf 91       	pop	r28
    4bb6:	1f 91       	pop	r17
    4bb8:	0f 91       	pop	r16
    4bba:	08 95       	ret

00004bbc <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    4bbc:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <_ZN9CMBSender18ProcessTransactionEPhj>
    4bc0:	08 95       	ret

00004bc2 <__udivmodhi4>:
    4bc2:	aa 1b       	sub	r26, r26
    4bc4:	bb 1b       	sub	r27, r27
    4bc6:	51 e1       	ldi	r21, 0x11	; 17
    4bc8:	07 c0       	rjmp	.+14     	; 0x4bd8 <__udivmodhi4_ep>

00004bca <__udivmodhi4_loop>:
    4bca:	aa 1f       	adc	r26, r26
    4bcc:	bb 1f       	adc	r27, r27
    4bce:	a6 17       	cp	r26, r22
    4bd0:	b7 07       	cpc	r27, r23
    4bd2:	10 f0       	brcs	.+4      	; 0x4bd8 <__udivmodhi4_ep>
    4bd4:	a6 1b       	sub	r26, r22
    4bd6:	b7 0b       	sbc	r27, r23

00004bd8 <__udivmodhi4_ep>:
    4bd8:	88 1f       	adc	r24, r24
    4bda:	99 1f       	adc	r25, r25
    4bdc:	5a 95       	dec	r21
    4bde:	a9 f7       	brne	.-22     	; 0x4bca <__udivmodhi4_loop>
    4be0:	80 95       	com	r24
    4be2:	90 95       	com	r25
    4be4:	bc 01       	movw	r22, r24
    4be6:	cd 01       	movw	r24, r26
    4be8:	08 95       	ret

00004bea <__divmodsi4>:
    4bea:	05 2e       	mov	r0, r21
    4bec:	97 fb       	bst	r25, 7
    4bee:	1e f4       	brtc	.+6      	; 0x4bf6 <__divmodsi4+0xc>
    4bf0:	00 94       	com	r0
    4bf2:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <__negsi2>
    4bf6:	57 fd       	sbrc	r21, 7
    4bf8:	07 d0       	rcall	.+14     	; 0x4c08 <__divmodsi4_neg2>
    4bfa:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <__udivmodsi4>
    4bfe:	07 fc       	sbrc	r0, 7
    4c00:	03 d0       	rcall	.+6      	; 0x4c08 <__divmodsi4_neg2>
    4c02:	4e f4       	brtc	.+18     	; 0x4c16 <__divmodsi4_exit>
    4c04:	0c 94 0c 26 	jmp	0x4c18	; 0x4c18 <__negsi2>

00004c08 <__divmodsi4_neg2>:
    4c08:	50 95       	com	r21
    4c0a:	40 95       	com	r20
    4c0c:	30 95       	com	r19
    4c0e:	21 95       	neg	r18
    4c10:	3f 4f       	sbci	r19, 0xFF	; 255
    4c12:	4f 4f       	sbci	r20, 0xFF	; 255
    4c14:	5f 4f       	sbci	r21, 0xFF	; 255

00004c16 <__divmodsi4_exit>:
    4c16:	08 95       	ret

00004c18 <__negsi2>:
    4c18:	90 95       	com	r25
    4c1a:	80 95       	com	r24
    4c1c:	70 95       	com	r23
    4c1e:	61 95       	neg	r22
    4c20:	7f 4f       	sbci	r23, 0xFF	; 255
    4c22:	8f 4f       	sbci	r24, 0xFF	; 255
    4c24:	9f 4f       	sbci	r25, 0xFF	; 255
    4c26:	08 95       	ret

00004c28 <__tablejump2__>:
    4c28:	ee 0f       	add	r30, r30
    4c2a:	ff 1f       	adc	r31, r31
    4c2c:	88 1f       	adc	r24, r24
    4c2e:	8b bf       	out	0x3b, r24	; 59
    4c30:	07 90       	elpm	r0, Z+
    4c32:	f6 91       	elpm	r31, Z
    4c34:	e0 2d       	mov	r30, r0
    4c36:	19 94       	eijmp

00004c38 <__umulhisi3>:
    4c38:	a2 9f       	mul	r26, r18
    4c3a:	b0 01       	movw	r22, r0
    4c3c:	b3 9f       	mul	r27, r19
    4c3e:	c0 01       	movw	r24, r0
    4c40:	a3 9f       	mul	r26, r19
    4c42:	70 0d       	add	r23, r0
    4c44:	81 1d       	adc	r24, r1
    4c46:	11 24       	eor	r1, r1
    4c48:	91 1d       	adc	r25, r1
    4c4a:	b2 9f       	mul	r27, r18
    4c4c:	70 0d       	add	r23, r0
    4c4e:	81 1d       	adc	r24, r1
    4c50:	11 24       	eor	r1, r1
    4c52:	91 1d       	adc	r25, r1
    4c54:	08 95       	ret

00004c56 <__udivmodsi4>:
    4c56:	a1 e2       	ldi	r26, 0x21	; 33
    4c58:	1a 2e       	mov	r1, r26
    4c5a:	aa 1b       	sub	r26, r26
    4c5c:	bb 1b       	sub	r27, r27
    4c5e:	fd 01       	movw	r30, r26
    4c60:	0d c0       	rjmp	.+26     	; 0x4c7c <__udivmodsi4_ep>

00004c62 <__udivmodsi4_loop>:
    4c62:	aa 1f       	adc	r26, r26
    4c64:	bb 1f       	adc	r27, r27
    4c66:	ee 1f       	adc	r30, r30
    4c68:	ff 1f       	adc	r31, r31
    4c6a:	a2 17       	cp	r26, r18
    4c6c:	b3 07       	cpc	r27, r19
    4c6e:	e4 07       	cpc	r30, r20
    4c70:	f5 07       	cpc	r31, r21
    4c72:	20 f0       	brcs	.+8      	; 0x4c7c <__udivmodsi4_ep>
    4c74:	a2 1b       	sub	r26, r18
    4c76:	b3 0b       	sbc	r27, r19
    4c78:	e4 0b       	sbc	r30, r20
    4c7a:	f5 0b       	sbc	r31, r21

00004c7c <__udivmodsi4_ep>:
    4c7c:	66 1f       	adc	r22, r22
    4c7e:	77 1f       	adc	r23, r23
    4c80:	88 1f       	adc	r24, r24
    4c82:	99 1f       	adc	r25, r25
    4c84:	1a 94       	dec	r1
    4c86:	69 f7       	brne	.-38     	; 0x4c62 <__udivmodsi4_loop>
    4c88:	60 95       	com	r22
    4c8a:	70 95       	com	r23
    4c8c:	80 95       	com	r24
    4c8e:	90 95       	com	r25
    4c90:	9b 01       	movw	r18, r22
    4c92:	ac 01       	movw	r20, r24
    4c94:	bd 01       	movw	r22, r26
    4c96:	cf 01       	movw	r24, r30
    4c98:	08 95       	ret

00004c9a <malloc>:
    4c9a:	cf 93       	push	r28
    4c9c:	df 93       	push	r29
    4c9e:	82 30       	cpi	r24, 0x02	; 2
    4ca0:	91 05       	cpc	r25, r1
    4ca2:	10 f4       	brcc	.+4      	; 0x4ca8 <malloc+0xe>
    4ca4:	82 e0       	ldi	r24, 0x02	; 2
    4ca6:	90 e0       	ldi	r25, 0x00	; 0
    4ca8:	e0 91 bb 23 	lds	r30, 0x23BB
    4cac:	f0 91 bc 23 	lds	r31, 0x23BC
    4cb0:	20 e0       	ldi	r18, 0x00	; 0
    4cb2:	30 e0       	ldi	r19, 0x00	; 0
    4cb4:	c0 e0       	ldi	r28, 0x00	; 0
    4cb6:	d0 e0       	ldi	r29, 0x00	; 0
    4cb8:	30 97       	sbiw	r30, 0x00	; 0
    4cba:	11 f1       	breq	.+68     	; 0x4d00 <malloc+0x66>
    4cbc:	40 81       	ld	r20, Z
    4cbe:	51 81       	ldd	r21, Z+1	; 0x01
    4cc0:	48 17       	cp	r20, r24
    4cc2:	59 07       	cpc	r21, r25
    4cc4:	c0 f0       	brcs	.+48     	; 0x4cf6 <malloc+0x5c>
    4cc6:	48 17       	cp	r20, r24
    4cc8:	59 07       	cpc	r21, r25
    4cca:	61 f4       	brne	.+24     	; 0x4ce4 <malloc+0x4a>
    4ccc:	82 81       	ldd	r24, Z+2	; 0x02
    4cce:	93 81       	ldd	r25, Z+3	; 0x03
    4cd0:	20 97       	sbiw	r28, 0x00	; 0
    4cd2:	19 f0       	breq	.+6      	; 0x4cda <malloc+0x40>
    4cd4:	8a 83       	std	Y+2, r24	; 0x02
    4cd6:	9b 83       	std	Y+3, r25	; 0x03
    4cd8:	2b c0       	rjmp	.+86     	; 0x4d30 <malloc+0x96>
    4cda:	80 93 bb 23 	sts	0x23BB, r24
    4cde:	90 93 bc 23 	sts	0x23BC, r25
    4ce2:	26 c0       	rjmp	.+76     	; 0x4d30 <malloc+0x96>
    4ce4:	21 15       	cp	r18, r1
    4ce6:	31 05       	cpc	r19, r1
    4ce8:	19 f0       	breq	.+6      	; 0x4cf0 <malloc+0x56>
    4cea:	42 17       	cp	r20, r18
    4cec:	53 07       	cpc	r21, r19
    4cee:	18 f4       	brcc	.+6      	; 0x4cf6 <malloc+0x5c>
    4cf0:	9a 01       	movw	r18, r20
    4cf2:	be 01       	movw	r22, r28
    4cf4:	df 01       	movw	r26, r30
    4cf6:	ef 01       	movw	r28, r30
    4cf8:	02 80       	ldd	r0, Z+2	; 0x02
    4cfa:	f3 81       	ldd	r31, Z+3	; 0x03
    4cfc:	e0 2d       	mov	r30, r0
    4cfe:	dc cf       	rjmp	.-72     	; 0x4cb8 <malloc+0x1e>
    4d00:	21 15       	cp	r18, r1
    4d02:	31 05       	cpc	r19, r1
    4d04:	09 f1       	breq	.+66     	; 0x4d48 <malloc+0xae>
    4d06:	28 1b       	sub	r18, r24
    4d08:	39 0b       	sbc	r19, r25
    4d0a:	24 30       	cpi	r18, 0x04	; 4
    4d0c:	31 05       	cpc	r19, r1
    4d0e:	90 f4       	brcc	.+36     	; 0x4d34 <malloc+0x9a>
    4d10:	12 96       	adiw	r26, 0x02	; 2
    4d12:	8d 91       	ld	r24, X+
    4d14:	9c 91       	ld	r25, X
    4d16:	13 97       	sbiw	r26, 0x03	; 3
    4d18:	61 15       	cp	r22, r1
    4d1a:	71 05       	cpc	r23, r1
    4d1c:	21 f0       	breq	.+8      	; 0x4d26 <malloc+0x8c>
    4d1e:	fb 01       	movw	r30, r22
    4d20:	82 83       	std	Z+2, r24	; 0x02
    4d22:	93 83       	std	Z+3, r25	; 0x03
    4d24:	04 c0       	rjmp	.+8      	; 0x4d2e <malloc+0x94>
    4d26:	80 93 bb 23 	sts	0x23BB, r24
    4d2a:	90 93 bc 23 	sts	0x23BC, r25
    4d2e:	fd 01       	movw	r30, r26
    4d30:	32 96       	adiw	r30, 0x02	; 2
    4d32:	44 c0       	rjmp	.+136    	; 0x4dbc <malloc+0x122>
    4d34:	fd 01       	movw	r30, r26
    4d36:	e2 0f       	add	r30, r18
    4d38:	f3 1f       	adc	r31, r19
    4d3a:	81 93       	st	Z+, r24
    4d3c:	91 93       	st	Z+, r25
    4d3e:	22 50       	subi	r18, 0x02	; 2
    4d40:	31 09       	sbc	r19, r1
    4d42:	2d 93       	st	X+, r18
    4d44:	3c 93       	st	X, r19
    4d46:	3a c0       	rjmp	.+116    	; 0x4dbc <malloc+0x122>
    4d48:	20 91 b9 23 	lds	r18, 0x23B9
    4d4c:	30 91 ba 23 	lds	r19, 0x23BA
    4d50:	23 2b       	or	r18, r19
    4d52:	41 f4       	brne	.+16     	; 0x4d64 <malloc+0xca>
    4d54:	20 91 02 20 	lds	r18, 0x2002
    4d58:	30 91 03 20 	lds	r19, 0x2003
    4d5c:	20 93 b9 23 	sts	0x23B9, r18
    4d60:	30 93 ba 23 	sts	0x23BA, r19
    4d64:	20 91 00 20 	lds	r18, 0x2000
    4d68:	30 91 01 20 	lds	r19, 0x2001
    4d6c:	21 15       	cp	r18, r1
    4d6e:	31 05       	cpc	r19, r1
    4d70:	41 f4       	brne	.+16     	; 0x4d82 <malloc+0xe8>
    4d72:	2d b7       	in	r18, 0x3d	; 61
    4d74:	3e b7       	in	r19, 0x3e	; 62
    4d76:	40 91 04 20 	lds	r20, 0x2004
    4d7a:	50 91 05 20 	lds	r21, 0x2005
    4d7e:	24 1b       	sub	r18, r20
    4d80:	35 0b       	sbc	r19, r21
    4d82:	e0 91 b9 23 	lds	r30, 0x23B9
    4d86:	f0 91 ba 23 	lds	r31, 0x23BA
    4d8a:	e2 17       	cp	r30, r18
    4d8c:	f3 07       	cpc	r31, r19
    4d8e:	a0 f4       	brcc	.+40     	; 0x4db8 <malloc+0x11e>
    4d90:	2e 1b       	sub	r18, r30
    4d92:	3f 0b       	sbc	r19, r31
    4d94:	28 17       	cp	r18, r24
    4d96:	39 07       	cpc	r19, r25
    4d98:	78 f0       	brcs	.+30     	; 0x4db8 <malloc+0x11e>
    4d9a:	ac 01       	movw	r20, r24
    4d9c:	4e 5f       	subi	r20, 0xFE	; 254
    4d9e:	5f 4f       	sbci	r21, 0xFF	; 255
    4da0:	24 17       	cp	r18, r20
    4da2:	35 07       	cpc	r19, r21
    4da4:	48 f0       	brcs	.+18     	; 0x4db8 <malloc+0x11e>
    4da6:	4e 0f       	add	r20, r30
    4da8:	5f 1f       	adc	r21, r31
    4daa:	40 93 b9 23 	sts	0x23B9, r20
    4dae:	50 93 ba 23 	sts	0x23BA, r21
    4db2:	81 93       	st	Z+, r24
    4db4:	91 93       	st	Z+, r25
    4db6:	02 c0       	rjmp	.+4      	; 0x4dbc <malloc+0x122>
    4db8:	e0 e0       	ldi	r30, 0x00	; 0
    4dba:	f0 e0       	ldi	r31, 0x00	; 0
    4dbc:	cf 01       	movw	r24, r30
    4dbe:	df 91       	pop	r29
    4dc0:	cf 91       	pop	r28
    4dc2:	08 95       	ret

00004dc4 <free>:
    4dc4:	0f 93       	push	r16
    4dc6:	1f 93       	push	r17
    4dc8:	cf 93       	push	r28
    4dca:	df 93       	push	r29
    4dcc:	00 97       	sbiw	r24, 0x00	; 0
    4dce:	09 f4       	brne	.+2      	; 0x4dd2 <free+0xe>
    4dd0:	8c c0       	rjmp	.+280    	; 0x4eea <free+0x126>
    4dd2:	fc 01       	movw	r30, r24
    4dd4:	32 97       	sbiw	r30, 0x02	; 2
    4dd6:	12 82       	std	Z+2, r1	; 0x02
    4dd8:	13 82       	std	Z+3, r1	; 0x03
    4dda:	00 91 bb 23 	lds	r16, 0x23BB
    4dde:	10 91 bc 23 	lds	r17, 0x23BC
    4de2:	01 15       	cp	r16, r1
    4de4:	11 05       	cpc	r17, r1
    4de6:	81 f4       	brne	.+32     	; 0x4e08 <free+0x44>
    4de8:	20 81       	ld	r18, Z
    4dea:	31 81       	ldd	r19, Z+1	; 0x01
    4dec:	82 0f       	add	r24, r18
    4dee:	93 1f       	adc	r25, r19
    4df0:	20 91 b9 23 	lds	r18, 0x23B9
    4df4:	30 91 ba 23 	lds	r19, 0x23BA
    4df8:	28 17       	cp	r18, r24
    4dfa:	39 07       	cpc	r19, r25
    4dfc:	79 f5       	brne	.+94     	; 0x4e5c <free+0x98>
    4dfe:	e0 93 b9 23 	sts	0x23B9, r30
    4e02:	f0 93 ba 23 	sts	0x23BA, r31
    4e06:	71 c0       	rjmp	.+226    	; 0x4eea <free+0x126>
    4e08:	d8 01       	movw	r26, r16
    4e0a:	40 e0       	ldi	r20, 0x00	; 0
    4e0c:	50 e0       	ldi	r21, 0x00	; 0
    4e0e:	ae 17       	cp	r26, r30
    4e10:	bf 07       	cpc	r27, r31
    4e12:	50 f4       	brcc	.+20     	; 0x4e28 <free+0x64>
    4e14:	12 96       	adiw	r26, 0x02	; 2
    4e16:	2d 91       	ld	r18, X+
    4e18:	3c 91       	ld	r19, X
    4e1a:	13 97       	sbiw	r26, 0x03	; 3
    4e1c:	ad 01       	movw	r20, r26
    4e1e:	21 15       	cp	r18, r1
    4e20:	31 05       	cpc	r19, r1
    4e22:	09 f1       	breq	.+66     	; 0x4e66 <free+0xa2>
    4e24:	d9 01       	movw	r26, r18
    4e26:	f3 cf       	rjmp	.-26     	; 0x4e0e <free+0x4a>
    4e28:	9d 01       	movw	r18, r26
    4e2a:	da 01       	movw	r26, r20
    4e2c:	22 83       	std	Z+2, r18	; 0x02
    4e2e:	33 83       	std	Z+3, r19	; 0x03
    4e30:	60 81       	ld	r22, Z
    4e32:	71 81       	ldd	r23, Z+1	; 0x01
    4e34:	86 0f       	add	r24, r22
    4e36:	97 1f       	adc	r25, r23
    4e38:	82 17       	cp	r24, r18
    4e3a:	93 07       	cpc	r25, r19
    4e3c:	69 f4       	brne	.+26     	; 0x4e58 <free+0x94>
    4e3e:	ec 01       	movw	r28, r24
    4e40:	28 81       	ld	r18, Y
    4e42:	39 81       	ldd	r19, Y+1	; 0x01
    4e44:	26 0f       	add	r18, r22
    4e46:	37 1f       	adc	r19, r23
    4e48:	2e 5f       	subi	r18, 0xFE	; 254
    4e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    4e4c:	20 83       	st	Z, r18
    4e4e:	31 83       	std	Z+1, r19	; 0x01
    4e50:	8a 81       	ldd	r24, Y+2	; 0x02
    4e52:	9b 81       	ldd	r25, Y+3	; 0x03
    4e54:	82 83       	std	Z+2, r24	; 0x02
    4e56:	93 83       	std	Z+3, r25	; 0x03
    4e58:	45 2b       	or	r20, r21
    4e5a:	29 f4       	brne	.+10     	; 0x4e66 <free+0xa2>
    4e5c:	e0 93 bb 23 	sts	0x23BB, r30
    4e60:	f0 93 bc 23 	sts	0x23BC, r31
    4e64:	42 c0       	rjmp	.+132    	; 0x4eea <free+0x126>
    4e66:	12 96       	adiw	r26, 0x02	; 2
    4e68:	ed 93       	st	X+, r30
    4e6a:	fc 93       	st	X, r31
    4e6c:	13 97       	sbiw	r26, 0x03	; 3
    4e6e:	ed 01       	movw	r28, r26
    4e70:	49 91       	ld	r20, Y+
    4e72:	59 91       	ld	r21, Y+
    4e74:	9e 01       	movw	r18, r28
    4e76:	24 0f       	add	r18, r20
    4e78:	35 1f       	adc	r19, r21
    4e7a:	e2 17       	cp	r30, r18
    4e7c:	f3 07       	cpc	r31, r19
    4e7e:	71 f4       	brne	.+28     	; 0x4e9c <free+0xd8>
    4e80:	80 81       	ld	r24, Z
    4e82:	91 81       	ldd	r25, Z+1	; 0x01
    4e84:	84 0f       	add	r24, r20
    4e86:	95 1f       	adc	r25, r21
    4e88:	02 96       	adiw	r24, 0x02	; 2
    4e8a:	8d 93       	st	X+, r24
    4e8c:	9c 93       	st	X, r25
    4e8e:	11 97       	sbiw	r26, 0x01	; 1
    4e90:	82 81       	ldd	r24, Z+2	; 0x02
    4e92:	93 81       	ldd	r25, Z+3	; 0x03
    4e94:	12 96       	adiw	r26, 0x02	; 2
    4e96:	8d 93       	st	X+, r24
    4e98:	9c 93       	st	X, r25
    4e9a:	13 97       	sbiw	r26, 0x03	; 3
    4e9c:	e0 e0       	ldi	r30, 0x00	; 0
    4e9e:	f0 e0       	ldi	r31, 0x00	; 0
    4ea0:	d8 01       	movw	r26, r16
    4ea2:	12 96       	adiw	r26, 0x02	; 2
    4ea4:	8d 91       	ld	r24, X+
    4ea6:	9c 91       	ld	r25, X
    4ea8:	13 97       	sbiw	r26, 0x03	; 3
    4eaa:	00 97       	sbiw	r24, 0x00	; 0
    4eac:	19 f0       	breq	.+6      	; 0x4eb4 <free+0xf0>
    4eae:	f8 01       	movw	r30, r16
    4eb0:	8c 01       	movw	r16, r24
    4eb2:	f6 cf       	rjmp	.-20     	; 0x4ea0 <free+0xdc>
    4eb4:	8d 91       	ld	r24, X+
    4eb6:	9c 91       	ld	r25, X
    4eb8:	98 01       	movw	r18, r16
    4eba:	2e 5f       	subi	r18, 0xFE	; 254
    4ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    4ebe:	82 0f       	add	r24, r18
    4ec0:	93 1f       	adc	r25, r19
    4ec2:	20 91 b9 23 	lds	r18, 0x23B9
    4ec6:	30 91 ba 23 	lds	r19, 0x23BA
    4eca:	28 17       	cp	r18, r24
    4ecc:	39 07       	cpc	r19, r25
    4ece:	69 f4       	brne	.+26     	; 0x4eea <free+0x126>
    4ed0:	30 97       	sbiw	r30, 0x00	; 0
    4ed2:	29 f4       	brne	.+10     	; 0x4ede <free+0x11a>
    4ed4:	10 92 bb 23 	sts	0x23BB, r1
    4ed8:	10 92 bc 23 	sts	0x23BC, r1
    4edc:	02 c0       	rjmp	.+4      	; 0x4ee2 <free+0x11e>
    4ede:	12 82       	std	Z+2, r1	; 0x02
    4ee0:	13 82       	std	Z+3, r1	; 0x03
    4ee2:	00 93 b9 23 	sts	0x23B9, r16
    4ee6:	10 93 ba 23 	sts	0x23BA, r17
    4eea:	df 91       	pop	r29
    4eec:	cf 91       	pop	r28
    4eee:	1f 91       	pop	r17
    4ef0:	0f 91       	pop	r16
    4ef2:	08 95       	ret

00004ef4 <memcpy>:
    4ef4:	fb 01       	movw	r30, r22
    4ef6:	dc 01       	movw	r26, r24
    4ef8:	02 c0       	rjmp	.+4      	; 0x4efe <memcpy+0xa>
    4efa:	01 90       	ld	r0, Z+
    4efc:	0d 92       	st	X+, r0
    4efe:	41 50       	subi	r20, 0x01	; 1
    4f00:	50 40       	sbci	r21, 0x00	; 0
    4f02:	d8 f7       	brcc	.-10     	; 0x4efa <memcpy+0x6>
    4f04:	08 95       	ret

00004f06 <strcmp>:
    4f06:	fb 01       	movw	r30, r22
    4f08:	dc 01       	movw	r26, r24
    4f0a:	8d 91       	ld	r24, X+
    4f0c:	01 90       	ld	r0, Z+
    4f0e:	80 19       	sub	r24, r0
    4f10:	01 10       	cpse	r0, r1
    4f12:	d9 f3       	breq	.-10     	; 0x4f0a <strcmp+0x4>
    4f14:	99 0b       	sbc	r25, r25
    4f16:	08 95       	ret

00004f18 <__do_global_dtors>:
    4f18:	12 e0       	ldi	r17, 0x02	; 2
    4f1a:	ce e0       	ldi	r28, 0x0E	; 14
    4f1c:	d2 e0       	ldi	r29, 0x02	; 2
    4f1e:	00 e0       	ldi	r16, 0x00	; 0
    4f20:	06 c0       	rjmp	.+12     	; 0x4f2e <__do_global_dtors+0x16>
    4f22:	80 2f       	mov	r24, r16
    4f24:	fe 01       	movw	r30, r28
    4f26:	0e 94 14 26 	call	0x4c28	; 0x4c28 <__tablejump2__>
    4f2a:	21 96       	adiw	r28, 0x01	; 1
    4f2c:	01 1d       	adc	r16, r1
    4f2e:	c0 31       	cpi	r28, 0x10	; 16
    4f30:	d1 07       	cpc	r29, r17
    4f32:	80 e0       	ldi	r24, 0x00	; 0
    4f34:	08 07       	cpc	r16, r24
    4f36:	a9 f7       	brne	.-22     	; 0x4f22 <__do_global_dtors+0xa>
    4f38:	f8 94       	cli

00004f3a <__stop_program>:
    4f3a:	ff cf       	rjmp	.-2      	; 0x4f3a <__stop_program>
