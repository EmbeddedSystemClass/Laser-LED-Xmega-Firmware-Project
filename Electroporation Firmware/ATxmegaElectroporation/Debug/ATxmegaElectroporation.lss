
ATxmegaElectroporation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000044fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ee  00802000  000044fe  00004592  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000240  008020ee  008020ee  00004680  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004680  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000046b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000860  00000000  00000000  000046f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ac39  00000000  00000000  00004f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021a8  00000000  00000000  0000fb89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002744  00000000  00000000  00011d31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002f38  00000000  00000000  00014478  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000479c  00000000  00000000  000173b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007ff5  00000000  00000000  0001bb4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000790  00000000  00000000  00023b41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 01 	jmp	0x378	; 0x378 <__dtors_end>
       4:	0c 94 78 09 	jmp	0x12f0	; 0x12f0 <__vector_1>
       8:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__vector_2>
       c:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <__vector_3>
      10:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__vector_4>
      14:	0c 94 3c 0a 	jmp	0x1478	; 0x1478 <__vector_5>
      18:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__vector_6>
      1c:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__vector_7>
      20:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__vector_8>
      24:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <__vector_9>
      28:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <__vector_10>
      2c:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <__vector_11>
      30:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <__vector_12>
      34:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <__vector_13>
      38:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__vector_14>
      3c:	0c 94 26 0c 	jmp	0x184c	; 0x184c <__vector_15>
      40:	0c 94 57 0c 	jmp	0x18ae	; 0x18ae <__vector_16>
      44:	0c 94 88 0c 	jmp	0x1910	; 0x1910 <__vector_17>
      48:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <__vector_18>
      4c:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <__vector_19>
      50:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__vector_20>
      54:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <__vector_21>
      58:	0c 94 7d 0d 	jmp	0x1afa	; 0x1afa <__vector_22>
      5c:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__vector_23>
      60:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <__vector_24>
      64:	0c 94 10 0e 	jmp	0x1c20	; 0x1c20 <__vector_25>
      68:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <__vector_26>
      6c:	0c 94 72 0e 	jmp	0x1ce4	; 0x1ce4 <__vector_27>
      70:	0c 94 a3 0e 	jmp	0x1d46	; 0x1d46 <__vector_28>
      74:	0c 94 d4 0e 	jmp	0x1da8	; 0x1da8 <__vector_29>
      78:	0c 94 05 0f 	jmp	0x1e0a	; 0x1e0a <__vector_30>
      7c:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <__vector_31>
      80:	0c 94 67 0f 	jmp	0x1ece	; 0x1ece <__vector_32>
      84:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <__vector_33>
      88:	0c 94 c9 0f 	jmp	0x1f92	; 0x1f92 <__vector_34>
      8c:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__vector_35>
      90:	0c 94 2b 10 	jmp	0x2056	; 0x2056 <__vector_36>
      94:	0c 94 5c 10 	jmp	0x20b8	; 0x20b8 <__vector_37>
      98:	0c 94 8d 10 	jmp	0x211a	; 0x211a <__vector_38>
      9c:	0c 94 be 10 	jmp	0x217c	; 0x217c <__vector_39>
      a0:	0c 94 ef 10 	jmp	0x21de	; 0x21de <__vector_40>
      a4:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__vector_41>
      a8:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__vector_42>
      ac:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__vector_43>
      b0:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__vector_44>
      b4:	0c 94 e4 11 	jmp	0x23c8	; 0x23c8 <__vector_45>
      b8:	0c 94 15 12 	jmp	0x242a	; 0x242a <__vector_46>
      bc:	0c 94 46 12 	jmp	0x248c	; 0x248c <__vector_47>
      c0:	0c 94 77 12 	jmp	0x24ee	; 0x24ee <__vector_48>
      c4:	0c 94 a8 12 	jmp	0x2550	; 0x2550 <__vector_49>
      c8:	0c 94 d9 12 	jmp	0x25b2	; 0x25b2 <__vector_50>
      cc:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__vector_51>
      d0:	0c 94 3b 13 	jmp	0x2676	; 0x2676 <__vector_52>
      d4:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__vector_53>
      d8:	0c 94 9d 13 	jmp	0x273a	; 0x273a <__vector_54>
      dc:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__vector_55>
      e0:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__vector_56>
      e4:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__vector_57>
      e8:	0c 94 61 14 	jmp	0x28c2	; 0x28c2 <__vector_58>
      ec:	0c 94 92 14 	jmp	0x2924	; 0x2924 <__vector_59>
      f0:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__vector_60>
      f4:	0c 94 f4 14 	jmp	0x29e8	; 0x29e8 <__vector_61>
      f8:	0c 94 25 15 	jmp	0x2a4a	; 0x2a4a <__vector_62>
      fc:	0c 94 56 15 	jmp	0x2aac	; 0x2aac <__vector_63>
     100:	0c 94 87 15 	jmp	0x2b0e	; 0x2b0e <__vector_64>
     104:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__vector_65>
     108:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__vector_66>
     10c:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <__vector_67>
     110:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <__vector_68>
     114:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__vector_69>
     118:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__vector_70>
     11c:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <__vector_71>
     120:	0c 94 0f 17 	jmp	0x2e1e	; 0x2e1e <__vector_72>
     124:	0c 94 40 17 	jmp	0x2e80	; 0x2e80 <__vector_73>
     128:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <__vector_74>
     12c:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__bad_interrupt>
     130:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__bad_interrupt>
     134:	0c 94 a2 17 	jmp	0x2f44	; 0x2f44 <__vector_77>
     138:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <__vector_78>
     13c:	0c 94 04 18 	jmp	0x3008	; 0x3008 <__vector_79>
     140:	0c 94 35 18 	jmp	0x306a	; 0x306a <__vector_80>
     144:	0c 94 66 18 	jmp	0x30cc	; 0x30cc <__vector_81>
     148:	0c 94 97 18 	jmp	0x312e	; 0x312e <__vector_82>
     14c:	0c 94 c8 18 	jmp	0x3190	; 0x3190 <__vector_83>
     150:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__vector_84>
     154:	0c 94 2a 19 	jmp	0x3254	; 0x3254 <__vector_85>
     158:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <__vector_86>
     15c:	0c 94 8c 19 	jmp	0x3318	; 0x3318 <__vector_87>
     160:	0c 94 bd 19 	jmp	0x337a	; 0x337a <__vector_88>
     164:	0c 94 ee 19 	jmp	0x33dc	; 0x33dc <__vector_89>
     168:	0c 94 1f 1a 	jmp	0x343e	; 0x343e <__vector_90>
     16c:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <__vector_91>
     170:	0c 94 81 1a 	jmp	0x3502	; 0x3502 <__vector_92>
     174:	0c 94 b2 1a 	jmp	0x3564	; 0x3564 <__vector_93>
     178:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__bad_interrupt>
     17c:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__bad_interrupt>
     180:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__bad_interrupt>
     184:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__bad_interrupt>
     188:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__bad_interrupt>
     18c:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__bad_interrupt>
     190:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__bad_interrupt>
     194:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__bad_interrupt>
     198:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__bad_interrupt>
     19c:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__bad_interrupt>
     1a0:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <__vector_104>
     1a4:	0c 94 14 1b 	jmp	0x3628	; 0x3628 <__vector_105>
     1a8:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__bad_interrupt>
     1ac:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__bad_interrupt>
     1b0:	0c 94 45 1b 	jmp	0x368a	; 0x368a <__vector_108>
     1b4:	0c 94 76 1b 	jmp	0x36ec	; 0x36ec <__vector_109>
     1b8:	0c 94 a7 1b 	jmp	0x374e	; 0x374e <__vector_110>
     1bc:	0c 94 d8 1b 	jmp	0x37b0	; 0x37b0 <__vector_111>
     1c0:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__vector_112>
     1c4:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <__vector_113>
     1c8:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__bad_interrupt>
     1cc:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__bad_interrupt>
     1d0:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__bad_interrupt>
     1d4:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__bad_interrupt>
     1d8:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__bad_interrupt>
     1dc:	0c 94 6b 1c 	jmp	0x38d6	; 0x38d6 <__vector_119>
     1e0:	0c 94 9c 1c 	jmp	0x3938	; 0x3938 <__vector_120>
     1e4:	0c 94 cd 1c 	jmp	0x399a	; 0x399a <__vector_121>
     1e8:	71 03       	mulsu	r23, r17
     1ea:	8b 03       	fmulsu	r16, r19
     1ec:	8b 03       	fmulsu	r16, r19
     1ee:	8b 03       	fmulsu	r16, r19
     1f0:	8b 03       	fmulsu	r16, r19
     1f2:	8b 03       	fmulsu	r16, r19
     1f4:	8b 03       	fmulsu	r16, r19
     1f6:	8b 03       	fmulsu	r16, r19
     1f8:	8b 03       	fmulsu	r16, r19
     1fa:	8b 03       	fmulsu	r16, r19
     1fc:	8b 03       	fmulsu	r16, r19
     1fe:	8b 03       	fmulsu	r16, r19
     200:	8b 03       	fmulsu	r16, r19
     202:	8b 03       	fmulsu	r16, r19
     204:	8b 03       	fmulsu	r16, r19
     206:	8b 03       	fmulsu	r16, r19
     208:	8b 03       	fmulsu	r16, r19
     20a:	8b 03       	fmulsu	r16, r19
     20c:	8b 03       	fmulsu	r16, r19
     20e:	8b 03       	fmulsu	r16, r19
     210:	8b 03       	fmulsu	r16, r19
     212:	8b 03       	fmulsu	r16, r19
     214:	8b 03       	fmulsu	r16, r19
     216:	74 03       	mulsu	r23, r20
     218:	8b 03       	fmulsu	r16, r19
     21a:	78 03       	fmul	r23, r16
     21c:	8b 03       	fmulsu	r16, r19
     21e:	7c 03       	fmul	r23, r20
     220:	88 03       	fmulsu	r16, r16
     222:	8b 03       	fmulsu	r16, r19
     224:	80 03       	fmuls	r16, r16
     226:	84 03       	fmuls	r16, r20
     228:	f2 04       	cpc	r15, r2
     22a:	f6 04       	cpc	r15, r6
     22c:	b5 05       	cpc	r27, r5
     22e:	e4 05       	cpc	r30, r4
     230:	2a 07       	cpc	r18, r26
     232:	18 06       	cpc	r1, r24
     234:	4a 06       	cpc	r4, r26
     236:	a6 06       	cpc	r10, r22
     238:	02 07       	cpc	r16, r18
     23a:	29 1f       	adc	r18, r25
     23c:	29 1f       	adc	r18, r25
     23e:	31 1f       	adc	r19, r17
     240:	39 1f       	adc	r19, r25
     242:	44 1f       	adc	r20, r20
     244:	9c 1f       	adc	r25, r28
     246:	a3 1f       	adc	r26, r19
     248:	cf 1f       	adc	r28, r31
     24a:	cf 1f       	adc	r28, r31
     24c:	ce 1f       	adc	r28, r30
     24e:	ce 1f       	adc	r28, r30

00000250 <__trampolines_start>:
     250:	0c 94 88 03 	jmp	0x710	; 0x710 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x5a>
     254:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x42>
     258:	0c 94 84 03 	jmp	0x708	; 0x708 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x52>
     25c:	0c 94 84 04 	jmp	0x908	; 0x908 <_GLOBAL__sub_D_timer>
     260:	0c 94 dc 20 	jmp	0x41b8	; 0x41b8 <_ZN9CMBSender21OnTransactionCallbackEPhj>
     264:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <_ZN9CMBSender13OnReceiveByteEh+0x22>
     268:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     26c:	0c 94 b8 1d 	jmp	0x3b70	; 0x3b70 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>
     270:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <_ZN4CSPI16StaticOnTransmitEPv>
     274:	0c 94 4d 08 	jmp	0x109a	; 0x109a <_ZN7CTimerC5StartEj>
     278:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <_ZN7CTimerC4StopEv>
     27c:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <_ZN16CLaserControlApp3RunEv+0x320>
     280:	0c 94 08 1e 	jmp	0x3c10	; 0x3c10 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>
     284:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x3a>
     288:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <_ZN16CLaserControlApp3RunEv+0x254>
     28c:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     290:	0c 94 ce 1f 	jmp	0x3f9c	; 0x3f9c <_ZN9CMBSender13OnReceiveByteEh+0x16c>
     294:	0c 94 73 1e 	jmp	0x3ce6	; 0x3ce6 <_ZN16CMBEventsHandler15AllocateBuffersEjj>
     298:	0c 94 18 06 	jmp	0xc30	; 0xc30 <_ZN16CLaserControlApp3RunEv+0x2bc>
     29c:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>
     2a0:	0c 94 9d 1e 	jmp	0x3d3a	; 0x3d3a <_ZN9CMBSender18OnVariableReceivedEjPjj>
     2a4:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <_ZN7CTimerC8SetCOMPBEj>
     2a8:	0c 94 89 08 	jmp	0x1112	; 0x1112 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     2ac:	0c 94 8c 03 	jmp	0x718	; 0x718 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>
     2b0:	0c 94 8b 03 	jmp	0x716	; 0x716 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x60>
     2b4:	0c 94 84 08 	jmp	0x1108	; 0x1108 <_ZN7CTimerC8SetCOMPDEj>
     2b8:	0c 94 bf 08 	jmp	0x117e	; 0x117e <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     2bc:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>
     2c0:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     2c4:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <_ZN16CLaserControlApp3RunEv+0x4e0>
     2c8:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>
     2cc:	0c 94 80 03 	jmp	0x700	; 0x700 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x4a>
     2d0:	0c 94 80 02 	jmp	0x500	; 0x500 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>
     2d4:	0c 94 4e 02 	jmp	0x49c	; 0x49c <_ZN10CDGUSUSART14IsTransmittingEv>
     2d8:	0c 94 d2 1f 	jmp	0x3fa4	; 0x3fa4 <_ZN9CMBSender18OnUSARTRxInterruptEPv>
     2dc:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>
     2e0:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <_ZN16CLaserControlApp13OnTimerStaticEPv>
     2e4:	0c 94 02 07 	jmp	0xe04	; 0xe04 <_ZN16CLaserControlApp3RunEv+0x490>
     2e8:	0c 94 50 1e 	jmp	0x3ca0	; 0x3ca0 <_ZN16CMBEventsHandler13FillVarDataRqEjj>
     2ec:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>
     2f0:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>
     2f4:	0c 94 7f 04 	jmp	0x8fe	; 0x8fe <_GLOBAL__sub_I_timer>
     2f8:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x32>
     2fc:	0c 94 fe 1c 	jmp	0x39fc	; 0x39fc <__cxa_pure_virtual>
     300:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x2c>
     304:	0c 94 39 1f 	jmp	0x3e72	; 0x3e72 <_ZN9CMBSender13OnReceiveByteEh+0x42>
     308:	0c 94 9c 1f 	jmp	0x3f38	; 0x3f38 <_ZN9CMBSender13OnReceiveByteEh+0x108>
     30c:	0c 94 48 02 	jmp	0x490	; 0x490 <_ZN10CDGUSUSART15GetReceivedByteEv>
     310:	0c 94 01 1d 	jmp	0x3a02	; 0x3a02 <_GLOBAL__sub_I_dacSPI>
     314:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <_ZN7CTimerC8SetCOMPAEj>
     318:	0c 94 a3 1f 	jmp	0x3f46	; 0x3f46 <_ZN9CMBSender13OnReceiveByteEh+0x116>
     31c:	0c 94 37 20 	jmp	0x406e	; 0x406e <_ZN9CMBSender18OnUSARTTxInterruptEPv>
     320:	0c 94 44 1f 	jmp	0x3e88	; 0x3e88 <_ZN9CMBSender13OnReceiveByteEh+0x58>
     324:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <_ZN10CDGUSUSART11IsDataEmptyEv>
     328:	0c 94 1e 1d 	jmp	0x3a3c	; 0x3a3c <_GLOBAL__sub_D_dacSPI>
     32c:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <_ZN16CLaserControlApp3RunEv+0x70>
     330:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <_ZN16CLaserControlApp3RunEv+0x1f6>
     334:	0c 94 0d 02 	jmp	0x41a	; 0x41a <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
     338:	0c 94 32 08 	jmp	0x1064	; 0x1064 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     33c:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>
     340:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <_ZN7CTimerC8SetCOMPCEj>
     344:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <_ZN16CMBEventsHandler11FreeBuffersEv>
     348:	0c 94 ad 08 	jmp	0x115a	; 0x115a <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     34c:	0c 94 cf 1f 	jmp	0x3f9e	; 0x3f9e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
     350:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <_ZN10CDGUSUSART11IsReceivingEv>
     354:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <_ZN7CTimerC9SetPeriodEj>
     358:	0c 94 4b 02 	jmp	0x496	; 0x496 <_ZN10CDGUSUSART19SetTransmittingByteEh>
     35c:	0c 94 ac 1e 	jmp	0x3d58	; 0x3d58 <_ZN9CMBSender18OnRegisterReceivedEhPhh>
     360:	0c 94 31 1f 	jmp	0x3e62	; 0x3e62 <_ZN9CMBSender13OnReceiveByteEh+0x32>
     364:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <_ZN16CLaserControlApp3RunEv+0x78>
     368:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <_ZN16CLaserControlApp3RunEv+0x3d8>
     36c:	0c 94 e9 1d 	jmp	0x3bd2	; 0x3bd2 <_ZN16CMBEventsHandler13FillRegDataRqEhh>

00000370 <__ctors_start>:
     370:	7f 04       	cpc	r7, r15
     372:	01 1d       	adc	r16, r1

00000374 <__ctors_end>:
     374:	84 04       	cpc	r8, r4
     376:	1e 1d       	adc	r17, r14

00000378 <__dtors_end>:
     378:	11 24       	eor	r1, r1
     37a:	1f be       	out	0x3f, r1	; 63
     37c:	cf ef       	ldi	r28, 0xFF	; 255
     37e:	cd bf       	out	0x3d, r28	; 61
     380:	df e3       	ldi	r29, 0x3F	; 63
     382:	de bf       	out	0x3e, r29	; 62
     384:	00 e0       	ldi	r16, 0x00	; 0
     386:	0c bf       	out	0x3c, r16	; 60

00000388 <__do_copy_data>:
     388:	10 e2       	ldi	r17, 0x20	; 32
     38a:	a0 e0       	ldi	r26, 0x00	; 0
     38c:	b0 e2       	ldi	r27, 0x20	; 32
     38e:	ee ef       	ldi	r30, 0xFE	; 254
     390:	f4 e4       	ldi	r31, 0x44	; 68
     392:	00 e0       	ldi	r16, 0x00	; 0
     394:	0b bf       	out	0x3b, r16	; 59
     396:	02 c0       	rjmp	.+4      	; 0x39c <__do_copy_data+0x14>
     398:	07 90       	elpm	r0, Z+
     39a:	0d 92       	st	X+, r0
     39c:	ae 3e       	cpi	r26, 0xEE	; 238
     39e:	b1 07       	cpc	r27, r17
     3a0:	d9 f7       	brne	.-10     	; 0x398 <__do_copy_data+0x10>

000003a2 <__do_clear_bss>:
     3a2:	23 e2       	ldi	r18, 0x23	; 35
     3a4:	ae ee       	ldi	r26, 0xEE	; 238
     3a6:	b0 e2       	ldi	r27, 0x20	; 32
     3a8:	01 c0       	rjmp	.+2      	; 0x3ac <.do_clear_bss_start>

000003aa <.do_clear_bss_loop>:
     3aa:	1d 92       	st	X+, r1

000003ac <.do_clear_bss_start>:
     3ac:	ae 32       	cpi	r26, 0x2E	; 46
     3ae:	b2 07       	cpc	r27, r18
     3b0:	e1 f7       	brne	.-8      	; 0x3aa <.do_clear_bss_loop>

000003b2 <__do_global_ctors>:
     3b2:	11 e0       	ldi	r17, 0x01	; 1
     3b4:	ca eb       	ldi	r28, 0xBA	; 186
     3b6:	d1 e0       	ldi	r29, 0x01	; 1
     3b8:	00 e0       	ldi	r16, 0x00	; 0
     3ba:	06 c0       	rjmp	.+12     	; 0x3c8 <__do_global_ctors+0x16>
     3bc:	21 97       	sbiw	r28, 0x01	; 1
     3be:	01 09       	sbc	r16, r1
     3c0:	80 2f       	mov	r24, r16
     3c2:	fe 01       	movw	r30, r28
     3c4:	0e 94 fe 20 	call	0x41fc	; 0x41fc <__tablejump2__>
     3c8:	c8 3b       	cpi	r28, 0xB8	; 184
     3ca:	d1 07       	cpc	r29, r17
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	08 07       	cpc	r16, r24
     3d0:	a9 f7       	brne	.-22     	; 0x3bc <__do_global_ctors+0xa>
     3d2:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <main>
     3d6:	0c 94 6d 22 	jmp	0x44da	; 0x44da <__do_global_dtors>

000003da <__bad_interrupt>:
     3da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003de <_ZN13CDGUSDatabaseC1Ev>:
#define F_CPU 32000000

#include "util/delay.h"

// default constructor
CDGUSDatabase::CDGUSDatabase()
     3de:	08 95       	ret

000003e0 <_ZN13CDGUSDatabaseD1Ev>:
{
} //CDGUSDatabase

// default destructor
CDGUSDatabase::~CDGUSDatabase()
     3e0:	08 95       	ret

000003e2 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>:
{
} //~CDGUSDatabase

void CDGUSDatabase::Initialize(CMBSender* sender, uint16_t vp)
{
     3e2:	fc 01       	movw	r30, r24
	// GUI class initialization
	m_cpSender = sender;
     3e4:	62 83       	std	Z+2, r22	; 0x02
     3e6:	73 83       	std	Z+3, r23	; 0x03
	vp_addr = (vp >> 8) | (vp << 8);
     3e8:	94 2f       	mov	r25, r20
     3ea:	85 2f       	mov	r24, r21
     3ec:	84 83       	std	Z+4, r24	; 0x04
     3ee:	95 83       	std	Z+5, r25	; 0x05
	vp_addres = vp;
     3f0:	46 83       	std	Z+6, r20	; 0x06
     3f2:	57 83       	std	Z+7, r21	; 0x07
	data_transaction = 0;
     3f4:	10 82       	st	Z, r1
     3f6:	11 82       	std	Z+1, r1	; 0x01
     3f8:	08 95       	ret

000003fa <_ZN13CDGUSDatabase18OnVariableReceivedEjPjj>:
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&en, sizeof(en));
	m_cpSender->WaitMODBUSTransmitter();
}

void CDGUSDatabase::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	ec 01       	movw	r28, r24
     400:	ba 01       	movw	r22, r20
	if (data_transaction != 0)
     402:	88 81       	ld	r24, Y
     404:	99 81       	ldd	r25, Y+1	; 0x01
     406:	00 97       	sbiw	r24, 0x00	; 0
     408:	19 f0       	breq	.+6      	; 0x410 <_ZN13CDGUSDatabase18OnVariableReceivedEjPjj+0x16>
		memcpy(data_transaction, data, length);
     40a:	a9 01       	movw	r20, r18
     40c:	0e 94 64 22 	call	0x44c8	; 0x44c8 <memcpy>
	data_transaction = 0;
     410:	18 82       	st	Y, r1
     412:	19 82       	std	Y+1, r1	; 0x01
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	08 95       	ret

0000041a <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
     41a:	0f 93       	push	r16
	PORTD.DIRSET = PIN3_bm; // Set TX to output
     41c:	e0 e6       	ldi	r30, 0x60	; 96
     41e:	f6 e0       	ldi	r31, 0x06	; 6
     420:	88 e0       	ldi	r24, 0x08	; 8
     422:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; // Set RX to input
     424:	84 e0       	ldi	r24, 0x04	; 4
     426:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN2CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
     428:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
     42a:	13 8a       	std	Z+19, r1	; 0x13
	
	// Turn on interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_LO_gc/* | USART_DREINTLVL_LO_gc*/;
     42c:	e0 ea       	ldi	r30, 0xA0	; 160
     42e:	f9 e0       	ldi	r31, 0x09	; 9
     430:	84 e1       	ldi	r24, 0x14	; 20
     432:	83 83       	std	Z+3, r24	; 0x03
	
	// Enable RX, TX
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     434:	88 e1       	ldi	r24, 0x18	; 24
     436:	84 83       	std	Z+4, r24	; 0x04
	
	// Double transmission speed
#ifdef U2X
	USARTD0.CTRLB |=  (1 << USART_CLK2X_bm);
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
     438:	84 81       	ldd	r24, Z+4	; 0x04
     43a:	84 83       	std	Z+4, r24	; 0x04
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
     43c:	41 30       	cpi	r20, 0x01	; 1
     43e:	19 f0       	breq	.+6      	; 0x446 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x2c>
     440:	42 30       	cpi	r20, 0x02	; 2
     442:	19 f0       	breq	.+6      	; 0x44a <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x30>
     444:	04 c0       	rjmp	.+8      	; 0x44e <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
	{
		case PARITY_DISABLE:
			temp |= USART_PMODE_DISABLED_gc;
		break;
		case PARITY_EVEN:
			temp |= USART_PMODE_EVEN_gc;
     446:	80 e2       	ldi	r24, 0x20	; 32
     448:	03 c0       	rjmp	.+6      	; 0x450 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
		break;
		case PARITY_ODD:
			temp |= USART_PMODE_ODD_gc;
     44a:	80 e3       	ldi	r24, 0x30	; 48
		break;
     44c:	01 c0       	rjmp	.+2      	; 0x450 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
#endif

	// Parity param set
	uint8_t temp = 0;
     44e:	80 e0       	ldi	r24, 0x00	; 0
			temp |= USART_PMODE_ODD_gc;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
     450:	22 23       	and	r18, r18
     452:	19 f0       	breq	.+6      	; 0x45a <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x40>
     454:	21 30       	cpi	r18, 0x01	; 1
     456:	19 f0       	breq	.+6      	; 0x45e <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x44>
     458:	03 c0       	rjmp	.+6      	; 0x460 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
	{
		case STOPBITS_1BIT:
			temp &= ~USART_SBMODE_bm;
     45a:	87 7f       	andi	r24, 0xF7	; 247
		break;
     45c:	01 c0       	rjmp	.+2      	; 0x460 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
		case STOPBITS_2BIT:
			temp |=  USART_SBMODE_bm;
     45e:	88 60       	ori	r24, 0x08	; 8
		break;
	}
	
	// USART mode asynchronous, 8bit
	USARTD0.CTRLC = (Async?USART_CMODE_ASYNCHRONOUS_gc:USART_CMODE_SYNCHRONOUS_gc) | USART_CHSIZE_8BIT_gc | temp;
     460:	01 11       	cpse	r16, r1
     462:	02 c0       	rjmp	.+4      	; 0x468 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x4e>
     464:	93 e4       	ldi	r25, 0x43	; 67
     466:	01 c0       	rjmp	.+2      	; 0x46a <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x50>
     468:	93 e0       	ldi	r25, 0x03	; 3
     46a:	89 2b       	or	r24, r25
     46c:	e0 ea       	ldi	r30, 0xA0	; 160
     46e:	f9 e0       	ldi	r31, 0x09	; 9
     470:	85 83       	std	Z+5, r24	; 0x05
	
	// Set baud rate
	USARTD0.BAUDCTRLA = bsel_table[baud];
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	db 01       	movw	r26, r22
     476:	aa 5d       	subi	r26, 0xDA	; 218
     478:	bf 4d       	sbci	r27, 0xDF	; 223
     47a:	8c 91       	ld	r24, X
     47c:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (((int8_t)(16 + bscale_table[baud])) << USART_BSCALE0_bp) | ((bsel_table[baud] >> 8) & 0x0F);	
     47e:	db 01       	movw	r26, r22
     480:	aa 5f       	subi	r26, 0xFA	; 250
     482:	bf 4d       	sbci	r27, 0xDF	; 223
     484:	8c 91       	ld	r24, X
     486:	82 95       	swap	r24
     488:	80 7f       	andi	r24, 0xF0	; 240
     48a:	87 83       	std	Z+7, r24	; 0x07
} //CUSART
     48c:	0f 91       	pop	r16
     48e:	08 95       	ret

00000490 <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return USARTD0.DATA;
     490:	80 91 a0 09 	lds	r24, 0x09A0
}
     494:	08 95       	ret

00000496 <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( ( USARTD0.STATUS & (1<<USART_DREIF_bm)) );
	USARTD0.DATA = data;
     496:	60 93 a0 09 	sts	0x09A0, r22
     49a:	08 95       	ret

0000049c <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return !( USARTD0.STATUS & USART_TXCIF_bm);
     49c:	80 91 a1 09 	lds	r24, 0x09A1
     4a0:	86 fb       	bst	r24, 6
     4a2:	88 27       	eor	r24, r24
     4a4:	80 f9       	bld	r24, 0
}
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	89 27       	eor	r24, r25
     4aa:	08 95       	ret

000004ac <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return !( USARTD0.STATUS & USART_RXCIF_bm);
     4ac:	80 91 a1 09 	lds	r24, 0x09A1
     4b0:	80 95       	com	r24
}
     4b2:	88 1f       	adc	r24, r24
     4b4:	88 27       	eor	r24, r24
     4b6:	88 1f       	adc	r24, r24
     4b8:	08 95       	ret

000004ba <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return !( USARTD0.STATUS & USART_DREIF_bm);
     4ba:	80 91 a1 09 	lds	r24, 0x09A1
     4be:	85 fb       	bst	r24, 5
     4c0:	88 27       	eor	r24, r24
     4c2:	80 f9       	bld	r24, 0
}
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	89 27       	eor	r24, r25
     4c8:	08 95       	ret

000004ca <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_RXC_vect_num] = sender;
     4ca:	60 93 99 22 	sts	0x2299, r22
     4ce:	70 93 9a 22 	sts	0x229A, r23
	InterruptFuncTable[USARTD0_RXC_vect_num] = callback;
     4d2:	40 93 a3 21 	sts	0x21A3, r20
     4d6:	50 93 a4 21 	sts	0x21A4, r21
     4da:	08 95       	ret

000004dc <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_TXC_vect_num] = sender;
     4dc:	60 93 9d 22 	sts	0x229D, r22
     4e0:	70 93 9e 22 	sts	0x229E, r23
	InterruptFuncTable[USARTD0_TXC_vect_num] = callback;
     4e4:	40 93 a7 21 	sts	0x21A7, r20
     4e8:	50 93 a8 21 	sts	0x21A8, r21
     4ec:	08 95       	ret

000004ee <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMARxTrig(DMA_CH_t *dma_channel)
{
     4ee:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_RXC_gc;
     4f0:	8b e6       	ldi	r24, 0x6B	; 107
     4f2:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->SRCADDR0 = (int)&USARTD0.DATA;
     4f4:	80 ea       	ldi	r24, 0xA0	; 160
     4f6:	80 87       	std	Z+8, r24	; 0x08
	dma_channel->SRCADDR1 = (int)&USARTD0.DATA >> 8;
     4f8:	89 e0       	ldi	r24, 0x09	; 9
     4fa:	81 87       	std	Z+9, r24	; 0x09
	dma_channel->SRCADDR2 = 0;
     4fc:	12 86       	std	Z+10, r1	; 0x0a
     4fe:	08 95       	ret

00000500 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMATxTrig(DMA_CH_t *dma_channel)
{
     500:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_DRE_gc;
     502:	8c e6       	ldi	r24, 0x6C	; 108
     504:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->DESTADDR0 = (int)&USARTD0.DATA;
     506:	80 ea       	ldi	r24, 0xA0	; 160
     508:	84 87       	std	Z+12, r24	; 0x0c
	dma_channel->DESTADDR1 = (int)&USARTD0.DATA >> 8;
     50a:	89 e0       	ldi	r24, 0x09	; 9
     50c:	85 87       	std	Z+13, r24	; 0x0d
	dma_channel->DESTADDR2 = 0;
     50e:	16 86       	std	Z+14, r1	; 0x0e
     510:	08 95       	ret

00000512 <_ZN10CDGUSUSARTC1Ev>:
								true, true, true, true, true, true, true, true, true, true,
								true, true};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	ec 01       	movw	r28, r24
     518:	0e 94 71 09 	call	0x12e2	; 0x12e2 <_ZN6CUSARTC1Ev>
     51c:	8d e4       	ldi	r24, 0x4D	; 77
     51e:	90 e2       	ldi	r25, 0x20	; 32
     520:	88 83       	st	Y, r24
     522:	99 83       	std	Y+1, r25	; 0x01
{
} //CDGUSUSART
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	08 95       	ret

0000052a <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
     52a:	2d e4       	ldi	r18, 0x4D	; 77
     52c:	30 e2       	ldi	r19, 0x20	; 32
     52e:	fc 01       	movw	r30, r24
     530:	20 83       	st	Z, r18
     532:	31 83       	std	Z+1, r19	; 0x01
     534:	0e 94 77 09 	call	0x12ee	; 0x12ee <_ZN6CUSARTD1Ev>
     538:	08 95       	ret

0000053a <_ZN11CLaserBoardC1Ev>:
#include <avr/interrupt.h>
#include <avr/io.h>
#include <util/delay.h>

// default constructor
CLaserBoard::CLaserBoard()
     53a:	08 95       	ret

0000053c <_ZN11CLaserBoardD1Ev>:
{
} //CLaserBoard

// default destructor
CLaserBoard::~CLaserBoard()
     53c:	08 95       	ret

0000053e <_ZN11CLaserBoard12InitializeIOEv>:
} //~CLaserBoard

void CLaserBoard::InitializeIO()
{
	// Set all output
	PORTC.DIRSET = 0xFF;
     53e:	e0 e4       	ldi	r30, 0x40	; 64
     540:	f6 e0       	ldi	r31, 0x06	; 6
     542:	9f ef       	ldi	r25, 0xFF	; 255
     544:	91 83       	std	Z+1, r25	; 0x01
	
	// Configure all pins to "wired and"
	PORTC.PIN0CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     546:	88 ea       	ldi	r24, 0xA8	; 168
     548:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     54a:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.PIN2CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     54c:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     54e:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     550:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     552:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     554:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     556:	87 8b       	std	Z+23, r24	; 0x17
	
	// Set all down
	PORTC.OUT = 0x00;
     558:	14 82       	std	Z+4, r1	; 0x04
	
	// Buzzer pin initialize
	PORTE.DIRSET = PIN3_bm;
     55a:	e0 e8       	ldi	r30, 0x80	; 128
     55c:	f6 e0       	ldi	r31, 0x06	; 6
     55e:	88 e0       	ldi	r24, 0x08	; 8
     560:	81 83       	std	Z+1, r24	; 0x01
	
	// Configure
	PORTE.PIN3CTRL = PORT_OPC_TOTEM_gc;
     562:	13 8a       	std	Z+19, r1	; 0x13
	PORTE.OUT = 0;
     564:	14 82       	std	Z+4, r1	; 0x04
	
	// Configure all pins of PWM to inverted
	PORTF.PIN0CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     566:	e0 ea       	ldi	r30, 0xA0	; 160
     568:	f6 e0       	ldi	r31, 0x06	; 6
     56a:	80 ec       	ldi	r24, 0xC0	; 192
     56c:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     56e:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     570:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     572:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     574:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     576:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     578:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     57a:	87 8b       	std	Z+23, r24	; 0x17

	// Set all down
	PORTF.OUT = 0x00;
     57c:	14 82       	std	Z+4, r1	; 0x04

	// Set all output
	PORTF.DIRSET = 0xFF;
     57e:	91 83       	std	Z+1, r25	; 0x01
	
	// Set PD0 and PD4
	PORTD.DIRSET = PIN0_bm | PIN4_bm;
     580:	e0 e6       	ldi	r30, 0x60	; 96
     582:	f6 e0       	ldi	r31, 0x06	; 6
     584:	91 e1       	ldi	r25, 0x11	; 17
     586:	91 83       	std	Z+1, r25	; 0x01
	
	// Configure all pins to "wired and"
	PORTD.PIN0CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     588:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN4CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     58a:	84 8b       	std	Z+20, r24	; 0x14
	
	PORTD.OUT = 0;//PIN0_bm;
     58c:	14 82       	std	Z+4, r1	; 0x04
	
	// Enable low level interrupts
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
     58e:	e0 ea       	ldi	r30, 0xA0	; 160
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	82 81       	ldd	r24, Z+2	; 0x02
     594:	81 60       	ori	r24, 0x01	; 1
     596:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
     598:	82 81       	ldd	r24, Z+2	; 0x02
     59a:	82 60       	ori	r24, 0x02	; 2
     59c:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_HILVLEN_bm;
     59e:	82 81       	ldd	r24, Z+2	; 0x02
     5a0:	84 60       	ori	r24, 0x04	; 4
     5a2:	82 83       	std	Z+2, r24	; 0x02
     5a4:	08 95       	ret

000005a6 <_ZN11CLaserBoard15InitializeClockEv>:

void CLaserBoard::InitializeClock()
{
	//-----------------------
	// External 16000.000 kHz oscillator initialization
	OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
     5a6:	e0 e5       	ldi	r30, 0x50	; 80
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	8b ec       	ldi	r24, 0xCB	; 203
     5ac:	82 83       	std	Z+2, r24	; 0x02
	// Enable the external oscillator
	OSC.CTRL |= OSC_XOSCEN_bm;
     5ae:	80 81       	ld	r24, Z
     5b0:	88 60       	ori	r24, 0x08	; 8
     5b2:	80 83       	st	Z, r24
	// Wait for the external oscillator to stabilize
	while ((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
     5b4:	81 81       	ldd	r24, Z+1	; 0x01
     5b6:	83 ff       	sbrs	r24, 3
     5b8:	fd cf       	rjmp	.-6      	; 0x5b4 <_ZN11CLaserBoard15InitializeClockEv+0xe>
	// PLL initialization
	// PLL clock source: External Osc. or Clock
	// PLL multiplication factor: 2
	// PLL frequency: 32.000000 MHz
	// Set the PLL clock source and multiplication factor
	unsigned char n = (OSC.PLLCTRL & (~(OSC_PLLSRC_gm | OSC_PLLFAC_gm))) |    OSC_PLLSRC_XOSC_gc | OSC_PLLFAC2_bm;
     5ba:	e0 e5       	ldi	r30, 0x50	; 80
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	85 81       	ldd	r24, Z+5	; 0x05
	CCP = CCP_IOREG_gc;
     5c0:	98 ed       	ldi	r25, 0xD8	; 216
     5c2:	94 bf       	out	0x34, r25	; 52
	OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | OSC_PLLFAC2_bm;//n;
     5c4:	84 ec       	ldi	r24, 0xC4	; 196
     5c6:	85 83       	std	Z+5, r24	; 0x05
	// Enable the PLL
	OSC.CTRL |= OSC_PLLEN_bm;
     5c8:	80 81       	ld	r24, Z
     5ca:	80 61       	ori	r24, 0x10	; 16
     5cc:	80 83       	st	Z, r24
	// ClkPer4: 32000.000 kHz
	// ClkPer2: 32000.000 kHz
	// ClkPer:  32000.000 kHz
	// ClkCPU:  32000.000 kHz
	n = (CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
     5ce:	e0 e4       	ldi	r30, 0x40	; 64
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	81 81       	ldd	r24, Z+1	; 0x01
	CCP = CCP_IOREG_gc;
     5d4:	94 bf       	out	0x34, r25	; 52
	CLK.PSCTRL = CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;//n;
     5d6:	11 82       	std	Z+1, r1	; 0x01
	// Wait for the PLL to stabilize
	while ((OSC.STATUS & OSC_PLLRDY_bm)==0);
     5d8:	e0 e5       	ldi	r30, 0x50	; 80
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	81 81       	ldd	r24, Z+1	; 0x01
     5de:	84 ff       	sbrs	r24, 4
     5e0:	fd cf       	rjmp	.-6      	; 0x5dc <_ZN11CLaserBoard15InitializeClockEv+0x36>
	// Select the system clock source: Phase Locked Loop
	n = (CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_PLL_gc;
     5e2:	e0 e4       	ldi	r30, 0x40	; 64
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	80 81       	ld	r24, Z
     5e8:	88 7f       	andi	r24, 0xF8	; 248
     5ea:	84 60       	ori	r24, 0x04	; 4
	CCP = CCP_IOREG_gc;
     5ec:	98 ed       	ldi	r25, 0xD8	; 216
     5ee:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = n;
     5f0:	80 83       	st	Z, r24
	// Disable the unused oscillators: 2 MHz, 32 MHz, internal 32 kHz
	OSC.CTRL &= ~(OSC_RC2MEN_bm | OSC_RC32MEN_bm | OSC_RC32KEN_bm);
     5f2:	a0 e5       	ldi	r26, 0x50	; 80
     5f4:	b0 e0       	ldi	r27, 0x00	; 0
     5f6:	8c 91       	ld	r24, X
     5f8:	88 7f       	andi	r24, 0xF8	; 248
     5fa:	8c 93       	st	X, r24
	// Lock the CLK.CTRL and CLK.PSCTRL registers
	n = CLK.LOCK | CLK_LOCK_bm;
     5fc:	82 81       	ldd	r24, Z+2	; 0x02
	CCP = CCP_IOREG_gc;
     5fe:	94 bf       	out	0x34, r25	; 52
	CLK.LOCK = CLK_LOCK_bm;//n;
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	82 83       	std	Z+2, r24	; 0x02
	// Peripheral Clock output: Disabled
	PORTCFG.CLKEVOUT = (PORTCFG.CLKEVOUT & (~PORTCFG_CLKOUT_gm)) | PORTCFG_CLKOUT_OFF_gc;
     604:	e0 eb       	ldi	r30, 0xB0	; 176
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	84 81       	ldd	r24, Z+4	; 0x04
     60a:	8c 7f       	andi	r24, 0xFC	; 252
     60c:	84 83       	std	Z+4, r24	; 0x04
     60e:	08 95       	ret

00000610 <_ZN11CLaserBoard8Relay1OnEv>:
	//-----------------------
}

void CLaserBoard::Relay1On()
{
	PORTD.DIRCLR = PIN0_bm;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	80 93 62 06 	sts	0x0662, r24
     616:	08 95       	ret

00000618 <_ZN11CLaserBoard8Relay2OnEv>:
}

void CLaserBoard::Relay2On()
{
	PORTD.DIRCLR = PIN4_bm;
     618:	80 e1       	ldi	r24, 0x10	; 16
     61a:	80 93 62 06 	sts	0x0662, r24
     61e:	08 95       	ret

00000620 <_ZN11CLaserBoard9Relay1OffEv>:
}

void CLaserBoard::Relay1Off()
{
	PORTD.DIRSET = PIN0_bm;
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	80 93 61 06 	sts	0x0661, r24
     626:	08 95       	ret

00000628 <_ZN11CLaserBoard9Relay2OffEv>:
}

void CLaserBoard::Relay2Off()
{
	PORTD.DIRSET = PIN4_bm;
     628:	80 e1       	ldi	r24, 0x10	; 16
     62a:	80 93 61 06 	sts	0x0661, r24
     62e:	08 95       	ret

00000630 <_ZN11CLaserBoard4BeepEv>:
}

void CLaserBoard::Beep()
{
	cli();
     630:	f8 94       	cli
     632:	84 e6       	ldi	r24, 0x64	; 100
     634:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 100; i++)
	{
		PORTE.OUTSET = PIN3_bm;
     636:	e0 e8       	ldi	r30, 0x80	; 128
     638:	f6 e0       	ldi	r31, 0x06	; 6
     63a:	28 e0       	ldi	r18, 0x08	; 8
     63c:	25 83       	std	Z+5, r18	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     63e:	af e9       	ldi	r26, 0x9F	; 159
     640:	bf e0       	ldi	r27, 0x0F	; 15
     642:	11 97       	sbiw	r26, 0x01	; 1
     644:	f1 f7       	brne	.-4      	; 0x642 <_ZN11CLaserBoard4BeepEv+0x12>
     646:	00 c0       	rjmp	.+0      	; 0x648 <_ZN11CLaserBoard4BeepEv+0x18>
     648:	00 00       	nop
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
     64a:	26 83       	std	Z+6, r18	; 0x06
     64c:	af e9       	ldi	r26, 0x9F	; 159
     64e:	bf e0       	ldi	r27, 0x0F	; 15
     650:	11 97       	sbiw	r26, 0x01	; 1
     652:	f1 f7       	brne	.-4      	; 0x650 <_ZN11CLaserBoard4BeepEv+0x20>
     654:	00 c0       	rjmp	.+0      	; 0x656 <_ZN11CLaserBoard4BeepEv+0x26>
     656:	00 00       	nop
     658:	01 97       	sbiw	r24, 0x01	; 1

void CLaserBoard::Beep()
{
	cli();
	
	for (int i = 0; i < 100; i++)
     65a:	81 f7       	brne	.-32     	; 0x63c <_ZN11CLaserBoard4BeepEv+0xc>
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
		_delay_us(500);
	}
	
	sei();
     65c:	78 94       	sei
     65e:	08 95       	ret

00000660 <_ZN11CLaserBoard14BeepClassErrorEv>:
}

void CLaserBoard::BeepClassError()
{
	cli();
     660:	f8 94       	cli
     662:	45 e0       	ldi	r20, 0x05	; 5
     664:	50 e0       	ldi	r21, 0x00	; 0
	
	sei();
}

void CLaserBoard::BeepClassError()
{
     666:	64 e6       	ldi	r22, 0x64	; 100
     668:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
		{
			PORTE.OUTSET = PIN3_bm;
     66a:	e0 e8       	ldi	r30, 0x80	; 128
     66c:	f6 e0       	ldi	r31, 0x06	; 6
     66e:	28 e0       	ldi	r18, 0x08	; 8
     670:	1c c0       	rjmp	.+56     	; 0x6aa <_ZN11CLaserBoard14BeepClassErrorEv+0x4a>
     672:	25 83       	std	Z+5, r18	; 0x05
     674:	af e9       	ldi	r26, 0x9F	; 159
     676:	bf e0       	ldi	r27, 0x0F	; 15
     678:	11 97       	sbiw	r26, 0x01	; 1
     67a:	f1 f7       	brne	.-4      	; 0x678 <_ZN11CLaserBoard14BeepClassErrorEv+0x18>
     67c:	00 c0       	rjmp	.+0      	; 0x67e <_ZN11CLaserBoard14BeepClassErrorEv+0x1e>
     67e:	00 00       	nop
			_delay_us(500);
			PORTE.OUTCLR = PIN3_bm;
     680:	26 83       	std	Z+6, r18	; 0x06
     682:	af e9       	ldi	r26, 0x9F	; 159
     684:	bf e0       	ldi	r27, 0x0F	; 15
     686:	11 97       	sbiw	r26, 0x01	; 1
     688:	f1 f7       	brne	.-4      	; 0x686 <_ZN11CLaserBoard14BeepClassErrorEv+0x26>
     68a:	00 c0       	rjmp	.+0      	; 0x68c <_ZN11CLaserBoard14BeepClassErrorEv+0x2c>
     68c:	00 00       	nop
     68e:	01 97       	sbiw	r24, 0x01	; 1
{
	cli();
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
     690:	81 f7       	brne	.-32     	; 0x672 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     692:	bf ef       	ldi	r27, 0xFF	; 255
     694:	73 ec       	ldi	r23, 0xC3	; 195
     696:	89 e0       	ldi	r24, 0x09	; 9
     698:	b1 50       	subi	r27, 0x01	; 1
     69a:	70 40       	sbci	r23, 0x00	; 0
     69c:	80 40       	sbci	r24, 0x00	; 0
     69e:	e1 f7       	brne	.-8      	; 0x698 <_ZN11CLaserBoard14BeepClassErrorEv+0x38>
     6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <_ZN11CLaserBoard14BeepClassErrorEv+0x42>
     6a2:	00 00       	nop
     6a4:	41 50       	subi	r20, 0x01	; 1
     6a6:	51 09       	sbc	r21, r1

void CLaserBoard::BeepClassError()
{
	cli();
	
	for (int j = 0; j < 5; j++)
     6a8:	19 f0       	breq	.+6      	; 0x6b0 <_ZN11CLaserBoard14BeepClassErrorEv+0x50>
	
	sei();
}

void CLaserBoard::BeepClassError()
{
     6aa:	86 2f       	mov	r24, r22
     6ac:	93 2f       	mov	r25, r19
     6ae:	e1 cf       	rjmp	.-62     	; 0x672 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
			_delay_us(500);
		}
		_delay_ms(100);
	}
	
	sei();
     6b0:	78 94       	sei
     6b2:	08 95       	ret

000006b4 <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
{
} //~CLaserControlApp

// CMBEventsHandler
void CLaserControlApp::OnTransactionCallback(uint8_t* data, uint16_t length)
{
     6b4:	08 95       	ret

000006b6 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
			CLaserBoard::Beep();
	}
}

void CLaserControlApp::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
     6b6:	dc 01       	movw	r26, r24
	// Update GUI registers
	if (addr == 0x03)	PIC_ID = data[1];
     6b8:	63 30       	cpi	r22, 0x03	; 3
     6ba:	29 f4       	brne	.+10     	; 0x6c6 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x10>
     6bc:	fa 01       	movw	r30, r20
     6be:	81 81       	ldd	r24, Z+1	; 0x01
     6c0:	1d 96       	adiw	r26, 0x0d	; 13
     6c2:	8c 93       	st	X, r24
     6c4:	1d 97       	sbiw	r26, 0x0d	; 13
	
	switch (PIC_ID)
     6c6:	1d 96       	adiw	r26, 0x0d	; 13
     6c8:	4c 91       	ld	r20, X
     6ca:	1d 97       	sbiw	r26, 0x0d	; 13
     6cc:	50 e0       	ldi	r21, 0x00	; 0
     6ce:	40 32       	cpi	r20, 0x20	; 32
     6d0:	51 05       	cpc	r21, r1
     6d2:	08 f5       	brcc	.+66     	; 0x716 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x60>
     6d4:	fa 01       	movw	r30, r20
     6d6:	88 27       	eor	r24, r24
     6d8:	ec 50       	subi	r30, 0x0C	; 12
     6da:	ff 4f       	sbci	r31, 0xFF	; 255
     6dc:	8f 4f       	sbci	r24, 0xFF	; 255
     6de:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <__tablejump2__>
	{
		case PICID_LOGO:
			state = APP_LOGO;
     6e2:	1c 96       	adiw	r26, 0x0c	; 12
     6e4:	1c 92       	st	X, r1
		break;
     6e6:	08 95       	ret
		case PICID_SETUP:
			state = APP_SETUP;
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	1c 96       	adiw	r26, 0x0c	; 12
     6ec:	8c 93       	st	X, r24
		break;
     6ee:	08 95       	ret
		case PICID_TIMER:
			state = APP_RUN;
     6f0:	83 e0       	ldi	r24, 0x03	; 3
     6f2:	1c 96       	adiw	r26, 0x0c	; 12
     6f4:	8c 93       	st	X, r24
		break;
     6f6:	08 95       	ret
		case PICID_OnStart:
			state = APP_OnTimerStart;
     6f8:	85 e0       	ldi	r24, 0x05	; 5
     6fa:	1c 96       	adiw	r26, 0x0c	; 12
     6fc:	8c 93       	st	X, r24
		break;
     6fe:	08 95       	ret
		case PICID_OnRestart:
			state = APP_OnTimerRestart;
     700:	87 e0       	ldi	r24, 0x07	; 7
     702:	1c 96       	adiw	r26, 0x0c	; 12
     704:	8c 93       	st	X, r24
		break;
     706:	08 95       	ret
		case PICID_OnStop:
			state = APP_OnTimerStop;
     708:	86 e0       	ldi	r24, 0x06	; 6
     70a:	1c 96       	adiw	r26, 0x0c	; 12
     70c:	8c 93       	st	X, r24
		break;
     70e:	08 95       	ret
		case PICID_OnH_L:
			state = APP_OnHL;
     710:	88 e0       	ldi	r24, 0x08	; 8
     712:	1c 96       	adiw	r26, 0x0c	; 12
     714:	8c 93       	st	X, r24
     716:	08 95       	ret

00000718 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:
extern CSoundPlayer player;
extern CDGUSDatabase Database;

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
     718:	da 01       	movw	r26, r20
     71a:	ed 91       	ld	r30, X+
     71c:	fc 91       	ld	r31, X
     71e:	fe 27       	eor	r31, r30
     720:	ef 27       	eor	r30, r31
     722:	fe 27       	eor	r31, r30

void CLaserControlApp::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
	// Update GUI variables	
	uint16_t val = swap(*((uint16_t*)data));
	switch (addr)
     724:	62 30       	cpi	r22, 0x02	; 2
     726:	71 05       	cpc	r23, r1
     728:	91 f1       	breq	.+100    	; 0x78e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x76>
     72a:	dc 01       	movw	r26, r24
     72c:	63 30       	cpi	r22, 0x03	; 3
     72e:	71 05       	cpc	r23, r1
     730:	38 f4       	brcc	.+14     	; 0x740 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x28>
     732:	61 15       	cp	r22, r1
     734:	71 05       	cpc	r23, r1
     736:	59 f0       	breq	.+22     	; 0x74e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x36>
     738:	61 30       	cpi	r22, 0x01	; 1
     73a:	71 05       	cpc	r23, r1
     73c:	89 f0       	breq	.+34     	; 0x760 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x48>
     73e:	25 c0       	rjmp	.+74     	; 0x78a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x72>
     740:	63 30       	cpi	r22, 0x03	; 3
     742:	71 05       	cpc	r23, r1
     744:	b1 f0       	breq	.+44     	; 0x772 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x5a>
     746:	61 15       	cp	r22, r1
     748:	71 40       	sbci	r23, 0x01	; 1
     74a:	c1 f0       	breq	.+48     	; 0x77c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x64>
     74c:	1e c0       	rjmp	.+60     	; 0x78a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x72>
	{
		case VARIABLE_ADDR_MIN:
			m_wSetMin = val;
     74e:	54 96       	adiw	r26, 0x14	; 20
     750:	ed 93       	st	X+, r30
     752:	fc 93       	st	X, r31
     754:	55 97       	sbiw	r26, 0x15	; 21
			m_wMinutes = val;
     756:	1e 96       	adiw	r26, 0x0e	; 14
     758:	ed 93       	st	X+, r30
     75a:	fc 93       	st	X, r31
     75c:	1f 97       	sbiw	r26, 0x0f	; 15
		break;
     75e:	08 95       	ret
		case VARIABLE_ADDR_SEC:
			m_wSetSec = val;
     760:	56 96       	adiw	r26, 0x16	; 22
     762:	ed 93       	st	X+, r30
     764:	fc 93       	st	X, r31
     766:	57 97       	sbiw	r26, 0x17	; 23
			m_wSeconds = val;
     768:	50 96       	adiw	r26, 0x10	; 16
     76a:	ed 93       	st	X+, r30
     76c:	fc 93       	st	X, r31
     76e:	51 97       	sbiw	r26, 0x11	; 17
		break;
     770:	08 95       	ret
		case VARIABLE_ADDR_MSC:
			// Not used
		break;
		case VARIABLE_ADDR_PWR:
			m_wPower = val;
     772:	58 96       	adiw	r26, 0x18	; 24
     774:	ed 93       	st	X+, r30
     776:	fc 93       	st	X, r31
     778:	59 97       	sbiw	r26, 0x19	; 25
		break;
     77a:	08 95       	ret
		case VARIABLE_ADDR_DATABASE:
			Database.OnVariableReceived(addr, data, length);
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	71 e0       	ldi	r23, 0x01	; 1
     780:	81 ee       	ldi	r24, 0xE1	; 225
     782:	92 e2       	ldi	r25, 0x22	; 34
     784:	0e 94 fd 01 	call	0x3fa	; 0x3fa <_ZN13CDGUSDatabase18OnVariableReceivedEjPjj>
		break;
     788:	08 95       	ret
		default:
			// Error
			CLaserBoard::Beep();
     78a:	0e 94 18 03 	call	0x630	; 0x630 <_ZN11CLaserBoard4BeepEv>
     78e:	08 95       	ret

00000790 <_ZN16CLaserControlAppC1Ev>:
	else
		return y;
}

// default constructor
CLaserControlApp::CLaserControlApp()
     790:	25 e6       	ldi	r18, 0x65	; 101
     792:	30 e2       	ldi	r19, 0x20	; 32
     794:	fc 01       	movw	r30, r24
     796:	20 83       	st	Z, r18
     798:	31 83       	std	Z+1, r19	; 0x01
     79a:	08 95       	ret

0000079c <_ZN16CLaserControlAppD1Ev>:
{
} //CLaserControlApp

// default destructor
CLaserControlApp::~CLaserControlApp()
     79c:	25 e6       	ldi	r18, 0x65	; 101
     79e:	30 e2       	ldi	r19, 0x20	; 32
     7a0:	fc 01       	movw	r30, r24
     7a2:	20 83       	st	Z, r18
     7a4:	31 83       	std	Z+1, r19	; 0x01
     7a6:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <_ZN16CMBEventsHandlerD1Ev>
     7aa:	08 95       	ret

000007ac <_ZN16CLaserControlApp5StartEv>:
	m_wSeconds = m_wSetSec;
	m_wPower = 0;
}

void CLaserControlApp::Start()
{	
     7ac:	0f 93       	push	r16
     7ae:	1f 93       	push	r17
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	cd b7       	in	r28, 0x3d	; 61
     7b6:	de b7       	in	r29, 0x3e	; 62
     7b8:	28 97       	sbiw	r28, 0x08	; 8
     7ba:	cd bf       	out	0x3d, r28	; 61
     7bc:	de bf       	out	0x3e, r29	; 62
     7be:	8c 01       	movw	r16, r24
	// Startup DGUS initialization
	uint16_t pic_id = swap(1);
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	91 e0       	ldi	r25, 0x01	; 1
     7c4:	8f 83       	std	Y+7, r24	; 0x07
     7c6:	98 87       	std	Y+8, r25	; 0x08
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     7c8:	22 e0       	ldi	r18, 0x02	; 2
     7ca:	ae 01       	movw	r20, r28
     7cc:	49 5f       	subi	r20, 0xF9	; 249
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	63 e0       	ldi	r22, 0x03	; 3
     7d2:	f8 01       	movw	r30, r16
     7d4:	82 8d       	ldd	r24, Z+26	; 0x1a
     7d6:	93 8d       	ldd	r25, Z+27	; 0x1b
     7d8:	0e 94 51 20 	call	0x40a2	; 0x40a2 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     7dc:	f8 01       	movw	r30, r16
     7de:	82 8d       	ldd	r24, Z+26	; 0x1a
     7e0:	93 8d       	ldd	r25, Z+27	; 0x1b
     7e2:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	//Setup variables
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MIN, (uint16_t*)&m_wSetMin, 2);
     7e6:	a8 01       	movw	r20, r16
     7e8:	4c 5e       	subi	r20, 0xEC	; 236
     7ea:	5f 4f       	sbci	r21, 0xFF	; 255
     7ec:	22 e0       	ldi	r18, 0x02	; 2
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	70 e0       	ldi	r23, 0x00	; 0
     7f4:	f8 01       	movw	r30, r16
     7f6:	82 8d       	ldd	r24, Z+26	; 0x1a
     7f8:	93 8d       	ldd	r25, Z+27	; 0x1b
     7fa:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     7fe:	f8 01       	movw	r30, r16
     800:	82 8d       	ldd	r24, Z+26	; 0x1a
     802:	93 8d       	ldd	r25, Z+27	; 0x1b
     804:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_SEC, (uint16_t*)&m_wSetSec, 2);
     808:	a8 01       	movw	r20, r16
     80a:	4a 5e       	subi	r20, 0xEA	; 234
     80c:	5f 4f       	sbci	r21, 0xFF	; 255
     80e:	22 e0       	ldi	r18, 0x02	; 2
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	61 e0       	ldi	r22, 0x01	; 1
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	f8 01       	movw	r30, r16
     818:	82 8d       	ldd	r24, Z+26	; 0x1a
     81a:	93 8d       	ldd	r25, Z+27	; 0x1b
     81c:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     820:	f8 01       	movw	r30, r16
     822:	82 8d       	ldd	r24, Z+26	; 0x1a
     824:	93 8d       	ldd	r25, Z+27	; 0x1b
     826:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MSC, (uint16_t*)&m_wMillSec, 2);
     82a:	a8 01       	movw	r20, r16
     82c:	4e 5e       	subi	r20, 0xEE	; 238
     82e:	5f 4f       	sbci	r21, 0xFF	; 255
     830:	22 e0       	ldi	r18, 0x02	; 2
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	62 e0       	ldi	r22, 0x02	; 2
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	f8 01       	movw	r30, r16
     83a:	82 8d       	ldd	r24, Z+26	; 0x1a
     83c:	93 8d       	ldd	r25, Z+27	; 0x1b
     83e:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     842:	f8 01       	movw	r30, r16
     844:	82 8d       	ldd	r24, Z+26	; 0x1a
     846:	93 8d       	ldd	r25, Z+27	; 0x1b
     848:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_PWR, (uint16_t*)&m_wPower, 2);
     84c:	a8 01       	movw	r20, r16
     84e:	48 5e       	subi	r20, 0xE8	; 232
     850:	5f 4f       	sbci	r21, 0xFF	; 255
     852:	22 e0       	ldi	r18, 0x02	; 2
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	63 e0       	ldi	r22, 0x03	; 3
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	f8 01       	movw	r30, r16
     85c:	82 8d       	ldd	r24, Z+26	; 0x1a
     85e:	93 8d       	ldd	r25, Z+27	; 0x1b
     860:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     864:	f8 01       	movw	r30, r16
     866:	82 8d       	ldd	r24, Z+26	; 0x1a
     868:	93 8d       	ldd	r25, Z+27	; 0x1b
     86a:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	uint16_t bar = 0;
	uint16_t bar1 = min(bar, 12);
     86e:	1d 82       	std	Y+5, r1	; 0x05
     870:	1e 82       	std	Y+6, r1	; 0x06
	uint16_t bar2 = min(max(bar, 11), 24);
     872:	8b e0       	ldi	r24, 0x0B	; 11
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	8b 83       	std	Y+3, r24	; 0x03
     878:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t bar3 = max(bar, 23);
     87a:	87 e1       	ldi	r24, 0x17	; 23
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	89 83       	std	Y+1, r24	; 0x01
     880:	9a 83       	std	Y+2, r25	; 0x02
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR1, (uint16_t*)&bar1, 2);
     882:	22 e0       	ldi	r18, 0x02	; 2
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	ae 01       	movw	r20, r28
     888:	4b 5f       	subi	r20, 0xFB	; 251
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	64 e0       	ldi	r22, 0x04	; 4
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	f8 01       	movw	r30, r16
     892:	82 8d       	ldd	r24, Z+26	; 0x1a
     894:	93 8d       	ldd	r25, Z+27	; 0x1b
     896:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     89a:	f8 01       	movw	r30, r16
     89c:	82 8d       	ldd	r24, Z+26	; 0x1a
     89e:	93 8d       	ldd	r25, Z+27	; 0x1b
     8a0:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR2, (uint16_t*)&bar2, 2);
     8a4:	22 e0       	ldi	r18, 0x02	; 2
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	ae 01       	movw	r20, r28
     8aa:	4d 5f       	subi	r20, 0xFD	; 253
     8ac:	5f 4f       	sbci	r21, 0xFF	; 255
     8ae:	65 e0       	ldi	r22, 0x05	; 5
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	f8 01       	movw	r30, r16
     8b4:	82 8d       	ldd	r24, Z+26	; 0x1a
     8b6:	93 8d       	ldd	r25, Z+27	; 0x1b
     8b8:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     8bc:	f8 01       	movw	r30, r16
     8be:	82 8d       	ldd	r24, Z+26	; 0x1a
     8c0:	93 8d       	ldd	r25, Z+27	; 0x1b
     8c2:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR3, (uint16_t*)&bar3, 2);
     8c6:	22 e0       	ldi	r18, 0x02	; 2
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	ae 01       	movw	r20, r28
     8cc:	4f 5f       	subi	r20, 0xFF	; 255
     8ce:	5f 4f       	sbci	r21, 0xFF	; 255
     8d0:	66 e0       	ldi	r22, 0x06	; 6
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	f8 01       	movw	r30, r16
     8d6:	82 8d       	ldd	r24, Z+26	; 0x1a
     8d8:	93 8d       	ldd	r25, Z+27	; 0x1b
     8da:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     8de:	f8 01       	movw	r30, r16
     8e0:	82 8d       	ldd	r24, Z+26	; 0x1a
     8e2:	93 8d       	ldd	r25, Z+27	; 0x1b
     8e4:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	state = APP_SETUP;
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	f8 01       	movw	r30, r16
     8ec:	84 87       	std	Z+12, r24	; 0x0c
}
     8ee:	28 96       	adiw	r28, 0x08	; 8
     8f0:	cd bf       	out	0x3d, r28	; 61
     8f2:	de bf       	out	0x3e, r29	; 62
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	1f 91       	pop	r17
     8fa:	0f 91       	pop	r16
     8fc:	08 95       	ret

000008fe <_GLOBAL__sub_I_timer>:

#include "CLaserControlApp.h"
#include "CSoundPlayer.h"
#include <util/delay.h>

CTimerC timer;
     8fe:	80 ef       	ldi	r24, 0xF0	; 240
     900:	90 e2       	ldi	r25, 0x20	; 32
     902:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_ZN7CTimerCC1Ev>
     906:	08 95       	ret

00000908 <_GLOBAL__sub_D_timer>:
     908:	80 ef       	ldi	r24, 0xF0	; 240
     90a:	90 e2       	ldi	r25, 0x20	; 32
     90c:	0e 94 01 09 	call	0x1202	; 0x1202 <_ZN7CTimerCD1Ev>
     910:	08 95       	ret

00000912 <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	ec 01       	movw	r28, r24
	// GUI class initialization
	m_cpSender = sender;
     918:	6a 8f       	std	Y+26, r22	; 0x1a
     91a:	7b 8f       	std	Y+27, r23	; 0x1b
	timer.Initialize(WGM_Normal, CS_DIV256);
     91c:	46 e0       	ldi	r20, 0x06	; 6
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	80 ef       	ldi	r24, 0xF0	; 240
     922:	90 e2       	ldi	r25, 0x20	; 32
     924:	0e 94 32 08 	call	0x1064	; 0x1064 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timer.SetPeriod(25000); // Every 10 ms
     928:	68 ea       	ldi	r22, 0xA8	; 168
     92a:	71 e6       	ldi	r23, 0x61	; 97
     92c:	80 ef       	ldi	r24, 0xF0	; 240
     92e:	90 e2       	ldi	r25, 0x20	; 32
     930:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN7CTimerC9SetPeriodEj>
	timer.SetOVFCallback(OnTimerStatic, this, TC_OVFINTLVL_LO_gc); // Enable interrupt
     934:	21 e0       	ldi	r18, 0x01	; 1
     936:	ae 01       	movw	r20, r28
     938:	63 eb       	ldi	r22, 0xB3	; 179
     93a:	77 e0       	ldi	r23, 0x07	; 7
     93c:	80 ef       	ldi	r24, 0xF0	; 240
     93e:	90 e2       	ldi	r25, 0x20	; 32
     940:	0e 94 89 08 	call	0x1112	; 0x1112 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	
	// Set global variables
	PIC_ID = 0;
     944:	1d 86       	std	Y+13, r1	; 0x0d
	m_wSetMin = 1;
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	8c 8b       	std	Y+20, r24	; 0x14
     94c:	9d 8b       	std	Y+21, r25	; 0x15
	m_wSetSec = 30;
     94e:	8e e1       	ldi	r24, 0x1E	; 30
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	8e 8b       	std	Y+22, r24	; 0x16
     954:	9f 8b       	std	Y+23, r25	; 0x17
	m_wMillSec = 0;
     956:	1a 8a       	std	Y+18, r1	; 0x12
     958:	1b 8a       	std	Y+19, r1	; 0x13
	m_wMinutes = m_wSetMin;
     95a:	8c 89       	ldd	r24, Y+20	; 0x14
     95c:	9d 89       	ldd	r25, Y+21	; 0x15
     95e:	8e 87       	std	Y+14, r24	; 0x0e
     960:	9f 87       	std	Y+15, r25	; 0x0f
	m_wSeconds = m_wSetSec;
     962:	8e 89       	ldd	r24, Y+22	; 0x16
     964:	9f 89       	ldd	r25, Y+23	; 0x17
     966:	88 8b       	std	Y+16, r24	; 0x10
     968:	99 8b       	std	Y+17, r25	; 0x11
	m_wPower = 0;
     96a:	18 8e       	std	Y+24, r1	; 0x18
     96c:	19 8e       	std	Y+25, r1	; 0x19
}
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	08 95       	ret

00000974 <_ZN16CLaserControlApp3RunEv>:
	state = APP_SETUP;
}

// Process GUI
void CLaserControlApp::Run()
{
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	cd b7       	in	r28, 0x3d	; 61
     97e:	de b7       	in	r29, 0x3e	; 62
     980:	28 97       	sbiw	r28, 0x08	; 8
     982:	cd bf       	out	0x3d, r28	; 61
     984:	de bf       	out	0x3e, r29	; 62
     986:	8c 01       	movw	r16, r24
	// Get PIC ID
	m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
     988:	42 e0       	ldi	r20, 0x02	; 2
     98a:	63 e0       	ldi	r22, 0x03	; 3
     98c:	fc 01       	movw	r30, r24
     98e:	82 8d       	ldd	r24, Z+26	; 0x1a
     990:	93 8d       	ldd	r25, Z+27	; 0x1b
     992:	0e 94 9f 20 	call	0x413e	; 0x413e <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
	m_cpSender->WaitMODBUSTransmitter();
     996:	f8 01       	movw	r30, r16
     998:	82 8d       	ldd	r24, Z+26	; 0x1a
     99a:	93 8d       	ldd	r25, Z+27	; 0x1b
     99c:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WaitMODBUSListener();
     9a0:	f8 01       	movw	r30, r16
     9a2:	82 8d       	ldd	r24, Z+26	; 0x1a
     9a4:	93 8d       	ldd	r25, Z+27	; 0x1b
     9a6:	0e 94 3a 20 	call	0x4074	; 0x4074 <_ZN9CMBSender18WaitMODBUSListenerEv>
     9aa:	ff ef       	ldi	r31, 0xFF	; 255
     9ac:	21 ee       	ldi	r18, 0xE1	; 225
     9ae:	84 e0       	ldi	r24, 0x04	; 4
     9b0:	f1 50       	subi	r31, 0x01	; 1
     9b2:	20 40       	sbci	r18, 0x00	; 0
     9b4:	80 40       	sbci	r24, 0x00	; 0
     9b6:	e1 f7       	brne	.-8      	; 0x9b0 <_ZN16CLaserControlApp3RunEv+0x3c>
     9b8:	00 c0       	rjmp	.+0      	; 0x9ba <_ZN16CLaserControlApp3RunEv+0x46>
     9ba:	00 00       	nop
	
	static uint16_t anim = 5;
	uint16_t pic_id;
	
	static uint16_t bar = 0;
	uint16_t bar1 = 0;
     9bc:	1d 82       	std	Y+5, r1	; 0x05
     9be:	1e 82       	std	Y+6, r1	; 0x06
	uint16_t bar2 = 0;
     9c0:	1b 82       	std	Y+3, r1	; 0x03
     9c2:	1c 82       	std	Y+4, r1	; 0x04
	uint16_t bar3 = 0;
     9c4:	19 82       	std	Y+1, r1	; 0x01
     9c6:	1a 82       	std	Y+2, r1	; 0x02
	
	switch (state)
     9c8:	f8 01       	movw	r30, r16
     9ca:	84 85       	ldd	r24, Z+12	; 0x0c
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	89 30       	cpi	r24, 0x09	; 9
     9d0:	91 05       	cpc	r25, r1
     9d2:	08 f0       	brcs	.+2      	; 0x9d6 <_ZN16CLaserControlApp3RunEv+0x62>
     9d4:	3f c2       	rjmp	.+1150   	; 0xe54 <_ZN16CLaserControlApp3RunEv+0x4e0>
     9d6:	fc 01       	movw	r30, r24
     9d8:	88 27       	eor	r24, r24
     9da:	ec 5e       	subi	r30, 0xEC	; 236
     9dc:	fe 4f       	sbci	r31, 0xFE	; 254
     9de:	8f 4f       	sbci	r24, 0xFF	; 255
     9e0:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <__tablejump2__>
	{
		case APP_LOGO:
			Start(); // Start if logo
     9e4:	c8 01       	movw	r24, r16
     9e6:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN16CLaserControlApp5StartEv>
		break;
     9ea:	34 c2       	rjmp	.+1128   	; 0xe54 <_ZN16CLaserControlApp3RunEv+0x4e0>
		case APP_SETUP:
			// Get Variables
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_MIN, 2);
     9ec:	42 e0       	ldi	r20, 0x02	; 2
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	f8 01       	movw	r30, r16
     9f4:	82 8d       	ldd	r24, Z+26	; 0x1a
     9f6:	93 8d       	ldd	r25, Z+27	; 0x1b
     9f8:	0e 94 a5 20 	call	0x414a	; 0x414a <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
			m_cpSender->WaitMODBUSTransmitter();
     9fc:	f8 01       	movw	r30, r16
     9fe:	82 8d       	ldd	r24, Z+26	; 0x1a
     a00:	93 8d       	ldd	r25, Z+27	; 0x1b
     a02:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSListener();
     a06:	f8 01       	movw	r30, r16
     a08:	82 8d       	ldd	r24, Z+26	; 0x1a
     a0a:	93 8d       	ldd	r25, Z+27	; 0x1b
     a0c:	0e 94 3a 20 	call	0x4074	; 0x4074 <_ZN9CMBSender18WaitMODBUSListenerEv>
     a10:	ff ef       	ldi	r31, 0xFF	; 255
     a12:	21 ee       	ldi	r18, 0xE1	; 225
     a14:	84 e0       	ldi	r24, 0x04	; 4
     a16:	f1 50       	subi	r31, 0x01	; 1
     a18:	20 40       	sbci	r18, 0x00	; 0
     a1a:	80 40       	sbci	r24, 0x00	; 0
     a1c:	e1 f7       	brne	.-8      	; 0xa16 <_ZN16CLaserControlApp3RunEv+0xa2>
     a1e:	00 c0       	rjmp	.+0      	; 0xa20 <_ZN16CLaserControlApp3RunEv+0xac>
     a20:	00 00       	nop
			_delay_ms(50);
			
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_SEC, 2);
     a22:	42 e0       	ldi	r20, 0x02	; 2
     a24:	61 e0       	ldi	r22, 0x01	; 1
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	f8 01       	movw	r30, r16
     a2a:	82 8d       	ldd	r24, Z+26	; 0x1a
     a2c:	93 8d       	ldd	r25, Z+27	; 0x1b
     a2e:	0e 94 a5 20 	call	0x414a	; 0x414a <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
			m_cpSender->WaitMODBUSTransmitter();
     a32:	f8 01       	movw	r30, r16
     a34:	82 8d       	ldd	r24, Z+26	; 0x1a
     a36:	93 8d       	ldd	r25, Z+27	; 0x1b
     a38:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSListener();
     a3c:	f8 01       	movw	r30, r16
     a3e:	82 8d       	ldd	r24, Z+26	; 0x1a
     a40:	93 8d       	ldd	r25, Z+27	; 0x1b
     a42:	0e 94 3a 20 	call	0x4074	; 0x4074 <_ZN9CMBSender18WaitMODBUSListenerEv>
     a46:	ff ef       	ldi	r31, 0xFF	; 255
     a48:	21 ee       	ldi	r18, 0xE1	; 225
     a4a:	84 e0       	ldi	r24, 0x04	; 4
     a4c:	f1 50       	subi	r31, 0x01	; 1
     a4e:	20 40       	sbci	r18, 0x00	; 0
     a50:	80 40       	sbci	r24, 0x00	; 0
     a52:	e1 f7       	brne	.-8      	; 0xa4c <_ZN16CLaserControlApp3RunEv+0xd8>
     a54:	00 c0       	rjmp	.+0      	; 0xa56 <_ZN16CLaserControlApp3RunEv+0xe2>
     a56:	00 00       	nop
			_delay_ms(50);
			
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_PWR, 2);
     a58:	42 e0       	ldi	r20, 0x02	; 2
     a5a:	63 e0       	ldi	r22, 0x03	; 3
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	f8 01       	movw	r30, r16
     a60:	82 8d       	ldd	r24, Z+26	; 0x1a
     a62:	93 8d       	ldd	r25, Z+27	; 0x1b
     a64:	0e 94 a5 20 	call	0x414a	; 0x414a <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
			m_cpSender->WaitMODBUSTransmitter();
     a68:	f8 01       	movw	r30, r16
     a6a:	82 8d       	ldd	r24, Z+26	; 0x1a
     a6c:	93 8d       	ldd	r25, Z+27	; 0x1b
     a6e:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSListener();
     a72:	f8 01       	movw	r30, r16
     a74:	82 8d       	ldd	r24, Z+26	; 0x1a
     a76:	93 8d       	ldd	r25, Z+27	; 0x1b
     a78:	0e 94 3a 20 	call	0x4074	; 0x4074 <_ZN9CMBSender18WaitMODBUSListenerEv>
     a7c:	ff ef       	ldi	r31, 0xFF	; 255
     a7e:	21 ee       	ldi	r18, 0xE1	; 225
     a80:	84 e0       	ldi	r24, 0x04	; 4
     a82:	f1 50       	subi	r31, 0x01	; 1
     a84:	20 40       	sbci	r18, 0x00	; 0
     a86:	80 40       	sbci	r24, 0x00	; 0
     a88:	e1 f7       	brne	.-8      	; 0xa82 <_ZN16CLaserControlApp3RunEv+0x10e>
     a8a:	00 c0       	rjmp	.+0      	; 0xa8c <_ZN16CLaserControlApp3RunEv+0x118>
     a8c:	00 00       	nop
			_delay_ms(50);
			
			bar = (m_wPower * 34) / 100;
     a8e:	f8 01       	movw	r30, r16
     a90:	80 8d       	ldd	r24, Z+24	; 0x18
     a92:	91 8d       	ldd	r25, Z+25	; 0x19
     a94:	42 e2       	ldi	r20, 0x22	; 34
     a96:	48 9f       	mul	r20, r24
     a98:	90 01       	movw	r18, r0
     a9a:	49 9f       	mul	r20, r25
     a9c:	30 0d       	add	r19, r0
     a9e:	11 24       	eor	r1, r1
     aa0:	36 95       	lsr	r19
     aa2:	27 95       	ror	r18
     aa4:	36 95       	lsr	r19
     aa6:	27 95       	ror	r18
     aa8:	ab e7       	ldi	r26, 0x7B	; 123
     aaa:	b4 e1       	ldi	r27, 0x14	; 20
     aac:	0e 94 06 21 	call	0x420c	; 0x420c <__umulhisi3>
     ab0:	96 95       	lsr	r25
     ab2:	87 95       	ror	r24
     ab4:	80 93 ee 20 	sts	0x20EE, r24
     ab8:	90 93 ef 20 	sts	0x20EF, r25
	return (data >> 8) | (data << 8);
}

uint16_t min(uint16_t x, uint16_t y)
{
	if (x < y)
     abc:	8c 30       	cpi	r24, 0x0C	; 12
     abe:	91 05       	cpc	r25, r1
     ac0:	18 f0       	brcs	.+6      	; 0xac8 <_ZN16CLaserControlApp3RunEv+0x154>
		return x;
	else
		return y;
     ac2:	3c e0       	ldi	r19, 0x0C	; 12
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	02 c0       	rjmp	.+4      	; 0xacc <_ZN16CLaserControlApp3RunEv+0x158>
}

uint16_t min(uint16_t x, uint16_t y)
{
	if (x < y)
		return x;
     ac8:	38 2f       	mov	r19, r24
     aca:	29 2f       	mov	r18, r25
			m_cpSender->WaitMODBUSTransmitter();
			m_cpSender->WaitMODBUSListener();
			_delay_ms(50);
			
			bar = (m_wPower * 34) / 100;
			bar1 = min(bar, 12);
     acc:	3d 83       	std	Y+5, r19	; 0x05
     ace:	2e 83       	std	Y+6, r18	; 0x06
     ad0:	9c 01       	movw	r18, r24
     ad2:	8b 30       	cpi	r24, 0x0B	; 11
     ad4:	91 05       	cpc	r25, r1
     ad6:	10 f4       	brcc	.+4      	; 0xadc <_ZN16CLaserControlApp3RunEv+0x168>
     ad8:	2b e0       	ldi	r18, 0x0B	; 11
     ada:	30 e0       	ldi	r19, 0x00	; 0
	return (data >> 8) | (data << 8);
}

uint16_t min(uint16_t x, uint16_t y)
{
	if (x < y)
     adc:	28 31       	cpi	r18, 0x18	; 24
     ade:	31 05       	cpc	r19, r1
     ae0:	10 f0       	brcs	.+4      	; 0xae6 <_ZN16CLaserControlApp3RunEv+0x172>
		return x;
	else
		return y;
     ae2:	28 e1       	ldi	r18, 0x18	; 24
     ae4:	30 e0       	ldi	r19, 0x00	; 0
			m_cpSender->WaitMODBUSListener();
			_delay_ms(50);
			
			bar = (m_wPower * 34) / 100;
			bar1 = min(bar, 12);
			bar2 = min(max(bar, 11), 24);
     ae6:	2b 83       	std	Y+3, r18	; 0x03
     ae8:	3c 83       	std	Y+4, r19	; 0x04
     aea:	87 31       	cpi	r24, 0x17	; 23
     aec:	91 05       	cpc	r25, r1
     aee:	10 f4       	brcc	.+4      	; 0xaf4 <_ZN16CLaserControlApp3RunEv+0x180>
     af0:	87 e1       	ldi	r24, 0x17	; 23
     af2:	90 e0       	ldi	r25, 0x00	; 0
	return (data >> 8) | (data << 8);
}

uint16_t min(uint16_t x, uint16_t y)
{
	if (x < y)
     af4:	82 32       	cpi	r24, 0x22	; 34
     af6:	91 05       	cpc	r25, r1
     af8:	10 f0       	brcs	.+4      	; 0xafe <_ZN16CLaserControlApp3RunEv+0x18a>
		return x;
	else
		return y;
     afa:	82 e2       	ldi	r24, 0x22	; 34
     afc:	90 e0       	ldi	r25, 0x00	; 0
			_delay_ms(50);
			
			bar = (m_wPower * 34) / 100;
			bar1 = min(bar, 12);
			bar2 = min(max(bar, 11), 24);
			bar3 = min(max(bar, 23), 34);
     afe:	89 83       	std	Y+1, r24	; 0x01
     b00:	9a 83       	std	Y+2, r25	; 0x02
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR1, (uint16_t*)&bar1, 2);
     b02:	22 e0       	ldi	r18, 0x02	; 2
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	ae 01       	movw	r20, r28
     b08:	4b 5f       	subi	r20, 0xFB	; 251
     b0a:	5f 4f       	sbci	r21, 0xFF	; 255
     b0c:	64 e0       	ldi	r22, 0x04	; 4
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	f8 01       	movw	r30, r16
     b12:	82 8d       	ldd	r24, Z+26	; 0x1a
     b14:	93 8d       	ldd	r25, Z+27	; 0x1b
     b16:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     b1a:	f8 01       	movw	r30, r16
     b1c:	82 8d       	ldd	r24, Z+26	; 0x1a
     b1e:	93 8d       	ldd	r25, Z+27	; 0x1b
     b20:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR2, (uint16_t*)&bar2, 2);
     b24:	22 e0       	ldi	r18, 0x02	; 2
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	ae 01       	movw	r20, r28
     b2a:	4d 5f       	subi	r20, 0xFD	; 253
     b2c:	5f 4f       	sbci	r21, 0xFF	; 255
     b2e:	65 e0       	ldi	r22, 0x05	; 5
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	f8 01       	movw	r30, r16
     b34:	82 8d       	ldd	r24, Z+26	; 0x1a
     b36:	93 8d       	ldd	r25, Z+27	; 0x1b
     b38:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     b3c:	f8 01       	movw	r30, r16
     b3e:	82 8d       	ldd	r24, Z+26	; 0x1a
     b40:	93 8d       	ldd	r25, Z+27	; 0x1b
     b42:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR3, (uint16_t*)&bar3, 2);
     b46:	22 e0       	ldi	r18, 0x02	; 2
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	ae 01       	movw	r20, r28
     b4c:	4f 5f       	subi	r20, 0xFF	; 255
     b4e:	5f 4f       	sbci	r21, 0xFF	; 255
     b50:	66 e0       	ldi	r22, 0x06	; 6
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	f8 01       	movw	r30, r16
     b56:	82 8d       	ldd	r24, Z+26	; 0x1a
     b58:	93 8d       	ldd	r25, Z+27	; 0x1b
     b5a:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     b5e:	f8 01       	movw	r30, r16
     b60:	82 8d       	ldd	r24, Z+26	; 0x1a
     b62:	93 8d       	ldd	r25, Z+27	; 0x1b
     b64:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		break;
     b68:	75 c1       	rjmp	.+746    	; 0xe54 <_ZN16CLaserControlApp3RunEv+0x4e0>
		case APP_SETUPtoRUN_ANIM:
			// Play animation
			anim++;
     b6a:	80 91 47 20 	lds	r24, 0x2047
     b6e:	90 91 48 20 	lds	r25, 0x2048
     b72:	01 96       	adiw	r24, 0x01	; 1
			if (anim > 9) {
     b74:	8a 30       	cpi	r24, 0x0A	; 10
     b76:	91 05       	cpc	r25, r1
     b78:	28 f4       	brcc	.+10     	; 0xb84 <_ZN16CLaserControlApp3RunEv+0x210>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR3, (uint16_t*)&bar3, 2);
			m_cpSender->WaitMODBUSTransmitter();
		break;
		case APP_SETUPtoRUN_ANIM:
			// Play animation
			anim++;
     b7a:	80 93 47 20 	sts	0x2047, r24
     b7e:	90 93 48 20 	sts	0x2048, r25
     b82:	09 c0       	rjmp	.+18     	; 0xb96 <_ZN16CLaserControlApp3RunEv+0x222>
			if (anim > 9) {
				anim = 9;
     b84:	89 e0       	ldi	r24, 0x09	; 9
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	80 93 47 20 	sts	0x2047, r24
     b8c:	90 93 48 20 	sts	0x2048, r25
				state = APP_RUN;
     b90:	83 e0       	ldi	r24, 0x03	; 3
     b92:	f8 01       	movw	r30, r16
     b94:	84 87       	std	Z+12, r24	; 0x0c
extern CSoundPlayer player;
extern CDGUSDatabase Database;

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
     b96:	80 91 47 20 	lds	r24, 0x2047
     b9a:	90 91 48 20 	lds	r25, 0x2048
     b9e:	98 27       	eor	r25, r24
     ba0:	89 27       	eor	r24, r25
     ba2:	98 27       	eor	r25, r24
			anim++;
			if (anim > 9) {
				anim = 9;
				state = APP_RUN;
			}
			pic_id = swap(anim);
     ba4:	8f 83       	std	Y+7, r24	; 0x07
     ba6:	98 87       	std	Y+8, r25	; 0x08
			
			// Timer setup to timer run animation
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     ba8:	22 e0       	ldi	r18, 0x02	; 2
     baa:	ae 01       	movw	r20, r28
     bac:	49 5f       	subi	r20, 0xF9	; 249
     bae:	5f 4f       	sbci	r21, 0xFF	; 255
     bb0:	63 e0       	ldi	r22, 0x03	; 3
     bb2:	f8 01       	movw	r30, r16
     bb4:	82 8d       	ldd	r24, Z+26	; 0x1a
     bb6:	93 8d       	ldd	r25, Z+27	; 0x1b
     bb8:	0e 94 51 20 	call	0x40a2	; 0x40a2 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     bbc:	f8 01       	movw	r30, r16
     bbe:	82 8d       	ldd	r24, Z+26	; 0x1a
     bc0:	93 8d       	ldd	r25, Z+27	; 0x1b
     bc2:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		break;
     bc6:	46 c1       	rjmp	.+652    	; 0xe54 <_ZN16CLaserControlApp3RunEv+0x4e0>
		case APP_RUN:
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MIN, (uint16_t*)&m_wMinutes, 2);
     bc8:	a8 01       	movw	r20, r16
     bca:	42 5f       	subi	r20, 0xF2	; 242
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	22 e0       	ldi	r18, 0x02	; 2
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	f8 01       	movw	r30, r16
     bd8:	82 8d       	ldd	r24, Z+26	; 0x1a
     bda:	93 8d       	ldd	r25, Z+27	; 0x1b
     bdc:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     be0:	f8 01       	movw	r30, r16
     be2:	82 8d       	ldd	r24, Z+26	; 0x1a
     be4:	93 8d       	ldd	r25, Z+27	; 0x1b
     be6:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_SEC, (uint16_t*)&m_wSeconds, 2);
     bea:	a8 01       	movw	r20, r16
     bec:	40 5f       	subi	r20, 0xF0	; 240
     bee:	5f 4f       	sbci	r21, 0xFF	; 255
     bf0:	22 e0       	ldi	r18, 0x02	; 2
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	61 e0       	ldi	r22, 0x01	; 1
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	f8 01       	movw	r30, r16
     bfa:	82 8d       	ldd	r24, Z+26	; 0x1a
     bfc:	93 8d       	ldd	r25, Z+27	; 0x1b
     bfe:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     c02:	f8 01       	movw	r30, r16
     c04:	82 8d       	ldd	r24, Z+26	; 0x1a
     c06:	93 8d       	ldd	r25, Z+27	; 0x1b
     c08:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MSC, (uint16_t*)&m_wMillSec, 2);
     c0c:	a8 01       	movw	r20, r16
     c0e:	4e 5e       	subi	r20, 0xEE	; 238
     c10:	5f 4f       	sbci	r21, 0xFF	; 255
     c12:	22 e0       	ldi	r18, 0x02	; 2
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	62 e0       	ldi	r22, 0x02	; 2
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	f8 01       	movw	r30, r16
     c1c:	82 8d       	ldd	r24, Z+26	; 0x1a
     c1e:	93 8d       	ldd	r25, Z+27	; 0x1b
     c20:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     c24:	f8 01       	movw	r30, r16
     c26:	82 8d       	ldd	r24, Z+26	; 0x1a
     c28:	93 8d       	ldd	r25, Z+27	; 0x1b
     c2a:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSTransmitter();
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR2, (uint16_t*)&bar2, 2);
			m_cpSender->WaitMODBUSTransmitter();
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR3, (uint16_t*)&bar3, 2);
			m_cpSender->WaitMODBUSTransmitter();*/
		break;
     c2e:	12 c1       	rjmp	.+548    	; 0xe54 <_ZN16CLaserControlApp3RunEv+0x4e0>
		case APP_OnTimerStart:
			// Set Run state
			anim = 5;
     c30:	85 e0       	ldi	r24, 0x05	; 5
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	80 93 47 20 	sts	0x2047, r24
     c38:	90 93 48 20 	sts	0x2048, r25
			pic_id = swap(PICID_TIMER);
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	99 e1       	ldi	r25, 0x19	; 25
     c40:	8f 83       	std	Y+7, r24	; 0x07
     c42:	98 87       	std	Y+8, r25	; 0x08
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     c44:	22 e0       	ldi	r18, 0x02	; 2
     c46:	ae 01       	movw	r20, r28
     c48:	49 5f       	subi	r20, 0xF9	; 249
     c4a:	5f 4f       	sbci	r21, 0xFF	; 255
     c4c:	63 e0       	ldi	r22, 0x03	; 3
     c4e:	f8 01       	movw	r30, r16
     c50:	82 8d       	ldd	r24, Z+26	; 0x1a
     c52:	93 8d       	ldd	r25, Z+27	; 0x1b
     c54:	0e 94 51 20 	call	0x40a2	; 0x40a2 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     c58:	f8 01       	movw	r30, r16
     c5a:	82 8d       	ldd	r24, Z+26	; 0x1a
     c5c:	93 8d       	ldd	r25, Z+27	; 0x1b
     c5e:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			m_wMinutes = m_wSetMin;
     c62:	f8 01       	movw	r30, r16
     c64:	84 89       	ldd	r24, Z+20	; 0x14
     c66:	95 89       	ldd	r25, Z+21	; 0x15
     c68:	86 87       	std	Z+14, r24	; 0x0e
     c6a:	97 87       	std	Z+15, r25	; 0x0f
			m_wSeconds = m_wSetSec;
     c6c:	86 89       	ldd	r24, Z+22	; 0x16
     c6e:	97 89       	ldd	r25, Z+23	; 0x17
     c70:	80 8b       	std	Z+16, r24	; 0x10
     c72:	91 8b       	std	Z+17, r25	; 0x11
			m_wMillSec = 0;
     c74:	12 8a       	std	Z+18, r1	; 0x12
     c76:	13 8a       	std	Z+19, r1	; 0x13
			
			// Start timer
			timer.Start(25000);
     c78:	68 ea       	ldi	r22, 0xA8	; 168
     c7a:	71 e6       	ldi	r23, 0x61	; 97
     c7c:	80 ef       	ldi	r24, 0xF0	; 240
     c7e:	90 e2       	ldi	r25, 0x20	; 32
     c80:	0e 94 4d 08 	call	0x109a	; 0x109a <_ZN7CTimerC5StartEj>
			laserBoard.Relay1On();
     c84:	86 e0       	ldi	r24, 0x06	; 6
     c86:	93 e2       	ldi	r25, 0x23	; 35
     c88:	0e 94 08 03 	call	0x610	; 0x610 <_ZN11CLaserBoard8Relay1OnEv>
			
			state = APP_RUN;
     c8c:	83 e0       	ldi	r24, 0x03	; 3
     c8e:	f8 01       	movw	r30, r16
     c90:	84 87       	std	Z+12, r24	; 0x0c
		break;
     c92:	e0 c0       	rjmp	.+448    	; 0xe54 <_ZN16CLaserControlApp3RunEv+0x4e0>
		case APP_OnTimerStop:
			// Set Stop (return to Setup) state
			pic_id = swap(PICID_SETUP);
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	97 e1       	ldi	r25, 0x17	; 23
     c98:	8f 83       	std	Y+7, r24	; 0x07
     c9a:	98 87       	std	Y+8, r25	; 0x08
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     c9c:	22 e0       	ldi	r18, 0x02	; 2
     c9e:	ae 01       	movw	r20, r28
     ca0:	49 5f       	subi	r20, 0xF9	; 249
     ca2:	5f 4f       	sbci	r21, 0xFF	; 255
     ca4:	63 e0       	ldi	r22, 0x03	; 3
     ca6:	f8 01       	movw	r30, r16
     ca8:	82 8d       	ldd	r24, Z+26	; 0x1a
     caa:	93 8d       	ldd	r25, Z+27	; 0x1b
     cac:	0e 94 51 20 	call	0x40a2	; 0x40a2 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     cb0:	f8 01       	movw	r30, r16
     cb2:	82 8d       	ldd	r24, Z+26	; 0x1a
     cb4:	93 8d       	ldd	r25, Z+27	; 0x1b
     cb6:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			// Stop timer
			timer.Stop();
     cba:	80 ef       	ldi	r24, 0xF0	; 240
     cbc:	90 e2       	ldi	r25, 0x20	; 32
     cbe:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_ZN7CTimerC4StopEv>
			laserBoard.Relay1Off();
     cc2:	86 e0       	ldi	r24, 0x06	; 6
     cc4:	93 e2       	ldi	r25, 0x23	; 35
     cc6:	0e 94 10 03 	call	0x620	; 0x620 <_ZN11CLaserBoard9Relay1OffEv>
			
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MIN, (uint16_t*)&m_wSetMin, 2);
     cca:	a8 01       	movw	r20, r16
     ccc:	4c 5e       	subi	r20, 0xEC	; 236
     cce:	5f 4f       	sbci	r21, 0xFF	; 255
     cd0:	22 e0       	ldi	r18, 0x02	; 2
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	60 e0       	ldi	r22, 0x00	; 0
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	f8 01       	movw	r30, r16
     cda:	82 8d       	ldd	r24, Z+26	; 0x1a
     cdc:	93 8d       	ldd	r25, Z+27	; 0x1b
     cde:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     ce2:	f8 01       	movw	r30, r16
     ce4:	82 8d       	ldd	r24, Z+26	; 0x1a
     ce6:	93 8d       	ldd	r25, Z+27	; 0x1b
     ce8:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_SEC, (uint16_t*)&m_wSetSec, 2);
     cec:	a8 01       	movw	r20, r16
     cee:	4a 5e       	subi	r20, 0xEA	; 234
     cf0:	5f 4f       	sbci	r21, 0xFF	; 255
     cf2:	22 e0       	ldi	r18, 0x02	; 2
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	61 e0       	ldi	r22, 0x01	; 1
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	f8 01       	movw	r30, r16
     cfc:	82 8d       	ldd	r24, Z+26	; 0x1a
     cfe:	93 8d       	ldd	r25, Z+27	; 0x1b
     d00:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     d04:	f8 01       	movw	r30, r16
     d06:	82 8d       	ldd	r24, Z+26	; 0x1a
     d08:	93 8d       	ldd	r25, Z+27	; 0x1b
     d0a:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MSC, (uint16_t*)&m_wMillSec, 2);
     d0e:	a8 01       	movw	r20, r16
     d10:	4e 5e       	subi	r20, 0xEE	; 238
     d12:	5f 4f       	sbci	r21, 0xFF	; 255
     d14:	22 e0       	ldi	r18, 0x02	; 2
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	62 e0       	ldi	r22, 0x02	; 2
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	f8 01       	movw	r30, r16
     d1e:	82 8d       	ldd	r24, Z+26	; 0x1a
     d20:	93 8d       	ldd	r25, Z+27	; 0x1b
     d22:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     d26:	f8 01       	movw	r30, r16
     d28:	82 8d       	ldd	r24, Z+26	; 0x1a
     d2a:	93 8d       	ldd	r25, Z+27	; 0x1b
     d2c:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			m_wMinutes = m_wSetMin;
     d30:	f8 01       	movw	r30, r16
     d32:	84 89       	ldd	r24, Z+20	; 0x14
     d34:	95 89       	ldd	r25, Z+21	; 0x15
     d36:	86 87       	std	Z+14, r24	; 0x0e
     d38:	97 87       	std	Z+15, r25	; 0x0f
			m_wSeconds = m_wSetSec;
     d3a:	86 89       	ldd	r24, Z+22	; 0x16
     d3c:	97 89       	ldd	r25, Z+23	; 0x17
     d3e:	80 8b       	std	Z+16, r24	; 0x10
     d40:	91 8b       	std	Z+17, r25	; 0x11
			m_wMillSec = 0;
     d42:	12 8a       	std	Z+18, r1	; 0x12
     d44:	13 8a       	std	Z+19, r1	; 0x13
			
			state = APP_SETUP;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	84 87       	std	Z+12, r24	; 0x0c
		break;
     d4a:	84 c0       	rjmp	.+264    	; 0xe54 <_ZN16CLaserControlApp3RunEv+0x4e0>
		case APP_OnTimerRestart:
			// Restart (return to Run) state
			pic_id = swap(PICID_TIMER);
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	99 e1       	ldi	r25, 0x19	; 25
     d50:	8f 83       	std	Y+7, r24	; 0x07
     d52:	98 87       	std	Y+8, r25	; 0x08
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     d54:	22 e0       	ldi	r18, 0x02	; 2
     d56:	ae 01       	movw	r20, r28
     d58:	49 5f       	subi	r20, 0xF9	; 249
     d5a:	5f 4f       	sbci	r21, 0xFF	; 255
     d5c:	63 e0       	ldi	r22, 0x03	; 3
     d5e:	f8 01       	movw	r30, r16
     d60:	82 8d       	ldd	r24, Z+26	; 0x1a
     d62:	93 8d       	ldd	r25, Z+27	; 0x1b
     d64:	0e 94 51 20 	call	0x40a2	; 0x40a2 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     d68:	f8 01       	movw	r30, r16
     d6a:	82 8d       	ldd	r24, Z+26	; 0x1a
     d6c:	93 8d       	ldd	r25, Z+27	; 0x1b
     d6e:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			// Reset
			m_wMinutes = m_wSetMin;
     d72:	f8 01       	movw	r30, r16
     d74:	84 89       	ldd	r24, Z+20	; 0x14
     d76:	95 89       	ldd	r25, Z+21	; 0x15
     d78:	86 87       	std	Z+14, r24	; 0x0e
     d7a:	97 87       	std	Z+15, r25	; 0x0f
			m_wSeconds = m_wSetSec;
     d7c:	86 89       	ldd	r24, Z+22	; 0x16
     d7e:	97 89       	ldd	r25, Z+23	; 0x17
     d80:	80 8b       	std	Z+16, r24	; 0x10
     d82:	91 8b       	std	Z+17, r25	; 0x11
			m_wMillSec = 0;
     d84:	12 8a       	std	Z+18, r1	; 0x12
     d86:	13 8a       	std	Z+19, r1	; 0x13
			
			timer.Stop();
     d88:	80 ef       	ldi	r24, 0xF0	; 240
     d8a:	90 e2       	ldi	r25, 0x20	; 32
     d8c:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_ZN7CTimerC4StopEv>
			
			player.SoundStart(1000, 50, 1);
     d90:	21 e0       	ldi	r18, 0x01	; 1
     d92:	42 e3       	ldi	r20, 0x32	; 50
     d94:	50 e0       	ldi	r21, 0x00	; 0
     d96:	68 ee       	ldi	r22, 0xE8	; 232
     d98:	73 e0       	ldi	r23, 0x03	; 3
     d9a:	85 e0       	ldi	r24, 0x05	; 5
     d9c:	93 e2       	ldi	r25, 0x23	; 35
     d9e:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
     da2:	85 e0       	ldi	r24, 0x05	; 5
     da4:	93 e2       	ldi	r25, 0x23	; 35
     da6:	0e 94 09 08 	call	0x1012	; 0x1012 <_ZN12CSoundPlayer9SoundStopEv>
     daa:	ff ef       	ldi	r31, 0xFF	; 255
     dac:	21 ee       	ldi	r18, 0xE1	; 225
     dae:	84 e0       	ldi	r24, 0x04	; 4
     db0:	f1 50       	subi	r31, 0x01	; 1
     db2:	20 40       	sbci	r18, 0x00	; 0
     db4:	80 40       	sbci	r24, 0x00	; 0
     db6:	e1 f7       	brne	.-8      	; 0xdb0 <_ZN16CLaserControlApp3RunEv+0x43c>
     db8:	00 c0       	rjmp	.+0      	; 0xdba <_ZN16CLaserControlApp3RunEv+0x446>
     dba:	00 00       	nop
			_delay_ms(50);
			player.SoundStart(1000, 50, 1);
     dbc:	21 e0       	ldi	r18, 0x01	; 1
     dbe:	42 e3       	ldi	r20, 0x32	; 50
     dc0:	50 e0       	ldi	r21, 0x00	; 0
     dc2:	68 ee       	ldi	r22, 0xE8	; 232
     dc4:	73 e0       	ldi	r23, 0x03	; 3
     dc6:	85 e0       	ldi	r24, 0x05	; 5
     dc8:	93 e2       	ldi	r25, 0x23	; 35
     dca:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
     dce:	85 e0       	ldi	r24, 0x05	; 5
     dd0:	93 e2       	ldi	r25, 0x23	; 35
     dd2:	0e 94 09 08 	call	0x1012	; 0x1012 <_ZN12CSoundPlayer9SoundStopEv>
     dd6:	9f ef       	ldi	r25, 0xFF	; 255
     dd8:	e1 ee       	ldi	r30, 0xE1	; 225
     dda:	f4 e0       	ldi	r31, 0x04	; 4
     ddc:	91 50       	subi	r25, 0x01	; 1
     dde:	e0 40       	sbci	r30, 0x00	; 0
     de0:	f0 40       	sbci	r31, 0x00	; 0
     de2:	e1 f7       	brne	.-8      	; 0xddc <_ZN16CLaserControlApp3RunEv+0x468>
     de4:	00 c0       	rjmp	.+0      	; 0xde6 <_ZN16CLaserControlApp3RunEv+0x472>
     de6:	00 00       	nop
			_delay_ms(50);
			
			// Stop timer
			timer.Start(25000);
     de8:	68 ea       	ldi	r22, 0xA8	; 168
     dea:	71 e6       	ldi	r23, 0x61	; 97
     dec:	80 ef       	ldi	r24, 0xF0	; 240
     dee:	90 e2       	ldi	r25, 0x20	; 32
     df0:	0e 94 4d 08 	call	0x109a	; 0x109a <_ZN7CTimerC5StartEj>
			laserBoard.Relay1On();
     df4:	86 e0       	ldi	r24, 0x06	; 6
     df6:	93 e2       	ldi	r25, 0x23	; 35
     df8:	0e 94 08 03 	call	0x610	; 0x610 <_ZN11CLaserBoard8Relay1OnEv>
			
			state = APP_RUN;
     dfc:	83 e0       	ldi	r24, 0x03	; 3
     dfe:	f8 01       	movw	r30, r16
     e00:	84 87       	std	Z+12, r24	; 0x0c
		break;
     e02:	28 c0       	rjmp	.+80     	; 0xe54 <_ZN16CLaserControlApp3RunEv+0x4e0>
		case APP_OnHL:
			// Turn HL (return to Setup) state
			pic_id = swap(PICID_SETUP);
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	97 e1       	ldi	r25, 0x17	; 23
     e08:	8f 83       	std	Y+7, r24	; 0x07
     e0a:	98 87       	std	Y+8, r25	; 0x08
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     e0c:	22 e0       	ldi	r18, 0x02	; 2
     e0e:	ae 01       	movw	r20, r28
     e10:	49 5f       	subi	r20, 0xF9	; 249
     e12:	5f 4f       	sbci	r21, 0xFF	; 255
     e14:	63 e0       	ldi	r22, 0x03	; 3
     e16:	f8 01       	movw	r30, r16
     e18:	82 8d       	ldd	r24, Z+26	; 0x1a
     e1a:	93 8d       	ldd	r25, Z+27	; 0x1b
     e1c:	0e 94 51 20 	call	0x40a2	; 0x40a2 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     e20:	f8 01       	movw	r30, r16
     e22:	82 8d       	ldd	r24, Z+26	; 0x1a
     e24:	93 8d       	ldd	r25, Z+27	; 0x1b
     e26:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			static bool hl = true;
			
			if (hl)
     e2a:	80 91 46 20 	lds	r24, 0x2046
     e2e:	88 23       	and	r24, r24
     e30:	29 f0       	breq	.+10     	; 0xe3c <_ZN16CLaserControlApp3RunEv+0x4c8>
				laserBoard.Relay2On();
     e32:	86 e0       	ldi	r24, 0x06	; 6
     e34:	93 e2       	ldi	r25, 0x23	; 35
     e36:	0e 94 0c 03 	call	0x618	; 0x618 <_ZN11CLaserBoard8Relay2OnEv>
     e3a:	04 c0       	rjmp	.+8      	; 0xe44 <_ZN16CLaserControlApp3RunEv+0x4d0>
			else
				laserBoard.Relay2Off();
     e3c:	86 e0       	ldi	r24, 0x06	; 6
     e3e:	93 e2       	ldi	r25, 0x23	; 35
     e40:	0e 94 14 03 	call	0x628	; 0x628 <_ZN11CLaserBoard9Relay2OffEv>
				
			hl = !hl;
     e44:	80 91 46 20 	lds	r24, 0x2046
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	89 27       	eor	r24, r25
     e4c:	80 93 46 20 	sts	0x2046, r24
			
			state = APP_SETUP;
     e50:	f8 01       	movw	r30, r16
     e52:	94 87       	std	Z+12, r25	; 0x0c
		break;
	}
}
     e54:	28 96       	adiw	r28, 0x08	; 8
     e56:	cd bf       	out	0x3d, r28	; 61
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	08 95       	ret

00000e64 <_ZN16CLaserControlApp9OnTimeoutEv>:
	m_wMillSec-=10;
}

void CLaserControlApp::OnTimeout()
{
	timer.Stop();
     e64:	80 ef       	ldi	r24, 0xF0	; 240
     e66:	90 e2       	ldi	r25, 0x20	; 32
     e68:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_ZN7CTimerC4StopEv>
	laserBoard.Relay1Off();
     e6c:	86 e0       	ldi	r24, 0x06	; 6
     e6e:	93 e2       	ldi	r25, 0x23	; 35
     e70:	0e 94 10 03 	call	0x620	; 0x620 <_ZN11CLaserBoard9Relay1OffEv>
     e74:	08 95       	ret

00000e76 <_ZN16CLaserControlApp7OnTimerEv>:
		break;
	}
}

void CLaserControlApp::OnTimer()
{
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	ec 01       	movw	r28, r24
	if (m_wMillSec == 0)
     e7c:	8a 89       	ldd	r24, Y+18	; 0x12
     e7e:	9b 89       	ldd	r25, Y+19	; 0x13
     e80:	89 2b       	or	r24, r25
     e82:	c9 f5       	brne	.+114    	; 0xef6 <_ZN16CLaserControlApp7OnTimerEv+0x80>
	{
		if (m_wSeconds == 0)
     e84:	88 89       	ldd	r24, Y+16	; 0x10
     e86:	99 89       	ldd	r25, Y+17	; 0x11
     e88:	89 2b       	or	r24, r25
     e8a:	f1 f4       	brne	.+60     	; 0xec8 <_ZN16CLaserControlApp7OnTimerEv+0x52>
		{
			if (m_wMinutes == 0)
     e8c:	8e 85       	ldd	r24, Y+14	; 0x0e
     e8e:	9f 85       	ldd	r25, Y+15	; 0x0f
     e90:	89 2b       	or	r24, r25
     e92:	89 f4       	brne	.+34     	; 0xeb6 <_ZN16CLaserControlApp7OnTimerEv+0x40>
			{
				OnTimeout();
     e94:	ce 01       	movw	r24, r28
     e96:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN16CLaserControlApp9OnTimeoutEv>
				player.SoundStart(1000, 1000, 0);
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	48 ee       	ldi	r20, 0xE8	; 232
     e9e:	53 e0       	ldi	r21, 0x03	; 3
     ea0:	68 ee       	ldi	r22, 0xE8	; 232
     ea2:	73 e0       	ldi	r23, 0x03	; 3
     ea4:	85 e0       	ldi	r24, 0x05	; 5
     ea6:	93 e2       	ldi	r25, 0x23	; 35
     ea8:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZN12CSoundPlayer10SoundStartEjjh>
				player.SoundStop();
     eac:	85 e0       	ldi	r24, 0x05	; 5
     eae:	93 e2       	ldi	r25, 0x23	; 35
     eb0:	0e 94 09 08 	call	0x1012	; 0x1012 <_ZN12CSoundPlayer9SoundStopEv>
				//player.beep(1000, 1000);
				return;
     eb4:	55 c0       	rjmp	.+170    	; 0xf60 <_ZN16CLaserControlApp7OnTimerEv+0xea>
			}
			m_wSeconds = 60;
     eb6:	8c e3       	ldi	r24, 0x3C	; 60
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	88 8b       	std	Y+16, r24	; 0x10
     ebc:	99 8b       	std	Y+17, r25	; 0x11
			m_wMinutes--;
     ebe:	8e 85       	ldd	r24, Y+14	; 0x0e
     ec0:	9f 85       	ldd	r25, Y+15	; 0x0f
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	8e 87       	std	Y+14, r24	; 0x0e
     ec6:	9f 87       	std	Y+15, r25	; 0x0f
		}
		m_wMillSec = 100; // Every 10 ms
     ec8:	84 e6       	ldi	r24, 0x64	; 100
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	8a 8b       	std	Y+18, r24	; 0x12
     ece:	9b 8b       	std	Y+19, r25	; 0x13
		m_wSeconds--;
     ed0:	88 89       	ldd	r24, Y+16	; 0x10
     ed2:	99 89       	ldd	r25, Y+17	; 0x11
     ed4:	01 97       	sbiw	r24, 0x01	; 1
     ed6:	88 8b       	std	Y+16, r24	; 0x10
     ed8:	99 8b       	std	Y+17, r25	; 0x11
		if (m_wMinutes == 0 && m_wSeconds < 10)
     eda:	8e 85       	ldd	r24, Y+14	; 0x0e
     edc:	9f 85       	ldd	r25, Y+15	; 0x0f
     ede:	89 2b       	or	r24, r25
     ee0:	81 f4       	brne	.+32     	; 0xf02 <_ZN16CLaserControlApp7OnTimerEv+0x8c>
     ee2:	88 89       	ldd	r24, Y+16	; 0x10
     ee4:	99 89       	ldd	r25, Y+17	; 0x11
     ee6:	0a 97       	sbiw	r24, 0x0a	; 10
     ee8:	d0 f0       	brcs	.+52     	; 0xf1e <_ZN16CLaserControlApp7OnTimerEv+0xa8>
     eea:	0b c0       	rjmp	.+22     	; 0xf02 <_ZN16CLaserControlApp7OnTimerEv+0x8c>
		{
			if (m_wMinutes == 0 && m_wSeconds < 5)
     eec:	88 89       	ldd	r24, Y+16	; 0x10
     eee:	99 89       	ldd	r25, Y+17	; 0x11
     ef0:	05 97       	sbiw	r24, 0x05	; 5
     ef2:	d0 f0       	brcs	.+52     	; 0xf28 <_ZN16CLaserControlApp7OnTimerEv+0xb2>
     ef4:	27 c0       	rjmp	.+78     	; 0xf44 <_ZN16CLaserControlApp7OnTimerEv+0xce>
			player.SoundStart(1000, 25, 2);
			player.SoundStop();
			//player.beep(1000, 25);
		}
	}
	m_wMillSec-=10;
     ef6:	8a 89       	ldd	r24, Y+18	; 0x12
     ef8:	9b 89       	ldd	r25, Y+19	; 0x13
     efa:	0a 97       	sbiw	r24, 0x0a	; 10
     efc:	8a 8b       	std	Y+18, r24	; 0x12
     efe:	9b 8b       	std	Y+19, r25	; 0x13
     f00:	2f c0       	rjmp	.+94     	; 0xf60 <_ZN16CLaserControlApp7OnTimerEv+0xea>
				//player.beep(1000, 50);
			}
		}
		else
		{
			player.SoundStart(1000, 25, 2);
     f02:	22 e0       	ldi	r18, 0x02	; 2
     f04:	49 e1       	ldi	r20, 0x19	; 25
     f06:	50 e0       	ldi	r21, 0x00	; 0
     f08:	68 ee       	ldi	r22, 0xE8	; 232
     f0a:	73 e0       	ldi	r23, 0x03	; 3
     f0c:	85 e0       	ldi	r24, 0x05	; 5
     f0e:	93 e2       	ldi	r25, 0x23	; 35
     f10:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
     f14:	85 e0       	ldi	r24, 0x05	; 5
     f16:	93 e2       	ldi	r25, 0x23	; 35
     f18:	0e 94 09 08 	call	0x1012	; 0x1012 <_ZN12CSoundPlayer9SoundStopEv>
     f1c:	ec cf       	rjmp	.-40     	; 0xef6 <_ZN16CLaserControlApp7OnTimerEv+0x80>
		}
		m_wMillSec = 100; // Every 10 ms
		m_wSeconds--;
		if (m_wMinutes == 0 && m_wSeconds < 10)
		{
			if (m_wMinutes == 0 && m_wSeconds < 5)
     f1e:	8e 85       	ldd	r24, Y+14	; 0x0e
     f20:	9f 85       	ldd	r25, Y+15	; 0x0f
     f22:	89 2b       	or	r24, r25
     f24:	19 f3       	breq	.-58     	; 0xeec <_ZN16CLaserControlApp7OnTimerEv+0x76>
     f26:	0e c0       	rjmp	.+28     	; 0xf44 <_ZN16CLaserControlApp7OnTimerEv+0xce>
			{
				player.SoundStart(1000, 100, 0);
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	44 e6       	ldi	r20, 0x64	; 100
     f2c:	50 e0       	ldi	r21, 0x00	; 0
     f2e:	68 ee       	ldi	r22, 0xE8	; 232
     f30:	73 e0       	ldi	r23, 0x03	; 3
     f32:	85 e0       	ldi	r24, 0x05	; 5
     f34:	93 e2       	ldi	r25, 0x23	; 35
     f36:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZN12CSoundPlayer10SoundStartEjjh>
				player.SoundStop();
     f3a:	85 e0       	ldi	r24, 0x05	; 5
     f3c:	93 e2       	ldi	r25, 0x23	; 35
     f3e:	0e 94 09 08 	call	0x1012	; 0x1012 <_ZN12CSoundPlayer9SoundStopEv>
     f42:	d9 cf       	rjmp	.-78     	; 0xef6 <_ZN16CLaserControlApp7OnTimerEv+0x80>
				//player.beep(1000, 100);
			}
			else
			{
				player.SoundStart(1000, 50, 1);
     f44:	21 e0       	ldi	r18, 0x01	; 1
     f46:	42 e3       	ldi	r20, 0x32	; 50
     f48:	50 e0       	ldi	r21, 0x00	; 0
     f4a:	68 ee       	ldi	r22, 0xE8	; 232
     f4c:	73 e0       	ldi	r23, 0x03	; 3
     f4e:	85 e0       	ldi	r24, 0x05	; 5
     f50:	93 e2       	ldi	r25, 0x23	; 35
     f52:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZN12CSoundPlayer10SoundStartEjjh>
				player.SoundStop();
     f56:	85 e0       	ldi	r24, 0x05	; 5
     f58:	93 e2       	ldi	r25, 0x23	; 35
     f5a:	0e 94 09 08 	call	0x1012	; 0x1012 <_ZN12CSoundPlayer9SoundStopEv>
     f5e:	cb cf       	rjmp	.-106    	; 0xef6 <_ZN16CLaserControlApp7OnTimerEv+0x80>
			player.SoundStop();
			//player.beep(1000, 25);
		}
	}
	m_wMillSec-=10;
}
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	08 95       	ret

00000f66 <_ZN16CLaserControlApp13OnTimerStaticEPv>:
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnTimer();
     f66:	0e 94 3b 07 	call	0xe76	; 0xe76 <_ZN16CLaserControlApp7OnTimerEv>
     f6a:	08 95       	ret

00000f6c <_ZN12CSoundPlayerC1Ev>:
	SoundStart(note, duration, 3);
	SoundStop();
}

// default constructor
CSoundPlayer::CSoundPlayer()
     f6c:	08 95       	ret

00000f6e <_ZN12CSoundPlayerD1Ev>:
{
} //CSoundPlayer

// default destructor
CSoundPlayer::~CSoundPlayer()
     f6e:	08 95       	ret

00000f70 <_ZN12CSoundPlayer19InitializeToneTimerEv>:
} //~CSoundPlayer

void CSoundPlayer::InitializeToneTimer()
{
	// Start timer 4MHz tick rate
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;
     f70:	e0 e0       	ldi	r30, 0x00	; 0
     f72:	fa e0       	ldi	r31, 0x0A	; 10
     f74:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE0.CTRLB = TC0_CCDEN_bm | TC_WGMODE_DS_B_gc;
     f76:	87 e8       	ldi	r24, 0x87	; 135
     f78:	81 83       	std	Z+1, r24	; 0x01
	
	// No events
	TCE0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
     f7a:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1.000 Hz PWM
	TCE0.PER = PERIOD_1Hz;
     f7c:	84 e2       	ldi	r24, 0x24	; 36
     f7e:	94 ef       	ldi	r25, 0xF4	; 244
     f80:	86 a3       	std	Z+38, r24	; 0x26
     f82:	97 a3       	std	Z+39, r25	; 0x27
	
	// Set 50% duty cycle
	TCE0.CCD =  MAXVOLUME_CC;
     f84:	82 e1       	ldi	r24, 0x12	; 18
     f86:	9a e7       	ldi	r25, 0x7A	; 122
     f88:	86 a7       	std	Z+46, r24	; 0x2e
     f8a:	97 a7       	std	Z+47, r25	; 0x2f
	
	// Disable interrupt
	TCE0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
     f8c:	16 82       	std	Z+6, r1	; 0x06
	TCE0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
     f8e:	17 82       	std	Z+7, r1	; 0x07
     f90:	08 95       	ret

00000f92 <_ZN12CSoundPlayer23InitializeDurationTimerEv>:

void CSoundPlayer::InitializeDurationTimer()
{
	// Start timer 4MHz tick rate
	//TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;
     f92:	e0 e4       	ldi	r30, 0x40	; 64
     f94:	fa e0       	ldi	r31, 0x0A	; 10
     f96:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE1.CTRLB = TC_WGMODE_NORMAL_gc;
     f98:	11 82       	std	Z+1, r1	; 0x01
	
	// No events
	TCE1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
     f9a:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1s
	TCE1.PER = DELAYPERIOD_1s;
     f9c:	84 e2       	ldi	r24, 0x24	; 36
     f9e:	94 ef       	ldi	r25, 0xF4	; 244
     fa0:	86 a3       	std	Z+38, r24	; 0x26
     fa2:	97 a3       	std	Z+39, r25	; 0x27
	
	// Disable interrupt
	TCE1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
     fa4:	16 82       	std	Z+6, r1	; 0x06
	TCE1.INTCTRLB = TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
     fa6:	17 82       	std	Z+7, r1	; 0x07
     fa8:	08 95       	ret

00000faa <_ZN12CSoundPlayer10SoundStartEjjh>:
}

void CSoundPlayer::SoundStart(uint16_t freq, uint16_t time, uint8_t volume)
{
     faa:	0f 93       	push	r16
     fac:	1f 93       	push	r17
     fae:	cf 93       	push	r28
     fb0:	8a 01       	movw	r16, r20
     fb2:	c2 2f       	mov	r28, r18
	uint16_t period_tc0 = PERIOD_1Hz/freq;
     fb4:	9b 01       	movw	r18, r22
     fb6:	40 e0       	ldi	r20, 0x00	; 0
     fb8:	50 e0       	ldi	r21, 0x00	; 0
     fba:	64 e2       	ldi	r22, 0x24	; 36
     fbc:	74 ef       	ldi	r23, 0xF4	; 244
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	0e 94 df 20 	call	0x41be	; 0x41be <__divmodsi4>
	uint16_t period_tc1 = DELAYPERIOD_A1s * time + (time >> DELAYPERIOD_S1s);
     fc6:	b8 01       	movw	r22, r16
     fc8:	76 95       	lsr	r23
     fca:	67 95       	ror	r22
     fcc:	ee e3       	ldi	r30, 0x3E	; 62
     fce:	e0 9f       	mul	r30, r16
     fd0:	c0 01       	movw	r24, r0
     fd2:	e1 9f       	mul	r30, r17
     fd4:	90 0d       	add	r25, r0
     fd6:	11 24       	eor	r1, r1
     fd8:	86 0f       	add	r24, r22
     fda:	97 1f       	adc	r25, r23
	
	// Config
	TCE0.CCD = period_tc0 >> (volume + 1);
     fdc:	cf 5f       	subi	r28, 0xFF	; 255
     fde:	b9 01       	movw	r22, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <_ZN12CSoundPlayer10SoundStartEjjh+0x3c>
     fe2:	76 95       	lsr	r23
     fe4:	67 95       	ror	r22
     fe6:	ca 95       	dec	r28
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <_ZN12CSoundPlayer10SoundStartEjjh+0x38>
     fea:	e0 e0       	ldi	r30, 0x00	; 0
     fec:	fa e0       	ldi	r31, 0x0A	; 10
     fee:	66 a7       	std	Z+46, r22	; 0x2e
     ff0:	77 a7       	std	Z+47, r23	; 0x2f
	TCE0.PER = period_tc0;
     ff2:	26 a3       	std	Z+38, r18	; 0x26
     ff4:	37 a3       	std	Z+39, r19	; 0x27
	TCE1.PER = period_tc1;
     ff6:	a0 e4       	ldi	r26, 0x40	; 64
     ff8:	ba e0       	ldi	r27, 0x0A	; 10
     ffa:	96 96       	adiw	r26, 0x26	; 38
     ffc:	8d 93       	st	X+, r24
     ffe:	9c 93       	st	X, r25
    1000:	97 97       	sbiw	r26, 0x27	; 39
	
	//Start timer
	TCE0.CTRLA = TC_CLKSEL_DIV256_gc;	//Start tone timer
    1002:	86 e0       	ldi	r24, 0x06	; 6
    1004:	80 83       	st	Z, r24
	TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;	//Start duration timer
    1006:	87 e0       	ldi	r24, 0x07	; 7
    1008:	8c 93       	st	X, r24
}
    100a:	cf 91       	pop	r28
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	08 95       	ret

00001012 <_ZN12CSoundPlayer9SoundStopEv>:

void CSoundPlayer::SoundStop()
{
	while (!(TCE1.INTFLAGS & TC0_OVFIF_bm));
    1012:	e0 e4       	ldi	r30, 0x40	; 64
    1014:	fa e0       	ldi	r31, 0x0A	; 10
    1016:	84 85       	ldd	r24, Z+12	; 0x0c
    1018:	80 ff       	sbrs	r24, 0
    101a:	fd cf       	rjmp	.-6      	; 0x1016 <_ZN12CSoundPlayer9SoundStopEv+0x4>
	TCE1.INTFLAGS &= TC0_OVFIF_bm;
    101c:	e0 e4       	ldi	r30, 0x40	; 64
    101e:	fa e0       	ldi	r31, 0x0A	; 10
    1020:	84 85       	ldd	r24, Z+12	; 0x0c
    1022:	81 70       	andi	r24, 0x01	; 1
    1024:	84 87       	std	Z+12, r24	; 0x0c

	//Stop timer
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;		//Stop tone timer
    1026:	a0 e0       	ldi	r26, 0x00	; 0
    1028:	ba e0       	ldi	r27, 0x0A	; 10
    102a:	1c 92       	st	X, r1
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;		//Stop duration timer
    102c:	10 82       	st	Z, r1

	// Reset duration timer
	TCE1.CNT = 0;
    102e:	10 a2       	std	Z+32, r1	; 0x20
    1030:	11 a2       	std	Z+33, r1	; 0x21
	TCE0.CNT = 0;
    1032:	90 96       	adiw	r26, 0x20	; 32
    1034:	1d 92       	st	X+, r1
    1036:	1c 92       	st	X, r1
    1038:	91 97       	sbiw	r26, 0x21	; 33
    103a:	2f ef       	ldi	r18, 0xFF	; 255
    103c:	83 ef       	ldi	r24, 0xF3	; 243
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	21 50       	subi	r18, 0x01	; 1
    1042:	80 40       	sbci	r24, 0x00	; 0
    1044:	90 40       	sbci	r25, 0x00	; 0
    1046:	e1 f7       	brne	.-8      	; 0x1040 <_ZN12CSoundPlayer9SoundStopEv+0x2e>
    1048:	00 c0       	rjmp	.+0      	; 0x104a <_ZN12CSoundPlayer9SoundStopEv+0x38>
    104a:	00 00       	nop
    104c:	08 95       	ret

0000104e <_ZN12CSoundPlayer10InitializeEv>:

	_delay_ms(20);
} 

void CSoundPlayer::Initialize()
{
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	ec 01       	movw	r28, r24
	InitializeToneTimer();
    1054:	0e 94 b8 07 	call	0xf70	; 0xf70 <_ZN12CSoundPlayer19InitializeToneTimerEv>
	InitializeDurationTimer();
    1058:	ce 01       	movw	r24, r28
    105a:	0e 94 c9 07 	call	0xf92	; 0xf92 <_ZN12CSoundPlayer23InitializeDurationTimerEv>
}
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	08 95       	ret

00001064 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerC::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    1064:	fc 01       	movw	r30, r24
    1066:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    1068:	e0 e0       	ldi	r30, 0x00	; 0
    106a:	f8 e0       	ldi	r31, 0x08	; 8
    106c:	80 81       	ld	r24, Z
    106e:	80 7f       	andi	r24, 0xF0	; 240
    1070:	80 83       	st	Z, r24
	
	// No events
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    1072:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC0.CNT = 0;
    1074:	10 a2       	std	Z+32, r1	; 0x20
    1076:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CCA = 0;
    1078:	10 a6       	std	Z+40, r1	; 0x28
    107a:	11 a6       	std	Z+41, r1	; 0x29
	TCC0.CCB = 0;
    107c:	12 a6       	std	Z+42, r1	; 0x2a
    107e:	13 a6       	std	Z+43, r1	; 0x2b
	TCC0.CCC = 0;
    1080:	14 a6       	std	Z+44, r1	; 0x2c
    1082:	15 a6       	std	Z+45, r1	; 0x2d
	TCC0.CCD = 0;
    1084:	16 a6       	std	Z+46, r1	; 0x2e
    1086:	17 a6       	std	Z+47, r1	; 0x2f
	TCC0.PER = 0;
    1088:	16 a2       	std	Z+38, r1	; 0x26
    108a:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    108c:	81 81       	ldd	r24, Z+1	; 0x01
    108e:	88 7f       	andi	r24, 0xF8	; 248
    1090:	68 2b       	or	r22, r24
    1092:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC0.CTRLA = (TCC0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    1094:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    1096:	17 82       	std	Z+7, r1	; 0x07
    1098:	08 95       	ret

0000109a <_ZN7CTimerC5StartEj>:
}

void CTimerC::Start(uint16_t period)
{
	// Set period of timer
	TCC0.PER = period;
    109a:	e0 e0       	ldi	r30, 0x00	; 0
    109c:	f8 e0       	ldi	r31, 0x08	; 8
    109e:	66 a3       	std	Z+38, r22	; 0x26
    10a0:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    10a2:	20 81       	ld	r18, Z
    10a4:	20 7f       	andi	r18, 0xF0	; 240
    10a6:	dc 01       	movw	r26, r24
    10a8:	12 96       	adiw	r26, 0x02	; 2
    10aa:	9c 91       	ld	r25, X
    10ac:	82 2f       	mov	r24, r18
    10ae:	89 2b       	or	r24, r25
    10b0:	80 83       	st	Z, r24
    10b2:	08 95       	ret

000010b4 <_ZN7CTimerC4StopEv>:
}

void CTimerC::Stop()
{
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    10b4:	e0 e0       	ldi	r30, 0x00	; 0
    10b6:	f8 e0       	ldi	r31, 0x08	; 8
    10b8:	80 81       	ld	r24, Z
    10ba:	80 7f       	andi	r24, 0xF0	; 240
    10bc:	80 83       	st	Z, r24
	TCC0.CNT = 0;
    10be:	10 a2       	std	Z+32, r1	; 0x20
    10c0:	11 a2       	std	Z+33, r1	; 0x21
    10c2:	08 95       	ret

000010c4 <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::EnableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB = (TCC0.CTRLB & ~0xF0) | channels;
    10c4:	e0 e0       	ldi	r30, 0x00	; 0
    10c6:	f8 e0       	ldi	r31, 0x08	; 8
    10c8:	81 81       	ldd	r24, Z+1	; 0x01
    10ca:	8f 70       	andi	r24, 0x0F	; 15
    10cc:	68 2b       	or	r22, r24
    10ce:	61 83       	std	Z+1, r22	; 0x01
    10d0:	08 95       	ret

000010d2 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::DisableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB &= ~channels;
    10d2:	e0 e0       	ldi	r30, 0x00	; 0
    10d4:	f8 e0       	ldi	r31, 0x08	; 8
    10d6:	81 81       	ldd	r24, Z+1	; 0x01
    10d8:	60 95       	com	r22
    10da:	68 23       	and	r22, r24
    10dc:	61 83       	std	Z+1, r22	; 0x01
    10de:	08 95       	ret

000010e0 <_ZN7CTimerC9SetPeriodEj>:
}

void CTimerC::SetPeriod(uint16_t value)
{
	TCC0.PER = value;
    10e0:	60 93 26 08 	sts	0x0826, r22
    10e4:	70 93 27 08 	sts	0x0827, r23
    10e8:	08 95       	ret

000010ea <_ZN7CTimerC8SetCOMPAEj>:
}

void CTimerC::SetCOMPA(uint16_t value)
{
	TCC0.CCA = value;
    10ea:	60 93 28 08 	sts	0x0828, r22
    10ee:	70 93 29 08 	sts	0x0829, r23
    10f2:	08 95       	ret

000010f4 <_ZN7CTimerC8SetCOMPBEj>:
}

void CTimerC::SetCOMPB(uint16_t value)
{
	TCC0.CCB = value;
    10f4:	60 93 2a 08 	sts	0x082A, r22
    10f8:	70 93 2b 08 	sts	0x082B, r23
    10fc:	08 95       	ret

000010fe <_ZN7CTimerC8SetCOMPCEj>:
}

void CTimerC::SetCOMPC(uint16_t value)
{
	TCC0.CCC = value;
    10fe:	60 93 2c 08 	sts	0x082C, r22
    1102:	70 93 2d 08 	sts	0x082D, r23
    1106:	08 95       	ret

00001108 <_ZN7CTimerC8SetCOMPDEj>:
}

void CTimerC::SetCOMPD(uint16_t value)
{
	TCC0.CCD = value;
    1108:	60 93 2e 08 	sts	0x082E, r22
    110c:	70 93 2f 08 	sts	0x082F, r23
    1110:	08 95       	ret

00001112 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    1112:	61 15       	cp	r22, r1
    1114:	71 05       	cpc	r23, r1
    1116:	31 f0       	breq	.+12     	; 0x1124 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    1118:	e0 e0       	ldi	r30, 0x00	; 0
    111a:	f8 e0       	ldi	r31, 0x08	; 8
    111c:	86 81       	ldd	r24, Z+6	; 0x06
    111e:	83 70       	andi	r24, 0x03	; 3
    1120:	28 2b       	or	r18, r24
    1122:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCC0_OVF_vect_num] = func;
    1124:	60 93 0f 21 	sts	0x210F, r22
    1128:	70 93 10 21 	sts	0x2110, r23
	InterruptSenderTable[TCC0_OVF_vect_num] = owner;
    112c:	40 93 05 22 	sts	0x2205, r20
    1130:	50 93 06 22 	sts	0x2206, r21
    1134:	08 95       	ret

00001136 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    1136:	61 15       	cp	r22, r1
    1138:	71 05       	cpc	r23, r1
    113a:	31 f0       	breq	.+12     	; 0x1148 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    113c:	e0 e0       	ldi	r30, 0x00	; 0
    113e:	f8 e0       	ldi	r31, 0x08	; 8
    1140:	86 81       	ldd	r24, Z+6	; 0x06
    1142:	8c 70       	andi	r24, 0x0C	; 12
    1144:	28 2b       	or	r18, r24
    1146:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC0_ERR_vect_num] = func;
    1148:	60 93 11 21 	sts	0x2111, r22
    114c:	70 93 12 21 	sts	0x2112, r23
	InterruptSenderTable[TCC0_ERR_vect_num] = owner;
    1150:	40 93 07 22 	sts	0x2207, r20
    1154:	50 93 08 22 	sts	0x2208, r21
    1158:	08 95       	ret

0000115a <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    115a:	61 15       	cp	r22, r1
    115c:	71 05       	cpc	r23, r1
    115e:	31 f0       	breq	.+12     	; 0x116c <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    1160:	e0 e0       	ldi	r30, 0x00	; 0
    1162:	f8 e0       	ldi	r31, 0x08	; 8
    1164:	87 81       	ldd	r24, Z+7	; 0x07
    1166:	83 70       	andi	r24, 0x03	; 3
    1168:	28 2b       	or	r18, r24
    116a:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCA_vect_num] = func;
    116c:	60 93 13 21 	sts	0x2113, r22
    1170:	70 93 14 21 	sts	0x2114, r23
	InterruptSenderTable[TCC0_CCA_vect_num] = owner;
    1174:	40 93 09 22 	sts	0x2209, r20
    1178:	50 93 0a 22 	sts	0x220A, r21
    117c:	08 95       	ret

0000117e <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    117e:	61 15       	cp	r22, r1
    1180:	71 05       	cpc	r23, r1
    1182:	31 f0       	breq	.+12     	; 0x1190 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    1184:	e0 e0       	ldi	r30, 0x00	; 0
    1186:	f8 e0       	ldi	r31, 0x08	; 8
    1188:	87 81       	ldd	r24, Z+7	; 0x07
    118a:	8c 70       	andi	r24, 0x0C	; 12
    118c:	28 2b       	or	r18, r24
    118e:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCB_vect_num] = func;
    1190:	60 93 15 21 	sts	0x2115, r22
    1194:	70 93 16 21 	sts	0x2116, r23
	InterruptSenderTable[TCC0_CCB_vect_num] = owner;
    1198:	40 93 0b 22 	sts	0x220B, r20
    119c:	50 93 0c 22 	sts	0x220C, r21
    11a0:	08 95       	ret

000011a2 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerC::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    11a2:	61 15       	cp	r22, r1
    11a4:	71 05       	cpc	r23, r1
    11a6:	31 f0       	breq	.+12     	; 0x11b4 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    11a8:	e0 e0       	ldi	r30, 0x00	; 0
    11aa:	f8 e0       	ldi	r31, 0x08	; 8
    11ac:	87 81       	ldd	r24, Z+7	; 0x07
    11ae:	80 73       	andi	r24, 0x30	; 48
    11b0:	28 2b       	or	r18, r24
    11b2:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCC_vect_num] = func;
    11b4:	60 93 17 21 	sts	0x2117, r22
    11b8:	70 93 18 21 	sts	0x2118, r23
	InterruptSenderTable[TCC0_CCC_vect_num] = owner;
    11bc:	40 93 0d 22 	sts	0x220D, r20
    11c0:	50 93 0e 22 	sts	0x220E, r21
    11c4:	08 95       	ret

000011c6 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerC::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    11c6:	61 15       	cp	r22, r1
    11c8:	71 05       	cpc	r23, r1
    11ca:	31 f0       	breq	.+12     	; 0x11d8 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    11cc:	e0 e0       	ldi	r30, 0x00	; 0
    11ce:	f8 e0       	ldi	r31, 0x08	; 8
    11d0:	87 81       	ldd	r24, Z+7	; 0x07
    11d2:	80 7c       	andi	r24, 0xC0	; 192
    11d4:	28 2b       	or	r18, r24
    11d6:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCD_vect_num] = func;
    11d8:	60 93 19 21 	sts	0x2119, r22
    11dc:	70 93 1a 21 	sts	0x211A, r23
	InterruptSenderTable[TCC0_CCD_vect_num] = owner;
    11e0:	40 93 0f 22 	sts	0x220F, r20
    11e4:	50 93 10 22 	sts	0x2210, r21
    11e8:	08 95       	ret

000011ea <_ZN7CTimerCC1Ev>:

#include "CTimerC.h"
#include "LaserLib/intx128.h"

// default constructor
CTimerC::CTimerC()
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	ec 01       	movw	r28, r24
    11f0:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_ZN6CTimerC1Ev>
    11f4:	8b e7       	ldi	r24, 0x7B	; 123
    11f6:	90 e2       	ldi	r25, 0x20	; 32
    11f8:	88 83       	st	Y, r24
    11fa:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	08 95       	ret

00001202 <_ZN7CTimerCD1Ev>:

// default destructor
CTimerC::~CTimerC()
    1202:	2b e7       	ldi	r18, 0x7B	; 123
    1204:	30 e2       	ldi	r19, 0x20	; 32
    1206:	fc 01       	movw	r30, r24
    1208:	20 83       	st	Z, r18
    120a:	31 83       	std	Z+1, r19	; 0x01
    120c:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_ZN6CTimerD1Ev>
    1210:	08 95       	ret

00001212 <_ZN4CSPIC1Ev>:
#include <avr/io.h>
#include <stdlib.h>
#include <string.h>

// default constructor
CSPI::CSPI()
    1212:	08 95       	ret

00001214 <_ZN4CSPID1Ev>:
{
} //CSPI

// default destructor
CSPI::~CSPI()
    1214:	08 95       	ret

00001216 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>:
{
} //~CSPI

void CSPI::Initialize(bool Master, SPI_DATA_ORDER dord, SPI_MODE mode, bool doubleClk, SPI_PRESCALER_t prescaler)
{
    1216:	ef 92       	push	r14
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	ec 01       	movw	r28, r24
	PORTE.DIRSET = PIN4_bm | PIN5_bm | PIN7_bm; // MOSI, nSS, SCK to out
    1222:	e0 e8       	ldi	r30, 0x80	; 128
    1224:	f6 e0       	ldi	r31, 0x06	; 6
    1226:	80 eb       	ldi	r24, 0xB0	; 176
    1228:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRCLR = PIN6_bm;						// MISO to in
    122a:	90 e4       	ldi	r25, 0x40	; 64
    122c:	92 83       	std	Z+2, r25	; 0x02
	
	// All slew rate limit enable with inverting
	PORTE.PIN4CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    122e:	90 ec       	ldi	r25, 0xC0	; 192
    1230:	94 8b       	std	Z+20, r25	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    1232:	95 8b       	std	Z+21, r25	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    1234:	96 8b       	std	Z+22, r25	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    1236:	97 8b       	std	Z+23, r25	; 0x17
	
	// Set high
	PORTE.OUTSET = PIN4_bm | PIN5_bm | PIN7_bm;
    1238:	85 83       	std	Z+5, r24	; 0x05
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
		prescaler;
    123a:	61 11       	cpse	r22, r1
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2c>
    123e:	80 e4       	ldi	r24, 0x40	; 64
    1240:	01 c0       	rjmp	.+2      	; 0x1244 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2e>
    1242:	80 e5       	ldi	r24, 0x50	; 80
    1244:	01 11       	cpse	r16, r1
    1246:	02 c0       	rjmp	.+4      	; 0x124c <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x36>
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	01 c0       	rjmp	.+2      	; 0x124e <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x38>
    124c:	30 e8       	ldi	r19, 0x80	; 128
    124e:	41 11       	cpse	r20, r1
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x40>
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	01 c0       	rjmp	.+2      	; 0x1258 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x42>
    1256:	90 e2       	ldi	r25, 0x20	; 32
	SPIE.CTRL = 
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
    1258:	22 0f       	add	r18, r18
    125a:	22 0f       	add	r18, r18
    125c:	e2 2a       	or	r14, r18
    125e:	e8 2a       	or	r14, r24
    1260:	e3 2a       	or	r14, r19
		prescaler;
    1262:	e9 2a       	or	r14, r25
    1264:	00 ec       	ldi	r16, 0xC0	; 192
    1266:	1a e0       	ldi	r17, 0x0A	; 10
    1268:	f8 01       	movw	r30, r16
    126a:	e0 82       	st	Z, r14
		
	// Allocate transmit buffer
	buffer = (uint8_t*)malloc(256);
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	91 e0       	ldi	r25, 0x01	; 1
    1270:	0e 94 37 21 	call	0x426e	; 0x426e <malloc>
    1274:	88 83       	st	Y, r24
    1276:	99 83       	std	Y+1, r25	; 0x01
	
	// Enable interrupt
	SPIE.INTCTRL = SPI_INTLVL_LO_gc;
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	f8 01       	movw	r30, r16
    127c:	81 83       	std	Z+1, r24	; 0x01
	
	// Set interrupts
	InterruptFuncTable[SPIE_INT_vect_num] = StaticOnTransmit;
    127e:	87 e6       	ldi	r24, 0x67	; 103
    1280:	99 e0       	ldi	r25, 0x09	; 9
    1282:	80 93 65 21 	sts	0x2165, r24
    1286:	90 93 66 21 	sts	0x2166, r25
	InterruptSenderTable[SPIE_INT_vect_num] = this;
    128a:	c0 93 5b 22 	sts	0x225B, r28
    128e:	d0 93 5c 22 	sts	0x225C, r29
}
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	1f 91       	pop	r17
    1298:	0f 91       	pop	r16
    129a:	ef 90       	pop	r14
    129c:	08 95       	ret

0000129e <_ZN4CSPI10OnTransmitEv>:
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
}

void CSPI::OnTransmit()
{
    129e:	fc 01       	movw	r30, r24
	if (rx_pos != 0)
    12a0:	82 81       	ldd	r24, Z+2	; 0x02
    12a2:	93 81       	ldd	r25, Z+3	; 0x03
    12a4:	89 2b       	or	r24, r25
    12a6:	79 f0       	breq	.+30     	; 0x12c6 <_ZN4CSPI10OnTransmitEv+0x28>
		SPIE.DATA = buffer[--rx_pos];
    12a8:	40 81       	ld	r20, Z
    12aa:	51 81       	ldd	r21, Z+1	; 0x01
    12ac:	22 81       	ldd	r18, Z+2	; 0x02
    12ae:	33 81       	ldd	r19, Z+3	; 0x03
    12b0:	c9 01       	movw	r24, r18
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	82 83       	std	Z+2, r24	; 0x02
    12b6:	93 83       	std	Z+3, r25	; 0x03
    12b8:	fa 01       	movw	r30, r20
    12ba:	e8 0f       	add	r30, r24
    12bc:	f9 1f       	adc	r31, r25
    12be:	80 81       	ld	r24, Z
    12c0:	80 93 c3 0a 	sts	0x0AC3, r24
    12c4:	08 95       	ret
	else
		PORTE.OUTSET = PIN4_bm;
    12c6:	80 e1       	ldi	r24, 0x10	; 16
    12c8:	80 93 85 06 	sts	0x0685, r24
    12cc:	08 95       	ret

000012ce <_ZN4CSPI16StaticOnTransmitEPv>:
}

void CSPI::StaticOnTransmit(void* sender)
{
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
    12ce:	0e 94 4f 09 	call	0x129e	; 0x129e <_ZN4CSPI10OnTransmitEv>
    12d2:	08 95       	ret

000012d4 <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
    12d4:	2f e9       	ldi	r18, 0x9F	; 159
    12d6:	30 e2       	ldi	r19, 0x20	; 32
    12d8:	fc 01       	movw	r30, r24
    12da:	20 83       	st	Z, r18
    12dc:	31 83       	std	Z+1, r19	; 0x01
    12de:	08 95       	ret

000012e0 <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
    12e0:	08 95       	ret

000012e2 <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
    12e2:	23 ec       	ldi	r18, 0xC3	; 195
    12e4:	30 e2       	ldi	r19, 0x20	; 32
    12e6:	fc 01       	movw	r30, r24
    12e8:	20 83       	st	Z, r18
    12ea:	31 83       	std	Z+1, r19	; 0x01
    12ec:	08 95       	ret

000012ee <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
    12ee:	08 95       	ret

000012f0 <__vector_1>:
		if (InterruptFuncTable[vector_id##_num] != 0)										\
		(*(InterruptFuncTable[vector_id##_num]))(InterruptSenderTable[vector_id##_num]);	\
	}

/* OSC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(OSC_OSCF_vect)      /* External Oscillator Failure Interrupt (NMI) */
    12f0:	1f 92       	push	r1
    12f2:	0f 92       	push	r0
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	0f 92       	push	r0
    12f8:	11 24       	eor	r1, r1
    12fa:	0b b6       	in	r0, 0x3b	; 59
    12fc:	0f 92       	push	r0
    12fe:	2f 93       	push	r18
    1300:	3f 93       	push	r19
    1302:	4f 93       	push	r20
    1304:	5f 93       	push	r21
    1306:	6f 93       	push	r22
    1308:	7f 93       	push	r23
    130a:	8f 93       	push	r24
    130c:	9f 93       	push	r25
    130e:	af 93       	push	r26
    1310:	bf 93       	push	r27
    1312:	ef 93       	push	r30
    1314:	ff 93       	push	r31
    1316:	e0 91 f5 20 	lds	r30, 0x20F5
    131a:	f0 91 f6 20 	lds	r31, 0x20F6
    131e:	30 97       	sbiw	r30, 0x00	; 0
    1320:	29 f0       	breq	.+10     	; 0x132c <__vector_1+0x3c>
    1322:	80 91 eb 21 	lds	r24, 0x21EB
    1326:	90 91 ec 21 	lds	r25, 0x21EC
    132a:	19 95       	eicall
    132c:	ff 91       	pop	r31
    132e:	ef 91       	pop	r30
    1330:	bf 91       	pop	r27
    1332:	af 91       	pop	r26
    1334:	9f 91       	pop	r25
    1336:	8f 91       	pop	r24
    1338:	7f 91       	pop	r23
    133a:	6f 91       	pop	r22
    133c:	5f 91       	pop	r21
    133e:	4f 91       	pop	r20
    1340:	3f 91       	pop	r19
    1342:	2f 91       	pop	r18
    1344:	0f 90       	pop	r0
    1346:	0b be       	out	0x3b, r0	; 59
    1348:	0f 90       	pop	r0
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	0f 90       	pop	r0
    134e:	1f 90       	pop	r1
    1350:	18 95       	reti

00001352 <__vector_2>:

/* PORTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT0_vect)      /* External Interrupt 0 */
    1352:	1f 92       	push	r1
    1354:	0f 92       	push	r0
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	0f 92       	push	r0
    135a:	11 24       	eor	r1, r1
    135c:	0b b6       	in	r0, 0x3b	; 59
    135e:	0f 92       	push	r0
    1360:	2f 93       	push	r18
    1362:	3f 93       	push	r19
    1364:	4f 93       	push	r20
    1366:	5f 93       	push	r21
    1368:	6f 93       	push	r22
    136a:	7f 93       	push	r23
    136c:	8f 93       	push	r24
    136e:	9f 93       	push	r25
    1370:	af 93       	push	r26
    1372:	bf 93       	push	r27
    1374:	ef 93       	push	r30
    1376:	ff 93       	push	r31
    1378:	e0 91 f7 20 	lds	r30, 0x20F7
    137c:	f0 91 f8 20 	lds	r31, 0x20F8
    1380:	30 97       	sbiw	r30, 0x00	; 0
    1382:	29 f0       	breq	.+10     	; 0x138e <__vector_2+0x3c>
    1384:	80 91 ed 21 	lds	r24, 0x21ED
    1388:	90 91 ee 21 	lds	r25, 0x21EE
    138c:	19 95       	eicall
    138e:	ff 91       	pop	r31
    1390:	ef 91       	pop	r30
    1392:	bf 91       	pop	r27
    1394:	af 91       	pop	r26
    1396:	9f 91       	pop	r25
    1398:	8f 91       	pop	r24
    139a:	7f 91       	pop	r23
    139c:	6f 91       	pop	r22
    139e:	5f 91       	pop	r21
    13a0:	4f 91       	pop	r20
    13a2:	3f 91       	pop	r19
    13a4:	2f 91       	pop	r18
    13a6:	0f 90       	pop	r0
    13a8:	0b be       	out	0x3b, r0	; 59
    13aa:	0f 90       	pop	r0
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	0f 90       	pop	r0
    13b0:	1f 90       	pop	r1
    13b2:	18 95       	reti

000013b4 <__vector_3>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT1_vect)      /* External Interrupt 1 */
    13b4:	1f 92       	push	r1
    13b6:	0f 92       	push	r0
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	0f 92       	push	r0
    13bc:	11 24       	eor	r1, r1
    13be:	0b b6       	in	r0, 0x3b	; 59
    13c0:	0f 92       	push	r0
    13c2:	2f 93       	push	r18
    13c4:	3f 93       	push	r19
    13c6:	4f 93       	push	r20
    13c8:	5f 93       	push	r21
    13ca:	6f 93       	push	r22
    13cc:	7f 93       	push	r23
    13ce:	8f 93       	push	r24
    13d0:	9f 93       	push	r25
    13d2:	af 93       	push	r26
    13d4:	bf 93       	push	r27
    13d6:	ef 93       	push	r30
    13d8:	ff 93       	push	r31
    13da:	e0 91 f9 20 	lds	r30, 0x20F9
    13de:	f0 91 fa 20 	lds	r31, 0x20FA
    13e2:	30 97       	sbiw	r30, 0x00	; 0
    13e4:	29 f0       	breq	.+10     	; 0x13f0 <__vector_3+0x3c>
    13e6:	80 91 ef 21 	lds	r24, 0x21EF
    13ea:	90 91 f0 21 	lds	r25, 0x21F0
    13ee:	19 95       	eicall
    13f0:	ff 91       	pop	r31
    13f2:	ef 91       	pop	r30
    13f4:	bf 91       	pop	r27
    13f6:	af 91       	pop	r26
    13f8:	9f 91       	pop	r25
    13fa:	8f 91       	pop	r24
    13fc:	7f 91       	pop	r23
    13fe:	6f 91       	pop	r22
    1400:	5f 91       	pop	r21
    1402:	4f 91       	pop	r20
    1404:	3f 91       	pop	r19
    1406:	2f 91       	pop	r18
    1408:	0f 90       	pop	r0
    140a:	0b be       	out	0x3b, r0	; 59
    140c:	0f 90       	pop	r0
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	0f 90       	pop	r0
    1412:	1f 90       	pop	r1
    1414:	18 95       	reti

00001416 <__vector_4>:

/* PORTR interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT0_vect)      /* External Interrupt 0 */
    1416:	1f 92       	push	r1
    1418:	0f 92       	push	r0
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	0f 92       	push	r0
    141e:	11 24       	eor	r1, r1
    1420:	0b b6       	in	r0, 0x3b	; 59
    1422:	0f 92       	push	r0
    1424:	2f 93       	push	r18
    1426:	3f 93       	push	r19
    1428:	4f 93       	push	r20
    142a:	5f 93       	push	r21
    142c:	6f 93       	push	r22
    142e:	7f 93       	push	r23
    1430:	8f 93       	push	r24
    1432:	9f 93       	push	r25
    1434:	af 93       	push	r26
    1436:	bf 93       	push	r27
    1438:	ef 93       	push	r30
    143a:	ff 93       	push	r31
    143c:	e0 91 fb 20 	lds	r30, 0x20FB
    1440:	f0 91 fc 20 	lds	r31, 0x20FC
    1444:	30 97       	sbiw	r30, 0x00	; 0
    1446:	29 f0       	breq	.+10     	; 0x1452 <__vector_4+0x3c>
    1448:	80 91 f1 21 	lds	r24, 0x21F1
    144c:	90 91 f2 21 	lds	r25, 0x21F2
    1450:	19 95       	eicall
    1452:	ff 91       	pop	r31
    1454:	ef 91       	pop	r30
    1456:	bf 91       	pop	r27
    1458:	af 91       	pop	r26
    145a:	9f 91       	pop	r25
    145c:	8f 91       	pop	r24
    145e:	7f 91       	pop	r23
    1460:	6f 91       	pop	r22
    1462:	5f 91       	pop	r21
    1464:	4f 91       	pop	r20
    1466:	3f 91       	pop	r19
    1468:	2f 91       	pop	r18
    146a:	0f 90       	pop	r0
    146c:	0b be       	out	0x3b, r0	; 59
    146e:	0f 90       	pop	r0
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	0f 90       	pop	r0
    1474:	1f 90       	pop	r1
    1476:	18 95       	reti

00001478 <__vector_5>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT1_vect)      /* External Interrupt 1 */
    1478:	1f 92       	push	r1
    147a:	0f 92       	push	r0
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	0f 92       	push	r0
    1480:	11 24       	eor	r1, r1
    1482:	0b b6       	in	r0, 0x3b	; 59
    1484:	0f 92       	push	r0
    1486:	2f 93       	push	r18
    1488:	3f 93       	push	r19
    148a:	4f 93       	push	r20
    148c:	5f 93       	push	r21
    148e:	6f 93       	push	r22
    1490:	7f 93       	push	r23
    1492:	8f 93       	push	r24
    1494:	9f 93       	push	r25
    1496:	af 93       	push	r26
    1498:	bf 93       	push	r27
    149a:	ef 93       	push	r30
    149c:	ff 93       	push	r31
    149e:	e0 91 fd 20 	lds	r30, 0x20FD
    14a2:	f0 91 fe 20 	lds	r31, 0x20FE
    14a6:	30 97       	sbiw	r30, 0x00	; 0
    14a8:	29 f0       	breq	.+10     	; 0x14b4 <__vector_5+0x3c>
    14aa:	80 91 f3 21 	lds	r24, 0x21F3
    14ae:	90 91 f4 21 	lds	r25, 0x21F4
    14b2:	19 95       	eicall
    14b4:	ff 91       	pop	r31
    14b6:	ef 91       	pop	r30
    14b8:	bf 91       	pop	r27
    14ba:	af 91       	pop	r26
    14bc:	9f 91       	pop	r25
    14be:	8f 91       	pop	r24
    14c0:	7f 91       	pop	r23
    14c2:	6f 91       	pop	r22
    14c4:	5f 91       	pop	r21
    14c6:	4f 91       	pop	r20
    14c8:	3f 91       	pop	r19
    14ca:	2f 91       	pop	r18
    14cc:	0f 90       	pop	r0
    14ce:	0b be       	out	0x3b, r0	; 59
    14d0:	0f 90       	pop	r0
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	0f 90       	pop	r0
    14d6:	1f 90       	pop	r1
    14d8:	18 95       	reti

000014da <__vector_6>:

/* DMA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH0_vect)      /* Channel 0 Interrupt */
    14da:	1f 92       	push	r1
    14dc:	0f 92       	push	r0
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	0f 92       	push	r0
    14e2:	11 24       	eor	r1, r1
    14e4:	0b b6       	in	r0, 0x3b	; 59
    14e6:	0f 92       	push	r0
    14e8:	2f 93       	push	r18
    14ea:	3f 93       	push	r19
    14ec:	4f 93       	push	r20
    14ee:	5f 93       	push	r21
    14f0:	6f 93       	push	r22
    14f2:	7f 93       	push	r23
    14f4:	8f 93       	push	r24
    14f6:	9f 93       	push	r25
    14f8:	af 93       	push	r26
    14fa:	bf 93       	push	r27
    14fc:	ef 93       	push	r30
    14fe:	ff 93       	push	r31
    1500:	e0 91 ff 20 	lds	r30, 0x20FF
    1504:	f0 91 00 21 	lds	r31, 0x2100
    1508:	30 97       	sbiw	r30, 0x00	; 0
    150a:	29 f0       	breq	.+10     	; 0x1516 <__vector_6+0x3c>
    150c:	80 91 f5 21 	lds	r24, 0x21F5
    1510:	90 91 f6 21 	lds	r25, 0x21F6
    1514:	19 95       	eicall
    1516:	ff 91       	pop	r31
    1518:	ef 91       	pop	r30
    151a:	bf 91       	pop	r27
    151c:	af 91       	pop	r26
    151e:	9f 91       	pop	r25
    1520:	8f 91       	pop	r24
    1522:	7f 91       	pop	r23
    1524:	6f 91       	pop	r22
    1526:	5f 91       	pop	r21
    1528:	4f 91       	pop	r20
    152a:	3f 91       	pop	r19
    152c:	2f 91       	pop	r18
    152e:	0f 90       	pop	r0
    1530:	0b be       	out	0x3b, r0	; 59
    1532:	0f 90       	pop	r0
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	0f 90       	pop	r0
    1538:	1f 90       	pop	r1
    153a:	18 95       	reti

0000153c <__vector_7>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH1_vect)      /* Channel 1 Interrupt */
    153c:	1f 92       	push	r1
    153e:	0f 92       	push	r0
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	0f 92       	push	r0
    1544:	11 24       	eor	r1, r1
    1546:	0b b6       	in	r0, 0x3b	; 59
    1548:	0f 92       	push	r0
    154a:	2f 93       	push	r18
    154c:	3f 93       	push	r19
    154e:	4f 93       	push	r20
    1550:	5f 93       	push	r21
    1552:	6f 93       	push	r22
    1554:	7f 93       	push	r23
    1556:	8f 93       	push	r24
    1558:	9f 93       	push	r25
    155a:	af 93       	push	r26
    155c:	bf 93       	push	r27
    155e:	ef 93       	push	r30
    1560:	ff 93       	push	r31
    1562:	e0 91 01 21 	lds	r30, 0x2101
    1566:	f0 91 02 21 	lds	r31, 0x2102
    156a:	30 97       	sbiw	r30, 0x00	; 0
    156c:	29 f0       	breq	.+10     	; 0x1578 <__vector_7+0x3c>
    156e:	80 91 f7 21 	lds	r24, 0x21F7
    1572:	90 91 f8 21 	lds	r25, 0x21F8
    1576:	19 95       	eicall
    1578:	ff 91       	pop	r31
    157a:	ef 91       	pop	r30
    157c:	bf 91       	pop	r27
    157e:	af 91       	pop	r26
    1580:	9f 91       	pop	r25
    1582:	8f 91       	pop	r24
    1584:	7f 91       	pop	r23
    1586:	6f 91       	pop	r22
    1588:	5f 91       	pop	r21
    158a:	4f 91       	pop	r20
    158c:	3f 91       	pop	r19
    158e:	2f 91       	pop	r18
    1590:	0f 90       	pop	r0
    1592:	0b be       	out	0x3b, r0	; 59
    1594:	0f 90       	pop	r0
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	0f 90       	pop	r0
    159a:	1f 90       	pop	r1
    159c:	18 95       	reti

0000159e <__vector_8>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH2_vect)      /* Channel 2 Interrupt */
    159e:	1f 92       	push	r1
    15a0:	0f 92       	push	r0
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	0f 92       	push	r0
    15a6:	11 24       	eor	r1, r1
    15a8:	0b b6       	in	r0, 0x3b	; 59
    15aa:	0f 92       	push	r0
    15ac:	2f 93       	push	r18
    15ae:	3f 93       	push	r19
    15b0:	4f 93       	push	r20
    15b2:	5f 93       	push	r21
    15b4:	6f 93       	push	r22
    15b6:	7f 93       	push	r23
    15b8:	8f 93       	push	r24
    15ba:	9f 93       	push	r25
    15bc:	af 93       	push	r26
    15be:	bf 93       	push	r27
    15c0:	ef 93       	push	r30
    15c2:	ff 93       	push	r31
    15c4:	e0 91 03 21 	lds	r30, 0x2103
    15c8:	f0 91 04 21 	lds	r31, 0x2104
    15cc:	30 97       	sbiw	r30, 0x00	; 0
    15ce:	29 f0       	breq	.+10     	; 0x15da <__vector_8+0x3c>
    15d0:	80 91 f9 21 	lds	r24, 0x21F9
    15d4:	90 91 fa 21 	lds	r25, 0x21FA
    15d8:	19 95       	eicall
    15da:	ff 91       	pop	r31
    15dc:	ef 91       	pop	r30
    15de:	bf 91       	pop	r27
    15e0:	af 91       	pop	r26
    15e2:	9f 91       	pop	r25
    15e4:	8f 91       	pop	r24
    15e6:	7f 91       	pop	r23
    15e8:	6f 91       	pop	r22
    15ea:	5f 91       	pop	r21
    15ec:	4f 91       	pop	r20
    15ee:	3f 91       	pop	r19
    15f0:	2f 91       	pop	r18
    15f2:	0f 90       	pop	r0
    15f4:	0b be       	out	0x3b, r0	; 59
    15f6:	0f 90       	pop	r0
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	0f 90       	pop	r0
    15fc:	1f 90       	pop	r1
    15fe:	18 95       	reti

00001600 <__vector_9>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH3_vect)      /* Channel 3 Interrupt */
    1600:	1f 92       	push	r1
    1602:	0f 92       	push	r0
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	0f 92       	push	r0
    1608:	11 24       	eor	r1, r1
    160a:	0b b6       	in	r0, 0x3b	; 59
    160c:	0f 92       	push	r0
    160e:	2f 93       	push	r18
    1610:	3f 93       	push	r19
    1612:	4f 93       	push	r20
    1614:	5f 93       	push	r21
    1616:	6f 93       	push	r22
    1618:	7f 93       	push	r23
    161a:	8f 93       	push	r24
    161c:	9f 93       	push	r25
    161e:	af 93       	push	r26
    1620:	bf 93       	push	r27
    1622:	ef 93       	push	r30
    1624:	ff 93       	push	r31
    1626:	e0 91 05 21 	lds	r30, 0x2105
    162a:	f0 91 06 21 	lds	r31, 0x2106
    162e:	30 97       	sbiw	r30, 0x00	; 0
    1630:	29 f0       	breq	.+10     	; 0x163c <__vector_9+0x3c>
    1632:	80 91 fb 21 	lds	r24, 0x21FB
    1636:	90 91 fc 21 	lds	r25, 0x21FC
    163a:	19 95       	eicall
    163c:	ff 91       	pop	r31
    163e:	ef 91       	pop	r30
    1640:	bf 91       	pop	r27
    1642:	af 91       	pop	r26
    1644:	9f 91       	pop	r25
    1646:	8f 91       	pop	r24
    1648:	7f 91       	pop	r23
    164a:	6f 91       	pop	r22
    164c:	5f 91       	pop	r21
    164e:	4f 91       	pop	r20
    1650:	3f 91       	pop	r19
    1652:	2f 91       	pop	r18
    1654:	0f 90       	pop	r0
    1656:	0b be       	out	0x3b, r0	; 59
    1658:	0f 90       	pop	r0
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	0f 90       	pop	r0
    165e:	1f 90       	pop	r1
    1660:	18 95       	reti

00001662 <__vector_10>:

/* RTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_OVF_vect)      /* Overflow Interrupt */
    1662:	1f 92       	push	r1
    1664:	0f 92       	push	r0
    1666:	0f b6       	in	r0, 0x3f	; 63
    1668:	0f 92       	push	r0
    166a:	11 24       	eor	r1, r1
    166c:	0b b6       	in	r0, 0x3b	; 59
    166e:	0f 92       	push	r0
    1670:	2f 93       	push	r18
    1672:	3f 93       	push	r19
    1674:	4f 93       	push	r20
    1676:	5f 93       	push	r21
    1678:	6f 93       	push	r22
    167a:	7f 93       	push	r23
    167c:	8f 93       	push	r24
    167e:	9f 93       	push	r25
    1680:	af 93       	push	r26
    1682:	bf 93       	push	r27
    1684:	ef 93       	push	r30
    1686:	ff 93       	push	r31
    1688:	e0 91 07 21 	lds	r30, 0x2107
    168c:	f0 91 08 21 	lds	r31, 0x2108
    1690:	30 97       	sbiw	r30, 0x00	; 0
    1692:	29 f0       	breq	.+10     	; 0x169e <__vector_10+0x3c>
    1694:	80 91 fd 21 	lds	r24, 0x21FD
    1698:	90 91 fe 21 	lds	r25, 0x21FE
    169c:	19 95       	eicall
    169e:	ff 91       	pop	r31
    16a0:	ef 91       	pop	r30
    16a2:	bf 91       	pop	r27
    16a4:	af 91       	pop	r26
    16a6:	9f 91       	pop	r25
    16a8:	8f 91       	pop	r24
    16aa:	7f 91       	pop	r23
    16ac:	6f 91       	pop	r22
    16ae:	5f 91       	pop	r21
    16b0:	4f 91       	pop	r20
    16b2:	3f 91       	pop	r19
    16b4:	2f 91       	pop	r18
    16b6:	0f 90       	pop	r0
    16b8:	0b be       	out	0x3b, r0	; 59
    16ba:	0f 90       	pop	r0
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	0f 90       	pop	r0
    16c0:	1f 90       	pop	r1
    16c2:	18 95       	reti

000016c4 <__vector_11>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_COMP_vect)      /* Compare Interrupt */
    16c4:	1f 92       	push	r1
    16c6:	0f 92       	push	r0
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	0f 92       	push	r0
    16cc:	11 24       	eor	r1, r1
    16ce:	0b b6       	in	r0, 0x3b	; 59
    16d0:	0f 92       	push	r0
    16d2:	2f 93       	push	r18
    16d4:	3f 93       	push	r19
    16d6:	4f 93       	push	r20
    16d8:	5f 93       	push	r21
    16da:	6f 93       	push	r22
    16dc:	7f 93       	push	r23
    16de:	8f 93       	push	r24
    16e0:	9f 93       	push	r25
    16e2:	af 93       	push	r26
    16e4:	bf 93       	push	r27
    16e6:	ef 93       	push	r30
    16e8:	ff 93       	push	r31
    16ea:	e0 91 09 21 	lds	r30, 0x2109
    16ee:	f0 91 0a 21 	lds	r31, 0x210A
    16f2:	30 97       	sbiw	r30, 0x00	; 0
    16f4:	29 f0       	breq	.+10     	; 0x1700 <__vector_11+0x3c>
    16f6:	80 91 ff 21 	lds	r24, 0x21FF
    16fa:	90 91 00 22 	lds	r25, 0x2200
    16fe:	19 95       	eicall
    1700:	ff 91       	pop	r31
    1702:	ef 91       	pop	r30
    1704:	bf 91       	pop	r27
    1706:	af 91       	pop	r26
    1708:	9f 91       	pop	r25
    170a:	8f 91       	pop	r24
    170c:	7f 91       	pop	r23
    170e:	6f 91       	pop	r22
    1710:	5f 91       	pop	r21
    1712:	4f 91       	pop	r20
    1714:	3f 91       	pop	r19
    1716:	2f 91       	pop	r18
    1718:	0f 90       	pop	r0
    171a:	0b be       	out	0x3b, r0	; 59
    171c:	0f 90       	pop	r0
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	0f 90       	pop	r0
    1722:	1f 90       	pop	r1
    1724:	18 95       	reti

00001726 <__vector_12>:

/* TWIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIS_vect)      /* TWI Slave Interrupt */
    1726:	1f 92       	push	r1
    1728:	0f 92       	push	r0
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	0f 92       	push	r0
    172e:	11 24       	eor	r1, r1
    1730:	0b b6       	in	r0, 0x3b	; 59
    1732:	0f 92       	push	r0
    1734:	2f 93       	push	r18
    1736:	3f 93       	push	r19
    1738:	4f 93       	push	r20
    173a:	5f 93       	push	r21
    173c:	6f 93       	push	r22
    173e:	7f 93       	push	r23
    1740:	8f 93       	push	r24
    1742:	9f 93       	push	r25
    1744:	af 93       	push	r26
    1746:	bf 93       	push	r27
    1748:	ef 93       	push	r30
    174a:	ff 93       	push	r31
    174c:	e0 91 0b 21 	lds	r30, 0x210B
    1750:	f0 91 0c 21 	lds	r31, 0x210C
    1754:	30 97       	sbiw	r30, 0x00	; 0
    1756:	29 f0       	breq	.+10     	; 0x1762 <__vector_12+0x3c>
    1758:	80 91 01 22 	lds	r24, 0x2201
    175c:	90 91 02 22 	lds	r25, 0x2202
    1760:	19 95       	eicall
    1762:	ff 91       	pop	r31
    1764:	ef 91       	pop	r30
    1766:	bf 91       	pop	r27
    1768:	af 91       	pop	r26
    176a:	9f 91       	pop	r25
    176c:	8f 91       	pop	r24
    176e:	7f 91       	pop	r23
    1770:	6f 91       	pop	r22
    1772:	5f 91       	pop	r21
    1774:	4f 91       	pop	r20
    1776:	3f 91       	pop	r19
    1778:	2f 91       	pop	r18
    177a:	0f 90       	pop	r0
    177c:	0b be       	out	0x3b, r0	; 59
    177e:	0f 90       	pop	r0
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	0f 90       	pop	r0
    1784:	1f 90       	pop	r1
    1786:	18 95       	reti

00001788 <__vector_13>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIM_vect)      /* TWI Master Interrupt */
    1788:	1f 92       	push	r1
    178a:	0f 92       	push	r0
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	0f 92       	push	r0
    1790:	11 24       	eor	r1, r1
    1792:	0b b6       	in	r0, 0x3b	; 59
    1794:	0f 92       	push	r0
    1796:	2f 93       	push	r18
    1798:	3f 93       	push	r19
    179a:	4f 93       	push	r20
    179c:	5f 93       	push	r21
    179e:	6f 93       	push	r22
    17a0:	7f 93       	push	r23
    17a2:	8f 93       	push	r24
    17a4:	9f 93       	push	r25
    17a6:	af 93       	push	r26
    17a8:	bf 93       	push	r27
    17aa:	ef 93       	push	r30
    17ac:	ff 93       	push	r31
    17ae:	e0 91 0d 21 	lds	r30, 0x210D
    17b2:	f0 91 0e 21 	lds	r31, 0x210E
    17b6:	30 97       	sbiw	r30, 0x00	; 0
    17b8:	29 f0       	breq	.+10     	; 0x17c4 <__vector_13+0x3c>
    17ba:	80 91 03 22 	lds	r24, 0x2203
    17be:	90 91 04 22 	lds	r25, 0x2204
    17c2:	19 95       	eicall
    17c4:	ff 91       	pop	r31
    17c6:	ef 91       	pop	r30
    17c8:	bf 91       	pop	r27
    17ca:	af 91       	pop	r26
    17cc:	9f 91       	pop	r25
    17ce:	8f 91       	pop	r24
    17d0:	7f 91       	pop	r23
    17d2:	6f 91       	pop	r22
    17d4:	5f 91       	pop	r21
    17d6:	4f 91       	pop	r20
    17d8:	3f 91       	pop	r19
    17da:	2f 91       	pop	r18
    17dc:	0f 90       	pop	r0
    17de:	0b be       	out	0x3b, r0	; 59
    17e0:	0f 90       	pop	r0
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	0f 90       	pop	r0
    17e6:	1f 90       	pop	r1
    17e8:	18 95       	reti

000017ea <__vector_14>:

/* TCC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_OVF_vect)      /* Overflow Interrupt */
    17ea:	1f 92       	push	r1
    17ec:	0f 92       	push	r0
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	0f 92       	push	r0
    17f2:	11 24       	eor	r1, r1
    17f4:	0b b6       	in	r0, 0x3b	; 59
    17f6:	0f 92       	push	r0
    17f8:	2f 93       	push	r18
    17fa:	3f 93       	push	r19
    17fc:	4f 93       	push	r20
    17fe:	5f 93       	push	r21
    1800:	6f 93       	push	r22
    1802:	7f 93       	push	r23
    1804:	8f 93       	push	r24
    1806:	9f 93       	push	r25
    1808:	af 93       	push	r26
    180a:	bf 93       	push	r27
    180c:	ef 93       	push	r30
    180e:	ff 93       	push	r31
    1810:	e0 91 0f 21 	lds	r30, 0x210F
    1814:	f0 91 10 21 	lds	r31, 0x2110
    1818:	30 97       	sbiw	r30, 0x00	; 0
    181a:	29 f0       	breq	.+10     	; 0x1826 <__vector_14+0x3c>
    181c:	80 91 05 22 	lds	r24, 0x2205
    1820:	90 91 06 22 	lds	r25, 0x2206
    1824:	19 95       	eicall
    1826:	ff 91       	pop	r31
    1828:	ef 91       	pop	r30
    182a:	bf 91       	pop	r27
    182c:	af 91       	pop	r26
    182e:	9f 91       	pop	r25
    1830:	8f 91       	pop	r24
    1832:	7f 91       	pop	r23
    1834:	6f 91       	pop	r22
    1836:	5f 91       	pop	r21
    1838:	4f 91       	pop	r20
    183a:	3f 91       	pop	r19
    183c:	2f 91       	pop	r18
    183e:	0f 90       	pop	r0
    1840:	0b be       	out	0x3b, r0	; 59
    1842:	0f 90       	pop	r0
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	0f 90       	pop	r0
    1848:	1f 90       	pop	r1
    184a:	18 95       	reti

0000184c <__vector_15>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_ERR_vect)      /* Error Interrupt */
    184c:	1f 92       	push	r1
    184e:	0f 92       	push	r0
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	0f 92       	push	r0
    1854:	11 24       	eor	r1, r1
    1856:	0b b6       	in	r0, 0x3b	; 59
    1858:	0f 92       	push	r0
    185a:	2f 93       	push	r18
    185c:	3f 93       	push	r19
    185e:	4f 93       	push	r20
    1860:	5f 93       	push	r21
    1862:	6f 93       	push	r22
    1864:	7f 93       	push	r23
    1866:	8f 93       	push	r24
    1868:	9f 93       	push	r25
    186a:	af 93       	push	r26
    186c:	bf 93       	push	r27
    186e:	ef 93       	push	r30
    1870:	ff 93       	push	r31
    1872:	e0 91 11 21 	lds	r30, 0x2111
    1876:	f0 91 12 21 	lds	r31, 0x2112
    187a:	30 97       	sbiw	r30, 0x00	; 0
    187c:	29 f0       	breq	.+10     	; 0x1888 <__vector_15+0x3c>
    187e:	80 91 07 22 	lds	r24, 0x2207
    1882:	90 91 08 22 	lds	r25, 0x2208
    1886:	19 95       	eicall
    1888:	ff 91       	pop	r31
    188a:	ef 91       	pop	r30
    188c:	bf 91       	pop	r27
    188e:	af 91       	pop	r26
    1890:	9f 91       	pop	r25
    1892:	8f 91       	pop	r24
    1894:	7f 91       	pop	r23
    1896:	6f 91       	pop	r22
    1898:	5f 91       	pop	r21
    189a:	4f 91       	pop	r20
    189c:	3f 91       	pop	r19
    189e:	2f 91       	pop	r18
    18a0:	0f 90       	pop	r0
    18a2:	0b be       	out	0x3b, r0	; 59
    18a4:	0f 90       	pop	r0
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	0f 90       	pop	r0
    18aa:	1f 90       	pop	r1
    18ac:	18 95       	reti

000018ae <__vector_16>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCA_vect)      /* Compare or Capture A Interrupt */
    18ae:	1f 92       	push	r1
    18b0:	0f 92       	push	r0
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	0f 92       	push	r0
    18b6:	11 24       	eor	r1, r1
    18b8:	0b b6       	in	r0, 0x3b	; 59
    18ba:	0f 92       	push	r0
    18bc:	2f 93       	push	r18
    18be:	3f 93       	push	r19
    18c0:	4f 93       	push	r20
    18c2:	5f 93       	push	r21
    18c4:	6f 93       	push	r22
    18c6:	7f 93       	push	r23
    18c8:	8f 93       	push	r24
    18ca:	9f 93       	push	r25
    18cc:	af 93       	push	r26
    18ce:	bf 93       	push	r27
    18d0:	ef 93       	push	r30
    18d2:	ff 93       	push	r31
    18d4:	e0 91 13 21 	lds	r30, 0x2113
    18d8:	f0 91 14 21 	lds	r31, 0x2114
    18dc:	30 97       	sbiw	r30, 0x00	; 0
    18de:	29 f0       	breq	.+10     	; 0x18ea <__vector_16+0x3c>
    18e0:	80 91 09 22 	lds	r24, 0x2209
    18e4:	90 91 0a 22 	lds	r25, 0x220A
    18e8:	19 95       	eicall
    18ea:	ff 91       	pop	r31
    18ec:	ef 91       	pop	r30
    18ee:	bf 91       	pop	r27
    18f0:	af 91       	pop	r26
    18f2:	9f 91       	pop	r25
    18f4:	8f 91       	pop	r24
    18f6:	7f 91       	pop	r23
    18f8:	6f 91       	pop	r22
    18fa:	5f 91       	pop	r21
    18fc:	4f 91       	pop	r20
    18fe:	3f 91       	pop	r19
    1900:	2f 91       	pop	r18
    1902:	0f 90       	pop	r0
    1904:	0b be       	out	0x3b, r0	; 59
    1906:	0f 90       	pop	r0
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	0f 90       	pop	r0
    190c:	1f 90       	pop	r1
    190e:	18 95       	reti

00001910 <__vector_17>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCB_vect)      /* Compare or Capture B Interrupt */
    1910:	1f 92       	push	r1
    1912:	0f 92       	push	r0
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	0f 92       	push	r0
    1918:	11 24       	eor	r1, r1
    191a:	0b b6       	in	r0, 0x3b	; 59
    191c:	0f 92       	push	r0
    191e:	2f 93       	push	r18
    1920:	3f 93       	push	r19
    1922:	4f 93       	push	r20
    1924:	5f 93       	push	r21
    1926:	6f 93       	push	r22
    1928:	7f 93       	push	r23
    192a:	8f 93       	push	r24
    192c:	9f 93       	push	r25
    192e:	af 93       	push	r26
    1930:	bf 93       	push	r27
    1932:	ef 93       	push	r30
    1934:	ff 93       	push	r31
    1936:	e0 91 15 21 	lds	r30, 0x2115
    193a:	f0 91 16 21 	lds	r31, 0x2116
    193e:	30 97       	sbiw	r30, 0x00	; 0
    1940:	29 f0       	breq	.+10     	; 0x194c <__vector_17+0x3c>
    1942:	80 91 0b 22 	lds	r24, 0x220B
    1946:	90 91 0c 22 	lds	r25, 0x220C
    194a:	19 95       	eicall
    194c:	ff 91       	pop	r31
    194e:	ef 91       	pop	r30
    1950:	bf 91       	pop	r27
    1952:	af 91       	pop	r26
    1954:	9f 91       	pop	r25
    1956:	8f 91       	pop	r24
    1958:	7f 91       	pop	r23
    195a:	6f 91       	pop	r22
    195c:	5f 91       	pop	r21
    195e:	4f 91       	pop	r20
    1960:	3f 91       	pop	r19
    1962:	2f 91       	pop	r18
    1964:	0f 90       	pop	r0
    1966:	0b be       	out	0x3b, r0	; 59
    1968:	0f 90       	pop	r0
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	0f 90       	pop	r0
    196e:	1f 90       	pop	r1
    1970:	18 95       	reti

00001972 <__vector_18>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCC_vect)      /* Compare or Capture C Interrupt */
    1972:	1f 92       	push	r1
    1974:	0f 92       	push	r0
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	0f 92       	push	r0
    197a:	11 24       	eor	r1, r1
    197c:	0b b6       	in	r0, 0x3b	; 59
    197e:	0f 92       	push	r0
    1980:	2f 93       	push	r18
    1982:	3f 93       	push	r19
    1984:	4f 93       	push	r20
    1986:	5f 93       	push	r21
    1988:	6f 93       	push	r22
    198a:	7f 93       	push	r23
    198c:	8f 93       	push	r24
    198e:	9f 93       	push	r25
    1990:	af 93       	push	r26
    1992:	bf 93       	push	r27
    1994:	ef 93       	push	r30
    1996:	ff 93       	push	r31
    1998:	e0 91 17 21 	lds	r30, 0x2117
    199c:	f0 91 18 21 	lds	r31, 0x2118
    19a0:	30 97       	sbiw	r30, 0x00	; 0
    19a2:	29 f0       	breq	.+10     	; 0x19ae <__vector_18+0x3c>
    19a4:	80 91 0d 22 	lds	r24, 0x220D
    19a8:	90 91 0e 22 	lds	r25, 0x220E
    19ac:	19 95       	eicall
    19ae:	ff 91       	pop	r31
    19b0:	ef 91       	pop	r30
    19b2:	bf 91       	pop	r27
    19b4:	af 91       	pop	r26
    19b6:	9f 91       	pop	r25
    19b8:	8f 91       	pop	r24
    19ba:	7f 91       	pop	r23
    19bc:	6f 91       	pop	r22
    19be:	5f 91       	pop	r21
    19c0:	4f 91       	pop	r20
    19c2:	3f 91       	pop	r19
    19c4:	2f 91       	pop	r18
    19c6:	0f 90       	pop	r0
    19c8:	0b be       	out	0x3b, r0	; 59
    19ca:	0f 90       	pop	r0
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	0f 90       	pop	r0
    19d0:	1f 90       	pop	r1
    19d2:	18 95       	reti

000019d4 <__vector_19>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCD_vect)      /* Compare or Capture D Interrupt */
    19d4:	1f 92       	push	r1
    19d6:	0f 92       	push	r0
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	0f 92       	push	r0
    19dc:	11 24       	eor	r1, r1
    19de:	0b b6       	in	r0, 0x3b	; 59
    19e0:	0f 92       	push	r0
    19e2:	2f 93       	push	r18
    19e4:	3f 93       	push	r19
    19e6:	4f 93       	push	r20
    19e8:	5f 93       	push	r21
    19ea:	6f 93       	push	r22
    19ec:	7f 93       	push	r23
    19ee:	8f 93       	push	r24
    19f0:	9f 93       	push	r25
    19f2:	af 93       	push	r26
    19f4:	bf 93       	push	r27
    19f6:	ef 93       	push	r30
    19f8:	ff 93       	push	r31
    19fa:	e0 91 19 21 	lds	r30, 0x2119
    19fe:	f0 91 1a 21 	lds	r31, 0x211A
    1a02:	30 97       	sbiw	r30, 0x00	; 0
    1a04:	29 f0       	breq	.+10     	; 0x1a10 <__vector_19+0x3c>
    1a06:	80 91 0f 22 	lds	r24, 0x220F
    1a0a:	90 91 10 22 	lds	r25, 0x2210
    1a0e:	19 95       	eicall
    1a10:	ff 91       	pop	r31
    1a12:	ef 91       	pop	r30
    1a14:	bf 91       	pop	r27
    1a16:	af 91       	pop	r26
    1a18:	9f 91       	pop	r25
    1a1a:	8f 91       	pop	r24
    1a1c:	7f 91       	pop	r23
    1a1e:	6f 91       	pop	r22
    1a20:	5f 91       	pop	r21
    1a22:	4f 91       	pop	r20
    1a24:	3f 91       	pop	r19
    1a26:	2f 91       	pop	r18
    1a28:	0f 90       	pop	r0
    1a2a:	0b be       	out	0x3b, r0	; 59
    1a2c:	0f 90       	pop	r0
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	0f 90       	pop	r0
    1a32:	1f 90       	pop	r1
    1a34:	18 95       	reti

00001a36 <__vector_20>:

/* TCC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_OVF_vect)      /* Overflow Interrupt */
    1a36:	1f 92       	push	r1
    1a38:	0f 92       	push	r0
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	0f 92       	push	r0
    1a3e:	11 24       	eor	r1, r1
    1a40:	0b b6       	in	r0, 0x3b	; 59
    1a42:	0f 92       	push	r0
    1a44:	2f 93       	push	r18
    1a46:	3f 93       	push	r19
    1a48:	4f 93       	push	r20
    1a4a:	5f 93       	push	r21
    1a4c:	6f 93       	push	r22
    1a4e:	7f 93       	push	r23
    1a50:	8f 93       	push	r24
    1a52:	9f 93       	push	r25
    1a54:	af 93       	push	r26
    1a56:	bf 93       	push	r27
    1a58:	ef 93       	push	r30
    1a5a:	ff 93       	push	r31
    1a5c:	e0 91 1b 21 	lds	r30, 0x211B
    1a60:	f0 91 1c 21 	lds	r31, 0x211C
    1a64:	30 97       	sbiw	r30, 0x00	; 0
    1a66:	29 f0       	breq	.+10     	; 0x1a72 <__vector_20+0x3c>
    1a68:	80 91 11 22 	lds	r24, 0x2211
    1a6c:	90 91 12 22 	lds	r25, 0x2212
    1a70:	19 95       	eicall
    1a72:	ff 91       	pop	r31
    1a74:	ef 91       	pop	r30
    1a76:	bf 91       	pop	r27
    1a78:	af 91       	pop	r26
    1a7a:	9f 91       	pop	r25
    1a7c:	8f 91       	pop	r24
    1a7e:	7f 91       	pop	r23
    1a80:	6f 91       	pop	r22
    1a82:	5f 91       	pop	r21
    1a84:	4f 91       	pop	r20
    1a86:	3f 91       	pop	r19
    1a88:	2f 91       	pop	r18
    1a8a:	0f 90       	pop	r0
    1a8c:	0b be       	out	0x3b, r0	; 59
    1a8e:	0f 90       	pop	r0
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	0f 90       	pop	r0
    1a94:	1f 90       	pop	r1
    1a96:	18 95       	reti

00001a98 <__vector_21>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_ERR_vect)      /* Error Interrupt */
    1a98:	1f 92       	push	r1
    1a9a:	0f 92       	push	r0
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	0f 92       	push	r0
    1aa0:	11 24       	eor	r1, r1
    1aa2:	0b b6       	in	r0, 0x3b	; 59
    1aa4:	0f 92       	push	r0
    1aa6:	2f 93       	push	r18
    1aa8:	3f 93       	push	r19
    1aaa:	4f 93       	push	r20
    1aac:	5f 93       	push	r21
    1aae:	6f 93       	push	r22
    1ab0:	7f 93       	push	r23
    1ab2:	8f 93       	push	r24
    1ab4:	9f 93       	push	r25
    1ab6:	af 93       	push	r26
    1ab8:	bf 93       	push	r27
    1aba:	ef 93       	push	r30
    1abc:	ff 93       	push	r31
    1abe:	e0 91 1d 21 	lds	r30, 0x211D
    1ac2:	f0 91 1e 21 	lds	r31, 0x211E
    1ac6:	30 97       	sbiw	r30, 0x00	; 0
    1ac8:	29 f0       	breq	.+10     	; 0x1ad4 <__vector_21+0x3c>
    1aca:	80 91 13 22 	lds	r24, 0x2213
    1ace:	90 91 14 22 	lds	r25, 0x2214
    1ad2:	19 95       	eicall
    1ad4:	ff 91       	pop	r31
    1ad6:	ef 91       	pop	r30
    1ad8:	bf 91       	pop	r27
    1ada:	af 91       	pop	r26
    1adc:	9f 91       	pop	r25
    1ade:	8f 91       	pop	r24
    1ae0:	7f 91       	pop	r23
    1ae2:	6f 91       	pop	r22
    1ae4:	5f 91       	pop	r21
    1ae6:	4f 91       	pop	r20
    1ae8:	3f 91       	pop	r19
    1aea:	2f 91       	pop	r18
    1aec:	0f 90       	pop	r0
    1aee:	0b be       	out	0x3b, r0	; 59
    1af0:	0f 90       	pop	r0
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	0f 90       	pop	r0
    1af6:	1f 90       	pop	r1
    1af8:	18 95       	reti

00001afa <__vector_22>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCA_vect)      /* Compare or Capture A Interrupt */
    1afa:	1f 92       	push	r1
    1afc:	0f 92       	push	r0
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	0f 92       	push	r0
    1b02:	11 24       	eor	r1, r1
    1b04:	0b b6       	in	r0, 0x3b	; 59
    1b06:	0f 92       	push	r0
    1b08:	2f 93       	push	r18
    1b0a:	3f 93       	push	r19
    1b0c:	4f 93       	push	r20
    1b0e:	5f 93       	push	r21
    1b10:	6f 93       	push	r22
    1b12:	7f 93       	push	r23
    1b14:	8f 93       	push	r24
    1b16:	9f 93       	push	r25
    1b18:	af 93       	push	r26
    1b1a:	bf 93       	push	r27
    1b1c:	ef 93       	push	r30
    1b1e:	ff 93       	push	r31
    1b20:	e0 91 1f 21 	lds	r30, 0x211F
    1b24:	f0 91 20 21 	lds	r31, 0x2120
    1b28:	30 97       	sbiw	r30, 0x00	; 0
    1b2a:	29 f0       	breq	.+10     	; 0x1b36 <__vector_22+0x3c>
    1b2c:	80 91 15 22 	lds	r24, 0x2215
    1b30:	90 91 16 22 	lds	r25, 0x2216
    1b34:	19 95       	eicall
    1b36:	ff 91       	pop	r31
    1b38:	ef 91       	pop	r30
    1b3a:	bf 91       	pop	r27
    1b3c:	af 91       	pop	r26
    1b3e:	9f 91       	pop	r25
    1b40:	8f 91       	pop	r24
    1b42:	7f 91       	pop	r23
    1b44:	6f 91       	pop	r22
    1b46:	5f 91       	pop	r21
    1b48:	4f 91       	pop	r20
    1b4a:	3f 91       	pop	r19
    1b4c:	2f 91       	pop	r18
    1b4e:	0f 90       	pop	r0
    1b50:	0b be       	out	0x3b, r0	; 59
    1b52:	0f 90       	pop	r0
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	0f 90       	pop	r0
    1b58:	1f 90       	pop	r1
    1b5a:	18 95       	reti

00001b5c <__vector_23>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCB_vect)      /* Compare or Capture B Interrupt */
    1b5c:	1f 92       	push	r1
    1b5e:	0f 92       	push	r0
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	0f 92       	push	r0
    1b64:	11 24       	eor	r1, r1
    1b66:	0b b6       	in	r0, 0x3b	; 59
    1b68:	0f 92       	push	r0
    1b6a:	2f 93       	push	r18
    1b6c:	3f 93       	push	r19
    1b6e:	4f 93       	push	r20
    1b70:	5f 93       	push	r21
    1b72:	6f 93       	push	r22
    1b74:	7f 93       	push	r23
    1b76:	8f 93       	push	r24
    1b78:	9f 93       	push	r25
    1b7a:	af 93       	push	r26
    1b7c:	bf 93       	push	r27
    1b7e:	ef 93       	push	r30
    1b80:	ff 93       	push	r31
    1b82:	e0 91 21 21 	lds	r30, 0x2121
    1b86:	f0 91 22 21 	lds	r31, 0x2122
    1b8a:	30 97       	sbiw	r30, 0x00	; 0
    1b8c:	29 f0       	breq	.+10     	; 0x1b98 <__vector_23+0x3c>
    1b8e:	80 91 17 22 	lds	r24, 0x2217
    1b92:	90 91 18 22 	lds	r25, 0x2218
    1b96:	19 95       	eicall
    1b98:	ff 91       	pop	r31
    1b9a:	ef 91       	pop	r30
    1b9c:	bf 91       	pop	r27
    1b9e:	af 91       	pop	r26
    1ba0:	9f 91       	pop	r25
    1ba2:	8f 91       	pop	r24
    1ba4:	7f 91       	pop	r23
    1ba6:	6f 91       	pop	r22
    1ba8:	5f 91       	pop	r21
    1baa:	4f 91       	pop	r20
    1bac:	3f 91       	pop	r19
    1bae:	2f 91       	pop	r18
    1bb0:	0f 90       	pop	r0
    1bb2:	0b be       	out	0x3b, r0	; 59
    1bb4:	0f 90       	pop	r0
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	0f 90       	pop	r0
    1bba:	1f 90       	pop	r1
    1bbc:	18 95       	reti

00001bbe <__vector_24>:

/* SPIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIC_INT_vect)      /* SPI Interrupt */
    1bbe:	1f 92       	push	r1
    1bc0:	0f 92       	push	r0
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	0f 92       	push	r0
    1bc6:	11 24       	eor	r1, r1
    1bc8:	0b b6       	in	r0, 0x3b	; 59
    1bca:	0f 92       	push	r0
    1bcc:	2f 93       	push	r18
    1bce:	3f 93       	push	r19
    1bd0:	4f 93       	push	r20
    1bd2:	5f 93       	push	r21
    1bd4:	6f 93       	push	r22
    1bd6:	7f 93       	push	r23
    1bd8:	8f 93       	push	r24
    1bda:	9f 93       	push	r25
    1bdc:	af 93       	push	r26
    1bde:	bf 93       	push	r27
    1be0:	ef 93       	push	r30
    1be2:	ff 93       	push	r31
    1be4:	e0 91 23 21 	lds	r30, 0x2123
    1be8:	f0 91 24 21 	lds	r31, 0x2124
    1bec:	30 97       	sbiw	r30, 0x00	; 0
    1bee:	29 f0       	breq	.+10     	; 0x1bfa <__vector_24+0x3c>
    1bf0:	80 91 19 22 	lds	r24, 0x2219
    1bf4:	90 91 1a 22 	lds	r25, 0x221A
    1bf8:	19 95       	eicall
    1bfa:	ff 91       	pop	r31
    1bfc:	ef 91       	pop	r30
    1bfe:	bf 91       	pop	r27
    1c00:	af 91       	pop	r26
    1c02:	9f 91       	pop	r25
    1c04:	8f 91       	pop	r24
    1c06:	7f 91       	pop	r23
    1c08:	6f 91       	pop	r22
    1c0a:	5f 91       	pop	r21
    1c0c:	4f 91       	pop	r20
    1c0e:	3f 91       	pop	r19
    1c10:	2f 91       	pop	r18
    1c12:	0f 90       	pop	r0
    1c14:	0b be       	out	0x3b, r0	; 59
    1c16:	0f 90       	pop	r0
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	0f 90       	pop	r0
    1c1c:	1f 90       	pop	r1
    1c1e:	18 95       	reti

00001c20 <__vector_25>:

/* USARTC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_RXC_vect)      /* Reception Complete Interrupt */
    1c20:	1f 92       	push	r1
    1c22:	0f 92       	push	r0
    1c24:	0f b6       	in	r0, 0x3f	; 63
    1c26:	0f 92       	push	r0
    1c28:	11 24       	eor	r1, r1
    1c2a:	0b b6       	in	r0, 0x3b	; 59
    1c2c:	0f 92       	push	r0
    1c2e:	2f 93       	push	r18
    1c30:	3f 93       	push	r19
    1c32:	4f 93       	push	r20
    1c34:	5f 93       	push	r21
    1c36:	6f 93       	push	r22
    1c38:	7f 93       	push	r23
    1c3a:	8f 93       	push	r24
    1c3c:	9f 93       	push	r25
    1c3e:	af 93       	push	r26
    1c40:	bf 93       	push	r27
    1c42:	ef 93       	push	r30
    1c44:	ff 93       	push	r31
    1c46:	e0 91 25 21 	lds	r30, 0x2125
    1c4a:	f0 91 26 21 	lds	r31, 0x2126
    1c4e:	30 97       	sbiw	r30, 0x00	; 0
    1c50:	29 f0       	breq	.+10     	; 0x1c5c <__vector_25+0x3c>
    1c52:	80 91 1b 22 	lds	r24, 0x221B
    1c56:	90 91 1c 22 	lds	r25, 0x221C
    1c5a:	19 95       	eicall
    1c5c:	ff 91       	pop	r31
    1c5e:	ef 91       	pop	r30
    1c60:	bf 91       	pop	r27
    1c62:	af 91       	pop	r26
    1c64:	9f 91       	pop	r25
    1c66:	8f 91       	pop	r24
    1c68:	7f 91       	pop	r23
    1c6a:	6f 91       	pop	r22
    1c6c:	5f 91       	pop	r21
    1c6e:	4f 91       	pop	r20
    1c70:	3f 91       	pop	r19
    1c72:	2f 91       	pop	r18
    1c74:	0f 90       	pop	r0
    1c76:	0b be       	out	0x3b, r0	; 59
    1c78:	0f 90       	pop	r0
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	0f 90       	pop	r0
    1c7e:	1f 90       	pop	r1
    1c80:	18 95       	reti

00001c82 <__vector_26>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_DRE_vect)      /* Data Register Empty Interrupt */
    1c82:	1f 92       	push	r1
    1c84:	0f 92       	push	r0
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	0f 92       	push	r0
    1c8a:	11 24       	eor	r1, r1
    1c8c:	0b b6       	in	r0, 0x3b	; 59
    1c8e:	0f 92       	push	r0
    1c90:	2f 93       	push	r18
    1c92:	3f 93       	push	r19
    1c94:	4f 93       	push	r20
    1c96:	5f 93       	push	r21
    1c98:	6f 93       	push	r22
    1c9a:	7f 93       	push	r23
    1c9c:	8f 93       	push	r24
    1c9e:	9f 93       	push	r25
    1ca0:	af 93       	push	r26
    1ca2:	bf 93       	push	r27
    1ca4:	ef 93       	push	r30
    1ca6:	ff 93       	push	r31
    1ca8:	e0 91 27 21 	lds	r30, 0x2127
    1cac:	f0 91 28 21 	lds	r31, 0x2128
    1cb0:	30 97       	sbiw	r30, 0x00	; 0
    1cb2:	29 f0       	breq	.+10     	; 0x1cbe <__vector_26+0x3c>
    1cb4:	80 91 1d 22 	lds	r24, 0x221D
    1cb8:	90 91 1e 22 	lds	r25, 0x221E
    1cbc:	19 95       	eicall
    1cbe:	ff 91       	pop	r31
    1cc0:	ef 91       	pop	r30
    1cc2:	bf 91       	pop	r27
    1cc4:	af 91       	pop	r26
    1cc6:	9f 91       	pop	r25
    1cc8:	8f 91       	pop	r24
    1cca:	7f 91       	pop	r23
    1ccc:	6f 91       	pop	r22
    1cce:	5f 91       	pop	r21
    1cd0:	4f 91       	pop	r20
    1cd2:	3f 91       	pop	r19
    1cd4:	2f 91       	pop	r18
    1cd6:	0f 90       	pop	r0
    1cd8:	0b be       	out	0x3b, r0	; 59
    1cda:	0f 90       	pop	r0
    1cdc:	0f be       	out	0x3f, r0	; 63
    1cde:	0f 90       	pop	r0
    1ce0:	1f 90       	pop	r1
    1ce2:	18 95       	reti

00001ce4 <__vector_27>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_TXC_vect)      /* Transmission Complete Interrupt */
    1ce4:	1f 92       	push	r1
    1ce6:	0f 92       	push	r0
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	0f 92       	push	r0
    1cec:	11 24       	eor	r1, r1
    1cee:	0b b6       	in	r0, 0x3b	; 59
    1cf0:	0f 92       	push	r0
    1cf2:	2f 93       	push	r18
    1cf4:	3f 93       	push	r19
    1cf6:	4f 93       	push	r20
    1cf8:	5f 93       	push	r21
    1cfa:	6f 93       	push	r22
    1cfc:	7f 93       	push	r23
    1cfe:	8f 93       	push	r24
    1d00:	9f 93       	push	r25
    1d02:	af 93       	push	r26
    1d04:	bf 93       	push	r27
    1d06:	ef 93       	push	r30
    1d08:	ff 93       	push	r31
    1d0a:	e0 91 29 21 	lds	r30, 0x2129
    1d0e:	f0 91 2a 21 	lds	r31, 0x212A
    1d12:	30 97       	sbiw	r30, 0x00	; 0
    1d14:	29 f0       	breq	.+10     	; 0x1d20 <__vector_27+0x3c>
    1d16:	80 91 1f 22 	lds	r24, 0x221F
    1d1a:	90 91 20 22 	lds	r25, 0x2220
    1d1e:	19 95       	eicall
    1d20:	ff 91       	pop	r31
    1d22:	ef 91       	pop	r30
    1d24:	bf 91       	pop	r27
    1d26:	af 91       	pop	r26
    1d28:	9f 91       	pop	r25
    1d2a:	8f 91       	pop	r24
    1d2c:	7f 91       	pop	r23
    1d2e:	6f 91       	pop	r22
    1d30:	5f 91       	pop	r21
    1d32:	4f 91       	pop	r20
    1d34:	3f 91       	pop	r19
    1d36:	2f 91       	pop	r18
    1d38:	0f 90       	pop	r0
    1d3a:	0b be       	out	0x3b, r0	; 59
    1d3c:	0f 90       	pop	r0
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	0f 90       	pop	r0
    1d42:	1f 90       	pop	r1
    1d44:	18 95       	reti

00001d46 <__vector_28>:

/* USARTC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_RXC_vect)      /* Reception Complete Interrupt */
    1d46:	1f 92       	push	r1
    1d48:	0f 92       	push	r0
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	0f 92       	push	r0
    1d4e:	11 24       	eor	r1, r1
    1d50:	0b b6       	in	r0, 0x3b	; 59
    1d52:	0f 92       	push	r0
    1d54:	2f 93       	push	r18
    1d56:	3f 93       	push	r19
    1d58:	4f 93       	push	r20
    1d5a:	5f 93       	push	r21
    1d5c:	6f 93       	push	r22
    1d5e:	7f 93       	push	r23
    1d60:	8f 93       	push	r24
    1d62:	9f 93       	push	r25
    1d64:	af 93       	push	r26
    1d66:	bf 93       	push	r27
    1d68:	ef 93       	push	r30
    1d6a:	ff 93       	push	r31
    1d6c:	e0 91 2b 21 	lds	r30, 0x212B
    1d70:	f0 91 2c 21 	lds	r31, 0x212C
    1d74:	30 97       	sbiw	r30, 0x00	; 0
    1d76:	29 f0       	breq	.+10     	; 0x1d82 <__vector_28+0x3c>
    1d78:	80 91 21 22 	lds	r24, 0x2221
    1d7c:	90 91 22 22 	lds	r25, 0x2222
    1d80:	19 95       	eicall
    1d82:	ff 91       	pop	r31
    1d84:	ef 91       	pop	r30
    1d86:	bf 91       	pop	r27
    1d88:	af 91       	pop	r26
    1d8a:	9f 91       	pop	r25
    1d8c:	8f 91       	pop	r24
    1d8e:	7f 91       	pop	r23
    1d90:	6f 91       	pop	r22
    1d92:	5f 91       	pop	r21
    1d94:	4f 91       	pop	r20
    1d96:	3f 91       	pop	r19
    1d98:	2f 91       	pop	r18
    1d9a:	0f 90       	pop	r0
    1d9c:	0b be       	out	0x3b, r0	; 59
    1d9e:	0f 90       	pop	r0
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	0f 90       	pop	r0
    1da4:	1f 90       	pop	r1
    1da6:	18 95       	reti

00001da8 <__vector_29>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_DRE_vect)      /* Data Register Empty Interrupt */
    1da8:	1f 92       	push	r1
    1daa:	0f 92       	push	r0
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	0f 92       	push	r0
    1db0:	11 24       	eor	r1, r1
    1db2:	0b b6       	in	r0, 0x3b	; 59
    1db4:	0f 92       	push	r0
    1db6:	2f 93       	push	r18
    1db8:	3f 93       	push	r19
    1dba:	4f 93       	push	r20
    1dbc:	5f 93       	push	r21
    1dbe:	6f 93       	push	r22
    1dc0:	7f 93       	push	r23
    1dc2:	8f 93       	push	r24
    1dc4:	9f 93       	push	r25
    1dc6:	af 93       	push	r26
    1dc8:	bf 93       	push	r27
    1dca:	ef 93       	push	r30
    1dcc:	ff 93       	push	r31
    1dce:	e0 91 2d 21 	lds	r30, 0x212D
    1dd2:	f0 91 2e 21 	lds	r31, 0x212E
    1dd6:	30 97       	sbiw	r30, 0x00	; 0
    1dd8:	29 f0       	breq	.+10     	; 0x1de4 <__vector_29+0x3c>
    1dda:	80 91 23 22 	lds	r24, 0x2223
    1dde:	90 91 24 22 	lds	r25, 0x2224
    1de2:	19 95       	eicall
    1de4:	ff 91       	pop	r31
    1de6:	ef 91       	pop	r30
    1de8:	bf 91       	pop	r27
    1dea:	af 91       	pop	r26
    1dec:	9f 91       	pop	r25
    1dee:	8f 91       	pop	r24
    1df0:	7f 91       	pop	r23
    1df2:	6f 91       	pop	r22
    1df4:	5f 91       	pop	r21
    1df6:	4f 91       	pop	r20
    1df8:	3f 91       	pop	r19
    1dfa:	2f 91       	pop	r18
    1dfc:	0f 90       	pop	r0
    1dfe:	0b be       	out	0x3b, r0	; 59
    1e00:	0f 90       	pop	r0
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	0f 90       	pop	r0
    1e06:	1f 90       	pop	r1
    1e08:	18 95       	reti

00001e0a <__vector_30>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_TXC_vect)      /* Transmission Complete Interrupt */
    1e0a:	1f 92       	push	r1
    1e0c:	0f 92       	push	r0
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	0f 92       	push	r0
    1e12:	11 24       	eor	r1, r1
    1e14:	0b b6       	in	r0, 0x3b	; 59
    1e16:	0f 92       	push	r0
    1e18:	2f 93       	push	r18
    1e1a:	3f 93       	push	r19
    1e1c:	4f 93       	push	r20
    1e1e:	5f 93       	push	r21
    1e20:	6f 93       	push	r22
    1e22:	7f 93       	push	r23
    1e24:	8f 93       	push	r24
    1e26:	9f 93       	push	r25
    1e28:	af 93       	push	r26
    1e2a:	bf 93       	push	r27
    1e2c:	ef 93       	push	r30
    1e2e:	ff 93       	push	r31
    1e30:	e0 91 2f 21 	lds	r30, 0x212F
    1e34:	f0 91 30 21 	lds	r31, 0x2130
    1e38:	30 97       	sbiw	r30, 0x00	; 0
    1e3a:	29 f0       	breq	.+10     	; 0x1e46 <__vector_30+0x3c>
    1e3c:	80 91 25 22 	lds	r24, 0x2225
    1e40:	90 91 26 22 	lds	r25, 0x2226
    1e44:	19 95       	eicall
    1e46:	ff 91       	pop	r31
    1e48:	ef 91       	pop	r30
    1e4a:	bf 91       	pop	r27
    1e4c:	af 91       	pop	r26
    1e4e:	9f 91       	pop	r25
    1e50:	8f 91       	pop	r24
    1e52:	7f 91       	pop	r23
    1e54:	6f 91       	pop	r22
    1e56:	5f 91       	pop	r21
    1e58:	4f 91       	pop	r20
    1e5a:	3f 91       	pop	r19
    1e5c:	2f 91       	pop	r18
    1e5e:	0f 90       	pop	r0
    1e60:	0b be       	out	0x3b, r0	; 59
    1e62:	0f 90       	pop	r0
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	0f 90       	pop	r0
    1e68:	1f 90       	pop	r1
    1e6a:	18 95       	reti

00001e6c <__vector_31>:

/* AES interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(AES_INT_vect)      /* AES Interrupt */
    1e6c:	1f 92       	push	r1
    1e6e:	0f 92       	push	r0
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	0f 92       	push	r0
    1e74:	11 24       	eor	r1, r1
    1e76:	0b b6       	in	r0, 0x3b	; 59
    1e78:	0f 92       	push	r0
    1e7a:	2f 93       	push	r18
    1e7c:	3f 93       	push	r19
    1e7e:	4f 93       	push	r20
    1e80:	5f 93       	push	r21
    1e82:	6f 93       	push	r22
    1e84:	7f 93       	push	r23
    1e86:	8f 93       	push	r24
    1e88:	9f 93       	push	r25
    1e8a:	af 93       	push	r26
    1e8c:	bf 93       	push	r27
    1e8e:	ef 93       	push	r30
    1e90:	ff 93       	push	r31
    1e92:	e0 91 31 21 	lds	r30, 0x2131
    1e96:	f0 91 32 21 	lds	r31, 0x2132
    1e9a:	30 97       	sbiw	r30, 0x00	; 0
    1e9c:	29 f0       	breq	.+10     	; 0x1ea8 <__vector_31+0x3c>
    1e9e:	80 91 27 22 	lds	r24, 0x2227
    1ea2:	90 91 28 22 	lds	r25, 0x2228
    1ea6:	19 95       	eicall
    1ea8:	ff 91       	pop	r31
    1eaa:	ef 91       	pop	r30
    1eac:	bf 91       	pop	r27
    1eae:	af 91       	pop	r26
    1eb0:	9f 91       	pop	r25
    1eb2:	8f 91       	pop	r24
    1eb4:	7f 91       	pop	r23
    1eb6:	6f 91       	pop	r22
    1eb8:	5f 91       	pop	r21
    1eba:	4f 91       	pop	r20
    1ebc:	3f 91       	pop	r19
    1ebe:	2f 91       	pop	r18
    1ec0:	0f 90       	pop	r0
    1ec2:	0b be       	out	0x3b, r0	; 59
    1ec4:	0f 90       	pop	r0
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	0f 90       	pop	r0
    1eca:	1f 90       	pop	r1
    1ecc:	18 95       	reti

00001ece <__vector_32>:

/* NVM interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_EE_vect)      /* EE Interrupt */
    1ece:	1f 92       	push	r1
    1ed0:	0f 92       	push	r0
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	0f 92       	push	r0
    1ed6:	11 24       	eor	r1, r1
    1ed8:	0b b6       	in	r0, 0x3b	; 59
    1eda:	0f 92       	push	r0
    1edc:	2f 93       	push	r18
    1ede:	3f 93       	push	r19
    1ee0:	4f 93       	push	r20
    1ee2:	5f 93       	push	r21
    1ee4:	6f 93       	push	r22
    1ee6:	7f 93       	push	r23
    1ee8:	8f 93       	push	r24
    1eea:	9f 93       	push	r25
    1eec:	af 93       	push	r26
    1eee:	bf 93       	push	r27
    1ef0:	ef 93       	push	r30
    1ef2:	ff 93       	push	r31
    1ef4:	e0 91 33 21 	lds	r30, 0x2133
    1ef8:	f0 91 34 21 	lds	r31, 0x2134
    1efc:	30 97       	sbiw	r30, 0x00	; 0
    1efe:	29 f0       	breq	.+10     	; 0x1f0a <__vector_32+0x3c>
    1f00:	80 91 29 22 	lds	r24, 0x2229
    1f04:	90 91 2a 22 	lds	r25, 0x222A
    1f08:	19 95       	eicall
    1f0a:	ff 91       	pop	r31
    1f0c:	ef 91       	pop	r30
    1f0e:	bf 91       	pop	r27
    1f10:	af 91       	pop	r26
    1f12:	9f 91       	pop	r25
    1f14:	8f 91       	pop	r24
    1f16:	7f 91       	pop	r23
    1f18:	6f 91       	pop	r22
    1f1a:	5f 91       	pop	r21
    1f1c:	4f 91       	pop	r20
    1f1e:	3f 91       	pop	r19
    1f20:	2f 91       	pop	r18
    1f22:	0f 90       	pop	r0
    1f24:	0b be       	out	0x3b, r0	; 59
    1f26:	0f 90       	pop	r0
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	0f 90       	pop	r0
    1f2c:	1f 90       	pop	r1
    1f2e:	18 95       	reti

00001f30 <__vector_33>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_SPM_vect)      /* SPM Interrupt */
    1f30:	1f 92       	push	r1
    1f32:	0f 92       	push	r0
    1f34:	0f b6       	in	r0, 0x3f	; 63
    1f36:	0f 92       	push	r0
    1f38:	11 24       	eor	r1, r1
    1f3a:	0b b6       	in	r0, 0x3b	; 59
    1f3c:	0f 92       	push	r0
    1f3e:	2f 93       	push	r18
    1f40:	3f 93       	push	r19
    1f42:	4f 93       	push	r20
    1f44:	5f 93       	push	r21
    1f46:	6f 93       	push	r22
    1f48:	7f 93       	push	r23
    1f4a:	8f 93       	push	r24
    1f4c:	9f 93       	push	r25
    1f4e:	af 93       	push	r26
    1f50:	bf 93       	push	r27
    1f52:	ef 93       	push	r30
    1f54:	ff 93       	push	r31
    1f56:	e0 91 35 21 	lds	r30, 0x2135
    1f5a:	f0 91 36 21 	lds	r31, 0x2136
    1f5e:	30 97       	sbiw	r30, 0x00	; 0
    1f60:	29 f0       	breq	.+10     	; 0x1f6c <__vector_33+0x3c>
    1f62:	80 91 2b 22 	lds	r24, 0x222B
    1f66:	90 91 2c 22 	lds	r25, 0x222C
    1f6a:	19 95       	eicall
    1f6c:	ff 91       	pop	r31
    1f6e:	ef 91       	pop	r30
    1f70:	bf 91       	pop	r27
    1f72:	af 91       	pop	r26
    1f74:	9f 91       	pop	r25
    1f76:	8f 91       	pop	r24
    1f78:	7f 91       	pop	r23
    1f7a:	6f 91       	pop	r22
    1f7c:	5f 91       	pop	r21
    1f7e:	4f 91       	pop	r20
    1f80:	3f 91       	pop	r19
    1f82:	2f 91       	pop	r18
    1f84:	0f 90       	pop	r0
    1f86:	0b be       	out	0x3b, r0	; 59
    1f88:	0f 90       	pop	r0
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	0f 90       	pop	r0
    1f8e:	1f 90       	pop	r1
    1f90:	18 95       	reti

00001f92 <__vector_34>:

/* PORTB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT0_vect)      /* External Interrupt 0 */
    1f92:	1f 92       	push	r1
    1f94:	0f 92       	push	r0
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	0f 92       	push	r0
    1f9a:	11 24       	eor	r1, r1
    1f9c:	0b b6       	in	r0, 0x3b	; 59
    1f9e:	0f 92       	push	r0
    1fa0:	2f 93       	push	r18
    1fa2:	3f 93       	push	r19
    1fa4:	4f 93       	push	r20
    1fa6:	5f 93       	push	r21
    1fa8:	6f 93       	push	r22
    1faa:	7f 93       	push	r23
    1fac:	8f 93       	push	r24
    1fae:	9f 93       	push	r25
    1fb0:	af 93       	push	r26
    1fb2:	bf 93       	push	r27
    1fb4:	ef 93       	push	r30
    1fb6:	ff 93       	push	r31
    1fb8:	e0 91 37 21 	lds	r30, 0x2137
    1fbc:	f0 91 38 21 	lds	r31, 0x2138
    1fc0:	30 97       	sbiw	r30, 0x00	; 0
    1fc2:	29 f0       	breq	.+10     	; 0x1fce <__vector_34+0x3c>
    1fc4:	80 91 2d 22 	lds	r24, 0x222D
    1fc8:	90 91 2e 22 	lds	r25, 0x222E
    1fcc:	19 95       	eicall
    1fce:	ff 91       	pop	r31
    1fd0:	ef 91       	pop	r30
    1fd2:	bf 91       	pop	r27
    1fd4:	af 91       	pop	r26
    1fd6:	9f 91       	pop	r25
    1fd8:	8f 91       	pop	r24
    1fda:	7f 91       	pop	r23
    1fdc:	6f 91       	pop	r22
    1fde:	5f 91       	pop	r21
    1fe0:	4f 91       	pop	r20
    1fe2:	3f 91       	pop	r19
    1fe4:	2f 91       	pop	r18
    1fe6:	0f 90       	pop	r0
    1fe8:	0b be       	out	0x3b, r0	; 59
    1fea:	0f 90       	pop	r0
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	0f 90       	pop	r0
    1ff0:	1f 90       	pop	r1
    1ff2:	18 95       	reti

00001ff4 <__vector_35>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT1_vect)      /* External Interrupt 1 */
    1ff4:	1f 92       	push	r1
    1ff6:	0f 92       	push	r0
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	0f 92       	push	r0
    1ffc:	11 24       	eor	r1, r1
    1ffe:	0b b6       	in	r0, 0x3b	; 59
    2000:	0f 92       	push	r0
    2002:	2f 93       	push	r18
    2004:	3f 93       	push	r19
    2006:	4f 93       	push	r20
    2008:	5f 93       	push	r21
    200a:	6f 93       	push	r22
    200c:	7f 93       	push	r23
    200e:	8f 93       	push	r24
    2010:	9f 93       	push	r25
    2012:	af 93       	push	r26
    2014:	bf 93       	push	r27
    2016:	ef 93       	push	r30
    2018:	ff 93       	push	r31
    201a:	e0 91 39 21 	lds	r30, 0x2139
    201e:	f0 91 3a 21 	lds	r31, 0x213A
    2022:	30 97       	sbiw	r30, 0x00	; 0
    2024:	29 f0       	breq	.+10     	; 0x2030 <__vector_35+0x3c>
    2026:	80 91 2f 22 	lds	r24, 0x222F
    202a:	90 91 30 22 	lds	r25, 0x2230
    202e:	19 95       	eicall
    2030:	ff 91       	pop	r31
    2032:	ef 91       	pop	r30
    2034:	bf 91       	pop	r27
    2036:	af 91       	pop	r26
    2038:	9f 91       	pop	r25
    203a:	8f 91       	pop	r24
    203c:	7f 91       	pop	r23
    203e:	6f 91       	pop	r22
    2040:	5f 91       	pop	r21
    2042:	4f 91       	pop	r20
    2044:	3f 91       	pop	r19
    2046:	2f 91       	pop	r18
    2048:	0f 90       	pop	r0
    204a:	0b be       	out	0x3b, r0	; 59
    204c:	0f 90       	pop	r0
    204e:	0f be       	out	0x3f, r0	; 63
    2050:	0f 90       	pop	r0
    2052:	1f 90       	pop	r1
    2054:	18 95       	reti

00002056 <__vector_36>:

/* ACB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC0_vect)      /* AC0 Interrupt */
    2056:	1f 92       	push	r1
    2058:	0f 92       	push	r0
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	0f 92       	push	r0
    205e:	11 24       	eor	r1, r1
    2060:	0b b6       	in	r0, 0x3b	; 59
    2062:	0f 92       	push	r0
    2064:	2f 93       	push	r18
    2066:	3f 93       	push	r19
    2068:	4f 93       	push	r20
    206a:	5f 93       	push	r21
    206c:	6f 93       	push	r22
    206e:	7f 93       	push	r23
    2070:	8f 93       	push	r24
    2072:	9f 93       	push	r25
    2074:	af 93       	push	r26
    2076:	bf 93       	push	r27
    2078:	ef 93       	push	r30
    207a:	ff 93       	push	r31
    207c:	e0 91 3b 21 	lds	r30, 0x213B
    2080:	f0 91 3c 21 	lds	r31, 0x213C
    2084:	30 97       	sbiw	r30, 0x00	; 0
    2086:	29 f0       	breq	.+10     	; 0x2092 <__vector_36+0x3c>
    2088:	80 91 31 22 	lds	r24, 0x2231
    208c:	90 91 32 22 	lds	r25, 0x2232
    2090:	19 95       	eicall
    2092:	ff 91       	pop	r31
    2094:	ef 91       	pop	r30
    2096:	bf 91       	pop	r27
    2098:	af 91       	pop	r26
    209a:	9f 91       	pop	r25
    209c:	8f 91       	pop	r24
    209e:	7f 91       	pop	r23
    20a0:	6f 91       	pop	r22
    20a2:	5f 91       	pop	r21
    20a4:	4f 91       	pop	r20
    20a6:	3f 91       	pop	r19
    20a8:	2f 91       	pop	r18
    20aa:	0f 90       	pop	r0
    20ac:	0b be       	out	0x3b, r0	; 59
    20ae:	0f 90       	pop	r0
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	0f 90       	pop	r0
    20b4:	1f 90       	pop	r1
    20b6:	18 95       	reti

000020b8 <__vector_37>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC1_vect)      /* AC1 Interrupt */
    20b8:	1f 92       	push	r1
    20ba:	0f 92       	push	r0
    20bc:	0f b6       	in	r0, 0x3f	; 63
    20be:	0f 92       	push	r0
    20c0:	11 24       	eor	r1, r1
    20c2:	0b b6       	in	r0, 0x3b	; 59
    20c4:	0f 92       	push	r0
    20c6:	2f 93       	push	r18
    20c8:	3f 93       	push	r19
    20ca:	4f 93       	push	r20
    20cc:	5f 93       	push	r21
    20ce:	6f 93       	push	r22
    20d0:	7f 93       	push	r23
    20d2:	8f 93       	push	r24
    20d4:	9f 93       	push	r25
    20d6:	af 93       	push	r26
    20d8:	bf 93       	push	r27
    20da:	ef 93       	push	r30
    20dc:	ff 93       	push	r31
    20de:	e0 91 3d 21 	lds	r30, 0x213D
    20e2:	f0 91 3e 21 	lds	r31, 0x213E
    20e6:	30 97       	sbiw	r30, 0x00	; 0
    20e8:	29 f0       	breq	.+10     	; 0x20f4 <__vector_37+0x3c>
    20ea:	80 91 33 22 	lds	r24, 0x2233
    20ee:	90 91 34 22 	lds	r25, 0x2234
    20f2:	19 95       	eicall
    20f4:	ff 91       	pop	r31
    20f6:	ef 91       	pop	r30
    20f8:	bf 91       	pop	r27
    20fa:	af 91       	pop	r26
    20fc:	9f 91       	pop	r25
    20fe:	8f 91       	pop	r24
    2100:	7f 91       	pop	r23
    2102:	6f 91       	pop	r22
    2104:	5f 91       	pop	r21
    2106:	4f 91       	pop	r20
    2108:	3f 91       	pop	r19
    210a:	2f 91       	pop	r18
    210c:	0f 90       	pop	r0
    210e:	0b be       	out	0x3b, r0	; 59
    2110:	0f 90       	pop	r0
    2112:	0f be       	out	0x3f, r0	; 63
    2114:	0f 90       	pop	r0
    2116:	1f 90       	pop	r1
    2118:	18 95       	reti

0000211a <__vector_38>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_ACW_vect)      /* ACW Window Mode Interrupt */
    211a:	1f 92       	push	r1
    211c:	0f 92       	push	r0
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	0f 92       	push	r0
    2122:	11 24       	eor	r1, r1
    2124:	0b b6       	in	r0, 0x3b	; 59
    2126:	0f 92       	push	r0
    2128:	2f 93       	push	r18
    212a:	3f 93       	push	r19
    212c:	4f 93       	push	r20
    212e:	5f 93       	push	r21
    2130:	6f 93       	push	r22
    2132:	7f 93       	push	r23
    2134:	8f 93       	push	r24
    2136:	9f 93       	push	r25
    2138:	af 93       	push	r26
    213a:	bf 93       	push	r27
    213c:	ef 93       	push	r30
    213e:	ff 93       	push	r31
    2140:	e0 91 3f 21 	lds	r30, 0x213F
    2144:	f0 91 40 21 	lds	r31, 0x2140
    2148:	30 97       	sbiw	r30, 0x00	; 0
    214a:	29 f0       	breq	.+10     	; 0x2156 <__vector_38+0x3c>
    214c:	80 91 35 22 	lds	r24, 0x2235
    2150:	90 91 36 22 	lds	r25, 0x2236
    2154:	19 95       	eicall
    2156:	ff 91       	pop	r31
    2158:	ef 91       	pop	r30
    215a:	bf 91       	pop	r27
    215c:	af 91       	pop	r26
    215e:	9f 91       	pop	r25
    2160:	8f 91       	pop	r24
    2162:	7f 91       	pop	r23
    2164:	6f 91       	pop	r22
    2166:	5f 91       	pop	r21
    2168:	4f 91       	pop	r20
    216a:	3f 91       	pop	r19
    216c:	2f 91       	pop	r18
    216e:	0f 90       	pop	r0
    2170:	0b be       	out	0x3b, r0	; 59
    2172:	0f 90       	pop	r0
    2174:	0f be       	out	0x3f, r0	; 63
    2176:	0f 90       	pop	r0
    2178:	1f 90       	pop	r1
    217a:	18 95       	reti

0000217c <__vector_39>:

/* ADCB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH0_vect)      /* Interrupt 0 */
    217c:	1f 92       	push	r1
    217e:	0f 92       	push	r0
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	0f 92       	push	r0
    2184:	11 24       	eor	r1, r1
    2186:	0b b6       	in	r0, 0x3b	; 59
    2188:	0f 92       	push	r0
    218a:	2f 93       	push	r18
    218c:	3f 93       	push	r19
    218e:	4f 93       	push	r20
    2190:	5f 93       	push	r21
    2192:	6f 93       	push	r22
    2194:	7f 93       	push	r23
    2196:	8f 93       	push	r24
    2198:	9f 93       	push	r25
    219a:	af 93       	push	r26
    219c:	bf 93       	push	r27
    219e:	ef 93       	push	r30
    21a0:	ff 93       	push	r31
    21a2:	e0 91 41 21 	lds	r30, 0x2141
    21a6:	f0 91 42 21 	lds	r31, 0x2142
    21aa:	30 97       	sbiw	r30, 0x00	; 0
    21ac:	29 f0       	breq	.+10     	; 0x21b8 <__vector_39+0x3c>
    21ae:	80 91 37 22 	lds	r24, 0x2237
    21b2:	90 91 38 22 	lds	r25, 0x2238
    21b6:	19 95       	eicall
    21b8:	ff 91       	pop	r31
    21ba:	ef 91       	pop	r30
    21bc:	bf 91       	pop	r27
    21be:	af 91       	pop	r26
    21c0:	9f 91       	pop	r25
    21c2:	8f 91       	pop	r24
    21c4:	7f 91       	pop	r23
    21c6:	6f 91       	pop	r22
    21c8:	5f 91       	pop	r21
    21ca:	4f 91       	pop	r20
    21cc:	3f 91       	pop	r19
    21ce:	2f 91       	pop	r18
    21d0:	0f 90       	pop	r0
    21d2:	0b be       	out	0x3b, r0	; 59
    21d4:	0f 90       	pop	r0
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	0f 90       	pop	r0
    21da:	1f 90       	pop	r1
    21dc:	18 95       	reti

000021de <__vector_40>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH1_vect)      /* Interrupt 1 */
    21de:	1f 92       	push	r1
    21e0:	0f 92       	push	r0
    21e2:	0f b6       	in	r0, 0x3f	; 63
    21e4:	0f 92       	push	r0
    21e6:	11 24       	eor	r1, r1
    21e8:	0b b6       	in	r0, 0x3b	; 59
    21ea:	0f 92       	push	r0
    21ec:	2f 93       	push	r18
    21ee:	3f 93       	push	r19
    21f0:	4f 93       	push	r20
    21f2:	5f 93       	push	r21
    21f4:	6f 93       	push	r22
    21f6:	7f 93       	push	r23
    21f8:	8f 93       	push	r24
    21fa:	9f 93       	push	r25
    21fc:	af 93       	push	r26
    21fe:	bf 93       	push	r27
    2200:	ef 93       	push	r30
    2202:	ff 93       	push	r31
    2204:	e0 91 43 21 	lds	r30, 0x2143
    2208:	f0 91 44 21 	lds	r31, 0x2144
    220c:	30 97       	sbiw	r30, 0x00	; 0
    220e:	29 f0       	breq	.+10     	; 0x221a <__vector_40+0x3c>
    2210:	80 91 39 22 	lds	r24, 0x2239
    2214:	90 91 3a 22 	lds	r25, 0x223A
    2218:	19 95       	eicall
    221a:	ff 91       	pop	r31
    221c:	ef 91       	pop	r30
    221e:	bf 91       	pop	r27
    2220:	af 91       	pop	r26
    2222:	9f 91       	pop	r25
    2224:	8f 91       	pop	r24
    2226:	7f 91       	pop	r23
    2228:	6f 91       	pop	r22
    222a:	5f 91       	pop	r21
    222c:	4f 91       	pop	r20
    222e:	3f 91       	pop	r19
    2230:	2f 91       	pop	r18
    2232:	0f 90       	pop	r0
    2234:	0b be       	out	0x3b, r0	; 59
    2236:	0f 90       	pop	r0
    2238:	0f be       	out	0x3f, r0	; 63
    223a:	0f 90       	pop	r0
    223c:	1f 90       	pop	r1
    223e:	18 95       	reti

00002240 <__vector_41>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH2_vect)      /* Interrupt 2 */
    2240:	1f 92       	push	r1
    2242:	0f 92       	push	r0
    2244:	0f b6       	in	r0, 0x3f	; 63
    2246:	0f 92       	push	r0
    2248:	11 24       	eor	r1, r1
    224a:	0b b6       	in	r0, 0x3b	; 59
    224c:	0f 92       	push	r0
    224e:	2f 93       	push	r18
    2250:	3f 93       	push	r19
    2252:	4f 93       	push	r20
    2254:	5f 93       	push	r21
    2256:	6f 93       	push	r22
    2258:	7f 93       	push	r23
    225a:	8f 93       	push	r24
    225c:	9f 93       	push	r25
    225e:	af 93       	push	r26
    2260:	bf 93       	push	r27
    2262:	ef 93       	push	r30
    2264:	ff 93       	push	r31
    2266:	e0 91 45 21 	lds	r30, 0x2145
    226a:	f0 91 46 21 	lds	r31, 0x2146
    226e:	30 97       	sbiw	r30, 0x00	; 0
    2270:	29 f0       	breq	.+10     	; 0x227c <__vector_41+0x3c>
    2272:	80 91 3b 22 	lds	r24, 0x223B
    2276:	90 91 3c 22 	lds	r25, 0x223C
    227a:	19 95       	eicall
    227c:	ff 91       	pop	r31
    227e:	ef 91       	pop	r30
    2280:	bf 91       	pop	r27
    2282:	af 91       	pop	r26
    2284:	9f 91       	pop	r25
    2286:	8f 91       	pop	r24
    2288:	7f 91       	pop	r23
    228a:	6f 91       	pop	r22
    228c:	5f 91       	pop	r21
    228e:	4f 91       	pop	r20
    2290:	3f 91       	pop	r19
    2292:	2f 91       	pop	r18
    2294:	0f 90       	pop	r0
    2296:	0b be       	out	0x3b, r0	; 59
    2298:	0f 90       	pop	r0
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	0f 90       	pop	r0
    229e:	1f 90       	pop	r1
    22a0:	18 95       	reti

000022a2 <__vector_42>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH3_vect)      /* Interrupt 3 */
    22a2:	1f 92       	push	r1
    22a4:	0f 92       	push	r0
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	0f 92       	push	r0
    22aa:	11 24       	eor	r1, r1
    22ac:	0b b6       	in	r0, 0x3b	; 59
    22ae:	0f 92       	push	r0
    22b0:	2f 93       	push	r18
    22b2:	3f 93       	push	r19
    22b4:	4f 93       	push	r20
    22b6:	5f 93       	push	r21
    22b8:	6f 93       	push	r22
    22ba:	7f 93       	push	r23
    22bc:	8f 93       	push	r24
    22be:	9f 93       	push	r25
    22c0:	af 93       	push	r26
    22c2:	bf 93       	push	r27
    22c4:	ef 93       	push	r30
    22c6:	ff 93       	push	r31
    22c8:	e0 91 47 21 	lds	r30, 0x2147
    22cc:	f0 91 48 21 	lds	r31, 0x2148
    22d0:	30 97       	sbiw	r30, 0x00	; 0
    22d2:	29 f0       	breq	.+10     	; 0x22de <__vector_42+0x3c>
    22d4:	80 91 3d 22 	lds	r24, 0x223D
    22d8:	90 91 3e 22 	lds	r25, 0x223E
    22dc:	19 95       	eicall
    22de:	ff 91       	pop	r31
    22e0:	ef 91       	pop	r30
    22e2:	bf 91       	pop	r27
    22e4:	af 91       	pop	r26
    22e6:	9f 91       	pop	r25
    22e8:	8f 91       	pop	r24
    22ea:	7f 91       	pop	r23
    22ec:	6f 91       	pop	r22
    22ee:	5f 91       	pop	r21
    22f0:	4f 91       	pop	r20
    22f2:	3f 91       	pop	r19
    22f4:	2f 91       	pop	r18
    22f6:	0f 90       	pop	r0
    22f8:	0b be       	out	0x3b, r0	; 59
    22fa:	0f 90       	pop	r0
    22fc:	0f be       	out	0x3f, r0	; 63
    22fe:	0f 90       	pop	r0
    2300:	1f 90       	pop	r1
    2302:	18 95       	reti

00002304 <__vector_43>:

/* PORTE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT0_vect)      /* External Interrupt 0 */
    2304:	1f 92       	push	r1
    2306:	0f 92       	push	r0
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	0f 92       	push	r0
    230c:	11 24       	eor	r1, r1
    230e:	0b b6       	in	r0, 0x3b	; 59
    2310:	0f 92       	push	r0
    2312:	2f 93       	push	r18
    2314:	3f 93       	push	r19
    2316:	4f 93       	push	r20
    2318:	5f 93       	push	r21
    231a:	6f 93       	push	r22
    231c:	7f 93       	push	r23
    231e:	8f 93       	push	r24
    2320:	9f 93       	push	r25
    2322:	af 93       	push	r26
    2324:	bf 93       	push	r27
    2326:	ef 93       	push	r30
    2328:	ff 93       	push	r31
    232a:	e0 91 49 21 	lds	r30, 0x2149
    232e:	f0 91 4a 21 	lds	r31, 0x214A
    2332:	30 97       	sbiw	r30, 0x00	; 0
    2334:	29 f0       	breq	.+10     	; 0x2340 <__vector_43+0x3c>
    2336:	80 91 3f 22 	lds	r24, 0x223F
    233a:	90 91 40 22 	lds	r25, 0x2240
    233e:	19 95       	eicall
    2340:	ff 91       	pop	r31
    2342:	ef 91       	pop	r30
    2344:	bf 91       	pop	r27
    2346:	af 91       	pop	r26
    2348:	9f 91       	pop	r25
    234a:	8f 91       	pop	r24
    234c:	7f 91       	pop	r23
    234e:	6f 91       	pop	r22
    2350:	5f 91       	pop	r21
    2352:	4f 91       	pop	r20
    2354:	3f 91       	pop	r19
    2356:	2f 91       	pop	r18
    2358:	0f 90       	pop	r0
    235a:	0b be       	out	0x3b, r0	; 59
    235c:	0f 90       	pop	r0
    235e:	0f be       	out	0x3f, r0	; 63
    2360:	0f 90       	pop	r0
    2362:	1f 90       	pop	r1
    2364:	18 95       	reti

00002366 <__vector_44>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT1_vect)      /* External Interrupt 1 */
    2366:	1f 92       	push	r1
    2368:	0f 92       	push	r0
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	0f 92       	push	r0
    236e:	11 24       	eor	r1, r1
    2370:	0b b6       	in	r0, 0x3b	; 59
    2372:	0f 92       	push	r0
    2374:	2f 93       	push	r18
    2376:	3f 93       	push	r19
    2378:	4f 93       	push	r20
    237a:	5f 93       	push	r21
    237c:	6f 93       	push	r22
    237e:	7f 93       	push	r23
    2380:	8f 93       	push	r24
    2382:	9f 93       	push	r25
    2384:	af 93       	push	r26
    2386:	bf 93       	push	r27
    2388:	ef 93       	push	r30
    238a:	ff 93       	push	r31
    238c:	e0 91 4b 21 	lds	r30, 0x214B
    2390:	f0 91 4c 21 	lds	r31, 0x214C
    2394:	30 97       	sbiw	r30, 0x00	; 0
    2396:	29 f0       	breq	.+10     	; 0x23a2 <__vector_44+0x3c>
    2398:	80 91 41 22 	lds	r24, 0x2241
    239c:	90 91 42 22 	lds	r25, 0x2242
    23a0:	19 95       	eicall
    23a2:	ff 91       	pop	r31
    23a4:	ef 91       	pop	r30
    23a6:	bf 91       	pop	r27
    23a8:	af 91       	pop	r26
    23aa:	9f 91       	pop	r25
    23ac:	8f 91       	pop	r24
    23ae:	7f 91       	pop	r23
    23b0:	6f 91       	pop	r22
    23b2:	5f 91       	pop	r21
    23b4:	4f 91       	pop	r20
    23b6:	3f 91       	pop	r19
    23b8:	2f 91       	pop	r18
    23ba:	0f 90       	pop	r0
    23bc:	0b be       	out	0x3b, r0	; 59
    23be:	0f 90       	pop	r0
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	0f 90       	pop	r0
    23c4:	1f 90       	pop	r1
    23c6:	18 95       	reti

000023c8 <__vector_45>:

/* TWIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIS_vect)      /* TWI Slave Interrupt */
    23c8:	1f 92       	push	r1
    23ca:	0f 92       	push	r0
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	0f 92       	push	r0
    23d0:	11 24       	eor	r1, r1
    23d2:	0b b6       	in	r0, 0x3b	; 59
    23d4:	0f 92       	push	r0
    23d6:	2f 93       	push	r18
    23d8:	3f 93       	push	r19
    23da:	4f 93       	push	r20
    23dc:	5f 93       	push	r21
    23de:	6f 93       	push	r22
    23e0:	7f 93       	push	r23
    23e2:	8f 93       	push	r24
    23e4:	9f 93       	push	r25
    23e6:	af 93       	push	r26
    23e8:	bf 93       	push	r27
    23ea:	ef 93       	push	r30
    23ec:	ff 93       	push	r31
    23ee:	e0 91 4d 21 	lds	r30, 0x214D
    23f2:	f0 91 4e 21 	lds	r31, 0x214E
    23f6:	30 97       	sbiw	r30, 0x00	; 0
    23f8:	29 f0       	breq	.+10     	; 0x2404 <__vector_45+0x3c>
    23fa:	80 91 43 22 	lds	r24, 0x2243
    23fe:	90 91 44 22 	lds	r25, 0x2244
    2402:	19 95       	eicall
    2404:	ff 91       	pop	r31
    2406:	ef 91       	pop	r30
    2408:	bf 91       	pop	r27
    240a:	af 91       	pop	r26
    240c:	9f 91       	pop	r25
    240e:	8f 91       	pop	r24
    2410:	7f 91       	pop	r23
    2412:	6f 91       	pop	r22
    2414:	5f 91       	pop	r21
    2416:	4f 91       	pop	r20
    2418:	3f 91       	pop	r19
    241a:	2f 91       	pop	r18
    241c:	0f 90       	pop	r0
    241e:	0b be       	out	0x3b, r0	; 59
    2420:	0f 90       	pop	r0
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	0f 90       	pop	r0
    2426:	1f 90       	pop	r1
    2428:	18 95       	reti

0000242a <__vector_46>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIM_vect)		/* TWI Master Interrupt */
    242a:	1f 92       	push	r1
    242c:	0f 92       	push	r0
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	0f 92       	push	r0
    2432:	11 24       	eor	r1, r1
    2434:	0b b6       	in	r0, 0x3b	; 59
    2436:	0f 92       	push	r0
    2438:	2f 93       	push	r18
    243a:	3f 93       	push	r19
    243c:	4f 93       	push	r20
    243e:	5f 93       	push	r21
    2440:	6f 93       	push	r22
    2442:	7f 93       	push	r23
    2444:	8f 93       	push	r24
    2446:	9f 93       	push	r25
    2448:	af 93       	push	r26
    244a:	bf 93       	push	r27
    244c:	ef 93       	push	r30
    244e:	ff 93       	push	r31
    2450:	e0 91 4f 21 	lds	r30, 0x214F
    2454:	f0 91 50 21 	lds	r31, 0x2150
    2458:	30 97       	sbiw	r30, 0x00	; 0
    245a:	29 f0       	breq	.+10     	; 0x2466 <__vector_46+0x3c>
    245c:	80 91 45 22 	lds	r24, 0x2245
    2460:	90 91 46 22 	lds	r25, 0x2246
    2464:	19 95       	eicall
    2466:	ff 91       	pop	r31
    2468:	ef 91       	pop	r30
    246a:	bf 91       	pop	r27
    246c:	af 91       	pop	r26
    246e:	9f 91       	pop	r25
    2470:	8f 91       	pop	r24
    2472:	7f 91       	pop	r23
    2474:	6f 91       	pop	r22
    2476:	5f 91       	pop	r21
    2478:	4f 91       	pop	r20
    247a:	3f 91       	pop	r19
    247c:	2f 91       	pop	r18
    247e:	0f 90       	pop	r0
    2480:	0b be       	out	0x3b, r0	; 59
    2482:	0f 90       	pop	r0
    2484:	0f be       	out	0x3f, r0	; 63
    2486:	0f 90       	pop	r0
    2488:	1f 90       	pop	r1
    248a:	18 95       	reti

0000248c <__vector_47>:

/* TCE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_OVF_vect)      /* Overflow Interrupt */
    248c:	1f 92       	push	r1
    248e:	0f 92       	push	r0
    2490:	0f b6       	in	r0, 0x3f	; 63
    2492:	0f 92       	push	r0
    2494:	11 24       	eor	r1, r1
    2496:	0b b6       	in	r0, 0x3b	; 59
    2498:	0f 92       	push	r0
    249a:	2f 93       	push	r18
    249c:	3f 93       	push	r19
    249e:	4f 93       	push	r20
    24a0:	5f 93       	push	r21
    24a2:	6f 93       	push	r22
    24a4:	7f 93       	push	r23
    24a6:	8f 93       	push	r24
    24a8:	9f 93       	push	r25
    24aa:	af 93       	push	r26
    24ac:	bf 93       	push	r27
    24ae:	ef 93       	push	r30
    24b0:	ff 93       	push	r31
    24b2:	e0 91 51 21 	lds	r30, 0x2151
    24b6:	f0 91 52 21 	lds	r31, 0x2152
    24ba:	30 97       	sbiw	r30, 0x00	; 0
    24bc:	29 f0       	breq	.+10     	; 0x24c8 <__vector_47+0x3c>
    24be:	80 91 47 22 	lds	r24, 0x2247
    24c2:	90 91 48 22 	lds	r25, 0x2248
    24c6:	19 95       	eicall
    24c8:	ff 91       	pop	r31
    24ca:	ef 91       	pop	r30
    24cc:	bf 91       	pop	r27
    24ce:	af 91       	pop	r26
    24d0:	9f 91       	pop	r25
    24d2:	8f 91       	pop	r24
    24d4:	7f 91       	pop	r23
    24d6:	6f 91       	pop	r22
    24d8:	5f 91       	pop	r21
    24da:	4f 91       	pop	r20
    24dc:	3f 91       	pop	r19
    24de:	2f 91       	pop	r18
    24e0:	0f 90       	pop	r0
    24e2:	0b be       	out	0x3b, r0	; 59
    24e4:	0f 90       	pop	r0
    24e6:	0f be       	out	0x3f, r0	; 63
    24e8:	0f 90       	pop	r0
    24ea:	1f 90       	pop	r1
    24ec:	18 95       	reti

000024ee <__vector_48>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_ERR_vect)      /* Error Interrupt */
    24ee:	1f 92       	push	r1
    24f0:	0f 92       	push	r0
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	0f 92       	push	r0
    24f6:	11 24       	eor	r1, r1
    24f8:	0b b6       	in	r0, 0x3b	; 59
    24fa:	0f 92       	push	r0
    24fc:	2f 93       	push	r18
    24fe:	3f 93       	push	r19
    2500:	4f 93       	push	r20
    2502:	5f 93       	push	r21
    2504:	6f 93       	push	r22
    2506:	7f 93       	push	r23
    2508:	8f 93       	push	r24
    250a:	9f 93       	push	r25
    250c:	af 93       	push	r26
    250e:	bf 93       	push	r27
    2510:	ef 93       	push	r30
    2512:	ff 93       	push	r31
    2514:	e0 91 53 21 	lds	r30, 0x2153
    2518:	f0 91 54 21 	lds	r31, 0x2154
    251c:	30 97       	sbiw	r30, 0x00	; 0
    251e:	29 f0       	breq	.+10     	; 0x252a <__vector_48+0x3c>
    2520:	80 91 49 22 	lds	r24, 0x2249
    2524:	90 91 4a 22 	lds	r25, 0x224A
    2528:	19 95       	eicall
    252a:	ff 91       	pop	r31
    252c:	ef 91       	pop	r30
    252e:	bf 91       	pop	r27
    2530:	af 91       	pop	r26
    2532:	9f 91       	pop	r25
    2534:	8f 91       	pop	r24
    2536:	7f 91       	pop	r23
    2538:	6f 91       	pop	r22
    253a:	5f 91       	pop	r21
    253c:	4f 91       	pop	r20
    253e:	3f 91       	pop	r19
    2540:	2f 91       	pop	r18
    2542:	0f 90       	pop	r0
    2544:	0b be       	out	0x3b, r0	; 59
    2546:	0f 90       	pop	r0
    2548:	0f be       	out	0x3f, r0	; 63
    254a:	0f 90       	pop	r0
    254c:	1f 90       	pop	r1
    254e:	18 95       	reti

00002550 <__vector_49>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCA_vect)      /* Compare or Capture A Interrupt */
    2550:	1f 92       	push	r1
    2552:	0f 92       	push	r0
    2554:	0f b6       	in	r0, 0x3f	; 63
    2556:	0f 92       	push	r0
    2558:	11 24       	eor	r1, r1
    255a:	0b b6       	in	r0, 0x3b	; 59
    255c:	0f 92       	push	r0
    255e:	2f 93       	push	r18
    2560:	3f 93       	push	r19
    2562:	4f 93       	push	r20
    2564:	5f 93       	push	r21
    2566:	6f 93       	push	r22
    2568:	7f 93       	push	r23
    256a:	8f 93       	push	r24
    256c:	9f 93       	push	r25
    256e:	af 93       	push	r26
    2570:	bf 93       	push	r27
    2572:	ef 93       	push	r30
    2574:	ff 93       	push	r31
    2576:	e0 91 55 21 	lds	r30, 0x2155
    257a:	f0 91 56 21 	lds	r31, 0x2156
    257e:	30 97       	sbiw	r30, 0x00	; 0
    2580:	29 f0       	breq	.+10     	; 0x258c <__vector_49+0x3c>
    2582:	80 91 4b 22 	lds	r24, 0x224B
    2586:	90 91 4c 22 	lds	r25, 0x224C
    258a:	19 95       	eicall
    258c:	ff 91       	pop	r31
    258e:	ef 91       	pop	r30
    2590:	bf 91       	pop	r27
    2592:	af 91       	pop	r26
    2594:	9f 91       	pop	r25
    2596:	8f 91       	pop	r24
    2598:	7f 91       	pop	r23
    259a:	6f 91       	pop	r22
    259c:	5f 91       	pop	r21
    259e:	4f 91       	pop	r20
    25a0:	3f 91       	pop	r19
    25a2:	2f 91       	pop	r18
    25a4:	0f 90       	pop	r0
    25a6:	0b be       	out	0x3b, r0	; 59
    25a8:	0f 90       	pop	r0
    25aa:	0f be       	out	0x3f, r0	; 63
    25ac:	0f 90       	pop	r0
    25ae:	1f 90       	pop	r1
    25b0:	18 95       	reti

000025b2 <__vector_50>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCB_vect)      /* Compare or Capture B Interrupt */
    25b2:	1f 92       	push	r1
    25b4:	0f 92       	push	r0
    25b6:	0f b6       	in	r0, 0x3f	; 63
    25b8:	0f 92       	push	r0
    25ba:	11 24       	eor	r1, r1
    25bc:	0b b6       	in	r0, 0x3b	; 59
    25be:	0f 92       	push	r0
    25c0:	2f 93       	push	r18
    25c2:	3f 93       	push	r19
    25c4:	4f 93       	push	r20
    25c6:	5f 93       	push	r21
    25c8:	6f 93       	push	r22
    25ca:	7f 93       	push	r23
    25cc:	8f 93       	push	r24
    25ce:	9f 93       	push	r25
    25d0:	af 93       	push	r26
    25d2:	bf 93       	push	r27
    25d4:	ef 93       	push	r30
    25d6:	ff 93       	push	r31
    25d8:	e0 91 57 21 	lds	r30, 0x2157
    25dc:	f0 91 58 21 	lds	r31, 0x2158
    25e0:	30 97       	sbiw	r30, 0x00	; 0
    25e2:	29 f0       	breq	.+10     	; 0x25ee <__vector_50+0x3c>
    25e4:	80 91 4d 22 	lds	r24, 0x224D
    25e8:	90 91 4e 22 	lds	r25, 0x224E
    25ec:	19 95       	eicall
    25ee:	ff 91       	pop	r31
    25f0:	ef 91       	pop	r30
    25f2:	bf 91       	pop	r27
    25f4:	af 91       	pop	r26
    25f6:	9f 91       	pop	r25
    25f8:	8f 91       	pop	r24
    25fa:	7f 91       	pop	r23
    25fc:	6f 91       	pop	r22
    25fe:	5f 91       	pop	r21
    2600:	4f 91       	pop	r20
    2602:	3f 91       	pop	r19
    2604:	2f 91       	pop	r18
    2606:	0f 90       	pop	r0
    2608:	0b be       	out	0x3b, r0	; 59
    260a:	0f 90       	pop	r0
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	0f 90       	pop	r0
    2610:	1f 90       	pop	r1
    2612:	18 95       	reti

00002614 <__vector_51>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCC_vect)      /* Compare or Capture C Interrupt */
    2614:	1f 92       	push	r1
    2616:	0f 92       	push	r0
    2618:	0f b6       	in	r0, 0x3f	; 63
    261a:	0f 92       	push	r0
    261c:	11 24       	eor	r1, r1
    261e:	0b b6       	in	r0, 0x3b	; 59
    2620:	0f 92       	push	r0
    2622:	2f 93       	push	r18
    2624:	3f 93       	push	r19
    2626:	4f 93       	push	r20
    2628:	5f 93       	push	r21
    262a:	6f 93       	push	r22
    262c:	7f 93       	push	r23
    262e:	8f 93       	push	r24
    2630:	9f 93       	push	r25
    2632:	af 93       	push	r26
    2634:	bf 93       	push	r27
    2636:	ef 93       	push	r30
    2638:	ff 93       	push	r31
    263a:	e0 91 59 21 	lds	r30, 0x2159
    263e:	f0 91 5a 21 	lds	r31, 0x215A
    2642:	30 97       	sbiw	r30, 0x00	; 0
    2644:	29 f0       	breq	.+10     	; 0x2650 <__vector_51+0x3c>
    2646:	80 91 4f 22 	lds	r24, 0x224F
    264a:	90 91 50 22 	lds	r25, 0x2250
    264e:	19 95       	eicall
    2650:	ff 91       	pop	r31
    2652:	ef 91       	pop	r30
    2654:	bf 91       	pop	r27
    2656:	af 91       	pop	r26
    2658:	9f 91       	pop	r25
    265a:	8f 91       	pop	r24
    265c:	7f 91       	pop	r23
    265e:	6f 91       	pop	r22
    2660:	5f 91       	pop	r21
    2662:	4f 91       	pop	r20
    2664:	3f 91       	pop	r19
    2666:	2f 91       	pop	r18
    2668:	0f 90       	pop	r0
    266a:	0b be       	out	0x3b, r0	; 59
    266c:	0f 90       	pop	r0
    266e:	0f be       	out	0x3f, r0	; 63
    2670:	0f 90       	pop	r0
    2672:	1f 90       	pop	r1
    2674:	18 95       	reti

00002676 <__vector_52>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCD_vect)      /* Compare or Capture D Interrupt */
    2676:	1f 92       	push	r1
    2678:	0f 92       	push	r0
    267a:	0f b6       	in	r0, 0x3f	; 63
    267c:	0f 92       	push	r0
    267e:	11 24       	eor	r1, r1
    2680:	0b b6       	in	r0, 0x3b	; 59
    2682:	0f 92       	push	r0
    2684:	2f 93       	push	r18
    2686:	3f 93       	push	r19
    2688:	4f 93       	push	r20
    268a:	5f 93       	push	r21
    268c:	6f 93       	push	r22
    268e:	7f 93       	push	r23
    2690:	8f 93       	push	r24
    2692:	9f 93       	push	r25
    2694:	af 93       	push	r26
    2696:	bf 93       	push	r27
    2698:	ef 93       	push	r30
    269a:	ff 93       	push	r31
    269c:	e0 91 5b 21 	lds	r30, 0x215B
    26a0:	f0 91 5c 21 	lds	r31, 0x215C
    26a4:	30 97       	sbiw	r30, 0x00	; 0
    26a6:	29 f0       	breq	.+10     	; 0x26b2 <__vector_52+0x3c>
    26a8:	80 91 51 22 	lds	r24, 0x2251
    26ac:	90 91 52 22 	lds	r25, 0x2252
    26b0:	19 95       	eicall
    26b2:	ff 91       	pop	r31
    26b4:	ef 91       	pop	r30
    26b6:	bf 91       	pop	r27
    26b8:	af 91       	pop	r26
    26ba:	9f 91       	pop	r25
    26bc:	8f 91       	pop	r24
    26be:	7f 91       	pop	r23
    26c0:	6f 91       	pop	r22
    26c2:	5f 91       	pop	r21
    26c4:	4f 91       	pop	r20
    26c6:	3f 91       	pop	r19
    26c8:	2f 91       	pop	r18
    26ca:	0f 90       	pop	r0
    26cc:	0b be       	out	0x3b, r0	; 59
    26ce:	0f 90       	pop	r0
    26d0:	0f be       	out	0x3f, r0	; 63
    26d2:	0f 90       	pop	r0
    26d4:	1f 90       	pop	r1
    26d6:	18 95       	reti

000026d8 <__vector_53>:

/* TCE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_OVF_vect)      /* Overflow Interrupt */
    26d8:	1f 92       	push	r1
    26da:	0f 92       	push	r0
    26dc:	0f b6       	in	r0, 0x3f	; 63
    26de:	0f 92       	push	r0
    26e0:	11 24       	eor	r1, r1
    26e2:	0b b6       	in	r0, 0x3b	; 59
    26e4:	0f 92       	push	r0
    26e6:	2f 93       	push	r18
    26e8:	3f 93       	push	r19
    26ea:	4f 93       	push	r20
    26ec:	5f 93       	push	r21
    26ee:	6f 93       	push	r22
    26f0:	7f 93       	push	r23
    26f2:	8f 93       	push	r24
    26f4:	9f 93       	push	r25
    26f6:	af 93       	push	r26
    26f8:	bf 93       	push	r27
    26fa:	ef 93       	push	r30
    26fc:	ff 93       	push	r31
    26fe:	e0 91 5d 21 	lds	r30, 0x215D
    2702:	f0 91 5e 21 	lds	r31, 0x215E
    2706:	30 97       	sbiw	r30, 0x00	; 0
    2708:	29 f0       	breq	.+10     	; 0x2714 <__vector_53+0x3c>
    270a:	80 91 53 22 	lds	r24, 0x2253
    270e:	90 91 54 22 	lds	r25, 0x2254
    2712:	19 95       	eicall
    2714:	ff 91       	pop	r31
    2716:	ef 91       	pop	r30
    2718:	bf 91       	pop	r27
    271a:	af 91       	pop	r26
    271c:	9f 91       	pop	r25
    271e:	8f 91       	pop	r24
    2720:	7f 91       	pop	r23
    2722:	6f 91       	pop	r22
    2724:	5f 91       	pop	r21
    2726:	4f 91       	pop	r20
    2728:	3f 91       	pop	r19
    272a:	2f 91       	pop	r18
    272c:	0f 90       	pop	r0
    272e:	0b be       	out	0x3b, r0	; 59
    2730:	0f 90       	pop	r0
    2732:	0f be       	out	0x3f, r0	; 63
    2734:	0f 90       	pop	r0
    2736:	1f 90       	pop	r1
    2738:	18 95       	reti

0000273a <__vector_54>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_ERR_vect)      /* Error Interrupt */
    273a:	1f 92       	push	r1
    273c:	0f 92       	push	r0
    273e:	0f b6       	in	r0, 0x3f	; 63
    2740:	0f 92       	push	r0
    2742:	11 24       	eor	r1, r1
    2744:	0b b6       	in	r0, 0x3b	; 59
    2746:	0f 92       	push	r0
    2748:	2f 93       	push	r18
    274a:	3f 93       	push	r19
    274c:	4f 93       	push	r20
    274e:	5f 93       	push	r21
    2750:	6f 93       	push	r22
    2752:	7f 93       	push	r23
    2754:	8f 93       	push	r24
    2756:	9f 93       	push	r25
    2758:	af 93       	push	r26
    275a:	bf 93       	push	r27
    275c:	ef 93       	push	r30
    275e:	ff 93       	push	r31
    2760:	e0 91 5f 21 	lds	r30, 0x215F
    2764:	f0 91 60 21 	lds	r31, 0x2160
    2768:	30 97       	sbiw	r30, 0x00	; 0
    276a:	29 f0       	breq	.+10     	; 0x2776 <__vector_54+0x3c>
    276c:	80 91 55 22 	lds	r24, 0x2255
    2770:	90 91 56 22 	lds	r25, 0x2256
    2774:	19 95       	eicall
    2776:	ff 91       	pop	r31
    2778:	ef 91       	pop	r30
    277a:	bf 91       	pop	r27
    277c:	af 91       	pop	r26
    277e:	9f 91       	pop	r25
    2780:	8f 91       	pop	r24
    2782:	7f 91       	pop	r23
    2784:	6f 91       	pop	r22
    2786:	5f 91       	pop	r21
    2788:	4f 91       	pop	r20
    278a:	3f 91       	pop	r19
    278c:	2f 91       	pop	r18
    278e:	0f 90       	pop	r0
    2790:	0b be       	out	0x3b, r0	; 59
    2792:	0f 90       	pop	r0
    2794:	0f be       	out	0x3f, r0	; 63
    2796:	0f 90       	pop	r0
    2798:	1f 90       	pop	r1
    279a:	18 95       	reti

0000279c <__vector_55>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCA_vect)      /* Compare or Capture A Interrupt */
    279c:	1f 92       	push	r1
    279e:	0f 92       	push	r0
    27a0:	0f b6       	in	r0, 0x3f	; 63
    27a2:	0f 92       	push	r0
    27a4:	11 24       	eor	r1, r1
    27a6:	0b b6       	in	r0, 0x3b	; 59
    27a8:	0f 92       	push	r0
    27aa:	2f 93       	push	r18
    27ac:	3f 93       	push	r19
    27ae:	4f 93       	push	r20
    27b0:	5f 93       	push	r21
    27b2:	6f 93       	push	r22
    27b4:	7f 93       	push	r23
    27b6:	8f 93       	push	r24
    27b8:	9f 93       	push	r25
    27ba:	af 93       	push	r26
    27bc:	bf 93       	push	r27
    27be:	ef 93       	push	r30
    27c0:	ff 93       	push	r31
    27c2:	e0 91 61 21 	lds	r30, 0x2161
    27c6:	f0 91 62 21 	lds	r31, 0x2162
    27ca:	30 97       	sbiw	r30, 0x00	; 0
    27cc:	29 f0       	breq	.+10     	; 0x27d8 <__vector_55+0x3c>
    27ce:	80 91 57 22 	lds	r24, 0x2257
    27d2:	90 91 58 22 	lds	r25, 0x2258
    27d6:	19 95       	eicall
    27d8:	ff 91       	pop	r31
    27da:	ef 91       	pop	r30
    27dc:	bf 91       	pop	r27
    27de:	af 91       	pop	r26
    27e0:	9f 91       	pop	r25
    27e2:	8f 91       	pop	r24
    27e4:	7f 91       	pop	r23
    27e6:	6f 91       	pop	r22
    27e8:	5f 91       	pop	r21
    27ea:	4f 91       	pop	r20
    27ec:	3f 91       	pop	r19
    27ee:	2f 91       	pop	r18
    27f0:	0f 90       	pop	r0
    27f2:	0b be       	out	0x3b, r0	; 59
    27f4:	0f 90       	pop	r0
    27f6:	0f be       	out	0x3f, r0	; 63
    27f8:	0f 90       	pop	r0
    27fa:	1f 90       	pop	r1
    27fc:	18 95       	reti

000027fe <__vector_56>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCB_vect)      /* Compare or Capture B Interrupt */
    27fe:	1f 92       	push	r1
    2800:	0f 92       	push	r0
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	0f 92       	push	r0
    2806:	11 24       	eor	r1, r1
    2808:	0b b6       	in	r0, 0x3b	; 59
    280a:	0f 92       	push	r0
    280c:	2f 93       	push	r18
    280e:	3f 93       	push	r19
    2810:	4f 93       	push	r20
    2812:	5f 93       	push	r21
    2814:	6f 93       	push	r22
    2816:	7f 93       	push	r23
    2818:	8f 93       	push	r24
    281a:	9f 93       	push	r25
    281c:	af 93       	push	r26
    281e:	bf 93       	push	r27
    2820:	ef 93       	push	r30
    2822:	ff 93       	push	r31
    2824:	e0 91 63 21 	lds	r30, 0x2163
    2828:	f0 91 64 21 	lds	r31, 0x2164
    282c:	30 97       	sbiw	r30, 0x00	; 0
    282e:	29 f0       	breq	.+10     	; 0x283a <__vector_56+0x3c>
    2830:	80 91 59 22 	lds	r24, 0x2259
    2834:	90 91 5a 22 	lds	r25, 0x225A
    2838:	19 95       	eicall
    283a:	ff 91       	pop	r31
    283c:	ef 91       	pop	r30
    283e:	bf 91       	pop	r27
    2840:	af 91       	pop	r26
    2842:	9f 91       	pop	r25
    2844:	8f 91       	pop	r24
    2846:	7f 91       	pop	r23
    2848:	6f 91       	pop	r22
    284a:	5f 91       	pop	r21
    284c:	4f 91       	pop	r20
    284e:	3f 91       	pop	r19
    2850:	2f 91       	pop	r18
    2852:	0f 90       	pop	r0
    2854:	0b be       	out	0x3b, r0	; 59
    2856:	0f 90       	pop	r0
    2858:	0f be       	out	0x3f, r0	; 63
    285a:	0f 90       	pop	r0
    285c:	1f 90       	pop	r1
    285e:	18 95       	reti

00002860 <__vector_57>:

/* SPIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIE_INT_vect)      /* SPI Interrupt */
    2860:	1f 92       	push	r1
    2862:	0f 92       	push	r0
    2864:	0f b6       	in	r0, 0x3f	; 63
    2866:	0f 92       	push	r0
    2868:	11 24       	eor	r1, r1
    286a:	0b b6       	in	r0, 0x3b	; 59
    286c:	0f 92       	push	r0
    286e:	2f 93       	push	r18
    2870:	3f 93       	push	r19
    2872:	4f 93       	push	r20
    2874:	5f 93       	push	r21
    2876:	6f 93       	push	r22
    2878:	7f 93       	push	r23
    287a:	8f 93       	push	r24
    287c:	9f 93       	push	r25
    287e:	af 93       	push	r26
    2880:	bf 93       	push	r27
    2882:	ef 93       	push	r30
    2884:	ff 93       	push	r31
    2886:	e0 91 65 21 	lds	r30, 0x2165
    288a:	f0 91 66 21 	lds	r31, 0x2166
    288e:	30 97       	sbiw	r30, 0x00	; 0
    2890:	29 f0       	breq	.+10     	; 0x289c <__vector_57+0x3c>
    2892:	80 91 5b 22 	lds	r24, 0x225B
    2896:	90 91 5c 22 	lds	r25, 0x225C
    289a:	19 95       	eicall
    289c:	ff 91       	pop	r31
    289e:	ef 91       	pop	r30
    28a0:	bf 91       	pop	r27
    28a2:	af 91       	pop	r26
    28a4:	9f 91       	pop	r25
    28a6:	8f 91       	pop	r24
    28a8:	7f 91       	pop	r23
    28aa:	6f 91       	pop	r22
    28ac:	5f 91       	pop	r21
    28ae:	4f 91       	pop	r20
    28b0:	3f 91       	pop	r19
    28b2:	2f 91       	pop	r18
    28b4:	0f 90       	pop	r0
    28b6:	0b be       	out	0x3b, r0	; 59
    28b8:	0f 90       	pop	r0
    28ba:	0f be       	out	0x3f, r0	; 63
    28bc:	0f 90       	pop	r0
    28be:	1f 90       	pop	r1
    28c0:	18 95       	reti

000028c2 <__vector_58>:

/* USARTE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_RXC_vect)      /* Reception Complete Interrupt */
    28c2:	1f 92       	push	r1
    28c4:	0f 92       	push	r0
    28c6:	0f b6       	in	r0, 0x3f	; 63
    28c8:	0f 92       	push	r0
    28ca:	11 24       	eor	r1, r1
    28cc:	0b b6       	in	r0, 0x3b	; 59
    28ce:	0f 92       	push	r0
    28d0:	2f 93       	push	r18
    28d2:	3f 93       	push	r19
    28d4:	4f 93       	push	r20
    28d6:	5f 93       	push	r21
    28d8:	6f 93       	push	r22
    28da:	7f 93       	push	r23
    28dc:	8f 93       	push	r24
    28de:	9f 93       	push	r25
    28e0:	af 93       	push	r26
    28e2:	bf 93       	push	r27
    28e4:	ef 93       	push	r30
    28e6:	ff 93       	push	r31
    28e8:	e0 91 67 21 	lds	r30, 0x2167
    28ec:	f0 91 68 21 	lds	r31, 0x2168
    28f0:	30 97       	sbiw	r30, 0x00	; 0
    28f2:	29 f0       	breq	.+10     	; 0x28fe <__vector_58+0x3c>
    28f4:	80 91 5d 22 	lds	r24, 0x225D
    28f8:	90 91 5e 22 	lds	r25, 0x225E
    28fc:	19 95       	eicall
    28fe:	ff 91       	pop	r31
    2900:	ef 91       	pop	r30
    2902:	bf 91       	pop	r27
    2904:	af 91       	pop	r26
    2906:	9f 91       	pop	r25
    2908:	8f 91       	pop	r24
    290a:	7f 91       	pop	r23
    290c:	6f 91       	pop	r22
    290e:	5f 91       	pop	r21
    2910:	4f 91       	pop	r20
    2912:	3f 91       	pop	r19
    2914:	2f 91       	pop	r18
    2916:	0f 90       	pop	r0
    2918:	0b be       	out	0x3b, r0	; 59
    291a:	0f 90       	pop	r0
    291c:	0f be       	out	0x3f, r0	; 63
    291e:	0f 90       	pop	r0
    2920:	1f 90       	pop	r1
    2922:	18 95       	reti

00002924 <__vector_59>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_DRE_vect)      /* Data Register Empty Interrupt */
    2924:	1f 92       	push	r1
    2926:	0f 92       	push	r0
    2928:	0f b6       	in	r0, 0x3f	; 63
    292a:	0f 92       	push	r0
    292c:	11 24       	eor	r1, r1
    292e:	0b b6       	in	r0, 0x3b	; 59
    2930:	0f 92       	push	r0
    2932:	2f 93       	push	r18
    2934:	3f 93       	push	r19
    2936:	4f 93       	push	r20
    2938:	5f 93       	push	r21
    293a:	6f 93       	push	r22
    293c:	7f 93       	push	r23
    293e:	8f 93       	push	r24
    2940:	9f 93       	push	r25
    2942:	af 93       	push	r26
    2944:	bf 93       	push	r27
    2946:	ef 93       	push	r30
    2948:	ff 93       	push	r31
    294a:	e0 91 69 21 	lds	r30, 0x2169
    294e:	f0 91 6a 21 	lds	r31, 0x216A
    2952:	30 97       	sbiw	r30, 0x00	; 0
    2954:	29 f0       	breq	.+10     	; 0x2960 <__vector_59+0x3c>
    2956:	80 91 5f 22 	lds	r24, 0x225F
    295a:	90 91 60 22 	lds	r25, 0x2260
    295e:	19 95       	eicall
    2960:	ff 91       	pop	r31
    2962:	ef 91       	pop	r30
    2964:	bf 91       	pop	r27
    2966:	af 91       	pop	r26
    2968:	9f 91       	pop	r25
    296a:	8f 91       	pop	r24
    296c:	7f 91       	pop	r23
    296e:	6f 91       	pop	r22
    2970:	5f 91       	pop	r21
    2972:	4f 91       	pop	r20
    2974:	3f 91       	pop	r19
    2976:	2f 91       	pop	r18
    2978:	0f 90       	pop	r0
    297a:	0b be       	out	0x3b, r0	; 59
    297c:	0f 90       	pop	r0
    297e:	0f be       	out	0x3f, r0	; 63
    2980:	0f 90       	pop	r0
    2982:	1f 90       	pop	r1
    2984:	18 95       	reti

00002986 <__vector_60>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_TXC_vect)      /* Transmission Complete Interrupt */
    2986:	1f 92       	push	r1
    2988:	0f 92       	push	r0
    298a:	0f b6       	in	r0, 0x3f	; 63
    298c:	0f 92       	push	r0
    298e:	11 24       	eor	r1, r1
    2990:	0b b6       	in	r0, 0x3b	; 59
    2992:	0f 92       	push	r0
    2994:	2f 93       	push	r18
    2996:	3f 93       	push	r19
    2998:	4f 93       	push	r20
    299a:	5f 93       	push	r21
    299c:	6f 93       	push	r22
    299e:	7f 93       	push	r23
    29a0:	8f 93       	push	r24
    29a2:	9f 93       	push	r25
    29a4:	af 93       	push	r26
    29a6:	bf 93       	push	r27
    29a8:	ef 93       	push	r30
    29aa:	ff 93       	push	r31
    29ac:	e0 91 6b 21 	lds	r30, 0x216B
    29b0:	f0 91 6c 21 	lds	r31, 0x216C
    29b4:	30 97       	sbiw	r30, 0x00	; 0
    29b6:	29 f0       	breq	.+10     	; 0x29c2 <__vector_60+0x3c>
    29b8:	80 91 61 22 	lds	r24, 0x2261
    29bc:	90 91 62 22 	lds	r25, 0x2262
    29c0:	19 95       	eicall
    29c2:	ff 91       	pop	r31
    29c4:	ef 91       	pop	r30
    29c6:	bf 91       	pop	r27
    29c8:	af 91       	pop	r26
    29ca:	9f 91       	pop	r25
    29cc:	8f 91       	pop	r24
    29ce:	7f 91       	pop	r23
    29d0:	6f 91       	pop	r22
    29d2:	5f 91       	pop	r21
    29d4:	4f 91       	pop	r20
    29d6:	3f 91       	pop	r19
    29d8:	2f 91       	pop	r18
    29da:	0f 90       	pop	r0
    29dc:	0b be       	out	0x3b, r0	; 59
    29de:	0f 90       	pop	r0
    29e0:	0f be       	out	0x3f, r0	; 63
    29e2:	0f 90       	pop	r0
    29e4:	1f 90       	pop	r1
    29e6:	18 95       	reti

000029e8 <__vector_61>:

/* USARTE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_RXC_vect)      /* Reception Complete Interrupt */
    29e8:	1f 92       	push	r1
    29ea:	0f 92       	push	r0
    29ec:	0f b6       	in	r0, 0x3f	; 63
    29ee:	0f 92       	push	r0
    29f0:	11 24       	eor	r1, r1
    29f2:	0b b6       	in	r0, 0x3b	; 59
    29f4:	0f 92       	push	r0
    29f6:	2f 93       	push	r18
    29f8:	3f 93       	push	r19
    29fa:	4f 93       	push	r20
    29fc:	5f 93       	push	r21
    29fe:	6f 93       	push	r22
    2a00:	7f 93       	push	r23
    2a02:	8f 93       	push	r24
    2a04:	9f 93       	push	r25
    2a06:	af 93       	push	r26
    2a08:	bf 93       	push	r27
    2a0a:	ef 93       	push	r30
    2a0c:	ff 93       	push	r31
    2a0e:	e0 91 6d 21 	lds	r30, 0x216D
    2a12:	f0 91 6e 21 	lds	r31, 0x216E
    2a16:	30 97       	sbiw	r30, 0x00	; 0
    2a18:	29 f0       	breq	.+10     	; 0x2a24 <__vector_61+0x3c>
    2a1a:	80 91 63 22 	lds	r24, 0x2263
    2a1e:	90 91 64 22 	lds	r25, 0x2264
    2a22:	19 95       	eicall
    2a24:	ff 91       	pop	r31
    2a26:	ef 91       	pop	r30
    2a28:	bf 91       	pop	r27
    2a2a:	af 91       	pop	r26
    2a2c:	9f 91       	pop	r25
    2a2e:	8f 91       	pop	r24
    2a30:	7f 91       	pop	r23
    2a32:	6f 91       	pop	r22
    2a34:	5f 91       	pop	r21
    2a36:	4f 91       	pop	r20
    2a38:	3f 91       	pop	r19
    2a3a:	2f 91       	pop	r18
    2a3c:	0f 90       	pop	r0
    2a3e:	0b be       	out	0x3b, r0	; 59
    2a40:	0f 90       	pop	r0
    2a42:	0f be       	out	0x3f, r0	; 63
    2a44:	0f 90       	pop	r0
    2a46:	1f 90       	pop	r1
    2a48:	18 95       	reti

00002a4a <__vector_62>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_DRE_vect)      /* Data Register Empty Interrupt */
    2a4a:	1f 92       	push	r1
    2a4c:	0f 92       	push	r0
    2a4e:	0f b6       	in	r0, 0x3f	; 63
    2a50:	0f 92       	push	r0
    2a52:	11 24       	eor	r1, r1
    2a54:	0b b6       	in	r0, 0x3b	; 59
    2a56:	0f 92       	push	r0
    2a58:	2f 93       	push	r18
    2a5a:	3f 93       	push	r19
    2a5c:	4f 93       	push	r20
    2a5e:	5f 93       	push	r21
    2a60:	6f 93       	push	r22
    2a62:	7f 93       	push	r23
    2a64:	8f 93       	push	r24
    2a66:	9f 93       	push	r25
    2a68:	af 93       	push	r26
    2a6a:	bf 93       	push	r27
    2a6c:	ef 93       	push	r30
    2a6e:	ff 93       	push	r31
    2a70:	e0 91 6f 21 	lds	r30, 0x216F
    2a74:	f0 91 70 21 	lds	r31, 0x2170
    2a78:	30 97       	sbiw	r30, 0x00	; 0
    2a7a:	29 f0       	breq	.+10     	; 0x2a86 <__vector_62+0x3c>
    2a7c:	80 91 65 22 	lds	r24, 0x2265
    2a80:	90 91 66 22 	lds	r25, 0x2266
    2a84:	19 95       	eicall
    2a86:	ff 91       	pop	r31
    2a88:	ef 91       	pop	r30
    2a8a:	bf 91       	pop	r27
    2a8c:	af 91       	pop	r26
    2a8e:	9f 91       	pop	r25
    2a90:	8f 91       	pop	r24
    2a92:	7f 91       	pop	r23
    2a94:	6f 91       	pop	r22
    2a96:	5f 91       	pop	r21
    2a98:	4f 91       	pop	r20
    2a9a:	3f 91       	pop	r19
    2a9c:	2f 91       	pop	r18
    2a9e:	0f 90       	pop	r0
    2aa0:	0b be       	out	0x3b, r0	; 59
    2aa2:	0f 90       	pop	r0
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	0f 90       	pop	r0
    2aa8:	1f 90       	pop	r1
    2aaa:	18 95       	reti

00002aac <__vector_63>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_TXC_vect)      /* Transmission Complete Interrupt */
    2aac:	1f 92       	push	r1
    2aae:	0f 92       	push	r0
    2ab0:	0f b6       	in	r0, 0x3f	; 63
    2ab2:	0f 92       	push	r0
    2ab4:	11 24       	eor	r1, r1
    2ab6:	0b b6       	in	r0, 0x3b	; 59
    2ab8:	0f 92       	push	r0
    2aba:	2f 93       	push	r18
    2abc:	3f 93       	push	r19
    2abe:	4f 93       	push	r20
    2ac0:	5f 93       	push	r21
    2ac2:	6f 93       	push	r22
    2ac4:	7f 93       	push	r23
    2ac6:	8f 93       	push	r24
    2ac8:	9f 93       	push	r25
    2aca:	af 93       	push	r26
    2acc:	bf 93       	push	r27
    2ace:	ef 93       	push	r30
    2ad0:	ff 93       	push	r31
    2ad2:	e0 91 71 21 	lds	r30, 0x2171
    2ad6:	f0 91 72 21 	lds	r31, 0x2172
    2ada:	30 97       	sbiw	r30, 0x00	; 0
    2adc:	29 f0       	breq	.+10     	; 0x2ae8 <__vector_63+0x3c>
    2ade:	80 91 67 22 	lds	r24, 0x2267
    2ae2:	90 91 68 22 	lds	r25, 0x2268
    2ae6:	19 95       	eicall
    2ae8:	ff 91       	pop	r31
    2aea:	ef 91       	pop	r30
    2aec:	bf 91       	pop	r27
    2aee:	af 91       	pop	r26
    2af0:	9f 91       	pop	r25
    2af2:	8f 91       	pop	r24
    2af4:	7f 91       	pop	r23
    2af6:	6f 91       	pop	r22
    2af8:	5f 91       	pop	r21
    2afa:	4f 91       	pop	r20
    2afc:	3f 91       	pop	r19
    2afe:	2f 91       	pop	r18
    2b00:	0f 90       	pop	r0
    2b02:	0b be       	out	0x3b, r0	; 59
    2b04:	0f 90       	pop	r0
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	0f 90       	pop	r0
    2b0a:	1f 90       	pop	r1
    2b0c:	18 95       	reti

00002b0e <__vector_64>:

/* PORTD interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT0_vect)      /* External Interrupt 0 */
    2b0e:	1f 92       	push	r1
    2b10:	0f 92       	push	r0
    2b12:	0f b6       	in	r0, 0x3f	; 63
    2b14:	0f 92       	push	r0
    2b16:	11 24       	eor	r1, r1
    2b18:	0b b6       	in	r0, 0x3b	; 59
    2b1a:	0f 92       	push	r0
    2b1c:	2f 93       	push	r18
    2b1e:	3f 93       	push	r19
    2b20:	4f 93       	push	r20
    2b22:	5f 93       	push	r21
    2b24:	6f 93       	push	r22
    2b26:	7f 93       	push	r23
    2b28:	8f 93       	push	r24
    2b2a:	9f 93       	push	r25
    2b2c:	af 93       	push	r26
    2b2e:	bf 93       	push	r27
    2b30:	ef 93       	push	r30
    2b32:	ff 93       	push	r31
    2b34:	e0 91 73 21 	lds	r30, 0x2173
    2b38:	f0 91 74 21 	lds	r31, 0x2174
    2b3c:	30 97       	sbiw	r30, 0x00	; 0
    2b3e:	29 f0       	breq	.+10     	; 0x2b4a <__vector_64+0x3c>
    2b40:	80 91 69 22 	lds	r24, 0x2269
    2b44:	90 91 6a 22 	lds	r25, 0x226A
    2b48:	19 95       	eicall
    2b4a:	ff 91       	pop	r31
    2b4c:	ef 91       	pop	r30
    2b4e:	bf 91       	pop	r27
    2b50:	af 91       	pop	r26
    2b52:	9f 91       	pop	r25
    2b54:	8f 91       	pop	r24
    2b56:	7f 91       	pop	r23
    2b58:	6f 91       	pop	r22
    2b5a:	5f 91       	pop	r21
    2b5c:	4f 91       	pop	r20
    2b5e:	3f 91       	pop	r19
    2b60:	2f 91       	pop	r18
    2b62:	0f 90       	pop	r0
    2b64:	0b be       	out	0x3b, r0	; 59
    2b66:	0f 90       	pop	r0
    2b68:	0f be       	out	0x3f, r0	; 63
    2b6a:	0f 90       	pop	r0
    2b6c:	1f 90       	pop	r1
    2b6e:	18 95       	reti

00002b70 <__vector_65>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT1_vect)      /* External Interrupt 1 */
    2b70:	1f 92       	push	r1
    2b72:	0f 92       	push	r0
    2b74:	0f b6       	in	r0, 0x3f	; 63
    2b76:	0f 92       	push	r0
    2b78:	11 24       	eor	r1, r1
    2b7a:	0b b6       	in	r0, 0x3b	; 59
    2b7c:	0f 92       	push	r0
    2b7e:	2f 93       	push	r18
    2b80:	3f 93       	push	r19
    2b82:	4f 93       	push	r20
    2b84:	5f 93       	push	r21
    2b86:	6f 93       	push	r22
    2b88:	7f 93       	push	r23
    2b8a:	8f 93       	push	r24
    2b8c:	9f 93       	push	r25
    2b8e:	af 93       	push	r26
    2b90:	bf 93       	push	r27
    2b92:	ef 93       	push	r30
    2b94:	ff 93       	push	r31
    2b96:	e0 91 75 21 	lds	r30, 0x2175
    2b9a:	f0 91 76 21 	lds	r31, 0x2176
    2b9e:	30 97       	sbiw	r30, 0x00	; 0
    2ba0:	29 f0       	breq	.+10     	; 0x2bac <__vector_65+0x3c>
    2ba2:	80 91 6b 22 	lds	r24, 0x226B
    2ba6:	90 91 6c 22 	lds	r25, 0x226C
    2baa:	19 95       	eicall
    2bac:	ff 91       	pop	r31
    2bae:	ef 91       	pop	r30
    2bb0:	bf 91       	pop	r27
    2bb2:	af 91       	pop	r26
    2bb4:	9f 91       	pop	r25
    2bb6:	8f 91       	pop	r24
    2bb8:	7f 91       	pop	r23
    2bba:	6f 91       	pop	r22
    2bbc:	5f 91       	pop	r21
    2bbe:	4f 91       	pop	r20
    2bc0:	3f 91       	pop	r19
    2bc2:	2f 91       	pop	r18
    2bc4:	0f 90       	pop	r0
    2bc6:	0b be       	out	0x3b, r0	; 59
    2bc8:	0f 90       	pop	r0
    2bca:	0f be       	out	0x3f, r0	; 63
    2bcc:	0f 90       	pop	r0
    2bce:	1f 90       	pop	r1
    2bd0:	18 95       	reti

00002bd2 <__vector_66>:

/* PORTA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT0_vect)      /* External Interrupt 0 */
    2bd2:	1f 92       	push	r1
    2bd4:	0f 92       	push	r0
    2bd6:	0f b6       	in	r0, 0x3f	; 63
    2bd8:	0f 92       	push	r0
    2bda:	11 24       	eor	r1, r1
    2bdc:	0b b6       	in	r0, 0x3b	; 59
    2bde:	0f 92       	push	r0
    2be0:	2f 93       	push	r18
    2be2:	3f 93       	push	r19
    2be4:	4f 93       	push	r20
    2be6:	5f 93       	push	r21
    2be8:	6f 93       	push	r22
    2bea:	7f 93       	push	r23
    2bec:	8f 93       	push	r24
    2bee:	9f 93       	push	r25
    2bf0:	af 93       	push	r26
    2bf2:	bf 93       	push	r27
    2bf4:	ef 93       	push	r30
    2bf6:	ff 93       	push	r31
    2bf8:	e0 91 77 21 	lds	r30, 0x2177
    2bfc:	f0 91 78 21 	lds	r31, 0x2178
    2c00:	30 97       	sbiw	r30, 0x00	; 0
    2c02:	29 f0       	breq	.+10     	; 0x2c0e <__vector_66+0x3c>
    2c04:	80 91 6d 22 	lds	r24, 0x226D
    2c08:	90 91 6e 22 	lds	r25, 0x226E
    2c0c:	19 95       	eicall
    2c0e:	ff 91       	pop	r31
    2c10:	ef 91       	pop	r30
    2c12:	bf 91       	pop	r27
    2c14:	af 91       	pop	r26
    2c16:	9f 91       	pop	r25
    2c18:	8f 91       	pop	r24
    2c1a:	7f 91       	pop	r23
    2c1c:	6f 91       	pop	r22
    2c1e:	5f 91       	pop	r21
    2c20:	4f 91       	pop	r20
    2c22:	3f 91       	pop	r19
    2c24:	2f 91       	pop	r18
    2c26:	0f 90       	pop	r0
    2c28:	0b be       	out	0x3b, r0	; 59
    2c2a:	0f 90       	pop	r0
    2c2c:	0f be       	out	0x3f, r0	; 63
    2c2e:	0f 90       	pop	r0
    2c30:	1f 90       	pop	r1
    2c32:	18 95       	reti

00002c34 <__vector_67>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT1_vect)      /* External Interrupt 1 */
    2c34:	1f 92       	push	r1
    2c36:	0f 92       	push	r0
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	0f 92       	push	r0
    2c3c:	11 24       	eor	r1, r1
    2c3e:	0b b6       	in	r0, 0x3b	; 59
    2c40:	0f 92       	push	r0
    2c42:	2f 93       	push	r18
    2c44:	3f 93       	push	r19
    2c46:	4f 93       	push	r20
    2c48:	5f 93       	push	r21
    2c4a:	6f 93       	push	r22
    2c4c:	7f 93       	push	r23
    2c4e:	8f 93       	push	r24
    2c50:	9f 93       	push	r25
    2c52:	af 93       	push	r26
    2c54:	bf 93       	push	r27
    2c56:	ef 93       	push	r30
    2c58:	ff 93       	push	r31
    2c5a:	e0 91 79 21 	lds	r30, 0x2179
    2c5e:	f0 91 7a 21 	lds	r31, 0x217A
    2c62:	30 97       	sbiw	r30, 0x00	; 0
    2c64:	29 f0       	breq	.+10     	; 0x2c70 <__vector_67+0x3c>
    2c66:	80 91 6f 22 	lds	r24, 0x226F
    2c6a:	90 91 70 22 	lds	r25, 0x2270
    2c6e:	19 95       	eicall
    2c70:	ff 91       	pop	r31
    2c72:	ef 91       	pop	r30
    2c74:	bf 91       	pop	r27
    2c76:	af 91       	pop	r26
    2c78:	9f 91       	pop	r25
    2c7a:	8f 91       	pop	r24
    2c7c:	7f 91       	pop	r23
    2c7e:	6f 91       	pop	r22
    2c80:	5f 91       	pop	r21
    2c82:	4f 91       	pop	r20
    2c84:	3f 91       	pop	r19
    2c86:	2f 91       	pop	r18
    2c88:	0f 90       	pop	r0
    2c8a:	0b be       	out	0x3b, r0	; 59
    2c8c:	0f 90       	pop	r0
    2c8e:	0f be       	out	0x3f, r0	; 63
    2c90:	0f 90       	pop	r0
    2c92:	1f 90       	pop	r1
    2c94:	18 95       	reti

00002c96 <__vector_68>:

/* ACA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC0_vect)      /* AC0 Interrupt */
    2c96:	1f 92       	push	r1
    2c98:	0f 92       	push	r0
    2c9a:	0f b6       	in	r0, 0x3f	; 63
    2c9c:	0f 92       	push	r0
    2c9e:	11 24       	eor	r1, r1
    2ca0:	0b b6       	in	r0, 0x3b	; 59
    2ca2:	0f 92       	push	r0
    2ca4:	2f 93       	push	r18
    2ca6:	3f 93       	push	r19
    2ca8:	4f 93       	push	r20
    2caa:	5f 93       	push	r21
    2cac:	6f 93       	push	r22
    2cae:	7f 93       	push	r23
    2cb0:	8f 93       	push	r24
    2cb2:	9f 93       	push	r25
    2cb4:	af 93       	push	r26
    2cb6:	bf 93       	push	r27
    2cb8:	ef 93       	push	r30
    2cba:	ff 93       	push	r31
    2cbc:	e0 91 7b 21 	lds	r30, 0x217B
    2cc0:	f0 91 7c 21 	lds	r31, 0x217C
    2cc4:	30 97       	sbiw	r30, 0x00	; 0
    2cc6:	29 f0       	breq	.+10     	; 0x2cd2 <__vector_68+0x3c>
    2cc8:	80 91 71 22 	lds	r24, 0x2271
    2ccc:	90 91 72 22 	lds	r25, 0x2272
    2cd0:	19 95       	eicall
    2cd2:	ff 91       	pop	r31
    2cd4:	ef 91       	pop	r30
    2cd6:	bf 91       	pop	r27
    2cd8:	af 91       	pop	r26
    2cda:	9f 91       	pop	r25
    2cdc:	8f 91       	pop	r24
    2cde:	7f 91       	pop	r23
    2ce0:	6f 91       	pop	r22
    2ce2:	5f 91       	pop	r21
    2ce4:	4f 91       	pop	r20
    2ce6:	3f 91       	pop	r19
    2ce8:	2f 91       	pop	r18
    2cea:	0f 90       	pop	r0
    2cec:	0b be       	out	0x3b, r0	; 59
    2cee:	0f 90       	pop	r0
    2cf0:	0f be       	out	0x3f, r0	; 63
    2cf2:	0f 90       	pop	r0
    2cf4:	1f 90       	pop	r1
    2cf6:	18 95       	reti

00002cf8 <__vector_69>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC1_vect)      /* AC1 Interrupt */
    2cf8:	1f 92       	push	r1
    2cfa:	0f 92       	push	r0
    2cfc:	0f b6       	in	r0, 0x3f	; 63
    2cfe:	0f 92       	push	r0
    2d00:	11 24       	eor	r1, r1
    2d02:	0b b6       	in	r0, 0x3b	; 59
    2d04:	0f 92       	push	r0
    2d06:	2f 93       	push	r18
    2d08:	3f 93       	push	r19
    2d0a:	4f 93       	push	r20
    2d0c:	5f 93       	push	r21
    2d0e:	6f 93       	push	r22
    2d10:	7f 93       	push	r23
    2d12:	8f 93       	push	r24
    2d14:	9f 93       	push	r25
    2d16:	af 93       	push	r26
    2d18:	bf 93       	push	r27
    2d1a:	ef 93       	push	r30
    2d1c:	ff 93       	push	r31
    2d1e:	e0 91 7d 21 	lds	r30, 0x217D
    2d22:	f0 91 7e 21 	lds	r31, 0x217E
    2d26:	30 97       	sbiw	r30, 0x00	; 0
    2d28:	29 f0       	breq	.+10     	; 0x2d34 <__vector_69+0x3c>
    2d2a:	80 91 73 22 	lds	r24, 0x2273
    2d2e:	90 91 74 22 	lds	r25, 0x2274
    2d32:	19 95       	eicall
    2d34:	ff 91       	pop	r31
    2d36:	ef 91       	pop	r30
    2d38:	bf 91       	pop	r27
    2d3a:	af 91       	pop	r26
    2d3c:	9f 91       	pop	r25
    2d3e:	8f 91       	pop	r24
    2d40:	7f 91       	pop	r23
    2d42:	6f 91       	pop	r22
    2d44:	5f 91       	pop	r21
    2d46:	4f 91       	pop	r20
    2d48:	3f 91       	pop	r19
    2d4a:	2f 91       	pop	r18
    2d4c:	0f 90       	pop	r0
    2d4e:	0b be       	out	0x3b, r0	; 59
    2d50:	0f 90       	pop	r0
    2d52:	0f be       	out	0x3f, r0	; 63
    2d54:	0f 90       	pop	r0
    2d56:	1f 90       	pop	r1
    2d58:	18 95       	reti

00002d5a <__vector_70>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_ACW_vect)      /* ACW Window Mode Interrupt */
    2d5a:	1f 92       	push	r1
    2d5c:	0f 92       	push	r0
    2d5e:	0f b6       	in	r0, 0x3f	; 63
    2d60:	0f 92       	push	r0
    2d62:	11 24       	eor	r1, r1
    2d64:	0b b6       	in	r0, 0x3b	; 59
    2d66:	0f 92       	push	r0
    2d68:	2f 93       	push	r18
    2d6a:	3f 93       	push	r19
    2d6c:	4f 93       	push	r20
    2d6e:	5f 93       	push	r21
    2d70:	6f 93       	push	r22
    2d72:	7f 93       	push	r23
    2d74:	8f 93       	push	r24
    2d76:	9f 93       	push	r25
    2d78:	af 93       	push	r26
    2d7a:	bf 93       	push	r27
    2d7c:	ef 93       	push	r30
    2d7e:	ff 93       	push	r31
    2d80:	e0 91 7f 21 	lds	r30, 0x217F
    2d84:	f0 91 80 21 	lds	r31, 0x2180
    2d88:	30 97       	sbiw	r30, 0x00	; 0
    2d8a:	29 f0       	breq	.+10     	; 0x2d96 <__vector_70+0x3c>
    2d8c:	80 91 75 22 	lds	r24, 0x2275
    2d90:	90 91 76 22 	lds	r25, 0x2276
    2d94:	19 95       	eicall
    2d96:	ff 91       	pop	r31
    2d98:	ef 91       	pop	r30
    2d9a:	bf 91       	pop	r27
    2d9c:	af 91       	pop	r26
    2d9e:	9f 91       	pop	r25
    2da0:	8f 91       	pop	r24
    2da2:	7f 91       	pop	r23
    2da4:	6f 91       	pop	r22
    2da6:	5f 91       	pop	r21
    2da8:	4f 91       	pop	r20
    2daa:	3f 91       	pop	r19
    2dac:	2f 91       	pop	r18
    2dae:	0f 90       	pop	r0
    2db0:	0b be       	out	0x3b, r0	; 59
    2db2:	0f 90       	pop	r0
    2db4:	0f be       	out	0x3f, r0	; 63
    2db6:	0f 90       	pop	r0
    2db8:	1f 90       	pop	r1
    2dba:	18 95       	reti

00002dbc <__vector_71>:

/* ADCA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH0_vect)      /* Interrupt 0 */
    2dbc:	1f 92       	push	r1
    2dbe:	0f 92       	push	r0
    2dc0:	0f b6       	in	r0, 0x3f	; 63
    2dc2:	0f 92       	push	r0
    2dc4:	11 24       	eor	r1, r1
    2dc6:	0b b6       	in	r0, 0x3b	; 59
    2dc8:	0f 92       	push	r0
    2dca:	2f 93       	push	r18
    2dcc:	3f 93       	push	r19
    2dce:	4f 93       	push	r20
    2dd0:	5f 93       	push	r21
    2dd2:	6f 93       	push	r22
    2dd4:	7f 93       	push	r23
    2dd6:	8f 93       	push	r24
    2dd8:	9f 93       	push	r25
    2dda:	af 93       	push	r26
    2ddc:	bf 93       	push	r27
    2dde:	ef 93       	push	r30
    2de0:	ff 93       	push	r31
    2de2:	e0 91 81 21 	lds	r30, 0x2181
    2de6:	f0 91 82 21 	lds	r31, 0x2182
    2dea:	30 97       	sbiw	r30, 0x00	; 0
    2dec:	29 f0       	breq	.+10     	; 0x2df8 <__vector_71+0x3c>
    2dee:	80 91 77 22 	lds	r24, 0x2277
    2df2:	90 91 78 22 	lds	r25, 0x2278
    2df6:	19 95       	eicall
    2df8:	ff 91       	pop	r31
    2dfa:	ef 91       	pop	r30
    2dfc:	bf 91       	pop	r27
    2dfe:	af 91       	pop	r26
    2e00:	9f 91       	pop	r25
    2e02:	8f 91       	pop	r24
    2e04:	7f 91       	pop	r23
    2e06:	6f 91       	pop	r22
    2e08:	5f 91       	pop	r21
    2e0a:	4f 91       	pop	r20
    2e0c:	3f 91       	pop	r19
    2e0e:	2f 91       	pop	r18
    2e10:	0f 90       	pop	r0
    2e12:	0b be       	out	0x3b, r0	; 59
    2e14:	0f 90       	pop	r0
    2e16:	0f be       	out	0x3f, r0	; 63
    2e18:	0f 90       	pop	r0
    2e1a:	1f 90       	pop	r1
    2e1c:	18 95       	reti

00002e1e <__vector_72>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH1_vect)      /* Interrupt 1 */
    2e1e:	1f 92       	push	r1
    2e20:	0f 92       	push	r0
    2e22:	0f b6       	in	r0, 0x3f	; 63
    2e24:	0f 92       	push	r0
    2e26:	11 24       	eor	r1, r1
    2e28:	0b b6       	in	r0, 0x3b	; 59
    2e2a:	0f 92       	push	r0
    2e2c:	2f 93       	push	r18
    2e2e:	3f 93       	push	r19
    2e30:	4f 93       	push	r20
    2e32:	5f 93       	push	r21
    2e34:	6f 93       	push	r22
    2e36:	7f 93       	push	r23
    2e38:	8f 93       	push	r24
    2e3a:	9f 93       	push	r25
    2e3c:	af 93       	push	r26
    2e3e:	bf 93       	push	r27
    2e40:	ef 93       	push	r30
    2e42:	ff 93       	push	r31
    2e44:	e0 91 83 21 	lds	r30, 0x2183
    2e48:	f0 91 84 21 	lds	r31, 0x2184
    2e4c:	30 97       	sbiw	r30, 0x00	; 0
    2e4e:	29 f0       	breq	.+10     	; 0x2e5a <__vector_72+0x3c>
    2e50:	80 91 79 22 	lds	r24, 0x2279
    2e54:	90 91 7a 22 	lds	r25, 0x227A
    2e58:	19 95       	eicall
    2e5a:	ff 91       	pop	r31
    2e5c:	ef 91       	pop	r30
    2e5e:	bf 91       	pop	r27
    2e60:	af 91       	pop	r26
    2e62:	9f 91       	pop	r25
    2e64:	8f 91       	pop	r24
    2e66:	7f 91       	pop	r23
    2e68:	6f 91       	pop	r22
    2e6a:	5f 91       	pop	r21
    2e6c:	4f 91       	pop	r20
    2e6e:	3f 91       	pop	r19
    2e70:	2f 91       	pop	r18
    2e72:	0f 90       	pop	r0
    2e74:	0b be       	out	0x3b, r0	; 59
    2e76:	0f 90       	pop	r0
    2e78:	0f be       	out	0x3f, r0	; 63
    2e7a:	0f 90       	pop	r0
    2e7c:	1f 90       	pop	r1
    2e7e:	18 95       	reti

00002e80 <__vector_73>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH2_vect)      /* Interrupt 2 */
    2e80:	1f 92       	push	r1
    2e82:	0f 92       	push	r0
    2e84:	0f b6       	in	r0, 0x3f	; 63
    2e86:	0f 92       	push	r0
    2e88:	11 24       	eor	r1, r1
    2e8a:	0b b6       	in	r0, 0x3b	; 59
    2e8c:	0f 92       	push	r0
    2e8e:	2f 93       	push	r18
    2e90:	3f 93       	push	r19
    2e92:	4f 93       	push	r20
    2e94:	5f 93       	push	r21
    2e96:	6f 93       	push	r22
    2e98:	7f 93       	push	r23
    2e9a:	8f 93       	push	r24
    2e9c:	9f 93       	push	r25
    2e9e:	af 93       	push	r26
    2ea0:	bf 93       	push	r27
    2ea2:	ef 93       	push	r30
    2ea4:	ff 93       	push	r31
    2ea6:	e0 91 85 21 	lds	r30, 0x2185
    2eaa:	f0 91 86 21 	lds	r31, 0x2186
    2eae:	30 97       	sbiw	r30, 0x00	; 0
    2eb0:	29 f0       	breq	.+10     	; 0x2ebc <__vector_73+0x3c>
    2eb2:	80 91 7b 22 	lds	r24, 0x227B
    2eb6:	90 91 7c 22 	lds	r25, 0x227C
    2eba:	19 95       	eicall
    2ebc:	ff 91       	pop	r31
    2ebe:	ef 91       	pop	r30
    2ec0:	bf 91       	pop	r27
    2ec2:	af 91       	pop	r26
    2ec4:	9f 91       	pop	r25
    2ec6:	8f 91       	pop	r24
    2ec8:	7f 91       	pop	r23
    2eca:	6f 91       	pop	r22
    2ecc:	5f 91       	pop	r21
    2ece:	4f 91       	pop	r20
    2ed0:	3f 91       	pop	r19
    2ed2:	2f 91       	pop	r18
    2ed4:	0f 90       	pop	r0
    2ed6:	0b be       	out	0x3b, r0	; 59
    2ed8:	0f 90       	pop	r0
    2eda:	0f be       	out	0x3f, r0	; 63
    2edc:	0f 90       	pop	r0
    2ede:	1f 90       	pop	r1
    2ee0:	18 95       	reti

00002ee2 <__vector_74>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH3_vect)      /* Interrupt 3 */
    2ee2:	1f 92       	push	r1
    2ee4:	0f 92       	push	r0
    2ee6:	0f b6       	in	r0, 0x3f	; 63
    2ee8:	0f 92       	push	r0
    2eea:	11 24       	eor	r1, r1
    2eec:	0b b6       	in	r0, 0x3b	; 59
    2eee:	0f 92       	push	r0
    2ef0:	2f 93       	push	r18
    2ef2:	3f 93       	push	r19
    2ef4:	4f 93       	push	r20
    2ef6:	5f 93       	push	r21
    2ef8:	6f 93       	push	r22
    2efa:	7f 93       	push	r23
    2efc:	8f 93       	push	r24
    2efe:	9f 93       	push	r25
    2f00:	af 93       	push	r26
    2f02:	bf 93       	push	r27
    2f04:	ef 93       	push	r30
    2f06:	ff 93       	push	r31
    2f08:	e0 91 87 21 	lds	r30, 0x2187
    2f0c:	f0 91 88 21 	lds	r31, 0x2188
    2f10:	30 97       	sbiw	r30, 0x00	; 0
    2f12:	29 f0       	breq	.+10     	; 0x2f1e <__vector_74+0x3c>
    2f14:	80 91 7d 22 	lds	r24, 0x227D
    2f18:	90 91 7e 22 	lds	r25, 0x227E
    2f1c:	19 95       	eicall
    2f1e:	ff 91       	pop	r31
    2f20:	ef 91       	pop	r30
    2f22:	bf 91       	pop	r27
    2f24:	af 91       	pop	r26
    2f26:	9f 91       	pop	r25
    2f28:	8f 91       	pop	r24
    2f2a:	7f 91       	pop	r23
    2f2c:	6f 91       	pop	r22
    2f2e:	5f 91       	pop	r21
    2f30:	4f 91       	pop	r20
    2f32:	3f 91       	pop	r19
    2f34:	2f 91       	pop	r18
    2f36:	0f 90       	pop	r0
    2f38:	0b be       	out	0x3b, r0	; 59
    2f3a:	0f 90       	pop	r0
    2f3c:	0f be       	out	0x3f, r0	; 63
    2f3e:	0f 90       	pop	r0
    2f40:	1f 90       	pop	r1
    2f42:	18 95       	reti

00002f44 <__vector_77>:

/* TCD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_OVF_vect)      /* Overflow Interrupt */
    2f44:	1f 92       	push	r1
    2f46:	0f 92       	push	r0
    2f48:	0f b6       	in	r0, 0x3f	; 63
    2f4a:	0f 92       	push	r0
    2f4c:	11 24       	eor	r1, r1
    2f4e:	0b b6       	in	r0, 0x3b	; 59
    2f50:	0f 92       	push	r0
    2f52:	2f 93       	push	r18
    2f54:	3f 93       	push	r19
    2f56:	4f 93       	push	r20
    2f58:	5f 93       	push	r21
    2f5a:	6f 93       	push	r22
    2f5c:	7f 93       	push	r23
    2f5e:	8f 93       	push	r24
    2f60:	9f 93       	push	r25
    2f62:	af 93       	push	r26
    2f64:	bf 93       	push	r27
    2f66:	ef 93       	push	r30
    2f68:	ff 93       	push	r31
    2f6a:	e0 91 8d 21 	lds	r30, 0x218D
    2f6e:	f0 91 8e 21 	lds	r31, 0x218E
    2f72:	30 97       	sbiw	r30, 0x00	; 0
    2f74:	29 f0       	breq	.+10     	; 0x2f80 <__vector_77+0x3c>
    2f76:	80 91 83 22 	lds	r24, 0x2283
    2f7a:	90 91 84 22 	lds	r25, 0x2284
    2f7e:	19 95       	eicall
    2f80:	ff 91       	pop	r31
    2f82:	ef 91       	pop	r30
    2f84:	bf 91       	pop	r27
    2f86:	af 91       	pop	r26
    2f88:	9f 91       	pop	r25
    2f8a:	8f 91       	pop	r24
    2f8c:	7f 91       	pop	r23
    2f8e:	6f 91       	pop	r22
    2f90:	5f 91       	pop	r21
    2f92:	4f 91       	pop	r20
    2f94:	3f 91       	pop	r19
    2f96:	2f 91       	pop	r18
    2f98:	0f 90       	pop	r0
    2f9a:	0b be       	out	0x3b, r0	; 59
    2f9c:	0f 90       	pop	r0
    2f9e:	0f be       	out	0x3f, r0	; 63
    2fa0:	0f 90       	pop	r0
    2fa2:	1f 90       	pop	r1
    2fa4:	18 95       	reti

00002fa6 <__vector_78>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_ERR_vect)      /* Error Interrupt */
    2fa6:	1f 92       	push	r1
    2fa8:	0f 92       	push	r0
    2faa:	0f b6       	in	r0, 0x3f	; 63
    2fac:	0f 92       	push	r0
    2fae:	11 24       	eor	r1, r1
    2fb0:	0b b6       	in	r0, 0x3b	; 59
    2fb2:	0f 92       	push	r0
    2fb4:	2f 93       	push	r18
    2fb6:	3f 93       	push	r19
    2fb8:	4f 93       	push	r20
    2fba:	5f 93       	push	r21
    2fbc:	6f 93       	push	r22
    2fbe:	7f 93       	push	r23
    2fc0:	8f 93       	push	r24
    2fc2:	9f 93       	push	r25
    2fc4:	af 93       	push	r26
    2fc6:	bf 93       	push	r27
    2fc8:	ef 93       	push	r30
    2fca:	ff 93       	push	r31
    2fcc:	e0 91 8f 21 	lds	r30, 0x218F
    2fd0:	f0 91 90 21 	lds	r31, 0x2190
    2fd4:	30 97       	sbiw	r30, 0x00	; 0
    2fd6:	29 f0       	breq	.+10     	; 0x2fe2 <__vector_78+0x3c>
    2fd8:	80 91 85 22 	lds	r24, 0x2285
    2fdc:	90 91 86 22 	lds	r25, 0x2286
    2fe0:	19 95       	eicall
    2fe2:	ff 91       	pop	r31
    2fe4:	ef 91       	pop	r30
    2fe6:	bf 91       	pop	r27
    2fe8:	af 91       	pop	r26
    2fea:	9f 91       	pop	r25
    2fec:	8f 91       	pop	r24
    2fee:	7f 91       	pop	r23
    2ff0:	6f 91       	pop	r22
    2ff2:	5f 91       	pop	r21
    2ff4:	4f 91       	pop	r20
    2ff6:	3f 91       	pop	r19
    2ff8:	2f 91       	pop	r18
    2ffa:	0f 90       	pop	r0
    2ffc:	0b be       	out	0x3b, r0	; 59
    2ffe:	0f 90       	pop	r0
    3000:	0f be       	out	0x3f, r0	; 63
    3002:	0f 90       	pop	r0
    3004:	1f 90       	pop	r1
    3006:	18 95       	reti

00003008 <__vector_79>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCA_vect)      /* Compare or Capture A Interrupt */
    3008:	1f 92       	push	r1
    300a:	0f 92       	push	r0
    300c:	0f b6       	in	r0, 0x3f	; 63
    300e:	0f 92       	push	r0
    3010:	11 24       	eor	r1, r1
    3012:	0b b6       	in	r0, 0x3b	; 59
    3014:	0f 92       	push	r0
    3016:	2f 93       	push	r18
    3018:	3f 93       	push	r19
    301a:	4f 93       	push	r20
    301c:	5f 93       	push	r21
    301e:	6f 93       	push	r22
    3020:	7f 93       	push	r23
    3022:	8f 93       	push	r24
    3024:	9f 93       	push	r25
    3026:	af 93       	push	r26
    3028:	bf 93       	push	r27
    302a:	ef 93       	push	r30
    302c:	ff 93       	push	r31
    302e:	e0 91 91 21 	lds	r30, 0x2191
    3032:	f0 91 92 21 	lds	r31, 0x2192
    3036:	30 97       	sbiw	r30, 0x00	; 0
    3038:	29 f0       	breq	.+10     	; 0x3044 <__vector_79+0x3c>
    303a:	80 91 87 22 	lds	r24, 0x2287
    303e:	90 91 88 22 	lds	r25, 0x2288
    3042:	19 95       	eicall
    3044:	ff 91       	pop	r31
    3046:	ef 91       	pop	r30
    3048:	bf 91       	pop	r27
    304a:	af 91       	pop	r26
    304c:	9f 91       	pop	r25
    304e:	8f 91       	pop	r24
    3050:	7f 91       	pop	r23
    3052:	6f 91       	pop	r22
    3054:	5f 91       	pop	r21
    3056:	4f 91       	pop	r20
    3058:	3f 91       	pop	r19
    305a:	2f 91       	pop	r18
    305c:	0f 90       	pop	r0
    305e:	0b be       	out	0x3b, r0	; 59
    3060:	0f 90       	pop	r0
    3062:	0f be       	out	0x3f, r0	; 63
    3064:	0f 90       	pop	r0
    3066:	1f 90       	pop	r1
    3068:	18 95       	reti

0000306a <__vector_80>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCB_vect)      /* Compare or Capture B Interrupt */
    306a:	1f 92       	push	r1
    306c:	0f 92       	push	r0
    306e:	0f b6       	in	r0, 0x3f	; 63
    3070:	0f 92       	push	r0
    3072:	11 24       	eor	r1, r1
    3074:	0b b6       	in	r0, 0x3b	; 59
    3076:	0f 92       	push	r0
    3078:	2f 93       	push	r18
    307a:	3f 93       	push	r19
    307c:	4f 93       	push	r20
    307e:	5f 93       	push	r21
    3080:	6f 93       	push	r22
    3082:	7f 93       	push	r23
    3084:	8f 93       	push	r24
    3086:	9f 93       	push	r25
    3088:	af 93       	push	r26
    308a:	bf 93       	push	r27
    308c:	ef 93       	push	r30
    308e:	ff 93       	push	r31
    3090:	e0 91 93 21 	lds	r30, 0x2193
    3094:	f0 91 94 21 	lds	r31, 0x2194
    3098:	30 97       	sbiw	r30, 0x00	; 0
    309a:	29 f0       	breq	.+10     	; 0x30a6 <__vector_80+0x3c>
    309c:	80 91 89 22 	lds	r24, 0x2289
    30a0:	90 91 8a 22 	lds	r25, 0x228A
    30a4:	19 95       	eicall
    30a6:	ff 91       	pop	r31
    30a8:	ef 91       	pop	r30
    30aa:	bf 91       	pop	r27
    30ac:	af 91       	pop	r26
    30ae:	9f 91       	pop	r25
    30b0:	8f 91       	pop	r24
    30b2:	7f 91       	pop	r23
    30b4:	6f 91       	pop	r22
    30b6:	5f 91       	pop	r21
    30b8:	4f 91       	pop	r20
    30ba:	3f 91       	pop	r19
    30bc:	2f 91       	pop	r18
    30be:	0f 90       	pop	r0
    30c0:	0b be       	out	0x3b, r0	; 59
    30c2:	0f 90       	pop	r0
    30c4:	0f be       	out	0x3f, r0	; 63
    30c6:	0f 90       	pop	r0
    30c8:	1f 90       	pop	r1
    30ca:	18 95       	reti

000030cc <__vector_81>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCC_vect)      /* Compare or Capture C Interrupt */
    30cc:	1f 92       	push	r1
    30ce:	0f 92       	push	r0
    30d0:	0f b6       	in	r0, 0x3f	; 63
    30d2:	0f 92       	push	r0
    30d4:	11 24       	eor	r1, r1
    30d6:	0b b6       	in	r0, 0x3b	; 59
    30d8:	0f 92       	push	r0
    30da:	2f 93       	push	r18
    30dc:	3f 93       	push	r19
    30de:	4f 93       	push	r20
    30e0:	5f 93       	push	r21
    30e2:	6f 93       	push	r22
    30e4:	7f 93       	push	r23
    30e6:	8f 93       	push	r24
    30e8:	9f 93       	push	r25
    30ea:	af 93       	push	r26
    30ec:	bf 93       	push	r27
    30ee:	ef 93       	push	r30
    30f0:	ff 93       	push	r31
    30f2:	e0 91 95 21 	lds	r30, 0x2195
    30f6:	f0 91 96 21 	lds	r31, 0x2196
    30fa:	30 97       	sbiw	r30, 0x00	; 0
    30fc:	29 f0       	breq	.+10     	; 0x3108 <__vector_81+0x3c>
    30fe:	80 91 8b 22 	lds	r24, 0x228B
    3102:	90 91 8c 22 	lds	r25, 0x228C
    3106:	19 95       	eicall
    3108:	ff 91       	pop	r31
    310a:	ef 91       	pop	r30
    310c:	bf 91       	pop	r27
    310e:	af 91       	pop	r26
    3110:	9f 91       	pop	r25
    3112:	8f 91       	pop	r24
    3114:	7f 91       	pop	r23
    3116:	6f 91       	pop	r22
    3118:	5f 91       	pop	r21
    311a:	4f 91       	pop	r20
    311c:	3f 91       	pop	r19
    311e:	2f 91       	pop	r18
    3120:	0f 90       	pop	r0
    3122:	0b be       	out	0x3b, r0	; 59
    3124:	0f 90       	pop	r0
    3126:	0f be       	out	0x3f, r0	; 63
    3128:	0f 90       	pop	r0
    312a:	1f 90       	pop	r1
    312c:	18 95       	reti

0000312e <__vector_82>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCD_vect)      /* Compare or Capture D Interrupt */
    312e:	1f 92       	push	r1
    3130:	0f 92       	push	r0
    3132:	0f b6       	in	r0, 0x3f	; 63
    3134:	0f 92       	push	r0
    3136:	11 24       	eor	r1, r1
    3138:	0b b6       	in	r0, 0x3b	; 59
    313a:	0f 92       	push	r0
    313c:	2f 93       	push	r18
    313e:	3f 93       	push	r19
    3140:	4f 93       	push	r20
    3142:	5f 93       	push	r21
    3144:	6f 93       	push	r22
    3146:	7f 93       	push	r23
    3148:	8f 93       	push	r24
    314a:	9f 93       	push	r25
    314c:	af 93       	push	r26
    314e:	bf 93       	push	r27
    3150:	ef 93       	push	r30
    3152:	ff 93       	push	r31
    3154:	e0 91 97 21 	lds	r30, 0x2197
    3158:	f0 91 98 21 	lds	r31, 0x2198
    315c:	30 97       	sbiw	r30, 0x00	; 0
    315e:	29 f0       	breq	.+10     	; 0x316a <__vector_82+0x3c>
    3160:	80 91 8d 22 	lds	r24, 0x228D
    3164:	90 91 8e 22 	lds	r25, 0x228E
    3168:	19 95       	eicall
    316a:	ff 91       	pop	r31
    316c:	ef 91       	pop	r30
    316e:	bf 91       	pop	r27
    3170:	af 91       	pop	r26
    3172:	9f 91       	pop	r25
    3174:	8f 91       	pop	r24
    3176:	7f 91       	pop	r23
    3178:	6f 91       	pop	r22
    317a:	5f 91       	pop	r21
    317c:	4f 91       	pop	r20
    317e:	3f 91       	pop	r19
    3180:	2f 91       	pop	r18
    3182:	0f 90       	pop	r0
    3184:	0b be       	out	0x3b, r0	; 59
    3186:	0f 90       	pop	r0
    3188:	0f be       	out	0x3f, r0	; 63
    318a:	0f 90       	pop	r0
    318c:	1f 90       	pop	r1
    318e:	18 95       	reti

00003190 <__vector_83>:

/* TCD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_OVF_vect)      /* Overflow Interrupt */
    3190:	1f 92       	push	r1
    3192:	0f 92       	push	r0
    3194:	0f b6       	in	r0, 0x3f	; 63
    3196:	0f 92       	push	r0
    3198:	11 24       	eor	r1, r1
    319a:	0b b6       	in	r0, 0x3b	; 59
    319c:	0f 92       	push	r0
    319e:	2f 93       	push	r18
    31a0:	3f 93       	push	r19
    31a2:	4f 93       	push	r20
    31a4:	5f 93       	push	r21
    31a6:	6f 93       	push	r22
    31a8:	7f 93       	push	r23
    31aa:	8f 93       	push	r24
    31ac:	9f 93       	push	r25
    31ae:	af 93       	push	r26
    31b0:	bf 93       	push	r27
    31b2:	ef 93       	push	r30
    31b4:	ff 93       	push	r31
    31b6:	e0 91 99 21 	lds	r30, 0x2199
    31ba:	f0 91 9a 21 	lds	r31, 0x219A
    31be:	30 97       	sbiw	r30, 0x00	; 0
    31c0:	29 f0       	breq	.+10     	; 0x31cc <__vector_83+0x3c>
    31c2:	80 91 8f 22 	lds	r24, 0x228F
    31c6:	90 91 90 22 	lds	r25, 0x2290
    31ca:	19 95       	eicall
    31cc:	ff 91       	pop	r31
    31ce:	ef 91       	pop	r30
    31d0:	bf 91       	pop	r27
    31d2:	af 91       	pop	r26
    31d4:	9f 91       	pop	r25
    31d6:	8f 91       	pop	r24
    31d8:	7f 91       	pop	r23
    31da:	6f 91       	pop	r22
    31dc:	5f 91       	pop	r21
    31de:	4f 91       	pop	r20
    31e0:	3f 91       	pop	r19
    31e2:	2f 91       	pop	r18
    31e4:	0f 90       	pop	r0
    31e6:	0b be       	out	0x3b, r0	; 59
    31e8:	0f 90       	pop	r0
    31ea:	0f be       	out	0x3f, r0	; 63
    31ec:	0f 90       	pop	r0
    31ee:	1f 90       	pop	r1
    31f0:	18 95       	reti

000031f2 <__vector_84>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_ERR_vect)      /* Error Interrupt */
    31f2:	1f 92       	push	r1
    31f4:	0f 92       	push	r0
    31f6:	0f b6       	in	r0, 0x3f	; 63
    31f8:	0f 92       	push	r0
    31fa:	11 24       	eor	r1, r1
    31fc:	0b b6       	in	r0, 0x3b	; 59
    31fe:	0f 92       	push	r0
    3200:	2f 93       	push	r18
    3202:	3f 93       	push	r19
    3204:	4f 93       	push	r20
    3206:	5f 93       	push	r21
    3208:	6f 93       	push	r22
    320a:	7f 93       	push	r23
    320c:	8f 93       	push	r24
    320e:	9f 93       	push	r25
    3210:	af 93       	push	r26
    3212:	bf 93       	push	r27
    3214:	ef 93       	push	r30
    3216:	ff 93       	push	r31
    3218:	e0 91 9b 21 	lds	r30, 0x219B
    321c:	f0 91 9c 21 	lds	r31, 0x219C
    3220:	30 97       	sbiw	r30, 0x00	; 0
    3222:	29 f0       	breq	.+10     	; 0x322e <__vector_84+0x3c>
    3224:	80 91 91 22 	lds	r24, 0x2291
    3228:	90 91 92 22 	lds	r25, 0x2292
    322c:	19 95       	eicall
    322e:	ff 91       	pop	r31
    3230:	ef 91       	pop	r30
    3232:	bf 91       	pop	r27
    3234:	af 91       	pop	r26
    3236:	9f 91       	pop	r25
    3238:	8f 91       	pop	r24
    323a:	7f 91       	pop	r23
    323c:	6f 91       	pop	r22
    323e:	5f 91       	pop	r21
    3240:	4f 91       	pop	r20
    3242:	3f 91       	pop	r19
    3244:	2f 91       	pop	r18
    3246:	0f 90       	pop	r0
    3248:	0b be       	out	0x3b, r0	; 59
    324a:	0f 90       	pop	r0
    324c:	0f be       	out	0x3f, r0	; 63
    324e:	0f 90       	pop	r0
    3250:	1f 90       	pop	r1
    3252:	18 95       	reti

00003254 <__vector_85>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCA_vect)      /* Compare or Capture A Interrupt */
    3254:	1f 92       	push	r1
    3256:	0f 92       	push	r0
    3258:	0f b6       	in	r0, 0x3f	; 63
    325a:	0f 92       	push	r0
    325c:	11 24       	eor	r1, r1
    325e:	0b b6       	in	r0, 0x3b	; 59
    3260:	0f 92       	push	r0
    3262:	2f 93       	push	r18
    3264:	3f 93       	push	r19
    3266:	4f 93       	push	r20
    3268:	5f 93       	push	r21
    326a:	6f 93       	push	r22
    326c:	7f 93       	push	r23
    326e:	8f 93       	push	r24
    3270:	9f 93       	push	r25
    3272:	af 93       	push	r26
    3274:	bf 93       	push	r27
    3276:	ef 93       	push	r30
    3278:	ff 93       	push	r31
    327a:	e0 91 9d 21 	lds	r30, 0x219D
    327e:	f0 91 9e 21 	lds	r31, 0x219E
    3282:	30 97       	sbiw	r30, 0x00	; 0
    3284:	29 f0       	breq	.+10     	; 0x3290 <__vector_85+0x3c>
    3286:	80 91 93 22 	lds	r24, 0x2293
    328a:	90 91 94 22 	lds	r25, 0x2294
    328e:	19 95       	eicall
    3290:	ff 91       	pop	r31
    3292:	ef 91       	pop	r30
    3294:	bf 91       	pop	r27
    3296:	af 91       	pop	r26
    3298:	9f 91       	pop	r25
    329a:	8f 91       	pop	r24
    329c:	7f 91       	pop	r23
    329e:	6f 91       	pop	r22
    32a0:	5f 91       	pop	r21
    32a2:	4f 91       	pop	r20
    32a4:	3f 91       	pop	r19
    32a6:	2f 91       	pop	r18
    32a8:	0f 90       	pop	r0
    32aa:	0b be       	out	0x3b, r0	; 59
    32ac:	0f 90       	pop	r0
    32ae:	0f be       	out	0x3f, r0	; 63
    32b0:	0f 90       	pop	r0
    32b2:	1f 90       	pop	r1
    32b4:	18 95       	reti

000032b6 <__vector_86>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCB_vect)      /* Compare or Capture B Interrupt */
    32b6:	1f 92       	push	r1
    32b8:	0f 92       	push	r0
    32ba:	0f b6       	in	r0, 0x3f	; 63
    32bc:	0f 92       	push	r0
    32be:	11 24       	eor	r1, r1
    32c0:	0b b6       	in	r0, 0x3b	; 59
    32c2:	0f 92       	push	r0
    32c4:	2f 93       	push	r18
    32c6:	3f 93       	push	r19
    32c8:	4f 93       	push	r20
    32ca:	5f 93       	push	r21
    32cc:	6f 93       	push	r22
    32ce:	7f 93       	push	r23
    32d0:	8f 93       	push	r24
    32d2:	9f 93       	push	r25
    32d4:	af 93       	push	r26
    32d6:	bf 93       	push	r27
    32d8:	ef 93       	push	r30
    32da:	ff 93       	push	r31
    32dc:	e0 91 9f 21 	lds	r30, 0x219F
    32e0:	f0 91 a0 21 	lds	r31, 0x21A0
    32e4:	30 97       	sbiw	r30, 0x00	; 0
    32e6:	29 f0       	breq	.+10     	; 0x32f2 <__vector_86+0x3c>
    32e8:	80 91 95 22 	lds	r24, 0x2295
    32ec:	90 91 96 22 	lds	r25, 0x2296
    32f0:	19 95       	eicall
    32f2:	ff 91       	pop	r31
    32f4:	ef 91       	pop	r30
    32f6:	bf 91       	pop	r27
    32f8:	af 91       	pop	r26
    32fa:	9f 91       	pop	r25
    32fc:	8f 91       	pop	r24
    32fe:	7f 91       	pop	r23
    3300:	6f 91       	pop	r22
    3302:	5f 91       	pop	r21
    3304:	4f 91       	pop	r20
    3306:	3f 91       	pop	r19
    3308:	2f 91       	pop	r18
    330a:	0f 90       	pop	r0
    330c:	0b be       	out	0x3b, r0	; 59
    330e:	0f 90       	pop	r0
    3310:	0f be       	out	0x3f, r0	; 63
    3312:	0f 90       	pop	r0
    3314:	1f 90       	pop	r1
    3316:	18 95       	reti

00003318 <__vector_87>:

/* SPID interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPID_INT_vect)      /* SPI Interrupt */
    3318:	1f 92       	push	r1
    331a:	0f 92       	push	r0
    331c:	0f b6       	in	r0, 0x3f	; 63
    331e:	0f 92       	push	r0
    3320:	11 24       	eor	r1, r1
    3322:	0b b6       	in	r0, 0x3b	; 59
    3324:	0f 92       	push	r0
    3326:	2f 93       	push	r18
    3328:	3f 93       	push	r19
    332a:	4f 93       	push	r20
    332c:	5f 93       	push	r21
    332e:	6f 93       	push	r22
    3330:	7f 93       	push	r23
    3332:	8f 93       	push	r24
    3334:	9f 93       	push	r25
    3336:	af 93       	push	r26
    3338:	bf 93       	push	r27
    333a:	ef 93       	push	r30
    333c:	ff 93       	push	r31
    333e:	e0 91 a1 21 	lds	r30, 0x21A1
    3342:	f0 91 a2 21 	lds	r31, 0x21A2
    3346:	30 97       	sbiw	r30, 0x00	; 0
    3348:	29 f0       	breq	.+10     	; 0x3354 <__vector_87+0x3c>
    334a:	80 91 97 22 	lds	r24, 0x2297
    334e:	90 91 98 22 	lds	r25, 0x2298
    3352:	19 95       	eicall
    3354:	ff 91       	pop	r31
    3356:	ef 91       	pop	r30
    3358:	bf 91       	pop	r27
    335a:	af 91       	pop	r26
    335c:	9f 91       	pop	r25
    335e:	8f 91       	pop	r24
    3360:	7f 91       	pop	r23
    3362:	6f 91       	pop	r22
    3364:	5f 91       	pop	r21
    3366:	4f 91       	pop	r20
    3368:	3f 91       	pop	r19
    336a:	2f 91       	pop	r18
    336c:	0f 90       	pop	r0
    336e:	0b be       	out	0x3b, r0	; 59
    3370:	0f 90       	pop	r0
    3372:	0f be       	out	0x3f, r0	; 63
    3374:	0f 90       	pop	r0
    3376:	1f 90       	pop	r1
    3378:	18 95       	reti

0000337a <__vector_88>:

/* USARTD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_RXC_vect)      /* Reception Complete Interrupt */
    337a:	1f 92       	push	r1
    337c:	0f 92       	push	r0
    337e:	0f b6       	in	r0, 0x3f	; 63
    3380:	0f 92       	push	r0
    3382:	11 24       	eor	r1, r1
    3384:	0b b6       	in	r0, 0x3b	; 59
    3386:	0f 92       	push	r0
    3388:	2f 93       	push	r18
    338a:	3f 93       	push	r19
    338c:	4f 93       	push	r20
    338e:	5f 93       	push	r21
    3390:	6f 93       	push	r22
    3392:	7f 93       	push	r23
    3394:	8f 93       	push	r24
    3396:	9f 93       	push	r25
    3398:	af 93       	push	r26
    339a:	bf 93       	push	r27
    339c:	ef 93       	push	r30
    339e:	ff 93       	push	r31
    33a0:	e0 91 a3 21 	lds	r30, 0x21A3
    33a4:	f0 91 a4 21 	lds	r31, 0x21A4
    33a8:	30 97       	sbiw	r30, 0x00	; 0
    33aa:	29 f0       	breq	.+10     	; 0x33b6 <__vector_88+0x3c>
    33ac:	80 91 99 22 	lds	r24, 0x2299
    33b0:	90 91 9a 22 	lds	r25, 0x229A
    33b4:	19 95       	eicall
    33b6:	ff 91       	pop	r31
    33b8:	ef 91       	pop	r30
    33ba:	bf 91       	pop	r27
    33bc:	af 91       	pop	r26
    33be:	9f 91       	pop	r25
    33c0:	8f 91       	pop	r24
    33c2:	7f 91       	pop	r23
    33c4:	6f 91       	pop	r22
    33c6:	5f 91       	pop	r21
    33c8:	4f 91       	pop	r20
    33ca:	3f 91       	pop	r19
    33cc:	2f 91       	pop	r18
    33ce:	0f 90       	pop	r0
    33d0:	0b be       	out	0x3b, r0	; 59
    33d2:	0f 90       	pop	r0
    33d4:	0f be       	out	0x3f, r0	; 63
    33d6:	0f 90       	pop	r0
    33d8:	1f 90       	pop	r1
    33da:	18 95       	reti

000033dc <__vector_89>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_DRE_vect)      /* Data Register Empty Interrupt */
    33dc:	1f 92       	push	r1
    33de:	0f 92       	push	r0
    33e0:	0f b6       	in	r0, 0x3f	; 63
    33e2:	0f 92       	push	r0
    33e4:	11 24       	eor	r1, r1
    33e6:	0b b6       	in	r0, 0x3b	; 59
    33e8:	0f 92       	push	r0
    33ea:	2f 93       	push	r18
    33ec:	3f 93       	push	r19
    33ee:	4f 93       	push	r20
    33f0:	5f 93       	push	r21
    33f2:	6f 93       	push	r22
    33f4:	7f 93       	push	r23
    33f6:	8f 93       	push	r24
    33f8:	9f 93       	push	r25
    33fa:	af 93       	push	r26
    33fc:	bf 93       	push	r27
    33fe:	ef 93       	push	r30
    3400:	ff 93       	push	r31
    3402:	e0 91 a5 21 	lds	r30, 0x21A5
    3406:	f0 91 a6 21 	lds	r31, 0x21A6
    340a:	30 97       	sbiw	r30, 0x00	; 0
    340c:	29 f0       	breq	.+10     	; 0x3418 <__vector_89+0x3c>
    340e:	80 91 9b 22 	lds	r24, 0x229B
    3412:	90 91 9c 22 	lds	r25, 0x229C
    3416:	19 95       	eicall
    3418:	ff 91       	pop	r31
    341a:	ef 91       	pop	r30
    341c:	bf 91       	pop	r27
    341e:	af 91       	pop	r26
    3420:	9f 91       	pop	r25
    3422:	8f 91       	pop	r24
    3424:	7f 91       	pop	r23
    3426:	6f 91       	pop	r22
    3428:	5f 91       	pop	r21
    342a:	4f 91       	pop	r20
    342c:	3f 91       	pop	r19
    342e:	2f 91       	pop	r18
    3430:	0f 90       	pop	r0
    3432:	0b be       	out	0x3b, r0	; 59
    3434:	0f 90       	pop	r0
    3436:	0f be       	out	0x3f, r0	; 63
    3438:	0f 90       	pop	r0
    343a:	1f 90       	pop	r1
    343c:	18 95       	reti

0000343e <__vector_90>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_TXC_vect)      /* Transmission Complete Interrupt */
    343e:	1f 92       	push	r1
    3440:	0f 92       	push	r0
    3442:	0f b6       	in	r0, 0x3f	; 63
    3444:	0f 92       	push	r0
    3446:	11 24       	eor	r1, r1
    3448:	0b b6       	in	r0, 0x3b	; 59
    344a:	0f 92       	push	r0
    344c:	2f 93       	push	r18
    344e:	3f 93       	push	r19
    3450:	4f 93       	push	r20
    3452:	5f 93       	push	r21
    3454:	6f 93       	push	r22
    3456:	7f 93       	push	r23
    3458:	8f 93       	push	r24
    345a:	9f 93       	push	r25
    345c:	af 93       	push	r26
    345e:	bf 93       	push	r27
    3460:	ef 93       	push	r30
    3462:	ff 93       	push	r31
    3464:	e0 91 a7 21 	lds	r30, 0x21A7
    3468:	f0 91 a8 21 	lds	r31, 0x21A8
    346c:	30 97       	sbiw	r30, 0x00	; 0
    346e:	29 f0       	breq	.+10     	; 0x347a <__vector_90+0x3c>
    3470:	80 91 9d 22 	lds	r24, 0x229D
    3474:	90 91 9e 22 	lds	r25, 0x229E
    3478:	19 95       	eicall
    347a:	ff 91       	pop	r31
    347c:	ef 91       	pop	r30
    347e:	bf 91       	pop	r27
    3480:	af 91       	pop	r26
    3482:	9f 91       	pop	r25
    3484:	8f 91       	pop	r24
    3486:	7f 91       	pop	r23
    3488:	6f 91       	pop	r22
    348a:	5f 91       	pop	r21
    348c:	4f 91       	pop	r20
    348e:	3f 91       	pop	r19
    3490:	2f 91       	pop	r18
    3492:	0f 90       	pop	r0
    3494:	0b be       	out	0x3b, r0	; 59
    3496:	0f 90       	pop	r0
    3498:	0f be       	out	0x3f, r0	; 63
    349a:	0f 90       	pop	r0
    349c:	1f 90       	pop	r1
    349e:	18 95       	reti

000034a0 <__vector_91>:

/* USARTD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_RXC_vect)      /* Reception Complete Interrupt */
    34a0:	1f 92       	push	r1
    34a2:	0f 92       	push	r0
    34a4:	0f b6       	in	r0, 0x3f	; 63
    34a6:	0f 92       	push	r0
    34a8:	11 24       	eor	r1, r1
    34aa:	0b b6       	in	r0, 0x3b	; 59
    34ac:	0f 92       	push	r0
    34ae:	2f 93       	push	r18
    34b0:	3f 93       	push	r19
    34b2:	4f 93       	push	r20
    34b4:	5f 93       	push	r21
    34b6:	6f 93       	push	r22
    34b8:	7f 93       	push	r23
    34ba:	8f 93       	push	r24
    34bc:	9f 93       	push	r25
    34be:	af 93       	push	r26
    34c0:	bf 93       	push	r27
    34c2:	ef 93       	push	r30
    34c4:	ff 93       	push	r31
    34c6:	e0 91 a9 21 	lds	r30, 0x21A9
    34ca:	f0 91 aa 21 	lds	r31, 0x21AA
    34ce:	30 97       	sbiw	r30, 0x00	; 0
    34d0:	29 f0       	breq	.+10     	; 0x34dc <__vector_91+0x3c>
    34d2:	80 91 9f 22 	lds	r24, 0x229F
    34d6:	90 91 a0 22 	lds	r25, 0x22A0
    34da:	19 95       	eicall
    34dc:	ff 91       	pop	r31
    34de:	ef 91       	pop	r30
    34e0:	bf 91       	pop	r27
    34e2:	af 91       	pop	r26
    34e4:	9f 91       	pop	r25
    34e6:	8f 91       	pop	r24
    34e8:	7f 91       	pop	r23
    34ea:	6f 91       	pop	r22
    34ec:	5f 91       	pop	r21
    34ee:	4f 91       	pop	r20
    34f0:	3f 91       	pop	r19
    34f2:	2f 91       	pop	r18
    34f4:	0f 90       	pop	r0
    34f6:	0b be       	out	0x3b, r0	; 59
    34f8:	0f 90       	pop	r0
    34fa:	0f be       	out	0x3f, r0	; 63
    34fc:	0f 90       	pop	r0
    34fe:	1f 90       	pop	r1
    3500:	18 95       	reti

00003502 <__vector_92>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_DRE_vect)      /* Data Register Empty Interrupt */
    3502:	1f 92       	push	r1
    3504:	0f 92       	push	r0
    3506:	0f b6       	in	r0, 0x3f	; 63
    3508:	0f 92       	push	r0
    350a:	11 24       	eor	r1, r1
    350c:	0b b6       	in	r0, 0x3b	; 59
    350e:	0f 92       	push	r0
    3510:	2f 93       	push	r18
    3512:	3f 93       	push	r19
    3514:	4f 93       	push	r20
    3516:	5f 93       	push	r21
    3518:	6f 93       	push	r22
    351a:	7f 93       	push	r23
    351c:	8f 93       	push	r24
    351e:	9f 93       	push	r25
    3520:	af 93       	push	r26
    3522:	bf 93       	push	r27
    3524:	ef 93       	push	r30
    3526:	ff 93       	push	r31
    3528:	e0 91 ab 21 	lds	r30, 0x21AB
    352c:	f0 91 ac 21 	lds	r31, 0x21AC
    3530:	30 97       	sbiw	r30, 0x00	; 0
    3532:	29 f0       	breq	.+10     	; 0x353e <__vector_92+0x3c>
    3534:	80 91 a1 22 	lds	r24, 0x22A1
    3538:	90 91 a2 22 	lds	r25, 0x22A2
    353c:	19 95       	eicall
    353e:	ff 91       	pop	r31
    3540:	ef 91       	pop	r30
    3542:	bf 91       	pop	r27
    3544:	af 91       	pop	r26
    3546:	9f 91       	pop	r25
    3548:	8f 91       	pop	r24
    354a:	7f 91       	pop	r23
    354c:	6f 91       	pop	r22
    354e:	5f 91       	pop	r21
    3550:	4f 91       	pop	r20
    3552:	3f 91       	pop	r19
    3554:	2f 91       	pop	r18
    3556:	0f 90       	pop	r0
    3558:	0b be       	out	0x3b, r0	; 59
    355a:	0f 90       	pop	r0
    355c:	0f be       	out	0x3f, r0	; 63
    355e:	0f 90       	pop	r0
    3560:	1f 90       	pop	r1
    3562:	18 95       	reti

00003564 <__vector_93>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_TXC_vect)      /* Transmission Complete Interrupt */
    3564:	1f 92       	push	r1
    3566:	0f 92       	push	r0
    3568:	0f b6       	in	r0, 0x3f	; 63
    356a:	0f 92       	push	r0
    356c:	11 24       	eor	r1, r1
    356e:	0b b6       	in	r0, 0x3b	; 59
    3570:	0f 92       	push	r0
    3572:	2f 93       	push	r18
    3574:	3f 93       	push	r19
    3576:	4f 93       	push	r20
    3578:	5f 93       	push	r21
    357a:	6f 93       	push	r22
    357c:	7f 93       	push	r23
    357e:	8f 93       	push	r24
    3580:	9f 93       	push	r25
    3582:	af 93       	push	r26
    3584:	bf 93       	push	r27
    3586:	ef 93       	push	r30
    3588:	ff 93       	push	r31
    358a:	e0 91 ad 21 	lds	r30, 0x21AD
    358e:	f0 91 ae 21 	lds	r31, 0x21AE
    3592:	30 97       	sbiw	r30, 0x00	; 0
    3594:	29 f0       	breq	.+10     	; 0x35a0 <__vector_93+0x3c>
    3596:	80 91 a3 22 	lds	r24, 0x22A3
    359a:	90 91 a4 22 	lds	r25, 0x22A4
    359e:	19 95       	eicall
    35a0:	ff 91       	pop	r31
    35a2:	ef 91       	pop	r30
    35a4:	bf 91       	pop	r27
    35a6:	af 91       	pop	r26
    35a8:	9f 91       	pop	r25
    35aa:	8f 91       	pop	r24
    35ac:	7f 91       	pop	r23
    35ae:	6f 91       	pop	r22
    35b0:	5f 91       	pop	r21
    35b2:	4f 91       	pop	r20
    35b4:	3f 91       	pop	r19
    35b6:	2f 91       	pop	r18
    35b8:	0f 90       	pop	r0
    35ba:	0b be       	out	0x3b, r0	; 59
    35bc:	0f 90       	pop	r0
    35be:	0f be       	out	0x3f, r0	; 63
    35c0:	0f 90       	pop	r0
    35c2:	1f 90       	pop	r1
    35c4:	18 95       	reti

000035c6 <__vector_104>:

/* PORTF interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT0_vect)      /* External Interrupt 0 */
    35c6:	1f 92       	push	r1
    35c8:	0f 92       	push	r0
    35ca:	0f b6       	in	r0, 0x3f	; 63
    35cc:	0f 92       	push	r0
    35ce:	11 24       	eor	r1, r1
    35d0:	0b b6       	in	r0, 0x3b	; 59
    35d2:	0f 92       	push	r0
    35d4:	2f 93       	push	r18
    35d6:	3f 93       	push	r19
    35d8:	4f 93       	push	r20
    35da:	5f 93       	push	r21
    35dc:	6f 93       	push	r22
    35de:	7f 93       	push	r23
    35e0:	8f 93       	push	r24
    35e2:	9f 93       	push	r25
    35e4:	af 93       	push	r26
    35e6:	bf 93       	push	r27
    35e8:	ef 93       	push	r30
    35ea:	ff 93       	push	r31
    35ec:	e0 91 c3 21 	lds	r30, 0x21C3
    35f0:	f0 91 c4 21 	lds	r31, 0x21C4
    35f4:	30 97       	sbiw	r30, 0x00	; 0
    35f6:	29 f0       	breq	.+10     	; 0x3602 <__vector_104+0x3c>
    35f8:	80 91 b9 22 	lds	r24, 0x22B9
    35fc:	90 91 ba 22 	lds	r25, 0x22BA
    3600:	19 95       	eicall
    3602:	ff 91       	pop	r31
    3604:	ef 91       	pop	r30
    3606:	bf 91       	pop	r27
    3608:	af 91       	pop	r26
    360a:	9f 91       	pop	r25
    360c:	8f 91       	pop	r24
    360e:	7f 91       	pop	r23
    3610:	6f 91       	pop	r22
    3612:	5f 91       	pop	r21
    3614:	4f 91       	pop	r20
    3616:	3f 91       	pop	r19
    3618:	2f 91       	pop	r18
    361a:	0f 90       	pop	r0
    361c:	0b be       	out	0x3b, r0	; 59
    361e:	0f 90       	pop	r0
    3620:	0f be       	out	0x3f, r0	; 63
    3622:	0f 90       	pop	r0
    3624:	1f 90       	pop	r1
    3626:	18 95       	reti

00003628 <__vector_105>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT1_vect)      /* External Interrupt 1 */
    3628:	1f 92       	push	r1
    362a:	0f 92       	push	r0
    362c:	0f b6       	in	r0, 0x3f	; 63
    362e:	0f 92       	push	r0
    3630:	11 24       	eor	r1, r1
    3632:	0b b6       	in	r0, 0x3b	; 59
    3634:	0f 92       	push	r0
    3636:	2f 93       	push	r18
    3638:	3f 93       	push	r19
    363a:	4f 93       	push	r20
    363c:	5f 93       	push	r21
    363e:	6f 93       	push	r22
    3640:	7f 93       	push	r23
    3642:	8f 93       	push	r24
    3644:	9f 93       	push	r25
    3646:	af 93       	push	r26
    3648:	bf 93       	push	r27
    364a:	ef 93       	push	r30
    364c:	ff 93       	push	r31
    364e:	e0 91 c5 21 	lds	r30, 0x21C5
    3652:	f0 91 c6 21 	lds	r31, 0x21C6
    3656:	30 97       	sbiw	r30, 0x00	; 0
    3658:	29 f0       	breq	.+10     	; 0x3664 <__vector_105+0x3c>
    365a:	80 91 bb 22 	lds	r24, 0x22BB
    365e:	90 91 bc 22 	lds	r25, 0x22BC
    3662:	19 95       	eicall
    3664:	ff 91       	pop	r31
    3666:	ef 91       	pop	r30
    3668:	bf 91       	pop	r27
    366a:	af 91       	pop	r26
    366c:	9f 91       	pop	r25
    366e:	8f 91       	pop	r24
    3670:	7f 91       	pop	r23
    3672:	6f 91       	pop	r22
    3674:	5f 91       	pop	r21
    3676:	4f 91       	pop	r20
    3678:	3f 91       	pop	r19
    367a:	2f 91       	pop	r18
    367c:	0f 90       	pop	r0
    367e:	0b be       	out	0x3b, r0	; 59
    3680:	0f 90       	pop	r0
    3682:	0f be       	out	0x3f, r0	; 63
    3684:	0f 90       	pop	r0
    3686:	1f 90       	pop	r1
    3688:	18 95       	reti

0000368a <__vector_108>:

/* TCF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_OVF_vect)      /* Overflow Interrupt */
    368a:	1f 92       	push	r1
    368c:	0f 92       	push	r0
    368e:	0f b6       	in	r0, 0x3f	; 63
    3690:	0f 92       	push	r0
    3692:	11 24       	eor	r1, r1
    3694:	0b b6       	in	r0, 0x3b	; 59
    3696:	0f 92       	push	r0
    3698:	2f 93       	push	r18
    369a:	3f 93       	push	r19
    369c:	4f 93       	push	r20
    369e:	5f 93       	push	r21
    36a0:	6f 93       	push	r22
    36a2:	7f 93       	push	r23
    36a4:	8f 93       	push	r24
    36a6:	9f 93       	push	r25
    36a8:	af 93       	push	r26
    36aa:	bf 93       	push	r27
    36ac:	ef 93       	push	r30
    36ae:	ff 93       	push	r31
    36b0:	e0 91 cb 21 	lds	r30, 0x21CB
    36b4:	f0 91 cc 21 	lds	r31, 0x21CC
    36b8:	30 97       	sbiw	r30, 0x00	; 0
    36ba:	29 f0       	breq	.+10     	; 0x36c6 <__vector_108+0x3c>
    36bc:	80 91 c1 22 	lds	r24, 0x22C1
    36c0:	90 91 c2 22 	lds	r25, 0x22C2
    36c4:	19 95       	eicall
    36c6:	ff 91       	pop	r31
    36c8:	ef 91       	pop	r30
    36ca:	bf 91       	pop	r27
    36cc:	af 91       	pop	r26
    36ce:	9f 91       	pop	r25
    36d0:	8f 91       	pop	r24
    36d2:	7f 91       	pop	r23
    36d4:	6f 91       	pop	r22
    36d6:	5f 91       	pop	r21
    36d8:	4f 91       	pop	r20
    36da:	3f 91       	pop	r19
    36dc:	2f 91       	pop	r18
    36de:	0f 90       	pop	r0
    36e0:	0b be       	out	0x3b, r0	; 59
    36e2:	0f 90       	pop	r0
    36e4:	0f be       	out	0x3f, r0	; 63
    36e6:	0f 90       	pop	r0
    36e8:	1f 90       	pop	r1
    36ea:	18 95       	reti

000036ec <__vector_109>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_ERR_vect)      /* Error Interrupt */
    36ec:	1f 92       	push	r1
    36ee:	0f 92       	push	r0
    36f0:	0f b6       	in	r0, 0x3f	; 63
    36f2:	0f 92       	push	r0
    36f4:	11 24       	eor	r1, r1
    36f6:	0b b6       	in	r0, 0x3b	; 59
    36f8:	0f 92       	push	r0
    36fa:	2f 93       	push	r18
    36fc:	3f 93       	push	r19
    36fe:	4f 93       	push	r20
    3700:	5f 93       	push	r21
    3702:	6f 93       	push	r22
    3704:	7f 93       	push	r23
    3706:	8f 93       	push	r24
    3708:	9f 93       	push	r25
    370a:	af 93       	push	r26
    370c:	bf 93       	push	r27
    370e:	ef 93       	push	r30
    3710:	ff 93       	push	r31
    3712:	e0 91 cd 21 	lds	r30, 0x21CD
    3716:	f0 91 ce 21 	lds	r31, 0x21CE
    371a:	30 97       	sbiw	r30, 0x00	; 0
    371c:	29 f0       	breq	.+10     	; 0x3728 <__vector_109+0x3c>
    371e:	80 91 c3 22 	lds	r24, 0x22C3
    3722:	90 91 c4 22 	lds	r25, 0x22C4
    3726:	19 95       	eicall
    3728:	ff 91       	pop	r31
    372a:	ef 91       	pop	r30
    372c:	bf 91       	pop	r27
    372e:	af 91       	pop	r26
    3730:	9f 91       	pop	r25
    3732:	8f 91       	pop	r24
    3734:	7f 91       	pop	r23
    3736:	6f 91       	pop	r22
    3738:	5f 91       	pop	r21
    373a:	4f 91       	pop	r20
    373c:	3f 91       	pop	r19
    373e:	2f 91       	pop	r18
    3740:	0f 90       	pop	r0
    3742:	0b be       	out	0x3b, r0	; 59
    3744:	0f 90       	pop	r0
    3746:	0f be       	out	0x3f, r0	; 63
    3748:	0f 90       	pop	r0
    374a:	1f 90       	pop	r1
    374c:	18 95       	reti

0000374e <__vector_110>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCA_vect)      /* Compare or Capture A Interrupt */
    374e:	1f 92       	push	r1
    3750:	0f 92       	push	r0
    3752:	0f b6       	in	r0, 0x3f	; 63
    3754:	0f 92       	push	r0
    3756:	11 24       	eor	r1, r1
    3758:	0b b6       	in	r0, 0x3b	; 59
    375a:	0f 92       	push	r0
    375c:	2f 93       	push	r18
    375e:	3f 93       	push	r19
    3760:	4f 93       	push	r20
    3762:	5f 93       	push	r21
    3764:	6f 93       	push	r22
    3766:	7f 93       	push	r23
    3768:	8f 93       	push	r24
    376a:	9f 93       	push	r25
    376c:	af 93       	push	r26
    376e:	bf 93       	push	r27
    3770:	ef 93       	push	r30
    3772:	ff 93       	push	r31
    3774:	e0 91 cf 21 	lds	r30, 0x21CF
    3778:	f0 91 d0 21 	lds	r31, 0x21D0
    377c:	30 97       	sbiw	r30, 0x00	; 0
    377e:	29 f0       	breq	.+10     	; 0x378a <__vector_110+0x3c>
    3780:	80 91 c5 22 	lds	r24, 0x22C5
    3784:	90 91 c6 22 	lds	r25, 0x22C6
    3788:	19 95       	eicall
    378a:	ff 91       	pop	r31
    378c:	ef 91       	pop	r30
    378e:	bf 91       	pop	r27
    3790:	af 91       	pop	r26
    3792:	9f 91       	pop	r25
    3794:	8f 91       	pop	r24
    3796:	7f 91       	pop	r23
    3798:	6f 91       	pop	r22
    379a:	5f 91       	pop	r21
    379c:	4f 91       	pop	r20
    379e:	3f 91       	pop	r19
    37a0:	2f 91       	pop	r18
    37a2:	0f 90       	pop	r0
    37a4:	0b be       	out	0x3b, r0	; 59
    37a6:	0f 90       	pop	r0
    37a8:	0f be       	out	0x3f, r0	; 63
    37aa:	0f 90       	pop	r0
    37ac:	1f 90       	pop	r1
    37ae:	18 95       	reti

000037b0 <__vector_111>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCB_vect)      /* Compare or Capture B Interrupt */
    37b0:	1f 92       	push	r1
    37b2:	0f 92       	push	r0
    37b4:	0f b6       	in	r0, 0x3f	; 63
    37b6:	0f 92       	push	r0
    37b8:	11 24       	eor	r1, r1
    37ba:	0b b6       	in	r0, 0x3b	; 59
    37bc:	0f 92       	push	r0
    37be:	2f 93       	push	r18
    37c0:	3f 93       	push	r19
    37c2:	4f 93       	push	r20
    37c4:	5f 93       	push	r21
    37c6:	6f 93       	push	r22
    37c8:	7f 93       	push	r23
    37ca:	8f 93       	push	r24
    37cc:	9f 93       	push	r25
    37ce:	af 93       	push	r26
    37d0:	bf 93       	push	r27
    37d2:	ef 93       	push	r30
    37d4:	ff 93       	push	r31
    37d6:	e0 91 d1 21 	lds	r30, 0x21D1
    37da:	f0 91 d2 21 	lds	r31, 0x21D2
    37de:	30 97       	sbiw	r30, 0x00	; 0
    37e0:	29 f0       	breq	.+10     	; 0x37ec <__vector_111+0x3c>
    37e2:	80 91 c7 22 	lds	r24, 0x22C7
    37e6:	90 91 c8 22 	lds	r25, 0x22C8
    37ea:	19 95       	eicall
    37ec:	ff 91       	pop	r31
    37ee:	ef 91       	pop	r30
    37f0:	bf 91       	pop	r27
    37f2:	af 91       	pop	r26
    37f4:	9f 91       	pop	r25
    37f6:	8f 91       	pop	r24
    37f8:	7f 91       	pop	r23
    37fa:	6f 91       	pop	r22
    37fc:	5f 91       	pop	r21
    37fe:	4f 91       	pop	r20
    3800:	3f 91       	pop	r19
    3802:	2f 91       	pop	r18
    3804:	0f 90       	pop	r0
    3806:	0b be       	out	0x3b, r0	; 59
    3808:	0f 90       	pop	r0
    380a:	0f be       	out	0x3f, r0	; 63
    380c:	0f 90       	pop	r0
    380e:	1f 90       	pop	r1
    3810:	18 95       	reti

00003812 <__vector_112>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCC_vect)      /* Compare or Capture C Interrupt */
    3812:	1f 92       	push	r1
    3814:	0f 92       	push	r0
    3816:	0f b6       	in	r0, 0x3f	; 63
    3818:	0f 92       	push	r0
    381a:	11 24       	eor	r1, r1
    381c:	0b b6       	in	r0, 0x3b	; 59
    381e:	0f 92       	push	r0
    3820:	2f 93       	push	r18
    3822:	3f 93       	push	r19
    3824:	4f 93       	push	r20
    3826:	5f 93       	push	r21
    3828:	6f 93       	push	r22
    382a:	7f 93       	push	r23
    382c:	8f 93       	push	r24
    382e:	9f 93       	push	r25
    3830:	af 93       	push	r26
    3832:	bf 93       	push	r27
    3834:	ef 93       	push	r30
    3836:	ff 93       	push	r31
    3838:	e0 91 d3 21 	lds	r30, 0x21D3
    383c:	f0 91 d4 21 	lds	r31, 0x21D4
    3840:	30 97       	sbiw	r30, 0x00	; 0
    3842:	29 f0       	breq	.+10     	; 0x384e <__vector_112+0x3c>
    3844:	80 91 c9 22 	lds	r24, 0x22C9
    3848:	90 91 ca 22 	lds	r25, 0x22CA
    384c:	19 95       	eicall
    384e:	ff 91       	pop	r31
    3850:	ef 91       	pop	r30
    3852:	bf 91       	pop	r27
    3854:	af 91       	pop	r26
    3856:	9f 91       	pop	r25
    3858:	8f 91       	pop	r24
    385a:	7f 91       	pop	r23
    385c:	6f 91       	pop	r22
    385e:	5f 91       	pop	r21
    3860:	4f 91       	pop	r20
    3862:	3f 91       	pop	r19
    3864:	2f 91       	pop	r18
    3866:	0f 90       	pop	r0
    3868:	0b be       	out	0x3b, r0	; 59
    386a:	0f 90       	pop	r0
    386c:	0f be       	out	0x3f, r0	; 63
    386e:	0f 90       	pop	r0
    3870:	1f 90       	pop	r1
    3872:	18 95       	reti

00003874 <__vector_113>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCD_vect)      /* Compare or Capture D Interrupt */
    3874:	1f 92       	push	r1
    3876:	0f 92       	push	r0
    3878:	0f b6       	in	r0, 0x3f	; 63
    387a:	0f 92       	push	r0
    387c:	11 24       	eor	r1, r1
    387e:	0b b6       	in	r0, 0x3b	; 59
    3880:	0f 92       	push	r0
    3882:	2f 93       	push	r18
    3884:	3f 93       	push	r19
    3886:	4f 93       	push	r20
    3888:	5f 93       	push	r21
    388a:	6f 93       	push	r22
    388c:	7f 93       	push	r23
    388e:	8f 93       	push	r24
    3890:	9f 93       	push	r25
    3892:	af 93       	push	r26
    3894:	bf 93       	push	r27
    3896:	ef 93       	push	r30
    3898:	ff 93       	push	r31
    389a:	e0 91 d5 21 	lds	r30, 0x21D5
    389e:	f0 91 d6 21 	lds	r31, 0x21D6
    38a2:	30 97       	sbiw	r30, 0x00	; 0
    38a4:	29 f0       	breq	.+10     	; 0x38b0 <__vector_113+0x3c>
    38a6:	80 91 cb 22 	lds	r24, 0x22CB
    38aa:	90 91 cc 22 	lds	r25, 0x22CC
    38ae:	19 95       	eicall
    38b0:	ff 91       	pop	r31
    38b2:	ef 91       	pop	r30
    38b4:	bf 91       	pop	r27
    38b6:	af 91       	pop	r26
    38b8:	9f 91       	pop	r25
    38ba:	8f 91       	pop	r24
    38bc:	7f 91       	pop	r23
    38be:	6f 91       	pop	r22
    38c0:	5f 91       	pop	r21
    38c2:	4f 91       	pop	r20
    38c4:	3f 91       	pop	r19
    38c6:	2f 91       	pop	r18
    38c8:	0f 90       	pop	r0
    38ca:	0b be       	out	0x3b, r0	; 59
    38cc:	0f 90       	pop	r0
    38ce:	0f be       	out	0x3f, r0	; 63
    38d0:	0f 90       	pop	r0
    38d2:	1f 90       	pop	r1
    38d4:	18 95       	reti

000038d6 <__vector_119>:

/* USARTF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_RXC_vect)      /* Reception Complete Interrupt */
    38d6:	1f 92       	push	r1
    38d8:	0f 92       	push	r0
    38da:	0f b6       	in	r0, 0x3f	; 63
    38dc:	0f 92       	push	r0
    38de:	11 24       	eor	r1, r1
    38e0:	0b b6       	in	r0, 0x3b	; 59
    38e2:	0f 92       	push	r0
    38e4:	2f 93       	push	r18
    38e6:	3f 93       	push	r19
    38e8:	4f 93       	push	r20
    38ea:	5f 93       	push	r21
    38ec:	6f 93       	push	r22
    38ee:	7f 93       	push	r23
    38f0:	8f 93       	push	r24
    38f2:	9f 93       	push	r25
    38f4:	af 93       	push	r26
    38f6:	bf 93       	push	r27
    38f8:	ef 93       	push	r30
    38fa:	ff 93       	push	r31
    38fc:	e0 91 e1 21 	lds	r30, 0x21E1
    3900:	f0 91 e2 21 	lds	r31, 0x21E2
    3904:	30 97       	sbiw	r30, 0x00	; 0
    3906:	29 f0       	breq	.+10     	; 0x3912 <__vector_119+0x3c>
    3908:	80 91 d7 22 	lds	r24, 0x22D7
    390c:	90 91 d8 22 	lds	r25, 0x22D8
    3910:	19 95       	eicall
    3912:	ff 91       	pop	r31
    3914:	ef 91       	pop	r30
    3916:	bf 91       	pop	r27
    3918:	af 91       	pop	r26
    391a:	9f 91       	pop	r25
    391c:	8f 91       	pop	r24
    391e:	7f 91       	pop	r23
    3920:	6f 91       	pop	r22
    3922:	5f 91       	pop	r21
    3924:	4f 91       	pop	r20
    3926:	3f 91       	pop	r19
    3928:	2f 91       	pop	r18
    392a:	0f 90       	pop	r0
    392c:	0b be       	out	0x3b, r0	; 59
    392e:	0f 90       	pop	r0
    3930:	0f be       	out	0x3f, r0	; 63
    3932:	0f 90       	pop	r0
    3934:	1f 90       	pop	r1
    3936:	18 95       	reti

00003938 <__vector_120>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_DRE_vect)      /* Data Register Empty Interrupt */
    3938:	1f 92       	push	r1
    393a:	0f 92       	push	r0
    393c:	0f b6       	in	r0, 0x3f	; 63
    393e:	0f 92       	push	r0
    3940:	11 24       	eor	r1, r1
    3942:	0b b6       	in	r0, 0x3b	; 59
    3944:	0f 92       	push	r0
    3946:	2f 93       	push	r18
    3948:	3f 93       	push	r19
    394a:	4f 93       	push	r20
    394c:	5f 93       	push	r21
    394e:	6f 93       	push	r22
    3950:	7f 93       	push	r23
    3952:	8f 93       	push	r24
    3954:	9f 93       	push	r25
    3956:	af 93       	push	r26
    3958:	bf 93       	push	r27
    395a:	ef 93       	push	r30
    395c:	ff 93       	push	r31
    395e:	e0 91 e3 21 	lds	r30, 0x21E3
    3962:	f0 91 e4 21 	lds	r31, 0x21E4
    3966:	30 97       	sbiw	r30, 0x00	; 0
    3968:	29 f0       	breq	.+10     	; 0x3974 <__vector_120+0x3c>
    396a:	80 91 d9 22 	lds	r24, 0x22D9
    396e:	90 91 da 22 	lds	r25, 0x22DA
    3972:	19 95       	eicall
    3974:	ff 91       	pop	r31
    3976:	ef 91       	pop	r30
    3978:	bf 91       	pop	r27
    397a:	af 91       	pop	r26
    397c:	9f 91       	pop	r25
    397e:	8f 91       	pop	r24
    3980:	7f 91       	pop	r23
    3982:	6f 91       	pop	r22
    3984:	5f 91       	pop	r21
    3986:	4f 91       	pop	r20
    3988:	3f 91       	pop	r19
    398a:	2f 91       	pop	r18
    398c:	0f 90       	pop	r0
    398e:	0b be       	out	0x3b, r0	; 59
    3990:	0f 90       	pop	r0
    3992:	0f be       	out	0x3f, r0	; 63
    3994:	0f 90       	pop	r0
    3996:	1f 90       	pop	r1
    3998:	18 95       	reti

0000399a <__vector_121>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_TXC_vect)      /* Transmission Complete Interrupt */
    399a:	1f 92       	push	r1
    399c:	0f 92       	push	r0
    399e:	0f b6       	in	r0, 0x3f	; 63
    39a0:	0f 92       	push	r0
    39a2:	11 24       	eor	r1, r1
    39a4:	0b b6       	in	r0, 0x3b	; 59
    39a6:	0f 92       	push	r0
    39a8:	2f 93       	push	r18
    39aa:	3f 93       	push	r19
    39ac:	4f 93       	push	r20
    39ae:	5f 93       	push	r21
    39b0:	6f 93       	push	r22
    39b2:	7f 93       	push	r23
    39b4:	8f 93       	push	r24
    39b6:	9f 93       	push	r25
    39b8:	af 93       	push	r26
    39ba:	bf 93       	push	r27
    39bc:	ef 93       	push	r30
    39be:	ff 93       	push	r31
    39c0:	e0 91 e5 21 	lds	r30, 0x21E5
    39c4:	f0 91 e6 21 	lds	r31, 0x21E6
    39c8:	30 97       	sbiw	r30, 0x00	; 0
    39ca:	29 f0       	breq	.+10     	; 0x39d6 <__vector_121+0x3c>
    39cc:	80 91 db 22 	lds	r24, 0x22DB
    39d0:	90 91 dc 22 	lds	r25, 0x22DC
    39d4:	19 95       	eicall
    39d6:	ff 91       	pop	r31
    39d8:	ef 91       	pop	r30
    39da:	bf 91       	pop	r27
    39dc:	af 91       	pop	r26
    39de:	9f 91       	pop	r25
    39e0:	8f 91       	pop	r24
    39e2:	7f 91       	pop	r23
    39e4:	6f 91       	pop	r22
    39e6:	5f 91       	pop	r21
    39e8:	4f 91       	pop	r20
    39ea:	3f 91       	pop	r19
    39ec:	2f 91       	pop	r18
    39ee:	0f 90       	pop	r0
    39f0:	0b be       	out	0x3b, r0	; 59
    39f2:	0f 90       	pop	r0
    39f4:	0f be       	out	0x3f, r0	; 63
    39f6:	0f 90       	pop	r0
    39f8:	1f 90       	pop	r1
    39fa:	18 95       	reti

000039fc <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual()
{	
	while(1)
	{
		laserBoard.BeepClassError();
    39fc:	0e 94 30 03 	call	0x660	; 0x660 <_ZN11CLaserBoard14BeepClassErrorEv>
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;
CDGUSDatabase Database;

extern "C" void __cxa_pure_virtual()
    3a00:	fd cf       	rjmp	.-6      	; 0x39fc <__cxa_pure_virtual>

00003a02 <_GLOBAL__sub_I_dacSPI>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    3a02:	82 e2       	ldi	r24, 0x22	; 34
    3a04:	93 e2       	ldi	r25, 0x23	; 35
    3a06:	0e 94 09 09 	call	0x1212	; 0x1212 <_ZN4CSPIC1Ev>
CDGUSUSART usart;
    3a0a:	80 e2       	ldi	r24, 0x20	; 32
    3a0c:	93 e2       	ldi	r25, 0x23	; 35
    3a0e:	0e 94 89 02 	call	0x512	; 0x512 <_ZN10CDGUSUSARTC1Ev>
CMBSender sender;
    3a12:	87 e0       	ldi	r24, 0x07	; 7
    3a14:	93 e2       	ldi	r25, 0x23	; 35
    3a16:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <_ZN9CMBSenderC1Ev>
CLaserBoard laserBoard;
    3a1a:	86 e0       	ldi	r24, 0x06	; 6
    3a1c:	93 e2       	ldi	r25, 0x23	; 35
    3a1e:	0e 94 9d 02 	call	0x53a	; 0x53a <_ZN11CLaserBoardC1Ev>
CSoundPlayer player;
    3a22:	85 e0       	ldi	r24, 0x05	; 5
    3a24:	93 e2       	ldi	r25, 0x23	; 35
    3a26:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN12CSoundPlayerC1Ev>
CLaserControlApp App;
    3a2a:	89 ee       	ldi	r24, 0xE9	; 233
    3a2c:	92 e2       	ldi	r25, 0x22	; 34
    3a2e:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN16CLaserControlAppC1Ev>
CDGUSDatabase Database;
    3a32:	81 ee       	ldi	r24, 0xE1	; 225
    3a34:	92 e2       	ldi	r25, 0x22	; 34
    3a36:	0e 94 ef 01 	call	0x3de	; 0x3de <_ZN13CDGUSDatabaseC1Ev>
    3a3a:	08 95       	ret

00003a3c <_GLOBAL__sub_D_dacSPI>:
    3a3c:	81 ee       	ldi	r24, 0xE1	; 225
    3a3e:	92 e2       	ldi	r25, 0x22	; 34
    3a40:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN13CDGUSDatabaseD1Ev>
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;
    3a44:	89 ee       	ldi	r24, 0xE9	; 233
    3a46:	92 e2       	ldi	r25, 0x22	; 34
    3a48:	0e 94 ce 03 	call	0x79c	; 0x79c <_ZN16CLaserControlAppD1Ev>
/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
    3a4c:	85 e0       	ldi	r24, 0x05	; 5
    3a4e:	93 e2       	ldi	r25, 0x23	; 35
    3a50:	0e 94 b7 07 	call	0xf6e	; 0xf6e <_ZN12CSoundPlayerD1Ev>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
    3a54:	86 e0       	ldi	r24, 0x06	; 6
    3a56:	93 e2       	ldi	r25, 0x23	; 35
    3a58:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN11CLaserBoardD1Ev>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
    3a5c:	87 e0       	ldi	r24, 0x07	; 7
    3a5e:	93 e2       	ldi	r25, 0x23	; 35
    3a60:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <_ZN9CMBSenderD1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
    3a64:	80 e2       	ldi	r24, 0x20	; 32
    3a66:	93 e2       	ldi	r25, 0x23	; 35
    3a68:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN10CDGUSUSARTD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    3a6c:	82 e2       	ldi	r24, 0x22	; 34
    3a6e:	93 e2       	ldi	r25, 0x23	; 35
    3a70:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN4CSPID1Ev>
    3a74:	08 95       	ret

00003a76 <_Z16SystemInitializev>:
		laserBoard.BeepClassError();
	}
}

void SystemInitialize()
{
    3a76:	ef 92       	push	r14
    3a78:	0f 93       	push	r16
    3a7a:	1f 93       	push	r17
	cli();	/* Disable global interrupts */
    3a7c:	f8 94       	cli
	
	// Initialize modules
	laserBoard.InitializeIO();
    3a7e:	86 e0       	ldi	r24, 0x06	; 6
    3a80:	93 e2       	ldi	r25, 0x23	; 35
    3a82:	0e 94 9f 02 	call	0x53e	; 0x53e <_ZN11CLaserBoard12InitializeIOEv>
	player.Initialize();
    3a86:	85 e0       	ldi	r24, 0x05	; 5
    3a88:	93 e2       	ldi	r25, 0x23	; 35
    3a8a:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN12CSoundPlayer10InitializeEv>
	dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    3a8e:	0f 2e       	mov	r0, r31
    3a90:	f3 e0       	ldi	r31, 0x03	; 3
    3a92:	ef 2e       	mov	r14, r31
    3a94:	f0 2d       	mov	r31, r0
    3a96:	00 e0       	ldi	r16, 0x00	; 0
    3a98:	23 e0       	ldi	r18, 0x03	; 3
    3a9a:	40 e0       	ldi	r20, 0x00	; 0
    3a9c:	61 e0       	ldi	r22, 0x01	; 1
    3a9e:	82 e2       	ldi	r24, 0x22	; 34
    3aa0:	93 e2       	ldi	r25, 0x23	; 35
    3aa2:	0e 94 0b 09 	call	0x1216	; 0x1216 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
	usart.Initialize(BAUD_115200_ERM0P1, PARITY_DISABLE, STOPBITS_1BIT, true);
    3aa6:	01 e0       	ldi	r16, 0x01	; 1
    3aa8:	20 e0       	ldi	r18, 0x00	; 0
    3aaa:	40 e0       	ldi	r20, 0x00	; 0
    3aac:	6d e0       	ldi	r22, 0x0D	; 13
    3aae:	80 e2       	ldi	r24, 0x20	; 32
    3ab0:	93 e2       	ldi	r25, 0x23	; 35
    3ab2:	0e 94 0d 02 	call	0x41a	; 0x41a <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
	sender.Initialize(&usart, &App, 256, 256);
    3ab6:	00 e0       	ldi	r16, 0x00	; 0
    3ab8:	11 e0       	ldi	r17, 0x01	; 1
    3aba:	20 e0       	ldi	r18, 0x00	; 0
    3abc:	31 e0       	ldi	r19, 0x01	; 1
    3abe:	49 ee       	ldi	r20, 0xE9	; 233
    3ac0:	52 e2       	ldi	r21, 0x22	; 34
    3ac2:	60 e2       	ldi	r22, 0x20	; 32
    3ac4:	73 e2       	ldi	r23, 0x23	; 35
    3ac6:	87 e0       	ldi	r24, 0x07	; 7
    3ac8:	93 e2       	ldi	r25, 0x23	; 35
    3aca:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj>
	App.Initialize(&sender);
    3ace:	67 e0       	ldi	r22, 0x07	; 7
    3ad0:	73 e2       	ldi	r23, 0x23	; 35
    3ad2:	89 ee       	ldi	r24, 0xE9	; 233
    3ad4:	92 e2       	ldi	r25, 0x22	; 34
    3ad6:	0e 94 89 04 	call	0x912	; 0x912 <_ZN16CLaserControlApp10InitializeEP9CMBSender>
	laserBoard.InitializeClock();
    3ada:	86 e0       	ldi	r24, 0x06	; 6
    3adc:	93 e2       	ldi	r25, 0x23	; 35
    3ade:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN11CLaserBoard15InitializeClockEv>
	Database.Initialize(&sender, VARIABLE_ADDR_DATABASE);
    3ae2:	40 e0       	ldi	r20, 0x00	; 0
    3ae4:	51 e0       	ldi	r21, 0x01	; 1
    3ae6:	67 e0       	ldi	r22, 0x07	; 7
    3ae8:	73 e2       	ldi	r23, 0x23	; 35
    3aea:	81 ee       	ldi	r24, 0xE1	; 225
    3aec:	92 e2       	ldi	r25, 0x22	; 34
    3aee:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>
	
	sei();	/* Enable global interrupts */
    3af2:	78 94       	sei
}
    3af4:	1f 91       	pop	r17
    3af6:	0f 91       	pop	r16
    3af8:	ef 90       	pop	r14
    3afa:	08 95       	ret

00003afc <main>:
int main(void)
{
	float x = 0.0f;
	
	// Initialization system
	SystemInitialize();
    3afc:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <_Z16SystemInitializev>
    3b00:	2f ef       	ldi	r18, 0xFF	; 255
    3b02:	8f e4       	ldi	r24, 0x4F	; 79
    3b04:	93 ec       	ldi	r25, 0xC3	; 195
    3b06:	21 50       	subi	r18, 0x01	; 1
    3b08:	80 40       	sbci	r24, 0x00	; 0
    3b0a:	90 40       	sbci	r25, 0x00	; 0
    3b0c:	e1 f7       	brne	.-8      	; 0x3b06 <main+0xa>
    3b0e:	00 c0       	rjmp	.+0      	; 0x3b10 <main+0x14>
    3b10:	00 00       	nop
	// Startup delay (Beep "Imperial March")
	//player.Play();
	_delay_ms(2000);
	
	// Initialize application GUI
	App.Start();
    3b12:	89 ee       	ldi	r24, 0xE9	; 233
    3b14:	92 e2       	ldi	r25, 0x22	; 34
    3b16:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN16CLaserControlApp5StartEv>
		// Loop delay
		_delay_ms(1);
		
		// Process application
		static uint16_t prs = 0;
		if ((prs++ % 200) == 0)
    3b1a:	c8 ec       	ldi	r28, 0xC8	; 200
    3b1c:	8f e3       	ldi	r24, 0x3F	; 63
    3b1e:	9f e1       	ldi	r25, 0x1F	; 31
    3b20:	01 97       	sbiw	r24, 0x01	; 1
    3b22:	f1 f7       	brne	.-4      	; 0x3b20 <main+0x24>
    3b24:	00 c0       	rjmp	.+0      	; 0x3b26 <main+0x2a>
    3b26:	00 00       	nop
    3b28:	40 91 df 22 	lds	r20, 0x22DF
    3b2c:	50 91 e0 22 	lds	r21, 0x22E0
    3b30:	ca 01       	movw	r24, r20
    3b32:	01 96       	adiw	r24, 0x01	; 1
    3b34:	80 93 df 22 	sts	0x22DF, r24
    3b38:	90 93 e0 22 	sts	0x22E0, r25
    3b3c:	9a 01       	movw	r18, r20
    3b3e:	36 95       	lsr	r19
    3b40:	27 95       	ror	r18
    3b42:	36 95       	lsr	r19
    3b44:	27 95       	ror	r18
    3b46:	36 95       	lsr	r19
    3b48:	27 95       	ror	r18
    3b4a:	ab e7       	ldi	r26, 0x7B	; 123
    3b4c:	b4 e1       	ldi	r27, 0x14	; 20
    3b4e:	0e 94 06 21 	call	0x420c	; 0x420c <__umulhisi3>
    3b52:	96 95       	lsr	r25
    3b54:	87 95       	ror	r24
    3b56:	c8 9f       	mul	r28, r24
    3b58:	90 01       	movw	r18, r0
    3b5a:	c9 9f       	mul	r28, r25
    3b5c:	30 0d       	add	r19, r0
    3b5e:	11 24       	eor	r1, r1
    3b60:	42 17       	cp	r20, r18
    3b62:	53 07       	cpc	r21, r19
    3b64:	d9 f6       	brne	.-74     	; 0x3b1c <main+0x20>
			App.Run();
    3b66:	89 ee       	ldi	r24, 0xE9	; 233
    3b68:	92 e2       	ldi	r25, 0x22	; 34
    3b6a:	0e 94 ba 04 	call	0x974	; 0x974 <_ZN16CLaserControlApp3RunEv>
    3b6e:	d6 cf       	rjmp	.-84     	; 0x3b1c <main+0x20>

00003b70 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
	free(tx_buffer);
}

// local methods
void CMBEventsHandler::FillRegDataTx(uint8_t addr, uint8_t* data, uint8_t length)
{
    3b70:	cf 93       	push	r28
    3b72:	df 93       	push	r29
    3b74:	ec 01       	movw	r28, r24
		// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    3b76:	ec 81       	ldd	r30, Y+4	; 0x04
    3b78:	fd 81       	ldd	r31, Y+5	; 0x05
    3b7a:	8a ea       	ldi	r24, 0xAA	; 170
    3b7c:	80 83       	st	Z, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    3b7e:	ec 81       	ldd	r30, Y+4	; 0x04
    3b80:	fd 81       	ldd	r31, Y+5	; 0x05
    3b82:	8c ec       	ldi	r24, 0xCC	; 204
    3b84:	81 83       	std	Z+1, r24	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 4; //CMD (1) + DATA(length) + CRC(2) + ADDR(1)
#else
	tx_buffer[2] = length + 2; //CMD (1) + DATA(length) + ADDR(1)
    3b86:	ec 81       	ldd	r30, Y+4	; 0x04
    3b88:	fd 81       	ldd	r31, Y+5	; 0x05
    3b8a:	82 e0       	ldi	r24, 0x02	; 2
    3b8c:	82 0f       	add	r24, r18
    3b8e:	82 83       	std	Z+2, r24	; 0x02
#endif
	tx_buffer[3] = 0x80;	// Frame command
    3b90:	ec 81       	ldd	r30, Y+4	; 0x04
    3b92:	fd 81       	ldd	r31, Y+5	; 0x05
    3b94:	80 e8       	ldi	r24, 0x80	; 128
    3b96:	83 83       	std	Z+3, r24	; 0x03
	tx_buffer[4] = addr;	// Register address
    3b98:	ec 81       	ldd	r30, Y+4	; 0x04
    3b9a:	fd 81       	ldd	r31, Y+5	; 0x05
    3b9c:	64 83       	std	Z+4, r22	; 0x04
	tx_frame_length = length + 5;
    3b9e:	85 e0       	ldi	r24, 0x05	; 5
    3ba0:	82 0f       	add	r24, r18
    3ba2:	89 87       	std	Y+9, r24	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	21 15       	cp	r18, r1
    3ba8:	31 05       	cpc	r19, r1
    3baa:	81 f0       	breq	.+32     	; 0x3bcc <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x5c>
    3bac:	da 01       	movw	r26, r20
    3bae:	42 0f       	add	r20, r18
    3bb0:	53 1f       	adc	r21, r19
    3bb2:	65 e0       	ldi	r22, 0x05	; 5
    3bb4:	70 e0       	ldi	r23, 0x00	; 0
		tx_buffer[i+5] = data[i];
    3bb6:	9d 91       	ld	r25, X+
    3bb8:	ec 81       	ldd	r30, Y+4	; 0x04
    3bba:	fd 81       	ldd	r31, Y+5	; 0x05
    3bbc:	e6 0f       	add	r30, r22
    3bbe:	f7 1f       	adc	r31, r23
    3bc0:	90 83       	st	Z, r25
    3bc2:	6f 5f       	subi	r22, 0xFF	; 255
    3bc4:	7f 4f       	sbci	r23, 0xFF	; 255
	tx_buffer[3] = 0x80;	// Frame command
	tx_buffer[4] = addr;	// Register address
	tx_frame_length = length + 5;
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    3bc6:	a4 17       	cp	r26, r20
    3bc8:	b5 07       	cpc	r27, r21
    3bca:	a9 f7       	brne	.-22     	; 0x3bb6 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length]   = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	tx_frame_length = length + 7;
#endif
}
    3bcc:	df 91       	pop	r29
    3bce:	cf 91       	pop	r28
    3bd0:	08 95       	ret

00003bd2 <_ZN16CMBEventsHandler13FillRegDataRqEhh>:

void CMBEventsHandler::FillRegDataRq(uint8_t addr, uint8_t length)
{
    3bd2:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    3bd4:	a4 81       	ldd	r26, Z+4	; 0x04
    3bd6:	b5 81       	ldd	r27, Z+5	; 0x05
    3bd8:	8a ea       	ldi	r24, 0xAA	; 170
    3bda:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    3bdc:	a4 81       	ldd	r26, Z+4	; 0x04
    3bde:	b5 81       	ldd	r27, Z+5	; 0x05
    3be0:	8c ec       	ldi	r24, 0xCC	; 204
    3be2:	11 96       	adiw	r26, 0x01	; 1
    3be4:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 5; //CMD(1) + DATA(2) + CRC(2)
#else
	tx_buffer[2] = 3; //CMD(1) + DATA(2)
    3be6:	a4 81       	ldd	r26, Z+4	; 0x04
    3be8:	b5 81       	ldd	r27, Z+5	; 0x05
    3bea:	83 e0       	ldi	r24, 0x03	; 3
    3bec:	12 96       	adiw	r26, 0x02	; 2
    3bee:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x81;	// Frame command
    3bf0:	a4 81       	ldd	r26, Z+4	; 0x04
    3bf2:	b5 81       	ldd	r27, Z+5	; 0x05
    3bf4:	81 e8       	ldi	r24, 0x81	; 129
    3bf6:	13 96       	adiw	r26, 0x03	; 3
    3bf8:	8c 93       	st	X, r24
	tx_buffer[4] = addr;	// Register address
    3bfa:	a4 81       	ldd	r26, Z+4	; 0x04
    3bfc:	b5 81       	ldd	r27, Z+5	; 0x05
    3bfe:	14 96       	adiw	r26, 0x04	; 4
    3c00:	6c 93       	st	X, r22
	tx_buffer[5] = length;	// Data
    3c02:	a4 81       	ldd	r26, Z+4	; 0x04
    3c04:	b5 81       	ldd	r27, Z+5	; 0x05
    3c06:	15 96       	adiw	r26, 0x05	; 5
    3c08:	4c 93       	st	X, r20
	tx_frame_length = 6;
    3c0a:	86 e0       	ldi	r24, 0x06	; 6
    3c0c:	81 87       	std	Z+9, r24	; 0x09
    3c0e:	08 95       	ret

00003c10 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	tx_frame_length = length + 8;
#endif
}

void CMBEventsHandler::FillVarDataTx(uint16_t addr, uint16_t* data, uint16_t length)
{
    3c10:	0f 93       	push	r16
    3c12:	1f 93       	push	r17
    3c14:	cf 93       	push	r28
    3c16:	df 93       	push	r29
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    3c18:	dc 01       	movw	r26, r24
    3c1a:	14 96       	adiw	r26, 0x04	; 4
    3c1c:	ed 91       	ld	r30, X+
    3c1e:	fc 91       	ld	r31, X
    3c20:	15 97       	sbiw	r26, 0x05	; 5
    3c22:	aa ea       	ldi	r26, 0xAA	; 170
    3c24:	a0 83       	st	Z, r26
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    3c26:	ec 01       	movw	r28, r24
    3c28:	ec 81       	ldd	r30, Y+4	; 0x04
    3c2a:	fd 81       	ldd	r31, Y+5	; 0x05
    3c2c:	ac ec       	ldi	r26, 0xCC	; 204
    3c2e:	a1 83       	std	Z+1, r26	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 5; //CMD (1) + DATA(length * 2) + CRC(2) + ADDR(2)
#else
	tx_buffer[2] = length + 3; //CMD (1) + DATA(length * 2) + ADDR(2)
    3c30:	ec 81       	ldd	r30, Y+4	; 0x04
    3c32:	fd 81       	ldd	r31, Y+5	; 0x05
    3c34:	a3 e0       	ldi	r26, 0x03	; 3
    3c36:	a2 0f       	add	r26, r18
    3c38:	a2 83       	std	Z+2, r26	; 0x02
#endif
	tx_buffer[3] = 0x82;	// Frame command
    3c3a:	ec 81       	ldd	r30, Y+4	; 0x04
    3c3c:	fd 81       	ldd	r31, Y+5	; 0x05
    3c3e:	a2 e8       	ldi	r26, 0x82	; 130
    3c40:	a3 83       	std	Z+3, r26	; 0x03
	tx_buffer[4] = addr >> 8;
    3c42:	ec 81       	ldd	r30, Y+4	; 0x04
    3c44:	fd 81       	ldd	r31, Y+5	; 0x05
    3c46:	74 83       	std	Z+4, r23	; 0x04
	tx_buffer[5] = addr & 0xff;
    3c48:	ec 81       	ldd	r30, Y+4	; 0x04
    3c4a:	fd 81       	ldd	r31, Y+5	; 0x05
    3c4c:	65 83       	std	Z+5, r22	; 0x05
	tx_frame_length = length + 6;
    3c4e:	66 e0       	ldi	r22, 0x06	; 6
    3c50:	62 0f       	add	r22, r18
    3c52:	69 87       	std	Y+9, r22	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    3c54:	36 95       	lsr	r19
    3c56:	27 95       	ror	r18
    3c58:	21 15       	cp	r18, r1
    3c5a:	31 05       	cpc	r19, r1
    3c5c:	e1 f0       	breq	.+56     	; 0x3c96 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x86>
    3c5e:	e4 2f       	mov	r30, r20
    3c60:	f5 2f       	mov	r31, r21
    3c62:	2d 5f       	subi	r18, 0xFD	; 253
    3c64:	3f 4f       	sbci	r19, 0xFF	; 255
    3c66:	22 0f       	add	r18, r18
    3c68:	33 1f       	adc	r19, r19
    3c6a:	46 e0       	ldi	r20, 0x06	; 6
    3c6c:	50 e0       	ldi	r21, 0x00	; 0
	{
		tx_buffer[6 + i*2 + 0] = data[i] >> 8;
    3c6e:	ec 01       	movw	r28, r24
    3c70:	ac 81       	ldd	r26, Y+4	; 0x04
    3c72:	bd 81       	ldd	r27, Y+5	; 0x05
    3c74:	a4 0f       	add	r26, r20
    3c76:	b5 1f       	adc	r27, r21
    3c78:	61 81       	ldd	r22, Z+1	; 0x01
    3c7a:	6c 93       	st	X, r22
		tx_buffer[6 + i*2 + 1] = data[i] & 0xff;
    3c7c:	ac 81       	ldd	r26, Y+4	; 0x04
    3c7e:	bd 81       	ldd	r27, Y+5	; 0x05
    3c80:	a4 0f       	add	r26, r20
    3c82:	b5 1f       	adc	r27, r21
    3c84:	60 81       	ld	r22, Z
    3c86:	32 96       	adiw	r30, 0x02	; 2
    3c88:	11 96       	adiw	r26, 0x01	; 1
    3c8a:	6c 93       	st	X, r22
    3c8c:	4e 5f       	subi	r20, 0xFE	; 254
    3c8e:	5f 4f       	sbci	r21, 0xFF	; 255
	tx_buffer[4] = addr >> 8;
	tx_buffer[5] = addr & 0xff;
	tx_frame_length = length + 6;
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    3c90:	42 17       	cp	r20, r18
    3c92:	53 07       	cpc	r21, r19
    3c94:	61 f7       	brne	.-40     	; 0x3c6e <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x5e>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length] = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	this->tx_frame_length = length * 2 + 8;
#endif
}
    3c96:	df 91       	pop	r29
    3c98:	cf 91       	pop	r28
    3c9a:	1f 91       	pop	r17
    3c9c:	0f 91       	pop	r16
    3c9e:	08 95       	ret

00003ca0 <_ZN16CMBEventsHandler13FillVarDataRqEjj>:

void CMBEventsHandler::FillVarDataRq(uint16_t addr, uint16_t length)
{
    3ca0:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    3ca2:	a4 81       	ldd	r26, Z+4	; 0x04
    3ca4:	b5 81       	ldd	r27, Z+5	; 0x05
    3ca6:	8a ea       	ldi	r24, 0xAA	; 170
    3ca8:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    3caa:	a4 81       	ldd	r26, Z+4	; 0x04
    3cac:	b5 81       	ldd	r27, Z+5	; 0x05
    3cae:	8c ec       	ldi	r24, 0xCC	; 204
    3cb0:	11 96       	adiw	r26, 0x01	; 1
    3cb2:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 6; //CMD(1) + DATA(3) + CRC(2)
#else
	tx_buffer[2] = 4; //CMD(1) + DATA(3)
    3cb4:	a4 81       	ldd	r26, Z+4	; 0x04
    3cb6:	b5 81       	ldd	r27, Z+5	; 0x05
    3cb8:	84 e0       	ldi	r24, 0x04	; 4
    3cba:	12 96       	adiw	r26, 0x02	; 2
    3cbc:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x83;				// Frame command
    3cbe:	a4 81       	ldd	r26, Z+4	; 0x04
    3cc0:	b5 81       	ldd	r27, Z+5	; 0x05
    3cc2:	83 e8       	ldi	r24, 0x83	; 131
    3cc4:	13 96       	adiw	r26, 0x03	; 3
    3cc6:	8c 93       	st	X, r24
	tx_buffer[4] = addr >> 8;			// Register address
    3cc8:	a4 81       	ldd	r26, Z+4	; 0x04
    3cca:	b5 81       	ldd	r27, Z+5	; 0x05
    3ccc:	14 96       	adiw	r26, 0x04	; 4
    3cce:	7c 93       	st	X, r23
	tx_buffer[5] = addr & 0xff;			// Register address
    3cd0:	a4 81       	ldd	r26, Z+4	; 0x04
    3cd2:	b5 81       	ldd	r27, Z+5	; 0x05
    3cd4:	15 96       	adiw	r26, 0x05	; 5
    3cd6:	6c 93       	st	X, r22
	tx_buffer[6] = length;				// Data
    3cd8:	a4 81       	ldd	r26, Z+4	; 0x04
    3cda:	b5 81       	ldd	r27, Z+5	; 0x05
    3cdc:	16 96       	adiw	r26, 0x06	; 6
    3cde:	4c 93       	st	X, r20
	tx_frame_length = 7;
    3ce0:	87 e0       	ldi	r24, 0x07	; 7
    3ce2:	81 87       	std	Z+9, r24	; 0x09
    3ce4:	08 95       	ret

00003ce6 <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
CMBEventsHandler::~CMBEventsHandler()
{
} //~CMBProtocol

void CMBEventsHandler::AllocateBuffers(uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    3ce6:	0f 93       	push	r16
    3ce8:	1f 93       	push	r17
    3cea:	cf 93       	push	r28
    3cec:	df 93       	push	r29
    3cee:	ec 01       	movw	r28, r24
    3cf0:	cb 01       	movw	r24, r22
    3cf2:	8a 01       	movw	r16, r20
	rx_bufferSize = rx_bufSize;
    3cf4:	6f 83       	std	Y+7, r22	; 0x07
    3cf6:	78 87       	std	Y+8, r23	; 0x08
	tx_bufferSize = tx_bufSize;
    3cf8:	4a 87       	std	Y+10, r20	; 0x0a
    3cfa:	5b 87       	std	Y+11, r21	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    3cfc:	0e 94 37 21 	call	0x426e	; 0x426e <malloc>
    3d00:	8a 83       	std	Y+2, r24	; 0x02
    3d02:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    3d04:	c8 01       	movw	r24, r16
    3d06:	0e 94 37 21 	call	0x426e	; 0x426e <malloc>
    3d0a:	8c 83       	std	Y+4, r24	; 0x04
    3d0c:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_frame_length  = 0x00;
    3d0e:	19 86       	std	Y+9, r1	; 0x09
	rx_frame_length  = 0x00;
    3d10:	1e 82       	std	Y+6, r1	; 0x06
}
    3d12:	df 91       	pop	r29
    3d14:	cf 91       	pop	r28
    3d16:	1f 91       	pop	r17
    3d18:	0f 91       	pop	r16
    3d1a:	08 95       	ret

00003d1c <_ZN16CMBEventsHandler11FreeBuffersEv>:

void CMBEventsHandler::FreeBuffers()
{
    3d1c:	cf 93       	push	r28
    3d1e:	df 93       	push	r29
    3d20:	ec 01       	movw	r28, r24
	free(rx_buffer);
    3d22:	8a 81       	ldd	r24, Y+2	; 0x02
    3d24:	9b 81       	ldd	r25, Y+3	; 0x03
    3d26:	0e 94 cc 21 	call	0x4398	; 0x4398 <free>
	free(tx_buffer);
    3d2a:	8c 81       	ldd	r24, Y+4	; 0x04
    3d2c:	9d 81       	ldd	r25, Y+5	; 0x05
    3d2e:	0e 94 cc 21 	call	0x4398	; 0x4398 <free>
}
    3d32:	df 91       	pop	r29
    3d34:	cf 91       	pop	r28
    3d36:	08 95       	ret

00003d38 <_ZN16CMBEventsHandlerD1Ev>:

#include "CMBProtocol.h"
#include <avr/io.h>
#include <util/crc16.h>

CMBEventsHandler::~CMBEventsHandler()
    3d38:	08 95       	ret

00003d3a <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	CMBSender::ProcessTransaction(data, length);
}

void CMBSender::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
	if (CallbackHandler != 0)
    3d3a:	dc 01       	movw	r26, r24
    3d3c:	57 96       	adiw	r26, 0x17	; 23
    3d3e:	8d 91       	ld	r24, X+
    3d40:	9c 91       	ld	r25, X
    3d42:	58 97       	sbiw	r26, 0x18	; 24
    3d44:	00 97       	sbiw	r24, 0x00	; 0
    3d46:	39 f0       	breq	.+14     	; 0x3d56 <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
		CallbackHandler->OnVariableReceived(addr, data, length);
    3d48:	dc 01       	movw	r26, r24
    3d4a:	ed 91       	ld	r30, X+
    3d4c:	fc 91       	ld	r31, X
    3d4e:	02 80       	ldd	r0, Z+2	; 0x02
    3d50:	f3 81       	ldd	r31, Z+3	; 0x03
    3d52:	e0 2d       	mov	r30, r0
    3d54:	19 95       	eicall
    3d56:	08 95       	ret

00003d58 <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
}


void CMBSender::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
	if (CallbackHandler != 0)
    3d58:	dc 01       	movw	r26, r24
    3d5a:	57 96       	adiw	r26, 0x17	; 23
    3d5c:	8d 91       	ld	r24, X+
    3d5e:	9c 91       	ld	r25, X
    3d60:	58 97       	sbiw	r26, 0x18	; 24
    3d62:	00 97       	sbiw	r24, 0x00	; 0
    3d64:	39 f0       	breq	.+14     	; 0x3d74 <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
		CallbackHandler->OnRegisterReceived(addr, data, length);
    3d66:	dc 01       	movw	r26, r24
    3d68:	ed 91       	ld	r30, X+
    3d6a:	fc 91       	ld	r31, X
    3d6c:	04 80       	ldd	r0, Z+4	; 0x04
    3d6e:	f5 81       	ldd	r31, Z+5	; 0x05
    3d70:	e0 2d       	mov	r30, r0
    3d72:	19 95       	eicall
    3d74:	08 95       	ret

00003d76 <_ZN9CMBSenderC1Ev>:
#include "CMBSender.h"
#include <avr/io.h>
#include <util/crc16.h>

// default constructor
CMBSender::CMBSender()
    3d76:	2b ed       	ldi	r18, 0xDB	; 219
    3d78:	30 e2       	ldi	r19, 0x20	; 32
    3d7a:	fc 01       	movw	r30, r24
    3d7c:	20 83       	st	Z, r18
    3d7e:	31 83       	std	Z+1, r19	; 0x01
    3d80:	08 95       	ret

00003d82 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj>:
	
}


void CMBSender::Initialize(CUSART* usart, CMBEventsHandler *handler, uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    3d82:	cf 92       	push	r12
    3d84:	df 92       	push	r13
    3d86:	ef 92       	push	r14
    3d88:	ff 92       	push	r15
    3d8a:	0f 93       	push	r16
    3d8c:	1f 93       	push	r17
    3d8e:	cf 93       	push	r28
    3d90:	df 93       	push	r29
    3d92:	ec 01       	movw	r28, r24
    3d94:	7b 01       	movw	r14, r22
    3d96:	6a 01       	movw	r12, r20
    3d98:	c9 01       	movw	r24, r18
	rx_bufferSize = rx_bufSize;
    3d9a:	2f 83       	std	Y+7, r18	; 0x07
    3d9c:	38 87       	std	Y+8, r19	; 0x08
	tx_bufferSize = tx_bufSize;
    3d9e:	0a 87       	std	Y+10, r16	; 0x0a
    3da0:	1b 87       	std	Y+11, r17	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    3da2:	0e 94 37 21 	call	0x426e	; 0x426e <malloc>
    3da6:	8a 83       	std	Y+2, r24	; 0x02
    3da8:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    3daa:	c8 01       	movw	r24, r16
    3dac:	0e 94 37 21 	call	0x426e	; 0x426e <malloc>
    3db0:	8c 83       	std	Y+4, r24	; 0x04
    3db2:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_buffer_pos    = 0x00;
    3db4:	1d 8a       	std	Y+21, r1	; 0x15
	tx_frame_length  = 0x00;
    3db6:	19 86       	std	Y+9, r1	; 0x09
	rx_buffer_pos    = 0x00;
    3db8:	1f 86       	std	Y+15, r1	; 0x0f
	rx_frame_length  = 0x00;
    3dba:	1e 82       	std	Y+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    3dbc:	18 8a       	std	Y+16, r1	; 0x10
    3dbe:	19 8a       	std	Y+17, r1	; 0x11
	rx_currt_crc     = 0x00;
    3dc0:	1a 8a       	std	Y+18, r1	; 0x12
    3dc2:	1b 8a       	std	Y+19, r1	; 0x13
	modbus_receiver_state  = rx_Idle;
    3dc4:	87 e0       	ldi	r24, 0x07	; 7
    3dc6:	8e 87       	std	Y+14, r24	; 0x0e
	modbus_transmitter_state  = tx_Idle;
    3dc8:	82 e0       	ldi	r24, 0x02	; 2
    3dca:	8c 8b       	std	Y+20, r24	; 0x14
	isTransaction = false;
    3dcc:	1e 8a       	std	Y+22, r1	; 0x16
	
	// Set usart interface interrupts
	pUSART = usart;
    3dce:	ec 86       	std	Y+12, r14	; 0x0c
    3dd0:	fd 86       	std	Y+13, r15	; 0x0d
	usart->SetRxInterruptionCallback((void*)this, OnUSARTRxInterrupt);
    3dd2:	d7 01       	movw	r26, r14
    3dd4:	ed 91       	ld	r30, X+
    3dd6:	fc 91       	ld	r31, X
    3dd8:	04 84       	ldd	r0, Z+12	; 0x0c
    3dda:	f5 85       	ldd	r31, Z+13	; 0x0d
    3ddc:	e0 2d       	mov	r30, r0
    3dde:	42 ed       	ldi	r20, 0xD2	; 210
    3de0:	5f e1       	ldi	r21, 0x1F	; 31
    3de2:	be 01       	movw	r22, r28
    3de4:	c7 01       	movw	r24, r14
    3de6:	19 95       	eicall
	usart->SetTxInterruptionCallback((void*)this, OnUSARTTxInterrupt);
    3de8:	d7 01       	movw	r26, r14
    3dea:	ed 91       	ld	r30, X+
    3dec:	fc 91       	ld	r31, X
    3dee:	06 84       	ldd	r0, Z+14	; 0x0e
    3df0:	f7 85       	ldd	r31, Z+15	; 0x0f
    3df2:	e0 2d       	mov	r30, r0
    3df4:	47 e3       	ldi	r20, 0x37	; 55
    3df6:	50 e2       	ldi	r21, 0x20	; 32
    3df8:	be 01       	movw	r22, r28
    3dfa:	c7 01       	movw	r24, r14
    3dfc:	19 95       	eicall
	
	// Set event handler
	if (handler)
    3dfe:	c1 14       	cp	r12, r1
    3e00:	d1 04       	cpc	r13, r1
    3e02:	19 f0       	breq	.+6      	; 0x3e0a <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj+0x88>
		CallbackHandler = handler;
    3e04:	cf 8a       	std	Y+23, r12	; 0x17
    3e06:	d8 8e       	std	Y+24, r13	; 0x18
    3e08:	02 c0       	rjmp	.+4      	; 0x3e0e <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj+0x8c>
	else
		CallbackHandler = this;
    3e0a:	cf 8b       	std	Y+23, r28	; 0x17
    3e0c:	d8 8f       	std	Y+24, r29	; 0x18
} //CMBSender
    3e0e:	df 91       	pop	r29
    3e10:	cf 91       	pop	r28
    3e12:	1f 91       	pop	r17
    3e14:	0f 91       	pop	r16
    3e16:	ff 90       	pop	r15
    3e18:	ef 90       	pop	r14
    3e1a:	df 90       	pop	r13
    3e1c:	cf 90       	pop	r12
    3e1e:	08 95       	ret

00003e20 <_ZN9CMBSenderD1Ev>:
	free(rx_buffer);
	free(tx_buffer);
}

// default destructor
CMBSender::~CMBSender()
    3e20:	2b ed       	ldi	r18, 0xDB	; 219
    3e22:	30 e2       	ldi	r19, 0x20	; 32
    3e24:	fc 01       	movw	r30, r24
    3e26:	20 83       	st	Z, r18
    3e28:	31 83       	std	Z+1, r19	; 0x01
    3e2a:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <_ZN16CMBEventsHandlerD1Ev>
    3e2e:	08 95       	ret

00003e30 <_ZN9CMBSender13OnReceiveByteEh>:
//void CMBSender::RequestDataFromSRAM(uint16_t addr, uint8_t length);

volatile uint16_t cnt = 0;

void CMBSender::OnReceiveByte(uint8_t data)
{
    3e30:	cf 93       	push	r28
    3e32:	df 93       	push	r29
    3e34:	ec 01       	movw	r28, r24
    3e36:	96 2f       	mov	r25, r22
	switch (modbus_receiver_state)
    3e38:	4e 85       	ldd	r20, Y+14	; 0x0e
    3e3a:	50 e0       	ldi	r21, 0x00	; 0
    3e3c:	4b 30       	cpi	r20, 0x0B	; 11
    3e3e:	51 05       	cpc	r21, r1
    3e40:	08 f0       	brcs	.+2      	; 0x3e44 <_ZN9CMBSender13OnReceiveByteEh+0x14>
    3e42:	ad c0       	rjmp	.+346    	; 0x3f9e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
    3e44:	fa 01       	movw	r30, r20
    3e46:	88 27       	eor	r24, r24
    3e48:	e3 5e       	subi	r30, 0xE3	; 227
    3e4a:	fe 4f       	sbci	r31, 0xFE	; 254
    3e4c:	8f 4f       	sbci	r24, 0xFF	; 255
    3e4e:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <__tablejump2__>
	{
		case rx_Start :
		case rx_FrameHeader0 :
			if (data == FRAMEHEADER_LOWBYTE)
    3e52:	9a 3a       	cpi	r25, 0xAA	; 170
    3e54:	19 f4       	brne	.+6      	; 0x3e5c <_ZN9CMBSender13OnReceiveByteEh+0x2c>
				modbus_receiver_state = rx_FrameHeader1;
    3e56:	82 e0       	ldi	r24, 0x02	; 2
    3e58:	8e 87       	std	Y+14, r24	; 0x0e
    3e5a:	a1 c0       	rjmp	.+322    	; 0x3f9e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    3e5c:	81 e0       	ldi	r24, 0x01	; 1
    3e5e:	8e 87       	std	Y+14, r24	; 0x0e
    3e60:	9e c0       	rjmp	.+316    	; 0x3f9e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_FrameHeader1 :
			if (data == FRAMEHEADER_HIGHBYTE)
    3e62:	9c 3c       	cpi	r25, 0xCC	; 204
    3e64:	19 f4       	brne	.+6      	; 0x3e6c <_ZN9CMBSender13OnReceiveByteEh+0x3c>
				modbus_receiver_state = rx_FrameLength;
    3e66:	83 e0       	ldi	r24, 0x03	; 3
    3e68:	8e 87       	std	Y+14, r24	; 0x0e
    3e6a:	99 c0       	rjmp	.+306    	; 0x3f9e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    3e6c:	81 e0       	ldi	r24, 0x01	; 1
    3e6e:	8e 87       	std	Y+14, r24	; 0x0e
    3e70:	96 c0       	rjmp	.+300    	; 0x3f9e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_FrameLength :
			rx_frame_length = data;
    3e72:	9e 83       	std	Y+6, r25	; 0x06
			rx_buffer_pos = 0;
    3e74:	1f 86       	std	Y+15, r1	; 0x0f
			rx_currt_crc = 0;
    3e76:	1a 8a       	std	Y+18, r1	; 0x12
    3e78:	1b 8a       	std	Y+19, r1	; 0x13
			cnt = 0;
    3e7a:	10 92 28 23 	sts	0x2328, r1
    3e7e:	10 92 29 23 	sts	0x2329, r1
			modbus_receiver_state = rx_FrameReceive;
    3e82:	84 e0       	ldi	r24, 0x04	; 4
    3e84:	8e 87       	std	Y+14, r24	; 0x0e
			break;
    3e86:	8b c0       	rjmp	.+278    	; 0x3f9e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		case rx_FrameReceive :
			rx_buffer[rx_buffer_pos] = data;
    3e88:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e8a:	ea 81       	ldd	r30, Y+2	; 0x02
    3e8c:	fb 81       	ldd	r31, Y+3	; 0x03
    3e8e:	e8 0f       	add	r30, r24
    3e90:	f1 1d       	adc	r31, r1
    3e92:	90 83       	st	Z, r25
			if (rx_buffer_pos > rx_bufferSize)
    3e94:	2f 85       	ldd	r18, Y+15	; 0x0f
    3e96:	30 e0       	ldi	r19, 0x00	; 0
    3e98:	4f 81       	ldd	r20, Y+7	; 0x07
    3e9a:	58 85       	ldd	r21, Y+8	; 0x08
    3e9c:	42 17       	cp	r20, r18
    3e9e:	53 07       	cpc	r21, r19
    3ea0:	18 f4       	brcc	.+6      	; 0x3ea8 <_ZN9CMBSender13OnReceiveByteEh+0x78>
			{
				modbus_receiver_state = rx_Error;
    3ea2:	89 e0       	ldi	r24, 0x09	; 9
    3ea4:	8e 87       	std	Y+14, r24	; 0x0e
				break;
    3ea6:	7b c0       	rjmp	.+246    	; 0x3f9e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
    3ea8:	2a 89       	ldd	r18, Y+18	; 0x12
    3eaa:	3b 89       	ldd	r19, Y+19	; 0x13
    3eac:	29 27       	eor	r18, r25
    3eae:	92 2f       	mov	r25, r18
    3eb0:	92 95       	swap	r25
    3eb2:	92 27       	eor	r25, r18
    3eb4:	09 2e       	mov	r0, r25
    3eb6:	96 95       	lsr	r25
    3eb8:	96 95       	lsr	r25
    3eba:	90 25       	eor	r25, r0
    3ebc:	09 2e       	mov	r0, r25
    3ebe:	96 95       	lsr	r25
    3ec0:	90 25       	eor	r25, r0
    3ec2:	97 70       	andi	r25, 0x07	; 7
    3ec4:	02 2e       	mov	r0, r18
    3ec6:	23 2f       	mov	r18, r19
    3ec8:	96 95       	lsr	r25
    3eca:	07 94       	ror	r0
    3ecc:	97 95       	ror	r25
    3ece:	30 2d       	mov	r19, r0
    3ed0:	29 27       	eor	r18, r25
    3ed2:	06 94       	lsr	r0
    3ed4:	97 95       	ror	r25
    3ed6:	30 25       	eor	r19, r0
    3ed8:	29 27       	eor	r18, r25
			}
			rx_currt_crc = _crc16_update(rx_currt_crc, data);
    3eda:	2a 8b       	std	Y+18, r18	; 0x12
    3edc:	3b 8b       	std	Y+19, r19	; 0x13
			rx_buffer_pos++;
    3ede:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ee0:	8f 5f       	subi	r24, 0xFF	; 255
    3ee2:	8f 87       	std	Y+15, r24	; 0x0f
			cnt++;
    3ee4:	80 91 28 23 	lds	r24, 0x2328
    3ee8:	90 91 29 23 	lds	r25, 0x2329
    3eec:	01 96       	adiw	r24, 0x01	; 1
    3eee:	80 93 28 23 	sts	0x2328, r24
    3ef2:	90 93 29 23 	sts	0x2329, r25
			if (rx_buffer_pos == rx_frame_length)
    3ef6:	4f 85       	ldd	r20, Y+15	; 0x0f
    3ef8:	8e 81       	ldd	r24, Y+6	; 0x06
    3efa:	48 13       	cpse	r20, r24
    3efc:	50 c0       	rjmp	.+160    	; 0x3f9e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			{
#ifdef USE_CRC
				modbus_receiver_state = rx_CRC0;
#else
				modbus_receiver_state = rx_Complete;
    3efe:	88 e0       	ldi	r24, 0x08	; 8
    3f00:	8e 87       	std	Y+14, r24	; 0x0e
#endif
				OnTransactionCallback(rx_buffer, rx_frame_length);
    3f02:	e8 81       	ld	r30, Y
    3f04:	f9 81       	ldd	r31, Y+1	; 0x01
    3f06:	50 e0       	ldi	r21, 0x00	; 0
    3f08:	6a 81       	ldd	r22, Y+2	; 0x02
    3f0a:	7b 81       	ldd	r23, Y+3	; 0x03
    3f0c:	01 90       	ld	r0, Z+
    3f0e:	f0 81       	ld	r31, Z
    3f10:	e0 2d       	mov	r30, r0
    3f12:	ce 01       	movw	r24, r28
    3f14:	19 95       	eicall
				if (CallbackHandler != 0)
    3f16:	8f 89       	ldd	r24, Y+23	; 0x17
    3f18:	98 8d       	ldd	r25, Y+24	; 0x18
    3f1a:	00 97       	sbiw	r24, 0x00	; 0
    3f1c:	09 f4       	brne	.+2      	; 0x3f20 <_ZN9CMBSender13OnReceiveByteEh+0xf0>
    3f1e:	3f c0       	rjmp	.+126    	; 0x3f9e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    3f20:	dc 01       	movw	r26, r24
    3f22:	ed 91       	ld	r30, X+
    3f24:	fc 91       	ld	r31, X
    3f26:	4e 81       	ldd	r20, Y+6	; 0x06
    3f28:	50 e0       	ldi	r21, 0x00	; 0
    3f2a:	6a 81       	ldd	r22, Y+2	; 0x02
    3f2c:	7b 81       	ldd	r23, Y+3	; 0x03
    3f2e:	01 90       	ld	r0, Z+
    3f30:	f0 81       	ld	r31, Z
    3f32:	e0 2d       	mov	r30, r0
    3f34:	19 95       	eicall
    3f36:	33 c0       	rjmp	.+102    	; 0x3f9e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			}
			break;
		case rx_CRC0 :
			rx_frame_crc = data;
    3f38:	69 2f       	mov	r22, r25
    3f3a:	70 e0       	ldi	r23, 0x00	; 0
    3f3c:	68 8b       	std	Y+16, r22	; 0x10
    3f3e:	79 8b       	std	Y+17, r23	; 0x11
			modbus_receiver_state = rx_CRC1;
    3f40:	86 e0       	ldi	r24, 0x06	; 6
    3f42:	8e 87       	std	Y+14, r24	; 0x0e
			break;
    3f44:	2c c0       	rjmp	.+88     	; 0x3f9e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		case rx_CRC1 :
			rx_frame_crc |= (data << 8);
    3f46:	28 89       	ldd	r18, Y+16	; 0x10
    3f48:	39 89       	ldd	r19, Y+17	; 0x11
    3f4a:	a9 01       	movw	r20, r18
    3f4c:	59 2b       	or	r21, r25
    3f4e:	48 8b       	std	Y+16, r20	; 0x10
    3f50:	59 8b       	std	Y+17, r21	; 0x11
			if (rx_currt_crc == rx_frame_crc)
    3f52:	2a 89       	ldd	r18, Y+18	; 0x12
    3f54:	3b 89       	ldd	r19, Y+19	; 0x13
    3f56:	42 17       	cp	r20, r18
    3f58:	53 07       	cpc	r21, r19
    3f5a:	e9 f4       	brne	.+58     	; 0x3f96 <_ZN9CMBSender13OnReceiveByteEh+0x166>
			{
				modbus_receiver_state = rx_Complete;
    3f5c:	88 e0       	ldi	r24, 0x08	; 8
    3f5e:	8e 87       	std	Y+14, r24	; 0x0e
				
				OnTransactionCallback(rx_buffer, rx_frame_length);
    3f60:	e8 81       	ld	r30, Y
    3f62:	f9 81       	ldd	r31, Y+1	; 0x01
    3f64:	4e 81       	ldd	r20, Y+6	; 0x06
    3f66:	50 e0       	ldi	r21, 0x00	; 0
    3f68:	6a 81       	ldd	r22, Y+2	; 0x02
    3f6a:	7b 81       	ldd	r23, Y+3	; 0x03
    3f6c:	01 90       	ld	r0, Z+
    3f6e:	f0 81       	ld	r31, Z
    3f70:	e0 2d       	mov	r30, r0
    3f72:	ce 01       	movw	r24, r28
    3f74:	19 95       	eicall
				if (CallbackHandler != 0)
    3f76:	8f 89       	ldd	r24, Y+23	; 0x17
    3f78:	98 8d       	ldd	r25, Y+24	; 0x18
    3f7a:	00 97       	sbiw	r24, 0x00	; 0
    3f7c:	81 f0       	breq	.+32     	; 0x3f9e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    3f7e:	dc 01       	movw	r26, r24
    3f80:	ed 91       	ld	r30, X+
    3f82:	fc 91       	ld	r31, X
    3f84:	4e 81       	ldd	r20, Y+6	; 0x06
    3f86:	50 e0       	ldi	r21, 0x00	; 0
    3f88:	6a 81       	ldd	r22, Y+2	; 0x02
    3f8a:	7b 81       	ldd	r23, Y+3	; 0x03
    3f8c:	01 90       	ld	r0, Z+
    3f8e:	f0 81       	ld	r31, Z
    3f90:	e0 2d       	mov	r30, r0
    3f92:	19 95       	eicall
    3f94:	04 c0       	rjmp	.+8      	; 0x3f9e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			}
			else
				modbus_receiver_state = rx_Error;
    3f96:	89 e0       	ldi	r24, 0x09	; 9
    3f98:	8e 87       	std	Y+14, r24	; 0x0e
    3f9a:	01 c0       	rjmp	.+2      	; 0x3f9e <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_Error :
		case rx_TimeOut :
			isTransaction = false;
    3f9c:	1e 8a       	std	Y+22, r1	; 0x16
		case rx_Complete :
		case rx_Idle :
		default:
		break;
	};
}
    3f9e:	df 91       	pop	r29
    3fa0:	cf 91       	pop	r28
    3fa2:	08 95       	ret

00003fa4 <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
{
	modbus_transmitter_state = tx_Idle;
}

void CMBSender::OnUSARTRxInterrupt(void* sender)
{
    3fa4:	cf 93       	push	r28
    3fa6:	df 93       	push	r29
    3fa8:	ec 01       	movw	r28, r24
	CMBSender* owner = (CMBSender*)sender;
	uint8_t data = owner->pUSART->GetReceivedByte();
    3faa:	8c 85       	ldd	r24, Y+12	; 0x0c
    3fac:	9d 85       	ldd	r25, Y+13	; 0x0d
    3fae:	dc 01       	movw	r26, r24
    3fb0:	ed 91       	ld	r30, X+
    3fb2:	fc 91       	ld	r31, X
    3fb4:	02 80       	ldd	r0, Z+2	; 0x02
    3fb6:	f3 81       	ldd	r31, Z+3	; 0x03
    3fb8:	e0 2d       	mov	r30, r0
    3fba:	19 95       	eicall
	owner->OnReceiveByte(data);
    3fbc:	68 2f       	mov	r22, r24
    3fbe:	ce 01       	movw	r24, r28
    3fc0:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <_ZN9CMBSender13OnReceiveByteEh>
}
    3fc4:	df 91       	pop	r29
    3fc6:	cf 91       	pop	r28
    3fc8:	08 95       	ret

00003fca <_ZN9CMBSender19StartMODBUSListenerEv>:
	if (modbus_receiver_state != rx_Complete)
		modbus_receiver_state = rx_TimeOut;
}

void CMBSender::StartMODBUSListener()
{
    3fca:	fc 01       	movw	r30, r24
	rx_buffer_pos    = 0x00;
    3fcc:	17 86       	std	Z+15, r1	; 0x0f
	rx_frame_length  = 0x00;
    3fce:	16 82       	std	Z+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    3fd0:	10 8a       	std	Z+16, r1	; 0x10
    3fd2:	11 8a       	std	Z+17, r1	; 0x11
	rx_currt_crc     = 0x00;
    3fd4:	12 8a       	std	Z+18, r1	; 0x12
    3fd6:	13 8a       	std	Z+19, r1	; 0x13
	modbus_receiver_state  = rx_Start;
    3fd8:	16 86       	std	Z+14, r1	; 0x0e
    3fda:	08 95       	ret

00003fdc <_ZN9CMBSender14OnTransmitByteEv>:
		break;
	};
}

void CMBSender::OnTransmitByte()
{
    3fdc:	cf 93       	push	r28
    3fde:	df 93       	push	r29
    3fe0:	ec 01       	movw	r28, r24
	switch (modbus_transmitter_state)
    3fe2:	8c 89       	ldd	r24, Y+20	; 0x14
    3fe4:	84 30       	cpi	r24, 0x04	; 4
    3fe6:	38 f4       	brcc	.+14     	; 0x3ff6 <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    3fe8:	82 30       	cpi	r24, 0x02	; 2
    3fea:	b8 f5       	brcc	.+110    	; 0x405a <__stack+0x5b>
    3fec:	88 23       	and	r24, r24
    3fee:	31 f0       	breq	.+12     	; 0x3ffc <_ZN9CMBSender14OnTransmitByteEv+0x20>
    3ff0:	81 30       	cpi	r24, 0x01	; 1
    3ff2:	d1 f0       	breq	.+52     	; 0x4028 <__stack+0x29>
    3ff4:	39 c0       	rjmp	.+114    	; 0x4068 <__stack+0x69>
    3ff6:	85 30       	cpi	r24, 0x05	; 5
    3ff8:	81 f1       	breq	.+96     	; 0x405a <__stack+0x5b>
    3ffa:	36 c0       	rjmp	.+108    	; 0x4068 <__stack+0x69>
	{
		case tx_Start :
			modbus_transmitter_state = tx_Transmitting; // Start receiving packet
    3ffc:	81 e0       	ldi	r24, 0x01	; 1
    3ffe:	8c 8b       	std	Y+20, r24	; 0x14
			tx_buffer_pos = 0;
    4000:	1d 8a       	std	Y+21, r1	; 0x15
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    4002:	8c 85       	ldd	r24, Y+12	; 0x0c
    4004:	9d 85       	ldd	r25, Y+13	; 0x0d
    4006:	2d 89       	ldd	r18, Y+21	; 0x15
    4008:	dc 01       	movw	r26, r24
    400a:	ed 91       	ld	r30, X+
    400c:	fc 91       	ld	r31, X
    400e:	ac 81       	ldd	r26, Y+4	; 0x04
    4010:	bd 81       	ldd	r27, Y+5	; 0x05
    4012:	a2 0f       	add	r26, r18
    4014:	b1 1d       	adc	r27, r1
    4016:	04 80       	ldd	r0, Z+4	; 0x04
    4018:	f5 81       	ldd	r31, Z+5	; 0x05
    401a:	e0 2d       	mov	r30, r0
    401c:	6c 91       	ld	r22, X
    401e:	19 95       	eicall
			tx_buffer_pos++;
    4020:	8d 89       	ldd	r24, Y+21	; 0x15
    4022:	8f 5f       	subi	r24, 0xFF	; 255
    4024:	8d 8b       	std	Y+21, r24	; 0x15
			break;
    4026:	20 c0       	rjmp	.+64     	; 0x4068 <__stack+0x69>
		case tx_Transmitting :
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    4028:	8c 85       	ldd	r24, Y+12	; 0x0c
    402a:	9d 85       	ldd	r25, Y+13	; 0x0d
    402c:	2d 89       	ldd	r18, Y+21	; 0x15
    402e:	dc 01       	movw	r26, r24
    4030:	ed 91       	ld	r30, X+
    4032:	fc 91       	ld	r31, X
    4034:	ac 81       	ldd	r26, Y+4	; 0x04
    4036:	bd 81       	ldd	r27, Y+5	; 0x05
    4038:	a2 0f       	add	r26, r18
    403a:	b1 1d       	adc	r27, r1
    403c:	04 80       	ldd	r0, Z+4	; 0x04
    403e:	f5 81       	ldd	r31, Z+5	; 0x05
    4040:	e0 2d       	mov	r30, r0
    4042:	6c 91       	ld	r22, X
    4044:	19 95       	eicall
			tx_buffer_pos++;
    4046:	8d 89       	ldd	r24, Y+21	; 0x15
    4048:	8f 5f       	subi	r24, 0xFF	; 255
    404a:	8d 8b       	std	Y+21, r24	; 0x15
			if (tx_buffer_pos == tx_frame_length)
    404c:	9d 89       	ldd	r25, Y+21	; 0x15
    404e:	89 85       	ldd	r24, Y+9	; 0x09
    4050:	98 13       	cpse	r25, r24
    4052:	0a c0       	rjmp	.+20     	; 0x4068 <__stack+0x69>
				modbus_transmitter_state = tx_Complete;
    4054:	83 e0       	ldi	r24, 0x03	; 3
    4056:	8c 8b       	std	Y+20, r24	; 0x14
    4058:	07 c0       	rjmp	.+14     	; 0x4068 <__stack+0x69>
			break;
		case tx_Idle :
		case tx_TimeOut :
		case tx_Complete :
			if (isTransaction)
    405a:	8e 89       	ldd	r24, Y+22	; 0x16
    405c:	88 23       	and	r24, r24
    405e:	19 f0       	breq	.+6      	; 0x4066 <__stack+0x67>
				StartMODBUSListener();
    4060:	ce 01       	movw	r24, r28
    4062:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <_ZN9CMBSender19StartMODBUSListenerEv>
			isTransaction = false;
    4066:	1e 8a       	std	Y+22, r1	; 0x16
		default :
		break;
	}
}
    4068:	df 91       	pop	r29
    406a:	cf 91       	pop	r28
    406c:	08 95       	ret

0000406e <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
}

void CMBSender::OnUSARTTxInterrupt(void* sender)
{
	CMBSender* owner = (CMBSender*)sender;
	owner->OnTransmitByte();
    406e:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <_ZN9CMBSender14OnTransmitByteEv>
    4072:	08 95       	ret

00004074 <_ZN9CMBSender18WaitMODBUSListenerEv>:
	rx_currt_crc     = 0x00;
	modbus_receiver_state  = rx_Start;
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
    4074:	fc 01       	movw	r30, r24
	while (modbus_receiver_state != rx_Complete)
    4076:	06 c0       	rjmp	.+12     	; 0x4084 <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
	{
		if (modbus_receiver_state == rx_Error)
    4078:	86 85       	ldd	r24, Z+14	; 0x0e
    407a:	89 30       	cpi	r24, 0x09	; 9
    407c:	41 f0       	breq	.+16     	; 0x408e <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
    407e:	86 85       	ldd	r24, Z+14	; 0x0e
    4080:	8a 30       	cpi	r24, 0x0A	; 10
    4082:	39 f0       	breq	.+14     	; 0x4092 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
	modbus_receiver_state  = rx_Start;
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
    4084:	86 85       	ldd	r24, Z+14	; 0x0e
    4086:	88 30       	cpi	r24, 0x08	; 8
    4088:	b9 f7       	brne	.-18     	; 0x4078 <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
		if (modbus_receiver_state == rx_Error)
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
	}
	return Complete;
    408a:	81 e0       	ldi	r24, 0x01	; 1
    408c:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
	{
		if (modbus_receiver_state == rx_Error)
			return Error;
    408e:	82 e0       	ldi	r24, 0x02	; 2
    4090:	08 95       	ret
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
    4092:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    4094:	08 95       	ret

00004096 <_ZN9CMBSender22StartMODBUSTransmitterEv>:
	modbus_receiver_state  = rx_Idle;
}

void CMBSender::StartMODBUSTransmitter()
{
	tx_buffer_pos = 0x00;
    4096:	fc 01       	movw	r30, r24
    4098:	15 8a       	std	Z+21, r1	; 0x15
	modbus_transmitter_state  = tx_Start;
    409a:	14 8a       	std	Z+20, r1	; 0x14
	OnTransmitByte();
    409c:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <_ZN9CMBSender14OnTransmitByteEv>
    40a0:	08 95       	ret

000040a2 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
{
} //~CMBSender

// MODBUS write data to register command
void CMBSender::WriteDataToRegisterAsync(uint8_t addr, uint8_t* data, uint8_t length)
{
    40a2:	cf 93       	push	r28
    40a4:	df 93       	push	r29
    40a6:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataTx(addr, data, length);
    40a8:	e8 81       	ld	r30, Y
    40aa:	f9 81       	ldd	r31, Y+1	; 0x01
    40ac:	02 84       	ldd	r0, Z+10	; 0x0a
    40ae:	f3 85       	ldd	r31, Z+11	; 0x0b
    40b0:	e0 2d       	mov	r30, r0
    40b2:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    40b4:	ce 01       	movw	r24, r28
    40b6:	0e 94 4b 20 	call	0x4096	; 0x4096 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    40ba:	df 91       	pop	r29
    40bc:	cf 91       	pop	r28
    40be:	08 95       	ret

000040c0 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:

void CMBSender::WriteDataToSRAMAsync(uint16_t addr, uint16_t* data, uint16_t length)
{
    40c0:	cf 93       	push	r28
    40c2:	df 93       	push	r29
    40c4:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataTx(addr, data, length);
    40c6:	e8 81       	ld	r30, Y
    40c8:	f9 81       	ldd	r31, Y+1	; 0x01
    40ca:	06 84       	ldd	r0, Z+14	; 0x0e
    40cc:	f7 85       	ldd	r31, Z+15	; 0x0f
    40ce:	e0 2d       	mov	r30, r0
    40d0:	19 95       	eicall
		
	// Start transition
	StartMODBUSTransmitter();
    40d2:	ce 01       	movw	r24, r28
    40d4:	0e 94 4b 20 	call	0x4096	; 0x4096 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    40d8:	df 91       	pop	r29
    40da:	cf 91       	pop	r28
    40dc:	08 95       	ret

000040de <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:

void CMBSender::RequestDataFromRegisterAsync(uint8_t addr, uint8_t length)
{
    40de:	cf 93       	push	r28
    40e0:	df 93       	push	r29
    40e2:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataRq(addr, length);
    40e4:	e8 81       	ld	r30, Y
    40e6:	f9 81       	ldd	r31, Y+1	; 0x01
    40e8:	04 84       	ldd	r0, Z+12	; 0x0c
    40ea:	f5 85       	ldd	r31, Z+13	; 0x0d
    40ec:	e0 2d       	mov	r30, r0
    40ee:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    40f0:	ce 01       	movw	r24, r28
    40f2:	0e 94 4b 20 	call	0x4096	; 0x4096 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    40f6:	df 91       	pop	r29
    40f8:	cf 91       	pop	r28
    40fa:	08 95       	ret

000040fc <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:

void CMBSender::RequestDataFromSRAMAsync(uint16_t addr, uint8_t length)
{
    40fc:	cf 93       	push	r28
    40fe:	df 93       	push	r29
    4100:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataRq(addr, length);
    4102:	e8 81       	ld	r30, Y
    4104:	f9 81       	ldd	r31, Y+1	; 0x01
    4106:	50 e0       	ldi	r21, 0x00	; 0
    4108:	00 88       	ldd	r0, Z+16	; 0x10
    410a:	f1 89       	ldd	r31, Z+17	; 0x11
    410c:	e0 2d       	mov	r30, r0
    410e:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    4110:	ce 01       	movw	r24, r28
    4112:	0e 94 4b 20 	call	0x4096	; 0x4096 <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    4116:	df 91       	pop	r29
    4118:	cf 91       	pop	r28
    411a:	08 95       	ret

0000411c <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
	modbus_transmitter_state  = tx_Start;
	OnTransmitByte();
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
    411c:	fc 01       	movw	r30, r24
	while (modbus_transmitter_state != tx_Complete)
    411e:	06 c0       	rjmp	.+12     	; 0x412c <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
	{
		if (modbus_transmitter_state == tx_Error)
    4120:	84 89       	ldd	r24, Z+20	; 0x14
    4122:	84 30       	cpi	r24, 0x04	; 4
    4124:	41 f0       	breq	.+16     	; 0x4136 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
    4126:	84 89       	ldd	r24, Z+20	; 0x14
    4128:	85 30       	cpi	r24, 0x05	; 5
    412a:	39 f0       	breq	.+14     	; 0x413a <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
	OnTransmitByte();
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
    412c:	84 89       	ldd	r24, Z+20	; 0x14
    412e:	83 30       	cpi	r24, 0x03	; 3
    4130:	b9 f7       	brne	.-18     	; 0x4120 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
		if (modbus_transmitter_state == tx_Error)
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
	}
	return Complete;
    4132:	81 e0       	ldi	r24, 0x01	; 1
    4134:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
	{
		if (modbus_transmitter_state == tx_Error)
		return Error;
    4136:	82 e0       	ldi	r24, 0x02	; 2
    4138:	08 95       	ret
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
    413a:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    413c:	08 95       	ret

0000413e <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTransmitByte();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    413e:	21 e0       	ldi	r18, 0x01	; 1
    4140:	fc 01       	movw	r30, r24
    4142:	26 8b       	std	Z+22, r18	; 0x16
	RequestDataFromRegisterAsync(addr, length);
    4144:	0e 94 6f 20 	call	0x40de	; 0x40de <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    4148:	08 95       	ret

0000414a <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    414a:	21 e0       	ldi	r18, 0x01	; 1
    414c:	fc 01       	movw	r30, r24
    414e:	26 8b       	std	Z+22, r18	; 0x16
	RequestDataFromSRAMAsync(addr, length);
    4150:	0e 94 7e 20 	call	0x40fc	; 0x40fc <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    4154:	08 95       	ret

00004156 <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    4156:	0f 93       	push	r16
    4158:	1f 93       	push	r17
    415a:	cf 93       	push	r28
    415c:	df 93       	push	r29
    415e:	8c 01       	movw	r16, r24
    4160:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    4162:	98 81       	ld	r25, Y
    4164:	91 38       	cpi	r25, 0x81	; 129
    4166:	69 f4       	brne	.+26     	; 0x4182 <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    4168:	d8 01       	movw	r26, r16
    416a:	ed 91       	ld	r30, X+
    416c:	fc 91       	ld	r31, X
    416e:	04 80       	ldd	r0, Z+4	; 0x04
    4170:	f5 81       	ldd	r31, Z+5	; 0x05
    4172:	e0 2d       	mov	r30, r0
    4174:	2a 81       	ldd	r18, Y+2	; 0x02
    4176:	ab 01       	movw	r20, r22
    4178:	4d 5f       	subi	r20, 0xFD	; 253
    417a:	5f 4f       	sbci	r21, 0xFF	; 255
    417c:	69 81       	ldd	r22, Y+1	; 0x01
    417e:	c8 01       	movw	r24, r16
    4180:	19 95       	eicall
	}
	if (data[0] == 0x83)
    4182:	98 81       	ld	r25, Y
    4184:	93 38       	cpi	r25, 0x83	; 131
    4186:	99 f4       	brne	.+38     	; 0x41ae <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], data[3]);
    4188:	d8 01       	movw	r26, r16
    418a:	ed 91       	ld	r30, X+
    418c:	fc 91       	ld	r31, X
    418e:	2b 81       	ldd	r18, Y+3	; 0x03
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	ae 01       	movw	r20, r28
    4194:	4c 5f       	subi	r20, 0xFC	; 252
    4196:	5f 4f       	sbci	r21, 0xFF	; 255
    4198:	69 81       	ldd	r22, Y+1	; 0x01
    419a:	70 e0       	ldi	r23, 0x00	; 0
    419c:	76 2f       	mov	r23, r22
    419e:	66 27       	eor	r22, r22
    41a0:	8a 81       	ldd	r24, Y+2	; 0x02
    41a2:	68 2b       	or	r22, r24
    41a4:	02 80       	ldd	r0, Z+2	; 0x02
    41a6:	f3 81       	ldd	r31, Z+3	; 0x03
    41a8:	e0 2d       	mov	r30, r0
    41aa:	c8 01       	movw	r24, r16
    41ac:	19 95       	eicall
	}
}
    41ae:	df 91       	pop	r29
    41b0:	cf 91       	pop	r28
    41b2:	1f 91       	pop	r17
    41b4:	0f 91       	pop	r16
    41b6:	08 95       	ret

000041b8 <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    41b8:	0e 94 ab 20 	call	0x4156	; 0x4156 <_ZN9CMBSender18ProcessTransactionEPhj>
    41bc:	08 95       	ret

000041be <__divmodsi4>:
    41be:	05 2e       	mov	r0, r21
    41c0:	97 fb       	bst	r25, 7
    41c2:	1e f4       	brtc	.+6      	; 0x41ca <__divmodsi4+0xc>
    41c4:	00 94       	com	r0
    41c6:	0e 94 f6 20 	call	0x41ec	; 0x41ec <__negsi2>
    41ca:	57 fd       	sbrc	r21, 7
    41cc:	07 d0       	rcall	.+14     	; 0x41dc <__divmodsi4_neg2>
    41ce:	0e 94 15 21 	call	0x422a	; 0x422a <__udivmodsi4>
    41d2:	07 fc       	sbrc	r0, 7
    41d4:	03 d0       	rcall	.+6      	; 0x41dc <__divmodsi4_neg2>
    41d6:	4e f4       	brtc	.+18     	; 0x41ea <__divmodsi4_exit>
    41d8:	0c 94 f6 20 	jmp	0x41ec	; 0x41ec <__negsi2>

000041dc <__divmodsi4_neg2>:
    41dc:	50 95       	com	r21
    41de:	40 95       	com	r20
    41e0:	30 95       	com	r19
    41e2:	21 95       	neg	r18
    41e4:	3f 4f       	sbci	r19, 0xFF	; 255
    41e6:	4f 4f       	sbci	r20, 0xFF	; 255
    41e8:	5f 4f       	sbci	r21, 0xFF	; 255

000041ea <__divmodsi4_exit>:
    41ea:	08 95       	ret

000041ec <__negsi2>:
    41ec:	90 95       	com	r25
    41ee:	80 95       	com	r24
    41f0:	70 95       	com	r23
    41f2:	61 95       	neg	r22
    41f4:	7f 4f       	sbci	r23, 0xFF	; 255
    41f6:	8f 4f       	sbci	r24, 0xFF	; 255
    41f8:	9f 4f       	sbci	r25, 0xFF	; 255
    41fa:	08 95       	ret

000041fc <__tablejump2__>:
    41fc:	ee 0f       	add	r30, r30
    41fe:	ff 1f       	adc	r31, r31
    4200:	88 1f       	adc	r24, r24
    4202:	8b bf       	out	0x3b, r24	; 59
    4204:	07 90       	elpm	r0, Z+
    4206:	f6 91       	elpm	r31, Z
    4208:	e0 2d       	mov	r30, r0
    420a:	19 94       	eijmp

0000420c <__umulhisi3>:
    420c:	a2 9f       	mul	r26, r18
    420e:	b0 01       	movw	r22, r0
    4210:	b3 9f       	mul	r27, r19
    4212:	c0 01       	movw	r24, r0
    4214:	a3 9f       	mul	r26, r19
    4216:	70 0d       	add	r23, r0
    4218:	81 1d       	adc	r24, r1
    421a:	11 24       	eor	r1, r1
    421c:	91 1d       	adc	r25, r1
    421e:	b2 9f       	mul	r27, r18
    4220:	70 0d       	add	r23, r0
    4222:	81 1d       	adc	r24, r1
    4224:	11 24       	eor	r1, r1
    4226:	91 1d       	adc	r25, r1
    4228:	08 95       	ret

0000422a <__udivmodsi4>:
    422a:	a1 e2       	ldi	r26, 0x21	; 33
    422c:	1a 2e       	mov	r1, r26
    422e:	aa 1b       	sub	r26, r26
    4230:	bb 1b       	sub	r27, r27
    4232:	fd 01       	movw	r30, r26
    4234:	0d c0       	rjmp	.+26     	; 0x4250 <__udivmodsi4_ep>

00004236 <__udivmodsi4_loop>:
    4236:	aa 1f       	adc	r26, r26
    4238:	bb 1f       	adc	r27, r27
    423a:	ee 1f       	adc	r30, r30
    423c:	ff 1f       	adc	r31, r31
    423e:	a2 17       	cp	r26, r18
    4240:	b3 07       	cpc	r27, r19
    4242:	e4 07       	cpc	r30, r20
    4244:	f5 07       	cpc	r31, r21
    4246:	20 f0       	brcs	.+8      	; 0x4250 <__udivmodsi4_ep>
    4248:	a2 1b       	sub	r26, r18
    424a:	b3 0b       	sbc	r27, r19
    424c:	e4 0b       	sbc	r30, r20
    424e:	f5 0b       	sbc	r31, r21

00004250 <__udivmodsi4_ep>:
    4250:	66 1f       	adc	r22, r22
    4252:	77 1f       	adc	r23, r23
    4254:	88 1f       	adc	r24, r24
    4256:	99 1f       	adc	r25, r25
    4258:	1a 94       	dec	r1
    425a:	69 f7       	brne	.-38     	; 0x4236 <__udivmodsi4_loop>
    425c:	60 95       	com	r22
    425e:	70 95       	com	r23
    4260:	80 95       	com	r24
    4262:	90 95       	com	r25
    4264:	9b 01       	movw	r18, r22
    4266:	ac 01       	movw	r20, r24
    4268:	bd 01       	movw	r22, r26
    426a:	cf 01       	movw	r24, r30
    426c:	08 95       	ret

0000426e <malloc>:
    426e:	cf 93       	push	r28
    4270:	df 93       	push	r29
    4272:	82 30       	cpi	r24, 0x02	; 2
    4274:	91 05       	cpc	r25, r1
    4276:	10 f4       	brcc	.+4      	; 0x427c <malloc+0xe>
    4278:	82 e0       	ldi	r24, 0x02	; 2
    427a:	90 e0       	ldi	r25, 0x00	; 0
    427c:	e0 91 2c 23 	lds	r30, 0x232C
    4280:	f0 91 2d 23 	lds	r31, 0x232D
    4284:	20 e0       	ldi	r18, 0x00	; 0
    4286:	30 e0       	ldi	r19, 0x00	; 0
    4288:	c0 e0       	ldi	r28, 0x00	; 0
    428a:	d0 e0       	ldi	r29, 0x00	; 0
    428c:	30 97       	sbiw	r30, 0x00	; 0
    428e:	11 f1       	breq	.+68     	; 0x42d4 <malloc+0x66>
    4290:	40 81       	ld	r20, Z
    4292:	51 81       	ldd	r21, Z+1	; 0x01
    4294:	48 17       	cp	r20, r24
    4296:	59 07       	cpc	r21, r25
    4298:	c0 f0       	brcs	.+48     	; 0x42ca <malloc+0x5c>
    429a:	48 17       	cp	r20, r24
    429c:	59 07       	cpc	r21, r25
    429e:	61 f4       	brne	.+24     	; 0x42b8 <malloc+0x4a>
    42a0:	82 81       	ldd	r24, Z+2	; 0x02
    42a2:	93 81       	ldd	r25, Z+3	; 0x03
    42a4:	20 97       	sbiw	r28, 0x00	; 0
    42a6:	19 f0       	breq	.+6      	; 0x42ae <malloc+0x40>
    42a8:	8a 83       	std	Y+2, r24	; 0x02
    42aa:	9b 83       	std	Y+3, r25	; 0x03
    42ac:	2b c0       	rjmp	.+86     	; 0x4304 <malloc+0x96>
    42ae:	80 93 2c 23 	sts	0x232C, r24
    42b2:	90 93 2d 23 	sts	0x232D, r25
    42b6:	26 c0       	rjmp	.+76     	; 0x4304 <malloc+0x96>
    42b8:	21 15       	cp	r18, r1
    42ba:	31 05       	cpc	r19, r1
    42bc:	19 f0       	breq	.+6      	; 0x42c4 <malloc+0x56>
    42be:	42 17       	cp	r20, r18
    42c0:	53 07       	cpc	r21, r19
    42c2:	18 f4       	brcc	.+6      	; 0x42ca <malloc+0x5c>
    42c4:	9a 01       	movw	r18, r20
    42c6:	be 01       	movw	r22, r28
    42c8:	df 01       	movw	r26, r30
    42ca:	ef 01       	movw	r28, r30
    42cc:	02 80       	ldd	r0, Z+2	; 0x02
    42ce:	f3 81       	ldd	r31, Z+3	; 0x03
    42d0:	e0 2d       	mov	r30, r0
    42d2:	dc cf       	rjmp	.-72     	; 0x428c <malloc+0x1e>
    42d4:	21 15       	cp	r18, r1
    42d6:	31 05       	cpc	r19, r1
    42d8:	09 f1       	breq	.+66     	; 0x431c <malloc+0xae>
    42da:	28 1b       	sub	r18, r24
    42dc:	39 0b       	sbc	r19, r25
    42de:	24 30       	cpi	r18, 0x04	; 4
    42e0:	31 05       	cpc	r19, r1
    42e2:	90 f4       	brcc	.+36     	; 0x4308 <malloc+0x9a>
    42e4:	12 96       	adiw	r26, 0x02	; 2
    42e6:	8d 91       	ld	r24, X+
    42e8:	9c 91       	ld	r25, X
    42ea:	13 97       	sbiw	r26, 0x03	; 3
    42ec:	61 15       	cp	r22, r1
    42ee:	71 05       	cpc	r23, r1
    42f0:	21 f0       	breq	.+8      	; 0x42fa <malloc+0x8c>
    42f2:	fb 01       	movw	r30, r22
    42f4:	82 83       	std	Z+2, r24	; 0x02
    42f6:	93 83       	std	Z+3, r25	; 0x03
    42f8:	04 c0       	rjmp	.+8      	; 0x4302 <malloc+0x94>
    42fa:	80 93 2c 23 	sts	0x232C, r24
    42fe:	90 93 2d 23 	sts	0x232D, r25
    4302:	fd 01       	movw	r30, r26
    4304:	32 96       	adiw	r30, 0x02	; 2
    4306:	44 c0       	rjmp	.+136    	; 0x4390 <malloc+0x122>
    4308:	fd 01       	movw	r30, r26
    430a:	e2 0f       	add	r30, r18
    430c:	f3 1f       	adc	r31, r19
    430e:	81 93       	st	Z+, r24
    4310:	91 93       	st	Z+, r25
    4312:	22 50       	subi	r18, 0x02	; 2
    4314:	31 09       	sbc	r19, r1
    4316:	2d 93       	st	X+, r18
    4318:	3c 93       	st	X, r19
    431a:	3a c0       	rjmp	.+116    	; 0x4390 <malloc+0x122>
    431c:	20 91 2a 23 	lds	r18, 0x232A
    4320:	30 91 2b 23 	lds	r19, 0x232B
    4324:	23 2b       	or	r18, r19
    4326:	41 f4       	brne	.+16     	; 0x4338 <malloc+0xca>
    4328:	20 91 02 20 	lds	r18, 0x2002
    432c:	30 91 03 20 	lds	r19, 0x2003
    4330:	20 93 2a 23 	sts	0x232A, r18
    4334:	30 93 2b 23 	sts	0x232B, r19
    4338:	20 91 00 20 	lds	r18, 0x2000
    433c:	30 91 01 20 	lds	r19, 0x2001
    4340:	21 15       	cp	r18, r1
    4342:	31 05       	cpc	r19, r1
    4344:	41 f4       	brne	.+16     	; 0x4356 <malloc+0xe8>
    4346:	2d b7       	in	r18, 0x3d	; 61
    4348:	3e b7       	in	r19, 0x3e	; 62
    434a:	40 91 04 20 	lds	r20, 0x2004
    434e:	50 91 05 20 	lds	r21, 0x2005
    4352:	24 1b       	sub	r18, r20
    4354:	35 0b       	sbc	r19, r21
    4356:	e0 91 2a 23 	lds	r30, 0x232A
    435a:	f0 91 2b 23 	lds	r31, 0x232B
    435e:	e2 17       	cp	r30, r18
    4360:	f3 07       	cpc	r31, r19
    4362:	a0 f4       	brcc	.+40     	; 0x438c <malloc+0x11e>
    4364:	2e 1b       	sub	r18, r30
    4366:	3f 0b       	sbc	r19, r31
    4368:	28 17       	cp	r18, r24
    436a:	39 07       	cpc	r19, r25
    436c:	78 f0       	brcs	.+30     	; 0x438c <malloc+0x11e>
    436e:	ac 01       	movw	r20, r24
    4370:	4e 5f       	subi	r20, 0xFE	; 254
    4372:	5f 4f       	sbci	r21, 0xFF	; 255
    4374:	24 17       	cp	r18, r20
    4376:	35 07       	cpc	r19, r21
    4378:	48 f0       	brcs	.+18     	; 0x438c <malloc+0x11e>
    437a:	4e 0f       	add	r20, r30
    437c:	5f 1f       	adc	r21, r31
    437e:	40 93 2a 23 	sts	0x232A, r20
    4382:	50 93 2b 23 	sts	0x232B, r21
    4386:	81 93       	st	Z+, r24
    4388:	91 93       	st	Z+, r25
    438a:	02 c0       	rjmp	.+4      	; 0x4390 <malloc+0x122>
    438c:	e0 e0       	ldi	r30, 0x00	; 0
    438e:	f0 e0       	ldi	r31, 0x00	; 0
    4390:	cf 01       	movw	r24, r30
    4392:	df 91       	pop	r29
    4394:	cf 91       	pop	r28
    4396:	08 95       	ret

00004398 <free>:
    4398:	0f 93       	push	r16
    439a:	1f 93       	push	r17
    439c:	cf 93       	push	r28
    439e:	df 93       	push	r29
    43a0:	00 97       	sbiw	r24, 0x00	; 0
    43a2:	09 f4       	brne	.+2      	; 0x43a6 <free+0xe>
    43a4:	8c c0       	rjmp	.+280    	; 0x44be <free+0x126>
    43a6:	fc 01       	movw	r30, r24
    43a8:	32 97       	sbiw	r30, 0x02	; 2
    43aa:	12 82       	std	Z+2, r1	; 0x02
    43ac:	13 82       	std	Z+3, r1	; 0x03
    43ae:	00 91 2c 23 	lds	r16, 0x232C
    43b2:	10 91 2d 23 	lds	r17, 0x232D
    43b6:	01 15       	cp	r16, r1
    43b8:	11 05       	cpc	r17, r1
    43ba:	81 f4       	brne	.+32     	; 0x43dc <free+0x44>
    43bc:	20 81       	ld	r18, Z
    43be:	31 81       	ldd	r19, Z+1	; 0x01
    43c0:	82 0f       	add	r24, r18
    43c2:	93 1f       	adc	r25, r19
    43c4:	20 91 2a 23 	lds	r18, 0x232A
    43c8:	30 91 2b 23 	lds	r19, 0x232B
    43cc:	28 17       	cp	r18, r24
    43ce:	39 07       	cpc	r19, r25
    43d0:	79 f5       	brne	.+94     	; 0x4430 <free+0x98>
    43d2:	e0 93 2a 23 	sts	0x232A, r30
    43d6:	f0 93 2b 23 	sts	0x232B, r31
    43da:	71 c0       	rjmp	.+226    	; 0x44be <free+0x126>
    43dc:	d8 01       	movw	r26, r16
    43de:	40 e0       	ldi	r20, 0x00	; 0
    43e0:	50 e0       	ldi	r21, 0x00	; 0
    43e2:	ae 17       	cp	r26, r30
    43e4:	bf 07       	cpc	r27, r31
    43e6:	50 f4       	brcc	.+20     	; 0x43fc <free+0x64>
    43e8:	12 96       	adiw	r26, 0x02	; 2
    43ea:	2d 91       	ld	r18, X+
    43ec:	3c 91       	ld	r19, X
    43ee:	13 97       	sbiw	r26, 0x03	; 3
    43f0:	ad 01       	movw	r20, r26
    43f2:	21 15       	cp	r18, r1
    43f4:	31 05       	cpc	r19, r1
    43f6:	09 f1       	breq	.+66     	; 0x443a <free+0xa2>
    43f8:	d9 01       	movw	r26, r18
    43fa:	f3 cf       	rjmp	.-26     	; 0x43e2 <free+0x4a>
    43fc:	9d 01       	movw	r18, r26
    43fe:	da 01       	movw	r26, r20
    4400:	22 83       	std	Z+2, r18	; 0x02
    4402:	33 83       	std	Z+3, r19	; 0x03
    4404:	60 81       	ld	r22, Z
    4406:	71 81       	ldd	r23, Z+1	; 0x01
    4408:	86 0f       	add	r24, r22
    440a:	97 1f       	adc	r25, r23
    440c:	82 17       	cp	r24, r18
    440e:	93 07       	cpc	r25, r19
    4410:	69 f4       	brne	.+26     	; 0x442c <free+0x94>
    4412:	ec 01       	movw	r28, r24
    4414:	28 81       	ld	r18, Y
    4416:	39 81       	ldd	r19, Y+1	; 0x01
    4418:	26 0f       	add	r18, r22
    441a:	37 1f       	adc	r19, r23
    441c:	2e 5f       	subi	r18, 0xFE	; 254
    441e:	3f 4f       	sbci	r19, 0xFF	; 255
    4420:	20 83       	st	Z, r18
    4422:	31 83       	std	Z+1, r19	; 0x01
    4424:	8a 81       	ldd	r24, Y+2	; 0x02
    4426:	9b 81       	ldd	r25, Y+3	; 0x03
    4428:	82 83       	std	Z+2, r24	; 0x02
    442a:	93 83       	std	Z+3, r25	; 0x03
    442c:	45 2b       	or	r20, r21
    442e:	29 f4       	brne	.+10     	; 0x443a <free+0xa2>
    4430:	e0 93 2c 23 	sts	0x232C, r30
    4434:	f0 93 2d 23 	sts	0x232D, r31
    4438:	42 c0       	rjmp	.+132    	; 0x44be <free+0x126>
    443a:	12 96       	adiw	r26, 0x02	; 2
    443c:	ed 93       	st	X+, r30
    443e:	fc 93       	st	X, r31
    4440:	13 97       	sbiw	r26, 0x03	; 3
    4442:	ed 01       	movw	r28, r26
    4444:	49 91       	ld	r20, Y+
    4446:	59 91       	ld	r21, Y+
    4448:	9e 01       	movw	r18, r28
    444a:	24 0f       	add	r18, r20
    444c:	35 1f       	adc	r19, r21
    444e:	e2 17       	cp	r30, r18
    4450:	f3 07       	cpc	r31, r19
    4452:	71 f4       	brne	.+28     	; 0x4470 <free+0xd8>
    4454:	80 81       	ld	r24, Z
    4456:	91 81       	ldd	r25, Z+1	; 0x01
    4458:	84 0f       	add	r24, r20
    445a:	95 1f       	adc	r25, r21
    445c:	02 96       	adiw	r24, 0x02	; 2
    445e:	8d 93       	st	X+, r24
    4460:	9c 93       	st	X, r25
    4462:	11 97       	sbiw	r26, 0x01	; 1
    4464:	82 81       	ldd	r24, Z+2	; 0x02
    4466:	93 81       	ldd	r25, Z+3	; 0x03
    4468:	12 96       	adiw	r26, 0x02	; 2
    446a:	8d 93       	st	X+, r24
    446c:	9c 93       	st	X, r25
    446e:	13 97       	sbiw	r26, 0x03	; 3
    4470:	e0 e0       	ldi	r30, 0x00	; 0
    4472:	f0 e0       	ldi	r31, 0x00	; 0
    4474:	d8 01       	movw	r26, r16
    4476:	12 96       	adiw	r26, 0x02	; 2
    4478:	8d 91       	ld	r24, X+
    447a:	9c 91       	ld	r25, X
    447c:	13 97       	sbiw	r26, 0x03	; 3
    447e:	00 97       	sbiw	r24, 0x00	; 0
    4480:	19 f0       	breq	.+6      	; 0x4488 <free+0xf0>
    4482:	f8 01       	movw	r30, r16
    4484:	8c 01       	movw	r16, r24
    4486:	f6 cf       	rjmp	.-20     	; 0x4474 <free+0xdc>
    4488:	8d 91       	ld	r24, X+
    448a:	9c 91       	ld	r25, X
    448c:	98 01       	movw	r18, r16
    448e:	2e 5f       	subi	r18, 0xFE	; 254
    4490:	3f 4f       	sbci	r19, 0xFF	; 255
    4492:	82 0f       	add	r24, r18
    4494:	93 1f       	adc	r25, r19
    4496:	20 91 2a 23 	lds	r18, 0x232A
    449a:	30 91 2b 23 	lds	r19, 0x232B
    449e:	28 17       	cp	r18, r24
    44a0:	39 07       	cpc	r19, r25
    44a2:	69 f4       	brne	.+26     	; 0x44be <free+0x126>
    44a4:	30 97       	sbiw	r30, 0x00	; 0
    44a6:	29 f4       	brne	.+10     	; 0x44b2 <free+0x11a>
    44a8:	10 92 2c 23 	sts	0x232C, r1
    44ac:	10 92 2d 23 	sts	0x232D, r1
    44b0:	02 c0       	rjmp	.+4      	; 0x44b6 <free+0x11e>
    44b2:	12 82       	std	Z+2, r1	; 0x02
    44b4:	13 82       	std	Z+3, r1	; 0x03
    44b6:	00 93 2a 23 	sts	0x232A, r16
    44ba:	10 93 2b 23 	sts	0x232B, r17
    44be:	df 91       	pop	r29
    44c0:	cf 91       	pop	r28
    44c2:	1f 91       	pop	r17
    44c4:	0f 91       	pop	r16
    44c6:	08 95       	ret

000044c8 <memcpy>:
    44c8:	fb 01       	movw	r30, r22
    44ca:	dc 01       	movw	r26, r24
    44cc:	02 c0       	rjmp	.+4      	; 0x44d2 <memcpy+0xa>
    44ce:	01 90       	ld	r0, Z+
    44d0:	0d 92       	st	X+, r0
    44d2:	41 50       	subi	r20, 0x01	; 1
    44d4:	50 40       	sbci	r21, 0x00	; 0
    44d6:	d8 f7       	brcc	.-10     	; 0x44ce <memcpy+0x6>
    44d8:	08 95       	ret

000044da <__do_global_dtors>:
    44da:	11 e0       	ldi	r17, 0x01	; 1
    44dc:	ca eb       	ldi	r28, 0xBA	; 186
    44de:	d1 e0       	ldi	r29, 0x01	; 1
    44e0:	00 e0       	ldi	r16, 0x00	; 0
    44e2:	06 c0       	rjmp	.+12     	; 0x44f0 <__do_global_dtors+0x16>
    44e4:	80 2f       	mov	r24, r16
    44e6:	fe 01       	movw	r30, r28
    44e8:	0e 94 fe 20 	call	0x41fc	; 0x41fc <__tablejump2__>
    44ec:	21 96       	adiw	r28, 0x01	; 1
    44ee:	01 1d       	adc	r16, r1
    44f0:	cc 3b       	cpi	r28, 0xBC	; 188
    44f2:	d1 07       	cpc	r29, r17
    44f4:	80 e0       	ldi	r24, 0x00	; 0
    44f6:	08 07       	cpc	r16, r24
    44f8:	a9 f7       	brne	.-22     	; 0x44e4 <__do_global_dtors+0xa>
    44fa:	f8 94       	cli

000044fc <__stop_program>:
    44fc:	ff cf       	rjmp	.-2      	; 0x44fc <__stop_program>
