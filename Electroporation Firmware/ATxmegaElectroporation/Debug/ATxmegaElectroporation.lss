
ATxmegaElectroporation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004932  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ee  00802000  00004932  000049c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000244  008020ee  008020ee  00004ab4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004ab4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004ae4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000860  00000000  00000000  00004b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000aea9  00000000  00000000  00005384  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021a8  00000000  00000000  0001022d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002799  00000000  00000000  000123d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002f38  00000000  00000000  00014b70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004824  00000000  00000000  00017aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008167  00000000  00000000  0001c2cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000790  00000000  00000000  00024433  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 df 01 	jmp	0x3be	; 0x3be <__dtors_end>
       4:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <__vector_1>
       8:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__vector_2>
       c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__vector_3>
      10:	0c 94 25 0c 	jmp	0x184a	; 0x184a <__vector_4>
      14:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__vector_5>
      18:	0c 94 87 0c 	jmp	0x190e	; 0x190e <__vector_6>
      1c:	0c 94 b8 0c 	jmp	0x1970	; 0x1970 <__vector_7>
      20:	0c 94 e9 0c 	jmp	0x19d2	; 0x19d2 <__vector_8>
      24:	0c 94 1a 0d 	jmp	0x1a34	; 0x1a34 <__vector_9>
      28:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__vector_10>
      2c:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <__vector_11>
      30:	0c 94 ad 0d 	jmp	0x1b5a	; 0x1b5a <__vector_12>
      34:	0c 94 de 0d 	jmp	0x1bbc	; 0x1bbc <__vector_13>
      38:	0c 94 0f 0e 	jmp	0x1c1e	; 0x1c1e <__vector_14>
      3c:	0c 94 40 0e 	jmp	0x1c80	; 0x1c80 <__vector_15>
      40:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__vector_16>
      44:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__vector_17>
      48:	0c 94 d3 0e 	jmp	0x1da6	; 0x1da6 <__vector_18>
      4c:	0c 94 04 0f 	jmp	0x1e08	; 0x1e08 <__vector_19>
      50:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <__vector_20>
      54:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__vector_21>
      58:	0c 94 97 0f 	jmp	0x1f2e	; 0x1f2e <__vector_22>
      5c:	0c 94 c8 0f 	jmp	0x1f90	; 0x1f90 <__vector_23>
      60:	0c 94 f9 0f 	jmp	0x1ff2	; 0x1ff2 <__vector_24>
      64:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <__vector_25>
      68:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__vector_26>
      6c:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <__vector_27>
      70:	0c 94 bd 10 	jmp	0x217a	; 0x217a <__vector_28>
      74:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <__vector_29>
      78:	0c 94 1f 11 	jmp	0x223e	; 0x223e <__vector_30>
      7c:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <__vector_31>
      80:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__vector_32>
      84:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__vector_33>
      88:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__vector_34>
      8c:	0c 94 14 12 	jmp	0x2428	; 0x2428 <__vector_35>
      90:	0c 94 45 12 	jmp	0x248a	; 0x248a <__vector_36>
      94:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <__vector_37>
      98:	0c 94 a7 12 	jmp	0x254e	; 0x254e <__vector_38>
      9c:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__vector_39>
      a0:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__vector_40>
      a4:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <__vector_41>
      a8:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__vector_42>
      ac:	0c 94 9c 13 	jmp	0x2738	; 0x2738 <__vector_43>
      b0:	0c 94 cd 13 	jmp	0x279a	; 0x279a <__vector_44>
      b4:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__vector_45>
      b8:	0c 94 2f 14 	jmp	0x285e	; 0x285e <__vector_46>
      bc:	0c 94 60 14 	jmp	0x28c0	; 0x28c0 <__vector_47>
      c0:	0c 94 91 14 	jmp	0x2922	; 0x2922 <__vector_48>
      c4:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <__vector_49>
      c8:	0c 94 f3 14 	jmp	0x29e6	; 0x29e6 <__vector_50>
      cc:	0c 94 24 15 	jmp	0x2a48	; 0x2a48 <__vector_51>
      d0:	0c 94 55 15 	jmp	0x2aaa	; 0x2aaa <__vector_52>
      d4:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <__vector_53>
      d8:	0c 94 b7 15 	jmp	0x2b6e	; 0x2b6e <__vector_54>
      dc:	0c 94 e8 15 	jmp	0x2bd0	; 0x2bd0 <__vector_55>
      e0:	0c 94 19 16 	jmp	0x2c32	; 0x2c32 <__vector_56>
      e4:	0c 94 4a 16 	jmp	0x2c94	; 0x2c94 <__vector_57>
      e8:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <__vector_58>
      ec:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <__vector_59>
      f0:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__vector_60>
      f4:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <__vector_61>
      f8:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__vector_62>
      fc:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <__vector_63>
     100:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <__vector_64>
     104:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <__vector_65>
     108:	0c 94 03 18 	jmp	0x3006	; 0x3006 <__vector_66>
     10c:	0c 94 34 18 	jmp	0x3068	; 0x3068 <__vector_67>
     110:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__vector_68>
     114:	0c 94 96 18 	jmp	0x312c	; 0x312c <__vector_69>
     118:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__vector_70>
     11c:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__vector_71>
     120:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__vector_72>
     124:	0c 94 5a 19 	jmp	0x32b4	; 0x32b4 <__vector_73>
     128:	0c 94 8b 19 	jmp	0x3316	; 0x3316 <__vector_74>
     12c:	0c 94 10 02 	jmp	0x420	; 0x420 <__bad_interrupt>
     130:	0c 94 10 02 	jmp	0x420	; 0x420 <__bad_interrupt>
     134:	0c 94 bc 19 	jmp	0x3378	; 0x3378 <__vector_77>
     138:	0c 94 ed 19 	jmp	0x33da	; 0x33da <__vector_78>
     13c:	0c 94 1e 1a 	jmp	0x343c	; 0x343c <__vector_79>
     140:	0c 94 4f 1a 	jmp	0x349e	; 0x349e <__vector_80>
     144:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <__vector_81>
     148:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__vector_82>
     14c:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__vector_83>
     150:	0c 94 13 1b 	jmp	0x3626	; 0x3626 <__vector_84>
     154:	0c 94 44 1b 	jmp	0x3688	; 0x3688 <__vector_85>
     158:	0c 94 75 1b 	jmp	0x36ea	; 0x36ea <__vector_86>
     15c:	0c 94 a6 1b 	jmp	0x374c	; 0x374c <__vector_87>
     160:	0c 94 d7 1b 	jmp	0x37ae	; 0x37ae <__vector_88>
     164:	0c 94 08 1c 	jmp	0x3810	; 0x3810 <__vector_89>
     168:	0c 94 39 1c 	jmp	0x3872	; 0x3872 <__vector_90>
     16c:	0c 94 6a 1c 	jmp	0x38d4	; 0x38d4 <__vector_91>
     170:	0c 94 9b 1c 	jmp	0x3936	; 0x3936 <__vector_92>
     174:	0c 94 cc 1c 	jmp	0x3998	; 0x3998 <__vector_93>
     178:	0c 94 10 02 	jmp	0x420	; 0x420 <__bad_interrupt>
     17c:	0c 94 10 02 	jmp	0x420	; 0x420 <__bad_interrupt>
     180:	0c 94 10 02 	jmp	0x420	; 0x420 <__bad_interrupt>
     184:	0c 94 10 02 	jmp	0x420	; 0x420 <__bad_interrupt>
     188:	0c 94 10 02 	jmp	0x420	; 0x420 <__bad_interrupt>
     18c:	0c 94 10 02 	jmp	0x420	; 0x420 <__bad_interrupt>
     190:	0c 94 10 02 	jmp	0x420	; 0x420 <__bad_interrupt>
     194:	0c 94 10 02 	jmp	0x420	; 0x420 <__bad_interrupt>
     198:	0c 94 10 02 	jmp	0x420	; 0x420 <__bad_interrupt>
     19c:	0c 94 10 02 	jmp	0x420	; 0x420 <__bad_interrupt>
     1a0:	0c 94 fd 1c 	jmp	0x39fa	; 0x39fa <__vector_104>
     1a4:	0c 94 2e 1d 	jmp	0x3a5c	; 0x3a5c <__vector_105>
     1a8:	0c 94 10 02 	jmp	0x420	; 0x420 <__bad_interrupt>
     1ac:	0c 94 10 02 	jmp	0x420	; 0x420 <__bad_interrupt>
     1b0:	0c 94 5f 1d 	jmp	0x3abe	; 0x3abe <__vector_108>
     1b4:	0c 94 90 1d 	jmp	0x3b20	; 0x3b20 <__vector_109>
     1b8:	0c 94 c1 1d 	jmp	0x3b82	; 0x3b82 <__vector_110>
     1bc:	0c 94 f2 1d 	jmp	0x3be4	; 0x3be4 <__vector_111>
     1c0:	0c 94 23 1e 	jmp	0x3c46	; 0x3c46 <__vector_112>
     1c4:	0c 94 54 1e 	jmp	0x3ca8	; 0x3ca8 <__vector_113>
     1c8:	0c 94 10 02 	jmp	0x420	; 0x420 <__bad_interrupt>
     1cc:	0c 94 10 02 	jmp	0x420	; 0x420 <__bad_interrupt>
     1d0:	0c 94 10 02 	jmp	0x420	; 0x420 <__bad_interrupt>
     1d4:	0c 94 10 02 	jmp	0x420	; 0x420 <__bad_interrupt>
     1d8:	0c 94 10 02 	jmp	0x420	; 0x420 <__bad_interrupt>
     1dc:	0c 94 85 1e 	jmp	0x3d0a	; 0x3d0a <__vector_119>
     1e0:	0c 94 b6 1e 	jmp	0x3d6c	; 0x3d6c <__vector_120>
     1e4:	0c 94 e7 1e 	jmp	0x3dce	; 0x3dce <__vector_121>
     1e8:	7c 04       	cpc	r7, r12
     1ea:	b2 04       	cpc	r11, r2
     1ec:	b2 04       	cpc	r11, r2
     1ee:	b2 04       	cpc	r11, r2
     1f0:	b2 04       	cpc	r11, r2
     1f2:	ab 04       	cpc	r10, r11
     1f4:	b2 04       	cpc	r11, r2
     1f6:	a3 04       	cpc	r10, r3
     1f8:	b2 04       	cpc	r11, r2
     1fa:	af 04       	cpc	r10, r15
     1fc:	b2 04       	cpc	r11, r2
     1fe:	a7 04       	cpc	r10, r7
     200:	b2 04       	cpc	r11, r2
     202:	b2 04       	cpc	r11, r2
     204:	b2 04       	cpc	r11, r2
     206:	b2 04       	cpc	r11, r2
     208:	b2 04       	cpc	r11, r2
     20a:	b2 04       	cpc	r11, r2
     20c:	b2 04       	cpc	r11, r2
     20e:	b2 04       	cpc	r11, r2
     210:	b2 04       	cpc	r11, r2
     212:	af 04       	cpc	r10, r15
     214:	b2 04       	cpc	r11, r2
     216:	7f 04       	cpc	r7, r15
     218:	b2 04       	cpc	r11, r2
     21a:	83 04       	cpc	r8, r3
     21c:	b2 04       	cpc	r11, r2
     21e:	b2 04       	cpc	r11, r2
     220:	8b 04       	cpc	r8, r11
     222:	9b 04       	cpc	r9, r11
     224:	8f 04       	cpc	r8, r15
     226:	93 04       	cpc	r9, r3
     228:	97 04       	cpc	r9, r7
     22a:	87 04       	cpc	r8, r7
     22c:	9f 04       	cpc	r9, r15
     22e:	2b 06       	cpc	r2, r27
     230:	2f 06       	cpc	r2, r31
     232:	ee 06       	cpc	r14, r30
     234:	1d 07       	cpc	r17, r29
     236:	51 07       	cpc	r21, r17
     238:	83 07       	cpc	r24, r19
     23a:	06 08       	sbc	r0, r6
     23c:	aa 07       	cpc	r26, r26
     23e:	25 08       	sbc	r2, r5
     240:	81 08       	sbc	r8, r1
     242:	aa 08       	sbc	r10, r10
     244:	22 09       	sbc	r18, r2
     246:	09 09       	sbc	r16, r9
     248:	be 08       	sbc	r11, r14
     24a:	3b 09       	sbc	r19, r11
     24c:	43 21       	and	r20, r3
     24e:	43 21       	and	r20, r3
     250:	4b 21       	and	r20, r11
     252:	53 21       	and	r21, r3
     254:	5e 21       	and	r21, r14
     256:	b6 21       	and	r27, r6
     258:	bd 21       	and	r27, r13
     25a:	e9 21       	and	r30, r9
     25c:	e9 21       	and	r30, r9
     25e:	e8 21       	and	r30, r8
     260:	e8 21       	and	r30, r8

00000262 <__trampolines_start>:
     262:	0c 94 93 04 	jmp	0x926	; 0x926 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x5a>
     266:	0c 94 87 04 	jmp	0x90e	; 0x90e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x42>
     26a:	0c 94 8f 04 	jmp	0x91e	; 0x91e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x52>
     26e:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <_GLOBAL__sub_D_timer>
     272:	0c 94 a7 04 	jmp	0x94e	; 0x94e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x82>
     276:	0c 94 f6 22 	jmp	0x45ec	; 0x45ec <_ZN9CMBSender21OnTransactionCallbackEPhj>
     27a:	0c 94 43 21 	jmp	0x4286	; 0x4286 <_ZN9CMBSender13OnReceiveByteEh+0x22>
     27e:	0c 94 b5 0a 	jmp	0x156a	; 0x156a <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     282:	0c 94 d2 1f 	jmp	0x3fa4	; 0x3fa4 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>
     286:	0c 94 81 0b 	jmp	0x1702	; 0x1702 <_ZN4CSPI16StaticOnTransmitEPv>
     28a:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <_ZN7CTimerC5StartEj>
     28e:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <_ZN7CTimerC4StopEv>
     292:	0c 94 83 07 	jmp	0xf06	; 0xf06 <_ZN16CLaserControlApp3RunEv+0x320>
     296:	0c 94 22 20 	jmp	0x4044	; 0x4044 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>
     29a:	0c 94 83 04 	jmp	0x906	; 0x906 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x3a>
     29e:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <_ZN16CLaserControlApp3RunEv+0x254>
     2a2:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     2a6:	0c 94 e8 21 	jmp	0x43d0	; 0x43d0 <_ZN9CMBSender13OnReceiveByteEh+0x16c>
     2aa:	0c 94 8d 20 	jmp	0x411a	; 0x411a <_ZN16CMBEventsHandler15AllocateBuffersEjj>
     2ae:	0c 94 51 07 	jmp	0xea2	; 0xea2 <_ZN16CLaserControlApp3RunEv+0x2bc>
     2b2:	0c 94 ab 04 	jmp	0x956	; 0x956 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x8a>
     2b6:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>
     2ba:	0c 94 b7 20 	jmp	0x416e	; 0x416e <_ZN9CMBSender18OnVariableReceivedEjPjj>
     2be:	0c 94 94 0a 	jmp	0x1528	; 0x1528 <_ZN7CTimerC8SetCOMPBEj>
     2c2:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     2c6:	0c 94 b3 04 	jmp	0x966	; 0x966 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>
     2ca:	0c 94 81 08 	jmp	0x1102	; 0x1102 <_ZN16CLaserControlApp3RunEv+0x51c>
     2ce:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <_ZN7CTimerC8SetCOMPDEj>
     2d2:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     2d6:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>
     2da:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     2de:	0c 94 9b 04 	jmp	0x936	; 0x936 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x6a>
     2e2:	0c 94 af 04 	jmp	0x95e	; 0x95e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x92>
     2e6:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>
     2ea:	0c 94 8b 04 	jmp	0x916	; 0x916 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x4a>
     2ee:	0c 94 9f 04 	jmp	0x93e	; 0x93e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x72>
     2f2:	0c 94 8b 03 	jmp	0x716	; 0x716 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>
     2f6:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <_ZN10CDGUSUSART14IsTransmittingEv>
     2fa:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <_ZN16CLaserControlApp3RunEv+0x690>
     2fe:	0c 94 ec 21 	jmp	0x43d8	; 0x43d8 <_ZN9CMBSender18OnUSARTRxInterruptEPv>
     302:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <_ZN16CLaserControlApp3RunEv+0x56e>
     306:	0c 94 82 03 	jmp	0x704	; 0x704 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>
     30a:	0c 94 cd 09 	jmp	0x139a	; 0x139a <_ZN16CLaserControlApp13OnTimerStaticEPv>
     30e:	0c 94 97 04 	jmp	0x92e	; 0x92e <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x62>
     312:	0c 94 6a 20 	jmp	0x40d4	; 0x40d4 <_ZN16CMBEventsHandler13FillVarDataRqEjj>
     316:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>
     31a:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>
     31e:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <_GLOBAL__sub_I_timer>
     322:	0c 94 7f 04 	jmp	0x8fe	; 0x8fe <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x32>
     326:	0c 94 18 1f 	jmp	0x3e30	; 0x3e30 <__cxa_pure_virtual>
     32a:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x2c>
     32e:	0c 94 53 21 	jmp	0x42a6	; 0x42a6 <_ZN9CMBSender13OnReceiveByteEh+0x42>
     332:	0c 94 b6 21 	jmp	0x436c	; 0x436c <_ZN9CMBSender13OnReceiveByteEh+0x108>
     336:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <_ZN10CDGUSUSART15GetReceivedByteEv>
     33a:	0c 94 1b 1f 	jmp	0x3e36	; 0x3e36 <_GLOBAL__sub_I_dacSPI>
     33e:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <_ZN7CTimerC8SetCOMPAEj>
     342:	0c 94 bd 21 	jmp	0x437a	; 0x437a <_ZN9CMBSender13OnReceiveByteEh+0x116>
     346:	0c 94 06 08 	jmp	0x100c	; 0x100c <_ZN16CLaserControlApp3RunEv+0x426>
     34a:	0c 94 51 22 	jmp	0x44a2	; 0x44a2 <_ZN9CMBSender18OnUSARTTxInterruptEPv>
     34e:	0c 94 5e 21 	jmp	0x42bc	; 0x42bc <_ZN9CMBSender13OnReceiveByteEh+0x58>
     352:	0c 94 68 03 	jmp	0x6d0	; 0x6d0 <_ZN10CDGUSUSART11IsDataEmptyEv>
     356:	0c 94 38 1f 	jmp	0x3e70	; 0x3e70 <_GLOBAL__sub_D_dacSPI>
     35a:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <_ZN16CLaserControlApp3RunEv+0x70>
     35e:	0c 94 22 09 	jmp	0x1244	; 0x1244 <_ZN16CLaserControlApp3RunEv+0x65e>
     362:	0c 94 ee 06 	jmp	0xddc	; 0xddc <_ZN16CLaserControlApp3RunEv+0x1f6>
     366:	0c 94 18 03 	jmp	0x630	; 0x630 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
     36a:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     36e:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>
     372:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <_ZN7CTimerC8SetCOMPCEj>
     376:	0c 94 a8 20 	jmp	0x4150	; 0x4150 <_ZN16CMBEventsHandler11FreeBuffersEv>
     37a:	0c 94 be 08 	jmp	0x117c	; 0x117c <_ZN16CLaserControlApp3RunEv+0x596>
     37e:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     382:	0c 94 e9 21 	jmp	0x43d2	; 0x43d2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
     386:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <_ZN10CDGUSUSART11IsReceivingEv>
     38a:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <_ZN7CTimerC9SetPeriodEj>
     38e:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <_ZN16CLaserControlApp3RunEv+0x36e>
     392:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <_ZN10CDGUSUSART19SetTransmittingByteEh>
     396:	0c 94 25 08 	jmp	0x104a	; 0x104a <_ZN16CLaserControlApp3RunEv+0x464>
     39a:	0c 94 c6 20 	jmp	0x418c	; 0x418c <_ZN9CMBSender18OnRegisterReceivedEhPhh>
     39e:	0c 94 4b 21 	jmp	0x4296	; 0x4296 <_ZN9CMBSender13OnReceiveByteEh+0x32>
     3a2:	0c 94 b2 04 	jmp	0x964	; 0x964 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x98>
     3a6:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <_ZN16CLaserControlApp3RunEv+0x78>
     3aa:	0c 94 a3 04 	jmp	0x946	; 0x946 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x7a>
     3ae:	0c 94 09 09 	jmp	0x1212	; 0x1212 <_ZN16CLaserControlApp3RunEv+0x62c>
     3b2:	0c 94 03 20 	jmp	0x4006	; 0x4006 <_ZN16CMBEventsHandler13FillRegDataRqEhh>

000003b6 <__ctors_start>:
     3b6:	b4 05       	cpc	r27, r4
     3b8:	1b 1f       	adc	r17, r27

000003ba <__ctors_end>:
     3ba:	b9 05       	cpc	r27, r9
     3bc:	38 1f       	adc	r19, r24

000003be <__dtors_end>:
     3be:	11 24       	eor	r1, r1
     3c0:	1f be       	out	0x3f, r1	; 63
     3c2:	cf ef       	ldi	r28, 0xFF	; 255
     3c4:	cd bf       	out	0x3d, r28	; 61
     3c6:	df e3       	ldi	r29, 0x3F	; 63
     3c8:	de bf       	out	0x3e, r29	; 62
     3ca:	00 e0       	ldi	r16, 0x00	; 0
     3cc:	0c bf       	out	0x3c, r16	; 60

000003ce <__do_copy_data>:
     3ce:	10 e2       	ldi	r17, 0x20	; 32
     3d0:	a0 e0       	ldi	r26, 0x00	; 0
     3d2:	b0 e2       	ldi	r27, 0x20	; 32
     3d4:	e2 e3       	ldi	r30, 0x32	; 50
     3d6:	f9 e4       	ldi	r31, 0x49	; 73
     3d8:	00 e0       	ldi	r16, 0x00	; 0
     3da:	0b bf       	out	0x3b, r16	; 59
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <__do_copy_data+0x14>
     3de:	07 90       	elpm	r0, Z+
     3e0:	0d 92       	st	X+, r0
     3e2:	ae 3e       	cpi	r26, 0xEE	; 238
     3e4:	b1 07       	cpc	r27, r17
     3e6:	d9 f7       	brne	.-10     	; 0x3de <__do_copy_data+0x10>

000003e8 <__do_clear_bss>:
     3e8:	23 e2       	ldi	r18, 0x23	; 35
     3ea:	ae ee       	ldi	r26, 0xEE	; 238
     3ec:	b0 e2       	ldi	r27, 0x20	; 32
     3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <.do_clear_bss_start>

000003f0 <.do_clear_bss_loop>:
     3f0:	1d 92       	st	X+, r1

000003f2 <.do_clear_bss_start>:
     3f2:	a2 33       	cpi	r26, 0x32	; 50
     3f4:	b2 07       	cpc	r27, r18
     3f6:	e1 f7       	brne	.-8      	; 0x3f0 <.do_clear_bss_loop>

000003f8 <__do_global_ctors>:
     3f8:	11 e0       	ldi	r17, 0x01	; 1
     3fa:	cd ed       	ldi	r28, 0xDD	; 221
     3fc:	d1 e0       	ldi	r29, 0x01	; 1
     3fe:	00 e0       	ldi	r16, 0x00	; 0
     400:	06 c0       	rjmp	.+12     	; 0x40e <__do_global_ctors+0x16>
     402:	21 97       	sbiw	r28, 0x01	; 1
     404:	01 09       	sbc	r16, r1
     406:	80 2f       	mov	r24, r16
     408:	fe 01       	movw	r30, r28
     40a:	0e 94 18 23 	call	0x4630	; 0x4630 <__tablejump2__>
     40e:	cb 3d       	cpi	r28, 0xDB	; 219
     410:	d1 07       	cpc	r29, r17
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	08 07       	cpc	r16, r24
     416:	a9 f7       	brne	.-22     	; 0x402 <__do_global_ctors+0xa>
     418:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <main>
     41c:	0c 94 87 24 	jmp	0x490e	; 0x490e <__do_global_dtors>

00000420 <__bad_interrupt>:
     420:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000424 <_ZN13CDGUSDatabaseC1Ev>:
#define F_CPU 32000000

#include "util/delay.h"

// default constructor
CDGUSDatabase::CDGUSDatabase()
     424:	08 95       	ret

00000426 <_ZN13CDGUSDatabaseD1Ev>:
{
} //CDGUSDatabase

// default destructor
CDGUSDatabase::~CDGUSDatabase()
     426:	08 95       	ret

00000428 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>:
{
} //~CDGUSDatabase

void CDGUSDatabase::Initialize(CMBSender* sender, uint16_t vp)
{
     428:	fc 01       	movw	r30, r24
	// GUI class initialization
	m_cpSender = sender;
     42a:	62 83       	std	Z+2, r22	; 0x02
     42c:	73 83       	std	Z+3, r23	; 0x03
	vp_addr = (vp >> 8) | (vp << 8);
     42e:	94 2f       	mov	r25, r20
     430:	85 2f       	mov	r24, r21
     432:	84 83       	std	Z+4, r24	; 0x04
     434:	95 83       	std	Z+5, r25	; 0x05
	vp_addres = vp;
     436:	46 83       	std	Z+6, r20	; 0x06
     438:	57 83       	std	Z+7, r21	; 0x07
	data_transaction = 0;
     43a:	10 82       	st	Z, r1
     43c:	11 82       	std	Z+1, r1	; 0x01
     43e:	08 95       	ret

00000440 <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>:
	m_cpSender->WaitMODBUSListener();
	data_transaction = (uint16_t*)data;
}

void CDGUSDatabase::MapDatabaseToWrite(uint16_t vp, uint32_t addr, uint16_t length)
{
     440:	8f 92       	push	r8
     442:	9f 92       	push	r9
     444:	af 92       	push	r10
     446:	bf 92       	push	r11
     448:	ef 92       	push	r14
     44a:	ff 92       	push	r15
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	2a 97       	sbiw	r28, 0x0a	; 10
     45a:	cd bf       	out	0x3d, r28	; 61
     45c:	de bf       	out	0x3e, r29	; 62
     45e:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     460:	8a e5       	ldi	r24, 0x5A	; 90
     462:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0x50;
     464:	80 e5       	ldi	r24, 0x50	; 80
     466:	8a 83       	std	Y+2, r24	; 0x02
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     468:	85 2e       	mov	r8, r21
     46a:	99 24       	eor	r9, r9
     46c:	aa 24       	eor	r10, r10
     46e:	bb 24       	eor	r11, r11
     470:	b2 2f       	mov	r27, r18
     472:	aa 27       	eor	r26, r26
     474:	99 27       	eor	r25, r25
     476:	88 27       	eor	r24, r24
     478:	88 29       	or	r24, r8
     47a:	99 29       	or	r25, r9
     47c:	aa 29       	or	r26, r10
     47e:	bb 29       	or	r27, r11
     480:	49 01       	movw	r8, r18
     482:	5a 01       	movw	r10, r20
     484:	88 24       	eor	r8, r8
     486:	aa 24       	eor	r10, r10
     488:	bb 24       	eor	r11, r11
     48a:	ba 2c       	mov	r11, r10
     48c:	a9 2c       	mov	r10, r9
     48e:	98 2c       	mov	r9, r8
     490:	88 24       	eor	r8, r8
     492:	88 29       	or	r24, r8
     494:	99 29       	or	r25, r9
     496:	aa 29       	or	r26, r10
     498:	bb 29       	or	r27, r11
     49a:	49 01       	movw	r8, r18
     49c:	5a 01       	movw	r10, r20
     49e:	88 24       	eor	r8, r8
     4a0:	99 24       	eor	r9, r9
     4a2:	bb 24       	eor	r11, r11
     4a4:	89 2c       	mov	r8, r9
     4a6:	9a 2c       	mov	r9, r10
     4a8:	ab 2c       	mov	r10, r11
     4aa:	bb 24       	eor	r11, r11
     4ac:	88 29       	or	r24, r8
     4ae:	99 29       	or	r25, r9
     4b0:	aa 29       	or	r26, r10
     4b2:	bb 29       	or	r27, r11
     4b4:	8b 83       	std	Y+3, r24	; 0x03
     4b6:	9c 83       	std	Y+4, r25	; 0x04
     4b8:	ad 83       	std	Y+5, r26	; 0x05
     4ba:	be 83       	std	Y+6, r27	; 0x06
	FLASH.vp = (vp >> 8) | (vp << 8);
     4bc:	76 27       	eor	r23, r22
     4be:	67 27       	eor	r22, r23
     4c0:	76 27       	eor	r23, r22
     4c2:	6f 83       	std	Y+7, r22	; 0x07
     4c4:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     4c6:	10 27       	eor	r17, r16
     4c8:	01 27       	eor	r16, r17
     4ca:	10 27       	eor	r17, r16
     4cc:	09 87       	std	Y+9, r16	; 0x09
     4ce:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     4d0:	2a e0       	ldi	r18, 0x0A	; 10
     4d2:	ae 01       	movw	r20, r28
     4d4:	4f 5f       	subi	r20, 0xFF	; 255
     4d6:	5f 4f       	sbci	r21, 0xFF	; 255
     4d8:	66 e5       	ldi	r22, 0x56	; 86
     4da:	f7 01       	movw	r30, r14
     4dc:	82 81       	ldd	r24, Z+2	; 0x02
     4de:	93 81       	ldd	r25, Z+3	; 0x03
     4e0:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     4e4:	f7 01       	movw	r30, r14
     4e6:	82 81       	ldd	r24, Z+2	; 0x02
     4e8:	93 81       	ldd	r25, Z+3	; 0x03
     4ea:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     4ee:	2a 96       	adiw	r28, 0x0a	; 10
     4f0:	cd bf       	out	0x3d, r28	; 61
     4f2:	de bf       	out	0x3e, r29	; 62
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	1f 91       	pop	r17
     4fa:	0f 91       	pop	r16
     4fc:	ff 90       	pop	r15
     4fe:	ef 90       	pop	r14
     500:	bf 90       	pop	r11
     502:	af 90       	pop	r10
     504:	9f 90       	pop	r9
     506:	8f 90       	pop	r8
     508:	08 95       	ret

0000050a <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>:

void CDGUSDatabase::MapDatabaseToRead(uint16_t vp, uint32_t addr, uint16_t length)
{
     50a:	8f 92       	push	r8
     50c:	9f 92       	push	r9
     50e:	af 92       	push	r10
     510:	bf 92       	push	r11
     512:	ef 92       	push	r14
     514:	ff 92       	push	r15
     516:	0f 93       	push	r16
     518:	1f 93       	push	r17
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	cd b7       	in	r28, 0x3d	; 61
     520:	de b7       	in	r29, 0x3e	; 62
     522:	2a 97       	sbiw	r28, 0x0a	; 10
     524:	cd bf       	out	0x3d, r28	; 61
     526:	de bf       	out	0x3e, r29	; 62
     528:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     52a:	8a e5       	ldi	r24, 0x5A	; 90
     52c:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0xA0;
     52e:	80 ea       	ldi	r24, 0xA0	; 160
     530:	8a 83       	std	Y+2, r24	; 0x02
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     532:	85 2e       	mov	r8, r21
     534:	99 24       	eor	r9, r9
     536:	aa 24       	eor	r10, r10
     538:	bb 24       	eor	r11, r11
     53a:	b2 2f       	mov	r27, r18
     53c:	aa 27       	eor	r26, r26
     53e:	99 27       	eor	r25, r25
     540:	88 27       	eor	r24, r24
     542:	88 29       	or	r24, r8
     544:	99 29       	or	r25, r9
     546:	aa 29       	or	r26, r10
     548:	bb 29       	or	r27, r11
     54a:	49 01       	movw	r8, r18
     54c:	5a 01       	movw	r10, r20
     54e:	88 24       	eor	r8, r8
     550:	aa 24       	eor	r10, r10
     552:	bb 24       	eor	r11, r11
     554:	ba 2c       	mov	r11, r10
     556:	a9 2c       	mov	r10, r9
     558:	98 2c       	mov	r9, r8
     55a:	88 24       	eor	r8, r8
     55c:	88 29       	or	r24, r8
     55e:	99 29       	or	r25, r9
     560:	aa 29       	or	r26, r10
     562:	bb 29       	or	r27, r11
     564:	49 01       	movw	r8, r18
     566:	5a 01       	movw	r10, r20
     568:	88 24       	eor	r8, r8
     56a:	99 24       	eor	r9, r9
     56c:	bb 24       	eor	r11, r11
     56e:	89 2c       	mov	r8, r9
     570:	9a 2c       	mov	r9, r10
     572:	ab 2c       	mov	r10, r11
     574:	bb 24       	eor	r11, r11
     576:	88 29       	or	r24, r8
     578:	99 29       	or	r25, r9
     57a:	aa 29       	or	r26, r10
     57c:	bb 29       	or	r27, r11
     57e:	8b 83       	std	Y+3, r24	; 0x03
     580:	9c 83       	std	Y+4, r25	; 0x04
     582:	ad 83       	std	Y+5, r26	; 0x05
     584:	be 83       	std	Y+6, r27	; 0x06
	FLASH.vp = (vp >> 8) | (vp << 8);
     586:	76 27       	eor	r23, r22
     588:	67 27       	eor	r22, r23
     58a:	76 27       	eor	r23, r22
     58c:	6f 83       	std	Y+7, r22	; 0x07
     58e:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     590:	10 27       	eor	r17, r16
     592:	01 27       	eor	r16, r17
     594:	10 27       	eor	r17, r16
     596:	09 87       	std	Y+9, r16	; 0x09
     598:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     59a:	2a e0       	ldi	r18, 0x0A	; 10
     59c:	ae 01       	movw	r20, r28
     59e:	4f 5f       	subi	r20, 0xFF	; 255
     5a0:	5f 4f       	sbci	r21, 0xFF	; 255
     5a2:	66 e5       	ldi	r22, 0x56	; 86
     5a4:	f7 01       	movw	r30, r14
     5a6:	82 81       	ldd	r24, Z+2	; 0x02
     5a8:	93 81       	ldd	r25, Z+3	; 0x03
     5aa:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     5ae:	f7 01       	movw	r30, r14
     5b0:	82 81       	ldd	r24, Z+2	; 0x02
     5b2:	93 81       	ldd	r25, Z+3	; 0x03
     5b4:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     5b8:	2a 96       	adiw	r28, 0x0a	; 10
     5ba:	cd bf       	out	0x3d, r28	; 61
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	1f 91       	pop	r17
     5c4:	0f 91       	pop	r16
     5c6:	ff 90       	pop	r15
     5c8:	ef 90       	pop	r14
     5ca:	bf 90       	pop	r11
     5cc:	af 90       	pop	r10
     5ce:	9f 90       	pop	r9
     5d0:	8f 90       	pop	r8
     5d2:	08 95       	ret

000005d4 <_ZN13CDGUSDatabase5UnMapEv>:

void CDGUSDatabase::UnMap()
{
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	1f 92       	push	r1
     5de:	cd b7       	in	r28, 0x3d	; 61
     5e0:	de b7       	in	r29, 0x3e	; 62
     5e2:	8c 01       	movw	r16, r24
	uint8_t en = 0x00;
     5e4:	19 82       	std	Y+1, r1	; 0x01
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&en, sizeof(en));
     5e6:	21 e0       	ldi	r18, 0x01	; 1
     5e8:	ae 01       	movw	r20, r28
     5ea:	4f 5f       	subi	r20, 0xFF	; 255
     5ec:	5f 4f       	sbci	r21, 0xFF	; 255
     5ee:	66 e5       	ldi	r22, 0x56	; 86
     5f0:	fc 01       	movw	r30, r24
     5f2:	82 81       	ldd	r24, Z+2	; 0x02
     5f4:	93 81       	ldd	r25, Z+3	; 0x03
     5f6:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     5fa:	f8 01       	movw	r30, r16
     5fc:	82 81       	ldd	r24, Z+2	; 0x02
     5fe:	93 81       	ldd	r25, Z+3	; 0x03
     600:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     604:	0f 90       	pop	r0
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	08 95       	ret

00000610 <_ZN13CDGUSDatabase18OnVariableReceivedEjPjj>:
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&en, sizeof(en));
	m_cpSender->WaitMODBUSTransmitter();
}

void CDGUSDatabase::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	ec 01       	movw	r28, r24
     616:	ba 01       	movw	r22, r20
	if (data_transaction != 0)
     618:	88 81       	ld	r24, Y
     61a:	99 81       	ldd	r25, Y+1	; 0x01
     61c:	00 97       	sbiw	r24, 0x00	; 0
     61e:	19 f0       	breq	.+6      	; 0x626 <_ZN13CDGUSDatabase18OnVariableReceivedEjPjj+0x16>
		memcpy(data_transaction, data, length);
     620:	a9 01       	movw	r20, r18
     622:	0e 94 7e 24 	call	0x48fc	; 0x48fc <memcpy>
	data_transaction = 0;
     626:	18 82       	st	Y, r1
     628:	19 82       	std	Y+1, r1	; 0x01
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	08 95       	ret

00000630 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
     630:	0f 93       	push	r16
	PORTD.DIRSET = PIN3_bm; // Set TX to output
     632:	e0 e6       	ldi	r30, 0x60	; 96
     634:	f6 e0       	ldi	r31, 0x06	; 6
     636:	88 e0       	ldi	r24, 0x08	; 8
     638:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; // Set RX to input
     63a:	84 e0       	ldi	r24, 0x04	; 4
     63c:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN2CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
     63e:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
     640:	13 8a       	std	Z+19, r1	; 0x13
	
	// Turn on interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_LO_gc/* | USART_DREINTLVL_LO_gc*/;
     642:	e0 ea       	ldi	r30, 0xA0	; 160
     644:	f9 e0       	ldi	r31, 0x09	; 9
     646:	84 e1       	ldi	r24, 0x14	; 20
     648:	83 83       	std	Z+3, r24	; 0x03
	
	// Enable RX, TX
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     64a:	88 e1       	ldi	r24, 0x18	; 24
     64c:	84 83       	std	Z+4, r24	; 0x04
	
	// Double transmission speed
#ifdef U2X
	USARTD0.CTRLB |=  (1 << USART_CLK2X_bm);
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
     64e:	84 81       	ldd	r24, Z+4	; 0x04
     650:	84 83       	std	Z+4, r24	; 0x04
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
     652:	41 30       	cpi	r20, 0x01	; 1
     654:	19 f0       	breq	.+6      	; 0x65c <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x2c>
     656:	42 30       	cpi	r20, 0x02	; 2
     658:	19 f0       	breq	.+6      	; 0x660 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x30>
     65a:	04 c0       	rjmp	.+8      	; 0x664 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
	{
		case PARITY_DISABLE:
			temp |= USART_PMODE_DISABLED_gc;
		break;
		case PARITY_EVEN:
			temp |= USART_PMODE_EVEN_gc;
     65c:	80 e2       	ldi	r24, 0x20	; 32
     65e:	03 c0       	rjmp	.+6      	; 0x666 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
		break;
		case PARITY_ODD:
			temp |= USART_PMODE_ODD_gc;
     660:	80 e3       	ldi	r24, 0x30	; 48
		break;
     662:	01 c0       	rjmp	.+2      	; 0x666 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
#endif

	// Parity param set
	uint8_t temp = 0;
     664:	80 e0       	ldi	r24, 0x00	; 0
			temp |= USART_PMODE_ODD_gc;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
     666:	22 23       	and	r18, r18
     668:	19 f0       	breq	.+6      	; 0x670 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x40>
     66a:	21 30       	cpi	r18, 0x01	; 1
     66c:	19 f0       	breq	.+6      	; 0x674 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x44>
     66e:	03 c0       	rjmp	.+6      	; 0x676 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
	{
		case STOPBITS_1BIT:
			temp &= ~USART_SBMODE_bm;
     670:	87 7f       	andi	r24, 0xF7	; 247
		break;
     672:	01 c0       	rjmp	.+2      	; 0x676 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
		case STOPBITS_2BIT:
			temp |=  USART_SBMODE_bm;
     674:	88 60       	ori	r24, 0x08	; 8
		break;
	}
	
	// USART mode asynchronous, 8bit
	USARTD0.CTRLC = (Async?USART_CMODE_ASYNCHRONOUS_gc:USART_CMODE_SYNCHRONOUS_gc) | USART_CHSIZE_8BIT_gc | temp;
     676:	01 11       	cpse	r16, r1
     678:	02 c0       	rjmp	.+4      	; 0x67e <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x4e>
     67a:	93 e4       	ldi	r25, 0x43	; 67
     67c:	01 c0       	rjmp	.+2      	; 0x680 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x50>
     67e:	93 e0       	ldi	r25, 0x03	; 3
     680:	89 2b       	or	r24, r25
     682:	e0 ea       	ldi	r30, 0xA0	; 160
     684:	f9 e0       	ldi	r31, 0x09	; 9
     686:	85 83       	std	Z+5, r24	; 0x05
	
	// Set baud rate
	USARTD0.BAUDCTRLA = bsel_table[baud];
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	db 01       	movw	r26, r22
     68c:	aa 5d       	subi	r26, 0xDA	; 218
     68e:	bf 4d       	sbci	r27, 0xDF	; 223
     690:	8c 91       	ld	r24, X
     692:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (((int8_t)(16 + bscale_table[baud])) << USART_BSCALE0_bp) | ((bsel_table[baud] >> 8) & 0x0F);	
     694:	db 01       	movw	r26, r22
     696:	aa 5f       	subi	r26, 0xFA	; 250
     698:	bf 4d       	sbci	r27, 0xDF	; 223
     69a:	8c 91       	ld	r24, X
     69c:	82 95       	swap	r24
     69e:	80 7f       	andi	r24, 0xF0	; 240
     6a0:	87 83       	std	Z+7, r24	; 0x07
} //CUSART
     6a2:	0f 91       	pop	r16
     6a4:	08 95       	ret

000006a6 <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return USARTD0.DATA;
     6a6:	80 91 a0 09 	lds	r24, 0x09A0
}
     6aa:	08 95       	ret

000006ac <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( ( USARTD0.STATUS & (1<<USART_DREIF_bm)) );
	USARTD0.DATA = data;
     6ac:	60 93 a0 09 	sts	0x09A0, r22
     6b0:	08 95       	ret

000006b2 <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return !( USARTD0.STATUS & USART_TXCIF_bm);
     6b2:	80 91 a1 09 	lds	r24, 0x09A1
     6b6:	86 fb       	bst	r24, 6
     6b8:	88 27       	eor	r24, r24
     6ba:	80 f9       	bld	r24, 0
}
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	89 27       	eor	r24, r25
     6c0:	08 95       	ret

000006c2 <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return !( USARTD0.STATUS & USART_RXCIF_bm);
     6c2:	80 91 a1 09 	lds	r24, 0x09A1
     6c6:	80 95       	com	r24
}
     6c8:	88 1f       	adc	r24, r24
     6ca:	88 27       	eor	r24, r24
     6cc:	88 1f       	adc	r24, r24
     6ce:	08 95       	ret

000006d0 <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return !( USARTD0.STATUS & USART_DREIF_bm);
     6d0:	80 91 a1 09 	lds	r24, 0x09A1
     6d4:	85 fb       	bst	r24, 5
     6d6:	88 27       	eor	r24, r24
     6d8:	80 f9       	bld	r24, 0
}
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	89 27       	eor	r24, r25
     6de:	08 95       	ret

000006e0 <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_RXC_vect_num] = sender;
     6e0:	60 93 99 22 	sts	0x2299, r22
     6e4:	70 93 9a 22 	sts	0x229A, r23
	InterruptFuncTable[USARTD0_RXC_vect_num] = callback;
     6e8:	40 93 a3 21 	sts	0x21A3, r20
     6ec:	50 93 a4 21 	sts	0x21A4, r21
     6f0:	08 95       	ret

000006f2 <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_TXC_vect_num] = sender;
     6f2:	60 93 9d 22 	sts	0x229D, r22
     6f6:	70 93 9e 22 	sts	0x229E, r23
	InterruptFuncTable[USARTD0_TXC_vect_num] = callback;
     6fa:	40 93 a7 21 	sts	0x21A7, r20
     6fe:	50 93 a8 21 	sts	0x21A8, r21
     702:	08 95       	ret

00000704 <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMARxTrig(DMA_CH_t *dma_channel)
{
     704:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_RXC_gc;
     706:	8b e6       	ldi	r24, 0x6B	; 107
     708:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->SRCADDR0 = (int)&USARTD0.DATA;
     70a:	80 ea       	ldi	r24, 0xA0	; 160
     70c:	80 87       	std	Z+8, r24	; 0x08
	dma_channel->SRCADDR1 = (int)&USARTD0.DATA >> 8;
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	81 87       	std	Z+9, r24	; 0x09
	dma_channel->SRCADDR2 = 0;
     712:	12 86       	std	Z+10, r1	; 0x0a
     714:	08 95       	ret

00000716 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMATxTrig(DMA_CH_t *dma_channel)
{
     716:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_DRE_gc;
     718:	8c e6       	ldi	r24, 0x6C	; 108
     71a:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->DESTADDR0 = (int)&USARTD0.DATA;
     71c:	80 ea       	ldi	r24, 0xA0	; 160
     71e:	84 87       	std	Z+12, r24	; 0x0c
	dma_channel->DESTADDR1 = (int)&USARTD0.DATA >> 8;
     720:	89 e0       	ldi	r24, 0x09	; 9
     722:	85 87       	std	Z+13, r24	; 0x0d
	dma_channel->DESTADDR2 = 0;
     724:	16 86       	std	Z+14, r1	; 0x0e
     726:	08 95       	ret

00000728 <_ZN10CDGUSUSARTC1Ev>:
								true, true, true, true, true, true, true, true, true, true,
								true, true};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	ec 01       	movw	r28, r24
     72e:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN6CUSARTC1Ev>
     732:	8d e4       	ldi	r24, 0x4D	; 77
     734:	90 e2       	ldi	r25, 0x20	; 32
     736:	88 83       	st	Y, r24
     738:	99 83       	std	Y+1, r25	; 0x01
{
} //CDGUSUSART
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	08 95       	ret

00000740 <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
     740:	2d e4       	ldi	r18, 0x4D	; 77
     742:	30 e2       	ldi	r19, 0x20	; 32
     744:	fc 01       	movw	r30, r24
     746:	20 83       	st	Z, r18
     748:	31 83       	std	Z+1, r19	; 0x01
     74a:	0e 94 91 0b 	call	0x1722	; 0x1722 <_ZN6CUSARTD1Ev>
     74e:	08 95       	ret

00000750 <_ZN11CLaserBoardC1Ev>:
#include <avr/interrupt.h>
#include <avr/io.h>
#include <util/delay.h>

// default constructor
CLaserBoard::CLaserBoard()
     750:	08 95       	ret

00000752 <_ZN11CLaserBoardD1Ev>:
{
} //CLaserBoard

// default destructor
CLaserBoard::~CLaserBoard()
     752:	08 95       	ret

00000754 <_ZN11CLaserBoard12InitializeIOEv>:
} //~CLaserBoard

void CLaserBoard::InitializeIO()
{
	// Set all output
	PORTC.DIRSET = 0xFF;
     754:	e0 e4       	ldi	r30, 0x40	; 64
     756:	f6 e0       	ldi	r31, 0x06	; 6
     758:	9f ef       	ldi	r25, 0xFF	; 255
     75a:	91 83       	std	Z+1, r25	; 0x01
	
	// Configure all pins to "wired and"
	PORTC.PIN0CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     75c:	88 ea       	ldi	r24, 0xA8	; 168
     75e:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     760:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.PIN2CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     762:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     764:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     766:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     768:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     76a:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     76c:	87 8b       	std	Z+23, r24	; 0x17
	
	// Set all down
	PORTC.OUT = 0x00;
     76e:	14 82       	std	Z+4, r1	; 0x04
	
	// Buzzer pin initialize
	PORTE.DIRSET = PIN3_bm;
     770:	e0 e8       	ldi	r30, 0x80	; 128
     772:	f6 e0       	ldi	r31, 0x06	; 6
     774:	88 e0       	ldi	r24, 0x08	; 8
     776:	81 83       	std	Z+1, r24	; 0x01
	
	// Configure
	PORTE.PIN3CTRL = PORT_OPC_TOTEM_gc;
     778:	13 8a       	std	Z+19, r1	; 0x13
	PORTE.OUT = 0;
     77a:	14 82       	std	Z+4, r1	; 0x04
	
	// Configure all pins of PWM to inverted
	PORTF.PIN0CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     77c:	e0 ea       	ldi	r30, 0xA0	; 160
     77e:	f6 e0       	ldi	r31, 0x06	; 6
     780:	80 ec       	ldi	r24, 0xC0	; 192
     782:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     784:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     786:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     788:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     78a:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     78c:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     78e:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     790:	87 8b       	std	Z+23, r24	; 0x17

	// Set all down
	PORTF.OUT = 0x00;
     792:	14 82       	std	Z+4, r1	; 0x04

	// Set all output
	PORTF.DIRSET = 0xFF;
     794:	91 83       	std	Z+1, r25	; 0x01
	
	// Set PD0 and PD4
	PORTD.DIRSET = PIN0_bm | PIN4_bm;
     796:	e0 e6       	ldi	r30, 0x60	; 96
     798:	f6 e0       	ldi	r31, 0x06	; 6
     79a:	91 e1       	ldi	r25, 0x11	; 17
     79c:	91 83       	std	Z+1, r25	; 0x01
	
	// Configure all pins to "wired and"
	PORTD.PIN0CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     79e:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN4CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     7a0:	84 8b       	std	Z+20, r24	; 0x14
	
	PORTD.OUT = 0;//PIN0_bm;
     7a2:	14 82       	std	Z+4, r1	; 0x04
	
	// Enable low level interrupts
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
     7a4:	e0 ea       	ldi	r30, 0xA0	; 160
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	82 81       	ldd	r24, Z+2	; 0x02
     7aa:	81 60       	ori	r24, 0x01	; 1
     7ac:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
     7ae:	82 81       	ldd	r24, Z+2	; 0x02
     7b0:	82 60       	ori	r24, 0x02	; 2
     7b2:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_HILVLEN_bm;
     7b4:	82 81       	ldd	r24, Z+2	; 0x02
     7b6:	84 60       	ori	r24, 0x04	; 4
     7b8:	82 83       	std	Z+2, r24	; 0x02
     7ba:	08 95       	ret

000007bc <_ZN11CLaserBoard15InitializeClockEv>:

void CLaserBoard::InitializeClock()
{
	//-----------------------
	// External 16000.000 kHz oscillator initialization
	OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
     7bc:	e0 e5       	ldi	r30, 0x50	; 80
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	8b ec       	ldi	r24, 0xCB	; 203
     7c2:	82 83       	std	Z+2, r24	; 0x02
	// Enable the external oscillator
	OSC.CTRL |= OSC_XOSCEN_bm;
     7c4:	80 81       	ld	r24, Z
     7c6:	88 60       	ori	r24, 0x08	; 8
     7c8:	80 83       	st	Z, r24
	// Wait for the external oscillator to stabilize
	while ((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
     7ca:	81 81       	ldd	r24, Z+1	; 0x01
     7cc:	83 ff       	sbrs	r24, 3
     7ce:	fd cf       	rjmp	.-6      	; 0x7ca <_ZN11CLaserBoard15InitializeClockEv+0xe>
	// PLL initialization
	// PLL clock source: External Osc. or Clock
	// PLL multiplication factor: 2
	// PLL frequency: 32.000000 MHz
	// Set the PLL clock source and multiplication factor
	unsigned char n = (OSC.PLLCTRL & (~(OSC_PLLSRC_gm | OSC_PLLFAC_gm))) |    OSC_PLLSRC_XOSC_gc | OSC_PLLFAC2_bm;
     7d0:	e0 e5       	ldi	r30, 0x50	; 80
     7d2:	f0 e0       	ldi	r31, 0x00	; 0
     7d4:	85 81       	ldd	r24, Z+5	; 0x05
	CCP = CCP_IOREG_gc;
     7d6:	98 ed       	ldi	r25, 0xD8	; 216
     7d8:	94 bf       	out	0x34, r25	; 52
	OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | OSC_PLLFAC2_bm;//n;
     7da:	84 ec       	ldi	r24, 0xC4	; 196
     7dc:	85 83       	std	Z+5, r24	; 0x05
	// Enable the PLL
	OSC.CTRL |= OSC_PLLEN_bm;
     7de:	80 81       	ld	r24, Z
     7e0:	80 61       	ori	r24, 0x10	; 16
     7e2:	80 83       	st	Z, r24
	// ClkPer4: 32000.000 kHz
	// ClkPer2: 32000.000 kHz
	// ClkPer:  32000.000 kHz
	// ClkCPU:  32000.000 kHz
	n = (CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
     7e4:	e0 e4       	ldi	r30, 0x40	; 64
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
     7e8:	81 81       	ldd	r24, Z+1	; 0x01
	CCP = CCP_IOREG_gc;
     7ea:	94 bf       	out	0x34, r25	; 52
	CLK.PSCTRL = CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;//n;
     7ec:	11 82       	std	Z+1, r1	; 0x01
	// Wait for the PLL to stabilize
	while ((OSC.STATUS & OSC_PLLRDY_bm)==0);
     7ee:	e0 e5       	ldi	r30, 0x50	; 80
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
     7f2:	81 81       	ldd	r24, Z+1	; 0x01
     7f4:	84 ff       	sbrs	r24, 4
     7f6:	fd cf       	rjmp	.-6      	; 0x7f2 <_ZN11CLaserBoard15InitializeClockEv+0x36>
	// Select the system clock source: Phase Locked Loop
	n = (CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_PLL_gc;
     7f8:	e0 e4       	ldi	r30, 0x40	; 64
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	80 81       	ld	r24, Z
     7fe:	88 7f       	andi	r24, 0xF8	; 248
     800:	84 60       	ori	r24, 0x04	; 4
	CCP = CCP_IOREG_gc;
     802:	98 ed       	ldi	r25, 0xD8	; 216
     804:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = n;
     806:	80 83       	st	Z, r24
	// Disable the unused oscillators: 2 MHz, 32 MHz, internal 32 kHz
	OSC.CTRL &= ~(OSC_RC2MEN_bm | OSC_RC32MEN_bm | OSC_RC32KEN_bm);
     808:	a0 e5       	ldi	r26, 0x50	; 80
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	8c 91       	ld	r24, X
     80e:	88 7f       	andi	r24, 0xF8	; 248
     810:	8c 93       	st	X, r24
	// Lock the CLK.CTRL and CLK.PSCTRL registers
	n = CLK.LOCK | CLK_LOCK_bm;
     812:	82 81       	ldd	r24, Z+2	; 0x02
	CCP = CCP_IOREG_gc;
     814:	94 bf       	out	0x34, r25	; 52
	CLK.LOCK = CLK_LOCK_bm;//n;
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	82 83       	std	Z+2, r24	; 0x02
	// Peripheral Clock output: Disabled
	PORTCFG.CLKEVOUT = (PORTCFG.CLKEVOUT & (~PORTCFG_CLKOUT_gm)) | PORTCFG_CLKOUT_OFF_gc;
     81a:	e0 eb       	ldi	r30, 0xB0	; 176
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	84 81       	ldd	r24, Z+4	; 0x04
     820:	8c 7f       	andi	r24, 0xFC	; 252
     822:	84 83       	std	Z+4, r24	; 0x04
     824:	08 95       	ret

00000826 <_ZN11CLaserBoard8Relay1OnEv>:
	//-----------------------
}

void CLaserBoard::Relay1On()
{
	PORTD.DIRCLR = PIN0_bm;
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	80 93 62 06 	sts	0x0662, r24
     82c:	08 95       	ret

0000082e <_ZN11CLaserBoard8Relay2OnEv>:
}

void CLaserBoard::Relay2On()
{
	PORTD.DIRCLR = PIN4_bm;
     82e:	80 e1       	ldi	r24, 0x10	; 16
     830:	80 93 62 06 	sts	0x0662, r24
     834:	08 95       	ret

00000836 <_ZN11CLaserBoard9Relay1OffEv>:
}

void CLaserBoard::Relay1Off()
{
	PORTD.DIRSET = PIN0_bm;
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	80 93 61 06 	sts	0x0661, r24
     83c:	08 95       	ret

0000083e <_ZN11CLaserBoard9Relay2OffEv>:
}

void CLaserBoard::Relay2Off()
{
	PORTD.DIRSET = PIN4_bm;
     83e:	80 e1       	ldi	r24, 0x10	; 16
     840:	80 93 61 06 	sts	0x0661, r24
     844:	08 95       	ret

00000846 <_ZN11CLaserBoard4BeepEv>:
}

void CLaserBoard::Beep()
{
	cli();
     846:	f8 94       	cli
     848:	84 e6       	ldi	r24, 0x64	; 100
     84a:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 100; i++)
	{
		PORTE.OUTSET = PIN3_bm;
     84c:	e0 e8       	ldi	r30, 0x80	; 128
     84e:	f6 e0       	ldi	r31, 0x06	; 6
     850:	28 e0       	ldi	r18, 0x08	; 8
     852:	25 83       	std	Z+5, r18	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     854:	af e9       	ldi	r26, 0x9F	; 159
     856:	bf e0       	ldi	r27, 0x0F	; 15
     858:	11 97       	sbiw	r26, 0x01	; 1
     85a:	f1 f7       	brne	.-4      	; 0x858 <_ZN11CLaserBoard4BeepEv+0x12>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <_ZN11CLaserBoard4BeepEv+0x18>
     85e:	00 00       	nop
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
     860:	26 83       	std	Z+6, r18	; 0x06
     862:	af e9       	ldi	r26, 0x9F	; 159
     864:	bf e0       	ldi	r27, 0x0F	; 15
     866:	11 97       	sbiw	r26, 0x01	; 1
     868:	f1 f7       	brne	.-4      	; 0x866 <_ZN11CLaserBoard4BeepEv+0x20>
     86a:	00 c0       	rjmp	.+0      	; 0x86c <_ZN11CLaserBoard4BeepEv+0x26>
     86c:	00 00       	nop
     86e:	01 97       	sbiw	r24, 0x01	; 1

void CLaserBoard::Beep()
{
	cli();
	
	for (int i = 0; i < 100; i++)
     870:	81 f7       	brne	.-32     	; 0x852 <_ZN11CLaserBoard4BeepEv+0xc>
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
		_delay_us(500);
	}
	
	sei();
     872:	78 94       	sei
     874:	08 95       	ret

00000876 <_ZN11CLaserBoard14BeepClassErrorEv>:
}

void CLaserBoard::BeepClassError()
{
	cli();
     876:	f8 94       	cli
     878:	45 e0       	ldi	r20, 0x05	; 5
     87a:	50 e0       	ldi	r21, 0x00	; 0
	
	sei();
}

void CLaserBoard::BeepClassError()
{
     87c:	64 e6       	ldi	r22, 0x64	; 100
     87e:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
		{
			PORTE.OUTSET = PIN3_bm;
     880:	e0 e8       	ldi	r30, 0x80	; 128
     882:	f6 e0       	ldi	r31, 0x06	; 6
     884:	28 e0       	ldi	r18, 0x08	; 8
     886:	1c c0       	rjmp	.+56     	; 0x8c0 <_ZN11CLaserBoard14BeepClassErrorEv+0x4a>
     888:	25 83       	std	Z+5, r18	; 0x05
     88a:	af e9       	ldi	r26, 0x9F	; 159
     88c:	bf e0       	ldi	r27, 0x0F	; 15
     88e:	11 97       	sbiw	r26, 0x01	; 1
     890:	f1 f7       	brne	.-4      	; 0x88e <_ZN11CLaserBoard14BeepClassErrorEv+0x18>
     892:	00 c0       	rjmp	.+0      	; 0x894 <_ZN11CLaserBoard14BeepClassErrorEv+0x1e>
     894:	00 00       	nop
			_delay_us(500);
			PORTE.OUTCLR = PIN3_bm;
     896:	26 83       	std	Z+6, r18	; 0x06
     898:	af e9       	ldi	r26, 0x9F	; 159
     89a:	bf e0       	ldi	r27, 0x0F	; 15
     89c:	11 97       	sbiw	r26, 0x01	; 1
     89e:	f1 f7       	brne	.-4      	; 0x89c <_ZN11CLaserBoard14BeepClassErrorEv+0x26>
     8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <_ZN11CLaserBoard14BeepClassErrorEv+0x2c>
     8a2:	00 00       	nop
     8a4:	01 97       	sbiw	r24, 0x01	; 1
{
	cli();
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
     8a6:	81 f7       	brne	.-32     	; 0x888 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8a8:	bf ef       	ldi	r27, 0xFF	; 255
     8aa:	73 ec       	ldi	r23, 0xC3	; 195
     8ac:	89 e0       	ldi	r24, 0x09	; 9
     8ae:	b1 50       	subi	r27, 0x01	; 1
     8b0:	70 40       	sbci	r23, 0x00	; 0
     8b2:	80 40       	sbci	r24, 0x00	; 0
     8b4:	e1 f7       	brne	.-8      	; 0x8ae <_ZN11CLaserBoard14BeepClassErrorEv+0x38>
     8b6:	00 c0       	rjmp	.+0      	; 0x8b8 <_ZN11CLaserBoard14BeepClassErrorEv+0x42>
     8b8:	00 00       	nop
     8ba:	41 50       	subi	r20, 0x01	; 1
     8bc:	51 09       	sbc	r21, r1

void CLaserBoard::BeepClassError()
{
	cli();
	
	for (int j = 0; j < 5; j++)
     8be:	19 f0       	breq	.+6      	; 0x8c6 <_ZN11CLaserBoard14BeepClassErrorEv+0x50>
	
	sei();
}

void CLaserBoard::BeepClassError()
{
     8c0:	86 2f       	mov	r24, r22
     8c2:	93 2f       	mov	r25, r19
     8c4:	e1 cf       	rjmp	.-62     	; 0x888 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
			_delay_us(500);
		}
		_delay_ms(100);
	}
	
	sei();
     8c6:	78 94       	sei
     8c8:	08 95       	ret

000008ca <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
{
} //~CLaserControlApp

// CMBEventsHandler
void CLaserControlApp::OnTransactionCallback(uint8_t* data, uint16_t length)
{
     8ca:	08 95       	ret

000008cc <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
			CLaserBoard::Beep();
	}
}

void CLaserControlApp::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
     8cc:	dc 01       	movw	r26, r24
	// Update GUI registers
	if (addr == 0x03)	PIC_ID = data[1];
     8ce:	63 30       	cpi	r22, 0x03	; 3
     8d0:	29 f4       	brne	.+10     	; 0x8dc <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x10>
     8d2:	fa 01       	movw	r30, r20
     8d4:	81 81       	ldd	r24, Z+1	; 0x01
     8d6:	1d 96       	adiw	r26, 0x0d	; 13
     8d8:	8c 93       	st	X, r24
     8da:	1d 97       	sbiw	r26, 0x0d	; 13
	
	switch (PIC_ID)
     8dc:	1d 96       	adiw	r26, 0x0d	; 13
     8de:	4c 91       	ld	r20, X
     8e0:	1d 97       	sbiw	r26, 0x0d	; 13
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	43 32       	cpi	r20, 0x23	; 35
     8e6:	51 05       	cpc	r21, r1
     8e8:	e8 f5       	brcc	.+122    	; 0x964 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x98>
     8ea:	fa 01       	movw	r30, r20
     8ec:	88 27       	eor	r24, r24
     8ee:	ec 50       	subi	r30, 0x0C	; 12
     8f0:	ff 4f       	sbci	r31, 0xFF	; 255
     8f2:	8f 4f       	sbci	r24, 0xFF	; 255
     8f4:	0c 94 18 23 	jmp	0x4630	; 0x4630 <__tablejump2__>
	{
		case PICID_LOGO:
			state = APP_LOGO;
     8f8:	1c 96       	adiw	r26, 0x0c	; 12
     8fa:	1c 92       	st	X, r1
		break;
     8fc:	08 95       	ret
		case PICID_SETUP:
			state = APP_SETUP;
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	1c 96       	adiw	r26, 0x0c	; 12
     902:	8c 93       	st	X, r24
		break;
     904:	08 95       	ret
		case PICID_TIMER:
			state = APP_RUN;
     906:	83 e0       	ldi	r24, 0x03	; 3
     908:	1c 96       	adiw	r26, 0x0c	; 12
     90a:	8c 93       	st	X, r24
		break;
     90c:	08 95       	ret
		case PICID_OnTimerStart:
			state = APP_OnTimerResume;
     90e:	85 e0       	ldi	r24, 0x05	; 5
     910:	1c 96       	adiw	r26, 0x0c	; 12
     912:	8c 93       	st	X, r24
		break;
     914:	08 95       	ret
		case PICID_OnStart:
			state = APP_OnTimerStart;
     916:	84 e0       	ldi	r24, 0x04	; 4
     918:	1c 96       	adiw	r26, 0x0c	; 12
     91a:	8c 93       	st	X, r24
		break;
     91c:	08 95       	ret
		case PICID_OnPause:
			state = APP_OnTimerPause;
     91e:	86 e0       	ldi	r24, 0x06	; 6
     920:	1c 96       	adiw	r26, 0x0c	; 12
     922:	8c 93       	st	X, r24
		break;
     924:	08 95       	ret
		case PICID_OnRestart:
			state = APP_OnTimerRestart;
     926:	88 e0       	ldi	r24, 0x08	; 8
     928:	1c 96       	adiw	r26, 0x0c	; 12
     92a:	8c 93       	st	X, r24
		break;
     92c:	08 95       	ret
		case PICID_OnStop:
			state = APP_OnTimerStop;
     92e:	87 e0       	ldi	r24, 0x07	; 7
     930:	1c 96       	adiw	r26, 0x0c	; 12
     932:	8c 93       	st	X, r24
		break;
     934:	08 95       	ret
		case PICID_OnH_L:
			state = APP_OnHL;
     936:	89 e0       	ldi	r24, 0x09	; 9
     938:	1c 96       	adiw	r26, 0x0c	; 12
     93a:	8c 93       	st	X, r24
		break;
     93c:	08 95       	ret
		case PICID_OnTimerSave:
			state = APP_OnSaveSetup;
     93e:	8a e0       	ldi	r24, 0x0A	; 10
     940:	1c 96       	adiw	r26, 0x0c	; 12
     942:	8c 93       	st	X, r24
		break;
     944:	08 95       	ret
		
		case PICID_PROFILEPOP:
			state = APP_READPROFILE;
     946:	8c e0       	ldi	r24, 0x0C	; 12
     948:	1c 96       	adiw	r26, 0x0c	; 12
     94a:	8c 93       	st	X, r24
		break;
     94c:	08 95       	ret
		case PICID_PROFILEPUSH:
			state = APP_SAVEPROFILE;
     94e:	8b e0       	ldi	r24, 0x0B	; 11
     950:	1c 96       	adiw	r26, 0x0c	; 12
     952:	8c 93       	st	X, r24
		break;
     954:	08 95       	ret
		case PICID_DATABASE:
			state = APP_SHOWDATABASE;
     956:	8d e0       	ldi	r24, 0x0D	; 13
     958:	1c 96       	adiw	r26, 0x0c	; 12
     95a:	8c 93       	st	X, r24
		break;
     95c:	08 95       	ret
		case PICID_EDITPROFILE:
		case PICID_NEWPROFILE:
			state = APP_UNMAPDATABASE;
     95e:	8e e0       	ldi	r24, 0x0E	; 14
     960:	1c 96       	adiw	r26, 0x0c	; 12
     962:	8c 93       	st	X, r24
     964:	08 95       	ret

00000966 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:
extern CSoundPlayer player;
extern CDGUSDatabase Database;

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
     966:	da 01       	movw	r26, r20
     968:	ed 91       	ld	r30, X+
     96a:	fc 91       	ld	r31, X
     96c:	fe 27       	eor	r31, r30
     96e:	ef 27       	eor	r30, r31
     970:	fe 27       	eor	r31, r30

void CLaserControlApp::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
	// Update GUI variables	
	uint16_t val = swap(*((uint16_t*)data));
	switch (addr)
     972:	63 30       	cpi	r22, 0x03	; 3
     974:	71 05       	cpc	r23, r1
     976:	31 f1       	breq	.+76     	; 0x9c4 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x5e>
     978:	28 f4       	brcc	.+10     	; 0x984 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x1e>
     97a:	61 30       	cpi	r22, 0x01	; 1
     97c:	71 05       	cpc	r23, r1
     97e:	c1 f0       	breq	.+48     	; 0x9b0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x4a>
     980:	68 f0       	brcs	.+26     	; 0x99c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x36>
     982:	08 95       	ret
     984:	68 30       	cpi	r22, 0x08	; 8
     986:	71 05       	cpc	r23, r1
     988:	41 f1       	breq	.+80     	; 0x9da <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x74>
     98a:	dc 01       	movw	r26, r24
     98c:	61 15       	cp	r22, r1
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	78 07       	cpc	r23, r24
     992:	49 f1       	breq	.+82     	; 0x9e6 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x80>
     994:	67 30       	cpi	r22, 0x07	; 7
     996:	71 05       	cpc	r23, r1
     998:	69 f5       	brne	.+90     	; 0x9f4 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x8e>
     99a:	1a c0       	rjmp	.+52     	; 0x9d0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x6a>
	{
		case VARIABLE_ADDR_MIN:
			m_wSetMin = val;
     99c:	dc 01       	movw	r26, r24
     99e:	54 96       	adiw	r26, 0x14	; 20
     9a0:	ed 93       	st	X+, r30
     9a2:	fc 93       	st	X, r31
     9a4:	55 97       	sbiw	r26, 0x15	; 21
			m_wMinutes = val;
     9a6:	1e 96       	adiw	r26, 0x0e	; 14
     9a8:	ed 93       	st	X+, r30
     9aa:	fc 93       	st	X, r31
     9ac:	1f 97       	sbiw	r26, 0x0f	; 15
		break;
     9ae:	08 95       	ret
		case VARIABLE_ADDR_SEC:
			m_wSetSec = val;
     9b0:	dc 01       	movw	r26, r24
     9b2:	56 96       	adiw	r26, 0x16	; 22
     9b4:	ed 93       	st	X+, r30
     9b6:	fc 93       	st	X, r31
     9b8:	57 97       	sbiw	r26, 0x17	; 23
			m_wSeconds = val;
     9ba:	50 96       	adiw	r26, 0x10	; 16
     9bc:	ed 93       	st	X+, r30
     9be:	fc 93       	st	X, r31
     9c0:	51 97       	sbiw	r26, 0x11	; 17
		break;
     9c2:	08 95       	ret
		case VARIABLE_ADDR_MSC:
			// Not used
		break;
		case VARIABLE_ADDR_PWR:
			m_wPower = val;
     9c4:	dc 01       	movw	r26, r24
     9c6:	58 96       	adiw	r26, 0x18	; 24
     9c8:	ed 93       	st	X+, r30
     9ca:	fc 93       	st	X, r31
     9cc:	59 97       	sbiw	r26, 0x19	; 25
		break;
     9ce:	08 95       	ret
		case VARIABLE_ADDR_DATAPAGE:
			m_wDatabasePage = val;
     9d0:	5a 96       	adiw	r26, 0x1a	; 26
     9d2:	ed 93       	st	X+, r30
     9d4:	fc 93       	st	X, r31
     9d6:	5b 97       	sbiw	r26, 0x1b	; 27
		break;
     9d8:	08 95       	ret
		case VARIABLE_ADDR_SEL:
			m_wDatabaseSelInx = val;
     9da:	dc 01       	movw	r26, r24
     9dc:	5c 96       	adiw	r26, 0x1c	; 28
     9de:	ed 93       	st	X+, r30
     9e0:	fc 93       	st	X, r31
     9e2:	5d 97       	sbiw	r26, 0x1d	; 29
		break;
     9e4:	08 95       	ret
		case VARIABLE_ADDR_DATABASE:
			Database.OnVariableReceived(addr, data, length);
     9e6:	60 e0       	ldi	r22, 0x00	; 0
     9e8:	71 e0       	ldi	r23, 0x01	; 1
     9ea:	81 ee       	ldi	r24, 0xE1	; 225
     9ec:	92 e2       	ldi	r25, 0x22	; 34
     9ee:	0e 94 08 03 	call	0x610	; 0x610 <_ZN13CDGUSDatabase18OnVariableReceivedEjPjj>
		break;
     9f2:	08 95       	ret
		default:
			// Error
			CLaserBoard::Beep();
     9f4:	0e 94 23 04 	call	0x846	; 0x846 <_ZN11CLaserBoard4BeepEv>
     9f8:	08 95       	ret

000009fa <_ZN16CLaserControlAppC1Ev>:
	else
		return y;
}

// default constructor
CLaserControlApp::CLaserControlApp()
     9fa:	25 e6       	ldi	r18, 0x65	; 101
     9fc:	30 e2       	ldi	r19, 0x20	; 32
     9fe:	fc 01       	movw	r30, r24
     a00:	20 83       	st	Z, r18
     a02:	31 83       	std	Z+1, r19	; 0x01
     a04:	08 95       	ret

00000a06 <_ZN16CLaserControlAppD1Ev>:
{
} //CLaserControlApp

// default destructor
CLaserControlApp::~CLaserControlApp()
     a06:	25 e6       	ldi	r18, 0x65	; 101
     a08:	30 e2       	ldi	r19, 0x20	; 32
     a0a:	fc 01       	movw	r30, r24
     a0c:	20 83       	st	Z, r18
     a0e:	31 83       	std	Z+1, r19	; 0x01
     a10:	0e 94 b6 20 	call	0x416c	; 0x416c <_ZN16CMBEventsHandlerD1Ev>
     a14:	08 95       	ret

00000a16 <_ZN16CLaserControlApp5StartEv>:
	m_wDatabasePage = 0;
	m_wDatabaseSelInx = 0;
}

void CLaserControlApp::Start()
{	
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
     a22:	28 97       	sbiw	r28, 0x08	; 8
     a24:	cd bf       	out	0x3d, r28	; 61
     a26:	de bf       	out	0x3e, r29	; 62
     a28:	8c 01       	movw	r16, r24
	// Startup DGUS initialization
	uint16_t pic_id = swap(1);
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	8f 83       	std	Y+7, r24	; 0x07
     a30:	98 87       	std	Y+8, r25	; 0x08
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     a32:	22 e0       	ldi	r18, 0x02	; 2
     a34:	ae 01       	movw	r20, r28
     a36:	49 5f       	subi	r20, 0xF9	; 249
     a38:	5f 4f       	sbci	r21, 0xFF	; 255
     a3a:	63 e0       	ldi	r22, 0x03	; 3
     a3c:	f8 01       	movw	r30, r16
     a3e:	86 8d       	ldd	r24, Z+30	; 0x1e
     a40:	97 8d       	ldd	r25, Z+31	; 0x1f
     a42:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     a46:	f8 01       	movw	r30, r16
     a48:	86 8d       	ldd	r24, Z+30	; 0x1e
     a4a:	97 8d       	ldd	r25, Z+31	; 0x1f
     a4c:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	//Setup variables
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MIN, (uint16_t*)&m_wSetMin, 2);
     a50:	a8 01       	movw	r20, r16
     a52:	4c 5e       	subi	r20, 0xEC	; 236
     a54:	5f 4f       	sbci	r21, 0xFF	; 255
     a56:	22 e0       	ldi	r18, 0x02	; 2
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	f8 01       	movw	r30, r16
     a60:	86 8d       	ldd	r24, Z+30	; 0x1e
     a62:	97 8d       	ldd	r25, Z+31	; 0x1f
     a64:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     a68:	f8 01       	movw	r30, r16
     a6a:	86 8d       	ldd	r24, Z+30	; 0x1e
     a6c:	97 8d       	ldd	r25, Z+31	; 0x1f
     a6e:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_SEC, (uint16_t*)&m_wSetSec, 2);
     a72:	a8 01       	movw	r20, r16
     a74:	4a 5e       	subi	r20, 0xEA	; 234
     a76:	5f 4f       	sbci	r21, 0xFF	; 255
     a78:	22 e0       	ldi	r18, 0x02	; 2
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	61 e0       	ldi	r22, 0x01	; 1
     a7e:	70 e0       	ldi	r23, 0x00	; 0
     a80:	f8 01       	movw	r30, r16
     a82:	86 8d       	ldd	r24, Z+30	; 0x1e
     a84:	97 8d       	ldd	r25, Z+31	; 0x1f
     a86:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     a8a:	f8 01       	movw	r30, r16
     a8c:	86 8d       	ldd	r24, Z+30	; 0x1e
     a8e:	97 8d       	ldd	r25, Z+31	; 0x1f
     a90:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MSC, (uint16_t*)&m_wMillSec, 2);
     a94:	a8 01       	movw	r20, r16
     a96:	4e 5e       	subi	r20, 0xEE	; 238
     a98:	5f 4f       	sbci	r21, 0xFF	; 255
     a9a:	22 e0       	ldi	r18, 0x02	; 2
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	62 e0       	ldi	r22, 0x02	; 2
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	f8 01       	movw	r30, r16
     aa4:	86 8d       	ldd	r24, Z+30	; 0x1e
     aa6:	97 8d       	ldd	r25, Z+31	; 0x1f
     aa8:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     aac:	f8 01       	movw	r30, r16
     aae:	86 8d       	ldd	r24, Z+30	; 0x1e
     ab0:	97 8d       	ldd	r25, Z+31	; 0x1f
     ab2:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_PWR, (uint16_t*)&m_wPower, 2);
     ab6:	a8 01       	movw	r20, r16
     ab8:	48 5e       	subi	r20, 0xE8	; 232
     aba:	5f 4f       	sbci	r21, 0xFF	; 255
     abc:	22 e0       	ldi	r18, 0x02	; 2
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	63 e0       	ldi	r22, 0x03	; 3
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	f8 01       	movw	r30, r16
     ac6:	86 8d       	ldd	r24, Z+30	; 0x1e
     ac8:	97 8d       	ldd	r25, Z+31	; 0x1f
     aca:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     ace:	f8 01       	movw	r30, r16
     ad0:	86 8d       	ldd	r24, Z+30	; 0x1e
     ad2:	97 8d       	ldd	r25, Z+31	; 0x1f
     ad4:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	uint16_t bar = 0;
	uint16_t bar1 = min(bar, 12);
     ad8:	1d 82       	std	Y+5, r1	; 0x05
     ada:	1e 82       	std	Y+6, r1	; 0x06
	uint16_t bar2 = min(max(bar, 11), 24);
     adc:	8b e0       	ldi	r24, 0x0B	; 11
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	8b 83       	std	Y+3, r24	; 0x03
     ae2:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t bar3 = max(bar, 23);
     ae4:	87 e1       	ldi	r24, 0x17	; 23
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	89 83       	std	Y+1, r24	; 0x01
     aea:	9a 83       	std	Y+2, r25	; 0x02
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR1, (uint16_t*)&bar1, 2);
     aec:	22 e0       	ldi	r18, 0x02	; 2
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	ae 01       	movw	r20, r28
     af2:	4b 5f       	subi	r20, 0xFB	; 251
     af4:	5f 4f       	sbci	r21, 0xFF	; 255
     af6:	64 e0       	ldi	r22, 0x04	; 4
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	f8 01       	movw	r30, r16
     afc:	86 8d       	ldd	r24, Z+30	; 0x1e
     afe:	97 8d       	ldd	r25, Z+31	; 0x1f
     b00:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     b04:	f8 01       	movw	r30, r16
     b06:	86 8d       	ldd	r24, Z+30	; 0x1e
     b08:	97 8d       	ldd	r25, Z+31	; 0x1f
     b0a:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR2, (uint16_t*)&bar2, 2);
     b0e:	22 e0       	ldi	r18, 0x02	; 2
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	ae 01       	movw	r20, r28
     b14:	4d 5f       	subi	r20, 0xFD	; 253
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	65 e0       	ldi	r22, 0x05	; 5
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	f8 01       	movw	r30, r16
     b1e:	86 8d       	ldd	r24, Z+30	; 0x1e
     b20:	97 8d       	ldd	r25, Z+31	; 0x1f
     b22:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     b26:	f8 01       	movw	r30, r16
     b28:	86 8d       	ldd	r24, Z+30	; 0x1e
     b2a:	97 8d       	ldd	r25, Z+31	; 0x1f
     b2c:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR3, (uint16_t*)&bar3, 2);
     b30:	22 e0       	ldi	r18, 0x02	; 2
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	ae 01       	movw	r20, r28
     b36:	4f 5f       	subi	r20, 0xFF	; 255
     b38:	5f 4f       	sbci	r21, 0xFF	; 255
     b3a:	66 e0       	ldi	r22, 0x06	; 6
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	f8 01       	movw	r30, r16
     b40:	86 8d       	ldd	r24, Z+30	; 0x1e
     b42:	97 8d       	ldd	r25, Z+31	; 0x1f
     b44:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     b48:	f8 01       	movw	r30, r16
     b4a:	86 8d       	ldd	r24, Z+30	; 0x1e
     b4c:	97 8d       	ldd	r25, Z+31	; 0x1f
     b4e:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	state = APP_SETUP;
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	f8 01       	movw	r30, r16
     b56:	84 87       	std	Z+12, r24	; 0x0c
}
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	cd bf       	out	0x3d, r28	; 61
     b5c:	de bf       	out	0x3e, r29	; 62
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	08 95       	ret

00000b68 <_GLOBAL__sub_I_timer>:
#include "CLaserControlApp.h"
#include "CSoundPlayer.h"
#include <util/delay.h>


CTimerC timer;
     b68:	80 ef       	ldi	r24, 0xF0	; 240
     b6a:	90 e2       	ldi	r25, 0x20	; 32
     b6c:	0e 94 0f 0b 	call	0x161e	; 0x161e <_ZN7CTimerCC1Ev>
     b70:	08 95       	ret

00000b72 <_GLOBAL__sub_D_timer>:
     b72:	80 ef       	ldi	r24, 0xF0	; 240
     b74:	90 e2       	ldi	r25, 0x20	; 32
     b76:	0e 94 1b 0b 	call	0x1636	; 0x1636 <_ZN7CTimerCD1Ev>
     b7a:	08 95       	ret

00000b7c <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
     b7c:	cf 93       	push	r28
     b7e:	df 93       	push	r29
     b80:	ec 01       	movw	r28, r24
	// GUI class initialization
	m_cpSender = sender;
     b82:	6e 8f       	std	Y+30, r22	; 0x1e
     b84:	7f 8f       	std	Y+31, r23	; 0x1f
	timer.Initialize(WGM_Normal, CS_DIV256);
     b86:	46 e0       	ldi	r20, 0x06	; 6
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	80 ef       	ldi	r24, 0xF0	; 240
     b8c:	90 e2       	ldi	r25, 0x20	; 32
     b8e:	0e 94 4c 0a 	call	0x1498	; 0x1498 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timer.SetPeriod(25000); // Every 10 ms
     b92:	68 ea       	ldi	r22, 0xA8	; 168
     b94:	71 e6       	ldi	r23, 0x61	; 97
     b96:	80 ef       	ldi	r24, 0xF0	; 240
     b98:	90 e2       	ldi	r25, 0x20	; 32
     b9a:	0e 94 8a 0a 	call	0x1514	; 0x1514 <_ZN7CTimerC9SetPeriodEj>
	timer.SetOVFCallback(OnTimerStatic, this, TC_OVFINTLVL_LO_gc); // Enable interrupt
     b9e:	21 e0       	ldi	r18, 0x01	; 1
     ba0:	ae 01       	movw	r20, r28
     ba2:	6d ec       	ldi	r22, 0xCD	; 205
     ba4:	79 e0       	ldi	r23, 0x09	; 9
     ba6:	80 ef       	ldi	r24, 0xF0	; 240
     ba8:	90 e2       	ldi	r25, 0x20	; 32
     baa:	0e 94 a3 0a 	call	0x1546	; 0x1546 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	
	// Set global variables
	PIC_ID = 0;
     bae:	1d 86       	std	Y+13, r1	; 0x0d
	m_wSetMin = 1;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	8c 8b       	std	Y+20, r24	; 0x14
     bb6:	9d 8b       	std	Y+21, r25	; 0x15
	m_wSetSec = 30;
     bb8:	8e e1       	ldi	r24, 0x1E	; 30
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	8e 8b       	std	Y+22, r24	; 0x16
     bbe:	9f 8b       	std	Y+23, r25	; 0x17
	m_wMillSec = 0;
     bc0:	1a 8a       	std	Y+18, r1	; 0x12
     bc2:	1b 8a       	std	Y+19, r1	; 0x13
	m_wMinutes = m_wSetMin;
     bc4:	8c 89       	ldd	r24, Y+20	; 0x14
     bc6:	9d 89       	ldd	r25, Y+21	; 0x15
     bc8:	8e 87       	std	Y+14, r24	; 0x0e
     bca:	9f 87       	std	Y+15, r25	; 0x0f
	m_wSeconds = m_wSetSec;
     bcc:	8e 89       	ldd	r24, Y+22	; 0x16
     bce:	9f 89       	ldd	r25, Y+23	; 0x17
     bd0:	88 8b       	std	Y+16, r24	; 0x10
     bd2:	99 8b       	std	Y+17, r25	; 0x11
	m_wPower = 0;
     bd4:	18 8e       	std	Y+24, r1	; 0x18
     bd6:	19 8e       	std	Y+25, r1	; 0x19
	m_wDatabasePage = 0;
     bd8:	1a 8e       	std	Y+26, r1	; 0x1a
     bda:	1b 8e       	std	Y+27, r1	; 0x1b
	m_wDatabaseSelInx = 0;
     bdc:	1c 8e       	std	Y+28, r1	; 0x1c
     bde:	1d 8e       	std	Y+29, r1	; 0x1d
}
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	08 95       	ret

00000be6 <_ZN16CLaserControlApp3RunEv>:
	state = APP_SETUP;
}

// Process GUI
void CLaserControlApp::Run()
{
     be6:	0f 93       	push	r16
     be8:	1f 93       	push	r17
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
     bf2:	28 97       	sbiw	r28, 0x08	; 8
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	de bf       	out	0x3e, r29	; 62
     bf8:	8c 01       	movw	r16, r24
	// Get PIC ID
	m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
     bfa:	42 e0       	ldi	r20, 0x02	; 2
     bfc:	63 e0       	ldi	r22, 0x03	; 3
     bfe:	fc 01       	movw	r30, r24
     c00:	86 8d       	ldd	r24, Z+30	; 0x1e
     c02:	97 8d       	ldd	r25, Z+31	; 0x1f
     c04:	0e 94 b9 22 	call	0x4572	; 0x4572 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
	m_cpSender->WaitMODBUSTransmitter();
     c08:	f8 01       	movw	r30, r16
     c0a:	86 8d       	ldd	r24, Z+30	; 0x1e
     c0c:	97 8d       	ldd	r25, Z+31	; 0x1f
     c0e:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WaitMODBUSListener();
     c12:	f8 01       	movw	r30, r16
     c14:	86 8d       	ldd	r24, Z+30	; 0x1e
     c16:	97 8d       	ldd	r25, Z+31	; 0x1f
     c18:	0e 94 54 22 	call	0x44a8	; 0x44a8 <_ZN9CMBSender18WaitMODBUSListenerEv>
     c1c:	ff ef       	ldi	r31, 0xFF	; 255
     c1e:	21 ee       	ldi	r18, 0xE1	; 225
     c20:	84 e0       	ldi	r24, 0x04	; 4
     c22:	f1 50       	subi	r31, 0x01	; 1
     c24:	20 40       	sbci	r18, 0x00	; 0
     c26:	80 40       	sbci	r24, 0x00	; 0
     c28:	e1 f7       	brne	.-8      	; 0xc22 <_ZN16CLaserControlApp3RunEv+0x3c>
     c2a:	00 c0       	rjmp	.+0      	; 0xc2c <_ZN16CLaserControlApp3RunEv+0x46>
     c2c:	00 00       	nop
	
	static uint16_t anim = 5;
	uint16_t pic_id;
	
	static uint16_t bar = 0;
	uint16_t bar1 = 0;
     c2e:	1d 82       	std	Y+5, r1	; 0x05
     c30:	1e 82       	std	Y+6, r1	; 0x06
	uint16_t bar2 = 0;
     c32:	1b 82       	std	Y+3, r1	; 0x03
     c34:	1c 82       	std	Y+4, r1	; 0x04
	uint16_t bar3 = 0;
     c36:	19 82       	std	Y+1, r1	; 0x01
     c38:	1a 82       	std	Y+2, r1	; 0x02
	
	switch (state)
     c3a:	f8 01       	movw	r30, r16
     c3c:	84 85       	ldd	r24, Z+12	; 0x0c
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	8f 30       	cpi	r24, 0x0F	; 15
     c42:	91 05       	cpc	r25, r1
     c44:	08 f0       	brcs	.+2      	; 0xc48 <_ZN16CLaserControlApp3RunEv+0x62>
     c46:	1c c3       	rjmp	.+1592   	; 0x1280 <_ZN16CLaserControlApp3RunEv+0x69a>
     c48:	fc 01       	movw	r30, r24
     c4a:	88 27       	eor	r24, r24
     c4c:	e9 5e       	subi	r30, 0xE9	; 233
     c4e:	fe 4f       	sbci	r31, 0xFE	; 254
     c50:	8f 4f       	sbci	r24, 0xFF	; 255
     c52:	0c 94 18 23 	jmp	0x4630	; 0x4630 <__tablejump2__>
	{
		case APP_LOGO:
			Start(); // Start if logo
     c56:	c8 01       	movw	r24, r16
     c58:	0e 94 0b 05 	call	0xa16	; 0xa16 <_ZN16CLaserControlApp5StartEv>
		break;
     c5c:	15 c3       	rjmp	.+1578   	; 0x1288 <_ZN16CLaserControlApp3RunEv+0x6a2>
		case APP_SETUP:
			// Get Variables
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_MIN, 2);
     c5e:	42 e0       	ldi	r20, 0x02	; 2
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	f8 01       	movw	r30, r16
     c66:	86 8d       	ldd	r24, Z+30	; 0x1e
     c68:	97 8d       	ldd	r25, Z+31	; 0x1f
     c6a:	0e 94 bf 22 	call	0x457e	; 0x457e <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
			m_cpSender->WaitMODBUSTransmitter();
     c6e:	f8 01       	movw	r30, r16
     c70:	86 8d       	ldd	r24, Z+30	; 0x1e
     c72:	97 8d       	ldd	r25, Z+31	; 0x1f
     c74:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSListener();
     c78:	f8 01       	movw	r30, r16
     c7a:	86 8d       	ldd	r24, Z+30	; 0x1e
     c7c:	97 8d       	ldd	r25, Z+31	; 0x1f
     c7e:	0e 94 54 22 	call	0x44a8	; 0x44a8 <_ZN9CMBSender18WaitMODBUSListenerEv>
     c82:	ff ef       	ldi	r31, 0xFF	; 255
     c84:	21 ee       	ldi	r18, 0xE1	; 225
     c86:	84 e0       	ldi	r24, 0x04	; 4
     c88:	f1 50       	subi	r31, 0x01	; 1
     c8a:	20 40       	sbci	r18, 0x00	; 0
     c8c:	80 40       	sbci	r24, 0x00	; 0
     c8e:	e1 f7       	brne	.-8      	; 0xc88 <_ZN16CLaserControlApp3RunEv+0xa2>
     c90:	00 c0       	rjmp	.+0      	; 0xc92 <_ZN16CLaserControlApp3RunEv+0xac>
     c92:	00 00       	nop
			_delay_ms(50);
			
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_SEC, 2);
     c94:	42 e0       	ldi	r20, 0x02	; 2
     c96:	61 e0       	ldi	r22, 0x01	; 1
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	f8 01       	movw	r30, r16
     c9c:	86 8d       	ldd	r24, Z+30	; 0x1e
     c9e:	97 8d       	ldd	r25, Z+31	; 0x1f
     ca0:	0e 94 bf 22 	call	0x457e	; 0x457e <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
			m_cpSender->WaitMODBUSTransmitter();
     ca4:	f8 01       	movw	r30, r16
     ca6:	86 8d       	ldd	r24, Z+30	; 0x1e
     ca8:	97 8d       	ldd	r25, Z+31	; 0x1f
     caa:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSListener();
     cae:	f8 01       	movw	r30, r16
     cb0:	86 8d       	ldd	r24, Z+30	; 0x1e
     cb2:	97 8d       	ldd	r25, Z+31	; 0x1f
     cb4:	0e 94 54 22 	call	0x44a8	; 0x44a8 <_ZN9CMBSender18WaitMODBUSListenerEv>
     cb8:	ff ef       	ldi	r31, 0xFF	; 255
     cba:	21 ee       	ldi	r18, 0xE1	; 225
     cbc:	84 e0       	ldi	r24, 0x04	; 4
     cbe:	f1 50       	subi	r31, 0x01	; 1
     cc0:	20 40       	sbci	r18, 0x00	; 0
     cc2:	80 40       	sbci	r24, 0x00	; 0
     cc4:	e1 f7       	brne	.-8      	; 0xcbe <_ZN16CLaserControlApp3RunEv+0xd8>
     cc6:	00 c0       	rjmp	.+0      	; 0xcc8 <_ZN16CLaserControlApp3RunEv+0xe2>
     cc8:	00 00       	nop
			_delay_ms(50);
			
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_PWR, 2);
     cca:	42 e0       	ldi	r20, 0x02	; 2
     ccc:	63 e0       	ldi	r22, 0x03	; 3
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	f8 01       	movw	r30, r16
     cd2:	86 8d       	ldd	r24, Z+30	; 0x1e
     cd4:	97 8d       	ldd	r25, Z+31	; 0x1f
     cd6:	0e 94 bf 22 	call	0x457e	; 0x457e <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
			m_cpSender->WaitMODBUSTransmitter();
     cda:	f8 01       	movw	r30, r16
     cdc:	86 8d       	ldd	r24, Z+30	; 0x1e
     cde:	97 8d       	ldd	r25, Z+31	; 0x1f
     ce0:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSListener();
     ce4:	f8 01       	movw	r30, r16
     ce6:	86 8d       	ldd	r24, Z+30	; 0x1e
     ce8:	97 8d       	ldd	r25, Z+31	; 0x1f
     cea:	0e 94 54 22 	call	0x44a8	; 0x44a8 <_ZN9CMBSender18WaitMODBUSListenerEv>
     cee:	ff ef       	ldi	r31, 0xFF	; 255
     cf0:	21 ee       	ldi	r18, 0xE1	; 225
     cf2:	84 e0       	ldi	r24, 0x04	; 4
     cf4:	f1 50       	subi	r31, 0x01	; 1
     cf6:	20 40       	sbci	r18, 0x00	; 0
     cf8:	80 40       	sbci	r24, 0x00	; 0
     cfa:	e1 f7       	brne	.-8      	; 0xcf4 <_ZN16CLaserControlApp3RunEv+0x10e>
     cfc:	00 c0       	rjmp	.+0      	; 0xcfe <_ZN16CLaserControlApp3RunEv+0x118>
     cfe:	00 00       	nop
			_delay_ms(50);
			
			bar = (m_wPower * 34) / 100;
     d00:	f8 01       	movw	r30, r16
     d02:	80 8d       	ldd	r24, Z+24	; 0x18
     d04:	91 8d       	ldd	r25, Z+25	; 0x19
     d06:	42 e2       	ldi	r20, 0x22	; 34
     d08:	48 9f       	mul	r20, r24
     d0a:	90 01       	movw	r18, r0
     d0c:	49 9f       	mul	r20, r25
     d0e:	30 0d       	add	r19, r0
     d10:	11 24       	eor	r1, r1
     d12:	36 95       	lsr	r19
     d14:	27 95       	ror	r18
     d16:	36 95       	lsr	r19
     d18:	27 95       	ror	r18
     d1a:	ab e7       	ldi	r26, 0x7B	; 123
     d1c:	b4 e1       	ldi	r27, 0x14	; 20
     d1e:	0e 94 20 23 	call	0x4640	; 0x4640 <__umulhisi3>
     d22:	96 95       	lsr	r25
     d24:	87 95       	ror	r24
     d26:	80 93 ee 20 	sts	0x20EE, r24
     d2a:	90 93 ef 20 	sts	0x20EF, r25
	return (data >> 8) | (data << 8);
}

uint16_t min(uint16_t x, uint16_t y)
{
	if (x < y)
     d2e:	8c 30       	cpi	r24, 0x0C	; 12
     d30:	91 05       	cpc	r25, r1
     d32:	18 f0       	brcs	.+6      	; 0xd3a <_ZN16CLaserControlApp3RunEv+0x154>
		return x;
	else
		return y;
     d34:	3c e0       	ldi	r19, 0x0C	; 12
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <_ZN16CLaserControlApp3RunEv+0x158>
}

uint16_t min(uint16_t x, uint16_t y)
{
	if (x < y)
		return x;
     d3a:	38 2f       	mov	r19, r24
     d3c:	29 2f       	mov	r18, r25
			m_cpSender->WaitMODBUSTransmitter();
			m_cpSender->WaitMODBUSListener();
			_delay_ms(50);
			
			bar = (m_wPower * 34) / 100;
			bar1 = min(bar, 12);
     d3e:	3d 83       	std	Y+5, r19	; 0x05
     d40:	2e 83       	std	Y+6, r18	; 0x06
     d42:	9c 01       	movw	r18, r24
     d44:	8b 30       	cpi	r24, 0x0B	; 11
     d46:	91 05       	cpc	r25, r1
     d48:	10 f4       	brcc	.+4      	; 0xd4e <_ZN16CLaserControlApp3RunEv+0x168>
     d4a:	2b e0       	ldi	r18, 0x0B	; 11
     d4c:	30 e0       	ldi	r19, 0x00	; 0
	return (data >> 8) | (data << 8);
}

uint16_t min(uint16_t x, uint16_t y)
{
	if (x < y)
     d4e:	28 31       	cpi	r18, 0x18	; 24
     d50:	31 05       	cpc	r19, r1
     d52:	10 f0       	brcs	.+4      	; 0xd58 <_ZN16CLaserControlApp3RunEv+0x172>
		return x;
	else
		return y;
     d54:	28 e1       	ldi	r18, 0x18	; 24
     d56:	30 e0       	ldi	r19, 0x00	; 0
			m_cpSender->WaitMODBUSListener();
			_delay_ms(50);
			
			bar = (m_wPower * 34) / 100;
			bar1 = min(bar, 12);
			bar2 = min(max(bar, 11), 24);
     d58:	2b 83       	std	Y+3, r18	; 0x03
     d5a:	3c 83       	std	Y+4, r19	; 0x04
     d5c:	87 31       	cpi	r24, 0x17	; 23
     d5e:	91 05       	cpc	r25, r1
     d60:	10 f4       	brcc	.+4      	; 0xd66 <_ZN16CLaserControlApp3RunEv+0x180>
     d62:	87 e1       	ldi	r24, 0x17	; 23
     d64:	90 e0       	ldi	r25, 0x00	; 0
	return (data >> 8) | (data << 8);
}

uint16_t min(uint16_t x, uint16_t y)
{
	if (x < y)
     d66:	82 32       	cpi	r24, 0x22	; 34
     d68:	91 05       	cpc	r25, r1
     d6a:	10 f0       	brcs	.+4      	; 0xd70 <_ZN16CLaserControlApp3RunEv+0x18a>
		return x;
	else
		return y;
     d6c:	82 e2       	ldi	r24, 0x22	; 34
     d6e:	90 e0       	ldi	r25, 0x00	; 0
			_delay_ms(50);
			
			bar = (m_wPower * 34) / 100;
			bar1 = min(bar, 12);
			bar2 = min(max(bar, 11), 24);
			bar3 = min(max(bar, 23), 34);
     d70:	89 83       	std	Y+1, r24	; 0x01
     d72:	9a 83       	std	Y+2, r25	; 0x02
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR1, (uint16_t*)&bar1, 2);
     d74:	22 e0       	ldi	r18, 0x02	; 2
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	ae 01       	movw	r20, r28
     d7a:	4b 5f       	subi	r20, 0xFB	; 251
     d7c:	5f 4f       	sbci	r21, 0xFF	; 255
     d7e:	64 e0       	ldi	r22, 0x04	; 4
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	f8 01       	movw	r30, r16
     d84:	86 8d       	ldd	r24, Z+30	; 0x1e
     d86:	97 8d       	ldd	r25, Z+31	; 0x1f
     d88:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     d8c:	f8 01       	movw	r30, r16
     d8e:	86 8d       	ldd	r24, Z+30	; 0x1e
     d90:	97 8d       	ldd	r25, Z+31	; 0x1f
     d92:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR2, (uint16_t*)&bar2, 2);
     d96:	22 e0       	ldi	r18, 0x02	; 2
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	ae 01       	movw	r20, r28
     d9c:	4d 5f       	subi	r20, 0xFD	; 253
     d9e:	5f 4f       	sbci	r21, 0xFF	; 255
     da0:	65 e0       	ldi	r22, 0x05	; 5
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	f8 01       	movw	r30, r16
     da6:	86 8d       	ldd	r24, Z+30	; 0x1e
     da8:	97 8d       	ldd	r25, Z+31	; 0x1f
     daa:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     dae:	f8 01       	movw	r30, r16
     db0:	86 8d       	ldd	r24, Z+30	; 0x1e
     db2:	97 8d       	ldd	r25, Z+31	; 0x1f
     db4:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR3, (uint16_t*)&bar3, 2);
     db8:	22 e0       	ldi	r18, 0x02	; 2
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	ae 01       	movw	r20, r28
     dbe:	4f 5f       	subi	r20, 0xFF	; 255
     dc0:	5f 4f       	sbci	r21, 0xFF	; 255
     dc2:	66 e0       	ldi	r22, 0x06	; 6
     dc4:	70 e0       	ldi	r23, 0x00	; 0
     dc6:	f8 01       	movw	r30, r16
     dc8:	86 8d       	ldd	r24, Z+30	; 0x1e
     dca:	97 8d       	ldd	r25, Z+31	; 0x1f
     dcc:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     dd0:	f8 01       	movw	r30, r16
     dd2:	86 8d       	ldd	r24, Z+30	; 0x1e
     dd4:	97 8d       	ldd	r25, Z+31	; 0x1f
     dd6:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		break;
     dda:	56 c2       	rjmp	.+1196   	; 0x1288 <_ZN16CLaserControlApp3RunEv+0x6a2>
		case APP_SETUPtoRUN_ANIM:
			// Play animation
			anim++;
     ddc:	80 91 47 20 	lds	r24, 0x2047
     de0:	90 91 48 20 	lds	r25, 0x2048
     de4:	01 96       	adiw	r24, 0x01	; 1
			if (anim > 9) {
     de6:	8a 30       	cpi	r24, 0x0A	; 10
     de8:	91 05       	cpc	r25, r1
     dea:	28 f4       	brcc	.+10     	; 0xdf6 <_ZN16CLaserControlApp3RunEv+0x210>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR3, (uint16_t*)&bar3, 2);
			m_cpSender->WaitMODBUSTransmitter();
		break;
		case APP_SETUPtoRUN_ANIM:
			// Play animation
			anim++;
     dec:	80 93 47 20 	sts	0x2047, r24
     df0:	90 93 48 20 	sts	0x2048, r25
     df4:	09 c0       	rjmp	.+18     	; 0xe08 <_ZN16CLaserControlApp3RunEv+0x222>
			if (anim > 9) {
				anim = 9;
     df6:	89 e0       	ldi	r24, 0x09	; 9
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	80 93 47 20 	sts	0x2047, r24
     dfe:	90 93 48 20 	sts	0x2048, r25
				state = APP_RUN;
     e02:	83 e0       	ldi	r24, 0x03	; 3
     e04:	f8 01       	movw	r30, r16
     e06:	84 87       	std	Z+12, r24	; 0x0c
extern CSoundPlayer player;
extern CDGUSDatabase Database;

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
     e08:	80 91 47 20 	lds	r24, 0x2047
     e0c:	90 91 48 20 	lds	r25, 0x2048
     e10:	98 27       	eor	r25, r24
     e12:	89 27       	eor	r24, r25
     e14:	98 27       	eor	r25, r24
			anim++;
			if (anim > 9) {
				anim = 9;
				state = APP_RUN;
			}
			pic_id = swap(anim);
     e16:	8f 83       	std	Y+7, r24	; 0x07
     e18:	98 87       	std	Y+8, r25	; 0x08
			
			// Timer setup to timer run animation
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     e1a:	22 e0       	ldi	r18, 0x02	; 2
     e1c:	ae 01       	movw	r20, r28
     e1e:	49 5f       	subi	r20, 0xF9	; 249
     e20:	5f 4f       	sbci	r21, 0xFF	; 255
     e22:	63 e0       	ldi	r22, 0x03	; 3
     e24:	f8 01       	movw	r30, r16
     e26:	86 8d       	ldd	r24, Z+30	; 0x1e
     e28:	97 8d       	ldd	r25, Z+31	; 0x1f
     e2a:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     e2e:	f8 01       	movw	r30, r16
     e30:	86 8d       	ldd	r24, Z+30	; 0x1e
     e32:	97 8d       	ldd	r25, Z+31	; 0x1f
     e34:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		break;
     e38:	27 c2       	rjmp	.+1102   	; 0x1288 <_ZN16CLaserControlApp3RunEv+0x6a2>
		case APP_RUN:
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MIN, (uint16_t*)&m_wMinutes, 2);
     e3a:	a8 01       	movw	r20, r16
     e3c:	42 5f       	subi	r20, 0xF2	; 242
     e3e:	5f 4f       	sbci	r21, 0xFF	; 255
     e40:	22 e0       	ldi	r18, 0x02	; 2
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	f8 01       	movw	r30, r16
     e4a:	86 8d       	ldd	r24, Z+30	; 0x1e
     e4c:	97 8d       	ldd	r25, Z+31	; 0x1f
     e4e:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     e52:	f8 01       	movw	r30, r16
     e54:	86 8d       	ldd	r24, Z+30	; 0x1e
     e56:	97 8d       	ldd	r25, Z+31	; 0x1f
     e58:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_SEC, (uint16_t*)&m_wSeconds, 2);
     e5c:	a8 01       	movw	r20, r16
     e5e:	40 5f       	subi	r20, 0xF0	; 240
     e60:	5f 4f       	sbci	r21, 0xFF	; 255
     e62:	22 e0       	ldi	r18, 0x02	; 2
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	61 e0       	ldi	r22, 0x01	; 1
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	f8 01       	movw	r30, r16
     e6c:	86 8d       	ldd	r24, Z+30	; 0x1e
     e6e:	97 8d       	ldd	r25, Z+31	; 0x1f
     e70:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     e74:	f8 01       	movw	r30, r16
     e76:	86 8d       	ldd	r24, Z+30	; 0x1e
     e78:	97 8d       	ldd	r25, Z+31	; 0x1f
     e7a:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MSC, (uint16_t*)&m_wMillSec, 2);
     e7e:	a8 01       	movw	r20, r16
     e80:	4e 5e       	subi	r20, 0xEE	; 238
     e82:	5f 4f       	sbci	r21, 0xFF	; 255
     e84:	22 e0       	ldi	r18, 0x02	; 2
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	62 e0       	ldi	r22, 0x02	; 2
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	f8 01       	movw	r30, r16
     e8e:	86 8d       	ldd	r24, Z+30	; 0x1e
     e90:	97 8d       	ldd	r25, Z+31	; 0x1f
     e92:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     e96:	f8 01       	movw	r30, r16
     e98:	86 8d       	ldd	r24, Z+30	; 0x1e
     e9a:	97 8d       	ldd	r25, Z+31	; 0x1f
     e9c:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSTransmitter();
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR2, (uint16_t*)&bar2, 2);
			m_cpSender->WaitMODBUSTransmitter();
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR3, (uint16_t*)&bar3, 2);
			m_cpSender->WaitMODBUSTransmitter();*/
		break;
     ea0:	f3 c1       	rjmp	.+998    	; 0x1288 <_ZN16CLaserControlApp3RunEv+0x6a2>
		case APP_OnTimerStart:
			// Set Run state
			anim = 5;
     ea2:	85 e0       	ldi	r24, 0x05	; 5
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	80 93 47 20 	sts	0x2047, r24
     eaa:	90 93 48 20 	sts	0x2048, r25
			pic_id = swap(PICID_TIMER);
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	99 e1       	ldi	r25, 0x19	; 25
     eb2:	8f 83       	std	Y+7, r24	; 0x07
     eb4:	98 87       	std	Y+8, r25	; 0x08
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     eb6:	22 e0       	ldi	r18, 0x02	; 2
     eb8:	ae 01       	movw	r20, r28
     eba:	49 5f       	subi	r20, 0xF9	; 249
     ebc:	5f 4f       	sbci	r21, 0xFF	; 255
     ebe:	63 e0       	ldi	r22, 0x03	; 3
     ec0:	f8 01       	movw	r30, r16
     ec2:	86 8d       	ldd	r24, Z+30	; 0x1e
     ec4:	97 8d       	ldd	r25, Z+31	; 0x1f
     ec6:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     eca:	f8 01       	movw	r30, r16
     ecc:	86 8d       	ldd	r24, Z+30	; 0x1e
     ece:	97 8d       	ldd	r25, Z+31	; 0x1f
     ed0:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			m_wMinutes = m_wSetMin;
     ed4:	f8 01       	movw	r30, r16
     ed6:	84 89       	ldd	r24, Z+20	; 0x14
     ed8:	95 89       	ldd	r25, Z+21	; 0x15
     eda:	86 87       	std	Z+14, r24	; 0x0e
     edc:	97 87       	std	Z+15, r25	; 0x0f
			m_wSeconds = m_wSetSec;
     ede:	86 89       	ldd	r24, Z+22	; 0x16
     ee0:	97 89       	ldd	r25, Z+23	; 0x17
     ee2:	80 8b       	std	Z+16, r24	; 0x10
     ee4:	91 8b       	std	Z+17, r25	; 0x11
			m_wMillSec = 0;
     ee6:	12 8a       	std	Z+18, r1	; 0x12
     ee8:	13 8a       	std	Z+19, r1	; 0x13
			
			// Start timer
			timer.Start(25000);
     eea:	68 ea       	ldi	r22, 0xA8	; 168
     eec:	71 e6       	ldi	r23, 0x61	; 97
     eee:	80 ef       	ldi	r24, 0xF0	; 240
     ef0:	90 e2       	ldi	r25, 0x20	; 32
     ef2:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN7CTimerC5StartEj>
			laserBoard.Relay1On();
     ef6:	8a e0       	ldi	r24, 0x0A	; 10
     ef8:	93 e2       	ldi	r25, 0x23	; 35
     efa:	0e 94 13 04 	call	0x826	; 0x826 <_ZN11CLaserBoard8Relay1OnEv>
			
			state = APP_RUN;
     efe:	83 e0       	ldi	r24, 0x03	; 3
     f00:	f8 01       	movw	r30, r16
     f02:	84 87       	std	Z+12, r24	; 0x0c
		break;
     f04:	c1 c1       	rjmp	.+898    	; 0x1288 <_ZN16CLaserControlApp3RunEv+0x6a2>
		case APP_OnTimerResume:
			// Set Run state
			//m_wPower = 0;
			anim = 5;
     f06:	85 e0       	ldi	r24, 0x05	; 5
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	80 93 47 20 	sts	0x2047, r24
     f0e:	90 93 48 20 	sts	0x2048, r25
			pic_id = swap(PICID_TIMER);
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	99 e1       	ldi	r25, 0x19	; 25
     f16:	8f 83       	std	Y+7, r24	; 0x07
     f18:	98 87       	std	Y+8, r25	; 0x08
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     f1a:	22 e0       	ldi	r18, 0x02	; 2
     f1c:	ae 01       	movw	r20, r28
     f1e:	49 5f       	subi	r20, 0xF9	; 249
     f20:	5f 4f       	sbci	r21, 0xFF	; 255
     f22:	63 e0       	ldi	r22, 0x03	; 3
     f24:	f8 01       	movw	r30, r16
     f26:	86 8d       	ldd	r24, Z+30	; 0x1e
     f28:	97 8d       	ldd	r25, Z+31	; 0x1f
     f2a:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     f2e:	f8 01       	movw	r30, r16
     f30:	86 8d       	ldd	r24, Z+30	; 0x1e
     f32:	97 8d       	ldd	r25, Z+31	; 0x1f
     f34:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			// Start timer
			timer.Start(25000);
     f38:	68 ea       	ldi	r22, 0xA8	; 168
     f3a:	71 e6       	ldi	r23, 0x61	; 97
     f3c:	80 ef       	ldi	r24, 0xF0	; 240
     f3e:	90 e2       	ldi	r25, 0x20	; 32
     f40:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN7CTimerC5StartEj>
			laserBoard.Relay1On();
     f44:	8a e0       	ldi	r24, 0x0A	; 10
     f46:	93 e2       	ldi	r25, 0x23	; 35
     f48:	0e 94 13 04 	call	0x826	; 0x826 <_ZN11CLaserBoard8Relay1OnEv>
			
			state = APP_RUN;
     f4c:	83 e0       	ldi	r24, 0x03	; 3
     f4e:	f8 01       	movw	r30, r16
     f50:	84 87       	std	Z+12, r24	; 0x0c
		break;
     f52:	9a c1       	rjmp	.+820    	; 0x1288 <_ZN16CLaserControlApp3RunEv+0x6a2>
		case APP_OnTimerStop:
			// Set Stop (return to Setup) state
			pic_id = swap(PICID_SETUP);
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	97 e1       	ldi	r25, 0x17	; 23
     f58:	8f 83       	std	Y+7, r24	; 0x07
     f5a:	98 87       	std	Y+8, r25	; 0x08
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     f5c:	22 e0       	ldi	r18, 0x02	; 2
     f5e:	ae 01       	movw	r20, r28
     f60:	49 5f       	subi	r20, 0xF9	; 249
     f62:	5f 4f       	sbci	r21, 0xFF	; 255
     f64:	63 e0       	ldi	r22, 0x03	; 3
     f66:	f8 01       	movw	r30, r16
     f68:	86 8d       	ldd	r24, Z+30	; 0x1e
     f6a:	97 8d       	ldd	r25, Z+31	; 0x1f
     f6c:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     f70:	f8 01       	movw	r30, r16
     f72:	86 8d       	ldd	r24, Z+30	; 0x1e
     f74:	97 8d       	ldd	r25, Z+31	; 0x1f
     f76:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			// Stop timer
			timer.Stop();
     f7a:	80 ef       	ldi	r24, 0xF0	; 240
     f7c:	90 e2       	ldi	r25, 0x20	; 32
     f7e:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN7CTimerC4StopEv>
			laserBoard.Relay1Off();
     f82:	8a e0       	ldi	r24, 0x0A	; 10
     f84:	93 e2       	ldi	r25, 0x23	; 35
     f86:	0e 94 1b 04 	call	0x836	; 0x836 <_ZN11CLaserBoard9Relay1OffEv>
			
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MIN, (uint16_t*)&m_wSetMin, 2);
     f8a:	a8 01       	movw	r20, r16
     f8c:	4c 5e       	subi	r20, 0xEC	; 236
     f8e:	5f 4f       	sbci	r21, 0xFF	; 255
     f90:	22 e0       	ldi	r18, 0x02	; 2
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	f8 01       	movw	r30, r16
     f9a:	86 8d       	ldd	r24, Z+30	; 0x1e
     f9c:	97 8d       	ldd	r25, Z+31	; 0x1f
     f9e:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     fa2:	f8 01       	movw	r30, r16
     fa4:	86 8d       	ldd	r24, Z+30	; 0x1e
     fa6:	97 8d       	ldd	r25, Z+31	; 0x1f
     fa8:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_SEC, (uint16_t*)&m_wSetSec, 2);
     fac:	a8 01       	movw	r20, r16
     fae:	4a 5e       	subi	r20, 0xEA	; 234
     fb0:	5f 4f       	sbci	r21, 0xFF	; 255
     fb2:	22 e0       	ldi	r18, 0x02	; 2
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	61 e0       	ldi	r22, 0x01	; 1
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	f8 01       	movw	r30, r16
     fbc:	86 8d       	ldd	r24, Z+30	; 0x1e
     fbe:	97 8d       	ldd	r25, Z+31	; 0x1f
     fc0:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     fc4:	f8 01       	movw	r30, r16
     fc6:	86 8d       	ldd	r24, Z+30	; 0x1e
     fc8:	97 8d       	ldd	r25, Z+31	; 0x1f
     fca:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MSC, (uint16_t*)&m_wMillSec, 2);
     fce:	a8 01       	movw	r20, r16
     fd0:	4e 5e       	subi	r20, 0xEE	; 238
     fd2:	5f 4f       	sbci	r21, 0xFF	; 255
     fd4:	22 e0       	ldi	r18, 0x02	; 2
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	62 e0       	ldi	r22, 0x02	; 2
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	f8 01       	movw	r30, r16
     fde:	86 8d       	ldd	r24, Z+30	; 0x1e
     fe0:	97 8d       	ldd	r25, Z+31	; 0x1f
     fe2:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     fe6:	f8 01       	movw	r30, r16
     fe8:	86 8d       	ldd	r24, Z+30	; 0x1e
     fea:	97 8d       	ldd	r25, Z+31	; 0x1f
     fec:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			m_wMinutes = m_wSetMin;
     ff0:	f8 01       	movw	r30, r16
     ff2:	84 89       	ldd	r24, Z+20	; 0x14
     ff4:	95 89       	ldd	r25, Z+21	; 0x15
     ff6:	86 87       	std	Z+14, r24	; 0x0e
     ff8:	97 87       	std	Z+15, r25	; 0x0f
			m_wSeconds = m_wSetSec;
     ffa:	86 89       	ldd	r24, Z+22	; 0x16
     ffc:	97 89       	ldd	r25, Z+23	; 0x17
     ffe:	80 8b       	std	Z+16, r24	; 0x10
    1000:	91 8b       	std	Z+17, r25	; 0x11
			m_wMillSec = 0;
    1002:	12 8a       	std	Z+18, r1	; 0x12
    1004:	13 8a       	std	Z+19, r1	; 0x13
			
			state = APP_SETUP;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	84 87       	std	Z+12, r24	; 0x0c
		break;
    100a:	3e c1       	rjmp	.+636    	; 0x1288 <_ZN16CLaserControlApp3RunEv+0x6a2>
		case APP_OnTimerPause:
			// Pause (return to Run) state
			pic_id = swap(PICID_TIMERPAUSED);
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	9a e1       	ldi	r25, 0x1A	; 26
    1010:	8f 83       	std	Y+7, r24	; 0x07
    1012:	98 87       	std	Y+8, r25	; 0x08
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    1014:	22 e0       	ldi	r18, 0x02	; 2
    1016:	ae 01       	movw	r20, r28
    1018:	49 5f       	subi	r20, 0xF9	; 249
    101a:	5f 4f       	sbci	r21, 0xFF	; 255
    101c:	63 e0       	ldi	r22, 0x03	; 3
    101e:	f8 01       	movw	r30, r16
    1020:	86 8d       	ldd	r24, Z+30	; 0x1e
    1022:	97 8d       	ldd	r25, Z+31	; 0x1f
    1024:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
    1028:	f8 01       	movw	r30, r16
    102a:	86 8d       	ldd	r24, Z+30	; 0x1e
    102c:	97 8d       	ldd	r25, Z+31	; 0x1f
    102e:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			timer.Stop();
    1032:	80 ef       	ldi	r24, 0xF0	; 240
    1034:	90 e2       	ldi	r25, 0x20	; 32
    1036:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN7CTimerC4StopEv>
			
			laserBoard.Relay1Off();
    103a:	8a e0       	ldi	r24, 0x0A	; 10
    103c:	93 e2       	ldi	r25, 0x23	; 35
    103e:	0e 94 1b 04 	call	0x836	; 0x836 <_ZN11CLaserBoard9Relay1OffEv>
			
			state = APP_RUN;
    1042:	83 e0       	ldi	r24, 0x03	; 3
    1044:	f8 01       	movw	r30, r16
    1046:	84 87       	std	Z+12, r24	; 0x0c
		break;
    1048:	1f c1       	rjmp	.+574    	; 0x1288 <_ZN16CLaserControlApp3RunEv+0x6a2>
		case APP_OnTimerRestart:
			// Restart (return to Run) state
			pic_id = swap(PICID_TIMER);
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	99 e1       	ldi	r25, 0x19	; 25
    104e:	8f 83       	std	Y+7, r24	; 0x07
    1050:	98 87       	std	Y+8, r25	; 0x08
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    1052:	22 e0       	ldi	r18, 0x02	; 2
    1054:	ae 01       	movw	r20, r28
    1056:	49 5f       	subi	r20, 0xF9	; 249
    1058:	5f 4f       	sbci	r21, 0xFF	; 255
    105a:	63 e0       	ldi	r22, 0x03	; 3
    105c:	f8 01       	movw	r30, r16
    105e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1060:	97 8d       	ldd	r25, Z+31	; 0x1f
    1062:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
    1066:	f8 01       	movw	r30, r16
    1068:	86 8d       	ldd	r24, Z+30	; 0x1e
    106a:	97 8d       	ldd	r25, Z+31	; 0x1f
    106c:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			// Reset
			m_wMinutes = m_wSetMin;
    1070:	f8 01       	movw	r30, r16
    1072:	84 89       	ldd	r24, Z+20	; 0x14
    1074:	95 89       	ldd	r25, Z+21	; 0x15
    1076:	86 87       	std	Z+14, r24	; 0x0e
    1078:	97 87       	std	Z+15, r25	; 0x0f
			m_wSeconds = m_wSetSec;
    107a:	86 89       	ldd	r24, Z+22	; 0x16
    107c:	97 89       	ldd	r25, Z+23	; 0x17
    107e:	80 8b       	std	Z+16, r24	; 0x10
    1080:	91 8b       	std	Z+17, r25	; 0x11
			m_wMillSec = 0;
    1082:	12 8a       	std	Z+18, r1	; 0x12
    1084:	13 8a       	std	Z+19, r1	; 0x13
			
			timer.Stop();
    1086:	80 ef       	ldi	r24, 0xF0	; 240
    1088:	90 e2       	ldi	r25, 0x20	; 32
    108a:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN7CTimerC4StopEv>
			
			player.SoundStart(1000, 50, 1);
    108e:	21 e0       	ldi	r18, 0x01	; 1
    1090:	42 e3       	ldi	r20, 0x32	; 50
    1092:	50 e0       	ldi	r21, 0x00	; 0
    1094:	68 ee       	ldi	r22, 0xE8	; 232
    1096:	73 e0       	ldi	r23, 0x03	; 3
    1098:	89 e0       	ldi	r24, 0x09	; 9
    109a:	93 e2       	ldi	r25, 0x23	; 35
    109c:	0e 94 ef 09 	call	0x13de	; 0x13de <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
    10a0:	89 e0       	ldi	r24, 0x09	; 9
    10a2:	93 e2       	ldi	r25, 0x23	; 35
    10a4:	0e 94 23 0a 	call	0x1446	; 0x1446 <_ZN12CSoundPlayer9SoundStopEv>
    10a8:	ff ef       	ldi	r31, 0xFF	; 255
    10aa:	21 ee       	ldi	r18, 0xE1	; 225
    10ac:	84 e0       	ldi	r24, 0x04	; 4
    10ae:	f1 50       	subi	r31, 0x01	; 1
    10b0:	20 40       	sbci	r18, 0x00	; 0
    10b2:	80 40       	sbci	r24, 0x00	; 0
    10b4:	e1 f7       	brne	.-8      	; 0x10ae <_ZN16CLaserControlApp3RunEv+0x4c8>
    10b6:	00 c0       	rjmp	.+0      	; 0x10b8 <_ZN16CLaserControlApp3RunEv+0x4d2>
    10b8:	00 00       	nop
			_delay_ms(50);
			player.SoundStart(1000, 50, 1);
    10ba:	21 e0       	ldi	r18, 0x01	; 1
    10bc:	42 e3       	ldi	r20, 0x32	; 50
    10be:	50 e0       	ldi	r21, 0x00	; 0
    10c0:	68 ee       	ldi	r22, 0xE8	; 232
    10c2:	73 e0       	ldi	r23, 0x03	; 3
    10c4:	89 e0       	ldi	r24, 0x09	; 9
    10c6:	93 e2       	ldi	r25, 0x23	; 35
    10c8:	0e 94 ef 09 	call	0x13de	; 0x13de <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
    10cc:	89 e0       	ldi	r24, 0x09	; 9
    10ce:	93 e2       	ldi	r25, 0x23	; 35
    10d0:	0e 94 23 0a 	call	0x1446	; 0x1446 <_ZN12CSoundPlayer9SoundStopEv>
    10d4:	9f ef       	ldi	r25, 0xFF	; 255
    10d6:	e1 ee       	ldi	r30, 0xE1	; 225
    10d8:	f4 e0       	ldi	r31, 0x04	; 4
    10da:	91 50       	subi	r25, 0x01	; 1
    10dc:	e0 40       	sbci	r30, 0x00	; 0
    10de:	f0 40       	sbci	r31, 0x00	; 0
    10e0:	e1 f7       	brne	.-8      	; 0x10da <_ZN16CLaserControlApp3RunEv+0x4f4>
    10e2:	00 c0       	rjmp	.+0      	; 0x10e4 <_ZN16CLaserControlApp3RunEv+0x4fe>
    10e4:	00 00       	nop
			_delay_ms(50);
			
			// Stop timer
			timer.Start(25000);
    10e6:	68 ea       	ldi	r22, 0xA8	; 168
    10e8:	71 e6       	ldi	r23, 0x61	; 97
    10ea:	80 ef       	ldi	r24, 0xF0	; 240
    10ec:	90 e2       	ldi	r25, 0x20	; 32
    10ee:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN7CTimerC5StartEj>
			laserBoard.Relay1On();
    10f2:	8a e0       	ldi	r24, 0x0A	; 10
    10f4:	93 e2       	ldi	r25, 0x23	; 35
    10f6:	0e 94 13 04 	call	0x826	; 0x826 <_ZN11CLaserBoard8Relay1OnEv>
			
			state = APP_RUN;
    10fa:	83 e0       	ldi	r24, 0x03	; 3
    10fc:	f8 01       	movw	r30, r16
    10fe:	84 87       	std	Z+12, r24	; 0x0c
		break;
    1100:	c3 c0       	rjmp	.+390    	; 0x1288 <_ZN16CLaserControlApp3RunEv+0x6a2>
		case APP_OnHL:
			// Turn HL (return to Setup) state
			pic_id = swap(PICID_SETUP);
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	97 e1       	ldi	r25, 0x17	; 23
    1106:	8f 83       	std	Y+7, r24	; 0x07
    1108:	98 87       	std	Y+8, r25	; 0x08
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    110a:	22 e0       	ldi	r18, 0x02	; 2
    110c:	ae 01       	movw	r20, r28
    110e:	49 5f       	subi	r20, 0xF9	; 249
    1110:	5f 4f       	sbci	r21, 0xFF	; 255
    1112:	63 e0       	ldi	r22, 0x03	; 3
    1114:	f8 01       	movw	r30, r16
    1116:	86 8d       	ldd	r24, Z+30	; 0x1e
    1118:	97 8d       	ldd	r25, Z+31	; 0x1f
    111a:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
    111e:	f8 01       	movw	r30, r16
    1120:	86 8d       	ldd	r24, Z+30	; 0x1e
    1122:	97 8d       	ldd	r25, Z+31	; 0x1f
    1124:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			static bool hl = true;
			
			if (hl)
    1128:	80 91 46 20 	lds	r24, 0x2046
    112c:	88 23       	and	r24, r24
    112e:	29 f0       	breq	.+10     	; 0x113a <_ZN16CLaserControlApp3RunEv+0x554>
				laserBoard.Relay2On();
    1130:	8a e0       	ldi	r24, 0x0A	; 10
    1132:	93 e2       	ldi	r25, 0x23	; 35
    1134:	0e 94 17 04 	call	0x82e	; 0x82e <_ZN11CLaserBoard8Relay2OnEv>
    1138:	04 c0       	rjmp	.+8      	; 0x1142 <_ZN16CLaserControlApp3RunEv+0x55c>
			else
				laserBoard.Relay2Off();
    113a:	8a e0       	ldi	r24, 0x0A	; 10
    113c:	93 e2       	ldi	r25, 0x23	; 35
    113e:	0e 94 1f 04 	call	0x83e	; 0x83e <_ZN11CLaserBoard9Relay2OffEv>
				
			hl = !hl;
    1142:	80 91 46 20 	lds	r24, 0x2046
    1146:	91 e0       	ldi	r25, 0x01	; 1
    1148:	89 27       	eor	r24, r25
    114a:	80 93 46 20 	sts	0x2046, r24
			
			state = APP_SETUP;
    114e:	f8 01       	movw	r30, r16
    1150:	94 87       	std	Z+12, r25	; 0x0c
		break;
    1152:	9a c0       	rjmp	.+308    	; 0x1288 <_ZN16CLaserControlApp3RunEv+0x6a2>
		case APP_OnSaveSetup :
			pic_id = swap(PICID_SETUP);
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	97 e1       	ldi	r25, 0x17	; 23
    1158:	8f 83       	std	Y+7, r24	; 0x07
    115a:	98 87       	std	Y+8, r25	; 0x08
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    115c:	22 e0       	ldi	r18, 0x02	; 2
    115e:	ae 01       	movw	r20, r28
    1160:	49 5f       	subi	r20, 0xF9	; 249
    1162:	5f 4f       	sbci	r21, 0xFF	; 255
    1164:	63 e0       	ldi	r22, 0x03	; 3
    1166:	f8 01       	movw	r30, r16
    1168:	86 8d       	ldd	r24, Z+30	; 0x1e
    116a:	97 8d       	ldd	r25, Z+31	; 0x1f
    116c:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
    1170:	f8 01       	movw	r30, r16
    1172:	86 8d       	ldd	r24, Z+30	; 0x1e
    1174:	97 8d       	ldd	r25, Z+31	; 0x1f
    1176:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		break;
    117a:	86 c0       	rjmp	.+268    	; 0x1288 <_ZN16CLaserControlApp3RunEv+0x6a2>
		
		case APP_SHOWDATABASE:
			//Database.UnMap();
			
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_DATAPAGE, 2);
    117c:	42 e0       	ldi	r20, 0x02	; 2
    117e:	67 e0       	ldi	r22, 0x07	; 7
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	f8 01       	movw	r30, r16
    1184:	86 8d       	ldd	r24, Z+30	; 0x1e
    1186:	97 8d       	ldd	r25, Z+31	; 0x1f
    1188:	0e 94 bf 22 	call	0x457e	; 0x457e <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
			m_cpSender->WaitMODBUSTransmitter();
    118c:	f8 01       	movw	r30, r16
    118e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1190:	97 8d       	ldd	r25, Z+31	; 0x1f
    1192:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSListener();
    1196:	f8 01       	movw	r30, r16
    1198:	86 8d       	ldd	r24, Z+30	; 0x1e
    119a:	97 8d       	ldd	r25, Z+31	; 0x1f
    119c:	0e 94 54 22 	call	0x44a8	; 0x44a8 <_ZN9CMBSender18WaitMODBUSListenerEv>
    11a0:	ff ef       	ldi	r31, 0xFF	; 255
    11a2:	21 ee       	ldi	r18, 0xE1	; 225
    11a4:	84 e0       	ldi	r24, 0x04	; 4
    11a6:	f1 50       	subi	r31, 0x01	; 1
    11a8:	20 40       	sbci	r18, 0x00	; 0
    11aa:	80 40       	sbci	r24, 0x00	; 0
    11ac:	e1 f7       	brne	.-8      	; 0x11a6 <_ZN16CLaserControlApp3RunEv+0x5c0>
    11ae:	00 c0       	rjmp	.+0      	; 0x11b0 <_ZN16CLaserControlApp3RunEv+0x5ca>
    11b0:	00 00       	nop
			_delay_ms(50);
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_SEL, 2);
    11b2:	42 e0       	ldi	r20, 0x02	; 2
    11b4:	68 e0       	ldi	r22, 0x08	; 8
    11b6:	70 e0       	ldi	r23, 0x00	; 0
    11b8:	f8 01       	movw	r30, r16
    11ba:	86 8d       	ldd	r24, Z+30	; 0x1e
    11bc:	97 8d       	ldd	r25, Z+31	; 0x1f
    11be:	0e 94 bf 22 	call	0x457e	; 0x457e <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
			m_cpSender->WaitMODBUSTransmitter();
    11c2:	f8 01       	movw	r30, r16
    11c4:	86 8d       	ldd	r24, Z+30	; 0x1e
    11c6:	97 8d       	ldd	r25, Z+31	; 0x1f
    11c8:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSListener();
    11cc:	f8 01       	movw	r30, r16
    11ce:	86 8d       	ldd	r24, Z+30	; 0x1e
    11d0:	97 8d       	ldd	r25, Z+31	; 0x1f
    11d2:	0e 94 54 22 	call	0x44a8	; 0x44a8 <_ZN9CMBSender18WaitMODBUSListenerEv>
    11d6:	ff ef       	ldi	r31, 0xFF	; 255
    11d8:	21 ee       	ldi	r18, 0xE1	; 225
    11da:	84 e0       	ldi	r24, 0x04	; 4
    11dc:	f1 50       	subi	r31, 0x01	; 1
    11de:	20 40       	sbci	r18, 0x00	; 0
    11e0:	80 40       	sbci	r24, 0x00	; 0
    11e2:	e1 f7       	brne	.-8      	; 0x11dc <_ZN16CLaserControlApp3RunEv+0x5f6>
    11e4:	00 c0       	rjmp	.+0      	; 0x11e6 <_ZN16CLaserControlApp3RunEv+0x600>
    11e6:	00 00       	nop
			_delay_ms(50);
		
			Database.MapDatabaseToRead(VARIABLE_ADDR_DATABASE, DGUS_DATABASE_ADDR + m_wDatabasePage*PROFILE_SIZE, 0x0C00);
    11e8:	f8 01       	movw	r30, r16
    11ea:	22 8d       	ldd	r18, Z+26	; 0x1a
    11ec:	33 8d       	ldd	r19, Z+27	; 0x1b
    11ee:	32 2f       	mov	r19, r18
    11f0:	22 27       	eor	r18, r18
    11f2:	c9 01       	movw	r24, r18
    11f4:	a0 e0       	ldi	r26, 0x00	; 0
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	9c 01       	movw	r18, r24
    11fa:	ad 01       	movw	r20, r26
    11fc:	40 57       	subi	r20, 0x70	; 112
    11fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1200:	00 e0       	ldi	r16, 0x00	; 0
    1202:	1c e0       	ldi	r17, 0x0C	; 12
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	71 e0       	ldi	r23, 0x01	; 1
    1208:	81 ee       	ldi	r24, 0xE1	; 225
    120a:	92 e2       	ldi	r25, 0x22	; 34
    120c:	0e 94 85 02 	call	0x50a	; 0x50a <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
		break;
    1210:	3b c0       	rjmp	.+118    	; 0x1288 <_ZN16CLaserControlApp3RunEv+0x6a2>
		case APP_READPROFILE:
			Database.MapDatabaseToRead(VARIABLE_ADDR_PROFILE, DGUS_DATABASE_ADDR + (m_wDatabasePage + m_wDatabaseSelInx)*PROFILE_SIZE, 0x0100);
    1212:	f8 01       	movw	r30, r16
    1214:	82 8d       	ldd	r24, Z+26	; 0x1a
    1216:	93 8d       	ldd	r25, Z+27	; 0x1b
    1218:	24 8d       	ldd	r18, Z+28	; 0x1c
    121a:	35 8d       	ldd	r19, Z+29	; 0x1d
    121c:	28 0f       	add	r18, r24
    121e:	39 1f       	adc	r19, r25
    1220:	32 2f       	mov	r19, r18
    1222:	22 27       	eor	r18, r18
    1224:	c9 01       	movw	r24, r18
    1226:	a0 e0       	ldi	r26, 0x00	; 0
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	9c 01       	movw	r18, r24
    122c:	ad 01       	movw	r20, r26
    122e:	40 57       	subi	r20, 0x70	; 112
    1230:	5f 4f       	sbci	r21, 0xFF	; 255
    1232:	00 e0       	ldi	r16, 0x00	; 0
    1234:	11 e0       	ldi	r17, 0x01	; 1
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	7d e0       	ldi	r23, 0x0D	; 13
    123a:	81 ee       	ldi	r24, 0xE1	; 225
    123c:	92 e2       	ldi	r25, 0x22	; 34
    123e:	0e 94 85 02 	call	0x50a	; 0x50a <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
		break;
    1242:	22 c0       	rjmp	.+68     	; 0x1288 <_ZN16CLaserControlApp3RunEv+0x6a2>
		case APP_SAVEPROFILE:
			Database.MapDatabaseToWrite(VARIABLE_ADDR_PROFILE, DGUS_DATABASE_ADDR + (m_wDatabasePage + m_wDatabaseSelInx)*PROFILE_SIZE, 0x0100);
    1244:	f8 01       	movw	r30, r16
    1246:	82 8d       	ldd	r24, Z+26	; 0x1a
    1248:	93 8d       	ldd	r25, Z+27	; 0x1b
    124a:	24 8d       	ldd	r18, Z+28	; 0x1c
    124c:	35 8d       	ldd	r19, Z+29	; 0x1d
    124e:	28 0f       	add	r18, r24
    1250:	39 1f       	adc	r19, r25
    1252:	32 2f       	mov	r19, r18
    1254:	22 27       	eor	r18, r18
    1256:	c9 01       	movw	r24, r18
    1258:	a0 e0       	ldi	r26, 0x00	; 0
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	9c 01       	movw	r18, r24
    125e:	ad 01       	movw	r20, r26
    1260:	40 57       	subi	r20, 0x70	; 112
    1262:	5f 4f       	sbci	r21, 0xFF	; 255
    1264:	00 e0       	ldi	r16, 0x00	; 0
    1266:	11 e0       	ldi	r17, 0x01	; 1
    1268:	60 e0       	ldi	r22, 0x00	; 0
    126a:	7d e0       	ldi	r23, 0x0D	; 13
    126c:	81 ee       	ldi	r24, 0xE1	; 225
    126e:	92 e2       	ldi	r25, 0x22	; 34
    1270:	0e 94 20 02 	call	0x440	; 0x440 <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>
		break;
    1274:	09 c0       	rjmp	.+18     	; 0x1288 <_ZN16CLaserControlApp3RunEv+0x6a2>
		case APP_UNMAPDATABASE:
			Database.UnMap();
    1276:	81 ee       	ldi	r24, 0xE1	; 225
    1278:	92 e2       	ldi	r25, 0x22	; 34
    127a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN13CDGUSDatabase5UnMapEv>
		break;
    127e:	04 c0       	rjmp	.+8      	; 0x1288 <_ZN16CLaserControlApp3RunEv+0x6a2>
		default:
			Database.UnMap();
    1280:	81 ee       	ldi	r24, 0xE1	; 225
    1282:	92 e2       	ldi	r25, 0x22	; 34
    1284:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN13CDGUSDatabase5UnMapEv>
		break;
	}
}
    1288:	28 96       	adiw	r28, 0x08	; 8
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	1f 91       	pop	r17
    1294:	0f 91       	pop	r16
    1296:	08 95       	ret

00001298 <_ZN16CLaserControlApp9OnTimeoutEv>:
	m_wMillSec-=10;
}

void CLaserControlApp::OnTimeout()
{
	timer.Stop();
    1298:	80 ef       	ldi	r24, 0xF0	; 240
    129a:	90 e2       	ldi	r25, 0x20	; 32
    129c:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN7CTimerC4StopEv>
	laserBoard.Relay1Off();
    12a0:	8a e0       	ldi	r24, 0x0A	; 10
    12a2:	93 e2       	ldi	r25, 0x23	; 35
    12a4:	0e 94 1b 04 	call	0x836	; 0x836 <_ZN11CLaserBoard9Relay1OffEv>
    12a8:	08 95       	ret

000012aa <_ZN16CLaserControlApp7OnTimerEv>:
		break;
	}
}

void CLaserControlApp::OnTimer()
{
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	ec 01       	movw	r28, r24
	if (m_wMillSec == 0)
    12b0:	8a 89       	ldd	r24, Y+18	; 0x12
    12b2:	9b 89       	ldd	r25, Y+19	; 0x13
    12b4:	89 2b       	or	r24, r25
    12b6:	c9 f5       	brne	.+114    	; 0x132a <_ZN16CLaserControlApp7OnTimerEv+0x80>
	{
		if (m_wSeconds == 0)
    12b8:	88 89       	ldd	r24, Y+16	; 0x10
    12ba:	99 89       	ldd	r25, Y+17	; 0x11
    12bc:	89 2b       	or	r24, r25
    12be:	f1 f4       	brne	.+60     	; 0x12fc <_ZN16CLaserControlApp7OnTimerEv+0x52>
		{
			if (m_wMinutes == 0)
    12c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    12c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    12c4:	89 2b       	or	r24, r25
    12c6:	89 f4       	brne	.+34     	; 0x12ea <_ZN16CLaserControlApp7OnTimerEv+0x40>
			{
				OnTimeout();
    12c8:	ce 01       	movw	r24, r28
    12ca:	0e 94 4c 09 	call	0x1298	; 0x1298 <_ZN16CLaserControlApp9OnTimeoutEv>
				player.SoundStart(1000, 1000, 0);
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	48 ee       	ldi	r20, 0xE8	; 232
    12d2:	53 e0       	ldi	r21, 0x03	; 3
    12d4:	68 ee       	ldi	r22, 0xE8	; 232
    12d6:	73 e0       	ldi	r23, 0x03	; 3
    12d8:	89 e0       	ldi	r24, 0x09	; 9
    12da:	93 e2       	ldi	r25, 0x23	; 35
    12dc:	0e 94 ef 09 	call	0x13de	; 0x13de <_ZN12CSoundPlayer10SoundStartEjjh>
				player.SoundStop();
    12e0:	89 e0       	ldi	r24, 0x09	; 9
    12e2:	93 e2       	ldi	r25, 0x23	; 35
    12e4:	0e 94 23 0a 	call	0x1446	; 0x1446 <_ZN12CSoundPlayer9SoundStopEv>
				//player.beep(1000, 1000);
				return;
    12e8:	55 c0       	rjmp	.+170    	; 0x1394 <_ZN16CLaserControlApp7OnTimerEv+0xea>
			}
			m_wSeconds = 60;
    12ea:	8c e3       	ldi	r24, 0x3C	; 60
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	88 8b       	std	Y+16, r24	; 0x10
    12f0:	99 8b       	std	Y+17, r25	; 0x11
			m_wMinutes--;
    12f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    12f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	8e 87       	std	Y+14, r24	; 0x0e
    12fa:	9f 87       	std	Y+15, r25	; 0x0f
		}
		m_wMillSec = 100; // Every 10 ms
    12fc:	84 e6       	ldi	r24, 0x64	; 100
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	8a 8b       	std	Y+18, r24	; 0x12
    1302:	9b 8b       	std	Y+19, r25	; 0x13
		m_wSeconds--;
    1304:	88 89       	ldd	r24, Y+16	; 0x10
    1306:	99 89       	ldd	r25, Y+17	; 0x11
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	88 8b       	std	Y+16, r24	; 0x10
    130c:	99 8b       	std	Y+17, r25	; 0x11
		if (m_wMinutes == 0 && m_wSeconds < 10)
    130e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1310:	9f 85       	ldd	r25, Y+15	; 0x0f
    1312:	89 2b       	or	r24, r25
    1314:	81 f4       	brne	.+32     	; 0x1336 <_ZN16CLaserControlApp7OnTimerEv+0x8c>
    1316:	88 89       	ldd	r24, Y+16	; 0x10
    1318:	99 89       	ldd	r25, Y+17	; 0x11
    131a:	0a 97       	sbiw	r24, 0x0a	; 10
    131c:	d0 f0       	brcs	.+52     	; 0x1352 <_ZN16CLaserControlApp7OnTimerEv+0xa8>
    131e:	0b c0       	rjmp	.+22     	; 0x1336 <_ZN16CLaserControlApp7OnTimerEv+0x8c>
		{
			if (m_wMinutes == 0 && m_wSeconds < 5)
    1320:	88 89       	ldd	r24, Y+16	; 0x10
    1322:	99 89       	ldd	r25, Y+17	; 0x11
    1324:	05 97       	sbiw	r24, 0x05	; 5
    1326:	d0 f0       	brcs	.+52     	; 0x135c <_ZN16CLaserControlApp7OnTimerEv+0xb2>
    1328:	27 c0       	rjmp	.+78     	; 0x1378 <_ZN16CLaserControlApp7OnTimerEv+0xce>
			player.SoundStart(1000, 25, 2);
			player.SoundStop();
			//player.beep(1000, 25);
		}
	}
	m_wMillSec-=10;
    132a:	8a 89       	ldd	r24, Y+18	; 0x12
    132c:	9b 89       	ldd	r25, Y+19	; 0x13
    132e:	0a 97       	sbiw	r24, 0x0a	; 10
    1330:	8a 8b       	std	Y+18, r24	; 0x12
    1332:	9b 8b       	std	Y+19, r25	; 0x13
    1334:	2f c0       	rjmp	.+94     	; 0x1394 <_ZN16CLaserControlApp7OnTimerEv+0xea>
				//player.beep(1000, 50);
			}
		}
		else
		{
			player.SoundStart(1000, 25, 2);
    1336:	22 e0       	ldi	r18, 0x02	; 2
    1338:	49 e1       	ldi	r20, 0x19	; 25
    133a:	50 e0       	ldi	r21, 0x00	; 0
    133c:	68 ee       	ldi	r22, 0xE8	; 232
    133e:	73 e0       	ldi	r23, 0x03	; 3
    1340:	89 e0       	ldi	r24, 0x09	; 9
    1342:	93 e2       	ldi	r25, 0x23	; 35
    1344:	0e 94 ef 09 	call	0x13de	; 0x13de <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
    1348:	89 e0       	ldi	r24, 0x09	; 9
    134a:	93 e2       	ldi	r25, 0x23	; 35
    134c:	0e 94 23 0a 	call	0x1446	; 0x1446 <_ZN12CSoundPlayer9SoundStopEv>
    1350:	ec cf       	rjmp	.-40     	; 0x132a <_ZN16CLaserControlApp7OnTimerEv+0x80>
		}
		m_wMillSec = 100; // Every 10 ms
		m_wSeconds--;
		if (m_wMinutes == 0 && m_wSeconds < 10)
		{
			if (m_wMinutes == 0 && m_wSeconds < 5)
    1352:	8e 85       	ldd	r24, Y+14	; 0x0e
    1354:	9f 85       	ldd	r25, Y+15	; 0x0f
    1356:	89 2b       	or	r24, r25
    1358:	19 f3       	breq	.-58     	; 0x1320 <_ZN16CLaserControlApp7OnTimerEv+0x76>
    135a:	0e c0       	rjmp	.+28     	; 0x1378 <_ZN16CLaserControlApp7OnTimerEv+0xce>
			{
				player.SoundStart(1000, 100, 0);
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	44 e6       	ldi	r20, 0x64	; 100
    1360:	50 e0       	ldi	r21, 0x00	; 0
    1362:	68 ee       	ldi	r22, 0xE8	; 232
    1364:	73 e0       	ldi	r23, 0x03	; 3
    1366:	89 e0       	ldi	r24, 0x09	; 9
    1368:	93 e2       	ldi	r25, 0x23	; 35
    136a:	0e 94 ef 09 	call	0x13de	; 0x13de <_ZN12CSoundPlayer10SoundStartEjjh>
				player.SoundStop();
    136e:	89 e0       	ldi	r24, 0x09	; 9
    1370:	93 e2       	ldi	r25, 0x23	; 35
    1372:	0e 94 23 0a 	call	0x1446	; 0x1446 <_ZN12CSoundPlayer9SoundStopEv>
    1376:	d9 cf       	rjmp	.-78     	; 0x132a <_ZN16CLaserControlApp7OnTimerEv+0x80>
				//player.beep(1000, 100);
			}
			else
			{
				player.SoundStart(1000, 50, 1);
    1378:	21 e0       	ldi	r18, 0x01	; 1
    137a:	42 e3       	ldi	r20, 0x32	; 50
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	68 ee       	ldi	r22, 0xE8	; 232
    1380:	73 e0       	ldi	r23, 0x03	; 3
    1382:	89 e0       	ldi	r24, 0x09	; 9
    1384:	93 e2       	ldi	r25, 0x23	; 35
    1386:	0e 94 ef 09 	call	0x13de	; 0x13de <_ZN12CSoundPlayer10SoundStartEjjh>
				player.SoundStop();
    138a:	89 e0       	ldi	r24, 0x09	; 9
    138c:	93 e2       	ldi	r25, 0x23	; 35
    138e:	0e 94 23 0a 	call	0x1446	; 0x1446 <_ZN12CSoundPlayer9SoundStopEv>
    1392:	cb cf       	rjmp	.-106    	; 0x132a <_ZN16CLaserControlApp7OnTimerEv+0x80>
			player.SoundStop();
			//player.beep(1000, 25);
		}
	}
	m_wMillSec-=10;
}
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	08 95       	ret

0000139a <_ZN16CLaserControlApp13OnTimerStaticEPv>:
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnTimer();
    139a:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN16CLaserControlApp7OnTimerEv>
    139e:	08 95       	ret

000013a0 <_ZN12CSoundPlayerC1Ev>:
	SoundStart(note, duration, 3);
	SoundStop();
}

// default constructor
CSoundPlayer::CSoundPlayer()
    13a0:	08 95       	ret

000013a2 <_ZN12CSoundPlayerD1Ev>:
{
} //CSoundPlayer

// default destructor
CSoundPlayer::~CSoundPlayer()
    13a2:	08 95       	ret

000013a4 <_ZN12CSoundPlayer19InitializeToneTimerEv>:
} //~CSoundPlayer

void CSoundPlayer::InitializeToneTimer()
{
	// Start timer 4MHz tick rate
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;
    13a4:	e0 e0       	ldi	r30, 0x00	; 0
    13a6:	fa e0       	ldi	r31, 0x0A	; 10
    13a8:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE0.CTRLB = TC0_CCDEN_bm | TC_WGMODE_DS_B_gc;
    13aa:	87 e8       	ldi	r24, 0x87	; 135
    13ac:	81 83       	std	Z+1, r24	; 0x01
	
	// No events
	TCE0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    13ae:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1.000 Hz PWM
	TCE0.PER = PERIOD_1Hz;
    13b0:	84 e2       	ldi	r24, 0x24	; 36
    13b2:	94 ef       	ldi	r25, 0xF4	; 244
    13b4:	86 a3       	std	Z+38, r24	; 0x26
    13b6:	97 a3       	std	Z+39, r25	; 0x27
	
	// Set 50% duty cycle
	TCE0.CCD =  MAXVOLUME_CC;
    13b8:	82 e1       	ldi	r24, 0x12	; 18
    13ba:	9a e7       	ldi	r25, 0x7A	; 122
    13bc:	86 a7       	std	Z+46, r24	; 0x2e
    13be:	97 a7       	std	Z+47, r25	; 0x2f
	
	// Disable interrupt
	TCE0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    13c0:	16 82       	std	Z+6, r1	; 0x06
	TCE0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    13c2:	17 82       	std	Z+7, r1	; 0x07
    13c4:	08 95       	ret

000013c6 <_ZN12CSoundPlayer23InitializeDurationTimerEv>:

void CSoundPlayer::InitializeDurationTimer()
{
	// Start timer 4MHz tick rate
	//TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;
    13c6:	e0 e4       	ldi	r30, 0x40	; 64
    13c8:	fa e0       	ldi	r31, 0x0A	; 10
    13ca:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE1.CTRLB = TC_WGMODE_NORMAL_gc;
    13cc:	11 82       	std	Z+1, r1	; 0x01
	
	// No events
	TCE1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    13ce:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1s
	TCE1.PER = DELAYPERIOD_1s;
    13d0:	84 e2       	ldi	r24, 0x24	; 36
    13d2:	94 ef       	ldi	r25, 0xF4	; 244
    13d4:	86 a3       	std	Z+38, r24	; 0x26
    13d6:	97 a3       	std	Z+39, r25	; 0x27
	
	// Disable interrupt
	TCE1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    13d8:	16 82       	std	Z+6, r1	; 0x06
	TCE1.INTCTRLB = TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    13da:	17 82       	std	Z+7, r1	; 0x07
    13dc:	08 95       	ret

000013de <_ZN12CSoundPlayer10SoundStartEjjh>:
}

void CSoundPlayer::SoundStart(uint16_t freq, uint16_t time, uint8_t volume)
{
    13de:	0f 93       	push	r16
    13e0:	1f 93       	push	r17
    13e2:	cf 93       	push	r28
    13e4:	8a 01       	movw	r16, r20
    13e6:	c2 2f       	mov	r28, r18
	uint16_t period_tc0 = PERIOD_1Hz/freq;
    13e8:	9b 01       	movw	r18, r22
    13ea:	40 e0       	ldi	r20, 0x00	; 0
    13ec:	50 e0       	ldi	r21, 0x00	; 0
    13ee:	64 e2       	ldi	r22, 0x24	; 36
    13f0:	74 ef       	ldi	r23, 0xF4	; 244
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <__divmodsi4>
	uint16_t period_tc1 = DELAYPERIOD_A1s * time + (time >> DELAYPERIOD_S1s);
    13fa:	b8 01       	movw	r22, r16
    13fc:	76 95       	lsr	r23
    13fe:	67 95       	ror	r22
    1400:	ee e3       	ldi	r30, 0x3E	; 62
    1402:	e0 9f       	mul	r30, r16
    1404:	c0 01       	movw	r24, r0
    1406:	e1 9f       	mul	r30, r17
    1408:	90 0d       	add	r25, r0
    140a:	11 24       	eor	r1, r1
    140c:	86 0f       	add	r24, r22
    140e:	97 1f       	adc	r25, r23
	
	// Config
	TCE0.CCD = period_tc0 >> (volume + 1);
    1410:	cf 5f       	subi	r28, 0xFF	; 255
    1412:	b9 01       	movw	r22, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <_ZN12CSoundPlayer10SoundStartEjjh+0x3c>
    1416:	76 95       	lsr	r23
    1418:	67 95       	ror	r22
    141a:	ca 95       	dec	r28
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <_ZN12CSoundPlayer10SoundStartEjjh+0x38>
    141e:	e0 e0       	ldi	r30, 0x00	; 0
    1420:	fa e0       	ldi	r31, 0x0A	; 10
    1422:	66 a7       	std	Z+46, r22	; 0x2e
    1424:	77 a7       	std	Z+47, r23	; 0x2f
	TCE0.PER = period_tc0;
    1426:	26 a3       	std	Z+38, r18	; 0x26
    1428:	37 a3       	std	Z+39, r19	; 0x27
	TCE1.PER = period_tc1;
    142a:	a0 e4       	ldi	r26, 0x40	; 64
    142c:	ba e0       	ldi	r27, 0x0A	; 10
    142e:	96 96       	adiw	r26, 0x26	; 38
    1430:	8d 93       	st	X+, r24
    1432:	9c 93       	st	X, r25
    1434:	97 97       	sbiw	r26, 0x27	; 39
	
	//Start timer
	TCE0.CTRLA = TC_CLKSEL_DIV256_gc;	//Start tone timer
    1436:	86 e0       	ldi	r24, 0x06	; 6
    1438:	80 83       	st	Z, r24
	TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;	//Start duration timer
    143a:	87 e0       	ldi	r24, 0x07	; 7
    143c:	8c 93       	st	X, r24
}
    143e:	cf 91       	pop	r28
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	08 95       	ret

00001446 <_ZN12CSoundPlayer9SoundStopEv>:

void CSoundPlayer::SoundStop()
{
	while (!(TCE1.INTFLAGS & TC0_OVFIF_bm));
    1446:	e0 e4       	ldi	r30, 0x40	; 64
    1448:	fa e0       	ldi	r31, 0x0A	; 10
    144a:	84 85       	ldd	r24, Z+12	; 0x0c
    144c:	80 ff       	sbrs	r24, 0
    144e:	fd cf       	rjmp	.-6      	; 0x144a <_ZN12CSoundPlayer9SoundStopEv+0x4>
	TCE1.INTFLAGS &= TC0_OVFIF_bm;
    1450:	e0 e4       	ldi	r30, 0x40	; 64
    1452:	fa e0       	ldi	r31, 0x0A	; 10
    1454:	84 85       	ldd	r24, Z+12	; 0x0c
    1456:	81 70       	andi	r24, 0x01	; 1
    1458:	84 87       	std	Z+12, r24	; 0x0c

	//Stop timer
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;		//Stop tone timer
    145a:	a0 e0       	ldi	r26, 0x00	; 0
    145c:	ba e0       	ldi	r27, 0x0A	; 10
    145e:	1c 92       	st	X, r1
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;		//Stop duration timer
    1460:	10 82       	st	Z, r1

	// Reset duration timer
	TCE1.CNT = 0;
    1462:	10 a2       	std	Z+32, r1	; 0x20
    1464:	11 a2       	std	Z+33, r1	; 0x21
	TCE0.CNT = 0;
    1466:	90 96       	adiw	r26, 0x20	; 32
    1468:	1d 92       	st	X+, r1
    146a:	1c 92       	st	X, r1
    146c:	91 97       	sbiw	r26, 0x21	; 33
    146e:	2f ef       	ldi	r18, 0xFF	; 255
    1470:	83 ef       	ldi	r24, 0xF3	; 243
    1472:	91 e0       	ldi	r25, 0x01	; 1
    1474:	21 50       	subi	r18, 0x01	; 1
    1476:	80 40       	sbci	r24, 0x00	; 0
    1478:	90 40       	sbci	r25, 0x00	; 0
    147a:	e1 f7       	brne	.-8      	; 0x1474 <_ZN12CSoundPlayer9SoundStopEv+0x2e>
    147c:	00 c0       	rjmp	.+0      	; 0x147e <_ZN12CSoundPlayer9SoundStopEv+0x38>
    147e:	00 00       	nop
    1480:	08 95       	ret

00001482 <_ZN12CSoundPlayer10InitializeEv>:

	_delay_ms(20);
} 

void CSoundPlayer::Initialize()
{
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	ec 01       	movw	r28, r24
	InitializeToneTimer();
    1488:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <_ZN12CSoundPlayer19InitializeToneTimerEv>
	InitializeDurationTimer();
    148c:	ce 01       	movw	r24, r28
    148e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <_ZN12CSoundPlayer23InitializeDurationTimerEv>
}
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	08 95       	ret

00001498 <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerC::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    1498:	fc 01       	movw	r30, r24
    149a:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    149c:	e0 e0       	ldi	r30, 0x00	; 0
    149e:	f8 e0       	ldi	r31, 0x08	; 8
    14a0:	80 81       	ld	r24, Z
    14a2:	80 7f       	andi	r24, 0xF0	; 240
    14a4:	80 83       	st	Z, r24
	
	// No events
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    14a6:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC0.CNT = 0;
    14a8:	10 a2       	std	Z+32, r1	; 0x20
    14aa:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CCA = 0;
    14ac:	10 a6       	std	Z+40, r1	; 0x28
    14ae:	11 a6       	std	Z+41, r1	; 0x29
	TCC0.CCB = 0;
    14b0:	12 a6       	std	Z+42, r1	; 0x2a
    14b2:	13 a6       	std	Z+43, r1	; 0x2b
	TCC0.CCC = 0;
    14b4:	14 a6       	std	Z+44, r1	; 0x2c
    14b6:	15 a6       	std	Z+45, r1	; 0x2d
	TCC0.CCD = 0;
    14b8:	16 a6       	std	Z+46, r1	; 0x2e
    14ba:	17 a6       	std	Z+47, r1	; 0x2f
	TCC0.PER = 0;
    14bc:	16 a2       	std	Z+38, r1	; 0x26
    14be:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    14c0:	81 81       	ldd	r24, Z+1	; 0x01
    14c2:	88 7f       	andi	r24, 0xF8	; 248
    14c4:	68 2b       	or	r22, r24
    14c6:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC0.CTRLA = (TCC0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    14c8:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    14ca:	17 82       	std	Z+7, r1	; 0x07
    14cc:	08 95       	ret

000014ce <_ZN7CTimerC5StartEj>:
}

void CTimerC::Start(uint16_t period)
{
	// Set period of timer
	TCC0.PER = period;
    14ce:	e0 e0       	ldi	r30, 0x00	; 0
    14d0:	f8 e0       	ldi	r31, 0x08	; 8
    14d2:	66 a3       	std	Z+38, r22	; 0x26
    14d4:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    14d6:	20 81       	ld	r18, Z
    14d8:	20 7f       	andi	r18, 0xF0	; 240
    14da:	dc 01       	movw	r26, r24
    14dc:	12 96       	adiw	r26, 0x02	; 2
    14de:	9c 91       	ld	r25, X
    14e0:	82 2f       	mov	r24, r18
    14e2:	89 2b       	or	r24, r25
    14e4:	80 83       	st	Z, r24
    14e6:	08 95       	ret

000014e8 <_ZN7CTimerC4StopEv>:
}

void CTimerC::Stop()
{
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    14e8:	e0 e0       	ldi	r30, 0x00	; 0
    14ea:	f8 e0       	ldi	r31, 0x08	; 8
    14ec:	80 81       	ld	r24, Z
    14ee:	80 7f       	andi	r24, 0xF0	; 240
    14f0:	80 83       	st	Z, r24
	TCC0.CNT = 0;
    14f2:	10 a2       	std	Z+32, r1	; 0x20
    14f4:	11 a2       	std	Z+33, r1	; 0x21
    14f6:	08 95       	ret

000014f8 <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::EnableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB = (TCC0.CTRLB & ~0xF0) | channels;
    14f8:	e0 e0       	ldi	r30, 0x00	; 0
    14fa:	f8 e0       	ldi	r31, 0x08	; 8
    14fc:	81 81       	ldd	r24, Z+1	; 0x01
    14fe:	8f 70       	andi	r24, 0x0F	; 15
    1500:	68 2b       	or	r22, r24
    1502:	61 83       	std	Z+1, r22	; 0x01
    1504:	08 95       	ret

00001506 <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::DisableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB &= ~channels;
    1506:	e0 e0       	ldi	r30, 0x00	; 0
    1508:	f8 e0       	ldi	r31, 0x08	; 8
    150a:	81 81       	ldd	r24, Z+1	; 0x01
    150c:	60 95       	com	r22
    150e:	68 23       	and	r22, r24
    1510:	61 83       	std	Z+1, r22	; 0x01
    1512:	08 95       	ret

00001514 <_ZN7CTimerC9SetPeriodEj>:
}

void CTimerC::SetPeriod(uint16_t value)
{
	TCC0.PER = value;
    1514:	60 93 26 08 	sts	0x0826, r22
    1518:	70 93 27 08 	sts	0x0827, r23
    151c:	08 95       	ret

0000151e <_ZN7CTimerC8SetCOMPAEj>:
}

void CTimerC::SetCOMPA(uint16_t value)
{
	TCC0.CCA = value;
    151e:	60 93 28 08 	sts	0x0828, r22
    1522:	70 93 29 08 	sts	0x0829, r23
    1526:	08 95       	ret

00001528 <_ZN7CTimerC8SetCOMPBEj>:
}

void CTimerC::SetCOMPB(uint16_t value)
{
	TCC0.CCB = value;
    1528:	60 93 2a 08 	sts	0x082A, r22
    152c:	70 93 2b 08 	sts	0x082B, r23
    1530:	08 95       	ret

00001532 <_ZN7CTimerC8SetCOMPCEj>:
}

void CTimerC::SetCOMPC(uint16_t value)
{
	TCC0.CCC = value;
    1532:	60 93 2c 08 	sts	0x082C, r22
    1536:	70 93 2d 08 	sts	0x082D, r23
    153a:	08 95       	ret

0000153c <_ZN7CTimerC8SetCOMPDEj>:
}

void CTimerC::SetCOMPD(uint16_t value)
{
	TCC0.CCD = value;
    153c:	60 93 2e 08 	sts	0x082E, r22
    1540:	70 93 2f 08 	sts	0x082F, r23
    1544:	08 95       	ret

00001546 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    1546:	61 15       	cp	r22, r1
    1548:	71 05       	cpc	r23, r1
    154a:	31 f0       	breq	.+12     	; 0x1558 <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    154c:	e0 e0       	ldi	r30, 0x00	; 0
    154e:	f8 e0       	ldi	r31, 0x08	; 8
    1550:	86 81       	ldd	r24, Z+6	; 0x06
    1552:	83 70       	andi	r24, 0x03	; 3
    1554:	28 2b       	or	r18, r24
    1556:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCC0_OVF_vect_num] = func;
    1558:	60 93 0f 21 	sts	0x210F, r22
    155c:	70 93 10 21 	sts	0x2110, r23
	InterruptSenderTable[TCC0_OVF_vect_num] = owner;
    1560:	40 93 05 22 	sts	0x2205, r20
    1564:	50 93 06 22 	sts	0x2206, r21
    1568:	08 95       	ret

0000156a <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    156a:	61 15       	cp	r22, r1
    156c:	71 05       	cpc	r23, r1
    156e:	31 f0       	breq	.+12     	; 0x157c <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    1570:	e0 e0       	ldi	r30, 0x00	; 0
    1572:	f8 e0       	ldi	r31, 0x08	; 8
    1574:	86 81       	ldd	r24, Z+6	; 0x06
    1576:	8c 70       	andi	r24, 0x0C	; 12
    1578:	28 2b       	or	r18, r24
    157a:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC0_ERR_vect_num] = func;
    157c:	60 93 11 21 	sts	0x2111, r22
    1580:	70 93 12 21 	sts	0x2112, r23
	InterruptSenderTable[TCC0_ERR_vect_num] = owner;
    1584:	40 93 07 22 	sts	0x2207, r20
    1588:	50 93 08 22 	sts	0x2208, r21
    158c:	08 95       	ret

0000158e <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    158e:	61 15       	cp	r22, r1
    1590:	71 05       	cpc	r23, r1
    1592:	31 f0       	breq	.+12     	; 0x15a0 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    1594:	e0 e0       	ldi	r30, 0x00	; 0
    1596:	f8 e0       	ldi	r31, 0x08	; 8
    1598:	87 81       	ldd	r24, Z+7	; 0x07
    159a:	83 70       	andi	r24, 0x03	; 3
    159c:	28 2b       	or	r18, r24
    159e:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCA_vect_num] = func;
    15a0:	60 93 13 21 	sts	0x2113, r22
    15a4:	70 93 14 21 	sts	0x2114, r23
	InterruptSenderTable[TCC0_CCA_vect_num] = owner;
    15a8:	40 93 09 22 	sts	0x2209, r20
    15ac:	50 93 0a 22 	sts	0x220A, r21
    15b0:	08 95       	ret

000015b2 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    15b2:	61 15       	cp	r22, r1
    15b4:	71 05       	cpc	r23, r1
    15b6:	31 f0       	breq	.+12     	; 0x15c4 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    15b8:	e0 e0       	ldi	r30, 0x00	; 0
    15ba:	f8 e0       	ldi	r31, 0x08	; 8
    15bc:	87 81       	ldd	r24, Z+7	; 0x07
    15be:	8c 70       	andi	r24, 0x0C	; 12
    15c0:	28 2b       	or	r18, r24
    15c2:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCB_vect_num] = func;
    15c4:	60 93 15 21 	sts	0x2115, r22
    15c8:	70 93 16 21 	sts	0x2116, r23
	InterruptSenderTable[TCC0_CCB_vect_num] = owner;
    15cc:	40 93 0b 22 	sts	0x220B, r20
    15d0:	50 93 0c 22 	sts	0x220C, r21
    15d4:	08 95       	ret

000015d6 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerC::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    15d6:	61 15       	cp	r22, r1
    15d8:	71 05       	cpc	r23, r1
    15da:	31 f0       	breq	.+12     	; 0x15e8 <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    15dc:	e0 e0       	ldi	r30, 0x00	; 0
    15de:	f8 e0       	ldi	r31, 0x08	; 8
    15e0:	87 81       	ldd	r24, Z+7	; 0x07
    15e2:	80 73       	andi	r24, 0x30	; 48
    15e4:	28 2b       	or	r18, r24
    15e6:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCC_vect_num] = func;
    15e8:	60 93 17 21 	sts	0x2117, r22
    15ec:	70 93 18 21 	sts	0x2118, r23
	InterruptSenderTable[TCC0_CCC_vect_num] = owner;
    15f0:	40 93 0d 22 	sts	0x220D, r20
    15f4:	50 93 0e 22 	sts	0x220E, r21
    15f8:	08 95       	ret

000015fa <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerC::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    15fa:	61 15       	cp	r22, r1
    15fc:	71 05       	cpc	r23, r1
    15fe:	31 f0       	breq	.+12     	; 0x160c <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    1600:	e0 e0       	ldi	r30, 0x00	; 0
    1602:	f8 e0       	ldi	r31, 0x08	; 8
    1604:	87 81       	ldd	r24, Z+7	; 0x07
    1606:	80 7c       	andi	r24, 0xC0	; 192
    1608:	28 2b       	or	r18, r24
    160a:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCD_vect_num] = func;
    160c:	60 93 19 21 	sts	0x2119, r22
    1610:	70 93 1a 21 	sts	0x211A, r23
	InterruptSenderTable[TCC0_CCD_vect_num] = owner;
    1614:	40 93 0f 22 	sts	0x220F, r20
    1618:	50 93 10 22 	sts	0x2210, r21
    161c:	08 95       	ret

0000161e <_ZN7CTimerCC1Ev>:

#include "CTimerC.h"
#include "LaserLib/intx128.h"

// default constructor
CTimerC::CTimerC()
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	ec 01       	movw	r28, r24
    1624:	0e 94 84 0b 	call	0x1708	; 0x1708 <_ZN6CTimerC1Ev>
    1628:	8b e7       	ldi	r24, 0x7B	; 123
    162a:	90 e2       	ldi	r25, 0x20	; 32
    162c:	88 83       	st	Y, r24
    162e:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	08 95       	ret

00001636 <_ZN7CTimerCD1Ev>:

// default destructor
CTimerC::~CTimerC()
    1636:	2b e7       	ldi	r18, 0x7B	; 123
    1638:	30 e2       	ldi	r19, 0x20	; 32
    163a:	fc 01       	movw	r30, r24
    163c:	20 83       	st	Z, r18
    163e:	31 83       	std	Z+1, r19	; 0x01
    1640:	0e 94 8a 0b 	call	0x1714	; 0x1714 <_ZN6CTimerD1Ev>
    1644:	08 95       	ret

00001646 <_ZN4CSPIC1Ev>:
#include <avr/io.h>
#include <stdlib.h>
#include <string.h>

// default constructor
CSPI::CSPI()
    1646:	08 95       	ret

00001648 <_ZN4CSPID1Ev>:
{
} //CSPI

// default destructor
CSPI::~CSPI()
    1648:	08 95       	ret

0000164a <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>:
{
} //~CSPI

void CSPI::Initialize(bool Master, SPI_DATA_ORDER dord, SPI_MODE mode, bool doubleClk, SPI_PRESCALER_t prescaler)
{
    164a:	ef 92       	push	r14
    164c:	0f 93       	push	r16
    164e:	1f 93       	push	r17
    1650:	cf 93       	push	r28
    1652:	df 93       	push	r29
    1654:	ec 01       	movw	r28, r24
	PORTE.DIRSET = PIN4_bm | PIN5_bm | PIN7_bm; // MOSI, nSS, SCK to out
    1656:	e0 e8       	ldi	r30, 0x80	; 128
    1658:	f6 e0       	ldi	r31, 0x06	; 6
    165a:	80 eb       	ldi	r24, 0xB0	; 176
    165c:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRCLR = PIN6_bm;						// MISO to in
    165e:	90 e4       	ldi	r25, 0x40	; 64
    1660:	92 83       	std	Z+2, r25	; 0x02
	
	// All slew rate limit enable with inverting
	PORTE.PIN4CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    1662:	90 ec       	ldi	r25, 0xC0	; 192
    1664:	94 8b       	std	Z+20, r25	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    1666:	95 8b       	std	Z+21, r25	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    1668:	96 8b       	std	Z+22, r25	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    166a:	97 8b       	std	Z+23, r25	; 0x17
	
	// Set high
	PORTE.OUTSET = PIN4_bm | PIN5_bm | PIN7_bm;
    166c:	85 83       	std	Z+5, r24	; 0x05
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
		prescaler;
    166e:	61 11       	cpse	r22, r1
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2c>
    1672:	80 e4       	ldi	r24, 0x40	; 64
    1674:	01 c0       	rjmp	.+2      	; 0x1678 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2e>
    1676:	80 e5       	ldi	r24, 0x50	; 80
    1678:	01 11       	cpse	r16, r1
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x36>
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	01 c0       	rjmp	.+2      	; 0x1682 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x38>
    1680:	30 e8       	ldi	r19, 0x80	; 128
    1682:	41 11       	cpse	r20, r1
    1684:	02 c0       	rjmp	.+4      	; 0x168a <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x40>
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	01 c0       	rjmp	.+2      	; 0x168c <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x42>
    168a:	90 e2       	ldi	r25, 0x20	; 32
	SPIE.CTRL = 
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
    168c:	22 0f       	add	r18, r18
    168e:	22 0f       	add	r18, r18
    1690:	e2 2a       	or	r14, r18
    1692:	e8 2a       	or	r14, r24
    1694:	e3 2a       	or	r14, r19
		prescaler;
    1696:	e9 2a       	or	r14, r25
    1698:	00 ec       	ldi	r16, 0xC0	; 192
    169a:	1a e0       	ldi	r17, 0x0A	; 10
    169c:	f8 01       	movw	r30, r16
    169e:	e0 82       	st	Z, r14
		
	// Allocate transmit buffer
	buffer = (uint8_t*)malloc(256);
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	91 e0       	ldi	r25, 0x01	; 1
    16a4:	0e 94 51 23 	call	0x46a2	; 0x46a2 <malloc>
    16a8:	88 83       	st	Y, r24
    16aa:	99 83       	std	Y+1, r25	; 0x01
	
	// Enable interrupt
	SPIE.INTCTRL = SPI_INTLVL_LO_gc;
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	f8 01       	movw	r30, r16
    16b0:	81 83       	std	Z+1, r24	; 0x01
	
	// Set interrupts
	InterruptFuncTable[SPIE_INT_vect_num] = StaticOnTransmit;
    16b2:	81 e8       	ldi	r24, 0x81	; 129
    16b4:	9b e0       	ldi	r25, 0x0B	; 11
    16b6:	80 93 65 21 	sts	0x2165, r24
    16ba:	90 93 66 21 	sts	0x2166, r25
	InterruptSenderTable[SPIE_INT_vect_num] = this;
    16be:	c0 93 5b 22 	sts	0x225B, r28
    16c2:	d0 93 5c 22 	sts	0x225C, r29
}
    16c6:	df 91       	pop	r29
    16c8:	cf 91       	pop	r28
    16ca:	1f 91       	pop	r17
    16cc:	0f 91       	pop	r16
    16ce:	ef 90       	pop	r14
    16d0:	08 95       	ret

000016d2 <_ZN4CSPI10OnTransmitEv>:
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
}

void CSPI::OnTransmit()
{
    16d2:	fc 01       	movw	r30, r24
	if (rx_pos != 0)
    16d4:	82 81       	ldd	r24, Z+2	; 0x02
    16d6:	93 81       	ldd	r25, Z+3	; 0x03
    16d8:	89 2b       	or	r24, r25
    16da:	79 f0       	breq	.+30     	; 0x16fa <_ZN4CSPI10OnTransmitEv+0x28>
		SPIE.DATA = buffer[--rx_pos];
    16dc:	40 81       	ld	r20, Z
    16de:	51 81       	ldd	r21, Z+1	; 0x01
    16e0:	22 81       	ldd	r18, Z+2	; 0x02
    16e2:	33 81       	ldd	r19, Z+3	; 0x03
    16e4:	c9 01       	movw	r24, r18
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	82 83       	std	Z+2, r24	; 0x02
    16ea:	93 83       	std	Z+3, r25	; 0x03
    16ec:	fa 01       	movw	r30, r20
    16ee:	e8 0f       	add	r30, r24
    16f0:	f9 1f       	adc	r31, r25
    16f2:	80 81       	ld	r24, Z
    16f4:	80 93 c3 0a 	sts	0x0AC3, r24
    16f8:	08 95       	ret
	else
		PORTE.OUTSET = PIN4_bm;
    16fa:	80 e1       	ldi	r24, 0x10	; 16
    16fc:	80 93 85 06 	sts	0x0685, r24
    1700:	08 95       	ret

00001702 <_ZN4CSPI16StaticOnTransmitEPv>:
}

void CSPI::StaticOnTransmit(void* sender)
{
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
    1702:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZN4CSPI10OnTransmitEv>
    1706:	08 95       	ret

00001708 <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
    1708:	2f e9       	ldi	r18, 0x9F	; 159
    170a:	30 e2       	ldi	r19, 0x20	; 32
    170c:	fc 01       	movw	r30, r24
    170e:	20 83       	st	Z, r18
    1710:	31 83       	std	Z+1, r19	; 0x01
    1712:	08 95       	ret

00001714 <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
    1714:	08 95       	ret

00001716 <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
    1716:	23 ec       	ldi	r18, 0xC3	; 195
    1718:	30 e2       	ldi	r19, 0x20	; 32
    171a:	fc 01       	movw	r30, r24
    171c:	20 83       	st	Z, r18
    171e:	31 83       	std	Z+1, r19	; 0x01
    1720:	08 95       	ret

00001722 <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
    1722:	08 95       	ret

00001724 <__vector_1>:
		if (InterruptFuncTable[vector_id##_num] != 0)										\
		(*(InterruptFuncTable[vector_id##_num]))(InterruptSenderTable[vector_id##_num]);	\
	}

/* OSC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(OSC_OSCF_vect)      /* External Oscillator Failure Interrupt (NMI) */
    1724:	1f 92       	push	r1
    1726:	0f 92       	push	r0
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	0f 92       	push	r0
    172c:	11 24       	eor	r1, r1
    172e:	0b b6       	in	r0, 0x3b	; 59
    1730:	0f 92       	push	r0
    1732:	2f 93       	push	r18
    1734:	3f 93       	push	r19
    1736:	4f 93       	push	r20
    1738:	5f 93       	push	r21
    173a:	6f 93       	push	r22
    173c:	7f 93       	push	r23
    173e:	8f 93       	push	r24
    1740:	9f 93       	push	r25
    1742:	af 93       	push	r26
    1744:	bf 93       	push	r27
    1746:	ef 93       	push	r30
    1748:	ff 93       	push	r31
    174a:	e0 91 f5 20 	lds	r30, 0x20F5
    174e:	f0 91 f6 20 	lds	r31, 0x20F6
    1752:	30 97       	sbiw	r30, 0x00	; 0
    1754:	29 f0       	breq	.+10     	; 0x1760 <__vector_1+0x3c>
    1756:	80 91 eb 21 	lds	r24, 0x21EB
    175a:	90 91 ec 21 	lds	r25, 0x21EC
    175e:	19 95       	eicall
    1760:	ff 91       	pop	r31
    1762:	ef 91       	pop	r30
    1764:	bf 91       	pop	r27
    1766:	af 91       	pop	r26
    1768:	9f 91       	pop	r25
    176a:	8f 91       	pop	r24
    176c:	7f 91       	pop	r23
    176e:	6f 91       	pop	r22
    1770:	5f 91       	pop	r21
    1772:	4f 91       	pop	r20
    1774:	3f 91       	pop	r19
    1776:	2f 91       	pop	r18
    1778:	0f 90       	pop	r0
    177a:	0b be       	out	0x3b, r0	; 59
    177c:	0f 90       	pop	r0
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	0f 90       	pop	r0
    1782:	1f 90       	pop	r1
    1784:	18 95       	reti

00001786 <__vector_2>:

/* PORTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT0_vect)      /* External Interrupt 0 */
    1786:	1f 92       	push	r1
    1788:	0f 92       	push	r0
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	0f 92       	push	r0
    178e:	11 24       	eor	r1, r1
    1790:	0b b6       	in	r0, 0x3b	; 59
    1792:	0f 92       	push	r0
    1794:	2f 93       	push	r18
    1796:	3f 93       	push	r19
    1798:	4f 93       	push	r20
    179a:	5f 93       	push	r21
    179c:	6f 93       	push	r22
    179e:	7f 93       	push	r23
    17a0:	8f 93       	push	r24
    17a2:	9f 93       	push	r25
    17a4:	af 93       	push	r26
    17a6:	bf 93       	push	r27
    17a8:	ef 93       	push	r30
    17aa:	ff 93       	push	r31
    17ac:	e0 91 f7 20 	lds	r30, 0x20F7
    17b0:	f0 91 f8 20 	lds	r31, 0x20F8
    17b4:	30 97       	sbiw	r30, 0x00	; 0
    17b6:	29 f0       	breq	.+10     	; 0x17c2 <__vector_2+0x3c>
    17b8:	80 91 ed 21 	lds	r24, 0x21ED
    17bc:	90 91 ee 21 	lds	r25, 0x21EE
    17c0:	19 95       	eicall
    17c2:	ff 91       	pop	r31
    17c4:	ef 91       	pop	r30
    17c6:	bf 91       	pop	r27
    17c8:	af 91       	pop	r26
    17ca:	9f 91       	pop	r25
    17cc:	8f 91       	pop	r24
    17ce:	7f 91       	pop	r23
    17d0:	6f 91       	pop	r22
    17d2:	5f 91       	pop	r21
    17d4:	4f 91       	pop	r20
    17d6:	3f 91       	pop	r19
    17d8:	2f 91       	pop	r18
    17da:	0f 90       	pop	r0
    17dc:	0b be       	out	0x3b, r0	; 59
    17de:	0f 90       	pop	r0
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	0f 90       	pop	r0
    17e4:	1f 90       	pop	r1
    17e6:	18 95       	reti

000017e8 <__vector_3>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT1_vect)      /* External Interrupt 1 */
    17e8:	1f 92       	push	r1
    17ea:	0f 92       	push	r0
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	0f 92       	push	r0
    17f0:	11 24       	eor	r1, r1
    17f2:	0b b6       	in	r0, 0x3b	; 59
    17f4:	0f 92       	push	r0
    17f6:	2f 93       	push	r18
    17f8:	3f 93       	push	r19
    17fa:	4f 93       	push	r20
    17fc:	5f 93       	push	r21
    17fe:	6f 93       	push	r22
    1800:	7f 93       	push	r23
    1802:	8f 93       	push	r24
    1804:	9f 93       	push	r25
    1806:	af 93       	push	r26
    1808:	bf 93       	push	r27
    180a:	ef 93       	push	r30
    180c:	ff 93       	push	r31
    180e:	e0 91 f9 20 	lds	r30, 0x20F9
    1812:	f0 91 fa 20 	lds	r31, 0x20FA
    1816:	30 97       	sbiw	r30, 0x00	; 0
    1818:	29 f0       	breq	.+10     	; 0x1824 <__vector_3+0x3c>
    181a:	80 91 ef 21 	lds	r24, 0x21EF
    181e:	90 91 f0 21 	lds	r25, 0x21F0
    1822:	19 95       	eicall
    1824:	ff 91       	pop	r31
    1826:	ef 91       	pop	r30
    1828:	bf 91       	pop	r27
    182a:	af 91       	pop	r26
    182c:	9f 91       	pop	r25
    182e:	8f 91       	pop	r24
    1830:	7f 91       	pop	r23
    1832:	6f 91       	pop	r22
    1834:	5f 91       	pop	r21
    1836:	4f 91       	pop	r20
    1838:	3f 91       	pop	r19
    183a:	2f 91       	pop	r18
    183c:	0f 90       	pop	r0
    183e:	0b be       	out	0x3b, r0	; 59
    1840:	0f 90       	pop	r0
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	0f 90       	pop	r0
    1846:	1f 90       	pop	r1
    1848:	18 95       	reti

0000184a <__vector_4>:

/* PORTR interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT0_vect)      /* External Interrupt 0 */
    184a:	1f 92       	push	r1
    184c:	0f 92       	push	r0
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	0f 92       	push	r0
    1852:	11 24       	eor	r1, r1
    1854:	0b b6       	in	r0, 0x3b	; 59
    1856:	0f 92       	push	r0
    1858:	2f 93       	push	r18
    185a:	3f 93       	push	r19
    185c:	4f 93       	push	r20
    185e:	5f 93       	push	r21
    1860:	6f 93       	push	r22
    1862:	7f 93       	push	r23
    1864:	8f 93       	push	r24
    1866:	9f 93       	push	r25
    1868:	af 93       	push	r26
    186a:	bf 93       	push	r27
    186c:	ef 93       	push	r30
    186e:	ff 93       	push	r31
    1870:	e0 91 fb 20 	lds	r30, 0x20FB
    1874:	f0 91 fc 20 	lds	r31, 0x20FC
    1878:	30 97       	sbiw	r30, 0x00	; 0
    187a:	29 f0       	breq	.+10     	; 0x1886 <__vector_4+0x3c>
    187c:	80 91 f1 21 	lds	r24, 0x21F1
    1880:	90 91 f2 21 	lds	r25, 0x21F2
    1884:	19 95       	eicall
    1886:	ff 91       	pop	r31
    1888:	ef 91       	pop	r30
    188a:	bf 91       	pop	r27
    188c:	af 91       	pop	r26
    188e:	9f 91       	pop	r25
    1890:	8f 91       	pop	r24
    1892:	7f 91       	pop	r23
    1894:	6f 91       	pop	r22
    1896:	5f 91       	pop	r21
    1898:	4f 91       	pop	r20
    189a:	3f 91       	pop	r19
    189c:	2f 91       	pop	r18
    189e:	0f 90       	pop	r0
    18a0:	0b be       	out	0x3b, r0	; 59
    18a2:	0f 90       	pop	r0
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	0f 90       	pop	r0
    18a8:	1f 90       	pop	r1
    18aa:	18 95       	reti

000018ac <__vector_5>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT1_vect)      /* External Interrupt 1 */
    18ac:	1f 92       	push	r1
    18ae:	0f 92       	push	r0
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	0f 92       	push	r0
    18b4:	11 24       	eor	r1, r1
    18b6:	0b b6       	in	r0, 0x3b	; 59
    18b8:	0f 92       	push	r0
    18ba:	2f 93       	push	r18
    18bc:	3f 93       	push	r19
    18be:	4f 93       	push	r20
    18c0:	5f 93       	push	r21
    18c2:	6f 93       	push	r22
    18c4:	7f 93       	push	r23
    18c6:	8f 93       	push	r24
    18c8:	9f 93       	push	r25
    18ca:	af 93       	push	r26
    18cc:	bf 93       	push	r27
    18ce:	ef 93       	push	r30
    18d0:	ff 93       	push	r31
    18d2:	e0 91 fd 20 	lds	r30, 0x20FD
    18d6:	f0 91 fe 20 	lds	r31, 0x20FE
    18da:	30 97       	sbiw	r30, 0x00	; 0
    18dc:	29 f0       	breq	.+10     	; 0x18e8 <__vector_5+0x3c>
    18de:	80 91 f3 21 	lds	r24, 0x21F3
    18e2:	90 91 f4 21 	lds	r25, 0x21F4
    18e6:	19 95       	eicall
    18e8:	ff 91       	pop	r31
    18ea:	ef 91       	pop	r30
    18ec:	bf 91       	pop	r27
    18ee:	af 91       	pop	r26
    18f0:	9f 91       	pop	r25
    18f2:	8f 91       	pop	r24
    18f4:	7f 91       	pop	r23
    18f6:	6f 91       	pop	r22
    18f8:	5f 91       	pop	r21
    18fa:	4f 91       	pop	r20
    18fc:	3f 91       	pop	r19
    18fe:	2f 91       	pop	r18
    1900:	0f 90       	pop	r0
    1902:	0b be       	out	0x3b, r0	; 59
    1904:	0f 90       	pop	r0
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	0f 90       	pop	r0
    190a:	1f 90       	pop	r1
    190c:	18 95       	reti

0000190e <__vector_6>:

/* DMA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH0_vect)      /* Channel 0 Interrupt */
    190e:	1f 92       	push	r1
    1910:	0f 92       	push	r0
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	0f 92       	push	r0
    1916:	11 24       	eor	r1, r1
    1918:	0b b6       	in	r0, 0x3b	; 59
    191a:	0f 92       	push	r0
    191c:	2f 93       	push	r18
    191e:	3f 93       	push	r19
    1920:	4f 93       	push	r20
    1922:	5f 93       	push	r21
    1924:	6f 93       	push	r22
    1926:	7f 93       	push	r23
    1928:	8f 93       	push	r24
    192a:	9f 93       	push	r25
    192c:	af 93       	push	r26
    192e:	bf 93       	push	r27
    1930:	ef 93       	push	r30
    1932:	ff 93       	push	r31
    1934:	e0 91 ff 20 	lds	r30, 0x20FF
    1938:	f0 91 00 21 	lds	r31, 0x2100
    193c:	30 97       	sbiw	r30, 0x00	; 0
    193e:	29 f0       	breq	.+10     	; 0x194a <__vector_6+0x3c>
    1940:	80 91 f5 21 	lds	r24, 0x21F5
    1944:	90 91 f6 21 	lds	r25, 0x21F6
    1948:	19 95       	eicall
    194a:	ff 91       	pop	r31
    194c:	ef 91       	pop	r30
    194e:	bf 91       	pop	r27
    1950:	af 91       	pop	r26
    1952:	9f 91       	pop	r25
    1954:	8f 91       	pop	r24
    1956:	7f 91       	pop	r23
    1958:	6f 91       	pop	r22
    195a:	5f 91       	pop	r21
    195c:	4f 91       	pop	r20
    195e:	3f 91       	pop	r19
    1960:	2f 91       	pop	r18
    1962:	0f 90       	pop	r0
    1964:	0b be       	out	0x3b, r0	; 59
    1966:	0f 90       	pop	r0
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	0f 90       	pop	r0
    196c:	1f 90       	pop	r1
    196e:	18 95       	reti

00001970 <__vector_7>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH1_vect)      /* Channel 1 Interrupt */
    1970:	1f 92       	push	r1
    1972:	0f 92       	push	r0
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	0f 92       	push	r0
    1978:	11 24       	eor	r1, r1
    197a:	0b b6       	in	r0, 0x3b	; 59
    197c:	0f 92       	push	r0
    197e:	2f 93       	push	r18
    1980:	3f 93       	push	r19
    1982:	4f 93       	push	r20
    1984:	5f 93       	push	r21
    1986:	6f 93       	push	r22
    1988:	7f 93       	push	r23
    198a:	8f 93       	push	r24
    198c:	9f 93       	push	r25
    198e:	af 93       	push	r26
    1990:	bf 93       	push	r27
    1992:	ef 93       	push	r30
    1994:	ff 93       	push	r31
    1996:	e0 91 01 21 	lds	r30, 0x2101
    199a:	f0 91 02 21 	lds	r31, 0x2102
    199e:	30 97       	sbiw	r30, 0x00	; 0
    19a0:	29 f0       	breq	.+10     	; 0x19ac <__vector_7+0x3c>
    19a2:	80 91 f7 21 	lds	r24, 0x21F7
    19a6:	90 91 f8 21 	lds	r25, 0x21F8
    19aa:	19 95       	eicall
    19ac:	ff 91       	pop	r31
    19ae:	ef 91       	pop	r30
    19b0:	bf 91       	pop	r27
    19b2:	af 91       	pop	r26
    19b4:	9f 91       	pop	r25
    19b6:	8f 91       	pop	r24
    19b8:	7f 91       	pop	r23
    19ba:	6f 91       	pop	r22
    19bc:	5f 91       	pop	r21
    19be:	4f 91       	pop	r20
    19c0:	3f 91       	pop	r19
    19c2:	2f 91       	pop	r18
    19c4:	0f 90       	pop	r0
    19c6:	0b be       	out	0x3b, r0	; 59
    19c8:	0f 90       	pop	r0
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	0f 90       	pop	r0
    19ce:	1f 90       	pop	r1
    19d0:	18 95       	reti

000019d2 <__vector_8>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH2_vect)      /* Channel 2 Interrupt */
    19d2:	1f 92       	push	r1
    19d4:	0f 92       	push	r0
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	0f 92       	push	r0
    19da:	11 24       	eor	r1, r1
    19dc:	0b b6       	in	r0, 0x3b	; 59
    19de:	0f 92       	push	r0
    19e0:	2f 93       	push	r18
    19e2:	3f 93       	push	r19
    19e4:	4f 93       	push	r20
    19e6:	5f 93       	push	r21
    19e8:	6f 93       	push	r22
    19ea:	7f 93       	push	r23
    19ec:	8f 93       	push	r24
    19ee:	9f 93       	push	r25
    19f0:	af 93       	push	r26
    19f2:	bf 93       	push	r27
    19f4:	ef 93       	push	r30
    19f6:	ff 93       	push	r31
    19f8:	e0 91 03 21 	lds	r30, 0x2103
    19fc:	f0 91 04 21 	lds	r31, 0x2104
    1a00:	30 97       	sbiw	r30, 0x00	; 0
    1a02:	29 f0       	breq	.+10     	; 0x1a0e <__vector_8+0x3c>
    1a04:	80 91 f9 21 	lds	r24, 0x21F9
    1a08:	90 91 fa 21 	lds	r25, 0x21FA
    1a0c:	19 95       	eicall
    1a0e:	ff 91       	pop	r31
    1a10:	ef 91       	pop	r30
    1a12:	bf 91       	pop	r27
    1a14:	af 91       	pop	r26
    1a16:	9f 91       	pop	r25
    1a18:	8f 91       	pop	r24
    1a1a:	7f 91       	pop	r23
    1a1c:	6f 91       	pop	r22
    1a1e:	5f 91       	pop	r21
    1a20:	4f 91       	pop	r20
    1a22:	3f 91       	pop	r19
    1a24:	2f 91       	pop	r18
    1a26:	0f 90       	pop	r0
    1a28:	0b be       	out	0x3b, r0	; 59
    1a2a:	0f 90       	pop	r0
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	0f 90       	pop	r0
    1a30:	1f 90       	pop	r1
    1a32:	18 95       	reti

00001a34 <__vector_9>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH3_vect)      /* Channel 3 Interrupt */
    1a34:	1f 92       	push	r1
    1a36:	0f 92       	push	r0
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	0f 92       	push	r0
    1a3c:	11 24       	eor	r1, r1
    1a3e:	0b b6       	in	r0, 0x3b	; 59
    1a40:	0f 92       	push	r0
    1a42:	2f 93       	push	r18
    1a44:	3f 93       	push	r19
    1a46:	4f 93       	push	r20
    1a48:	5f 93       	push	r21
    1a4a:	6f 93       	push	r22
    1a4c:	7f 93       	push	r23
    1a4e:	8f 93       	push	r24
    1a50:	9f 93       	push	r25
    1a52:	af 93       	push	r26
    1a54:	bf 93       	push	r27
    1a56:	ef 93       	push	r30
    1a58:	ff 93       	push	r31
    1a5a:	e0 91 05 21 	lds	r30, 0x2105
    1a5e:	f0 91 06 21 	lds	r31, 0x2106
    1a62:	30 97       	sbiw	r30, 0x00	; 0
    1a64:	29 f0       	breq	.+10     	; 0x1a70 <__vector_9+0x3c>
    1a66:	80 91 fb 21 	lds	r24, 0x21FB
    1a6a:	90 91 fc 21 	lds	r25, 0x21FC
    1a6e:	19 95       	eicall
    1a70:	ff 91       	pop	r31
    1a72:	ef 91       	pop	r30
    1a74:	bf 91       	pop	r27
    1a76:	af 91       	pop	r26
    1a78:	9f 91       	pop	r25
    1a7a:	8f 91       	pop	r24
    1a7c:	7f 91       	pop	r23
    1a7e:	6f 91       	pop	r22
    1a80:	5f 91       	pop	r21
    1a82:	4f 91       	pop	r20
    1a84:	3f 91       	pop	r19
    1a86:	2f 91       	pop	r18
    1a88:	0f 90       	pop	r0
    1a8a:	0b be       	out	0x3b, r0	; 59
    1a8c:	0f 90       	pop	r0
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	0f 90       	pop	r0
    1a92:	1f 90       	pop	r1
    1a94:	18 95       	reti

00001a96 <__vector_10>:

/* RTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_OVF_vect)      /* Overflow Interrupt */
    1a96:	1f 92       	push	r1
    1a98:	0f 92       	push	r0
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	0f 92       	push	r0
    1a9e:	11 24       	eor	r1, r1
    1aa0:	0b b6       	in	r0, 0x3b	; 59
    1aa2:	0f 92       	push	r0
    1aa4:	2f 93       	push	r18
    1aa6:	3f 93       	push	r19
    1aa8:	4f 93       	push	r20
    1aaa:	5f 93       	push	r21
    1aac:	6f 93       	push	r22
    1aae:	7f 93       	push	r23
    1ab0:	8f 93       	push	r24
    1ab2:	9f 93       	push	r25
    1ab4:	af 93       	push	r26
    1ab6:	bf 93       	push	r27
    1ab8:	ef 93       	push	r30
    1aba:	ff 93       	push	r31
    1abc:	e0 91 07 21 	lds	r30, 0x2107
    1ac0:	f0 91 08 21 	lds	r31, 0x2108
    1ac4:	30 97       	sbiw	r30, 0x00	; 0
    1ac6:	29 f0       	breq	.+10     	; 0x1ad2 <__vector_10+0x3c>
    1ac8:	80 91 fd 21 	lds	r24, 0x21FD
    1acc:	90 91 fe 21 	lds	r25, 0x21FE
    1ad0:	19 95       	eicall
    1ad2:	ff 91       	pop	r31
    1ad4:	ef 91       	pop	r30
    1ad6:	bf 91       	pop	r27
    1ad8:	af 91       	pop	r26
    1ada:	9f 91       	pop	r25
    1adc:	8f 91       	pop	r24
    1ade:	7f 91       	pop	r23
    1ae0:	6f 91       	pop	r22
    1ae2:	5f 91       	pop	r21
    1ae4:	4f 91       	pop	r20
    1ae6:	3f 91       	pop	r19
    1ae8:	2f 91       	pop	r18
    1aea:	0f 90       	pop	r0
    1aec:	0b be       	out	0x3b, r0	; 59
    1aee:	0f 90       	pop	r0
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	0f 90       	pop	r0
    1af4:	1f 90       	pop	r1
    1af6:	18 95       	reti

00001af8 <__vector_11>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_COMP_vect)      /* Compare Interrupt */
    1af8:	1f 92       	push	r1
    1afa:	0f 92       	push	r0
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	0f 92       	push	r0
    1b00:	11 24       	eor	r1, r1
    1b02:	0b b6       	in	r0, 0x3b	; 59
    1b04:	0f 92       	push	r0
    1b06:	2f 93       	push	r18
    1b08:	3f 93       	push	r19
    1b0a:	4f 93       	push	r20
    1b0c:	5f 93       	push	r21
    1b0e:	6f 93       	push	r22
    1b10:	7f 93       	push	r23
    1b12:	8f 93       	push	r24
    1b14:	9f 93       	push	r25
    1b16:	af 93       	push	r26
    1b18:	bf 93       	push	r27
    1b1a:	ef 93       	push	r30
    1b1c:	ff 93       	push	r31
    1b1e:	e0 91 09 21 	lds	r30, 0x2109
    1b22:	f0 91 0a 21 	lds	r31, 0x210A
    1b26:	30 97       	sbiw	r30, 0x00	; 0
    1b28:	29 f0       	breq	.+10     	; 0x1b34 <__vector_11+0x3c>
    1b2a:	80 91 ff 21 	lds	r24, 0x21FF
    1b2e:	90 91 00 22 	lds	r25, 0x2200
    1b32:	19 95       	eicall
    1b34:	ff 91       	pop	r31
    1b36:	ef 91       	pop	r30
    1b38:	bf 91       	pop	r27
    1b3a:	af 91       	pop	r26
    1b3c:	9f 91       	pop	r25
    1b3e:	8f 91       	pop	r24
    1b40:	7f 91       	pop	r23
    1b42:	6f 91       	pop	r22
    1b44:	5f 91       	pop	r21
    1b46:	4f 91       	pop	r20
    1b48:	3f 91       	pop	r19
    1b4a:	2f 91       	pop	r18
    1b4c:	0f 90       	pop	r0
    1b4e:	0b be       	out	0x3b, r0	; 59
    1b50:	0f 90       	pop	r0
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	0f 90       	pop	r0
    1b56:	1f 90       	pop	r1
    1b58:	18 95       	reti

00001b5a <__vector_12>:

/* TWIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIS_vect)      /* TWI Slave Interrupt */
    1b5a:	1f 92       	push	r1
    1b5c:	0f 92       	push	r0
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	0f 92       	push	r0
    1b62:	11 24       	eor	r1, r1
    1b64:	0b b6       	in	r0, 0x3b	; 59
    1b66:	0f 92       	push	r0
    1b68:	2f 93       	push	r18
    1b6a:	3f 93       	push	r19
    1b6c:	4f 93       	push	r20
    1b6e:	5f 93       	push	r21
    1b70:	6f 93       	push	r22
    1b72:	7f 93       	push	r23
    1b74:	8f 93       	push	r24
    1b76:	9f 93       	push	r25
    1b78:	af 93       	push	r26
    1b7a:	bf 93       	push	r27
    1b7c:	ef 93       	push	r30
    1b7e:	ff 93       	push	r31
    1b80:	e0 91 0b 21 	lds	r30, 0x210B
    1b84:	f0 91 0c 21 	lds	r31, 0x210C
    1b88:	30 97       	sbiw	r30, 0x00	; 0
    1b8a:	29 f0       	breq	.+10     	; 0x1b96 <__vector_12+0x3c>
    1b8c:	80 91 01 22 	lds	r24, 0x2201
    1b90:	90 91 02 22 	lds	r25, 0x2202
    1b94:	19 95       	eicall
    1b96:	ff 91       	pop	r31
    1b98:	ef 91       	pop	r30
    1b9a:	bf 91       	pop	r27
    1b9c:	af 91       	pop	r26
    1b9e:	9f 91       	pop	r25
    1ba0:	8f 91       	pop	r24
    1ba2:	7f 91       	pop	r23
    1ba4:	6f 91       	pop	r22
    1ba6:	5f 91       	pop	r21
    1ba8:	4f 91       	pop	r20
    1baa:	3f 91       	pop	r19
    1bac:	2f 91       	pop	r18
    1bae:	0f 90       	pop	r0
    1bb0:	0b be       	out	0x3b, r0	; 59
    1bb2:	0f 90       	pop	r0
    1bb4:	0f be       	out	0x3f, r0	; 63
    1bb6:	0f 90       	pop	r0
    1bb8:	1f 90       	pop	r1
    1bba:	18 95       	reti

00001bbc <__vector_13>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIM_vect)      /* TWI Master Interrupt */
    1bbc:	1f 92       	push	r1
    1bbe:	0f 92       	push	r0
    1bc0:	0f b6       	in	r0, 0x3f	; 63
    1bc2:	0f 92       	push	r0
    1bc4:	11 24       	eor	r1, r1
    1bc6:	0b b6       	in	r0, 0x3b	; 59
    1bc8:	0f 92       	push	r0
    1bca:	2f 93       	push	r18
    1bcc:	3f 93       	push	r19
    1bce:	4f 93       	push	r20
    1bd0:	5f 93       	push	r21
    1bd2:	6f 93       	push	r22
    1bd4:	7f 93       	push	r23
    1bd6:	8f 93       	push	r24
    1bd8:	9f 93       	push	r25
    1bda:	af 93       	push	r26
    1bdc:	bf 93       	push	r27
    1bde:	ef 93       	push	r30
    1be0:	ff 93       	push	r31
    1be2:	e0 91 0d 21 	lds	r30, 0x210D
    1be6:	f0 91 0e 21 	lds	r31, 0x210E
    1bea:	30 97       	sbiw	r30, 0x00	; 0
    1bec:	29 f0       	breq	.+10     	; 0x1bf8 <__vector_13+0x3c>
    1bee:	80 91 03 22 	lds	r24, 0x2203
    1bf2:	90 91 04 22 	lds	r25, 0x2204
    1bf6:	19 95       	eicall
    1bf8:	ff 91       	pop	r31
    1bfa:	ef 91       	pop	r30
    1bfc:	bf 91       	pop	r27
    1bfe:	af 91       	pop	r26
    1c00:	9f 91       	pop	r25
    1c02:	8f 91       	pop	r24
    1c04:	7f 91       	pop	r23
    1c06:	6f 91       	pop	r22
    1c08:	5f 91       	pop	r21
    1c0a:	4f 91       	pop	r20
    1c0c:	3f 91       	pop	r19
    1c0e:	2f 91       	pop	r18
    1c10:	0f 90       	pop	r0
    1c12:	0b be       	out	0x3b, r0	; 59
    1c14:	0f 90       	pop	r0
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	0f 90       	pop	r0
    1c1a:	1f 90       	pop	r1
    1c1c:	18 95       	reti

00001c1e <__vector_14>:

/* TCC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_OVF_vect)      /* Overflow Interrupt */
    1c1e:	1f 92       	push	r1
    1c20:	0f 92       	push	r0
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	0f 92       	push	r0
    1c26:	11 24       	eor	r1, r1
    1c28:	0b b6       	in	r0, 0x3b	; 59
    1c2a:	0f 92       	push	r0
    1c2c:	2f 93       	push	r18
    1c2e:	3f 93       	push	r19
    1c30:	4f 93       	push	r20
    1c32:	5f 93       	push	r21
    1c34:	6f 93       	push	r22
    1c36:	7f 93       	push	r23
    1c38:	8f 93       	push	r24
    1c3a:	9f 93       	push	r25
    1c3c:	af 93       	push	r26
    1c3e:	bf 93       	push	r27
    1c40:	ef 93       	push	r30
    1c42:	ff 93       	push	r31
    1c44:	e0 91 0f 21 	lds	r30, 0x210F
    1c48:	f0 91 10 21 	lds	r31, 0x2110
    1c4c:	30 97       	sbiw	r30, 0x00	; 0
    1c4e:	29 f0       	breq	.+10     	; 0x1c5a <__vector_14+0x3c>
    1c50:	80 91 05 22 	lds	r24, 0x2205
    1c54:	90 91 06 22 	lds	r25, 0x2206
    1c58:	19 95       	eicall
    1c5a:	ff 91       	pop	r31
    1c5c:	ef 91       	pop	r30
    1c5e:	bf 91       	pop	r27
    1c60:	af 91       	pop	r26
    1c62:	9f 91       	pop	r25
    1c64:	8f 91       	pop	r24
    1c66:	7f 91       	pop	r23
    1c68:	6f 91       	pop	r22
    1c6a:	5f 91       	pop	r21
    1c6c:	4f 91       	pop	r20
    1c6e:	3f 91       	pop	r19
    1c70:	2f 91       	pop	r18
    1c72:	0f 90       	pop	r0
    1c74:	0b be       	out	0x3b, r0	; 59
    1c76:	0f 90       	pop	r0
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	0f 90       	pop	r0
    1c7c:	1f 90       	pop	r1
    1c7e:	18 95       	reti

00001c80 <__vector_15>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_ERR_vect)      /* Error Interrupt */
    1c80:	1f 92       	push	r1
    1c82:	0f 92       	push	r0
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	0f 92       	push	r0
    1c88:	11 24       	eor	r1, r1
    1c8a:	0b b6       	in	r0, 0x3b	; 59
    1c8c:	0f 92       	push	r0
    1c8e:	2f 93       	push	r18
    1c90:	3f 93       	push	r19
    1c92:	4f 93       	push	r20
    1c94:	5f 93       	push	r21
    1c96:	6f 93       	push	r22
    1c98:	7f 93       	push	r23
    1c9a:	8f 93       	push	r24
    1c9c:	9f 93       	push	r25
    1c9e:	af 93       	push	r26
    1ca0:	bf 93       	push	r27
    1ca2:	ef 93       	push	r30
    1ca4:	ff 93       	push	r31
    1ca6:	e0 91 11 21 	lds	r30, 0x2111
    1caa:	f0 91 12 21 	lds	r31, 0x2112
    1cae:	30 97       	sbiw	r30, 0x00	; 0
    1cb0:	29 f0       	breq	.+10     	; 0x1cbc <__vector_15+0x3c>
    1cb2:	80 91 07 22 	lds	r24, 0x2207
    1cb6:	90 91 08 22 	lds	r25, 0x2208
    1cba:	19 95       	eicall
    1cbc:	ff 91       	pop	r31
    1cbe:	ef 91       	pop	r30
    1cc0:	bf 91       	pop	r27
    1cc2:	af 91       	pop	r26
    1cc4:	9f 91       	pop	r25
    1cc6:	8f 91       	pop	r24
    1cc8:	7f 91       	pop	r23
    1cca:	6f 91       	pop	r22
    1ccc:	5f 91       	pop	r21
    1cce:	4f 91       	pop	r20
    1cd0:	3f 91       	pop	r19
    1cd2:	2f 91       	pop	r18
    1cd4:	0f 90       	pop	r0
    1cd6:	0b be       	out	0x3b, r0	; 59
    1cd8:	0f 90       	pop	r0
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	0f 90       	pop	r0
    1cde:	1f 90       	pop	r1
    1ce0:	18 95       	reti

00001ce2 <__vector_16>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCA_vect)      /* Compare or Capture A Interrupt */
    1ce2:	1f 92       	push	r1
    1ce4:	0f 92       	push	r0
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	0f 92       	push	r0
    1cea:	11 24       	eor	r1, r1
    1cec:	0b b6       	in	r0, 0x3b	; 59
    1cee:	0f 92       	push	r0
    1cf0:	2f 93       	push	r18
    1cf2:	3f 93       	push	r19
    1cf4:	4f 93       	push	r20
    1cf6:	5f 93       	push	r21
    1cf8:	6f 93       	push	r22
    1cfa:	7f 93       	push	r23
    1cfc:	8f 93       	push	r24
    1cfe:	9f 93       	push	r25
    1d00:	af 93       	push	r26
    1d02:	bf 93       	push	r27
    1d04:	ef 93       	push	r30
    1d06:	ff 93       	push	r31
    1d08:	e0 91 13 21 	lds	r30, 0x2113
    1d0c:	f0 91 14 21 	lds	r31, 0x2114
    1d10:	30 97       	sbiw	r30, 0x00	; 0
    1d12:	29 f0       	breq	.+10     	; 0x1d1e <__vector_16+0x3c>
    1d14:	80 91 09 22 	lds	r24, 0x2209
    1d18:	90 91 0a 22 	lds	r25, 0x220A
    1d1c:	19 95       	eicall
    1d1e:	ff 91       	pop	r31
    1d20:	ef 91       	pop	r30
    1d22:	bf 91       	pop	r27
    1d24:	af 91       	pop	r26
    1d26:	9f 91       	pop	r25
    1d28:	8f 91       	pop	r24
    1d2a:	7f 91       	pop	r23
    1d2c:	6f 91       	pop	r22
    1d2e:	5f 91       	pop	r21
    1d30:	4f 91       	pop	r20
    1d32:	3f 91       	pop	r19
    1d34:	2f 91       	pop	r18
    1d36:	0f 90       	pop	r0
    1d38:	0b be       	out	0x3b, r0	; 59
    1d3a:	0f 90       	pop	r0
    1d3c:	0f be       	out	0x3f, r0	; 63
    1d3e:	0f 90       	pop	r0
    1d40:	1f 90       	pop	r1
    1d42:	18 95       	reti

00001d44 <__vector_17>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCB_vect)      /* Compare or Capture B Interrupt */
    1d44:	1f 92       	push	r1
    1d46:	0f 92       	push	r0
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	0f 92       	push	r0
    1d4c:	11 24       	eor	r1, r1
    1d4e:	0b b6       	in	r0, 0x3b	; 59
    1d50:	0f 92       	push	r0
    1d52:	2f 93       	push	r18
    1d54:	3f 93       	push	r19
    1d56:	4f 93       	push	r20
    1d58:	5f 93       	push	r21
    1d5a:	6f 93       	push	r22
    1d5c:	7f 93       	push	r23
    1d5e:	8f 93       	push	r24
    1d60:	9f 93       	push	r25
    1d62:	af 93       	push	r26
    1d64:	bf 93       	push	r27
    1d66:	ef 93       	push	r30
    1d68:	ff 93       	push	r31
    1d6a:	e0 91 15 21 	lds	r30, 0x2115
    1d6e:	f0 91 16 21 	lds	r31, 0x2116
    1d72:	30 97       	sbiw	r30, 0x00	; 0
    1d74:	29 f0       	breq	.+10     	; 0x1d80 <__vector_17+0x3c>
    1d76:	80 91 0b 22 	lds	r24, 0x220B
    1d7a:	90 91 0c 22 	lds	r25, 0x220C
    1d7e:	19 95       	eicall
    1d80:	ff 91       	pop	r31
    1d82:	ef 91       	pop	r30
    1d84:	bf 91       	pop	r27
    1d86:	af 91       	pop	r26
    1d88:	9f 91       	pop	r25
    1d8a:	8f 91       	pop	r24
    1d8c:	7f 91       	pop	r23
    1d8e:	6f 91       	pop	r22
    1d90:	5f 91       	pop	r21
    1d92:	4f 91       	pop	r20
    1d94:	3f 91       	pop	r19
    1d96:	2f 91       	pop	r18
    1d98:	0f 90       	pop	r0
    1d9a:	0b be       	out	0x3b, r0	; 59
    1d9c:	0f 90       	pop	r0
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	0f 90       	pop	r0
    1da2:	1f 90       	pop	r1
    1da4:	18 95       	reti

00001da6 <__vector_18>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCC_vect)      /* Compare or Capture C Interrupt */
    1da6:	1f 92       	push	r1
    1da8:	0f 92       	push	r0
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	0f 92       	push	r0
    1dae:	11 24       	eor	r1, r1
    1db0:	0b b6       	in	r0, 0x3b	; 59
    1db2:	0f 92       	push	r0
    1db4:	2f 93       	push	r18
    1db6:	3f 93       	push	r19
    1db8:	4f 93       	push	r20
    1dba:	5f 93       	push	r21
    1dbc:	6f 93       	push	r22
    1dbe:	7f 93       	push	r23
    1dc0:	8f 93       	push	r24
    1dc2:	9f 93       	push	r25
    1dc4:	af 93       	push	r26
    1dc6:	bf 93       	push	r27
    1dc8:	ef 93       	push	r30
    1dca:	ff 93       	push	r31
    1dcc:	e0 91 17 21 	lds	r30, 0x2117
    1dd0:	f0 91 18 21 	lds	r31, 0x2118
    1dd4:	30 97       	sbiw	r30, 0x00	; 0
    1dd6:	29 f0       	breq	.+10     	; 0x1de2 <__vector_18+0x3c>
    1dd8:	80 91 0d 22 	lds	r24, 0x220D
    1ddc:	90 91 0e 22 	lds	r25, 0x220E
    1de0:	19 95       	eicall
    1de2:	ff 91       	pop	r31
    1de4:	ef 91       	pop	r30
    1de6:	bf 91       	pop	r27
    1de8:	af 91       	pop	r26
    1dea:	9f 91       	pop	r25
    1dec:	8f 91       	pop	r24
    1dee:	7f 91       	pop	r23
    1df0:	6f 91       	pop	r22
    1df2:	5f 91       	pop	r21
    1df4:	4f 91       	pop	r20
    1df6:	3f 91       	pop	r19
    1df8:	2f 91       	pop	r18
    1dfa:	0f 90       	pop	r0
    1dfc:	0b be       	out	0x3b, r0	; 59
    1dfe:	0f 90       	pop	r0
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	0f 90       	pop	r0
    1e04:	1f 90       	pop	r1
    1e06:	18 95       	reti

00001e08 <__vector_19>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCD_vect)      /* Compare or Capture D Interrupt */
    1e08:	1f 92       	push	r1
    1e0a:	0f 92       	push	r0
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	0f 92       	push	r0
    1e10:	11 24       	eor	r1, r1
    1e12:	0b b6       	in	r0, 0x3b	; 59
    1e14:	0f 92       	push	r0
    1e16:	2f 93       	push	r18
    1e18:	3f 93       	push	r19
    1e1a:	4f 93       	push	r20
    1e1c:	5f 93       	push	r21
    1e1e:	6f 93       	push	r22
    1e20:	7f 93       	push	r23
    1e22:	8f 93       	push	r24
    1e24:	9f 93       	push	r25
    1e26:	af 93       	push	r26
    1e28:	bf 93       	push	r27
    1e2a:	ef 93       	push	r30
    1e2c:	ff 93       	push	r31
    1e2e:	e0 91 19 21 	lds	r30, 0x2119
    1e32:	f0 91 1a 21 	lds	r31, 0x211A
    1e36:	30 97       	sbiw	r30, 0x00	; 0
    1e38:	29 f0       	breq	.+10     	; 0x1e44 <__vector_19+0x3c>
    1e3a:	80 91 0f 22 	lds	r24, 0x220F
    1e3e:	90 91 10 22 	lds	r25, 0x2210
    1e42:	19 95       	eicall
    1e44:	ff 91       	pop	r31
    1e46:	ef 91       	pop	r30
    1e48:	bf 91       	pop	r27
    1e4a:	af 91       	pop	r26
    1e4c:	9f 91       	pop	r25
    1e4e:	8f 91       	pop	r24
    1e50:	7f 91       	pop	r23
    1e52:	6f 91       	pop	r22
    1e54:	5f 91       	pop	r21
    1e56:	4f 91       	pop	r20
    1e58:	3f 91       	pop	r19
    1e5a:	2f 91       	pop	r18
    1e5c:	0f 90       	pop	r0
    1e5e:	0b be       	out	0x3b, r0	; 59
    1e60:	0f 90       	pop	r0
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	0f 90       	pop	r0
    1e66:	1f 90       	pop	r1
    1e68:	18 95       	reti

00001e6a <__vector_20>:

/* TCC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_OVF_vect)      /* Overflow Interrupt */
    1e6a:	1f 92       	push	r1
    1e6c:	0f 92       	push	r0
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	0f 92       	push	r0
    1e72:	11 24       	eor	r1, r1
    1e74:	0b b6       	in	r0, 0x3b	; 59
    1e76:	0f 92       	push	r0
    1e78:	2f 93       	push	r18
    1e7a:	3f 93       	push	r19
    1e7c:	4f 93       	push	r20
    1e7e:	5f 93       	push	r21
    1e80:	6f 93       	push	r22
    1e82:	7f 93       	push	r23
    1e84:	8f 93       	push	r24
    1e86:	9f 93       	push	r25
    1e88:	af 93       	push	r26
    1e8a:	bf 93       	push	r27
    1e8c:	ef 93       	push	r30
    1e8e:	ff 93       	push	r31
    1e90:	e0 91 1b 21 	lds	r30, 0x211B
    1e94:	f0 91 1c 21 	lds	r31, 0x211C
    1e98:	30 97       	sbiw	r30, 0x00	; 0
    1e9a:	29 f0       	breq	.+10     	; 0x1ea6 <__vector_20+0x3c>
    1e9c:	80 91 11 22 	lds	r24, 0x2211
    1ea0:	90 91 12 22 	lds	r25, 0x2212
    1ea4:	19 95       	eicall
    1ea6:	ff 91       	pop	r31
    1ea8:	ef 91       	pop	r30
    1eaa:	bf 91       	pop	r27
    1eac:	af 91       	pop	r26
    1eae:	9f 91       	pop	r25
    1eb0:	8f 91       	pop	r24
    1eb2:	7f 91       	pop	r23
    1eb4:	6f 91       	pop	r22
    1eb6:	5f 91       	pop	r21
    1eb8:	4f 91       	pop	r20
    1eba:	3f 91       	pop	r19
    1ebc:	2f 91       	pop	r18
    1ebe:	0f 90       	pop	r0
    1ec0:	0b be       	out	0x3b, r0	; 59
    1ec2:	0f 90       	pop	r0
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	0f 90       	pop	r0
    1ec8:	1f 90       	pop	r1
    1eca:	18 95       	reti

00001ecc <__vector_21>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_ERR_vect)      /* Error Interrupt */
    1ecc:	1f 92       	push	r1
    1ece:	0f 92       	push	r0
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	0f 92       	push	r0
    1ed4:	11 24       	eor	r1, r1
    1ed6:	0b b6       	in	r0, 0x3b	; 59
    1ed8:	0f 92       	push	r0
    1eda:	2f 93       	push	r18
    1edc:	3f 93       	push	r19
    1ede:	4f 93       	push	r20
    1ee0:	5f 93       	push	r21
    1ee2:	6f 93       	push	r22
    1ee4:	7f 93       	push	r23
    1ee6:	8f 93       	push	r24
    1ee8:	9f 93       	push	r25
    1eea:	af 93       	push	r26
    1eec:	bf 93       	push	r27
    1eee:	ef 93       	push	r30
    1ef0:	ff 93       	push	r31
    1ef2:	e0 91 1d 21 	lds	r30, 0x211D
    1ef6:	f0 91 1e 21 	lds	r31, 0x211E
    1efa:	30 97       	sbiw	r30, 0x00	; 0
    1efc:	29 f0       	breq	.+10     	; 0x1f08 <__vector_21+0x3c>
    1efe:	80 91 13 22 	lds	r24, 0x2213
    1f02:	90 91 14 22 	lds	r25, 0x2214
    1f06:	19 95       	eicall
    1f08:	ff 91       	pop	r31
    1f0a:	ef 91       	pop	r30
    1f0c:	bf 91       	pop	r27
    1f0e:	af 91       	pop	r26
    1f10:	9f 91       	pop	r25
    1f12:	8f 91       	pop	r24
    1f14:	7f 91       	pop	r23
    1f16:	6f 91       	pop	r22
    1f18:	5f 91       	pop	r21
    1f1a:	4f 91       	pop	r20
    1f1c:	3f 91       	pop	r19
    1f1e:	2f 91       	pop	r18
    1f20:	0f 90       	pop	r0
    1f22:	0b be       	out	0x3b, r0	; 59
    1f24:	0f 90       	pop	r0
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	0f 90       	pop	r0
    1f2a:	1f 90       	pop	r1
    1f2c:	18 95       	reti

00001f2e <__vector_22>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCA_vect)      /* Compare or Capture A Interrupt */
    1f2e:	1f 92       	push	r1
    1f30:	0f 92       	push	r0
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	0f 92       	push	r0
    1f36:	11 24       	eor	r1, r1
    1f38:	0b b6       	in	r0, 0x3b	; 59
    1f3a:	0f 92       	push	r0
    1f3c:	2f 93       	push	r18
    1f3e:	3f 93       	push	r19
    1f40:	4f 93       	push	r20
    1f42:	5f 93       	push	r21
    1f44:	6f 93       	push	r22
    1f46:	7f 93       	push	r23
    1f48:	8f 93       	push	r24
    1f4a:	9f 93       	push	r25
    1f4c:	af 93       	push	r26
    1f4e:	bf 93       	push	r27
    1f50:	ef 93       	push	r30
    1f52:	ff 93       	push	r31
    1f54:	e0 91 1f 21 	lds	r30, 0x211F
    1f58:	f0 91 20 21 	lds	r31, 0x2120
    1f5c:	30 97       	sbiw	r30, 0x00	; 0
    1f5e:	29 f0       	breq	.+10     	; 0x1f6a <__vector_22+0x3c>
    1f60:	80 91 15 22 	lds	r24, 0x2215
    1f64:	90 91 16 22 	lds	r25, 0x2216
    1f68:	19 95       	eicall
    1f6a:	ff 91       	pop	r31
    1f6c:	ef 91       	pop	r30
    1f6e:	bf 91       	pop	r27
    1f70:	af 91       	pop	r26
    1f72:	9f 91       	pop	r25
    1f74:	8f 91       	pop	r24
    1f76:	7f 91       	pop	r23
    1f78:	6f 91       	pop	r22
    1f7a:	5f 91       	pop	r21
    1f7c:	4f 91       	pop	r20
    1f7e:	3f 91       	pop	r19
    1f80:	2f 91       	pop	r18
    1f82:	0f 90       	pop	r0
    1f84:	0b be       	out	0x3b, r0	; 59
    1f86:	0f 90       	pop	r0
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	0f 90       	pop	r0
    1f8c:	1f 90       	pop	r1
    1f8e:	18 95       	reti

00001f90 <__vector_23>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCB_vect)      /* Compare or Capture B Interrupt */
    1f90:	1f 92       	push	r1
    1f92:	0f 92       	push	r0
    1f94:	0f b6       	in	r0, 0x3f	; 63
    1f96:	0f 92       	push	r0
    1f98:	11 24       	eor	r1, r1
    1f9a:	0b b6       	in	r0, 0x3b	; 59
    1f9c:	0f 92       	push	r0
    1f9e:	2f 93       	push	r18
    1fa0:	3f 93       	push	r19
    1fa2:	4f 93       	push	r20
    1fa4:	5f 93       	push	r21
    1fa6:	6f 93       	push	r22
    1fa8:	7f 93       	push	r23
    1faa:	8f 93       	push	r24
    1fac:	9f 93       	push	r25
    1fae:	af 93       	push	r26
    1fb0:	bf 93       	push	r27
    1fb2:	ef 93       	push	r30
    1fb4:	ff 93       	push	r31
    1fb6:	e0 91 21 21 	lds	r30, 0x2121
    1fba:	f0 91 22 21 	lds	r31, 0x2122
    1fbe:	30 97       	sbiw	r30, 0x00	; 0
    1fc0:	29 f0       	breq	.+10     	; 0x1fcc <__vector_23+0x3c>
    1fc2:	80 91 17 22 	lds	r24, 0x2217
    1fc6:	90 91 18 22 	lds	r25, 0x2218
    1fca:	19 95       	eicall
    1fcc:	ff 91       	pop	r31
    1fce:	ef 91       	pop	r30
    1fd0:	bf 91       	pop	r27
    1fd2:	af 91       	pop	r26
    1fd4:	9f 91       	pop	r25
    1fd6:	8f 91       	pop	r24
    1fd8:	7f 91       	pop	r23
    1fda:	6f 91       	pop	r22
    1fdc:	5f 91       	pop	r21
    1fde:	4f 91       	pop	r20
    1fe0:	3f 91       	pop	r19
    1fe2:	2f 91       	pop	r18
    1fe4:	0f 90       	pop	r0
    1fe6:	0b be       	out	0x3b, r0	; 59
    1fe8:	0f 90       	pop	r0
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	0f 90       	pop	r0
    1fee:	1f 90       	pop	r1
    1ff0:	18 95       	reti

00001ff2 <__vector_24>:

/* SPIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIC_INT_vect)      /* SPI Interrupt */
    1ff2:	1f 92       	push	r1
    1ff4:	0f 92       	push	r0
    1ff6:	0f b6       	in	r0, 0x3f	; 63
    1ff8:	0f 92       	push	r0
    1ffa:	11 24       	eor	r1, r1
    1ffc:	0b b6       	in	r0, 0x3b	; 59
    1ffe:	0f 92       	push	r0
    2000:	2f 93       	push	r18
    2002:	3f 93       	push	r19
    2004:	4f 93       	push	r20
    2006:	5f 93       	push	r21
    2008:	6f 93       	push	r22
    200a:	7f 93       	push	r23
    200c:	8f 93       	push	r24
    200e:	9f 93       	push	r25
    2010:	af 93       	push	r26
    2012:	bf 93       	push	r27
    2014:	ef 93       	push	r30
    2016:	ff 93       	push	r31
    2018:	e0 91 23 21 	lds	r30, 0x2123
    201c:	f0 91 24 21 	lds	r31, 0x2124
    2020:	30 97       	sbiw	r30, 0x00	; 0
    2022:	29 f0       	breq	.+10     	; 0x202e <__vector_24+0x3c>
    2024:	80 91 19 22 	lds	r24, 0x2219
    2028:	90 91 1a 22 	lds	r25, 0x221A
    202c:	19 95       	eicall
    202e:	ff 91       	pop	r31
    2030:	ef 91       	pop	r30
    2032:	bf 91       	pop	r27
    2034:	af 91       	pop	r26
    2036:	9f 91       	pop	r25
    2038:	8f 91       	pop	r24
    203a:	7f 91       	pop	r23
    203c:	6f 91       	pop	r22
    203e:	5f 91       	pop	r21
    2040:	4f 91       	pop	r20
    2042:	3f 91       	pop	r19
    2044:	2f 91       	pop	r18
    2046:	0f 90       	pop	r0
    2048:	0b be       	out	0x3b, r0	; 59
    204a:	0f 90       	pop	r0
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	0f 90       	pop	r0
    2050:	1f 90       	pop	r1
    2052:	18 95       	reti

00002054 <__vector_25>:

/* USARTC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_RXC_vect)      /* Reception Complete Interrupt */
    2054:	1f 92       	push	r1
    2056:	0f 92       	push	r0
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	0f 92       	push	r0
    205c:	11 24       	eor	r1, r1
    205e:	0b b6       	in	r0, 0x3b	; 59
    2060:	0f 92       	push	r0
    2062:	2f 93       	push	r18
    2064:	3f 93       	push	r19
    2066:	4f 93       	push	r20
    2068:	5f 93       	push	r21
    206a:	6f 93       	push	r22
    206c:	7f 93       	push	r23
    206e:	8f 93       	push	r24
    2070:	9f 93       	push	r25
    2072:	af 93       	push	r26
    2074:	bf 93       	push	r27
    2076:	ef 93       	push	r30
    2078:	ff 93       	push	r31
    207a:	e0 91 25 21 	lds	r30, 0x2125
    207e:	f0 91 26 21 	lds	r31, 0x2126
    2082:	30 97       	sbiw	r30, 0x00	; 0
    2084:	29 f0       	breq	.+10     	; 0x2090 <__vector_25+0x3c>
    2086:	80 91 1b 22 	lds	r24, 0x221B
    208a:	90 91 1c 22 	lds	r25, 0x221C
    208e:	19 95       	eicall
    2090:	ff 91       	pop	r31
    2092:	ef 91       	pop	r30
    2094:	bf 91       	pop	r27
    2096:	af 91       	pop	r26
    2098:	9f 91       	pop	r25
    209a:	8f 91       	pop	r24
    209c:	7f 91       	pop	r23
    209e:	6f 91       	pop	r22
    20a0:	5f 91       	pop	r21
    20a2:	4f 91       	pop	r20
    20a4:	3f 91       	pop	r19
    20a6:	2f 91       	pop	r18
    20a8:	0f 90       	pop	r0
    20aa:	0b be       	out	0x3b, r0	; 59
    20ac:	0f 90       	pop	r0
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	0f 90       	pop	r0
    20b2:	1f 90       	pop	r1
    20b4:	18 95       	reti

000020b6 <__vector_26>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_DRE_vect)      /* Data Register Empty Interrupt */
    20b6:	1f 92       	push	r1
    20b8:	0f 92       	push	r0
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	0f 92       	push	r0
    20be:	11 24       	eor	r1, r1
    20c0:	0b b6       	in	r0, 0x3b	; 59
    20c2:	0f 92       	push	r0
    20c4:	2f 93       	push	r18
    20c6:	3f 93       	push	r19
    20c8:	4f 93       	push	r20
    20ca:	5f 93       	push	r21
    20cc:	6f 93       	push	r22
    20ce:	7f 93       	push	r23
    20d0:	8f 93       	push	r24
    20d2:	9f 93       	push	r25
    20d4:	af 93       	push	r26
    20d6:	bf 93       	push	r27
    20d8:	ef 93       	push	r30
    20da:	ff 93       	push	r31
    20dc:	e0 91 27 21 	lds	r30, 0x2127
    20e0:	f0 91 28 21 	lds	r31, 0x2128
    20e4:	30 97       	sbiw	r30, 0x00	; 0
    20e6:	29 f0       	breq	.+10     	; 0x20f2 <__vector_26+0x3c>
    20e8:	80 91 1d 22 	lds	r24, 0x221D
    20ec:	90 91 1e 22 	lds	r25, 0x221E
    20f0:	19 95       	eicall
    20f2:	ff 91       	pop	r31
    20f4:	ef 91       	pop	r30
    20f6:	bf 91       	pop	r27
    20f8:	af 91       	pop	r26
    20fa:	9f 91       	pop	r25
    20fc:	8f 91       	pop	r24
    20fe:	7f 91       	pop	r23
    2100:	6f 91       	pop	r22
    2102:	5f 91       	pop	r21
    2104:	4f 91       	pop	r20
    2106:	3f 91       	pop	r19
    2108:	2f 91       	pop	r18
    210a:	0f 90       	pop	r0
    210c:	0b be       	out	0x3b, r0	; 59
    210e:	0f 90       	pop	r0
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	0f 90       	pop	r0
    2114:	1f 90       	pop	r1
    2116:	18 95       	reti

00002118 <__vector_27>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_TXC_vect)      /* Transmission Complete Interrupt */
    2118:	1f 92       	push	r1
    211a:	0f 92       	push	r0
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	0f 92       	push	r0
    2120:	11 24       	eor	r1, r1
    2122:	0b b6       	in	r0, 0x3b	; 59
    2124:	0f 92       	push	r0
    2126:	2f 93       	push	r18
    2128:	3f 93       	push	r19
    212a:	4f 93       	push	r20
    212c:	5f 93       	push	r21
    212e:	6f 93       	push	r22
    2130:	7f 93       	push	r23
    2132:	8f 93       	push	r24
    2134:	9f 93       	push	r25
    2136:	af 93       	push	r26
    2138:	bf 93       	push	r27
    213a:	ef 93       	push	r30
    213c:	ff 93       	push	r31
    213e:	e0 91 29 21 	lds	r30, 0x2129
    2142:	f0 91 2a 21 	lds	r31, 0x212A
    2146:	30 97       	sbiw	r30, 0x00	; 0
    2148:	29 f0       	breq	.+10     	; 0x2154 <__vector_27+0x3c>
    214a:	80 91 1f 22 	lds	r24, 0x221F
    214e:	90 91 20 22 	lds	r25, 0x2220
    2152:	19 95       	eicall
    2154:	ff 91       	pop	r31
    2156:	ef 91       	pop	r30
    2158:	bf 91       	pop	r27
    215a:	af 91       	pop	r26
    215c:	9f 91       	pop	r25
    215e:	8f 91       	pop	r24
    2160:	7f 91       	pop	r23
    2162:	6f 91       	pop	r22
    2164:	5f 91       	pop	r21
    2166:	4f 91       	pop	r20
    2168:	3f 91       	pop	r19
    216a:	2f 91       	pop	r18
    216c:	0f 90       	pop	r0
    216e:	0b be       	out	0x3b, r0	; 59
    2170:	0f 90       	pop	r0
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	0f 90       	pop	r0
    2176:	1f 90       	pop	r1
    2178:	18 95       	reti

0000217a <__vector_28>:

/* USARTC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_RXC_vect)      /* Reception Complete Interrupt */
    217a:	1f 92       	push	r1
    217c:	0f 92       	push	r0
    217e:	0f b6       	in	r0, 0x3f	; 63
    2180:	0f 92       	push	r0
    2182:	11 24       	eor	r1, r1
    2184:	0b b6       	in	r0, 0x3b	; 59
    2186:	0f 92       	push	r0
    2188:	2f 93       	push	r18
    218a:	3f 93       	push	r19
    218c:	4f 93       	push	r20
    218e:	5f 93       	push	r21
    2190:	6f 93       	push	r22
    2192:	7f 93       	push	r23
    2194:	8f 93       	push	r24
    2196:	9f 93       	push	r25
    2198:	af 93       	push	r26
    219a:	bf 93       	push	r27
    219c:	ef 93       	push	r30
    219e:	ff 93       	push	r31
    21a0:	e0 91 2b 21 	lds	r30, 0x212B
    21a4:	f0 91 2c 21 	lds	r31, 0x212C
    21a8:	30 97       	sbiw	r30, 0x00	; 0
    21aa:	29 f0       	breq	.+10     	; 0x21b6 <__vector_28+0x3c>
    21ac:	80 91 21 22 	lds	r24, 0x2221
    21b0:	90 91 22 22 	lds	r25, 0x2222
    21b4:	19 95       	eicall
    21b6:	ff 91       	pop	r31
    21b8:	ef 91       	pop	r30
    21ba:	bf 91       	pop	r27
    21bc:	af 91       	pop	r26
    21be:	9f 91       	pop	r25
    21c0:	8f 91       	pop	r24
    21c2:	7f 91       	pop	r23
    21c4:	6f 91       	pop	r22
    21c6:	5f 91       	pop	r21
    21c8:	4f 91       	pop	r20
    21ca:	3f 91       	pop	r19
    21cc:	2f 91       	pop	r18
    21ce:	0f 90       	pop	r0
    21d0:	0b be       	out	0x3b, r0	; 59
    21d2:	0f 90       	pop	r0
    21d4:	0f be       	out	0x3f, r0	; 63
    21d6:	0f 90       	pop	r0
    21d8:	1f 90       	pop	r1
    21da:	18 95       	reti

000021dc <__vector_29>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_DRE_vect)      /* Data Register Empty Interrupt */
    21dc:	1f 92       	push	r1
    21de:	0f 92       	push	r0
    21e0:	0f b6       	in	r0, 0x3f	; 63
    21e2:	0f 92       	push	r0
    21e4:	11 24       	eor	r1, r1
    21e6:	0b b6       	in	r0, 0x3b	; 59
    21e8:	0f 92       	push	r0
    21ea:	2f 93       	push	r18
    21ec:	3f 93       	push	r19
    21ee:	4f 93       	push	r20
    21f0:	5f 93       	push	r21
    21f2:	6f 93       	push	r22
    21f4:	7f 93       	push	r23
    21f6:	8f 93       	push	r24
    21f8:	9f 93       	push	r25
    21fa:	af 93       	push	r26
    21fc:	bf 93       	push	r27
    21fe:	ef 93       	push	r30
    2200:	ff 93       	push	r31
    2202:	e0 91 2d 21 	lds	r30, 0x212D
    2206:	f0 91 2e 21 	lds	r31, 0x212E
    220a:	30 97       	sbiw	r30, 0x00	; 0
    220c:	29 f0       	breq	.+10     	; 0x2218 <__vector_29+0x3c>
    220e:	80 91 23 22 	lds	r24, 0x2223
    2212:	90 91 24 22 	lds	r25, 0x2224
    2216:	19 95       	eicall
    2218:	ff 91       	pop	r31
    221a:	ef 91       	pop	r30
    221c:	bf 91       	pop	r27
    221e:	af 91       	pop	r26
    2220:	9f 91       	pop	r25
    2222:	8f 91       	pop	r24
    2224:	7f 91       	pop	r23
    2226:	6f 91       	pop	r22
    2228:	5f 91       	pop	r21
    222a:	4f 91       	pop	r20
    222c:	3f 91       	pop	r19
    222e:	2f 91       	pop	r18
    2230:	0f 90       	pop	r0
    2232:	0b be       	out	0x3b, r0	; 59
    2234:	0f 90       	pop	r0
    2236:	0f be       	out	0x3f, r0	; 63
    2238:	0f 90       	pop	r0
    223a:	1f 90       	pop	r1
    223c:	18 95       	reti

0000223e <__vector_30>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_TXC_vect)      /* Transmission Complete Interrupt */
    223e:	1f 92       	push	r1
    2240:	0f 92       	push	r0
    2242:	0f b6       	in	r0, 0x3f	; 63
    2244:	0f 92       	push	r0
    2246:	11 24       	eor	r1, r1
    2248:	0b b6       	in	r0, 0x3b	; 59
    224a:	0f 92       	push	r0
    224c:	2f 93       	push	r18
    224e:	3f 93       	push	r19
    2250:	4f 93       	push	r20
    2252:	5f 93       	push	r21
    2254:	6f 93       	push	r22
    2256:	7f 93       	push	r23
    2258:	8f 93       	push	r24
    225a:	9f 93       	push	r25
    225c:	af 93       	push	r26
    225e:	bf 93       	push	r27
    2260:	ef 93       	push	r30
    2262:	ff 93       	push	r31
    2264:	e0 91 2f 21 	lds	r30, 0x212F
    2268:	f0 91 30 21 	lds	r31, 0x2130
    226c:	30 97       	sbiw	r30, 0x00	; 0
    226e:	29 f0       	breq	.+10     	; 0x227a <__vector_30+0x3c>
    2270:	80 91 25 22 	lds	r24, 0x2225
    2274:	90 91 26 22 	lds	r25, 0x2226
    2278:	19 95       	eicall
    227a:	ff 91       	pop	r31
    227c:	ef 91       	pop	r30
    227e:	bf 91       	pop	r27
    2280:	af 91       	pop	r26
    2282:	9f 91       	pop	r25
    2284:	8f 91       	pop	r24
    2286:	7f 91       	pop	r23
    2288:	6f 91       	pop	r22
    228a:	5f 91       	pop	r21
    228c:	4f 91       	pop	r20
    228e:	3f 91       	pop	r19
    2290:	2f 91       	pop	r18
    2292:	0f 90       	pop	r0
    2294:	0b be       	out	0x3b, r0	; 59
    2296:	0f 90       	pop	r0
    2298:	0f be       	out	0x3f, r0	; 63
    229a:	0f 90       	pop	r0
    229c:	1f 90       	pop	r1
    229e:	18 95       	reti

000022a0 <__vector_31>:

/* AES interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(AES_INT_vect)      /* AES Interrupt */
    22a0:	1f 92       	push	r1
    22a2:	0f 92       	push	r0
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	0f 92       	push	r0
    22a8:	11 24       	eor	r1, r1
    22aa:	0b b6       	in	r0, 0x3b	; 59
    22ac:	0f 92       	push	r0
    22ae:	2f 93       	push	r18
    22b0:	3f 93       	push	r19
    22b2:	4f 93       	push	r20
    22b4:	5f 93       	push	r21
    22b6:	6f 93       	push	r22
    22b8:	7f 93       	push	r23
    22ba:	8f 93       	push	r24
    22bc:	9f 93       	push	r25
    22be:	af 93       	push	r26
    22c0:	bf 93       	push	r27
    22c2:	ef 93       	push	r30
    22c4:	ff 93       	push	r31
    22c6:	e0 91 31 21 	lds	r30, 0x2131
    22ca:	f0 91 32 21 	lds	r31, 0x2132
    22ce:	30 97       	sbiw	r30, 0x00	; 0
    22d0:	29 f0       	breq	.+10     	; 0x22dc <__vector_31+0x3c>
    22d2:	80 91 27 22 	lds	r24, 0x2227
    22d6:	90 91 28 22 	lds	r25, 0x2228
    22da:	19 95       	eicall
    22dc:	ff 91       	pop	r31
    22de:	ef 91       	pop	r30
    22e0:	bf 91       	pop	r27
    22e2:	af 91       	pop	r26
    22e4:	9f 91       	pop	r25
    22e6:	8f 91       	pop	r24
    22e8:	7f 91       	pop	r23
    22ea:	6f 91       	pop	r22
    22ec:	5f 91       	pop	r21
    22ee:	4f 91       	pop	r20
    22f0:	3f 91       	pop	r19
    22f2:	2f 91       	pop	r18
    22f4:	0f 90       	pop	r0
    22f6:	0b be       	out	0x3b, r0	; 59
    22f8:	0f 90       	pop	r0
    22fa:	0f be       	out	0x3f, r0	; 63
    22fc:	0f 90       	pop	r0
    22fe:	1f 90       	pop	r1
    2300:	18 95       	reti

00002302 <__vector_32>:

/* NVM interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_EE_vect)      /* EE Interrupt */
    2302:	1f 92       	push	r1
    2304:	0f 92       	push	r0
    2306:	0f b6       	in	r0, 0x3f	; 63
    2308:	0f 92       	push	r0
    230a:	11 24       	eor	r1, r1
    230c:	0b b6       	in	r0, 0x3b	; 59
    230e:	0f 92       	push	r0
    2310:	2f 93       	push	r18
    2312:	3f 93       	push	r19
    2314:	4f 93       	push	r20
    2316:	5f 93       	push	r21
    2318:	6f 93       	push	r22
    231a:	7f 93       	push	r23
    231c:	8f 93       	push	r24
    231e:	9f 93       	push	r25
    2320:	af 93       	push	r26
    2322:	bf 93       	push	r27
    2324:	ef 93       	push	r30
    2326:	ff 93       	push	r31
    2328:	e0 91 33 21 	lds	r30, 0x2133
    232c:	f0 91 34 21 	lds	r31, 0x2134
    2330:	30 97       	sbiw	r30, 0x00	; 0
    2332:	29 f0       	breq	.+10     	; 0x233e <__vector_32+0x3c>
    2334:	80 91 29 22 	lds	r24, 0x2229
    2338:	90 91 2a 22 	lds	r25, 0x222A
    233c:	19 95       	eicall
    233e:	ff 91       	pop	r31
    2340:	ef 91       	pop	r30
    2342:	bf 91       	pop	r27
    2344:	af 91       	pop	r26
    2346:	9f 91       	pop	r25
    2348:	8f 91       	pop	r24
    234a:	7f 91       	pop	r23
    234c:	6f 91       	pop	r22
    234e:	5f 91       	pop	r21
    2350:	4f 91       	pop	r20
    2352:	3f 91       	pop	r19
    2354:	2f 91       	pop	r18
    2356:	0f 90       	pop	r0
    2358:	0b be       	out	0x3b, r0	; 59
    235a:	0f 90       	pop	r0
    235c:	0f be       	out	0x3f, r0	; 63
    235e:	0f 90       	pop	r0
    2360:	1f 90       	pop	r1
    2362:	18 95       	reti

00002364 <__vector_33>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_SPM_vect)      /* SPM Interrupt */
    2364:	1f 92       	push	r1
    2366:	0f 92       	push	r0
    2368:	0f b6       	in	r0, 0x3f	; 63
    236a:	0f 92       	push	r0
    236c:	11 24       	eor	r1, r1
    236e:	0b b6       	in	r0, 0x3b	; 59
    2370:	0f 92       	push	r0
    2372:	2f 93       	push	r18
    2374:	3f 93       	push	r19
    2376:	4f 93       	push	r20
    2378:	5f 93       	push	r21
    237a:	6f 93       	push	r22
    237c:	7f 93       	push	r23
    237e:	8f 93       	push	r24
    2380:	9f 93       	push	r25
    2382:	af 93       	push	r26
    2384:	bf 93       	push	r27
    2386:	ef 93       	push	r30
    2388:	ff 93       	push	r31
    238a:	e0 91 35 21 	lds	r30, 0x2135
    238e:	f0 91 36 21 	lds	r31, 0x2136
    2392:	30 97       	sbiw	r30, 0x00	; 0
    2394:	29 f0       	breq	.+10     	; 0x23a0 <__vector_33+0x3c>
    2396:	80 91 2b 22 	lds	r24, 0x222B
    239a:	90 91 2c 22 	lds	r25, 0x222C
    239e:	19 95       	eicall
    23a0:	ff 91       	pop	r31
    23a2:	ef 91       	pop	r30
    23a4:	bf 91       	pop	r27
    23a6:	af 91       	pop	r26
    23a8:	9f 91       	pop	r25
    23aa:	8f 91       	pop	r24
    23ac:	7f 91       	pop	r23
    23ae:	6f 91       	pop	r22
    23b0:	5f 91       	pop	r21
    23b2:	4f 91       	pop	r20
    23b4:	3f 91       	pop	r19
    23b6:	2f 91       	pop	r18
    23b8:	0f 90       	pop	r0
    23ba:	0b be       	out	0x3b, r0	; 59
    23bc:	0f 90       	pop	r0
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	0f 90       	pop	r0
    23c2:	1f 90       	pop	r1
    23c4:	18 95       	reti

000023c6 <__vector_34>:

/* PORTB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT0_vect)      /* External Interrupt 0 */
    23c6:	1f 92       	push	r1
    23c8:	0f 92       	push	r0
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	0f 92       	push	r0
    23ce:	11 24       	eor	r1, r1
    23d0:	0b b6       	in	r0, 0x3b	; 59
    23d2:	0f 92       	push	r0
    23d4:	2f 93       	push	r18
    23d6:	3f 93       	push	r19
    23d8:	4f 93       	push	r20
    23da:	5f 93       	push	r21
    23dc:	6f 93       	push	r22
    23de:	7f 93       	push	r23
    23e0:	8f 93       	push	r24
    23e2:	9f 93       	push	r25
    23e4:	af 93       	push	r26
    23e6:	bf 93       	push	r27
    23e8:	ef 93       	push	r30
    23ea:	ff 93       	push	r31
    23ec:	e0 91 37 21 	lds	r30, 0x2137
    23f0:	f0 91 38 21 	lds	r31, 0x2138
    23f4:	30 97       	sbiw	r30, 0x00	; 0
    23f6:	29 f0       	breq	.+10     	; 0x2402 <__vector_34+0x3c>
    23f8:	80 91 2d 22 	lds	r24, 0x222D
    23fc:	90 91 2e 22 	lds	r25, 0x222E
    2400:	19 95       	eicall
    2402:	ff 91       	pop	r31
    2404:	ef 91       	pop	r30
    2406:	bf 91       	pop	r27
    2408:	af 91       	pop	r26
    240a:	9f 91       	pop	r25
    240c:	8f 91       	pop	r24
    240e:	7f 91       	pop	r23
    2410:	6f 91       	pop	r22
    2412:	5f 91       	pop	r21
    2414:	4f 91       	pop	r20
    2416:	3f 91       	pop	r19
    2418:	2f 91       	pop	r18
    241a:	0f 90       	pop	r0
    241c:	0b be       	out	0x3b, r0	; 59
    241e:	0f 90       	pop	r0
    2420:	0f be       	out	0x3f, r0	; 63
    2422:	0f 90       	pop	r0
    2424:	1f 90       	pop	r1
    2426:	18 95       	reti

00002428 <__vector_35>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT1_vect)      /* External Interrupt 1 */
    2428:	1f 92       	push	r1
    242a:	0f 92       	push	r0
    242c:	0f b6       	in	r0, 0x3f	; 63
    242e:	0f 92       	push	r0
    2430:	11 24       	eor	r1, r1
    2432:	0b b6       	in	r0, 0x3b	; 59
    2434:	0f 92       	push	r0
    2436:	2f 93       	push	r18
    2438:	3f 93       	push	r19
    243a:	4f 93       	push	r20
    243c:	5f 93       	push	r21
    243e:	6f 93       	push	r22
    2440:	7f 93       	push	r23
    2442:	8f 93       	push	r24
    2444:	9f 93       	push	r25
    2446:	af 93       	push	r26
    2448:	bf 93       	push	r27
    244a:	ef 93       	push	r30
    244c:	ff 93       	push	r31
    244e:	e0 91 39 21 	lds	r30, 0x2139
    2452:	f0 91 3a 21 	lds	r31, 0x213A
    2456:	30 97       	sbiw	r30, 0x00	; 0
    2458:	29 f0       	breq	.+10     	; 0x2464 <__vector_35+0x3c>
    245a:	80 91 2f 22 	lds	r24, 0x222F
    245e:	90 91 30 22 	lds	r25, 0x2230
    2462:	19 95       	eicall
    2464:	ff 91       	pop	r31
    2466:	ef 91       	pop	r30
    2468:	bf 91       	pop	r27
    246a:	af 91       	pop	r26
    246c:	9f 91       	pop	r25
    246e:	8f 91       	pop	r24
    2470:	7f 91       	pop	r23
    2472:	6f 91       	pop	r22
    2474:	5f 91       	pop	r21
    2476:	4f 91       	pop	r20
    2478:	3f 91       	pop	r19
    247a:	2f 91       	pop	r18
    247c:	0f 90       	pop	r0
    247e:	0b be       	out	0x3b, r0	; 59
    2480:	0f 90       	pop	r0
    2482:	0f be       	out	0x3f, r0	; 63
    2484:	0f 90       	pop	r0
    2486:	1f 90       	pop	r1
    2488:	18 95       	reti

0000248a <__vector_36>:

/* ACB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC0_vect)      /* AC0 Interrupt */
    248a:	1f 92       	push	r1
    248c:	0f 92       	push	r0
    248e:	0f b6       	in	r0, 0x3f	; 63
    2490:	0f 92       	push	r0
    2492:	11 24       	eor	r1, r1
    2494:	0b b6       	in	r0, 0x3b	; 59
    2496:	0f 92       	push	r0
    2498:	2f 93       	push	r18
    249a:	3f 93       	push	r19
    249c:	4f 93       	push	r20
    249e:	5f 93       	push	r21
    24a0:	6f 93       	push	r22
    24a2:	7f 93       	push	r23
    24a4:	8f 93       	push	r24
    24a6:	9f 93       	push	r25
    24a8:	af 93       	push	r26
    24aa:	bf 93       	push	r27
    24ac:	ef 93       	push	r30
    24ae:	ff 93       	push	r31
    24b0:	e0 91 3b 21 	lds	r30, 0x213B
    24b4:	f0 91 3c 21 	lds	r31, 0x213C
    24b8:	30 97       	sbiw	r30, 0x00	; 0
    24ba:	29 f0       	breq	.+10     	; 0x24c6 <__vector_36+0x3c>
    24bc:	80 91 31 22 	lds	r24, 0x2231
    24c0:	90 91 32 22 	lds	r25, 0x2232
    24c4:	19 95       	eicall
    24c6:	ff 91       	pop	r31
    24c8:	ef 91       	pop	r30
    24ca:	bf 91       	pop	r27
    24cc:	af 91       	pop	r26
    24ce:	9f 91       	pop	r25
    24d0:	8f 91       	pop	r24
    24d2:	7f 91       	pop	r23
    24d4:	6f 91       	pop	r22
    24d6:	5f 91       	pop	r21
    24d8:	4f 91       	pop	r20
    24da:	3f 91       	pop	r19
    24dc:	2f 91       	pop	r18
    24de:	0f 90       	pop	r0
    24e0:	0b be       	out	0x3b, r0	; 59
    24e2:	0f 90       	pop	r0
    24e4:	0f be       	out	0x3f, r0	; 63
    24e6:	0f 90       	pop	r0
    24e8:	1f 90       	pop	r1
    24ea:	18 95       	reti

000024ec <__vector_37>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC1_vect)      /* AC1 Interrupt */
    24ec:	1f 92       	push	r1
    24ee:	0f 92       	push	r0
    24f0:	0f b6       	in	r0, 0x3f	; 63
    24f2:	0f 92       	push	r0
    24f4:	11 24       	eor	r1, r1
    24f6:	0b b6       	in	r0, 0x3b	; 59
    24f8:	0f 92       	push	r0
    24fa:	2f 93       	push	r18
    24fc:	3f 93       	push	r19
    24fe:	4f 93       	push	r20
    2500:	5f 93       	push	r21
    2502:	6f 93       	push	r22
    2504:	7f 93       	push	r23
    2506:	8f 93       	push	r24
    2508:	9f 93       	push	r25
    250a:	af 93       	push	r26
    250c:	bf 93       	push	r27
    250e:	ef 93       	push	r30
    2510:	ff 93       	push	r31
    2512:	e0 91 3d 21 	lds	r30, 0x213D
    2516:	f0 91 3e 21 	lds	r31, 0x213E
    251a:	30 97       	sbiw	r30, 0x00	; 0
    251c:	29 f0       	breq	.+10     	; 0x2528 <__vector_37+0x3c>
    251e:	80 91 33 22 	lds	r24, 0x2233
    2522:	90 91 34 22 	lds	r25, 0x2234
    2526:	19 95       	eicall
    2528:	ff 91       	pop	r31
    252a:	ef 91       	pop	r30
    252c:	bf 91       	pop	r27
    252e:	af 91       	pop	r26
    2530:	9f 91       	pop	r25
    2532:	8f 91       	pop	r24
    2534:	7f 91       	pop	r23
    2536:	6f 91       	pop	r22
    2538:	5f 91       	pop	r21
    253a:	4f 91       	pop	r20
    253c:	3f 91       	pop	r19
    253e:	2f 91       	pop	r18
    2540:	0f 90       	pop	r0
    2542:	0b be       	out	0x3b, r0	; 59
    2544:	0f 90       	pop	r0
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	0f 90       	pop	r0
    254a:	1f 90       	pop	r1
    254c:	18 95       	reti

0000254e <__vector_38>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_ACW_vect)      /* ACW Window Mode Interrupt */
    254e:	1f 92       	push	r1
    2550:	0f 92       	push	r0
    2552:	0f b6       	in	r0, 0x3f	; 63
    2554:	0f 92       	push	r0
    2556:	11 24       	eor	r1, r1
    2558:	0b b6       	in	r0, 0x3b	; 59
    255a:	0f 92       	push	r0
    255c:	2f 93       	push	r18
    255e:	3f 93       	push	r19
    2560:	4f 93       	push	r20
    2562:	5f 93       	push	r21
    2564:	6f 93       	push	r22
    2566:	7f 93       	push	r23
    2568:	8f 93       	push	r24
    256a:	9f 93       	push	r25
    256c:	af 93       	push	r26
    256e:	bf 93       	push	r27
    2570:	ef 93       	push	r30
    2572:	ff 93       	push	r31
    2574:	e0 91 3f 21 	lds	r30, 0x213F
    2578:	f0 91 40 21 	lds	r31, 0x2140
    257c:	30 97       	sbiw	r30, 0x00	; 0
    257e:	29 f0       	breq	.+10     	; 0x258a <__vector_38+0x3c>
    2580:	80 91 35 22 	lds	r24, 0x2235
    2584:	90 91 36 22 	lds	r25, 0x2236
    2588:	19 95       	eicall
    258a:	ff 91       	pop	r31
    258c:	ef 91       	pop	r30
    258e:	bf 91       	pop	r27
    2590:	af 91       	pop	r26
    2592:	9f 91       	pop	r25
    2594:	8f 91       	pop	r24
    2596:	7f 91       	pop	r23
    2598:	6f 91       	pop	r22
    259a:	5f 91       	pop	r21
    259c:	4f 91       	pop	r20
    259e:	3f 91       	pop	r19
    25a0:	2f 91       	pop	r18
    25a2:	0f 90       	pop	r0
    25a4:	0b be       	out	0x3b, r0	; 59
    25a6:	0f 90       	pop	r0
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	0f 90       	pop	r0
    25ac:	1f 90       	pop	r1
    25ae:	18 95       	reti

000025b0 <__vector_39>:

/* ADCB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH0_vect)      /* Interrupt 0 */
    25b0:	1f 92       	push	r1
    25b2:	0f 92       	push	r0
    25b4:	0f b6       	in	r0, 0x3f	; 63
    25b6:	0f 92       	push	r0
    25b8:	11 24       	eor	r1, r1
    25ba:	0b b6       	in	r0, 0x3b	; 59
    25bc:	0f 92       	push	r0
    25be:	2f 93       	push	r18
    25c0:	3f 93       	push	r19
    25c2:	4f 93       	push	r20
    25c4:	5f 93       	push	r21
    25c6:	6f 93       	push	r22
    25c8:	7f 93       	push	r23
    25ca:	8f 93       	push	r24
    25cc:	9f 93       	push	r25
    25ce:	af 93       	push	r26
    25d0:	bf 93       	push	r27
    25d2:	ef 93       	push	r30
    25d4:	ff 93       	push	r31
    25d6:	e0 91 41 21 	lds	r30, 0x2141
    25da:	f0 91 42 21 	lds	r31, 0x2142
    25de:	30 97       	sbiw	r30, 0x00	; 0
    25e0:	29 f0       	breq	.+10     	; 0x25ec <__vector_39+0x3c>
    25e2:	80 91 37 22 	lds	r24, 0x2237
    25e6:	90 91 38 22 	lds	r25, 0x2238
    25ea:	19 95       	eicall
    25ec:	ff 91       	pop	r31
    25ee:	ef 91       	pop	r30
    25f0:	bf 91       	pop	r27
    25f2:	af 91       	pop	r26
    25f4:	9f 91       	pop	r25
    25f6:	8f 91       	pop	r24
    25f8:	7f 91       	pop	r23
    25fa:	6f 91       	pop	r22
    25fc:	5f 91       	pop	r21
    25fe:	4f 91       	pop	r20
    2600:	3f 91       	pop	r19
    2602:	2f 91       	pop	r18
    2604:	0f 90       	pop	r0
    2606:	0b be       	out	0x3b, r0	; 59
    2608:	0f 90       	pop	r0
    260a:	0f be       	out	0x3f, r0	; 63
    260c:	0f 90       	pop	r0
    260e:	1f 90       	pop	r1
    2610:	18 95       	reti

00002612 <__vector_40>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH1_vect)      /* Interrupt 1 */
    2612:	1f 92       	push	r1
    2614:	0f 92       	push	r0
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	0f 92       	push	r0
    261a:	11 24       	eor	r1, r1
    261c:	0b b6       	in	r0, 0x3b	; 59
    261e:	0f 92       	push	r0
    2620:	2f 93       	push	r18
    2622:	3f 93       	push	r19
    2624:	4f 93       	push	r20
    2626:	5f 93       	push	r21
    2628:	6f 93       	push	r22
    262a:	7f 93       	push	r23
    262c:	8f 93       	push	r24
    262e:	9f 93       	push	r25
    2630:	af 93       	push	r26
    2632:	bf 93       	push	r27
    2634:	ef 93       	push	r30
    2636:	ff 93       	push	r31
    2638:	e0 91 43 21 	lds	r30, 0x2143
    263c:	f0 91 44 21 	lds	r31, 0x2144
    2640:	30 97       	sbiw	r30, 0x00	; 0
    2642:	29 f0       	breq	.+10     	; 0x264e <__vector_40+0x3c>
    2644:	80 91 39 22 	lds	r24, 0x2239
    2648:	90 91 3a 22 	lds	r25, 0x223A
    264c:	19 95       	eicall
    264e:	ff 91       	pop	r31
    2650:	ef 91       	pop	r30
    2652:	bf 91       	pop	r27
    2654:	af 91       	pop	r26
    2656:	9f 91       	pop	r25
    2658:	8f 91       	pop	r24
    265a:	7f 91       	pop	r23
    265c:	6f 91       	pop	r22
    265e:	5f 91       	pop	r21
    2660:	4f 91       	pop	r20
    2662:	3f 91       	pop	r19
    2664:	2f 91       	pop	r18
    2666:	0f 90       	pop	r0
    2668:	0b be       	out	0x3b, r0	; 59
    266a:	0f 90       	pop	r0
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	0f 90       	pop	r0
    2670:	1f 90       	pop	r1
    2672:	18 95       	reti

00002674 <__vector_41>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH2_vect)      /* Interrupt 2 */
    2674:	1f 92       	push	r1
    2676:	0f 92       	push	r0
    2678:	0f b6       	in	r0, 0x3f	; 63
    267a:	0f 92       	push	r0
    267c:	11 24       	eor	r1, r1
    267e:	0b b6       	in	r0, 0x3b	; 59
    2680:	0f 92       	push	r0
    2682:	2f 93       	push	r18
    2684:	3f 93       	push	r19
    2686:	4f 93       	push	r20
    2688:	5f 93       	push	r21
    268a:	6f 93       	push	r22
    268c:	7f 93       	push	r23
    268e:	8f 93       	push	r24
    2690:	9f 93       	push	r25
    2692:	af 93       	push	r26
    2694:	bf 93       	push	r27
    2696:	ef 93       	push	r30
    2698:	ff 93       	push	r31
    269a:	e0 91 45 21 	lds	r30, 0x2145
    269e:	f0 91 46 21 	lds	r31, 0x2146
    26a2:	30 97       	sbiw	r30, 0x00	; 0
    26a4:	29 f0       	breq	.+10     	; 0x26b0 <__vector_41+0x3c>
    26a6:	80 91 3b 22 	lds	r24, 0x223B
    26aa:	90 91 3c 22 	lds	r25, 0x223C
    26ae:	19 95       	eicall
    26b0:	ff 91       	pop	r31
    26b2:	ef 91       	pop	r30
    26b4:	bf 91       	pop	r27
    26b6:	af 91       	pop	r26
    26b8:	9f 91       	pop	r25
    26ba:	8f 91       	pop	r24
    26bc:	7f 91       	pop	r23
    26be:	6f 91       	pop	r22
    26c0:	5f 91       	pop	r21
    26c2:	4f 91       	pop	r20
    26c4:	3f 91       	pop	r19
    26c6:	2f 91       	pop	r18
    26c8:	0f 90       	pop	r0
    26ca:	0b be       	out	0x3b, r0	; 59
    26cc:	0f 90       	pop	r0
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	0f 90       	pop	r0
    26d2:	1f 90       	pop	r1
    26d4:	18 95       	reti

000026d6 <__vector_42>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH3_vect)      /* Interrupt 3 */
    26d6:	1f 92       	push	r1
    26d8:	0f 92       	push	r0
    26da:	0f b6       	in	r0, 0x3f	; 63
    26dc:	0f 92       	push	r0
    26de:	11 24       	eor	r1, r1
    26e0:	0b b6       	in	r0, 0x3b	; 59
    26e2:	0f 92       	push	r0
    26e4:	2f 93       	push	r18
    26e6:	3f 93       	push	r19
    26e8:	4f 93       	push	r20
    26ea:	5f 93       	push	r21
    26ec:	6f 93       	push	r22
    26ee:	7f 93       	push	r23
    26f0:	8f 93       	push	r24
    26f2:	9f 93       	push	r25
    26f4:	af 93       	push	r26
    26f6:	bf 93       	push	r27
    26f8:	ef 93       	push	r30
    26fa:	ff 93       	push	r31
    26fc:	e0 91 47 21 	lds	r30, 0x2147
    2700:	f0 91 48 21 	lds	r31, 0x2148
    2704:	30 97       	sbiw	r30, 0x00	; 0
    2706:	29 f0       	breq	.+10     	; 0x2712 <__vector_42+0x3c>
    2708:	80 91 3d 22 	lds	r24, 0x223D
    270c:	90 91 3e 22 	lds	r25, 0x223E
    2710:	19 95       	eicall
    2712:	ff 91       	pop	r31
    2714:	ef 91       	pop	r30
    2716:	bf 91       	pop	r27
    2718:	af 91       	pop	r26
    271a:	9f 91       	pop	r25
    271c:	8f 91       	pop	r24
    271e:	7f 91       	pop	r23
    2720:	6f 91       	pop	r22
    2722:	5f 91       	pop	r21
    2724:	4f 91       	pop	r20
    2726:	3f 91       	pop	r19
    2728:	2f 91       	pop	r18
    272a:	0f 90       	pop	r0
    272c:	0b be       	out	0x3b, r0	; 59
    272e:	0f 90       	pop	r0
    2730:	0f be       	out	0x3f, r0	; 63
    2732:	0f 90       	pop	r0
    2734:	1f 90       	pop	r1
    2736:	18 95       	reti

00002738 <__vector_43>:

/* PORTE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT0_vect)      /* External Interrupt 0 */
    2738:	1f 92       	push	r1
    273a:	0f 92       	push	r0
    273c:	0f b6       	in	r0, 0x3f	; 63
    273e:	0f 92       	push	r0
    2740:	11 24       	eor	r1, r1
    2742:	0b b6       	in	r0, 0x3b	; 59
    2744:	0f 92       	push	r0
    2746:	2f 93       	push	r18
    2748:	3f 93       	push	r19
    274a:	4f 93       	push	r20
    274c:	5f 93       	push	r21
    274e:	6f 93       	push	r22
    2750:	7f 93       	push	r23
    2752:	8f 93       	push	r24
    2754:	9f 93       	push	r25
    2756:	af 93       	push	r26
    2758:	bf 93       	push	r27
    275a:	ef 93       	push	r30
    275c:	ff 93       	push	r31
    275e:	e0 91 49 21 	lds	r30, 0x2149
    2762:	f0 91 4a 21 	lds	r31, 0x214A
    2766:	30 97       	sbiw	r30, 0x00	; 0
    2768:	29 f0       	breq	.+10     	; 0x2774 <__vector_43+0x3c>
    276a:	80 91 3f 22 	lds	r24, 0x223F
    276e:	90 91 40 22 	lds	r25, 0x2240
    2772:	19 95       	eicall
    2774:	ff 91       	pop	r31
    2776:	ef 91       	pop	r30
    2778:	bf 91       	pop	r27
    277a:	af 91       	pop	r26
    277c:	9f 91       	pop	r25
    277e:	8f 91       	pop	r24
    2780:	7f 91       	pop	r23
    2782:	6f 91       	pop	r22
    2784:	5f 91       	pop	r21
    2786:	4f 91       	pop	r20
    2788:	3f 91       	pop	r19
    278a:	2f 91       	pop	r18
    278c:	0f 90       	pop	r0
    278e:	0b be       	out	0x3b, r0	; 59
    2790:	0f 90       	pop	r0
    2792:	0f be       	out	0x3f, r0	; 63
    2794:	0f 90       	pop	r0
    2796:	1f 90       	pop	r1
    2798:	18 95       	reti

0000279a <__vector_44>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT1_vect)      /* External Interrupt 1 */
    279a:	1f 92       	push	r1
    279c:	0f 92       	push	r0
    279e:	0f b6       	in	r0, 0x3f	; 63
    27a0:	0f 92       	push	r0
    27a2:	11 24       	eor	r1, r1
    27a4:	0b b6       	in	r0, 0x3b	; 59
    27a6:	0f 92       	push	r0
    27a8:	2f 93       	push	r18
    27aa:	3f 93       	push	r19
    27ac:	4f 93       	push	r20
    27ae:	5f 93       	push	r21
    27b0:	6f 93       	push	r22
    27b2:	7f 93       	push	r23
    27b4:	8f 93       	push	r24
    27b6:	9f 93       	push	r25
    27b8:	af 93       	push	r26
    27ba:	bf 93       	push	r27
    27bc:	ef 93       	push	r30
    27be:	ff 93       	push	r31
    27c0:	e0 91 4b 21 	lds	r30, 0x214B
    27c4:	f0 91 4c 21 	lds	r31, 0x214C
    27c8:	30 97       	sbiw	r30, 0x00	; 0
    27ca:	29 f0       	breq	.+10     	; 0x27d6 <__vector_44+0x3c>
    27cc:	80 91 41 22 	lds	r24, 0x2241
    27d0:	90 91 42 22 	lds	r25, 0x2242
    27d4:	19 95       	eicall
    27d6:	ff 91       	pop	r31
    27d8:	ef 91       	pop	r30
    27da:	bf 91       	pop	r27
    27dc:	af 91       	pop	r26
    27de:	9f 91       	pop	r25
    27e0:	8f 91       	pop	r24
    27e2:	7f 91       	pop	r23
    27e4:	6f 91       	pop	r22
    27e6:	5f 91       	pop	r21
    27e8:	4f 91       	pop	r20
    27ea:	3f 91       	pop	r19
    27ec:	2f 91       	pop	r18
    27ee:	0f 90       	pop	r0
    27f0:	0b be       	out	0x3b, r0	; 59
    27f2:	0f 90       	pop	r0
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	0f 90       	pop	r0
    27f8:	1f 90       	pop	r1
    27fa:	18 95       	reti

000027fc <__vector_45>:

/* TWIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIS_vect)      /* TWI Slave Interrupt */
    27fc:	1f 92       	push	r1
    27fe:	0f 92       	push	r0
    2800:	0f b6       	in	r0, 0x3f	; 63
    2802:	0f 92       	push	r0
    2804:	11 24       	eor	r1, r1
    2806:	0b b6       	in	r0, 0x3b	; 59
    2808:	0f 92       	push	r0
    280a:	2f 93       	push	r18
    280c:	3f 93       	push	r19
    280e:	4f 93       	push	r20
    2810:	5f 93       	push	r21
    2812:	6f 93       	push	r22
    2814:	7f 93       	push	r23
    2816:	8f 93       	push	r24
    2818:	9f 93       	push	r25
    281a:	af 93       	push	r26
    281c:	bf 93       	push	r27
    281e:	ef 93       	push	r30
    2820:	ff 93       	push	r31
    2822:	e0 91 4d 21 	lds	r30, 0x214D
    2826:	f0 91 4e 21 	lds	r31, 0x214E
    282a:	30 97       	sbiw	r30, 0x00	; 0
    282c:	29 f0       	breq	.+10     	; 0x2838 <__vector_45+0x3c>
    282e:	80 91 43 22 	lds	r24, 0x2243
    2832:	90 91 44 22 	lds	r25, 0x2244
    2836:	19 95       	eicall
    2838:	ff 91       	pop	r31
    283a:	ef 91       	pop	r30
    283c:	bf 91       	pop	r27
    283e:	af 91       	pop	r26
    2840:	9f 91       	pop	r25
    2842:	8f 91       	pop	r24
    2844:	7f 91       	pop	r23
    2846:	6f 91       	pop	r22
    2848:	5f 91       	pop	r21
    284a:	4f 91       	pop	r20
    284c:	3f 91       	pop	r19
    284e:	2f 91       	pop	r18
    2850:	0f 90       	pop	r0
    2852:	0b be       	out	0x3b, r0	; 59
    2854:	0f 90       	pop	r0
    2856:	0f be       	out	0x3f, r0	; 63
    2858:	0f 90       	pop	r0
    285a:	1f 90       	pop	r1
    285c:	18 95       	reti

0000285e <__vector_46>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIM_vect)		/* TWI Master Interrupt */
    285e:	1f 92       	push	r1
    2860:	0f 92       	push	r0
    2862:	0f b6       	in	r0, 0x3f	; 63
    2864:	0f 92       	push	r0
    2866:	11 24       	eor	r1, r1
    2868:	0b b6       	in	r0, 0x3b	; 59
    286a:	0f 92       	push	r0
    286c:	2f 93       	push	r18
    286e:	3f 93       	push	r19
    2870:	4f 93       	push	r20
    2872:	5f 93       	push	r21
    2874:	6f 93       	push	r22
    2876:	7f 93       	push	r23
    2878:	8f 93       	push	r24
    287a:	9f 93       	push	r25
    287c:	af 93       	push	r26
    287e:	bf 93       	push	r27
    2880:	ef 93       	push	r30
    2882:	ff 93       	push	r31
    2884:	e0 91 4f 21 	lds	r30, 0x214F
    2888:	f0 91 50 21 	lds	r31, 0x2150
    288c:	30 97       	sbiw	r30, 0x00	; 0
    288e:	29 f0       	breq	.+10     	; 0x289a <__vector_46+0x3c>
    2890:	80 91 45 22 	lds	r24, 0x2245
    2894:	90 91 46 22 	lds	r25, 0x2246
    2898:	19 95       	eicall
    289a:	ff 91       	pop	r31
    289c:	ef 91       	pop	r30
    289e:	bf 91       	pop	r27
    28a0:	af 91       	pop	r26
    28a2:	9f 91       	pop	r25
    28a4:	8f 91       	pop	r24
    28a6:	7f 91       	pop	r23
    28a8:	6f 91       	pop	r22
    28aa:	5f 91       	pop	r21
    28ac:	4f 91       	pop	r20
    28ae:	3f 91       	pop	r19
    28b0:	2f 91       	pop	r18
    28b2:	0f 90       	pop	r0
    28b4:	0b be       	out	0x3b, r0	; 59
    28b6:	0f 90       	pop	r0
    28b8:	0f be       	out	0x3f, r0	; 63
    28ba:	0f 90       	pop	r0
    28bc:	1f 90       	pop	r1
    28be:	18 95       	reti

000028c0 <__vector_47>:

/* TCE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_OVF_vect)      /* Overflow Interrupt */
    28c0:	1f 92       	push	r1
    28c2:	0f 92       	push	r0
    28c4:	0f b6       	in	r0, 0x3f	; 63
    28c6:	0f 92       	push	r0
    28c8:	11 24       	eor	r1, r1
    28ca:	0b b6       	in	r0, 0x3b	; 59
    28cc:	0f 92       	push	r0
    28ce:	2f 93       	push	r18
    28d0:	3f 93       	push	r19
    28d2:	4f 93       	push	r20
    28d4:	5f 93       	push	r21
    28d6:	6f 93       	push	r22
    28d8:	7f 93       	push	r23
    28da:	8f 93       	push	r24
    28dc:	9f 93       	push	r25
    28de:	af 93       	push	r26
    28e0:	bf 93       	push	r27
    28e2:	ef 93       	push	r30
    28e4:	ff 93       	push	r31
    28e6:	e0 91 51 21 	lds	r30, 0x2151
    28ea:	f0 91 52 21 	lds	r31, 0x2152
    28ee:	30 97       	sbiw	r30, 0x00	; 0
    28f0:	29 f0       	breq	.+10     	; 0x28fc <__vector_47+0x3c>
    28f2:	80 91 47 22 	lds	r24, 0x2247
    28f6:	90 91 48 22 	lds	r25, 0x2248
    28fa:	19 95       	eicall
    28fc:	ff 91       	pop	r31
    28fe:	ef 91       	pop	r30
    2900:	bf 91       	pop	r27
    2902:	af 91       	pop	r26
    2904:	9f 91       	pop	r25
    2906:	8f 91       	pop	r24
    2908:	7f 91       	pop	r23
    290a:	6f 91       	pop	r22
    290c:	5f 91       	pop	r21
    290e:	4f 91       	pop	r20
    2910:	3f 91       	pop	r19
    2912:	2f 91       	pop	r18
    2914:	0f 90       	pop	r0
    2916:	0b be       	out	0x3b, r0	; 59
    2918:	0f 90       	pop	r0
    291a:	0f be       	out	0x3f, r0	; 63
    291c:	0f 90       	pop	r0
    291e:	1f 90       	pop	r1
    2920:	18 95       	reti

00002922 <__vector_48>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_ERR_vect)      /* Error Interrupt */
    2922:	1f 92       	push	r1
    2924:	0f 92       	push	r0
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	0f 92       	push	r0
    292a:	11 24       	eor	r1, r1
    292c:	0b b6       	in	r0, 0x3b	; 59
    292e:	0f 92       	push	r0
    2930:	2f 93       	push	r18
    2932:	3f 93       	push	r19
    2934:	4f 93       	push	r20
    2936:	5f 93       	push	r21
    2938:	6f 93       	push	r22
    293a:	7f 93       	push	r23
    293c:	8f 93       	push	r24
    293e:	9f 93       	push	r25
    2940:	af 93       	push	r26
    2942:	bf 93       	push	r27
    2944:	ef 93       	push	r30
    2946:	ff 93       	push	r31
    2948:	e0 91 53 21 	lds	r30, 0x2153
    294c:	f0 91 54 21 	lds	r31, 0x2154
    2950:	30 97       	sbiw	r30, 0x00	; 0
    2952:	29 f0       	breq	.+10     	; 0x295e <__vector_48+0x3c>
    2954:	80 91 49 22 	lds	r24, 0x2249
    2958:	90 91 4a 22 	lds	r25, 0x224A
    295c:	19 95       	eicall
    295e:	ff 91       	pop	r31
    2960:	ef 91       	pop	r30
    2962:	bf 91       	pop	r27
    2964:	af 91       	pop	r26
    2966:	9f 91       	pop	r25
    2968:	8f 91       	pop	r24
    296a:	7f 91       	pop	r23
    296c:	6f 91       	pop	r22
    296e:	5f 91       	pop	r21
    2970:	4f 91       	pop	r20
    2972:	3f 91       	pop	r19
    2974:	2f 91       	pop	r18
    2976:	0f 90       	pop	r0
    2978:	0b be       	out	0x3b, r0	; 59
    297a:	0f 90       	pop	r0
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	0f 90       	pop	r0
    2980:	1f 90       	pop	r1
    2982:	18 95       	reti

00002984 <__vector_49>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCA_vect)      /* Compare or Capture A Interrupt */
    2984:	1f 92       	push	r1
    2986:	0f 92       	push	r0
    2988:	0f b6       	in	r0, 0x3f	; 63
    298a:	0f 92       	push	r0
    298c:	11 24       	eor	r1, r1
    298e:	0b b6       	in	r0, 0x3b	; 59
    2990:	0f 92       	push	r0
    2992:	2f 93       	push	r18
    2994:	3f 93       	push	r19
    2996:	4f 93       	push	r20
    2998:	5f 93       	push	r21
    299a:	6f 93       	push	r22
    299c:	7f 93       	push	r23
    299e:	8f 93       	push	r24
    29a0:	9f 93       	push	r25
    29a2:	af 93       	push	r26
    29a4:	bf 93       	push	r27
    29a6:	ef 93       	push	r30
    29a8:	ff 93       	push	r31
    29aa:	e0 91 55 21 	lds	r30, 0x2155
    29ae:	f0 91 56 21 	lds	r31, 0x2156
    29b2:	30 97       	sbiw	r30, 0x00	; 0
    29b4:	29 f0       	breq	.+10     	; 0x29c0 <__vector_49+0x3c>
    29b6:	80 91 4b 22 	lds	r24, 0x224B
    29ba:	90 91 4c 22 	lds	r25, 0x224C
    29be:	19 95       	eicall
    29c0:	ff 91       	pop	r31
    29c2:	ef 91       	pop	r30
    29c4:	bf 91       	pop	r27
    29c6:	af 91       	pop	r26
    29c8:	9f 91       	pop	r25
    29ca:	8f 91       	pop	r24
    29cc:	7f 91       	pop	r23
    29ce:	6f 91       	pop	r22
    29d0:	5f 91       	pop	r21
    29d2:	4f 91       	pop	r20
    29d4:	3f 91       	pop	r19
    29d6:	2f 91       	pop	r18
    29d8:	0f 90       	pop	r0
    29da:	0b be       	out	0x3b, r0	; 59
    29dc:	0f 90       	pop	r0
    29de:	0f be       	out	0x3f, r0	; 63
    29e0:	0f 90       	pop	r0
    29e2:	1f 90       	pop	r1
    29e4:	18 95       	reti

000029e6 <__vector_50>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCB_vect)      /* Compare or Capture B Interrupt */
    29e6:	1f 92       	push	r1
    29e8:	0f 92       	push	r0
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	0f 92       	push	r0
    29ee:	11 24       	eor	r1, r1
    29f0:	0b b6       	in	r0, 0x3b	; 59
    29f2:	0f 92       	push	r0
    29f4:	2f 93       	push	r18
    29f6:	3f 93       	push	r19
    29f8:	4f 93       	push	r20
    29fa:	5f 93       	push	r21
    29fc:	6f 93       	push	r22
    29fe:	7f 93       	push	r23
    2a00:	8f 93       	push	r24
    2a02:	9f 93       	push	r25
    2a04:	af 93       	push	r26
    2a06:	bf 93       	push	r27
    2a08:	ef 93       	push	r30
    2a0a:	ff 93       	push	r31
    2a0c:	e0 91 57 21 	lds	r30, 0x2157
    2a10:	f0 91 58 21 	lds	r31, 0x2158
    2a14:	30 97       	sbiw	r30, 0x00	; 0
    2a16:	29 f0       	breq	.+10     	; 0x2a22 <__vector_50+0x3c>
    2a18:	80 91 4d 22 	lds	r24, 0x224D
    2a1c:	90 91 4e 22 	lds	r25, 0x224E
    2a20:	19 95       	eicall
    2a22:	ff 91       	pop	r31
    2a24:	ef 91       	pop	r30
    2a26:	bf 91       	pop	r27
    2a28:	af 91       	pop	r26
    2a2a:	9f 91       	pop	r25
    2a2c:	8f 91       	pop	r24
    2a2e:	7f 91       	pop	r23
    2a30:	6f 91       	pop	r22
    2a32:	5f 91       	pop	r21
    2a34:	4f 91       	pop	r20
    2a36:	3f 91       	pop	r19
    2a38:	2f 91       	pop	r18
    2a3a:	0f 90       	pop	r0
    2a3c:	0b be       	out	0x3b, r0	; 59
    2a3e:	0f 90       	pop	r0
    2a40:	0f be       	out	0x3f, r0	; 63
    2a42:	0f 90       	pop	r0
    2a44:	1f 90       	pop	r1
    2a46:	18 95       	reti

00002a48 <__vector_51>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCC_vect)      /* Compare or Capture C Interrupt */
    2a48:	1f 92       	push	r1
    2a4a:	0f 92       	push	r0
    2a4c:	0f b6       	in	r0, 0x3f	; 63
    2a4e:	0f 92       	push	r0
    2a50:	11 24       	eor	r1, r1
    2a52:	0b b6       	in	r0, 0x3b	; 59
    2a54:	0f 92       	push	r0
    2a56:	2f 93       	push	r18
    2a58:	3f 93       	push	r19
    2a5a:	4f 93       	push	r20
    2a5c:	5f 93       	push	r21
    2a5e:	6f 93       	push	r22
    2a60:	7f 93       	push	r23
    2a62:	8f 93       	push	r24
    2a64:	9f 93       	push	r25
    2a66:	af 93       	push	r26
    2a68:	bf 93       	push	r27
    2a6a:	ef 93       	push	r30
    2a6c:	ff 93       	push	r31
    2a6e:	e0 91 59 21 	lds	r30, 0x2159
    2a72:	f0 91 5a 21 	lds	r31, 0x215A
    2a76:	30 97       	sbiw	r30, 0x00	; 0
    2a78:	29 f0       	breq	.+10     	; 0x2a84 <__vector_51+0x3c>
    2a7a:	80 91 4f 22 	lds	r24, 0x224F
    2a7e:	90 91 50 22 	lds	r25, 0x2250
    2a82:	19 95       	eicall
    2a84:	ff 91       	pop	r31
    2a86:	ef 91       	pop	r30
    2a88:	bf 91       	pop	r27
    2a8a:	af 91       	pop	r26
    2a8c:	9f 91       	pop	r25
    2a8e:	8f 91       	pop	r24
    2a90:	7f 91       	pop	r23
    2a92:	6f 91       	pop	r22
    2a94:	5f 91       	pop	r21
    2a96:	4f 91       	pop	r20
    2a98:	3f 91       	pop	r19
    2a9a:	2f 91       	pop	r18
    2a9c:	0f 90       	pop	r0
    2a9e:	0b be       	out	0x3b, r0	; 59
    2aa0:	0f 90       	pop	r0
    2aa2:	0f be       	out	0x3f, r0	; 63
    2aa4:	0f 90       	pop	r0
    2aa6:	1f 90       	pop	r1
    2aa8:	18 95       	reti

00002aaa <__vector_52>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCD_vect)      /* Compare or Capture D Interrupt */
    2aaa:	1f 92       	push	r1
    2aac:	0f 92       	push	r0
    2aae:	0f b6       	in	r0, 0x3f	; 63
    2ab0:	0f 92       	push	r0
    2ab2:	11 24       	eor	r1, r1
    2ab4:	0b b6       	in	r0, 0x3b	; 59
    2ab6:	0f 92       	push	r0
    2ab8:	2f 93       	push	r18
    2aba:	3f 93       	push	r19
    2abc:	4f 93       	push	r20
    2abe:	5f 93       	push	r21
    2ac0:	6f 93       	push	r22
    2ac2:	7f 93       	push	r23
    2ac4:	8f 93       	push	r24
    2ac6:	9f 93       	push	r25
    2ac8:	af 93       	push	r26
    2aca:	bf 93       	push	r27
    2acc:	ef 93       	push	r30
    2ace:	ff 93       	push	r31
    2ad0:	e0 91 5b 21 	lds	r30, 0x215B
    2ad4:	f0 91 5c 21 	lds	r31, 0x215C
    2ad8:	30 97       	sbiw	r30, 0x00	; 0
    2ada:	29 f0       	breq	.+10     	; 0x2ae6 <__vector_52+0x3c>
    2adc:	80 91 51 22 	lds	r24, 0x2251
    2ae0:	90 91 52 22 	lds	r25, 0x2252
    2ae4:	19 95       	eicall
    2ae6:	ff 91       	pop	r31
    2ae8:	ef 91       	pop	r30
    2aea:	bf 91       	pop	r27
    2aec:	af 91       	pop	r26
    2aee:	9f 91       	pop	r25
    2af0:	8f 91       	pop	r24
    2af2:	7f 91       	pop	r23
    2af4:	6f 91       	pop	r22
    2af6:	5f 91       	pop	r21
    2af8:	4f 91       	pop	r20
    2afa:	3f 91       	pop	r19
    2afc:	2f 91       	pop	r18
    2afe:	0f 90       	pop	r0
    2b00:	0b be       	out	0x3b, r0	; 59
    2b02:	0f 90       	pop	r0
    2b04:	0f be       	out	0x3f, r0	; 63
    2b06:	0f 90       	pop	r0
    2b08:	1f 90       	pop	r1
    2b0a:	18 95       	reti

00002b0c <__vector_53>:

/* TCE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_OVF_vect)      /* Overflow Interrupt */
    2b0c:	1f 92       	push	r1
    2b0e:	0f 92       	push	r0
    2b10:	0f b6       	in	r0, 0x3f	; 63
    2b12:	0f 92       	push	r0
    2b14:	11 24       	eor	r1, r1
    2b16:	0b b6       	in	r0, 0x3b	; 59
    2b18:	0f 92       	push	r0
    2b1a:	2f 93       	push	r18
    2b1c:	3f 93       	push	r19
    2b1e:	4f 93       	push	r20
    2b20:	5f 93       	push	r21
    2b22:	6f 93       	push	r22
    2b24:	7f 93       	push	r23
    2b26:	8f 93       	push	r24
    2b28:	9f 93       	push	r25
    2b2a:	af 93       	push	r26
    2b2c:	bf 93       	push	r27
    2b2e:	ef 93       	push	r30
    2b30:	ff 93       	push	r31
    2b32:	e0 91 5d 21 	lds	r30, 0x215D
    2b36:	f0 91 5e 21 	lds	r31, 0x215E
    2b3a:	30 97       	sbiw	r30, 0x00	; 0
    2b3c:	29 f0       	breq	.+10     	; 0x2b48 <__vector_53+0x3c>
    2b3e:	80 91 53 22 	lds	r24, 0x2253
    2b42:	90 91 54 22 	lds	r25, 0x2254
    2b46:	19 95       	eicall
    2b48:	ff 91       	pop	r31
    2b4a:	ef 91       	pop	r30
    2b4c:	bf 91       	pop	r27
    2b4e:	af 91       	pop	r26
    2b50:	9f 91       	pop	r25
    2b52:	8f 91       	pop	r24
    2b54:	7f 91       	pop	r23
    2b56:	6f 91       	pop	r22
    2b58:	5f 91       	pop	r21
    2b5a:	4f 91       	pop	r20
    2b5c:	3f 91       	pop	r19
    2b5e:	2f 91       	pop	r18
    2b60:	0f 90       	pop	r0
    2b62:	0b be       	out	0x3b, r0	; 59
    2b64:	0f 90       	pop	r0
    2b66:	0f be       	out	0x3f, r0	; 63
    2b68:	0f 90       	pop	r0
    2b6a:	1f 90       	pop	r1
    2b6c:	18 95       	reti

00002b6e <__vector_54>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_ERR_vect)      /* Error Interrupt */
    2b6e:	1f 92       	push	r1
    2b70:	0f 92       	push	r0
    2b72:	0f b6       	in	r0, 0x3f	; 63
    2b74:	0f 92       	push	r0
    2b76:	11 24       	eor	r1, r1
    2b78:	0b b6       	in	r0, 0x3b	; 59
    2b7a:	0f 92       	push	r0
    2b7c:	2f 93       	push	r18
    2b7e:	3f 93       	push	r19
    2b80:	4f 93       	push	r20
    2b82:	5f 93       	push	r21
    2b84:	6f 93       	push	r22
    2b86:	7f 93       	push	r23
    2b88:	8f 93       	push	r24
    2b8a:	9f 93       	push	r25
    2b8c:	af 93       	push	r26
    2b8e:	bf 93       	push	r27
    2b90:	ef 93       	push	r30
    2b92:	ff 93       	push	r31
    2b94:	e0 91 5f 21 	lds	r30, 0x215F
    2b98:	f0 91 60 21 	lds	r31, 0x2160
    2b9c:	30 97       	sbiw	r30, 0x00	; 0
    2b9e:	29 f0       	breq	.+10     	; 0x2baa <__vector_54+0x3c>
    2ba0:	80 91 55 22 	lds	r24, 0x2255
    2ba4:	90 91 56 22 	lds	r25, 0x2256
    2ba8:	19 95       	eicall
    2baa:	ff 91       	pop	r31
    2bac:	ef 91       	pop	r30
    2bae:	bf 91       	pop	r27
    2bb0:	af 91       	pop	r26
    2bb2:	9f 91       	pop	r25
    2bb4:	8f 91       	pop	r24
    2bb6:	7f 91       	pop	r23
    2bb8:	6f 91       	pop	r22
    2bba:	5f 91       	pop	r21
    2bbc:	4f 91       	pop	r20
    2bbe:	3f 91       	pop	r19
    2bc0:	2f 91       	pop	r18
    2bc2:	0f 90       	pop	r0
    2bc4:	0b be       	out	0x3b, r0	; 59
    2bc6:	0f 90       	pop	r0
    2bc8:	0f be       	out	0x3f, r0	; 63
    2bca:	0f 90       	pop	r0
    2bcc:	1f 90       	pop	r1
    2bce:	18 95       	reti

00002bd0 <__vector_55>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCA_vect)      /* Compare or Capture A Interrupt */
    2bd0:	1f 92       	push	r1
    2bd2:	0f 92       	push	r0
    2bd4:	0f b6       	in	r0, 0x3f	; 63
    2bd6:	0f 92       	push	r0
    2bd8:	11 24       	eor	r1, r1
    2bda:	0b b6       	in	r0, 0x3b	; 59
    2bdc:	0f 92       	push	r0
    2bde:	2f 93       	push	r18
    2be0:	3f 93       	push	r19
    2be2:	4f 93       	push	r20
    2be4:	5f 93       	push	r21
    2be6:	6f 93       	push	r22
    2be8:	7f 93       	push	r23
    2bea:	8f 93       	push	r24
    2bec:	9f 93       	push	r25
    2bee:	af 93       	push	r26
    2bf0:	bf 93       	push	r27
    2bf2:	ef 93       	push	r30
    2bf4:	ff 93       	push	r31
    2bf6:	e0 91 61 21 	lds	r30, 0x2161
    2bfa:	f0 91 62 21 	lds	r31, 0x2162
    2bfe:	30 97       	sbiw	r30, 0x00	; 0
    2c00:	29 f0       	breq	.+10     	; 0x2c0c <__vector_55+0x3c>
    2c02:	80 91 57 22 	lds	r24, 0x2257
    2c06:	90 91 58 22 	lds	r25, 0x2258
    2c0a:	19 95       	eicall
    2c0c:	ff 91       	pop	r31
    2c0e:	ef 91       	pop	r30
    2c10:	bf 91       	pop	r27
    2c12:	af 91       	pop	r26
    2c14:	9f 91       	pop	r25
    2c16:	8f 91       	pop	r24
    2c18:	7f 91       	pop	r23
    2c1a:	6f 91       	pop	r22
    2c1c:	5f 91       	pop	r21
    2c1e:	4f 91       	pop	r20
    2c20:	3f 91       	pop	r19
    2c22:	2f 91       	pop	r18
    2c24:	0f 90       	pop	r0
    2c26:	0b be       	out	0x3b, r0	; 59
    2c28:	0f 90       	pop	r0
    2c2a:	0f be       	out	0x3f, r0	; 63
    2c2c:	0f 90       	pop	r0
    2c2e:	1f 90       	pop	r1
    2c30:	18 95       	reti

00002c32 <__vector_56>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCB_vect)      /* Compare or Capture B Interrupt */
    2c32:	1f 92       	push	r1
    2c34:	0f 92       	push	r0
    2c36:	0f b6       	in	r0, 0x3f	; 63
    2c38:	0f 92       	push	r0
    2c3a:	11 24       	eor	r1, r1
    2c3c:	0b b6       	in	r0, 0x3b	; 59
    2c3e:	0f 92       	push	r0
    2c40:	2f 93       	push	r18
    2c42:	3f 93       	push	r19
    2c44:	4f 93       	push	r20
    2c46:	5f 93       	push	r21
    2c48:	6f 93       	push	r22
    2c4a:	7f 93       	push	r23
    2c4c:	8f 93       	push	r24
    2c4e:	9f 93       	push	r25
    2c50:	af 93       	push	r26
    2c52:	bf 93       	push	r27
    2c54:	ef 93       	push	r30
    2c56:	ff 93       	push	r31
    2c58:	e0 91 63 21 	lds	r30, 0x2163
    2c5c:	f0 91 64 21 	lds	r31, 0x2164
    2c60:	30 97       	sbiw	r30, 0x00	; 0
    2c62:	29 f0       	breq	.+10     	; 0x2c6e <__vector_56+0x3c>
    2c64:	80 91 59 22 	lds	r24, 0x2259
    2c68:	90 91 5a 22 	lds	r25, 0x225A
    2c6c:	19 95       	eicall
    2c6e:	ff 91       	pop	r31
    2c70:	ef 91       	pop	r30
    2c72:	bf 91       	pop	r27
    2c74:	af 91       	pop	r26
    2c76:	9f 91       	pop	r25
    2c78:	8f 91       	pop	r24
    2c7a:	7f 91       	pop	r23
    2c7c:	6f 91       	pop	r22
    2c7e:	5f 91       	pop	r21
    2c80:	4f 91       	pop	r20
    2c82:	3f 91       	pop	r19
    2c84:	2f 91       	pop	r18
    2c86:	0f 90       	pop	r0
    2c88:	0b be       	out	0x3b, r0	; 59
    2c8a:	0f 90       	pop	r0
    2c8c:	0f be       	out	0x3f, r0	; 63
    2c8e:	0f 90       	pop	r0
    2c90:	1f 90       	pop	r1
    2c92:	18 95       	reti

00002c94 <__vector_57>:

/* SPIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIE_INT_vect)      /* SPI Interrupt */
    2c94:	1f 92       	push	r1
    2c96:	0f 92       	push	r0
    2c98:	0f b6       	in	r0, 0x3f	; 63
    2c9a:	0f 92       	push	r0
    2c9c:	11 24       	eor	r1, r1
    2c9e:	0b b6       	in	r0, 0x3b	; 59
    2ca0:	0f 92       	push	r0
    2ca2:	2f 93       	push	r18
    2ca4:	3f 93       	push	r19
    2ca6:	4f 93       	push	r20
    2ca8:	5f 93       	push	r21
    2caa:	6f 93       	push	r22
    2cac:	7f 93       	push	r23
    2cae:	8f 93       	push	r24
    2cb0:	9f 93       	push	r25
    2cb2:	af 93       	push	r26
    2cb4:	bf 93       	push	r27
    2cb6:	ef 93       	push	r30
    2cb8:	ff 93       	push	r31
    2cba:	e0 91 65 21 	lds	r30, 0x2165
    2cbe:	f0 91 66 21 	lds	r31, 0x2166
    2cc2:	30 97       	sbiw	r30, 0x00	; 0
    2cc4:	29 f0       	breq	.+10     	; 0x2cd0 <__vector_57+0x3c>
    2cc6:	80 91 5b 22 	lds	r24, 0x225B
    2cca:	90 91 5c 22 	lds	r25, 0x225C
    2cce:	19 95       	eicall
    2cd0:	ff 91       	pop	r31
    2cd2:	ef 91       	pop	r30
    2cd4:	bf 91       	pop	r27
    2cd6:	af 91       	pop	r26
    2cd8:	9f 91       	pop	r25
    2cda:	8f 91       	pop	r24
    2cdc:	7f 91       	pop	r23
    2cde:	6f 91       	pop	r22
    2ce0:	5f 91       	pop	r21
    2ce2:	4f 91       	pop	r20
    2ce4:	3f 91       	pop	r19
    2ce6:	2f 91       	pop	r18
    2ce8:	0f 90       	pop	r0
    2cea:	0b be       	out	0x3b, r0	; 59
    2cec:	0f 90       	pop	r0
    2cee:	0f be       	out	0x3f, r0	; 63
    2cf0:	0f 90       	pop	r0
    2cf2:	1f 90       	pop	r1
    2cf4:	18 95       	reti

00002cf6 <__vector_58>:

/* USARTE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_RXC_vect)      /* Reception Complete Interrupt */
    2cf6:	1f 92       	push	r1
    2cf8:	0f 92       	push	r0
    2cfa:	0f b6       	in	r0, 0x3f	; 63
    2cfc:	0f 92       	push	r0
    2cfe:	11 24       	eor	r1, r1
    2d00:	0b b6       	in	r0, 0x3b	; 59
    2d02:	0f 92       	push	r0
    2d04:	2f 93       	push	r18
    2d06:	3f 93       	push	r19
    2d08:	4f 93       	push	r20
    2d0a:	5f 93       	push	r21
    2d0c:	6f 93       	push	r22
    2d0e:	7f 93       	push	r23
    2d10:	8f 93       	push	r24
    2d12:	9f 93       	push	r25
    2d14:	af 93       	push	r26
    2d16:	bf 93       	push	r27
    2d18:	ef 93       	push	r30
    2d1a:	ff 93       	push	r31
    2d1c:	e0 91 67 21 	lds	r30, 0x2167
    2d20:	f0 91 68 21 	lds	r31, 0x2168
    2d24:	30 97       	sbiw	r30, 0x00	; 0
    2d26:	29 f0       	breq	.+10     	; 0x2d32 <__vector_58+0x3c>
    2d28:	80 91 5d 22 	lds	r24, 0x225D
    2d2c:	90 91 5e 22 	lds	r25, 0x225E
    2d30:	19 95       	eicall
    2d32:	ff 91       	pop	r31
    2d34:	ef 91       	pop	r30
    2d36:	bf 91       	pop	r27
    2d38:	af 91       	pop	r26
    2d3a:	9f 91       	pop	r25
    2d3c:	8f 91       	pop	r24
    2d3e:	7f 91       	pop	r23
    2d40:	6f 91       	pop	r22
    2d42:	5f 91       	pop	r21
    2d44:	4f 91       	pop	r20
    2d46:	3f 91       	pop	r19
    2d48:	2f 91       	pop	r18
    2d4a:	0f 90       	pop	r0
    2d4c:	0b be       	out	0x3b, r0	; 59
    2d4e:	0f 90       	pop	r0
    2d50:	0f be       	out	0x3f, r0	; 63
    2d52:	0f 90       	pop	r0
    2d54:	1f 90       	pop	r1
    2d56:	18 95       	reti

00002d58 <__vector_59>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_DRE_vect)      /* Data Register Empty Interrupt */
    2d58:	1f 92       	push	r1
    2d5a:	0f 92       	push	r0
    2d5c:	0f b6       	in	r0, 0x3f	; 63
    2d5e:	0f 92       	push	r0
    2d60:	11 24       	eor	r1, r1
    2d62:	0b b6       	in	r0, 0x3b	; 59
    2d64:	0f 92       	push	r0
    2d66:	2f 93       	push	r18
    2d68:	3f 93       	push	r19
    2d6a:	4f 93       	push	r20
    2d6c:	5f 93       	push	r21
    2d6e:	6f 93       	push	r22
    2d70:	7f 93       	push	r23
    2d72:	8f 93       	push	r24
    2d74:	9f 93       	push	r25
    2d76:	af 93       	push	r26
    2d78:	bf 93       	push	r27
    2d7a:	ef 93       	push	r30
    2d7c:	ff 93       	push	r31
    2d7e:	e0 91 69 21 	lds	r30, 0x2169
    2d82:	f0 91 6a 21 	lds	r31, 0x216A
    2d86:	30 97       	sbiw	r30, 0x00	; 0
    2d88:	29 f0       	breq	.+10     	; 0x2d94 <__vector_59+0x3c>
    2d8a:	80 91 5f 22 	lds	r24, 0x225F
    2d8e:	90 91 60 22 	lds	r25, 0x2260
    2d92:	19 95       	eicall
    2d94:	ff 91       	pop	r31
    2d96:	ef 91       	pop	r30
    2d98:	bf 91       	pop	r27
    2d9a:	af 91       	pop	r26
    2d9c:	9f 91       	pop	r25
    2d9e:	8f 91       	pop	r24
    2da0:	7f 91       	pop	r23
    2da2:	6f 91       	pop	r22
    2da4:	5f 91       	pop	r21
    2da6:	4f 91       	pop	r20
    2da8:	3f 91       	pop	r19
    2daa:	2f 91       	pop	r18
    2dac:	0f 90       	pop	r0
    2dae:	0b be       	out	0x3b, r0	; 59
    2db0:	0f 90       	pop	r0
    2db2:	0f be       	out	0x3f, r0	; 63
    2db4:	0f 90       	pop	r0
    2db6:	1f 90       	pop	r1
    2db8:	18 95       	reti

00002dba <__vector_60>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_TXC_vect)      /* Transmission Complete Interrupt */
    2dba:	1f 92       	push	r1
    2dbc:	0f 92       	push	r0
    2dbe:	0f b6       	in	r0, 0x3f	; 63
    2dc0:	0f 92       	push	r0
    2dc2:	11 24       	eor	r1, r1
    2dc4:	0b b6       	in	r0, 0x3b	; 59
    2dc6:	0f 92       	push	r0
    2dc8:	2f 93       	push	r18
    2dca:	3f 93       	push	r19
    2dcc:	4f 93       	push	r20
    2dce:	5f 93       	push	r21
    2dd0:	6f 93       	push	r22
    2dd2:	7f 93       	push	r23
    2dd4:	8f 93       	push	r24
    2dd6:	9f 93       	push	r25
    2dd8:	af 93       	push	r26
    2dda:	bf 93       	push	r27
    2ddc:	ef 93       	push	r30
    2dde:	ff 93       	push	r31
    2de0:	e0 91 6b 21 	lds	r30, 0x216B
    2de4:	f0 91 6c 21 	lds	r31, 0x216C
    2de8:	30 97       	sbiw	r30, 0x00	; 0
    2dea:	29 f0       	breq	.+10     	; 0x2df6 <__vector_60+0x3c>
    2dec:	80 91 61 22 	lds	r24, 0x2261
    2df0:	90 91 62 22 	lds	r25, 0x2262
    2df4:	19 95       	eicall
    2df6:	ff 91       	pop	r31
    2df8:	ef 91       	pop	r30
    2dfa:	bf 91       	pop	r27
    2dfc:	af 91       	pop	r26
    2dfe:	9f 91       	pop	r25
    2e00:	8f 91       	pop	r24
    2e02:	7f 91       	pop	r23
    2e04:	6f 91       	pop	r22
    2e06:	5f 91       	pop	r21
    2e08:	4f 91       	pop	r20
    2e0a:	3f 91       	pop	r19
    2e0c:	2f 91       	pop	r18
    2e0e:	0f 90       	pop	r0
    2e10:	0b be       	out	0x3b, r0	; 59
    2e12:	0f 90       	pop	r0
    2e14:	0f be       	out	0x3f, r0	; 63
    2e16:	0f 90       	pop	r0
    2e18:	1f 90       	pop	r1
    2e1a:	18 95       	reti

00002e1c <__vector_61>:

/* USARTE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_RXC_vect)      /* Reception Complete Interrupt */
    2e1c:	1f 92       	push	r1
    2e1e:	0f 92       	push	r0
    2e20:	0f b6       	in	r0, 0x3f	; 63
    2e22:	0f 92       	push	r0
    2e24:	11 24       	eor	r1, r1
    2e26:	0b b6       	in	r0, 0x3b	; 59
    2e28:	0f 92       	push	r0
    2e2a:	2f 93       	push	r18
    2e2c:	3f 93       	push	r19
    2e2e:	4f 93       	push	r20
    2e30:	5f 93       	push	r21
    2e32:	6f 93       	push	r22
    2e34:	7f 93       	push	r23
    2e36:	8f 93       	push	r24
    2e38:	9f 93       	push	r25
    2e3a:	af 93       	push	r26
    2e3c:	bf 93       	push	r27
    2e3e:	ef 93       	push	r30
    2e40:	ff 93       	push	r31
    2e42:	e0 91 6d 21 	lds	r30, 0x216D
    2e46:	f0 91 6e 21 	lds	r31, 0x216E
    2e4a:	30 97       	sbiw	r30, 0x00	; 0
    2e4c:	29 f0       	breq	.+10     	; 0x2e58 <__vector_61+0x3c>
    2e4e:	80 91 63 22 	lds	r24, 0x2263
    2e52:	90 91 64 22 	lds	r25, 0x2264
    2e56:	19 95       	eicall
    2e58:	ff 91       	pop	r31
    2e5a:	ef 91       	pop	r30
    2e5c:	bf 91       	pop	r27
    2e5e:	af 91       	pop	r26
    2e60:	9f 91       	pop	r25
    2e62:	8f 91       	pop	r24
    2e64:	7f 91       	pop	r23
    2e66:	6f 91       	pop	r22
    2e68:	5f 91       	pop	r21
    2e6a:	4f 91       	pop	r20
    2e6c:	3f 91       	pop	r19
    2e6e:	2f 91       	pop	r18
    2e70:	0f 90       	pop	r0
    2e72:	0b be       	out	0x3b, r0	; 59
    2e74:	0f 90       	pop	r0
    2e76:	0f be       	out	0x3f, r0	; 63
    2e78:	0f 90       	pop	r0
    2e7a:	1f 90       	pop	r1
    2e7c:	18 95       	reti

00002e7e <__vector_62>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_DRE_vect)      /* Data Register Empty Interrupt */
    2e7e:	1f 92       	push	r1
    2e80:	0f 92       	push	r0
    2e82:	0f b6       	in	r0, 0x3f	; 63
    2e84:	0f 92       	push	r0
    2e86:	11 24       	eor	r1, r1
    2e88:	0b b6       	in	r0, 0x3b	; 59
    2e8a:	0f 92       	push	r0
    2e8c:	2f 93       	push	r18
    2e8e:	3f 93       	push	r19
    2e90:	4f 93       	push	r20
    2e92:	5f 93       	push	r21
    2e94:	6f 93       	push	r22
    2e96:	7f 93       	push	r23
    2e98:	8f 93       	push	r24
    2e9a:	9f 93       	push	r25
    2e9c:	af 93       	push	r26
    2e9e:	bf 93       	push	r27
    2ea0:	ef 93       	push	r30
    2ea2:	ff 93       	push	r31
    2ea4:	e0 91 6f 21 	lds	r30, 0x216F
    2ea8:	f0 91 70 21 	lds	r31, 0x2170
    2eac:	30 97       	sbiw	r30, 0x00	; 0
    2eae:	29 f0       	breq	.+10     	; 0x2eba <__vector_62+0x3c>
    2eb0:	80 91 65 22 	lds	r24, 0x2265
    2eb4:	90 91 66 22 	lds	r25, 0x2266
    2eb8:	19 95       	eicall
    2eba:	ff 91       	pop	r31
    2ebc:	ef 91       	pop	r30
    2ebe:	bf 91       	pop	r27
    2ec0:	af 91       	pop	r26
    2ec2:	9f 91       	pop	r25
    2ec4:	8f 91       	pop	r24
    2ec6:	7f 91       	pop	r23
    2ec8:	6f 91       	pop	r22
    2eca:	5f 91       	pop	r21
    2ecc:	4f 91       	pop	r20
    2ece:	3f 91       	pop	r19
    2ed0:	2f 91       	pop	r18
    2ed2:	0f 90       	pop	r0
    2ed4:	0b be       	out	0x3b, r0	; 59
    2ed6:	0f 90       	pop	r0
    2ed8:	0f be       	out	0x3f, r0	; 63
    2eda:	0f 90       	pop	r0
    2edc:	1f 90       	pop	r1
    2ede:	18 95       	reti

00002ee0 <__vector_63>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_TXC_vect)      /* Transmission Complete Interrupt */
    2ee0:	1f 92       	push	r1
    2ee2:	0f 92       	push	r0
    2ee4:	0f b6       	in	r0, 0x3f	; 63
    2ee6:	0f 92       	push	r0
    2ee8:	11 24       	eor	r1, r1
    2eea:	0b b6       	in	r0, 0x3b	; 59
    2eec:	0f 92       	push	r0
    2eee:	2f 93       	push	r18
    2ef0:	3f 93       	push	r19
    2ef2:	4f 93       	push	r20
    2ef4:	5f 93       	push	r21
    2ef6:	6f 93       	push	r22
    2ef8:	7f 93       	push	r23
    2efa:	8f 93       	push	r24
    2efc:	9f 93       	push	r25
    2efe:	af 93       	push	r26
    2f00:	bf 93       	push	r27
    2f02:	ef 93       	push	r30
    2f04:	ff 93       	push	r31
    2f06:	e0 91 71 21 	lds	r30, 0x2171
    2f0a:	f0 91 72 21 	lds	r31, 0x2172
    2f0e:	30 97       	sbiw	r30, 0x00	; 0
    2f10:	29 f0       	breq	.+10     	; 0x2f1c <__vector_63+0x3c>
    2f12:	80 91 67 22 	lds	r24, 0x2267
    2f16:	90 91 68 22 	lds	r25, 0x2268
    2f1a:	19 95       	eicall
    2f1c:	ff 91       	pop	r31
    2f1e:	ef 91       	pop	r30
    2f20:	bf 91       	pop	r27
    2f22:	af 91       	pop	r26
    2f24:	9f 91       	pop	r25
    2f26:	8f 91       	pop	r24
    2f28:	7f 91       	pop	r23
    2f2a:	6f 91       	pop	r22
    2f2c:	5f 91       	pop	r21
    2f2e:	4f 91       	pop	r20
    2f30:	3f 91       	pop	r19
    2f32:	2f 91       	pop	r18
    2f34:	0f 90       	pop	r0
    2f36:	0b be       	out	0x3b, r0	; 59
    2f38:	0f 90       	pop	r0
    2f3a:	0f be       	out	0x3f, r0	; 63
    2f3c:	0f 90       	pop	r0
    2f3e:	1f 90       	pop	r1
    2f40:	18 95       	reti

00002f42 <__vector_64>:

/* PORTD interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT0_vect)      /* External Interrupt 0 */
    2f42:	1f 92       	push	r1
    2f44:	0f 92       	push	r0
    2f46:	0f b6       	in	r0, 0x3f	; 63
    2f48:	0f 92       	push	r0
    2f4a:	11 24       	eor	r1, r1
    2f4c:	0b b6       	in	r0, 0x3b	; 59
    2f4e:	0f 92       	push	r0
    2f50:	2f 93       	push	r18
    2f52:	3f 93       	push	r19
    2f54:	4f 93       	push	r20
    2f56:	5f 93       	push	r21
    2f58:	6f 93       	push	r22
    2f5a:	7f 93       	push	r23
    2f5c:	8f 93       	push	r24
    2f5e:	9f 93       	push	r25
    2f60:	af 93       	push	r26
    2f62:	bf 93       	push	r27
    2f64:	ef 93       	push	r30
    2f66:	ff 93       	push	r31
    2f68:	e0 91 73 21 	lds	r30, 0x2173
    2f6c:	f0 91 74 21 	lds	r31, 0x2174
    2f70:	30 97       	sbiw	r30, 0x00	; 0
    2f72:	29 f0       	breq	.+10     	; 0x2f7e <__vector_64+0x3c>
    2f74:	80 91 69 22 	lds	r24, 0x2269
    2f78:	90 91 6a 22 	lds	r25, 0x226A
    2f7c:	19 95       	eicall
    2f7e:	ff 91       	pop	r31
    2f80:	ef 91       	pop	r30
    2f82:	bf 91       	pop	r27
    2f84:	af 91       	pop	r26
    2f86:	9f 91       	pop	r25
    2f88:	8f 91       	pop	r24
    2f8a:	7f 91       	pop	r23
    2f8c:	6f 91       	pop	r22
    2f8e:	5f 91       	pop	r21
    2f90:	4f 91       	pop	r20
    2f92:	3f 91       	pop	r19
    2f94:	2f 91       	pop	r18
    2f96:	0f 90       	pop	r0
    2f98:	0b be       	out	0x3b, r0	; 59
    2f9a:	0f 90       	pop	r0
    2f9c:	0f be       	out	0x3f, r0	; 63
    2f9e:	0f 90       	pop	r0
    2fa0:	1f 90       	pop	r1
    2fa2:	18 95       	reti

00002fa4 <__vector_65>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT1_vect)      /* External Interrupt 1 */
    2fa4:	1f 92       	push	r1
    2fa6:	0f 92       	push	r0
    2fa8:	0f b6       	in	r0, 0x3f	; 63
    2faa:	0f 92       	push	r0
    2fac:	11 24       	eor	r1, r1
    2fae:	0b b6       	in	r0, 0x3b	; 59
    2fb0:	0f 92       	push	r0
    2fb2:	2f 93       	push	r18
    2fb4:	3f 93       	push	r19
    2fb6:	4f 93       	push	r20
    2fb8:	5f 93       	push	r21
    2fba:	6f 93       	push	r22
    2fbc:	7f 93       	push	r23
    2fbe:	8f 93       	push	r24
    2fc0:	9f 93       	push	r25
    2fc2:	af 93       	push	r26
    2fc4:	bf 93       	push	r27
    2fc6:	ef 93       	push	r30
    2fc8:	ff 93       	push	r31
    2fca:	e0 91 75 21 	lds	r30, 0x2175
    2fce:	f0 91 76 21 	lds	r31, 0x2176
    2fd2:	30 97       	sbiw	r30, 0x00	; 0
    2fd4:	29 f0       	breq	.+10     	; 0x2fe0 <__vector_65+0x3c>
    2fd6:	80 91 6b 22 	lds	r24, 0x226B
    2fda:	90 91 6c 22 	lds	r25, 0x226C
    2fde:	19 95       	eicall
    2fe0:	ff 91       	pop	r31
    2fe2:	ef 91       	pop	r30
    2fe4:	bf 91       	pop	r27
    2fe6:	af 91       	pop	r26
    2fe8:	9f 91       	pop	r25
    2fea:	8f 91       	pop	r24
    2fec:	7f 91       	pop	r23
    2fee:	6f 91       	pop	r22
    2ff0:	5f 91       	pop	r21
    2ff2:	4f 91       	pop	r20
    2ff4:	3f 91       	pop	r19
    2ff6:	2f 91       	pop	r18
    2ff8:	0f 90       	pop	r0
    2ffa:	0b be       	out	0x3b, r0	; 59
    2ffc:	0f 90       	pop	r0
    2ffe:	0f be       	out	0x3f, r0	; 63
    3000:	0f 90       	pop	r0
    3002:	1f 90       	pop	r1
    3004:	18 95       	reti

00003006 <__vector_66>:

/* PORTA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT0_vect)      /* External Interrupt 0 */
    3006:	1f 92       	push	r1
    3008:	0f 92       	push	r0
    300a:	0f b6       	in	r0, 0x3f	; 63
    300c:	0f 92       	push	r0
    300e:	11 24       	eor	r1, r1
    3010:	0b b6       	in	r0, 0x3b	; 59
    3012:	0f 92       	push	r0
    3014:	2f 93       	push	r18
    3016:	3f 93       	push	r19
    3018:	4f 93       	push	r20
    301a:	5f 93       	push	r21
    301c:	6f 93       	push	r22
    301e:	7f 93       	push	r23
    3020:	8f 93       	push	r24
    3022:	9f 93       	push	r25
    3024:	af 93       	push	r26
    3026:	bf 93       	push	r27
    3028:	ef 93       	push	r30
    302a:	ff 93       	push	r31
    302c:	e0 91 77 21 	lds	r30, 0x2177
    3030:	f0 91 78 21 	lds	r31, 0x2178
    3034:	30 97       	sbiw	r30, 0x00	; 0
    3036:	29 f0       	breq	.+10     	; 0x3042 <__vector_66+0x3c>
    3038:	80 91 6d 22 	lds	r24, 0x226D
    303c:	90 91 6e 22 	lds	r25, 0x226E
    3040:	19 95       	eicall
    3042:	ff 91       	pop	r31
    3044:	ef 91       	pop	r30
    3046:	bf 91       	pop	r27
    3048:	af 91       	pop	r26
    304a:	9f 91       	pop	r25
    304c:	8f 91       	pop	r24
    304e:	7f 91       	pop	r23
    3050:	6f 91       	pop	r22
    3052:	5f 91       	pop	r21
    3054:	4f 91       	pop	r20
    3056:	3f 91       	pop	r19
    3058:	2f 91       	pop	r18
    305a:	0f 90       	pop	r0
    305c:	0b be       	out	0x3b, r0	; 59
    305e:	0f 90       	pop	r0
    3060:	0f be       	out	0x3f, r0	; 63
    3062:	0f 90       	pop	r0
    3064:	1f 90       	pop	r1
    3066:	18 95       	reti

00003068 <__vector_67>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT1_vect)      /* External Interrupt 1 */
    3068:	1f 92       	push	r1
    306a:	0f 92       	push	r0
    306c:	0f b6       	in	r0, 0x3f	; 63
    306e:	0f 92       	push	r0
    3070:	11 24       	eor	r1, r1
    3072:	0b b6       	in	r0, 0x3b	; 59
    3074:	0f 92       	push	r0
    3076:	2f 93       	push	r18
    3078:	3f 93       	push	r19
    307a:	4f 93       	push	r20
    307c:	5f 93       	push	r21
    307e:	6f 93       	push	r22
    3080:	7f 93       	push	r23
    3082:	8f 93       	push	r24
    3084:	9f 93       	push	r25
    3086:	af 93       	push	r26
    3088:	bf 93       	push	r27
    308a:	ef 93       	push	r30
    308c:	ff 93       	push	r31
    308e:	e0 91 79 21 	lds	r30, 0x2179
    3092:	f0 91 7a 21 	lds	r31, 0x217A
    3096:	30 97       	sbiw	r30, 0x00	; 0
    3098:	29 f0       	breq	.+10     	; 0x30a4 <__vector_67+0x3c>
    309a:	80 91 6f 22 	lds	r24, 0x226F
    309e:	90 91 70 22 	lds	r25, 0x2270
    30a2:	19 95       	eicall
    30a4:	ff 91       	pop	r31
    30a6:	ef 91       	pop	r30
    30a8:	bf 91       	pop	r27
    30aa:	af 91       	pop	r26
    30ac:	9f 91       	pop	r25
    30ae:	8f 91       	pop	r24
    30b0:	7f 91       	pop	r23
    30b2:	6f 91       	pop	r22
    30b4:	5f 91       	pop	r21
    30b6:	4f 91       	pop	r20
    30b8:	3f 91       	pop	r19
    30ba:	2f 91       	pop	r18
    30bc:	0f 90       	pop	r0
    30be:	0b be       	out	0x3b, r0	; 59
    30c0:	0f 90       	pop	r0
    30c2:	0f be       	out	0x3f, r0	; 63
    30c4:	0f 90       	pop	r0
    30c6:	1f 90       	pop	r1
    30c8:	18 95       	reti

000030ca <__vector_68>:

/* ACA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC0_vect)      /* AC0 Interrupt */
    30ca:	1f 92       	push	r1
    30cc:	0f 92       	push	r0
    30ce:	0f b6       	in	r0, 0x3f	; 63
    30d0:	0f 92       	push	r0
    30d2:	11 24       	eor	r1, r1
    30d4:	0b b6       	in	r0, 0x3b	; 59
    30d6:	0f 92       	push	r0
    30d8:	2f 93       	push	r18
    30da:	3f 93       	push	r19
    30dc:	4f 93       	push	r20
    30de:	5f 93       	push	r21
    30e0:	6f 93       	push	r22
    30e2:	7f 93       	push	r23
    30e4:	8f 93       	push	r24
    30e6:	9f 93       	push	r25
    30e8:	af 93       	push	r26
    30ea:	bf 93       	push	r27
    30ec:	ef 93       	push	r30
    30ee:	ff 93       	push	r31
    30f0:	e0 91 7b 21 	lds	r30, 0x217B
    30f4:	f0 91 7c 21 	lds	r31, 0x217C
    30f8:	30 97       	sbiw	r30, 0x00	; 0
    30fa:	29 f0       	breq	.+10     	; 0x3106 <__vector_68+0x3c>
    30fc:	80 91 71 22 	lds	r24, 0x2271
    3100:	90 91 72 22 	lds	r25, 0x2272
    3104:	19 95       	eicall
    3106:	ff 91       	pop	r31
    3108:	ef 91       	pop	r30
    310a:	bf 91       	pop	r27
    310c:	af 91       	pop	r26
    310e:	9f 91       	pop	r25
    3110:	8f 91       	pop	r24
    3112:	7f 91       	pop	r23
    3114:	6f 91       	pop	r22
    3116:	5f 91       	pop	r21
    3118:	4f 91       	pop	r20
    311a:	3f 91       	pop	r19
    311c:	2f 91       	pop	r18
    311e:	0f 90       	pop	r0
    3120:	0b be       	out	0x3b, r0	; 59
    3122:	0f 90       	pop	r0
    3124:	0f be       	out	0x3f, r0	; 63
    3126:	0f 90       	pop	r0
    3128:	1f 90       	pop	r1
    312a:	18 95       	reti

0000312c <__vector_69>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC1_vect)      /* AC1 Interrupt */
    312c:	1f 92       	push	r1
    312e:	0f 92       	push	r0
    3130:	0f b6       	in	r0, 0x3f	; 63
    3132:	0f 92       	push	r0
    3134:	11 24       	eor	r1, r1
    3136:	0b b6       	in	r0, 0x3b	; 59
    3138:	0f 92       	push	r0
    313a:	2f 93       	push	r18
    313c:	3f 93       	push	r19
    313e:	4f 93       	push	r20
    3140:	5f 93       	push	r21
    3142:	6f 93       	push	r22
    3144:	7f 93       	push	r23
    3146:	8f 93       	push	r24
    3148:	9f 93       	push	r25
    314a:	af 93       	push	r26
    314c:	bf 93       	push	r27
    314e:	ef 93       	push	r30
    3150:	ff 93       	push	r31
    3152:	e0 91 7d 21 	lds	r30, 0x217D
    3156:	f0 91 7e 21 	lds	r31, 0x217E
    315a:	30 97       	sbiw	r30, 0x00	; 0
    315c:	29 f0       	breq	.+10     	; 0x3168 <__vector_69+0x3c>
    315e:	80 91 73 22 	lds	r24, 0x2273
    3162:	90 91 74 22 	lds	r25, 0x2274
    3166:	19 95       	eicall
    3168:	ff 91       	pop	r31
    316a:	ef 91       	pop	r30
    316c:	bf 91       	pop	r27
    316e:	af 91       	pop	r26
    3170:	9f 91       	pop	r25
    3172:	8f 91       	pop	r24
    3174:	7f 91       	pop	r23
    3176:	6f 91       	pop	r22
    3178:	5f 91       	pop	r21
    317a:	4f 91       	pop	r20
    317c:	3f 91       	pop	r19
    317e:	2f 91       	pop	r18
    3180:	0f 90       	pop	r0
    3182:	0b be       	out	0x3b, r0	; 59
    3184:	0f 90       	pop	r0
    3186:	0f be       	out	0x3f, r0	; 63
    3188:	0f 90       	pop	r0
    318a:	1f 90       	pop	r1
    318c:	18 95       	reti

0000318e <__vector_70>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_ACW_vect)      /* ACW Window Mode Interrupt */
    318e:	1f 92       	push	r1
    3190:	0f 92       	push	r0
    3192:	0f b6       	in	r0, 0x3f	; 63
    3194:	0f 92       	push	r0
    3196:	11 24       	eor	r1, r1
    3198:	0b b6       	in	r0, 0x3b	; 59
    319a:	0f 92       	push	r0
    319c:	2f 93       	push	r18
    319e:	3f 93       	push	r19
    31a0:	4f 93       	push	r20
    31a2:	5f 93       	push	r21
    31a4:	6f 93       	push	r22
    31a6:	7f 93       	push	r23
    31a8:	8f 93       	push	r24
    31aa:	9f 93       	push	r25
    31ac:	af 93       	push	r26
    31ae:	bf 93       	push	r27
    31b0:	ef 93       	push	r30
    31b2:	ff 93       	push	r31
    31b4:	e0 91 7f 21 	lds	r30, 0x217F
    31b8:	f0 91 80 21 	lds	r31, 0x2180
    31bc:	30 97       	sbiw	r30, 0x00	; 0
    31be:	29 f0       	breq	.+10     	; 0x31ca <__vector_70+0x3c>
    31c0:	80 91 75 22 	lds	r24, 0x2275
    31c4:	90 91 76 22 	lds	r25, 0x2276
    31c8:	19 95       	eicall
    31ca:	ff 91       	pop	r31
    31cc:	ef 91       	pop	r30
    31ce:	bf 91       	pop	r27
    31d0:	af 91       	pop	r26
    31d2:	9f 91       	pop	r25
    31d4:	8f 91       	pop	r24
    31d6:	7f 91       	pop	r23
    31d8:	6f 91       	pop	r22
    31da:	5f 91       	pop	r21
    31dc:	4f 91       	pop	r20
    31de:	3f 91       	pop	r19
    31e0:	2f 91       	pop	r18
    31e2:	0f 90       	pop	r0
    31e4:	0b be       	out	0x3b, r0	; 59
    31e6:	0f 90       	pop	r0
    31e8:	0f be       	out	0x3f, r0	; 63
    31ea:	0f 90       	pop	r0
    31ec:	1f 90       	pop	r1
    31ee:	18 95       	reti

000031f0 <__vector_71>:

/* ADCA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH0_vect)      /* Interrupt 0 */
    31f0:	1f 92       	push	r1
    31f2:	0f 92       	push	r0
    31f4:	0f b6       	in	r0, 0x3f	; 63
    31f6:	0f 92       	push	r0
    31f8:	11 24       	eor	r1, r1
    31fa:	0b b6       	in	r0, 0x3b	; 59
    31fc:	0f 92       	push	r0
    31fe:	2f 93       	push	r18
    3200:	3f 93       	push	r19
    3202:	4f 93       	push	r20
    3204:	5f 93       	push	r21
    3206:	6f 93       	push	r22
    3208:	7f 93       	push	r23
    320a:	8f 93       	push	r24
    320c:	9f 93       	push	r25
    320e:	af 93       	push	r26
    3210:	bf 93       	push	r27
    3212:	ef 93       	push	r30
    3214:	ff 93       	push	r31
    3216:	e0 91 81 21 	lds	r30, 0x2181
    321a:	f0 91 82 21 	lds	r31, 0x2182
    321e:	30 97       	sbiw	r30, 0x00	; 0
    3220:	29 f0       	breq	.+10     	; 0x322c <__vector_71+0x3c>
    3222:	80 91 77 22 	lds	r24, 0x2277
    3226:	90 91 78 22 	lds	r25, 0x2278
    322a:	19 95       	eicall
    322c:	ff 91       	pop	r31
    322e:	ef 91       	pop	r30
    3230:	bf 91       	pop	r27
    3232:	af 91       	pop	r26
    3234:	9f 91       	pop	r25
    3236:	8f 91       	pop	r24
    3238:	7f 91       	pop	r23
    323a:	6f 91       	pop	r22
    323c:	5f 91       	pop	r21
    323e:	4f 91       	pop	r20
    3240:	3f 91       	pop	r19
    3242:	2f 91       	pop	r18
    3244:	0f 90       	pop	r0
    3246:	0b be       	out	0x3b, r0	; 59
    3248:	0f 90       	pop	r0
    324a:	0f be       	out	0x3f, r0	; 63
    324c:	0f 90       	pop	r0
    324e:	1f 90       	pop	r1
    3250:	18 95       	reti

00003252 <__vector_72>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH1_vect)      /* Interrupt 1 */
    3252:	1f 92       	push	r1
    3254:	0f 92       	push	r0
    3256:	0f b6       	in	r0, 0x3f	; 63
    3258:	0f 92       	push	r0
    325a:	11 24       	eor	r1, r1
    325c:	0b b6       	in	r0, 0x3b	; 59
    325e:	0f 92       	push	r0
    3260:	2f 93       	push	r18
    3262:	3f 93       	push	r19
    3264:	4f 93       	push	r20
    3266:	5f 93       	push	r21
    3268:	6f 93       	push	r22
    326a:	7f 93       	push	r23
    326c:	8f 93       	push	r24
    326e:	9f 93       	push	r25
    3270:	af 93       	push	r26
    3272:	bf 93       	push	r27
    3274:	ef 93       	push	r30
    3276:	ff 93       	push	r31
    3278:	e0 91 83 21 	lds	r30, 0x2183
    327c:	f0 91 84 21 	lds	r31, 0x2184
    3280:	30 97       	sbiw	r30, 0x00	; 0
    3282:	29 f0       	breq	.+10     	; 0x328e <__vector_72+0x3c>
    3284:	80 91 79 22 	lds	r24, 0x2279
    3288:	90 91 7a 22 	lds	r25, 0x227A
    328c:	19 95       	eicall
    328e:	ff 91       	pop	r31
    3290:	ef 91       	pop	r30
    3292:	bf 91       	pop	r27
    3294:	af 91       	pop	r26
    3296:	9f 91       	pop	r25
    3298:	8f 91       	pop	r24
    329a:	7f 91       	pop	r23
    329c:	6f 91       	pop	r22
    329e:	5f 91       	pop	r21
    32a0:	4f 91       	pop	r20
    32a2:	3f 91       	pop	r19
    32a4:	2f 91       	pop	r18
    32a6:	0f 90       	pop	r0
    32a8:	0b be       	out	0x3b, r0	; 59
    32aa:	0f 90       	pop	r0
    32ac:	0f be       	out	0x3f, r0	; 63
    32ae:	0f 90       	pop	r0
    32b0:	1f 90       	pop	r1
    32b2:	18 95       	reti

000032b4 <__vector_73>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH2_vect)      /* Interrupt 2 */
    32b4:	1f 92       	push	r1
    32b6:	0f 92       	push	r0
    32b8:	0f b6       	in	r0, 0x3f	; 63
    32ba:	0f 92       	push	r0
    32bc:	11 24       	eor	r1, r1
    32be:	0b b6       	in	r0, 0x3b	; 59
    32c0:	0f 92       	push	r0
    32c2:	2f 93       	push	r18
    32c4:	3f 93       	push	r19
    32c6:	4f 93       	push	r20
    32c8:	5f 93       	push	r21
    32ca:	6f 93       	push	r22
    32cc:	7f 93       	push	r23
    32ce:	8f 93       	push	r24
    32d0:	9f 93       	push	r25
    32d2:	af 93       	push	r26
    32d4:	bf 93       	push	r27
    32d6:	ef 93       	push	r30
    32d8:	ff 93       	push	r31
    32da:	e0 91 85 21 	lds	r30, 0x2185
    32de:	f0 91 86 21 	lds	r31, 0x2186
    32e2:	30 97       	sbiw	r30, 0x00	; 0
    32e4:	29 f0       	breq	.+10     	; 0x32f0 <__vector_73+0x3c>
    32e6:	80 91 7b 22 	lds	r24, 0x227B
    32ea:	90 91 7c 22 	lds	r25, 0x227C
    32ee:	19 95       	eicall
    32f0:	ff 91       	pop	r31
    32f2:	ef 91       	pop	r30
    32f4:	bf 91       	pop	r27
    32f6:	af 91       	pop	r26
    32f8:	9f 91       	pop	r25
    32fa:	8f 91       	pop	r24
    32fc:	7f 91       	pop	r23
    32fe:	6f 91       	pop	r22
    3300:	5f 91       	pop	r21
    3302:	4f 91       	pop	r20
    3304:	3f 91       	pop	r19
    3306:	2f 91       	pop	r18
    3308:	0f 90       	pop	r0
    330a:	0b be       	out	0x3b, r0	; 59
    330c:	0f 90       	pop	r0
    330e:	0f be       	out	0x3f, r0	; 63
    3310:	0f 90       	pop	r0
    3312:	1f 90       	pop	r1
    3314:	18 95       	reti

00003316 <__vector_74>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH3_vect)      /* Interrupt 3 */
    3316:	1f 92       	push	r1
    3318:	0f 92       	push	r0
    331a:	0f b6       	in	r0, 0x3f	; 63
    331c:	0f 92       	push	r0
    331e:	11 24       	eor	r1, r1
    3320:	0b b6       	in	r0, 0x3b	; 59
    3322:	0f 92       	push	r0
    3324:	2f 93       	push	r18
    3326:	3f 93       	push	r19
    3328:	4f 93       	push	r20
    332a:	5f 93       	push	r21
    332c:	6f 93       	push	r22
    332e:	7f 93       	push	r23
    3330:	8f 93       	push	r24
    3332:	9f 93       	push	r25
    3334:	af 93       	push	r26
    3336:	bf 93       	push	r27
    3338:	ef 93       	push	r30
    333a:	ff 93       	push	r31
    333c:	e0 91 87 21 	lds	r30, 0x2187
    3340:	f0 91 88 21 	lds	r31, 0x2188
    3344:	30 97       	sbiw	r30, 0x00	; 0
    3346:	29 f0       	breq	.+10     	; 0x3352 <__vector_74+0x3c>
    3348:	80 91 7d 22 	lds	r24, 0x227D
    334c:	90 91 7e 22 	lds	r25, 0x227E
    3350:	19 95       	eicall
    3352:	ff 91       	pop	r31
    3354:	ef 91       	pop	r30
    3356:	bf 91       	pop	r27
    3358:	af 91       	pop	r26
    335a:	9f 91       	pop	r25
    335c:	8f 91       	pop	r24
    335e:	7f 91       	pop	r23
    3360:	6f 91       	pop	r22
    3362:	5f 91       	pop	r21
    3364:	4f 91       	pop	r20
    3366:	3f 91       	pop	r19
    3368:	2f 91       	pop	r18
    336a:	0f 90       	pop	r0
    336c:	0b be       	out	0x3b, r0	; 59
    336e:	0f 90       	pop	r0
    3370:	0f be       	out	0x3f, r0	; 63
    3372:	0f 90       	pop	r0
    3374:	1f 90       	pop	r1
    3376:	18 95       	reti

00003378 <__vector_77>:

/* TCD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_OVF_vect)      /* Overflow Interrupt */
    3378:	1f 92       	push	r1
    337a:	0f 92       	push	r0
    337c:	0f b6       	in	r0, 0x3f	; 63
    337e:	0f 92       	push	r0
    3380:	11 24       	eor	r1, r1
    3382:	0b b6       	in	r0, 0x3b	; 59
    3384:	0f 92       	push	r0
    3386:	2f 93       	push	r18
    3388:	3f 93       	push	r19
    338a:	4f 93       	push	r20
    338c:	5f 93       	push	r21
    338e:	6f 93       	push	r22
    3390:	7f 93       	push	r23
    3392:	8f 93       	push	r24
    3394:	9f 93       	push	r25
    3396:	af 93       	push	r26
    3398:	bf 93       	push	r27
    339a:	ef 93       	push	r30
    339c:	ff 93       	push	r31
    339e:	e0 91 8d 21 	lds	r30, 0x218D
    33a2:	f0 91 8e 21 	lds	r31, 0x218E
    33a6:	30 97       	sbiw	r30, 0x00	; 0
    33a8:	29 f0       	breq	.+10     	; 0x33b4 <__vector_77+0x3c>
    33aa:	80 91 83 22 	lds	r24, 0x2283
    33ae:	90 91 84 22 	lds	r25, 0x2284
    33b2:	19 95       	eicall
    33b4:	ff 91       	pop	r31
    33b6:	ef 91       	pop	r30
    33b8:	bf 91       	pop	r27
    33ba:	af 91       	pop	r26
    33bc:	9f 91       	pop	r25
    33be:	8f 91       	pop	r24
    33c0:	7f 91       	pop	r23
    33c2:	6f 91       	pop	r22
    33c4:	5f 91       	pop	r21
    33c6:	4f 91       	pop	r20
    33c8:	3f 91       	pop	r19
    33ca:	2f 91       	pop	r18
    33cc:	0f 90       	pop	r0
    33ce:	0b be       	out	0x3b, r0	; 59
    33d0:	0f 90       	pop	r0
    33d2:	0f be       	out	0x3f, r0	; 63
    33d4:	0f 90       	pop	r0
    33d6:	1f 90       	pop	r1
    33d8:	18 95       	reti

000033da <__vector_78>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_ERR_vect)      /* Error Interrupt */
    33da:	1f 92       	push	r1
    33dc:	0f 92       	push	r0
    33de:	0f b6       	in	r0, 0x3f	; 63
    33e0:	0f 92       	push	r0
    33e2:	11 24       	eor	r1, r1
    33e4:	0b b6       	in	r0, 0x3b	; 59
    33e6:	0f 92       	push	r0
    33e8:	2f 93       	push	r18
    33ea:	3f 93       	push	r19
    33ec:	4f 93       	push	r20
    33ee:	5f 93       	push	r21
    33f0:	6f 93       	push	r22
    33f2:	7f 93       	push	r23
    33f4:	8f 93       	push	r24
    33f6:	9f 93       	push	r25
    33f8:	af 93       	push	r26
    33fa:	bf 93       	push	r27
    33fc:	ef 93       	push	r30
    33fe:	ff 93       	push	r31
    3400:	e0 91 8f 21 	lds	r30, 0x218F
    3404:	f0 91 90 21 	lds	r31, 0x2190
    3408:	30 97       	sbiw	r30, 0x00	; 0
    340a:	29 f0       	breq	.+10     	; 0x3416 <__vector_78+0x3c>
    340c:	80 91 85 22 	lds	r24, 0x2285
    3410:	90 91 86 22 	lds	r25, 0x2286
    3414:	19 95       	eicall
    3416:	ff 91       	pop	r31
    3418:	ef 91       	pop	r30
    341a:	bf 91       	pop	r27
    341c:	af 91       	pop	r26
    341e:	9f 91       	pop	r25
    3420:	8f 91       	pop	r24
    3422:	7f 91       	pop	r23
    3424:	6f 91       	pop	r22
    3426:	5f 91       	pop	r21
    3428:	4f 91       	pop	r20
    342a:	3f 91       	pop	r19
    342c:	2f 91       	pop	r18
    342e:	0f 90       	pop	r0
    3430:	0b be       	out	0x3b, r0	; 59
    3432:	0f 90       	pop	r0
    3434:	0f be       	out	0x3f, r0	; 63
    3436:	0f 90       	pop	r0
    3438:	1f 90       	pop	r1
    343a:	18 95       	reti

0000343c <__vector_79>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCA_vect)      /* Compare or Capture A Interrupt */
    343c:	1f 92       	push	r1
    343e:	0f 92       	push	r0
    3440:	0f b6       	in	r0, 0x3f	; 63
    3442:	0f 92       	push	r0
    3444:	11 24       	eor	r1, r1
    3446:	0b b6       	in	r0, 0x3b	; 59
    3448:	0f 92       	push	r0
    344a:	2f 93       	push	r18
    344c:	3f 93       	push	r19
    344e:	4f 93       	push	r20
    3450:	5f 93       	push	r21
    3452:	6f 93       	push	r22
    3454:	7f 93       	push	r23
    3456:	8f 93       	push	r24
    3458:	9f 93       	push	r25
    345a:	af 93       	push	r26
    345c:	bf 93       	push	r27
    345e:	ef 93       	push	r30
    3460:	ff 93       	push	r31
    3462:	e0 91 91 21 	lds	r30, 0x2191
    3466:	f0 91 92 21 	lds	r31, 0x2192
    346a:	30 97       	sbiw	r30, 0x00	; 0
    346c:	29 f0       	breq	.+10     	; 0x3478 <__vector_79+0x3c>
    346e:	80 91 87 22 	lds	r24, 0x2287
    3472:	90 91 88 22 	lds	r25, 0x2288
    3476:	19 95       	eicall
    3478:	ff 91       	pop	r31
    347a:	ef 91       	pop	r30
    347c:	bf 91       	pop	r27
    347e:	af 91       	pop	r26
    3480:	9f 91       	pop	r25
    3482:	8f 91       	pop	r24
    3484:	7f 91       	pop	r23
    3486:	6f 91       	pop	r22
    3488:	5f 91       	pop	r21
    348a:	4f 91       	pop	r20
    348c:	3f 91       	pop	r19
    348e:	2f 91       	pop	r18
    3490:	0f 90       	pop	r0
    3492:	0b be       	out	0x3b, r0	; 59
    3494:	0f 90       	pop	r0
    3496:	0f be       	out	0x3f, r0	; 63
    3498:	0f 90       	pop	r0
    349a:	1f 90       	pop	r1
    349c:	18 95       	reti

0000349e <__vector_80>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCB_vect)      /* Compare or Capture B Interrupt */
    349e:	1f 92       	push	r1
    34a0:	0f 92       	push	r0
    34a2:	0f b6       	in	r0, 0x3f	; 63
    34a4:	0f 92       	push	r0
    34a6:	11 24       	eor	r1, r1
    34a8:	0b b6       	in	r0, 0x3b	; 59
    34aa:	0f 92       	push	r0
    34ac:	2f 93       	push	r18
    34ae:	3f 93       	push	r19
    34b0:	4f 93       	push	r20
    34b2:	5f 93       	push	r21
    34b4:	6f 93       	push	r22
    34b6:	7f 93       	push	r23
    34b8:	8f 93       	push	r24
    34ba:	9f 93       	push	r25
    34bc:	af 93       	push	r26
    34be:	bf 93       	push	r27
    34c0:	ef 93       	push	r30
    34c2:	ff 93       	push	r31
    34c4:	e0 91 93 21 	lds	r30, 0x2193
    34c8:	f0 91 94 21 	lds	r31, 0x2194
    34cc:	30 97       	sbiw	r30, 0x00	; 0
    34ce:	29 f0       	breq	.+10     	; 0x34da <__vector_80+0x3c>
    34d0:	80 91 89 22 	lds	r24, 0x2289
    34d4:	90 91 8a 22 	lds	r25, 0x228A
    34d8:	19 95       	eicall
    34da:	ff 91       	pop	r31
    34dc:	ef 91       	pop	r30
    34de:	bf 91       	pop	r27
    34e0:	af 91       	pop	r26
    34e2:	9f 91       	pop	r25
    34e4:	8f 91       	pop	r24
    34e6:	7f 91       	pop	r23
    34e8:	6f 91       	pop	r22
    34ea:	5f 91       	pop	r21
    34ec:	4f 91       	pop	r20
    34ee:	3f 91       	pop	r19
    34f0:	2f 91       	pop	r18
    34f2:	0f 90       	pop	r0
    34f4:	0b be       	out	0x3b, r0	; 59
    34f6:	0f 90       	pop	r0
    34f8:	0f be       	out	0x3f, r0	; 63
    34fa:	0f 90       	pop	r0
    34fc:	1f 90       	pop	r1
    34fe:	18 95       	reti

00003500 <__vector_81>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCC_vect)      /* Compare or Capture C Interrupt */
    3500:	1f 92       	push	r1
    3502:	0f 92       	push	r0
    3504:	0f b6       	in	r0, 0x3f	; 63
    3506:	0f 92       	push	r0
    3508:	11 24       	eor	r1, r1
    350a:	0b b6       	in	r0, 0x3b	; 59
    350c:	0f 92       	push	r0
    350e:	2f 93       	push	r18
    3510:	3f 93       	push	r19
    3512:	4f 93       	push	r20
    3514:	5f 93       	push	r21
    3516:	6f 93       	push	r22
    3518:	7f 93       	push	r23
    351a:	8f 93       	push	r24
    351c:	9f 93       	push	r25
    351e:	af 93       	push	r26
    3520:	bf 93       	push	r27
    3522:	ef 93       	push	r30
    3524:	ff 93       	push	r31
    3526:	e0 91 95 21 	lds	r30, 0x2195
    352a:	f0 91 96 21 	lds	r31, 0x2196
    352e:	30 97       	sbiw	r30, 0x00	; 0
    3530:	29 f0       	breq	.+10     	; 0x353c <__vector_81+0x3c>
    3532:	80 91 8b 22 	lds	r24, 0x228B
    3536:	90 91 8c 22 	lds	r25, 0x228C
    353a:	19 95       	eicall
    353c:	ff 91       	pop	r31
    353e:	ef 91       	pop	r30
    3540:	bf 91       	pop	r27
    3542:	af 91       	pop	r26
    3544:	9f 91       	pop	r25
    3546:	8f 91       	pop	r24
    3548:	7f 91       	pop	r23
    354a:	6f 91       	pop	r22
    354c:	5f 91       	pop	r21
    354e:	4f 91       	pop	r20
    3550:	3f 91       	pop	r19
    3552:	2f 91       	pop	r18
    3554:	0f 90       	pop	r0
    3556:	0b be       	out	0x3b, r0	; 59
    3558:	0f 90       	pop	r0
    355a:	0f be       	out	0x3f, r0	; 63
    355c:	0f 90       	pop	r0
    355e:	1f 90       	pop	r1
    3560:	18 95       	reti

00003562 <__vector_82>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCD_vect)      /* Compare or Capture D Interrupt */
    3562:	1f 92       	push	r1
    3564:	0f 92       	push	r0
    3566:	0f b6       	in	r0, 0x3f	; 63
    3568:	0f 92       	push	r0
    356a:	11 24       	eor	r1, r1
    356c:	0b b6       	in	r0, 0x3b	; 59
    356e:	0f 92       	push	r0
    3570:	2f 93       	push	r18
    3572:	3f 93       	push	r19
    3574:	4f 93       	push	r20
    3576:	5f 93       	push	r21
    3578:	6f 93       	push	r22
    357a:	7f 93       	push	r23
    357c:	8f 93       	push	r24
    357e:	9f 93       	push	r25
    3580:	af 93       	push	r26
    3582:	bf 93       	push	r27
    3584:	ef 93       	push	r30
    3586:	ff 93       	push	r31
    3588:	e0 91 97 21 	lds	r30, 0x2197
    358c:	f0 91 98 21 	lds	r31, 0x2198
    3590:	30 97       	sbiw	r30, 0x00	; 0
    3592:	29 f0       	breq	.+10     	; 0x359e <__vector_82+0x3c>
    3594:	80 91 8d 22 	lds	r24, 0x228D
    3598:	90 91 8e 22 	lds	r25, 0x228E
    359c:	19 95       	eicall
    359e:	ff 91       	pop	r31
    35a0:	ef 91       	pop	r30
    35a2:	bf 91       	pop	r27
    35a4:	af 91       	pop	r26
    35a6:	9f 91       	pop	r25
    35a8:	8f 91       	pop	r24
    35aa:	7f 91       	pop	r23
    35ac:	6f 91       	pop	r22
    35ae:	5f 91       	pop	r21
    35b0:	4f 91       	pop	r20
    35b2:	3f 91       	pop	r19
    35b4:	2f 91       	pop	r18
    35b6:	0f 90       	pop	r0
    35b8:	0b be       	out	0x3b, r0	; 59
    35ba:	0f 90       	pop	r0
    35bc:	0f be       	out	0x3f, r0	; 63
    35be:	0f 90       	pop	r0
    35c0:	1f 90       	pop	r1
    35c2:	18 95       	reti

000035c4 <__vector_83>:

/* TCD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_OVF_vect)      /* Overflow Interrupt */
    35c4:	1f 92       	push	r1
    35c6:	0f 92       	push	r0
    35c8:	0f b6       	in	r0, 0x3f	; 63
    35ca:	0f 92       	push	r0
    35cc:	11 24       	eor	r1, r1
    35ce:	0b b6       	in	r0, 0x3b	; 59
    35d0:	0f 92       	push	r0
    35d2:	2f 93       	push	r18
    35d4:	3f 93       	push	r19
    35d6:	4f 93       	push	r20
    35d8:	5f 93       	push	r21
    35da:	6f 93       	push	r22
    35dc:	7f 93       	push	r23
    35de:	8f 93       	push	r24
    35e0:	9f 93       	push	r25
    35e2:	af 93       	push	r26
    35e4:	bf 93       	push	r27
    35e6:	ef 93       	push	r30
    35e8:	ff 93       	push	r31
    35ea:	e0 91 99 21 	lds	r30, 0x2199
    35ee:	f0 91 9a 21 	lds	r31, 0x219A
    35f2:	30 97       	sbiw	r30, 0x00	; 0
    35f4:	29 f0       	breq	.+10     	; 0x3600 <__vector_83+0x3c>
    35f6:	80 91 8f 22 	lds	r24, 0x228F
    35fa:	90 91 90 22 	lds	r25, 0x2290
    35fe:	19 95       	eicall
    3600:	ff 91       	pop	r31
    3602:	ef 91       	pop	r30
    3604:	bf 91       	pop	r27
    3606:	af 91       	pop	r26
    3608:	9f 91       	pop	r25
    360a:	8f 91       	pop	r24
    360c:	7f 91       	pop	r23
    360e:	6f 91       	pop	r22
    3610:	5f 91       	pop	r21
    3612:	4f 91       	pop	r20
    3614:	3f 91       	pop	r19
    3616:	2f 91       	pop	r18
    3618:	0f 90       	pop	r0
    361a:	0b be       	out	0x3b, r0	; 59
    361c:	0f 90       	pop	r0
    361e:	0f be       	out	0x3f, r0	; 63
    3620:	0f 90       	pop	r0
    3622:	1f 90       	pop	r1
    3624:	18 95       	reti

00003626 <__vector_84>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_ERR_vect)      /* Error Interrupt */
    3626:	1f 92       	push	r1
    3628:	0f 92       	push	r0
    362a:	0f b6       	in	r0, 0x3f	; 63
    362c:	0f 92       	push	r0
    362e:	11 24       	eor	r1, r1
    3630:	0b b6       	in	r0, 0x3b	; 59
    3632:	0f 92       	push	r0
    3634:	2f 93       	push	r18
    3636:	3f 93       	push	r19
    3638:	4f 93       	push	r20
    363a:	5f 93       	push	r21
    363c:	6f 93       	push	r22
    363e:	7f 93       	push	r23
    3640:	8f 93       	push	r24
    3642:	9f 93       	push	r25
    3644:	af 93       	push	r26
    3646:	bf 93       	push	r27
    3648:	ef 93       	push	r30
    364a:	ff 93       	push	r31
    364c:	e0 91 9b 21 	lds	r30, 0x219B
    3650:	f0 91 9c 21 	lds	r31, 0x219C
    3654:	30 97       	sbiw	r30, 0x00	; 0
    3656:	29 f0       	breq	.+10     	; 0x3662 <__vector_84+0x3c>
    3658:	80 91 91 22 	lds	r24, 0x2291
    365c:	90 91 92 22 	lds	r25, 0x2292
    3660:	19 95       	eicall
    3662:	ff 91       	pop	r31
    3664:	ef 91       	pop	r30
    3666:	bf 91       	pop	r27
    3668:	af 91       	pop	r26
    366a:	9f 91       	pop	r25
    366c:	8f 91       	pop	r24
    366e:	7f 91       	pop	r23
    3670:	6f 91       	pop	r22
    3672:	5f 91       	pop	r21
    3674:	4f 91       	pop	r20
    3676:	3f 91       	pop	r19
    3678:	2f 91       	pop	r18
    367a:	0f 90       	pop	r0
    367c:	0b be       	out	0x3b, r0	; 59
    367e:	0f 90       	pop	r0
    3680:	0f be       	out	0x3f, r0	; 63
    3682:	0f 90       	pop	r0
    3684:	1f 90       	pop	r1
    3686:	18 95       	reti

00003688 <__vector_85>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCA_vect)      /* Compare or Capture A Interrupt */
    3688:	1f 92       	push	r1
    368a:	0f 92       	push	r0
    368c:	0f b6       	in	r0, 0x3f	; 63
    368e:	0f 92       	push	r0
    3690:	11 24       	eor	r1, r1
    3692:	0b b6       	in	r0, 0x3b	; 59
    3694:	0f 92       	push	r0
    3696:	2f 93       	push	r18
    3698:	3f 93       	push	r19
    369a:	4f 93       	push	r20
    369c:	5f 93       	push	r21
    369e:	6f 93       	push	r22
    36a0:	7f 93       	push	r23
    36a2:	8f 93       	push	r24
    36a4:	9f 93       	push	r25
    36a6:	af 93       	push	r26
    36a8:	bf 93       	push	r27
    36aa:	ef 93       	push	r30
    36ac:	ff 93       	push	r31
    36ae:	e0 91 9d 21 	lds	r30, 0x219D
    36b2:	f0 91 9e 21 	lds	r31, 0x219E
    36b6:	30 97       	sbiw	r30, 0x00	; 0
    36b8:	29 f0       	breq	.+10     	; 0x36c4 <__vector_85+0x3c>
    36ba:	80 91 93 22 	lds	r24, 0x2293
    36be:	90 91 94 22 	lds	r25, 0x2294
    36c2:	19 95       	eicall
    36c4:	ff 91       	pop	r31
    36c6:	ef 91       	pop	r30
    36c8:	bf 91       	pop	r27
    36ca:	af 91       	pop	r26
    36cc:	9f 91       	pop	r25
    36ce:	8f 91       	pop	r24
    36d0:	7f 91       	pop	r23
    36d2:	6f 91       	pop	r22
    36d4:	5f 91       	pop	r21
    36d6:	4f 91       	pop	r20
    36d8:	3f 91       	pop	r19
    36da:	2f 91       	pop	r18
    36dc:	0f 90       	pop	r0
    36de:	0b be       	out	0x3b, r0	; 59
    36e0:	0f 90       	pop	r0
    36e2:	0f be       	out	0x3f, r0	; 63
    36e4:	0f 90       	pop	r0
    36e6:	1f 90       	pop	r1
    36e8:	18 95       	reti

000036ea <__vector_86>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCB_vect)      /* Compare or Capture B Interrupt */
    36ea:	1f 92       	push	r1
    36ec:	0f 92       	push	r0
    36ee:	0f b6       	in	r0, 0x3f	; 63
    36f0:	0f 92       	push	r0
    36f2:	11 24       	eor	r1, r1
    36f4:	0b b6       	in	r0, 0x3b	; 59
    36f6:	0f 92       	push	r0
    36f8:	2f 93       	push	r18
    36fa:	3f 93       	push	r19
    36fc:	4f 93       	push	r20
    36fe:	5f 93       	push	r21
    3700:	6f 93       	push	r22
    3702:	7f 93       	push	r23
    3704:	8f 93       	push	r24
    3706:	9f 93       	push	r25
    3708:	af 93       	push	r26
    370a:	bf 93       	push	r27
    370c:	ef 93       	push	r30
    370e:	ff 93       	push	r31
    3710:	e0 91 9f 21 	lds	r30, 0x219F
    3714:	f0 91 a0 21 	lds	r31, 0x21A0
    3718:	30 97       	sbiw	r30, 0x00	; 0
    371a:	29 f0       	breq	.+10     	; 0x3726 <__vector_86+0x3c>
    371c:	80 91 95 22 	lds	r24, 0x2295
    3720:	90 91 96 22 	lds	r25, 0x2296
    3724:	19 95       	eicall
    3726:	ff 91       	pop	r31
    3728:	ef 91       	pop	r30
    372a:	bf 91       	pop	r27
    372c:	af 91       	pop	r26
    372e:	9f 91       	pop	r25
    3730:	8f 91       	pop	r24
    3732:	7f 91       	pop	r23
    3734:	6f 91       	pop	r22
    3736:	5f 91       	pop	r21
    3738:	4f 91       	pop	r20
    373a:	3f 91       	pop	r19
    373c:	2f 91       	pop	r18
    373e:	0f 90       	pop	r0
    3740:	0b be       	out	0x3b, r0	; 59
    3742:	0f 90       	pop	r0
    3744:	0f be       	out	0x3f, r0	; 63
    3746:	0f 90       	pop	r0
    3748:	1f 90       	pop	r1
    374a:	18 95       	reti

0000374c <__vector_87>:

/* SPID interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPID_INT_vect)      /* SPI Interrupt */
    374c:	1f 92       	push	r1
    374e:	0f 92       	push	r0
    3750:	0f b6       	in	r0, 0x3f	; 63
    3752:	0f 92       	push	r0
    3754:	11 24       	eor	r1, r1
    3756:	0b b6       	in	r0, 0x3b	; 59
    3758:	0f 92       	push	r0
    375a:	2f 93       	push	r18
    375c:	3f 93       	push	r19
    375e:	4f 93       	push	r20
    3760:	5f 93       	push	r21
    3762:	6f 93       	push	r22
    3764:	7f 93       	push	r23
    3766:	8f 93       	push	r24
    3768:	9f 93       	push	r25
    376a:	af 93       	push	r26
    376c:	bf 93       	push	r27
    376e:	ef 93       	push	r30
    3770:	ff 93       	push	r31
    3772:	e0 91 a1 21 	lds	r30, 0x21A1
    3776:	f0 91 a2 21 	lds	r31, 0x21A2
    377a:	30 97       	sbiw	r30, 0x00	; 0
    377c:	29 f0       	breq	.+10     	; 0x3788 <__vector_87+0x3c>
    377e:	80 91 97 22 	lds	r24, 0x2297
    3782:	90 91 98 22 	lds	r25, 0x2298
    3786:	19 95       	eicall
    3788:	ff 91       	pop	r31
    378a:	ef 91       	pop	r30
    378c:	bf 91       	pop	r27
    378e:	af 91       	pop	r26
    3790:	9f 91       	pop	r25
    3792:	8f 91       	pop	r24
    3794:	7f 91       	pop	r23
    3796:	6f 91       	pop	r22
    3798:	5f 91       	pop	r21
    379a:	4f 91       	pop	r20
    379c:	3f 91       	pop	r19
    379e:	2f 91       	pop	r18
    37a0:	0f 90       	pop	r0
    37a2:	0b be       	out	0x3b, r0	; 59
    37a4:	0f 90       	pop	r0
    37a6:	0f be       	out	0x3f, r0	; 63
    37a8:	0f 90       	pop	r0
    37aa:	1f 90       	pop	r1
    37ac:	18 95       	reti

000037ae <__vector_88>:

/* USARTD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_RXC_vect)      /* Reception Complete Interrupt */
    37ae:	1f 92       	push	r1
    37b0:	0f 92       	push	r0
    37b2:	0f b6       	in	r0, 0x3f	; 63
    37b4:	0f 92       	push	r0
    37b6:	11 24       	eor	r1, r1
    37b8:	0b b6       	in	r0, 0x3b	; 59
    37ba:	0f 92       	push	r0
    37bc:	2f 93       	push	r18
    37be:	3f 93       	push	r19
    37c0:	4f 93       	push	r20
    37c2:	5f 93       	push	r21
    37c4:	6f 93       	push	r22
    37c6:	7f 93       	push	r23
    37c8:	8f 93       	push	r24
    37ca:	9f 93       	push	r25
    37cc:	af 93       	push	r26
    37ce:	bf 93       	push	r27
    37d0:	ef 93       	push	r30
    37d2:	ff 93       	push	r31
    37d4:	e0 91 a3 21 	lds	r30, 0x21A3
    37d8:	f0 91 a4 21 	lds	r31, 0x21A4
    37dc:	30 97       	sbiw	r30, 0x00	; 0
    37de:	29 f0       	breq	.+10     	; 0x37ea <__vector_88+0x3c>
    37e0:	80 91 99 22 	lds	r24, 0x2299
    37e4:	90 91 9a 22 	lds	r25, 0x229A
    37e8:	19 95       	eicall
    37ea:	ff 91       	pop	r31
    37ec:	ef 91       	pop	r30
    37ee:	bf 91       	pop	r27
    37f0:	af 91       	pop	r26
    37f2:	9f 91       	pop	r25
    37f4:	8f 91       	pop	r24
    37f6:	7f 91       	pop	r23
    37f8:	6f 91       	pop	r22
    37fa:	5f 91       	pop	r21
    37fc:	4f 91       	pop	r20
    37fe:	3f 91       	pop	r19
    3800:	2f 91       	pop	r18
    3802:	0f 90       	pop	r0
    3804:	0b be       	out	0x3b, r0	; 59
    3806:	0f 90       	pop	r0
    3808:	0f be       	out	0x3f, r0	; 63
    380a:	0f 90       	pop	r0
    380c:	1f 90       	pop	r1
    380e:	18 95       	reti

00003810 <__vector_89>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_DRE_vect)      /* Data Register Empty Interrupt */
    3810:	1f 92       	push	r1
    3812:	0f 92       	push	r0
    3814:	0f b6       	in	r0, 0x3f	; 63
    3816:	0f 92       	push	r0
    3818:	11 24       	eor	r1, r1
    381a:	0b b6       	in	r0, 0x3b	; 59
    381c:	0f 92       	push	r0
    381e:	2f 93       	push	r18
    3820:	3f 93       	push	r19
    3822:	4f 93       	push	r20
    3824:	5f 93       	push	r21
    3826:	6f 93       	push	r22
    3828:	7f 93       	push	r23
    382a:	8f 93       	push	r24
    382c:	9f 93       	push	r25
    382e:	af 93       	push	r26
    3830:	bf 93       	push	r27
    3832:	ef 93       	push	r30
    3834:	ff 93       	push	r31
    3836:	e0 91 a5 21 	lds	r30, 0x21A5
    383a:	f0 91 a6 21 	lds	r31, 0x21A6
    383e:	30 97       	sbiw	r30, 0x00	; 0
    3840:	29 f0       	breq	.+10     	; 0x384c <__vector_89+0x3c>
    3842:	80 91 9b 22 	lds	r24, 0x229B
    3846:	90 91 9c 22 	lds	r25, 0x229C
    384a:	19 95       	eicall
    384c:	ff 91       	pop	r31
    384e:	ef 91       	pop	r30
    3850:	bf 91       	pop	r27
    3852:	af 91       	pop	r26
    3854:	9f 91       	pop	r25
    3856:	8f 91       	pop	r24
    3858:	7f 91       	pop	r23
    385a:	6f 91       	pop	r22
    385c:	5f 91       	pop	r21
    385e:	4f 91       	pop	r20
    3860:	3f 91       	pop	r19
    3862:	2f 91       	pop	r18
    3864:	0f 90       	pop	r0
    3866:	0b be       	out	0x3b, r0	; 59
    3868:	0f 90       	pop	r0
    386a:	0f be       	out	0x3f, r0	; 63
    386c:	0f 90       	pop	r0
    386e:	1f 90       	pop	r1
    3870:	18 95       	reti

00003872 <__vector_90>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_TXC_vect)      /* Transmission Complete Interrupt */
    3872:	1f 92       	push	r1
    3874:	0f 92       	push	r0
    3876:	0f b6       	in	r0, 0x3f	; 63
    3878:	0f 92       	push	r0
    387a:	11 24       	eor	r1, r1
    387c:	0b b6       	in	r0, 0x3b	; 59
    387e:	0f 92       	push	r0
    3880:	2f 93       	push	r18
    3882:	3f 93       	push	r19
    3884:	4f 93       	push	r20
    3886:	5f 93       	push	r21
    3888:	6f 93       	push	r22
    388a:	7f 93       	push	r23
    388c:	8f 93       	push	r24
    388e:	9f 93       	push	r25
    3890:	af 93       	push	r26
    3892:	bf 93       	push	r27
    3894:	ef 93       	push	r30
    3896:	ff 93       	push	r31
    3898:	e0 91 a7 21 	lds	r30, 0x21A7
    389c:	f0 91 a8 21 	lds	r31, 0x21A8
    38a0:	30 97       	sbiw	r30, 0x00	; 0
    38a2:	29 f0       	breq	.+10     	; 0x38ae <__vector_90+0x3c>
    38a4:	80 91 9d 22 	lds	r24, 0x229D
    38a8:	90 91 9e 22 	lds	r25, 0x229E
    38ac:	19 95       	eicall
    38ae:	ff 91       	pop	r31
    38b0:	ef 91       	pop	r30
    38b2:	bf 91       	pop	r27
    38b4:	af 91       	pop	r26
    38b6:	9f 91       	pop	r25
    38b8:	8f 91       	pop	r24
    38ba:	7f 91       	pop	r23
    38bc:	6f 91       	pop	r22
    38be:	5f 91       	pop	r21
    38c0:	4f 91       	pop	r20
    38c2:	3f 91       	pop	r19
    38c4:	2f 91       	pop	r18
    38c6:	0f 90       	pop	r0
    38c8:	0b be       	out	0x3b, r0	; 59
    38ca:	0f 90       	pop	r0
    38cc:	0f be       	out	0x3f, r0	; 63
    38ce:	0f 90       	pop	r0
    38d0:	1f 90       	pop	r1
    38d2:	18 95       	reti

000038d4 <__vector_91>:

/* USARTD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_RXC_vect)      /* Reception Complete Interrupt */
    38d4:	1f 92       	push	r1
    38d6:	0f 92       	push	r0
    38d8:	0f b6       	in	r0, 0x3f	; 63
    38da:	0f 92       	push	r0
    38dc:	11 24       	eor	r1, r1
    38de:	0b b6       	in	r0, 0x3b	; 59
    38e0:	0f 92       	push	r0
    38e2:	2f 93       	push	r18
    38e4:	3f 93       	push	r19
    38e6:	4f 93       	push	r20
    38e8:	5f 93       	push	r21
    38ea:	6f 93       	push	r22
    38ec:	7f 93       	push	r23
    38ee:	8f 93       	push	r24
    38f0:	9f 93       	push	r25
    38f2:	af 93       	push	r26
    38f4:	bf 93       	push	r27
    38f6:	ef 93       	push	r30
    38f8:	ff 93       	push	r31
    38fa:	e0 91 a9 21 	lds	r30, 0x21A9
    38fe:	f0 91 aa 21 	lds	r31, 0x21AA
    3902:	30 97       	sbiw	r30, 0x00	; 0
    3904:	29 f0       	breq	.+10     	; 0x3910 <__vector_91+0x3c>
    3906:	80 91 9f 22 	lds	r24, 0x229F
    390a:	90 91 a0 22 	lds	r25, 0x22A0
    390e:	19 95       	eicall
    3910:	ff 91       	pop	r31
    3912:	ef 91       	pop	r30
    3914:	bf 91       	pop	r27
    3916:	af 91       	pop	r26
    3918:	9f 91       	pop	r25
    391a:	8f 91       	pop	r24
    391c:	7f 91       	pop	r23
    391e:	6f 91       	pop	r22
    3920:	5f 91       	pop	r21
    3922:	4f 91       	pop	r20
    3924:	3f 91       	pop	r19
    3926:	2f 91       	pop	r18
    3928:	0f 90       	pop	r0
    392a:	0b be       	out	0x3b, r0	; 59
    392c:	0f 90       	pop	r0
    392e:	0f be       	out	0x3f, r0	; 63
    3930:	0f 90       	pop	r0
    3932:	1f 90       	pop	r1
    3934:	18 95       	reti

00003936 <__vector_92>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_DRE_vect)      /* Data Register Empty Interrupt */
    3936:	1f 92       	push	r1
    3938:	0f 92       	push	r0
    393a:	0f b6       	in	r0, 0x3f	; 63
    393c:	0f 92       	push	r0
    393e:	11 24       	eor	r1, r1
    3940:	0b b6       	in	r0, 0x3b	; 59
    3942:	0f 92       	push	r0
    3944:	2f 93       	push	r18
    3946:	3f 93       	push	r19
    3948:	4f 93       	push	r20
    394a:	5f 93       	push	r21
    394c:	6f 93       	push	r22
    394e:	7f 93       	push	r23
    3950:	8f 93       	push	r24
    3952:	9f 93       	push	r25
    3954:	af 93       	push	r26
    3956:	bf 93       	push	r27
    3958:	ef 93       	push	r30
    395a:	ff 93       	push	r31
    395c:	e0 91 ab 21 	lds	r30, 0x21AB
    3960:	f0 91 ac 21 	lds	r31, 0x21AC
    3964:	30 97       	sbiw	r30, 0x00	; 0
    3966:	29 f0       	breq	.+10     	; 0x3972 <__vector_92+0x3c>
    3968:	80 91 a1 22 	lds	r24, 0x22A1
    396c:	90 91 a2 22 	lds	r25, 0x22A2
    3970:	19 95       	eicall
    3972:	ff 91       	pop	r31
    3974:	ef 91       	pop	r30
    3976:	bf 91       	pop	r27
    3978:	af 91       	pop	r26
    397a:	9f 91       	pop	r25
    397c:	8f 91       	pop	r24
    397e:	7f 91       	pop	r23
    3980:	6f 91       	pop	r22
    3982:	5f 91       	pop	r21
    3984:	4f 91       	pop	r20
    3986:	3f 91       	pop	r19
    3988:	2f 91       	pop	r18
    398a:	0f 90       	pop	r0
    398c:	0b be       	out	0x3b, r0	; 59
    398e:	0f 90       	pop	r0
    3990:	0f be       	out	0x3f, r0	; 63
    3992:	0f 90       	pop	r0
    3994:	1f 90       	pop	r1
    3996:	18 95       	reti

00003998 <__vector_93>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_TXC_vect)      /* Transmission Complete Interrupt */
    3998:	1f 92       	push	r1
    399a:	0f 92       	push	r0
    399c:	0f b6       	in	r0, 0x3f	; 63
    399e:	0f 92       	push	r0
    39a0:	11 24       	eor	r1, r1
    39a2:	0b b6       	in	r0, 0x3b	; 59
    39a4:	0f 92       	push	r0
    39a6:	2f 93       	push	r18
    39a8:	3f 93       	push	r19
    39aa:	4f 93       	push	r20
    39ac:	5f 93       	push	r21
    39ae:	6f 93       	push	r22
    39b0:	7f 93       	push	r23
    39b2:	8f 93       	push	r24
    39b4:	9f 93       	push	r25
    39b6:	af 93       	push	r26
    39b8:	bf 93       	push	r27
    39ba:	ef 93       	push	r30
    39bc:	ff 93       	push	r31
    39be:	e0 91 ad 21 	lds	r30, 0x21AD
    39c2:	f0 91 ae 21 	lds	r31, 0x21AE
    39c6:	30 97       	sbiw	r30, 0x00	; 0
    39c8:	29 f0       	breq	.+10     	; 0x39d4 <__vector_93+0x3c>
    39ca:	80 91 a3 22 	lds	r24, 0x22A3
    39ce:	90 91 a4 22 	lds	r25, 0x22A4
    39d2:	19 95       	eicall
    39d4:	ff 91       	pop	r31
    39d6:	ef 91       	pop	r30
    39d8:	bf 91       	pop	r27
    39da:	af 91       	pop	r26
    39dc:	9f 91       	pop	r25
    39de:	8f 91       	pop	r24
    39e0:	7f 91       	pop	r23
    39e2:	6f 91       	pop	r22
    39e4:	5f 91       	pop	r21
    39e6:	4f 91       	pop	r20
    39e8:	3f 91       	pop	r19
    39ea:	2f 91       	pop	r18
    39ec:	0f 90       	pop	r0
    39ee:	0b be       	out	0x3b, r0	; 59
    39f0:	0f 90       	pop	r0
    39f2:	0f be       	out	0x3f, r0	; 63
    39f4:	0f 90       	pop	r0
    39f6:	1f 90       	pop	r1
    39f8:	18 95       	reti

000039fa <__vector_104>:

/* PORTF interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT0_vect)      /* External Interrupt 0 */
    39fa:	1f 92       	push	r1
    39fc:	0f 92       	push	r0
    39fe:	0f b6       	in	r0, 0x3f	; 63
    3a00:	0f 92       	push	r0
    3a02:	11 24       	eor	r1, r1
    3a04:	0b b6       	in	r0, 0x3b	; 59
    3a06:	0f 92       	push	r0
    3a08:	2f 93       	push	r18
    3a0a:	3f 93       	push	r19
    3a0c:	4f 93       	push	r20
    3a0e:	5f 93       	push	r21
    3a10:	6f 93       	push	r22
    3a12:	7f 93       	push	r23
    3a14:	8f 93       	push	r24
    3a16:	9f 93       	push	r25
    3a18:	af 93       	push	r26
    3a1a:	bf 93       	push	r27
    3a1c:	ef 93       	push	r30
    3a1e:	ff 93       	push	r31
    3a20:	e0 91 c3 21 	lds	r30, 0x21C3
    3a24:	f0 91 c4 21 	lds	r31, 0x21C4
    3a28:	30 97       	sbiw	r30, 0x00	; 0
    3a2a:	29 f0       	breq	.+10     	; 0x3a36 <__vector_104+0x3c>
    3a2c:	80 91 b9 22 	lds	r24, 0x22B9
    3a30:	90 91 ba 22 	lds	r25, 0x22BA
    3a34:	19 95       	eicall
    3a36:	ff 91       	pop	r31
    3a38:	ef 91       	pop	r30
    3a3a:	bf 91       	pop	r27
    3a3c:	af 91       	pop	r26
    3a3e:	9f 91       	pop	r25
    3a40:	8f 91       	pop	r24
    3a42:	7f 91       	pop	r23
    3a44:	6f 91       	pop	r22
    3a46:	5f 91       	pop	r21
    3a48:	4f 91       	pop	r20
    3a4a:	3f 91       	pop	r19
    3a4c:	2f 91       	pop	r18
    3a4e:	0f 90       	pop	r0
    3a50:	0b be       	out	0x3b, r0	; 59
    3a52:	0f 90       	pop	r0
    3a54:	0f be       	out	0x3f, r0	; 63
    3a56:	0f 90       	pop	r0
    3a58:	1f 90       	pop	r1
    3a5a:	18 95       	reti

00003a5c <__vector_105>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT1_vect)      /* External Interrupt 1 */
    3a5c:	1f 92       	push	r1
    3a5e:	0f 92       	push	r0
    3a60:	0f b6       	in	r0, 0x3f	; 63
    3a62:	0f 92       	push	r0
    3a64:	11 24       	eor	r1, r1
    3a66:	0b b6       	in	r0, 0x3b	; 59
    3a68:	0f 92       	push	r0
    3a6a:	2f 93       	push	r18
    3a6c:	3f 93       	push	r19
    3a6e:	4f 93       	push	r20
    3a70:	5f 93       	push	r21
    3a72:	6f 93       	push	r22
    3a74:	7f 93       	push	r23
    3a76:	8f 93       	push	r24
    3a78:	9f 93       	push	r25
    3a7a:	af 93       	push	r26
    3a7c:	bf 93       	push	r27
    3a7e:	ef 93       	push	r30
    3a80:	ff 93       	push	r31
    3a82:	e0 91 c5 21 	lds	r30, 0x21C5
    3a86:	f0 91 c6 21 	lds	r31, 0x21C6
    3a8a:	30 97       	sbiw	r30, 0x00	; 0
    3a8c:	29 f0       	breq	.+10     	; 0x3a98 <__vector_105+0x3c>
    3a8e:	80 91 bb 22 	lds	r24, 0x22BB
    3a92:	90 91 bc 22 	lds	r25, 0x22BC
    3a96:	19 95       	eicall
    3a98:	ff 91       	pop	r31
    3a9a:	ef 91       	pop	r30
    3a9c:	bf 91       	pop	r27
    3a9e:	af 91       	pop	r26
    3aa0:	9f 91       	pop	r25
    3aa2:	8f 91       	pop	r24
    3aa4:	7f 91       	pop	r23
    3aa6:	6f 91       	pop	r22
    3aa8:	5f 91       	pop	r21
    3aaa:	4f 91       	pop	r20
    3aac:	3f 91       	pop	r19
    3aae:	2f 91       	pop	r18
    3ab0:	0f 90       	pop	r0
    3ab2:	0b be       	out	0x3b, r0	; 59
    3ab4:	0f 90       	pop	r0
    3ab6:	0f be       	out	0x3f, r0	; 63
    3ab8:	0f 90       	pop	r0
    3aba:	1f 90       	pop	r1
    3abc:	18 95       	reti

00003abe <__vector_108>:

/* TCF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_OVF_vect)      /* Overflow Interrupt */
    3abe:	1f 92       	push	r1
    3ac0:	0f 92       	push	r0
    3ac2:	0f b6       	in	r0, 0x3f	; 63
    3ac4:	0f 92       	push	r0
    3ac6:	11 24       	eor	r1, r1
    3ac8:	0b b6       	in	r0, 0x3b	; 59
    3aca:	0f 92       	push	r0
    3acc:	2f 93       	push	r18
    3ace:	3f 93       	push	r19
    3ad0:	4f 93       	push	r20
    3ad2:	5f 93       	push	r21
    3ad4:	6f 93       	push	r22
    3ad6:	7f 93       	push	r23
    3ad8:	8f 93       	push	r24
    3ada:	9f 93       	push	r25
    3adc:	af 93       	push	r26
    3ade:	bf 93       	push	r27
    3ae0:	ef 93       	push	r30
    3ae2:	ff 93       	push	r31
    3ae4:	e0 91 cb 21 	lds	r30, 0x21CB
    3ae8:	f0 91 cc 21 	lds	r31, 0x21CC
    3aec:	30 97       	sbiw	r30, 0x00	; 0
    3aee:	29 f0       	breq	.+10     	; 0x3afa <__vector_108+0x3c>
    3af0:	80 91 c1 22 	lds	r24, 0x22C1
    3af4:	90 91 c2 22 	lds	r25, 0x22C2
    3af8:	19 95       	eicall
    3afa:	ff 91       	pop	r31
    3afc:	ef 91       	pop	r30
    3afe:	bf 91       	pop	r27
    3b00:	af 91       	pop	r26
    3b02:	9f 91       	pop	r25
    3b04:	8f 91       	pop	r24
    3b06:	7f 91       	pop	r23
    3b08:	6f 91       	pop	r22
    3b0a:	5f 91       	pop	r21
    3b0c:	4f 91       	pop	r20
    3b0e:	3f 91       	pop	r19
    3b10:	2f 91       	pop	r18
    3b12:	0f 90       	pop	r0
    3b14:	0b be       	out	0x3b, r0	; 59
    3b16:	0f 90       	pop	r0
    3b18:	0f be       	out	0x3f, r0	; 63
    3b1a:	0f 90       	pop	r0
    3b1c:	1f 90       	pop	r1
    3b1e:	18 95       	reti

00003b20 <__vector_109>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_ERR_vect)      /* Error Interrupt */
    3b20:	1f 92       	push	r1
    3b22:	0f 92       	push	r0
    3b24:	0f b6       	in	r0, 0x3f	; 63
    3b26:	0f 92       	push	r0
    3b28:	11 24       	eor	r1, r1
    3b2a:	0b b6       	in	r0, 0x3b	; 59
    3b2c:	0f 92       	push	r0
    3b2e:	2f 93       	push	r18
    3b30:	3f 93       	push	r19
    3b32:	4f 93       	push	r20
    3b34:	5f 93       	push	r21
    3b36:	6f 93       	push	r22
    3b38:	7f 93       	push	r23
    3b3a:	8f 93       	push	r24
    3b3c:	9f 93       	push	r25
    3b3e:	af 93       	push	r26
    3b40:	bf 93       	push	r27
    3b42:	ef 93       	push	r30
    3b44:	ff 93       	push	r31
    3b46:	e0 91 cd 21 	lds	r30, 0x21CD
    3b4a:	f0 91 ce 21 	lds	r31, 0x21CE
    3b4e:	30 97       	sbiw	r30, 0x00	; 0
    3b50:	29 f0       	breq	.+10     	; 0x3b5c <__vector_109+0x3c>
    3b52:	80 91 c3 22 	lds	r24, 0x22C3
    3b56:	90 91 c4 22 	lds	r25, 0x22C4
    3b5a:	19 95       	eicall
    3b5c:	ff 91       	pop	r31
    3b5e:	ef 91       	pop	r30
    3b60:	bf 91       	pop	r27
    3b62:	af 91       	pop	r26
    3b64:	9f 91       	pop	r25
    3b66:	8f 91       	pop	r24
    3b68:	7f 91       	pop	r23
    3b6a:	6f 91       	pop	r22
    3b6c:	5f 91       	pop	r21
    3b6e:	4f 91       	pop	r20
    3b70:	3f 91       	pop	r19
    3b72:	2f 91       	pop	r18
    3b74:	0f 90       	pop	r0
    3b76:	0b be       	out	0x3b, r0	; 59
    3b78:	0f 90       	pop	r0
    3b7a:	0f be       	out	0x3f, r0	; 63
    3b7c:	0f 90       	pop	r0
    3b7e:	1f 90       	pop	r1
    3b80:	18 95       	reti

00003b82 <__vector_110>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCA_vect)      /* Compare or Capture A Interrupt */
    3b82:	1f 92       	push	r1
    3b84:	0f 92       	push	r0
    3b86:	0f b6       	in	r0, 0x3f	; 63
    3b88:	0f 92       	push	r0
    3b8a:	11 24       	eor	r1, r1
    3b8c:	0b b6       	in	r0, 0x3b	; 59
    3b8e:	0f 92       	push	r0
    3b90:	2f 93       	push	r18
    3b92:	3f 93       	push	r19
    3b94:	4f 93       	push	r20
    3b96:	5f 93       	push	r21
    3b98:	6f 93       	push	r22
    3b9a:	7f 93       	push	r23
    3b9c:	8f 93       	push	r24
    3b9e:	9f 93       	push	r25
    3ba0:	af 93       	push	r26
    3ba2:	bf 93       	push	r27
    3ba4:	ef 93       	push	r30
    3ba6:	ff 93       	push	r31
    3ba8:	e0 91 cf 21 	lds	r30, 0x21CF
    3bac:	f0 91 d0 21 	lds	r31, 0x21D0
    3bb0:	30 97       	sbiw	r30, 0x00	; 0
    3bb2:	29 f0       	breq	.+10     	; 0x3bbe <__vector_110+0x3c>
    3bb4:	80 91 c5 22 	lds	r24, 0x22C5
    3bb8:	90 91 c6 22 	lds	r25, 0x22C6
    3bbc:	19 95       	eicall
    3bbe:	ff 91       	pop	r31
    3bc0:	ef 91       	pop	r30
    3bc2:	bf 91       	pop	r27
    3bc4:	af 91       	pop	r26
    3bc6:	9f 91       	pop	r25
    3bc8:	8f 91       	pop	r24
    3bca:	7f 91       	pop	r23
    3bcc:	6f 91       	pop	r22
    3bce:	5f 91       	pop	r21
    3bd0:	4f 91       	pop	r20
    3bd2:	3f 91       	pop	r19
    3bd4:	2f 91       	pop	r18
    3bd6:	0f 90       	pop	r0
    3bd8:	0b be       	out	0x3b, r0	; 59
    3bda:	0f 90       	pop	r0
    3bdc:	0f be       	out	0x3f, r0	; 63
    3bde:	0f 90       	pop	r0
    3be0:	1f 90       	pop	r1
    3be2:	18 95       	reti

00003be4 <__vector_111>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCB_vect)      /* Compare or Capture B Interrupt */
    3be4:	1f 92       	push	r1
    3be6:	0f 92       	push	r0
    3be8:	0f b6       	in	r0, 0x3f	; 63
    3bea:	0f 92       	push	r0
    3bec:	11 24       	eor	r1, r1
    3bee:	0b b6       	in	r0, 0x3b	; 59
    3bf0:	0f 92       	push	r0
    3bf2:	2f 93       	push	r18
    3bf4:	3f 93       	push	r19
    3bf6:	4f 93       	push	r20
    3bf8:	5f 93       	push	r21
    3bfa:	6f 93       	push	r22
    3bfc:	7f 93       	push	r23
    3bfe:	8f 93       	push	r24
    3c00:	9f 93       	push	r25
    3c02:	af 93       	push	r26
    3c04:	bf 93       	push	r27
    3c06:	ef 93       	push	r30
    3c08:	ff 93       	push	r31
    3c0a:	e0 91 d1 21 	lds	r30, 0x21D1
    3c0e:	f0 91 d2 21 	lds	r31, 0x21D2
    3c12:	30 97       	sbiw	r30, 0x00	; 0
    3c14:	29 f0       	breq	.+10     	; 0x3c20 <__vector_111+0x3c>
    3c16:	80 91 c7 22 	lds	r24, 0x22C7
    3c1a:	90 91 c8 22 	lds	r25, 0x22C8
    3c1e:	19 95       	eicall
    3c20:	ff 91       	pop	r31
    3c22:	ef 91       	pop	r30
    3c24:	bf 91       	pop	r27
    3c26:	af 91       	pop	r26
    3c28:	9f 91       	pop	r25
    3c2a:	8f 91       	pop	r24
    3c2c:	7f 91       	pop	r23
    3c2e:	6f 91       	pop	r22
    3c30:	5f 91       	pop	r21
    3c32:	4f 91       	pop	r20
    3c34:	3f 91       	pop	r19
    3c36:	2f 91       	pop	r18
    3c38:	0f 90       	pop	r0
    3c3a:	0b be       	out	0x3b, r0	; 59
    3c3c:	0f 90       	pop	r0
    3c3e:	0f be       	out	0x3f, r0	; 63
    3c40:	0f 90       	pop	r0
    3c42:	1f 90       	pop	r1
    3c44:	18 95       	reti

00003c46 <__vector_112>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCC_vect)      /* Compare or Capture C Interrupt */
    3c46:	1f 92       	push	r1
    3c48:	0f 92       	push	r0
    3c4a:	0f b6       	in	r0, 0x3f	; 63
    3c4c:	0f 92       	push	r0
    3c4e:	11 24       	eor	r1, r1
    3c50:	0b b6       	in	r0, 0x3b	; 59
    3c52:	0f 92       	push	r0
    3c54:	2f 93       	push	r18
    3c56:	3f 93       	push	r19
    3c58:	4f 93       	push	r20
    3c5a:	5f 93       	push	r21
    3c5c:	6f 93       	push	r22
    3c5e:	7f 93       	push	r23
    3c60:	8f 93       	push	r24
    3c62:	9f 93       	push	r25
    3c64:	af 93       	push	r26
    3c66:	bf 93       	push	r27
    3c68:	ef 93       	push	r30
    3c6a:	ff 93       	push	r31
    3c6c:	e0 91 d3 21 	lds	r30, 0x21D3
    3c70:	f0 91 d4 21 	lds	r31, 0x21D4
    3c74:	30 97       	sbiw	r30, 0x00	; 0
    3c76:	29 f0       	breq	.+10     	; 0x3c82 <__vector_112+0x3c>
    3c78:	80 91 c9 22 	lds	r24, 0x22C9
    3c7c:	90 91 ca 22 	lds	r25, 0x22CA
    3c80:	19 95       	eicall
    3c82:	ff 91       	pop	r31
    3c84:	ef 91       	pop	r30
    3c86:	bf 91       	pop	r27
    3c88:	af 91       	pop	r26
    3c8a:	9f 91       	pop	r25
    3c8c:	8f 91       	pop	r24
    3c8e:	7f 91       	pop	r23
    3c90:	6f 91       	pop	r22
    3c92:	5f 91       	pop	r21
    3c94:	4f 91       	pop	r20
    3c96:	3f 91       	pop	r19
    3c98:	2f 91       	pop	r18
    3c9a:	0f 90       	pop	r0
    3c9c:	0b be       	out	0x3b, r0	; 59
    3c9e:	0f 90       	pop	r0
    3ca0:	0f be       	out	0x3f, r0	; 63
    3ca2:	0f 90       	pop	r0
    3ca4:	1f 90       	pop	r1
    3ca6:	18 95       	reti

00003ca8 <__vector_113>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCD_vect)      /* Compare or Capture D Interrupt */
    3ca8:	1f 92       	push	r1
    3caa:	0f 92       	push	r0
    3cac:	0f b6       	in	r0, 0x3f	; 63
    3cae:	0f 92       	push	r0
    3cb0:	11 24       	eor	r1, r1
    3cb2:	0b b6       	in	r0, 0x3b	; 59
    3cb4:	0f 92       	push	r0
    3cb6:	2f 93       	push	r18
    3cb8:	3f 93       	push	r19
    3cba:	4f 93       	push	r20
    3cbc:	5f 93       	push	r21
    3cbe:	6f 93       	push	r22
    3cc0:	7f 93       	push	r23
    3cc2:	8f 93       	push	r24
    3cc4:	9f 93       	push	r25
    3cc6:	af 93       	push	r26
    3cc8:	bf 93       	push	r27
    3cca:	ef 93       	push	r30
    3ccc:	ff 93       	push	r31
    3cce:	e0 91 d5 21 	lds	r30, 0x21D5
    3cd2:	f0 91 d6 21 	lds	r31, 0x21D6
    3cd6:	30 97       	sbiw	r30, 0x00	; 0
    3cd8:	29 f0       	breq	.+10     	; 0x3ce4 <__vector_113+0x3c>
    3cda:	80 91 cb 22 	lds	r24, 0x22CB
    3cde:	90 91 cc 22 	lds	r25, 0x22CC
    3ce2:	19 95       	eicall
    3ce4:	ff 91       	pop	r31
    3ce6:	ef 91       	pop	r30
    3ce8:	bf 91       	pop	r27
    3cea:	af 91       	pop	r26
    3cec:	9f 91       	pop	r25
    3cee:	8f 91       	pop	r24
    3cf0:	7f 91       	pop	r23
    3cf2:	6f 91       	pop	r22
    3cf4:	5f 91       	pop	r21
    3cf6:	4f 91       	pop	r20
    3cf8:	3f 91       	pop	r19
    3cfa:	2f 91       	pop	r18
    3cfc:	0f 90       	pop	r0
    3cfe:	0b be       	out	0x3b, r0	; 59
    3d00:	0f 90       	pop	r0
    3d02:	0f be       	out	0x3f, r0	; 63
    3d04:	0f 90       	pop	r0
    3d06:	1f 90       	pop	r1
    3d08:	18 95       	reti

00003d0a <__vector_119>:

/* USARTF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_RXC_vect)      /* Reception Complete Interrupt */
    3d0a:	1f 92       	push	r1
    3d0c:	0f 92       	push	r0
    3d0e:	0f b6       	in	r0, 0x3f	; 63
    3d10:	0f 92       	push	r0
    3d12:	11 24       	eor	r1, r1
    3d14:	0b b6       	in	r0, 0x3b	; 59
    3d16:	0f 92       	push	r0
    3d18:	2f 93       	push	r18
    3d1a:	3f 93       	push	r19
    3d1c:	4f 93       	push	r20
    3d1e:	5f 93       	push	r21
    3d20:	6f 93       	push	r22
    3d22:	7f 93       	push	r23
    3d24:	8f 93       	push	r24
    3d26:	9f 93       	push	r25
    3d28:	af 93       	push	r26
    3d2a:	bf 93       	push	r27
    3d2c:	ef 93       	push	r30
    3d2e:	ff 93       	push	r31
    3d30:	e0 91 e1 21 	lds	r30, 0x21E1
    3d34:	f0 91 e2 21 	lds	r31, 0x21E2
    3d38:	30 97       	sbiw	r30, 0x00	; 0
    3d3a:	29 f0       	breq	.+10     	; 0x3d46 <__vector_119+0x3c>
    3d3c:	80 91 d7 22 	lds	r24, 0x22D7
    3d40:	90 91 d8 22 	lds	r25, 0x22D8
    3d44:	19 95       	eicall
    3d46:	ff 91       	pop	r31
    3d48:	ef 91       	pop	r30
    3d4a:	bf 91       	pop	r27
    3d4c:	af 91       	pop	r26
    3d4e:	9f 91       	pop	r25
    3d50:	8f 91       	pop	r24
    3d52:	7f 91       	pop	r23
    3d54:	6f 91       	pop	r22
    3d56:	5f 91       	pop	r21
    3d58:	4f 91       	pop	r20
    3d5a:	3f 91       	pop	r19
    3d5c:	2f 91       	pop	r18
    3d5e:	0f 90       	pop	r0
    3d60:	0b be       	out	0x3b, r0	; 59
    3d62:	0f 90       	pop	r0
    3d64:	0f be       	out	0x3f, r0	; 63
    3d66:	0f 90       	pop	r0
    3d68:	1f 90       	pop	r1
    3d6a:	18 95       	reti

00003d6c <__vector_120>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_DRE_vect)      /* Data Register Empty Interrupt */
    3d6c:	1f 92       	push	r1
    3d6e:	0f 92       	push	r0
    3d70:	0f b6       	in	r0, 0x3f	; 63
    3d72:	0f 92       	push	r0
    3d74:	11 24       	eor	r1, r1
    3d76:	0b b6       	in	r0, 0x3b	; 59
    3d78:	0f 92       	push	r0
    3d7a:	2f 93       	push	r18
    3d7c:	3f 93       	push	r19
    3d7e:	4f 93       	push	r20
    3d80:	5f 93       	push	r21
    3d82:	6f 93       	push	r22
    3d84:	7f 93       	push	r23
    3d86:	8f 93       	push	r24
    3d88:	9f 93       	push	r25
    3d8a:	af 93       	push	r26
    3d8c:	bf 93       	push	r27
    3d8e:	ef 93       	push	r30
    3d90:	ff 93       	push	r31
    3d92:	e0 91 e3 21 	lds	r30, 0x21E3
    3d96:	f0 91 e4 21 	lds	r31, 0x21E4
    3d9a:	30 97       	sbiw	r30, 0x00	; 0
    3d9c:	29 f0       	breq	.+10     	; 0x3da8 <__vector_120+0x3c>
    3d9e:	80 91 d9 22 	lds	r24, 0x22D9
    3da2:	90 91 da 22 	lds	r25, 0x22DA
    3da6:	19 95       	eicall
    3da8:	ff 91       	pop	r31
    3daa:	ef 91       	pop	r30
    3dac:	bf 91       	pop	r27
    3dae:	af 91       	pop	r26
    3db0:	9f 91       	pop	r25
    3db2:	8f 91       	pop	r24
    3db4:	7f 91       	pop	r23
    3db6:	6f 91       	pop	r22
    3db8:	5f 91       	pop	r21
    3dba:	4f 91       	pop	r20
    3dbc:	3f 91       	pop	r19
    3dbe:	2f 91       	pop	r18
    3dc0:	0f 90       	pop	r0
    3dc2:	0b be       	out	0x3b, r0	; 59
    3dc4:	0f 90       	pop	r0
    3dc6:	0f be       	out	0x3f, r0	; 63
    3dc8:	0f 90       	pop	r0
    3dca:	1f 90       	pop	r1
    3dcc:	18 95       	reti

00003dce <__vector_121>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_TXC_vect)      /* Transmission Complete Interrupt */
    3dce:	1f 92       	push	r1
    3dd0:	0f 92       	push	r0
    3dd2:	0f b6       	in	r0, 0x3f	; 63
    3dd4:	0f 92       	push	r0
    3dd6:	11 24       	eor	r1, r1
    3dd8:	0b b6       	in	r0, 0x3b	; 59
    3dda:	0f 92       	push	r0
    3ddc:	2f 93       	push	r18
    3dde:	3f 93       	push	r19
    3de0:	4f 93       	push	r20
    3de2:	5f 93       	push	r21
    3de4:	6f 93       	push	r22
    3de6:	7f 93       	push	r23
    3de8:	8f 93       	push	r24
    3dea:	9f 93       	push	r25
    3dec:	af 93       	push	r26
    3dee:	bf 93       	push	r27
    3df0:	ef 93       	push	r30
    3df2:	ff 93       	push	r31
    3df4:	e0 91 e5 21 	lds	r30, 0x21E5
    3df8:	f0 91 e6 21 	lds	r31, 0x21E6
    3dfc:	30 97       	sbiw	r30, 0x00	; 0
    3dfe:	29 f0       	breq	.+10     	; 0x3e0a <__vector_121+0x3c>
    3e00:	80 91 db 22 	lds	r24, 0x22DB
    3e04:	90 91 dc 22 	lds	r25, 0x22DC
    3e08:	19 95       	eicall
    3e0a:	ff 91       	pop	r31
    3e0c:	ef 91       	pop	r30
    3e0e:	bf 91       	pop	r27
    3e10:	af 91       	pop	r26
    3e12:	9f 91       	pop	r25
    3e14:	8f 91       	pop	r24
    3e16:	7f 91       	pop	r23
    3e18:	6f 91       	pop	r22
    3e1a:	5f 91       	pop	r21
    3e1c:	4f 91       	pop	r20
    3e1e:	3f 91       	pop	r19
    3e20:	2f 91       	pop	r18
    3e22:	0f 90       	pop	r0
    3e24:	0b be       	out	0x3b, r0	; 59
    3e26:	0f 90       	pop	r0
    3e28:	0f be       	out	0x3f, r0	; 63
    3e2a:	0f 90       	pop	r0
    3e2c:	1f 90       	pop	r1
    3e2e:	18 95       	reti

00003e30 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual()
{	
	while(1)
	{
		laserBoard.BeepClassError();
    3e30:	0e 94 3b 04 	call	0x876	; 0x876 <_ZN11CLaserBoard14BeepClassErrorEv>
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;
CDGUSDatabase Database;

extern "C" void __cxa_pure_virtual()
    3e34:	fd cf       	rjmp	.-6      	; 0x3e30 <__cxa_pure_virtual>

00003e36 <_GLOBAL__sub_I_dacSPI>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    3e36:	86 e2       	ldi	r24, 0x26	; 38
    3e38:	93 e2       	ldi	r25, 0x23	; 35
    3e3a:	0e 94 23 0b 	call	0x1646	; 0x1646 <_ZN4CSPIC1Ev>
CDGUSUSART usart;
    3e3e:	84 e2       	ldi	r24, 0x24	; 36
    3e40:	93 e2       	ldi	r25, 0x23	; 35
    3e42:	0e 94 94 03 	call	0x728	; 0x728 <_ZN10CDGUSUSARTC1Ev>
CMBSender sender;
    3e46:	8b e0       	ldi	r24, 0x0B	; 11
    3e48:	93 e2       	ldi	r25, 0x23	; 35
    3e4a:	0e 94 d5 20 	call	0x41aa	; 0x41aa <_ZN9CMBSenderC1Ev>
CLaserBoard laserBoard;
    3e4e:	8a e0       	ldi	r24, 0x0A	; 10
    3e50:	93 e2       	ldi	r25, 0x23	; 35
    3e52:	0e 94 a8 03 	call	0x750	; 0x750 <_ZN11CLaserBoardC1Ev>
CSoundPlayer player;
    3e56:	89 e0       	ldi	r24, 0x09	; 9
    3e58:	93 e2       	ldi	r25, 0x23	; 35
    3e5a:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_ZN12CSoundPlayerC1Ev>
CLaserControlApp App;
    3e5e:	89 ee       	ldi	r24, 0xE9	; 233
    3e60:	92 e2       	ldi	r25, 0x22	; 34
    3e62:	0e 94 fd 04 	call	0x9fa	; 0x9fa <_ZN16CLaserControlAppC1Ev>
CDGUSDatabase Database;
    3e66:	81 ee       	ldi	r24, 0xE1	; 225
    3e68:	92 e2       	ldi	r25, 0x22	; 34
    3e6a:	0e 94 12 02 	call	0x424	; 0x424 <_ZN13CDGUSDatabaseC1Ev>
    3e6e:	08 95       	ret

00003e70 <_GLOBAL__sub_D_dacSPI>:
    3e70:	81 ee       	ldi	r24, 0xE1	; 225
    3e72:	92 e2       	ldi	r25, 0x22	; 34
    3e74:	0e 94 13 02 	call	0x426	; 0x426 <_ZN13CDGUSDatabaseD1Ev>
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;
    3e78:	89 ee       	ldi	r24, 0xE9	; 233
    3e7a:	92 e2       	ldi	r25, 0x22	; 34
    3e7c:	0e 94 03 05 	call	0xa06	; 0xa06 <_ZN16CLaserControlAppD1Ev>
/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
    3e80:	89 e0       	ldi	r24, 0x09	; 9
    3e82:	93 e2       	ldi	r25, 0x23	; 35
    3e84:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <_ZN12CSoundPlayerD1Ev>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
    3e88:	8a e0       	ldi	r24, 0x0A	; 10
    3e8a:	93 e2       	ldi	r25, 0x23	; 35
    3e8c:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN11CLaserBoardD1Ev>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
    3e90:	8b e0       	ldi	r24, 0x0B	; 11
    3e92:	93 e2       	ldi	r25, 0x23	; 35
    3e94:	0e 94 2a 21 	call	0x4254	; 0x4254 <_ZN9CMBSenderD1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
    3e98:	84 e2       	ldi	r24, 0x24	; 36
    3e9a:	93 e2       	ldi	r25, 0x23	; 35
    3e9c:	0e 94 a0 03 	call	0x740	; 0x740 <_ZN10CDGUSUSARTD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    3ea0:	86 e2       	ldi	r24, 0x26	; 38
    3ea2:	93 e2       	ldi	r25, 0x23	; 35
    3ea4:	0e 94 24 0b 	call	0x1648	; 0x1648 <_ZN4CSPID1Ev>
    3ea8:	08 95       	ret

00003eaa <_Z16SystemInitializev>:
		laserBoard.BeepClassError();
	}
}

void SystemInitialize()
{
    3eaa:	ef 92       	push	r14
    3eac:	0f 93       	push	r16
    3eae:	1f 93       	push	r17
	cli();	/* Disable global interrupts */
    3eb0:	f8 94       	cli
	
	// Initialize modules
	laserBoard.InitializeIO();
    3eb2:	8a e0       	ldi	r24, 0x0A	; 10
    3eb4:	93 e2       	ldi	r25, 0x23	; 35
    3eb6:	0e 94 aa 03 	call	0x754	; 0x754 <_ZN11CLaserBoard12InitializeIOEv>
	player.Initialize();
    3eba:	89 e0       	ldi	r24, 0x09	; 9
    3ebc:	93 e2       	ldi	r25, 0x23	; 35
    3ebe:	0e 94 41 0a 	call	0x1482	; 0x1482 <_ZN12CSoundPlayer10InitializeEv>
	dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    3ec2:	0f 2e       	mov	r0, r31
    3ec4:	f3 e0       	ldi	r31, 0x03	; 3
    3ec6:	ef 2e       	mov	r14, r31
    3ec8:	f0 2d       	mov	r31, r0
    3eca:	00 e0       	ldi	r16, 0x00	; 0
    3ecc:	23 e0       	ldi	r18, 0x03	; 3
    3ece:	40 e0       	ldi	r20, 0x00	; 0
    3ed0:	61 e0       	ldi	r22, 0x01	; 1
    3ed2:	86 e2       	ldi	r24, 0x26	; 38
    3ed4:	93 e2       	ldi	r25, 0x23	; 35
    3ed6:	0e 94 25 0b 	call	0x164a	; 0x164a <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
	usart.Initialize(BAUD_115200_ERM0P1, PARITY_DISABLE, STOPBITS_1BIT, true);
    3eda:	01 e0       	ldi	r16, 0x01	; 1
    3edc:	20 e0       	ldi	r18, 0x00	; 0
    3ede:	40 e0       	ldi	r20, 0x00	; 0
    3ee0:	6d e0       	ldi	r22, 0x0D	; 13
    3ee2:	84 e2       	ldi	r24, 0x24	; 36
    3ee4:	93 e2       	ldi	r25, 0x23	; 35
    3ee6:	0e 94 18 03 	call	0x630	; 0x630 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
	sender.Initialize(&usart, &App, 256, 256);
    3eea:	00 e0       	ldi	r16, 0x00	; 0
    3eec:	11 e0       	ldi	r17, 0x01	; 1
    3eee:	20 e0       	ldi	r18, 0x00	; 0
    3ef0:	31 e0       	ldi	r19, 0x01	; 1
    3ef2:	49 ee       	ldi	r20, 0xE9	; 233
    3ef4:	52 e2       	ldi	r21, 0x22	; 34
    3ef6:	64 e2       	ldi	r22, 0x24	; 36
    3ef8:	73 e2       	ldi	r23, 0x23	; 35
    3efa:	8b e0       	ldi	r24, 0x0B	; 11
    3efc:	93 e2       	ldi	r25, 0x23	; 35
    3efe:	0e 94 db 20 	call	0x41b6	; 0x41b6 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj>
	App.Initialize(&sender);
    3f02:	6b e0       	ldi	r22, 0x0B	; 11
    3f04:	73 e2       	ldi	r23, 0x23	; 35
    3f06:	89 ee       	ldi	r24, 0xE9	; 233
    3f08:	92 e2       	ldi	r25, 0x22	; 34
    3f0a:	0e 94 be 05 	call	0xb7c	; 0xb7c <_ZN16CLaserControlApp10InitializeEP9CMBSender>
	laserBoard.InitializeClock();
    3f0e:	8a e0       	ldi	r24, 0x0A	; 10
    3f10:	93 e2       	ldi	r25, 0x23	; 35
    3f12:	0e 94 de 03 	call	0x7bc	; 0x7bc <_ZN11CLaserBoard15InitializeClockEv>
	Database.Initialize(&sender, VARIABLE_ADDR_DATABASE);
    3f16:	40 e0       	ldi	r20, 0x00	; 0
    3f18:	51 e0       	ldi	r21, 0x01	; 1
    3f1a:	6b e0       	ldi	r22, 0x0B	; 11
    3f1c:	73 e2       	ldi	r23, 0x23	; 35
    3f1e:	81 ee       	ldi	r24, 0xE1	; 225
    3f20:	92 e2       	ldi	r25, 0x22	; 34
    3f22:	0e 94 14 02 	call	0x428	; 0x428 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>
	
	sei();	/* Enable global interrupts */
    3f26:	78 94       	sei
}
    3f28:	1f 91       	pop	r17
    3f2a:	0f 91       	pop	r16
    3f2c:	ef 90       	pop	r14
    3f2e:	08 95       	ret

00003f30 <main>:
int main(void)
{
	float x = 0.0f;
	
	// Initialization system
	SystemInitialize();
    3f30:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <_Z16SystemInitializev>
    3f34:	2f ef       	ldi	r18, 0xFF	; 255
    3f36:	8f e4       	ldi	r24, 0x4F	; 79
    3f38:	93 ec       	ldi	r25, 0xC3	; 195
    3f3a:	21 50       	subi	r18, 0x01	; 1
    3f3c:	80 40       	sbci	r24, 0x00	; 0
    3f3e:	90 40       	sbci	r25, 0x00	; 0
    3f40:	e1 f7       	brne	.-8      	; 0x3f3a <main+0xa>
    3f42:	00 c0       	rjmp	.+0      	; 0x3f44 <main+0x14>
    3f44:	00 00       	nop
	// Startup delay (Beep "Imperial March")
	//player.Play();
	_delay_ms(2000);
	
	// Initialize application GUI
	App.Start();
    3f46:	89 ee       	ldi	r24, 0xE9	; 233
    3f48:	92 e2       	ldi	r25, 0x22	; 34
    3f4a:	0e 94 0b 05 	call	0xa16	; 0xa16 <_ZN16CLaserControlApp5StartEv>
		// Loop delay
		_delay_ms(1);
		
		// Process application
		static uint16_t prs = 0;
		if ((prs++ % 200) == 0)
    3f4e:	c8 ec       	ldi	r28, 0xC8	; 200
    3f50:	8f e3       	ldi	r24, 0x3F	; 63
    3f52:	9f e1       	ldi	r25, 0x1F	; 31
    3f54:	01 97       	sbiw	r24, 0x01	; 1
    3f56:	f1 f7       	brne	.-4      	; 0x3f54 <main+0x24>
    3f58:	00 c0       	rjmp	.+0      	; 0x3f5a <main+0x2a>
    3f5a:	00 00       	nop
    3f5c:	40 91 df 22 	lds	r20, 0x22DF
    3f60:	50 91 e0 22 	lds	r21, 0x22E0
    3f64:	ca 01       	movw	r24, r20
    3f66:	01 96       	adiw	r24, 0x01	; 1
    3f68:	80 93 df 22 	sts	0x22DF, r24
    3f6c:	90 93 e0 22 	sts	0x22E0, r25
    3f70:	9a 01       	movw	r18, r20
    3f72:	36 95       	lsr	r19
    3f74:	27 95       	ror	r18
    3f76:	36 95       	lsr	r19
    3f78:	27 95       	ror	r18
    3f7a:	36 95       	lsr	r19
    3f7c:	27 95       	ror	r18
    3f7e:	ab e7       	ldi	r26, 0x7B	; 123
    3f80:	b4 e1       	ldi	r27, 0x14	; 20
    3f82:	0e 94 20 23 	call	0x4640	; 0x4640 <__umulhisi3>
    3f86:	96 95       	lsr	r25
    3f88:	87 95       	ror	r24
    3f8a:	c8 9f       	mul	r28, r24
    3f8c:	90 01       	movw	r18, r0
    3f8e:	c9 9f       	mul	r28, r25
    3f90:	30 0d       	add	r19, r0
    3f92:	11 24       	eor	r1, r1
    3f94:	42 17       	cp	r20, r18
    3f96:	53 07       	cpc	r21, r19
    3f98:	d9 f6       	brne	.-74     	; 0x3f50 <main+0x20>
			App.Run();
    3f9a:	89 ee       	ldi	r24, 0xE9	; 233
    3f9c:	92 e2       	ldi	r25, 0x22	; 34
    3f9e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <_ZN16CLaserControlApp3RunEv>
    3fa2:	d6 cf       	rjmp	.-84     	; 0x3f50 <main+0x20>

00003fa4 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
	free(tx_buffer);
}

// local methods
void CMBEventsHandler::FillRegDataTx(uint8_t addr, uint8_t* data, uint8_t length)
{
    3fa4:	cf 93       	push	r28
    3fa6:	df 93       	push	r29
    3fa8:	ec 01       	movw	r28, r24
		// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    3faa:	ec 81       	ldd	r30, Y+4	; 0x04
    3fac:	fd 81       	ldd	r31, Y+5	; 0x05
    3fae:	8a ea       	ldi	r24, 0xAA	; 170
    3fb0:	80 83       	st	Z, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    3fb2:	ec 81       	ldd	r30, Y+4	; 0x04
    3fb4:	fd 81       	ldd	r31, Y+5	; 0x05
    3fb6:	8c ec       	ldi	r24, 0xCC	; 204
    3fb8:	81 83       	std	Z+1, r24	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 4; //CMD (1) + DATA(length) + CRC(2) + ADDR(1)
#else
	tx_buffer[2] = length + 2; //CMD (1) + DATA(length) + ADDR(1)
    3fba:	ec 81       	ldd	r30, Y+4	; 0x04
    3fbc:	fd 81       	ldd	r31, Y+5	; 0x05
    3fbe:	82 e0       	ldi	r24, 0x02	; 2
    3fc0:	82 0f       	add	r24, r18
    3fc2:	82 83       	std	Z+2, r24	; 0x02
#endif
	tx_buffer[3] = 0x80;	// Frame command
    3fc4:	ec 81       	ldd	r30, Y+4	; 0x04
    3fc6:	fd 81       	ldd	r31, Y+5	; 0x05
    3fc8:	80 e8       	ldi	r24, 0x80	; 128
    3fca:	83 83       	std	Z+3, r24	; 0x03
	tx_buffer[4] = addr;	// Register address
    3fcc:	ec 81       	ldd	r30, Y+4	; 0x04
    3fce:	fd 81       	ldd	r31, Y+5	; 0x05
    3fd0:	64 83       	std	Z+4, r22	; 0x04
	tx_frame_length = length + 5;
    3fd2:	85 e0       	ldi	r24, 0x05	; 5
    3fd4:	82 0f       	add	r24, r18
    3fd6:	89 87       	std	Y+9, r24	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	21 15       	cp	r18, r1
    3fdc:	31 05       	cpc	r19, r1
    3fde:	81 f0       	breq	.+32     	; 0x4000 <__stack+0x1>
    3fe0:	da 01       	movw	r26, r20
    3fe2:	42 0f       	add	r20, r18
    3fe4:	53 1f       	adc	r21, r19
    3fe6:	65 e0       	ldi	r22, 0x05	; 5
    3fe8:	70 e0       	ldi	r23, 0x00	; 0
		tx_buffer[i+5] = data[i];
    3fea:	9d 91       	ld	r25, X+
    3fec:	ec 81       	ldd	r30, Y+4	; 0x04
    3fee:	fd 81       	ldd	r31, Y+5	; 0x05
    3ff0:	e6 0f       	add	r30, r22
    3ff2:	f7 1f       	adc	r31, r23
    3ff4:	90 83       	st	Z, r25
    3ff6:	6f 5f       	subi	r22, 0xFF	; 255
    3ff8:	7f 4f       	sbci	r23, 0xFF	; 255
	tx_buffer[3] = 0x80;	// Frame command
	tx_buffer[4] = addr;	// Register address
	tx_frame_length = length + 5;
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    3ffa:	a4 17       	cp	r26, r20
    3ffc:	b5 07       	cpc	r27, r21
    3ffe:	a9 f7       	brne	.-22     	; 0x3fea <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length]   = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	tx_frame_length = length + 7;
#endif
}
    4000:	df 91       	pop	r29
    4002:	cf 91       	pop	r28
    4004:	08 95       	ret

00004006 <_ZN16CMBEventsHandler13FillRegDataRqEhh>:

void CMBEventsHandler::FillRegDataRq(uint8_t addr, uint8_t length)
{
    4006:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4008:	a4 81       	ldd	r26, Z+4	; 0x04
    400a:	b5 81       	ldd	r27, Z+5	; 0x05
    400c:	8a ea       	ldi	r24, 0xAA	; 170
    400e:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4010:	a4 81       	ldd	r26, Z+4	; 0x04
    4012:	b5 81       	ldd	r27, Z+5	; 0x05
    4014:	8c ec       	ldi	r24, 0xCC	; 204
    4016:	11 96       	adiw	r26, 0x01	; 1
    4018:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 5; //CMD(1) + DATA(2) + CRC(2)
#else
	tx_buffer[2] = 3; //CMD(1) + DATA(2)
    401a:	a4 81       	ldd	r26, Z+4	; 0x04
    401c:	b5 81       	ldd	r27, Z+5	; 0x05
    401e:	83 e0       	ldi	r24, 0x03	; 3
    4020:	12 96       	adiw	r26, 0x02	; 2
    4022:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x81;	// Frame command
    4024:	a4 81       	ldd	r26, Z+4	; 0x04
    4026:	b5 81       	ldd	r27, Z+5	; 0x05
    4028:	81 e8       	ldi	r24, 0x81	; 129
    402a:	13 96       	adiw	r26, 0x03	; 3
    402c:	8c 93       	st	X, r24
	tx_buffer[4] = addr;	// Register address
    402e:	a4 81       	ldd	r26, Z+4	; 0x04
    4030:	b5 81       	ldd	r27, Z+5	; 0x05
    4032:	14 96       	adiw	r26, 0x04	; 4
    4034:	6c 93       	st	X, r22
	tx_buffer[5] = length;	// Data
    4036:	a4 81       	ldd	r26, Z+4	; 0x04
    4038:	b5 81       	ldd	r27, Z+5	; 0x05
    403a:	15 96       	adiw	r26, 0x05	; 5
    403c:	4c 93       	st	X, r20
	tx_frame_length = 6;
    403e:	86 e0       	ldi	r24, 0x06	; 6
    4040:	81 87       	std	Z+9, r24	; 0x09
    4042:	08 95       	ret

00004044 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	tx_frame_length = length + 8;
#endif
}

void CMBEventsHandler::FillVarDataTx(uint16_t addr, uint16_t* data, uint16_t length)
{
    4044:	0f 93       	push	r16
    4046:	1f 93       	push	r17
    4048:	cf 93       	push	r28
    404a:	df 93       	push	r29
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    404c:	dc 01       	movw	r26, r24
    404e:	14 96       	adiw	r26, 0x04	; 4
    4050:	ed 91       	ld	r30, X+
    4052:	fc 91       	ld	r31, X
    4054:	15 97       	sbiw	r26, 0x05	; 5
    4056:	aa ea       	ldi	r26, 0xAA	; 170
    4058:	a0 83       	st	Z, r26
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    405a:	ec 01       	movw	r28, r24
    405c:	ec 81       	ldd	r30, Y+4	; 0x04
    405e:	fd 81       	ldd	r31, Y+5	; 0x05
    4060:	ac ec       	ldi	r26, 0xCC	; 204
    4062:	a1 83       	std	Z+1, r26	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 5; //CMD (1) + DATA(length * 2) + CRC(2) + ADDR(2)
#else
	tx_buffer[2] = length + 3; //CMD (1) + DATA(length * 2) + ADDR(2)
    4064:	ec 81       	ldd	r30, Y+4	; 0x04
    4066:	fd 81       	ldd	r31, Y+5	; 0x05
    4068:	a3 e0       	ldi	r26, 0x03	; 3
    406a:	a2 0f       	add	r26, r18
    406c:	a2 83       	std	Z+2, r26	; 0x02
#endif
	tx_buffer[3] = 0x82;	// Frame command
    406e:	ec 81       	ldd	r30, Y+4	; 0x04
    4070:	fd 81       	ldd	r31, Y+5	; 0x05
    4072:	a2 e8       	ldi	r26, 0x82	; 130
    4074:	a3 83       	std	Z+3, r26	; 0x03
	tx_buffer[4] = addr >> 8;
    4076:	ec 81       	ldd	r30, Y+4	; 0x04
    4078:	fd 81       	ldd	r31, Y+5	; 0x05
    407a:	74 83       	std	Z+4, r23	; 0x04
	tx_buffer[5] = addr & 0xff;
    407c:	ec 81       	ldd	r30, Y+4	; 0x04
    407e:	fd 81       	ldd	r31, Y+5	; 0x05
    4080:	65 83       	std	Z+5, r22	; 0x05
	tx_frame_length = length + 6;
    4082:	66 e0       	ldi	r22, 0x06	; 6
    4084:	62 0f       	add	r22, r18
    4086:	69 87       	std	Y+9, r22	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    4088:	36 95       	lsr	r19
    408a:	27 95       	ror	r18
    408c:	21 15       	cp	r18, r1
    408e:	31 05       	cpc	r19, r1
    4090:	e1 f0       	breq	.+56     	; 0x40ca <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x86>
    4092:	e4 2f       	mov	r30, r20
    4094:	f5 2f       	mov	r31, r21
    4096:	2d 5f       	subi	r18, 0xFD	; 253
    4098:	3f 4f       	sbci	r19, 0xFF	; 255
    409a:	22 0f       	add	r18, r18
    409c:	33 1f       	adc	r19, r19
    409e:	46 e0       	ldi	r20, 0x06	; 6
    40a0:	50 e0       	ldi	r21, 0x00	; 0
	{
		tx_buffer[6 + i*2 + 0] = data[i] >> 8;
    40a2:	ec 01       	movw	r28, r24
    40a4:	ac 81       	ldd	r26, Y+4	; 0x04
    40a6:	bd 81       	ldd	r27, Y+5	; 0x05
    40a8:	a4 0f       	add	r26, r20
    40aa:	b5 1f       	adc	r27, r21
    40ac:	61 81       	ldd	r22, Z+1	; 0x01
    40ae:	6c 93       	st	X, r22
		tx_buffer[6 + i*2 + 1] = data[i] & 0xff;
    40b0:	ac 81       	ldd	r26, Y+4	; 0x04
    40b2:	bd 81       	ldd	r27, Y+5	; 0x05
    40b4:	a4 0f       	add	r26, r20
    40b6:	b5 1f       	adc	r27, r21
    40b8:	60 81       	ld	r22, Z
    40ba:	32 96       	adiw	r30, 0x02	; 2
    40bc:	11 96       	adiw	r26, 0x01	; 1
    40be:	6c 93       	st	X, r22
    40c0:	4e 5f       	subi	r20, 0xFE	; 254
    40c2:	5f 4f       	sbci	r21, 0xFF	; 255
	tx_buffer[4] = addr >> 8;
	tx_buffer[5] = addr & 0xff;
	tx_frame_length = length + 6;
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    40c4:	42 17       	cp	r20, r18
    40c6:	53 07       	cpc	r21, r19
    40c8:	61 f7       	brne	.-40     	; 0x40a2 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x5e>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length] = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	this->tx_frame_length = length * 2 + 8;
#endif
}
    40ca:	df 91       	pop	r29
    40cc:	cf 91       	pop	r28
    40ce:	1f 91       	pop	r17
    40d0:	0f 91       	pop	r16
    40d2:	08 95       	ret

000040d4 <_ZN16CMBEventsHandler13FillVarDataRqEjj>:

void CMBEventsHandler::FillVarDataRq(uint16_t addr, uint16_t length)
{
    40d4:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    40d6:	a4 81       	ldd	r26, Z+4	; 0x04
    40d8:	b5 81       	ldd	r27, Z+5	; 0x05
    40da:	8a ea       	ldi	r24, 0xAA	; 170
    40dc:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    40de:	a4 81       	ldd	r26, Z+4	; 0x04
    40e0:	b5 81       	ldd	r27, Z+5	; 0x05
    40e2:	8c ec       	ldi	r24, 0xCC	; 204
    40e4:	11 96       	adiw	r26, 0x01	; 1
    40e6:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 6; //CMD(1) + DATA(3) + CRC(2)
#else
	tx_buffer[2] = 4; //CMD(1) + DATA(3)
    40e8:	a4 81       	ldd	r26, Z+4	; 0x04
    40ea:	b5 81       	ldd	r27, Z+5	; 0x05
    40ec:	84 e0       	ldi	r24, 0x04	; 4
    40ee:	12 96       	adiw	r26, 0x02	; 2
    40f0:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x83;				// Frame command
    40f2:	a4 81       	ldd	r26, Z+4	; 0x04
    40f4:	b5 81       	ldd	r27, Z+5	; 0x05
    40f6:	83 e8       	ldi	r24, 0x83	; 131
    40f8:	13 96       	adiw	r26, 0x03	; 3
    40fa:	8c 93       	st	X, r24
	tx_buffer[4] = addr >> 8;			// Register address
    40fc:	a4 81       	ldd	r26, Z+4	; 0x04
    40fe:	b5 81       	ldd	r27, Z+5	; 0x05
    4100:	14 96       	adiw	r26, 0x04	; 4
    4102:	7c 93       	st	X, r23
	tx_buffer[5] = addr & 0xff;			// Register address
    4104:	a4 81       	ldd	r26, Z+4	; 0x04
    4106:	b5 81       	ldd	r27, Z+5	; 0x05
    4108:	15 96       	adiw	r26, 0x05	; 5
    410a:	6c 93       	st	X, r22
	tx_buffer[6] = length;				// Data
    410c:	a4 81       	ldd	r26, Z+4	; 0x04
    410e:	b5 81       	ldd	r27, Z+5	; 0x05
    4110:	16 96       	adiw	r26, 0x06	; 6
    4112:	4c 93       	st	X, r20
	tx_frame_length = 7;
    4114:	87 e0       	ldi	r24, 0x07	; 7
    4116:	81 87       	std	Z+9, r24	; 0x09
    4118:	08 95       	ret

0000411a <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
CMBEventsHandler::~CMBEventsHandler()
{
} //~CMBProtocol

void CMBEventsHandler::AllocateBuffers(uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    411a:	0f 93       	push	r16
    411c:	1f 93       	push	r17
    411e:	cf 93       	push	r28
    4120:	df 93       	push	r29
    4122:	ec 01       	movw	r28, r24
    4124:	cb 01       	movw	r24, r22
    4126:	8a 01       	movw	r16, r20
	rx_bufferSize = rx_bufSize;
    4128:	6f 83       	std	Y+7, r22	; 0x07
    412a:	78 87       	std	Y+8, r23	; 0x08
	tx_bufferSize = tx_bufSize;
    412c:	4a 87       	std	Y+10, r20	; 0x0a
    412e:	5b 87       	std	Y+11, r21	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    4130:	0e 94 51 23 	call	0x46a2	; 0x46a2 <malloc>
    4134:	8a 83       	std	Y+2, r24	; 0x02
    4136:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    4138:	c8 01       	movw	r24, r16
    413a:	0e 94 51 23 	call	0x46a2	; 0x46a2 <malloc>
    413e:	8c 83       	std	Y+4, r24	; 0x04
    4140:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_frame_length  = 0x00;
    4142:	19 86       	std	Y+9, r1	; 0x09
	rx_frame_length  = 0x00;
    4144:	1e 82       	std	Y+6, r1	; 0x06
}
    4146:	df 91       	pop	r29
    4148:	cf 91       	pop	r28
    414a:	1f 91       	pop	r17
    414c:	0f 91       	pop	r16
    414e:	08 95       	ret

00004150 <_ZN16CMBEventsHandler11FreeBuffersEv>:

void CMBEventsHandler::FreeBuffers()
{
    4150:	cf 93       	push	r28
    4152:	df 93       	push	r29
    4154:	ec 01       	movw	r28, r24
	free(rx_buffer);
    4156:	8a 81       	ldd	r24, Y+2	; 0x02
    4158:	9b 81       	ldd	r25, Y+3	; 0x03
    415a:	0e 94 e6 23 	call	0x47cc	; 0x47cc <free>
	free(tx_buffer);
    415e:	8c 81       	ldd	r24, Y+4	; 0x04
    4160:	9d 81       	ldd	r25, Y+5	; 0x05
    4162:	0e 94 e6 23 	call	0x47cc	; 0x47cc <free>
}
    4166:	df 91       	pop	r29
    4168:	cf 91       	pop	r28
    416a:	08 95       	ret

0000416c <_ZN16CMBEventsHandlerD1Ev>:

#include "CMBProtocol.h"
#include <avr/io.h>
#include <util/crc16.h>

CMBEventsHandler::~CMBEventsHandler()
    416c:	08 95       	ret

0000416e <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	CMBSender::ProcessTransaction(data, length);
}

void CMBSender::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
	if (CallbackHandler != 0)
    416e:	dc 01       	movw	r26, r24
    4170:	57 96       	adiw	r26, 0x17	; 23
    4172:	8d 91       	ld	r24, X+
    4174:	9c 91       	ld	r25, X
    4176:	58 97       	sbiw	r26, 0x18	; 24
    4178:	00 97       	sbiw	r24, 0x00	; 0
    417a:	39 f0       	breq	.+14     	; 0x418a <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
		CallbackHandler->OnVariableReceived(addr, data, length);
    417c:	dc 01       	movw	r26, r24
    417e:	ed 91       	ld	r30, X+
    4180:	fc 91       	ld	r31, X
    4182:	02 80       	ldd	r0, Z+2	; 0x02
    4184:	f3 81       	ldd	r31, Z+3	; 0x03
    4186:	e0 2d       	mov	r30, r0
    4188:	19 95       	eicall
    418a:	08 95       	ret

0000418c <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
}


void CMBSender::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
	if (CallbackHandler != 0)
    418c:	dc 01       	movw	r26, r24
    418e:	57 96       	adiw	r26, 0x17	; 23
    4190:	8d 91       	ld	r24, X+
    4192:	9c 91       	ld	r25, X
    4194:	58 97       	sbiw	r26, 0x18	; 24
    4196:	00 97       	sbiw	r24, 0x00	; 0
    4198:	39 f0       	breq	.+14     	; 0x41a8 <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
		CallbackHandler->OnRegisterReceived(addr, data, length);
    419a:	dc 01       	movw	r26, r24
    419c:	ed 91       	ld	r30, X+
    419e:	fc 91       	ld	r31, X
    41a0:	04 80       	ldd	r0, Z+4	; 0x04
    41a2:	f5 81       	ldd	r31, Z+5	; 0x05
    41a4:	e0 2d       	mov	r30, r0
    41a6:	19 95       	eicall
    41a8:	08 95       	ret

000041aa <_ZN9CMBSenderC1Ev>:
#include "CMBSender.h"
#include <avr/io.h>
#include <util/crc16.h>

// default constructor
CMBSender::CMBSender()
    41aa:	2b ed       	ldi	r18, 0xDB	; 219
    41ac:	30 e2       	ldi	r19, 0x20	; 32
    41ae:	fc 01       	movw	r30, r24
    41b0:	20 83       	st	Z, r18
    41b2:	31 83       	std	Z+1, r19	; 0x01
    41b4:	08 95       	ret

000041b6 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj>:
	
}


void CMBSender::Initialize(CUSART* usart, CMBEventsHandler *handler, uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    41b6:	cf 92       	push	r12
    41b8:	df 92       	push	r13
    41ba:	ef 92       	push	r14
    41bc:	ff 92       	push	r15
    41be:	0f 93       	push	r16
    41c0:	1f 93       	push	r17
    41c2:	cf 93       	push	r28
    41c4:	df 93       	push	r29
    41c6:	ec 01       	movw	r28, r24
    41c8:	7b 01       	movw	r14, r22
    41ca:	6a 01       	movw	r12, r20
    41cc:	c9 01       	movw	r24, r18
	rx_bufferSize = rx_bufSize;
    41ce:	2f 83       	std	Y+7, r18	; 0x07
    41d0:	38 87       	std	Y+8, r19	; 0x08
	tx_bufferSize = tx_bufSize;
    41d2:	0a 87       	std	Y+10, r16	; 0x0a
    41d4:	1b 87       	std	Y+11, r17	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    41d6:	0e 94 51 23 	call	0x46a2	; 0x46a2 <malloc>
    41da:	8a 83       	std	Y+2, r24	; 0x02
    41dc:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    41de:	c8 01       	movw	r24, r16
    41e0:	0e 94 51 23 	call	0x46a2	; 0x46a2 <malloc>
    41e4:	8c 83       	std	Y+4, r24	; 0x04
    41e6:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_buffer_pos    = 0x00;
    41e8:	1d 8a       	std	Y+21, r1	; 0x15
	tx_frame_length  = 0x00;
    41ea:	19 86       	std	Y+9, r1	; 0x09
	rx_buffer_pos    = 0x00;
    41ec:	1f 86       	std	Y+15, r1	; 0x0f
	rx_frame_length  = 0x00;
    41ee:	1e 82       	std	Y+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    41f0:	18 8a       	std	Y+16, r1	; 0x10
    41f2:	19 8a       	std	Y+17, r1	; 0x11
	rx_currt_crc     = 0x00;
    41f4:	1a 8a       	std	Y+18, r1	; 0x12
    41f6:	1b 8a       	std	Y+19, r1	; 0x13
	modbus_receiver_state  = rx_Idle;
    41f8:	87 e0       	ldi	r24, 0x07	; 7
    41fa:	8e 87       	std	Y+14, r24	; 0x0e
	modbus_transmitter_state  = tx_Idle;
    41fc:	82 e0       	ldi	r24, 0x02	; 2
    41fe:	8c 8b       	std	Y+20, r24	; 0x14
	isTransaction = false;
    4200:	1e 8a       	std	Y+22, r1	; 0x16
	
	// Set usart interface interrupts
	pUSART = usart;
    4202:	ec 86       	std	Y+12, r14	; 0x0c
    4204:	fd 86       	std	Y+13, r15	; 0x0d
	usart->SetRxInterruptionCallback((void*)this, OnUSARTRxInterrupt);
    4206:	d7 01       	movw	r26, r14
    4208:	ed 91       	ld	r30, X+
    420a:	fc 91       	ld	r31, X
    420c:	04 84       	ldd	r0, Z+12	; 0x0c
    420e:	f5 85       	ldd	r31, Z+13	; 0x0d
    4210:	e0 2d       	mov	r30, r0
    4212:	4c ee       	ldi	r20, 0xEC	; 236
    4214:	51 e2       	ldi	r21, 0x21	; 33
    4216:	be 01       	movw	r22, r28
    4218:	c7 01       	movw	r24, r14
    421a:	19 95       	eicall
	usart->SetTxInterruptionCallback((void*)this, OnUSARTTxInterrupt);
    421c:	d7 01       	movw	r26, r14
    421e:	ed 91       	ld	r30, X+
    4220:	fc 91       	ld	r31, X
    4222:	06 84       	ldd	r0, Z+14	; 0x0e
    4224:	f7 85       	ldd	r31, Z+15	; 0x0f
    4226:	e0 2d       	mov	r30, r0
    4228:	41 e5       	ldi	r20, 0x51	; 81
    422a:	52 e2       	ldi	r21, 0x22	; 34
    422c:	be 01       	movw	r22, r28
    422e:	c7 01       	movw	r24, r14
    4230:	19 95       	eicall
	
	// Set event handler
	if (handler)
    4232:	c1 14       	cp	r12, r1
    4234:	d1 04       	cpc	r13, r1
    4236:	19 f0       	breq	.+6      	; 0x423e <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj+0x88>
		CallbackHandler = handler;
    4238:	cf 8a       	std	Y+23, r12	; 0x17
    423a:	d8 8e       	std	Y+24, r13	; 0x18
    423c:	02 c0       	rjmp	.+4      	; 0x4242 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj+0x8c>
	else
		CallbackHandler = this;
    423e:	cf 8b       	std	Y+23, r28	; 0x17
    4240:	d8 8f       	std	Y+24, r29	; 0x18
} //CMBSender
    4242:	df 91       	pop	r29
    4244:	cf 91       	pop	r28
    4246:	1f 91       	pop	r17
    4248:	0f 91       	pop	r16
    424a:	ff 90       	pop	r15
    424c:	ef 90       	pop	r14
    424e:	df 90       	pop	r13
    4250:	cf 90       	pop	r12
    4252:	08 95       	ret

00004254 <_ZN9CMBSenderD1Ev>:
	free(rx_buffer);
	free(tx_buffer);
}

// default destructor
CMBSender::~CMBSender()
    4254:	2b ed       	ldi	r18, 0xDB	; 219
    4256:	30 e2       	ldi	r19, 0x20	; 32
    4258:	fc 01       	movw	r30, r24
    425a:	20 83       	st	Z, r18
    425c:	31 83       	std	Z+1, r19	; 0x01
    425e:	0e 94 b6 20 	call	0x416c	; 0x416c <_ZN16CMBEventsHandlerD1Ev>
    4262:	08 95       	ret

00004264 <_ZN9CMBSender13OnReceiveByteEh>:
//void CMBSender::RequestDataFromSRAM(uint16_t addr, uint8_t length);

volatile uint16_t cnt = 0;

void CMBSender::OnReceiveByte(uint8_t data)
{
    4264:	cf 93       	push	r28
    4266:	df 93       	push	r29
    4268:	ec 01       	movw	r28, r24
    426a:	96 2f       	mov	r25, r22
	switch (modbus_receiver_state)
    426c:	4e 85       	ldd	r20, Y+14	; 0x0e
    426e:	50 e0       	ldi	r21, 0x00	; 0
    4270:	4b 30       	cpi	r20, 0x0B	; 11
    4272:	51 05       	cpc	r21, r1
    4274:	08 f0       	brcs	.+2      	; 0x4278 <_ZN9CMBSender13OnReceiveByteEh+0x14>
    4276:	ad c0       	rjmp	.+346    	; 0x43d2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
    4278:	fa 01       	movw	r30, r20
    427a:	88 27       	eor	r24, r24
    427c:	ea 5d       	subi	r30, 0xDA	; 218
    427e:	fe 4f       	sbci	r31, 0xFE	; 254
    4280:	8f 4f       	sbci	r24, 0xFF	; 255
    4282:	0c 94 18 23 	jmp	0x4630	; 0x4630 <__tablejump2__>
	{
		case rx_Start :
		case rx_FrameHeader0 :
			if (data == FRAMEHEADER_LOWBYTE)
    4286:	9a 3a       	cpi	r25, 0xAA	; 170
    4288:	19 f4       	brne	.+6      	; 0x4290 <_ZN9CMBSender13OnReceiveByteEh+0x2c>
				modbus_receiver_state = rx_FrameHeader1;
    428a:	82 e0       	ldi	r24, 0x02	; 2
    428c:	8e 87       	std	Y+14, r24	; 0x0e
    428e:	a1 c0       	rjmp	.+322    	; 0x43d2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    4290:	81 e0       	ldi	r24, 0x01	; 1
    4292:	8e 87       	std	Y+14, r24	; 0x0e
    4294:	9e c0       	rjmp	.+316    	; 0x43d2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_FrameHeader1 :
			if (data == FRAMEHEADER_HIGHBYTE)
    4296:	9c 3c       	cpi	r25, 0xCC	; 204
    4298:	19 f4       	brne	.+6      	; 0x42a0 <_ZN9CMBSender13OnReceiveByteEh+0x3c>
				modbus_receiver_state = rx_FrameLength;
    429a:	83 e0       	ldi	r24, 0x03	; 3
    429c:	8e 87       	std	Y+14, r24	; 0x0e
    429e:	99 c0       	rjmp	.+306    	; 0x43d2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    42a0:	81 e0       	ldi	r24, 0x01	; 1
    42a2:	8e 87       	std	Y+14, r24	; 0x0e
    42a4:	96 c0       	rjmp	.+300    	; 0x43d2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_FrameLength :
			rx_frame_length = data;
    42a6:	9e 83       	std	Y+6, r25	; 0x06
			rx_buffer_pos = 0;
    42a8:	1f 86       	std	Y+15, r1	; 0x0f
			rx_currt_crc = 0;
    42aa:	1a 8a       	std	Y+18, r1	; 0x12
    42ac:	1b 8a       	std	Y+19, r1	; 0x13
			cnt = 0;
    42ae:	10 92 2c 23 	sts	0x232C, r1
    42b2:	10 92 2d 23 	sts	0x232D, r1
			modbus_receiver_state = rx_FrameReceive;
    42b6:	84 e0       	ldi	r24, 0x04	; 4
    42b8:	8e 87       	std	Y+14, r24	; 0x0e
			break;
    42ba:	8b c0       	rjmp	.+278    	; 0x43d2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		case rx_FrameReceive :
			rx_buffer[rx_buffer_pos] = data;
    42bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    42be:	ea 81       	ldd	r30, Y+2	; 0x02
    42c0:	fb 81       	ldd	r31, Y+3	; 0x03
    42c2:	e8 0f       	add	r30, r24
    42c4:	f1 1d       	adc	r31, r1
    42c6:	90 83       	st	Z, r25
			if (rx_buffer_pos > rx_bufferSize)
    42c8:	2f 85       	ldd	r18, Y+15	; 0x0f
    42ca:	30 e0       	ldi	r19, 0x00	; 0
    42cc:	4f 81       	ldd	r20, Y+7	; 0x07
    42ce:	58 85       	ldd	r21, Y+8	; 0x08
    42d0:	42 17       	cp	r20, r18
    42d2:	53 07       	cpc	r21, r19
    42d4:	18 f4       	brcc	.+6      	; 0x42dc <_ZN9CMBSender13OnReceiveByteEh+0x78>
			{
				modbus_receiver_state = rx_Error;
    42d6:	89 e0       	ldi	r24, 0x09	; 9
    42d8:	8e 87       	std	Y+14, r24	; 0x0e
				break;
    42da:	7b c0       	rjmp	.+246    	; 0x43d2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
    42dc:	2a 89       	ldd	r18, Y+18	; 0x12
    42de:	3b 89       	ldd	r19, Y+19	; 0x13
    42e0:	29 27       	eor	r18, r25
    42e2:	92 2f       	mov	r25, r18
    42e4:	92 95       	swap	r25
    42e6:	92 27       	eor	r25, r18
    42e8:	09 2e       	mov	r0, r25
    42ea:	96 95       	lsr	r25
    42ec:	96 95       	lsr	r25
    42ee:	90 25       	eor	r25, r0
    42f0:	09 2e       	mov	r0, r25
    42f2:	96 95       	lsr	r25
    42f4:	90 25       	eor	r25, r0
    42f6:	97 70       	andi	r25, 0x07	; 7
    42f8:	02 2e       	mov	r0, r18
    42fa:	23 2f       	mov	r18, r19
    42fc:	96 95       	lsr	r25
    42fe:	07 94       	ror	r0
    4300:	97 95       	ror	r25
    4302:	30 2d       	mov	r19, r0
    4304:	29 27       	eor	r18, r25
    4306:	06 94       	lsr	r0
    4308:	97 95       	ror	r25
    430a:	30 25       	eor	r19, r0
    430c:	29 27       	eor	r18, r25
			}
			rx_currt_crc = _crc16_update(rx_currt_crc, data);
    430e:	2a 8b       	std	Y+18, r18	; 0x12
    4310:	3b 8b       	std	Y+19, r19	; 0x13
			rx_buffer_pos++;
    4312:	8f 85       	ldd	r24, Y+15	; 0x0f
    4314:	8f 5f       	subi	r24, 0xFF	; 255
    4316:	8f 87       	std	Y+15, r24	; 0x0f
			cnt++;
    4318:	80 91 2c 23 	lds	r24, 0x232C
    431c:	90 91 2d 23 	lds	r25, 0x232D
    4320:	01 96       	adiw	r24, 0x01	; 1
    4322:	80 93 2c 23 	sts	0x232C, r24
    4326:	90 93 2d 23 	sts	0x232D, r25
			if (rx_buffer_pos == rx_frame_length)
    432a:	4f 85       	ldd	r20, Y+15	; 0x0f
    432c:	8e 81       	ldd	r24, Y+6	; 0x06
    432e:	48 13       	cpse	r20, r24
    4330:	50 c0       	rjmp	.+160    	; 0x43d2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			{
#ifdef USE_CRC
				modbus_receiver_state = rx_CRC0;
#else
				modbus_receiver_state = rx_Complete;
    4332:	88 e0       	ldi	r24, 0x08	; 8
    4334:	8e 87       	std	Y+14, r24	; 0x0e
#endif
				OnTransactionCallback(rx_buffer, rx_frame_length);
    4336:	e8 81       	ld	r30, Y
    4338:	f9 81       	ldd	r31, Y+1	; 0x01
    433a:	50 e0       	ldi	r21, 0x00	; 0
    433c:	6a 81       	ldd	r22, Y+2	; 0x02
    433e:	7b 81       	ldd	r23, Y+3	; 0x03
    4340:	01 90       	ld	r0, Z+
    4342:	f0 81       	ld	r31, Z
    4344:	e0 2d       	mov	r30, r0
    4346:	ce 01       	movw	r24, r28
    4348:	19 95       	eicall
				if (CallbackHandler != 0)
    434a:	8f 89       	ldd	r24, Y+23	; 0x17
    434c:	98 8d       	ldd	r25, Y+24	; 0x18
    434e:	00 97       	sbiw	r24, 0x00	; 0
    4350:	09 f4       	brne	.+2      	; 0x4354 <_ZN9CMBSender13OnReceiveByteEh+0xf0>
    4352:	3f c0       	rjmp	.+126    	; 0x43d2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    4354:	dc 01       	movw	r26, r24
    4356:	ed 91       	ld	r30, X+
    4358:	fc 91       	ld	r31, X
    435a:	4e 81       	ldd	r20, Y+6	; 0x06
    435c:	50 e0       	ldi	r21, 0x00	; 0
    435e:	6a 81       	ldd	r22, Y+2	; 0x02
    4360:	7b 81       	ldd	r23, Y+3	; 0x03
    4362:	01 90       	ld	r0, Z+
    4364:	f0 81       	ld	r31, Z
    4366:	e0 2d       	mov	r30, r0
    4368:	19 95       	eicall
    436a:	33 c0       	rjmp	.+102    	; 0x43d2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			}
			break;
		case rx_CRC0 :
			rx_frame_crc = data;
    436c:	69 2f       	mov	r22, r25
    436e:	70 e0       	ldi	r23, 0x00	; 0
    4370:	68 8b       	std	Y+16, r22	; 0x10
    4372:	79 8b       	std	Y+17, r23	; 0x11
			modbus_receiver_state = rx_CRC1;
    4374:	86 e0       	ldi	r24, 0x06	; 6
    4376:	8e 87       	std	Y+14, r24	; 0x0e
			break;
    4378:	2c c0       	rjmp	.+88     	; 0x43d2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		case rx_CRC1 :
			rx_frame_crc |= (data << 8);
    437a:	28 89       	ldd	r18, Y+16	; 0x10
    437c:	39 89       	ldd	r19, Y+17	; 0x11
    437e:	a9 01       	movw	r20, r18
    4380:	59 2b       	or	r21, r25
    4382:	48 8b       	std	Y+16, r20	; 0x10
    4384:	59 8b       	std	Y+17, r21	; 0x11
			if (rx_currt_crc == rx_frame_crc)
    4386:	2a 89       	ldd	r18, Y+18	; 0x12
    4388:	3b 89       	ldd	r19, Y+19	; 0x13
    438a:	42 17       	cp	r20, r18
    438c:	53 07       	cpc	r21, r19
    438e:	e9 f4       	brne	.+58     	; 0x43ca <_ZN9CMBSender13OnReceiveByteEh+0x166>
			{
				modbus_receiver_state = rx_Complete;
    4390:	88 e0       	ldi	r24, 0x08	; 8
    4392:	8e 87       	std	Y+14, r24	; 0x0e
				
				OnTransactionCallback(rx_buffer, rx_frame_length);
    4394:	e8 81       	ld	r30, Y
    4396:	f9 81       	ldd	r31, Y+1	; 0x01
    4398:	4e 81       	ldd	r20, Y+6	; 0x06
    439a:	50 e0       	ldi	r21, 0x00	; 0
    439c:	6a 81       	ldd	r22, Y+2	; 0x02
    439e:	7b 81       	ldd	r23, Y+3	; 0x03
    43a0:	01 90       	ld	r0, Z+
    43a2:	f0 81       	ld	r31, Z
    43a4:	e0 2d       	mov	r30, r0
    43a6:	ce 01       	movw	r24, r28
    43a8:	19 95       	eicall
				if (CallbackHandler != 0)
    43aa:	8f 89       	ldd	r24, Y+23	; 0x17
    43ac:	98 8d       	ldd	r25, Y+24	; 0x18
    43ae:	00 97       	sbiw	r24, 0x00	; 0
    43b0:	81 f0       	breq	.+32     	; 0x43d2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    43b2:	dc 01       	movw	r26, r24
    43b4:	ed 91       	ld	r30, X+
    43b6:	fc 91       	ld	r31, X
    43b8:	4e 81       	ldd	r20, Y+6	; 0x06
    43ba:	50 e0       	ldi	r21, 0x00	; 0
    43bc:	6a 81       	ldd	r22, Y+2	; 0x02
    43be:	7b 81       	ldd	r23, Y+3	; 0x03
    43c0:	01 90       	ld	r0, Z+
    43c2:	f0 81       	ld	r31, Z
    43c4:	e0 2d       	mov	r30, r0
    43c6:	19 95       	eicall
    43c8:	04 c0       	rjmp	.+8      	; 0x43d2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			}
			else
				modbus_receiver_state = rx_Error;
    43ca:	89 e0       	ldi	r24, 0x09	; 9
    43cc:	8e 87       	std	Y+14, r24	; 0x0e
    43ce:	01 c0       	rjmp	.+2      	; 0x43d2 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_Error :
		case rx_TimeOut :
			isTransaction = false;
    43d0:	1e 8a       	std	Y+22, r1	; 0x16
		case rx_Complete :
		case rx_Idle :
		default:
		break;
	};
}
    43d2:	df 91       	pop	r29
    43d4:	cf 91       	pop	r28
    43d6:	08 95       	ret

000043d8 <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
{
	modbus_transmitter_state = tx_Idle;
}

void CMBSender::OnUSARTRxInterrupt(void* sender)
{
    43d8:	cf 93       	push	r28
    43da:	df 93       	push	r29
    43dc:	ec 01       	movw	r28, r24
	CMBSender* owner = (CMBSender*)sender;
	uint8_t data = owner->pUSART->GetReceivedByte();
    43de:	8c 85       	ldd	r24, Y+12	; 0x0c
    43e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    43e2:	dc 01       	movw	r26, r24
    43e4:	ed 91       	ld	r30, X+
    43e6:	fc 91       	ld	r31, X
    43e8:	02 80       	ldd	r0, Z+2	; 0x02
    43ea:	f3 81       	ldd	r31, Z+3	; 0x03
    43ec:	e0 2d       	mov	r30, r0
    43ee:	19 95       	eicall
	owner->OnReceiveByte(data);
    43f0:	68 2f       	mov	r22, r24
    43f2:	ce 01       	movw	r24, r28
    43f4:	0e 94 32 21 	call	0x4264	; 0x4264 <_ZN9CMBSender13OnReceiveByteEh>
}
    43f8:	df 91       	pop	r29
    43fa:	cf 91       	pop	r28
    43fc:	08 95       	ret

000043fe <_ZN9CMBSender19StartMODBUSListenerEv>:
	if (modbus_receiver_state != rx_Complete)
		modbus_receiver_state = rx_TimeOut;
}

void CMBSender::StartMODBUSListener()
{
    43fe:	fc 01       	movw	r30, r24
	rx_buffer_pos    = 0x00;
    4400:	17 86       	std	Z+15, r1	; 0x0f
	rx_frame_length  = 0x00;
    4402:	16 82       	std	Z+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    4404:	10 8a       	std	Z+16, r1	; 0x10
    4406:	11 8a       	std	Z+17, r1	; 0x11
	rx_currt_crc     = 0x00;
    4408:	12 8a       	std	Z+18, r1	; 0x12
    440a:	13 8a       	std	Z+19, r1	; 0x13
	modbus_receiver_state  = rx_Start;
    440c:	16 86       	std	Z+14, r1	; 0x0e
    440e:	08 95       	ret

00004410 <_ZN9CMBSender14OnTransmitByteEv>:
		break;
	};
}

void CMBSender::OnTransmitByte()
{
    4410:	cf 93       	push	r28
    4412:	df 93       	push	r29
    4414:	ec 01       	movw	r28, r24
	switch (modbus_transmitter_state)
    4416:	8c 89       	ldd	r24, Y+20	; 0x14
    4418:	84 30       	cpi	r24, 0x04	; 4
    441a:	38 f4       	brcc	.+14     	; 0x442a <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    441c:	82 30       	cpi	r24, 0x02	; 2
    441e:	b8 f5       	brcc	.+110    	; 0x448e <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    4420:	88 23       	and	r24, r24
    4422:	31 f0       	breq	.+12     	; 0x4430 <_ZN9CMBSender14OnTransmitByteEv+0x20>
    4424:	81 30       	cpi	r24, 0x01	; 1
    4426:	d1 f0       	breq	.+52     	; 0x445c <_ZN9CMBSender14OnTransmitByteEv+0x4c>
    4428:	39 c0       	rjmp	.+114    	; 0x449c <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    442a:	85 30       	cpi	r24, 0x05	; 5
    442c:	81 f1       	breq	.+96     	; 0x448e <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    442e:	36 c0       	rjmp	.+108    	; 0x449c <_ZN9CMBSender14OnTransmitByteEv+0x8c>
	{
		case tx_Start :
			modbus_transmitter_state = tx_Transmitting; // Start receiving packet
    4430:	81 e0       	ldi	r24, 0x01	; 1
    4432:	8c 8b       	std	Y+20, r24	; 0x14
			tx_buffer_pos = 0;
    4434:	1d 8a       	std	Y+21, r1	; 0x15
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    4436:	8c 85       	ldd	r24, Y+12	; 0x0c
    4438:	9d 85       	ldd	r25, Y+13	; 0x0d
    443a:	2d 89       	ldd	r18, Y+21	; 0x15
    443c:	dc 01       	movw	r26, r24
    443e:	ed 91       	ld	r30, X+
    4440:	fc 91       	ld	r31, X
    4442:	ac 81       	ldd	r26, Y+4	; 0x04
    4444:	bd 81       	ldd	r27, Y+5	; 0x05
    4446:	a2 0f       	add	r26, r18
    4448:	b1 1d       	adc	r27, r1
    444a:	04 80       	ldd	r0, Z+4	; 0x04
    444c:	f5 81       	ldd	r31, Z+5	; 0x05
    444e:	e0 2d       	mov	r30, r0
    4450:	6c 91       	ld	r22, X
    4452:	19 95       	eicall
			tx_buffer_pos++;
    4454:	8d 89       	ldd	r24, Y+21	; 0x15
    4456:	8f 5f       	subi	r24, 0xFF	; 255
    4458:	8d 8b       	std	Y+21, r24	; 0x15
			break;
    445a:	20 c0       	rjmp	.+64     	; 0x449c <_ZN9CMBSender14OnTransmitByteEv+0x8c>
		case tx_Transmitting :
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    445c:	8c 85       	ldd	r24, Y+12	; 0x0c
    445e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4460:	2d 89       	ldd	r18, Y+21	; 0x15
    4462:	dc 01       	movw	r26, r24
    4464:	ed 91       	ld	r30, X+
    4466:	fc 91       	ld	r31, X
    4468:	ac 81       	ldd	r26, Y+4	; 0x04
    446a:	bd 81       	ldd	r27, Y+5	; 0x05
    446c:	a2 0f       	add	r26, r18
    446e:	b1 1d       	adc	r27, r1
    4470:	04 80       	ldd	r0, Z+4	; 0x04
    4472:	f5 81       	ldd	r31, Z+5	; 0x05
    4474:	e0 2d       	mov	r30, r0
    4476:	6c 91       	ld	r22, X
    4478:	19 95       	eicall
			tx_buffer_pos++;
    447a:	8d 89       	ldd	r24, Y+21	; 0x15
    447c:	8f 5f       	subi	r24, 0xFF	; 255
    447e:	8d 8b       	std	Y+21, r24	; 0x15
			if (tx_buffer_pos == tx_frame_length)
    4480:	9d 89       	ldd	r25, Y+21	; 0x15
    4482:	89 85       	ldd	r24, Y+9	; 0x09
    4484:	98 13       	cpse	r25, r24
    4486:	0a c0       	rjmp	.+20     	; 0x449c <_ZN9CMBSender14OnTransmitByteEv+0x8c>
				modbus_transmitter_state = tx_Complete;
    4488:	83 e0       	ldi	r24, 0x03	; 3
    448a:	8c 8b       	std	Y+20, r24	; 0x14
    448c:	07 c0       	rjmp	.+14     	; 0x449c <_ZN9CMBSender14OnTransmitByteEv+0x8c>
			break;
		case tx_Idle :
		case tx_TimeOut :
		case tx_Complete :
			if (isTransaction)
    448e:	8e 89       	ldd	r24, Y+22	; 0x16
    4490:	88 23       	and	r24, r24
    4492:	19 f0       	breq	.+6      	; 0x449a <_ZN9CMBSender14OnTransmitByteEv+0x8a>
				StartMODBUSListener();
    4494:	ce 01       	movw	r24, r28
    4496:	0e 94 ff 21 	call	0x43fe	; 0x43fe <_ZN9CMBSender19StartMODBUSListenerEv>
			isTransaction = false;
    449a:	1e 8a       	std	Y+22, r1	; 0x16
		default :
		break;
	}
}
    449c:	df 91       	pop	r29
    449e:	cf 91       	pop	r28
    44a0:	08 95       	ret

000044a2 <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
}

void CMBSender::OnUSARTTxInterrupt(void* sender)
{
	CMBSender* owner = (CMBSender*)sender;
	owner->OnTransmitByte();
    44a2:	0e 94 08 22 	call	0x4410	; 0x4410 <_ZN9CMBSender14OnTransmitByteEv>
    44a6:	08 95       	ret

000044a8 <_ZN9CMBSender18WaitMODBUSListenerEv>:
	rx_currt_crc     = 0x00;
	modbus_receiver_state  = rx_Start;
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
    44a8:	fc 01       	movw	r30, r24
	while (modbus_receiver_state != rx_Complete)
    44aa:	06 c0       	rjmp	.+12     	; 0x44b8 <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
	{
		if (modbus_receiver_state == rx_Error)
    44ac:	86 85       	ldd	r24, Z+14	; 0x0e
    44ae:	89 30       	cpi	r24, 0x09	; 9
    44b0:	41 f0       	breq	.+16     	; 0x44c2 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
    44b2:	86 85       	ldd	r24, Z+14	; 0x0e
    44b4:	8a 30       	cpi	r24, 0x0A	; 10
    44b6:	39 f0       	breq	.+14     	; 0x44c6 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
	modbus_receiver_state  = rx_Start;
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
    44b8:	86 85       	ldd	r24, Z+14	; 0x0e
    44ba:	88 30       	cpi	r24, 0x08	; 8
    44bc:	b9 f7       	brne	.-18     	; 0x44ac <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
		if (modbus_receiver_state == rx_Error)
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
	}
	return Complete;
    44be:	81 e0       	ldi	r24, 0x01	; 1
    44c0:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
	{
		if (modbus_receiver_state == rx_Error)
			return Error;
    44c2:	82 e0       	ldi	r24, 0x02	; 2
    44c4:	08 95       	ret
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
    44c6:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    44c8:	08 95       	ret

000044ca <_ZN9CMBSender22StartMODBUSTransmitterEv>:
	modbus_receiver_state  = rx_Idle;
}

void CMBSender::StartMODBUSTransmitter()
{
	tx_buffer_pos = 0x00;
    44ca:	fc 01       	movw	r30, r24
    44cc:	15 8a       	std	Z+21, r1	; 0x15
	modbus_transmitter_state  = tx_Start;
    44ce:	14 8a       	std	Z+20, r1	; 0x14
	OnTransmitByte();
    44d0:	0e 94 08 22 	call	0x4410	; 0x4410 <_ZN9CMBSender14OnTransmitByteEv>
    44d4:	08 95       	ret

000044d6 <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
{
} //~CMBSender

// MODBUS write data to register command
void CMBSender::WriteDataToRegisterAsync(uint8_t addr, uint8_t* data, uint8_t length)
{
    44d6:	cf 93       	push	r28
    44d8:	df 93       	push	r29
    44da:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataTx(addr, data, length);
    44dc:	e8 81       	ld	r30, Y
    44de:	f9 81       	ldd	r31, Y+1	; 0x01
    44e0:	02 84       	ldd	r0, Z+10	; 0x0a
    44e2:	f3 85       	ldd	r31, Z+11	; 0x0b
    44e4:	e0 2d       	mov	r30, r0
    44e6:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    44e8:	ce 01       	movw	r24, r28
    44ea:	0e 94 65 22 	call	0x44ca	; 0x44ca <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    44ee:	df 91       	pop	r29
    44f0:	cf 91       	pop	r28
    44f2:	08 95       	ret

000044f4 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:

void CMBSender::WriteDataToSRAMAsync(uint16_t addr, uint16_t* data, uint16_t length)
{
    44f4:	cf 93       	push	r28
    44f6:	df 93       	push	r29
    44f8:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataTx(addr, data, length);
    44fa:	e8 81       	ld	r30, Y
    44fc:	f9 81       	ldd	r31, Y+1	; 0x01
    44fe:	06 84       	ldd	r0, Z+14	; 0x0e
    4500:	f7 85       	ldd	r31, Z+15	; 0x0f
    4502:	e0 2d       	mov	r30, r0
    4504:	19 95       	eicall
		
	// Start transition
	StartMODBUSTransmitter();
    4506:	ce 01       	movw	r24, r28
    4508:	0e 94 65 22 	call	0x44ca	; 0x44ca <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    450c:	df 91       	pop	r29
    450e:	cf 91       	pop	r28
    4510:	08 95       	ret

00004512 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:

void CMBSender::RequestDataFromRegisterAsync(uint8_t addr, uint8_t length)
{
    4512:	cf 93       	push	r28
    4514:	df 93       	push	r29
    4516:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataRq(addr, length);
    4518:	e8 81       	ld	r30, Y
    451a:	f9 81       	ldd	r31, Y+1	; 0x01
    451c:	04 84       	ldd	r0, Z+12	; 0x0c
    451e:	f5 85       	ldd	r31, Z+13	; 0x0d
    4520:	e0 2d       	mov	r30, r0
    4522:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    4524:	ce 01       	movw	r24, r28
    4526:	0e 94 65 22 	call	0x44ca	; 0x44ca <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    452a:	df 91       	pop	r29
    452c:	cf 91       	pop	r28
    452e:	08 95       	ret

00004530 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:

void CMBSender::RequestDataFromSRAMAsync(uint16_t addr, uint8_t length)
{
    4530:	cf 93       	push	r28
    4532:	df 93       	push	r29
    4534:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataRq(addr, length);
    4536:	e8 81       	ld	r30, Y
    4538:	f9 81       	ldd	r31, Y+1	; 0x01
    453a:	50 e0       	ldi	r21, 0x00	; 0
    453c:	00 88       	ldd	r0, Z+16	; 0x10
    453e:	f1 89       	ldd	r31, Z+17	; 0x11
    4540:	e0 2d       	mov	r30, r0
    4542:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    4544:	ce 01       	movw	r24, r28
    4546:	0e 94 65 22 	call	0x44ca	; 0x44ca <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    454a:	df 91       	pop	r29
    454c:	cf 91       	pop	r28
    454e:	08 95       	ret

00004550 <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
	modbus_transmitter_state  = tx_Start;
	OnTransmitByte();
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
    4550:	fc 01       	movw	r30, r24
	while (modbus_transmitter_state != tx_Complete)
    4552:	06 c0       	rjmp	.+12     	; 0x4560 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
	{
		if (modbus_transmitter_state == tx_Error)
    4554:	84 89       	ldd	r24, Z+20	; 0x14
    4556:	84 30       	cpi	r24, 0x04	; 4
    4558:	41 f0       	breq	.+16     	; 0x456a <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
    455a:	84 89       	ldd	r24, Z+20	; 0x14
    455c:	85 30       	cpi	r24, 0x05	; 5
    455e:	39 f0       	breq	.+14     	; 0x456e <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
	OnTransmitByte();
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
    4560:	84 89       	ldd	r24, Z+20	; 0x14
    4562:	83 30       	cpi	r24, 0x03	; 3
    4564:	b9 f7       	brne	.-18     	; 0x4554 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
		if (modbus_transmitter_state == tx_Error)
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
	}
	return Complete;
    4566:	81 e0       	ldi	r24, 0x01	; 1
    4568:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
	{
		if (modbus_transmitter_state == tx_Error)
		return Error;
    456a:	82 e0       	ldi	r24, 0x02	; 2
    456c:	08 95       	ret
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
    456e:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    4570:	08 95       	ret

00004572 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTransmitByte();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    4572:	21 e0       	ldi	r18, 0x01	; 1
    4574:	fc 01       	movw	r30, r24
    4576:	26 8b       	std	Z+22, r18	; 0x16
	RequestDataFromRegisterAsync(addr, length);
    4578:	0e 94 89 22 	call	0x4512	; 0x4512 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    457c:	08 95       	ret

0000457e <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    457e:	21 e0       	ldi	r18, 0x01	; 1
    4580:	fc 01       	movw	r30, r24
    4582:	26 8b       	std	Z+22, r18	; 0x16
	RequestDataFromSRAMAsync(addr, length);
    4584:	0e 94 98 22 	call	0x4530	; 0x4530 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    4588:	08 95       	ret

0000458a <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    458a:	0f 93       	push	r16
    458c:	1f 93       	push	r17
    458e:	cf 93       	push	r28
    4590:	df 93       	push	r29
    4592:	8c 01       	movw	r16, r24
    4594:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    4596:	98 81       	ld	r25, Y
    4598:	91 38       	cpi	r25, 0x81	; 129
    459a:	69 f4       	brne	.+26     	; 0x45b6 <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    459c:	d8 01       	movw	r26, r16
    459e:	ed 91       	ld	r30, X+
    45a0:	fc 91       	ld	r31, X
    45a2:	04 80       	ldd	r0, Z+4	; 0x04
    45a4:	f5 81       	ldd	r31, Z+5	; 0x05
    45a6:	e0 2d       	mov	r30, r0
    45a8:	2a 81       	ldd	r18, Y+2	; 0x02
    45aa:	ab 01       	movw	r20, r22
    45ac:	4d 5f       	subi	r20, 0xFD	; 253
    45ae:	5f 4f       	sbci	r21, 0xFF	; 255
    45b0:	69 81       	ldd	r22, Y+1	; 0x01
    45b2:	c8 01       	movw	r24, r16
    45b4:	19 95       	eicall
	}
	if (data[0] == 0x83)
    45b6:	98 81       	ld	r25, Y
    45b8:	93 38       	cpi	r25, 0x83	; 131
    45ba:	99 f4       	brne	.+38     	; 0x45e2 <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], data[3]);
    45bc:	d8 01       	movw	r26, r16
    45be:	ed 91       	ld	r30, X+
    45c0:	fc 91       	ld	r31, X
    45c2:	2b 81       	ldd	r18, Y+3	; 0x03
    45c4:	30 e0       	ldi	r19, 0x00	; 0
    45c6:	ae 01       	movw	r20, r28
    45c8:	4c 5f       	subi	r20, 0xFC	; 252
    45ca:	5f 4f       	sbci	r21, 0xFF	; 255
    45cc:	69 81       	ldd	r22, Y+1	; 0x01
    45ce:	70 e0       	ldi	r23, 0x00	; 0
    45d0:	76 2f       	mov	r23, r22
    45d2:	66 27       	eor	r22, r22
    45d4:	8a 81       	ldd	r24, Y+2	; 0x02
    45d6:	68 2b       	or	r22, r24
    45d8:	02 80       	ldd	r0, Z+2	; 0x02
    45da:	f3 81       	ldd	r31, Z+3	; 0x03
    45dc:	e0 2d       	mov	r30, r0
    45de:	c8 01       	movw	r24, r16
    45e0:	19 95       	eicall
	}
}
    45e2:	df 91       	pop	r29
    45e4:	cf 91       	pop	r28
    45e6:	1f 91       	pop	r17
    45e8:	0f 91       	pop	r16
    45ea:	08 95       	ret

000045ec <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    45ec:	0e 94 c5 22 	call	0x458a	; 0x458a <_ZN9CMBSender18ProcessTransactionEPhj>
    45f0:	08 95       	ret

000045f2 <__divmodsi4>:
    45f2:	05 2e       	mov	r0, r21
    45f4:	97 fb       	bst	r25, 7
    45f6:	1e f4       	brtc	.+6      	; 0x45fe <__divmodsi4+0xc>
    45f8:	00 94       	com	r0
    45fa:	0e 94 10 23 	call	0x4620	; 0x4620 <__negsi2>
    45fe:	57 fd       	sbrc	r21, 7
    4600:	07 d0       	rcall	.+14     	; 0x4610 <__divmodsi4_neg2>
    4602:	0e 94 2f 23 	call	0x465e	; 0x465e <__udivmodsi4>
    4606:	07 fc       	sbrc	r0, 7
    4608:	03 d0       	rcall	.+6      	; 0x4610 <__divmodsi4_neg2>
    460a:	4e f4       	brtc	.+18     	; 0x461e <__divmodsi4_exit>
    460c:	0c 94 10 23 	jmp	0x4620	; 0x4620 <__negsi2>

00004610 <__divmodsi4_neg2>:
    4610:	50 95       	com	r21
    4612:	40 95       	com	r20
    4614:	30 95       	com	r19
    4616:	21 95       	neg	r18
    4618:	3f 4f       	sbci	r19, 0xFF	; 255
    461a:	4f 4f       	sbci	r20, 0xFF	; 255
    461c:	5f 4f       	sbci	r21, 0xFF	; 255

0000461e <__divmodsi4_exit>:
    461e:	08 95       	ret

00004620 <__negsi2>:
    4620:	90 95       	com	r25
    4622:	80 95       	com	r24
    4624:	70 95       	com	r23
    4626:	61 95       	neg	r22
    4628:	7f 4f       	sbci	r23, 0xFF	; 255
    462a:	8f 4f       	sbci	r24, 0xFF	; 255
    462c:	9f 4f       	sbci	r25, 0xFF	; 255
    462e:	08 95       	ret

00004630 <__tablejump2__>:
    4630:	ee 0f       	add	r30, r30
    4632:	ff 1f       	adc	r31, r31
    4634:	88 1f       	adc	r24, r24
    4636:	8b bf       	out	0x3b, r24	; 59
    4638:	07 90       	elpm	r0, Z+
    463a:	f6 91       	elpm	r31, Z
    463c:	e0 2d       	mov	r30, r0
    463e:	19 94       	eijmp

00004640 <__umulhisi3>:
    4640:	a2 9f       	mul	r26, r18
    4642:	b0 01       	movw	r22, r0
    4644:	b3 9f       	mul	r27, r19
    4646:	c0 01       	movw	r24, r0
    4648:	a3 9f       	mul	r26, r19
    464a:	70 0d       	add	r23, r0
    464c:	81 1d       	adc	r24, r1
    464e:	11 24       	eor	r1, r1
    4650:	91 1d       	adc	r25, r1
    4652:	b2 9f       	mul	r27, r18
    4654:	70 0d       	add	r23, r0
    4656:	81 1d       	adc	r24, r1
    4658:	11 24       	eor	r1, r1
    465a:	91 1d       	adc	r25, r1
    465c:	08 95       	ret

0000465e <__udivmodsi4>:
    465e:	a1 e2       	ldi	r26, 0x21	; 33
    4660:	1a 2e       	mov	r1, r26
    4662:	aa 1b       	sub	r26, r26
    4664:	bb 1b       	sub	r27, r27
    4666:	fd 01       	movw	r30, r26
    4668:	0d c0       	rjmp	.+26     	; 0x4684 <__udivmodsi4_ep>

0000466a <__udivmodsi4_loop>:
    466a:	aa 1f       	adc	r26, r26
    466c:	bb 1f       	adc	r27, r27
    466e:	ee 1f       	adc	r30, r30
    4670:	ff 1f       	adc	r31, r31
    4672:	a2 17       	cp	r26, r18
    4674:	b3 07       	cpc	r27, r19
    4676:	e4 07       	cpc	r30, r20
    4678:	f5 07       	cpc	r31, r21
    467a:	20 f0       	brcs	.+8      	; 0x4684 <__udivmodsi4_ep>
    467c:	a2 1b       	sub	r26, r18
    467e:	b3 0b       	sbc	r27, r19
    4680:	e4 0b       	sbc	r30, r20
    4682:	f5 0b       	sbc	r31, r21

00004684 <__udivmodsi4_ep>:
    4684:	66 1f       	adc	r22, r22
    4686:	77 1f       	adc	r23, r23
    4688:	88 1f       	adc	r24, r24
    468a:	99 1f       	adc	r25, r25
    468c:	1a 94       	dec	r1
    468e:	69 f7       	brne	.-38     	; 0x466a <__udivmodsi4_loop>
    4690:	60 95       	com	r22
    4692:	70 95       	com	r23
    4694:	80 95       	com	r24
    4696:	90 95       	com	r25
    4698:	9b 01       	movw	r18, r22
    469a:	ac 01       	movw	r20, r24
    469c:	bd 01       	movw	r22, r26
    469e:	cf 01       	movw	r24, r30
    46a0:	08 95       	ret

000046a2 <malloc>:
    46a2:	cf 93       	push	r28
    46a4:	df 93       	push	r29
    46a6:	82 30       	cpi	r24, 0x02	; 2
    46a8:	91 05       	cpc	r25, r1
    46aa:	10 f4       	brcc	.+4      	; 0x46b0 <malloc+0xe>
    46ac:	82 e0       	ldi	r24, 0x02	; 2
    46ae:	90 e0       	ldi	r25, 0x00	; 0
    46b0:	e0 91 30 23 	lds	r30, 0x2330
    46b4:	f0 91 31 23 	lds	r31, 0x2331
    46b8:	20 e0       	ldi	r18, 0x00	; 0
    46ba:	30 e0       	ldi	r19, 0x00	; 0
    46bc:	c0 e0       	ldi	r28, 0x00	; 0
    46be:	d0 e0       	ldi	r29, 0x00	; 0
    46c0:	30 97       	sbiw	r30, 0x00	; 0
    46c2:	11 f1       	breq	.+68     	; 0x4708 <malloc+0x66>
    46c4:	40 81       	ld	r20, Z
    46c6:	51 81       	ldd	r21, Z+1	; 0x01
    46c8:	48 17       	cp	r20, r24
    46ca:	59 07       	cpc	r21, r25
    46cc:	c0 f0       	brcs	.+48     	; 0x46fe <malloc+0x5c>
    46ce:	48 17       	cp	r20, r24
    46d0:	59 07       	cpc	r21, r25
    46d2:	61 f4       	brne	.+24     	; 0x46ec <malloc+0x4a>
    46d4:	82 81       	ldd	r24, Z+2	; 0x02
    46d6:	93 81       	ldd	r25, Z+3	; 0x03
    46d8:	20 97       	sbiw	r28, 0x00	; 0
    46da:	19 f0       	breq	.+6      	; 0x46e2 <malloc+0x40>
    46dc:	8a 83       	std	Y+2, r24	; 0x02
    46de:	9b 83       	std	Y+3, r25	; 0x03
    46e0:	2b c0       	rjmp	.+86     	; 0x4738 <malloc+0x96>
    46e2:	80 93 30 23 	sts	0x2330, r24
    46e6:	90 93 31 23 	sts	0x2331, r25
    46ea:	26 c0       	rjmp	.+76     	; 0x4738 <malloc+0x96>
    46ec:	21 15       	cp	r18, r1
    46ee:	31 05       	cpc	r19, r1
    46f0:	19 f0       	breq	.+6      	; 0x46f8 <malloc+0x56>
    46f2:	42 17       	cp	r20, r18
    46f4:	53 07       	cpc	r21, r19
    46f6:	18 f4       	brcc	.+6      	; 0x46fe <malloc+0x5c>
    46f8:	9a 01       	movw	r18, r20
    46fa:	be 01       	movw	r22, r28
    46fc:	df 01       	movw	r26, r30
    46fe:	ef 01       	movw	r28, r30
    4700:	02 80       	ldd	r0, Z+2	; 0x02
    4702:	f3 81       	ldd	r31, Z+3	; 0x03
    4704:	e0 2d       	mov	r30, r0
    4706:	dc cf       	rjmp	.-72     	; 0x46c0 <malloc+0x1e>
    4708:	21 15       	cp	r18, r1
    470a:	31 05       	cpc	r19, r1
    470c:	09 f1       	breq	.+66     	; 0x4750 <malloc+0xae>
    470e:	28 1b       	sub	r18, r24
    4710:	39 0b       	sbc	r19, r25
    4712:	24 30       	cpi	r18, 0x04	; 4
    4714:	31 05       	cpc	r19, r1
    4716:	90 f4       	brcc	.+36     	; 0x473c <malloc+0x9a>
    4718:	12 96       	adiw	r26, 0x02	; 2
    471a:	8d 91       	ld	r24, X+
    471c:	9c 91       	ld	r25, X
    471e:	13 97       	sbiw	r26, 0x03	; 3
    4720:	61 15       	cp	r22, r1
    4722:	71 05       	cpc	r23, r1
    4724:	21 f0       	breq	.+8      	; 0x472e <malloc+0x8c>
    4726:	fb 01       	movw	r30, r22
    4728:	82 83       	std	Z+2, r24	; 0x02
    472a:	93 83       	std	Z+3, r25	; 0x03
    472c:	04 c0       	rjmp	.+8      	; 0x4736 <malloc+0x94>
    472e:	80 93 30 23 	sts	0x2330, r24
    4732:	90 93 31 23 	sts	0x2331, r25
    4736:	fd 01       	movw	r30, r26
    4738:	32 96       	adiw	r30, 0x02	; 2
    473a:	44 c0       	rjmp	.+136    	; 0x47c4 <malloc+0x122>
    473c:	fd 01       	movw	r30, r26
    473e:	e2 0f       	add	r30, r18
    4740:	f3 1f       	adc	r31, r19
    4742:	81 93       	st	Z+, r24
    4744:	91 93       	st	Z+, r25
    4746:	22 50       	subi	r18, 0x02	; 2
    4748:	31 09       	sbc	r19, r1
    474a:	2d 93       	st	X+, r18
    474c:	3c 93       	st	X, r19
    474e:	3a c0       	rjmp	.+116    	; 0x47c4 <malloc+0x122>
    4750:	20 91 2e 23 	lds	r18, 0x232E
    4754:	30 91 2f 23 	lds	r19, 0x232F
    4758:	23 2b       	or	r18, r19
    475a:	41 f4       	brne	.+16     	; 0x476c <malloc+0xca>
    475c:	20 91 02 20 	lds	r18, 0x2002
    4760:	30 91 03 20 	lds	r19, 0x2003
    4764:	20 93 2e 23 	sts	0x232E, r18
    4768:	30 93 2f 23 	sts	0x232F, r19
    476c:	20 91 00 20 	lds	r18, 0x2000
    4770:	30 91 01 20 	lds	r19, 0x2001
    4774:	21 15       	cp	r18, r1
    4776:	31 05       	cpc	r19, r1
    4778:	41 f4       	brne	.+16     	; 0x478a <malloc+0xe8>
    477a:	2d b7       	in	r18, 0x3d	; 61
    477c:	3e b7       	in	r19, 0x3e	; 62
    477e:	40 91 04 20 	lds	r20, 0x2004
    4782:	50 91 05 20 	lds	r21, 0x2005
    4786:	24 1b       	sub	r18, r20
    4788:	35 0b       	sbc	r19, r21
    478a:	e0 91 2e 23 	lds	r30, 0x232E
    478e:	f0 91 2f 23 	lds	r31, 0x232F
    4792:	e2 17       	cp	r30, r18
    4794:	f3 07       	cpc	r31, r19
    4796:	a0 f4       	brcc	.+40     	; 0x47c0 <malloc+0x11e>
    4798:	2e 1b       	sub	r18, r30
    479a:	3f 0b       	sbc	r19, r31
    479c:	28 17       	cp	r18, r24
    479e:	39 07       	cpc	r19, r25
    47a0:	78 f0       	brcs	.+30     	; 0x47c0 <malloc+0x11e>
    47a2:	ac 01       	movw	r20, r24
    47a4:	4e 5f       	subi	r20, 0xFE	; 254
    47a6:	5f 4f       	sbci	r21, 0xFF	; 255
    47a8:	24 17       	cp	r18, r20
    47aa:	35 07       	cpc	r19, r21
    47ac:	48 f0       	brcs	.+18     	; 0x47c0 <malloc+0x11e>
    47ae:	4e 0f       	add	r20, r30
    47b0:	5f 1f       	adc	r21, r31
    47b2:	40 93 2e 23 	sts	0x232E, r20
    47b6:	50 93 2f 23 	sts	0x232F, r21
    47ba:	81 93       	st	Z+, r24
    47bc:	91 93       	st	Z+, r25
    47be:	02 c0       	rjmp	.+4      	; 0x47c4 <malloc+0x122>
    47c0:	e0 e0       	ldi	r30, 0x00	; 0
    47c2:	f0 e0       	ldi	r31, 0x00	; 0
    47c4:	cf 01       	movw	r24, r30
    47c6:	df 91       	pop	r29
    47c8:	cf 91       	pop	r28
    47ca:	08 95       	ret

000047cc <free>:
    47cc:	0f 93       	push	r16
    47ce:	1f 93       	push	r17
    47d0:	cf 93       	push	r28
    47d2:	df 93       	push	r29
    47d4:	00 97       	sbiw	r24, 0x00	; 0
    47d6:	09 f4       	brne	.+2      	; 0x47da <free+0xe>
    47d8:	8c c0       	rjmp	.+280    	; 0x48f2 <free+0x126>
    47da:	fc 01       	movw	r30, r24
    47dc:	32 97       	sbiw	r30, 0x02	; 2
    47de:	12 82       	std	Z+2, r1	; 0x02
    47e0:	13 82       	std	Z+3, r1	; 0x03
    47e2:	00 91 30 23 	lds	r16, 0x2330
    47e6:	10 91 31 23 	lds	r17, 0x2331
    47ea:	01 15       	cp	r16, r1
    47ec:	11 05       	cpc	r17, r1
    47ee:	81 f4       	brne	.+32     	; 0x4810 <free+0x44>
    47f0:	20 81       	ld	r18, Z
    47f2:	31 81       	ldd	r19, Z+1	; 0x01
    47f4:	82 0f       	add	r24, r18
    47f6:	93 1f       	adc	r25, r19
    47f8:	20 91 2e 23 	lds	r18, 0x232E
    47fc:	30 91 2f 23 	lds	r19, 0x232F
    4800:	28 17       	cp	r18, r24
    4802:	39 07       	cpc	r19, r25
    4804:	79 f5       	brne	.+94     	; 0x4864 <free+0x98>
    4806:	e0 93 2e 23 	sts	0x232E, r30
    480a:	f0 93 2f 23 	sts	0x232F, r31
    480e:	71 c0       	rjmp	.+226    	; 0x48f2 <free+0x126>
    4810:	d8 01       	movw	r26, r16
    4812:	40 e0       	ldi	r20, 0x00	; 0
    4814:	50 e0       	ldi	r21, 0x00	; 0
    4816:	ae 17       	cp	r26, r30
    4818:	bf 07       	cpc	r27, r31
    481a:	50 f4       	brcc	.+20     	; 0x4830 <free+0x64>
    481c:	12 96       	adiw	r26, 0x02	; 2
    481e:	2d 91       	ld	r18, X+
    4820:	3c 91       	ld	r19, X
    4822:	13 97       	sbiw	r26, 0x03	; 3
    4824:	ad 01       	movw	r20, r26
    4826:	21 15       	cp	r18, r1
    4828:	31 05       	cpc	r19, r1
    482a:	09 f1       	breq	.+66     	; 0x486e <free+0xa2>
    482c:	d9 01       	movw	r26, r18
    482e:	f3 cf       	rjmp	.-26     	; 0x4816 <free+0x4a>
    4830:	9d 01       	movw	r18, r26
    4832:	da 01       	movw	r26, r20
    4834:	22 83       	std	Z+2, r18	; 0x02
    4836:	33 83       	std	Z+3, r19	; 0x03
    4838:	60 81       	ld	r22, Z
    483a:	71 81       	ldd	r23, Z+1	; 0x01
    483c:	86 0f       	add	r24, r22
    483e:	97 1f       	adc	r25, r23
    4840:	82 17       	cp	r24, r18
    4842:	93 07       	cpc	r25, r19
    4844:	69 f4       	brne	.+26     	; 0x4860 <free+0x94>
    4846:	ec 01       	movw	r28, r24
    4848:	28 81       	ld	r18, Y
    484a:	39 81       	ldd	r19, Y+1	; 0x01
    484c:	26 0f       	add	r18, r22
    484e:	37 1f       	adc	r19, r23
    4850:	2e 5f       	subi	r18, 0xFE	; 254
    4852:	3f 4f       	sbci	r19, 0xFF	; 255
    4854:	20 83       	st	Z, r18
    4856:	31 83       	std	Z+1, r19	; 0x01
    4858:	8a 81       	ldd	r24, Y+2	; 0x02
    485a:	9b 81       	ldd	r25, Y+3	; 0x03
    485c:	82 83       	std	Z+2, r24	; 0x02
    485e:	93 83       	std	Z+3, r25	; 0x03
    4860:	45 2b       	or	r20, r21
    4862:	29 f4       	brne	.+10     	; 0x486e <free+0xa2>
    4864:	e0 93 30 23 	sts	0x2330, r30
    4868:	f0 93 31 23 	sts	0x2331, r31
    486c:	42 c0       	rjmp	.+132    	; 0x48f2 <free+0x126>
    486e:	12 96       	adiw	r26, 0x02	; 2
    4870:	ed 93       	st	X+, r30
    4872:	fc 93       	st	X, r31
    4874:	13 97       	sbiw	r26, 0x03	; 3
    4876:	ed 01       	movw	r28, r26
    4878:	49 91       	ld	r20, Y+
    487a:	59 91       	ld	r21, Y+
    487c:	9e 01       	movw	r18, r28
    487e:	24 0f       	add	r18, r20
    4880:	35 1f       	adc	r19, r21
    4882:	e2 17       	cp	r30, r18
    4884:	f3 07       	cpc	r31, r19
    4886:	71 f4       	brne	.+28     	; 0x48a4 <free+0xd8>
    4888:	80 81       	ld	r24, Z
    488a:	91 81       	ldd	r25, Z+1	; 0x01
    488c:	84 0f       	add	r24, r20
    488e:	95 1f       	adc	r25, r21
    4890:	02 96       	adiw	r24, 0x02	; 2
    4892:	8d 93       	st	X+, r24
    4894:	9c 93       	st	X, r25
    4896:	11 97       	sbiw	r26, 0x01	; 1
    4898:	82 81       	ldd	r24, Z+2	; 0x02
    489a:	93 81       	ldd	r25, Z+3	; 0x03
    489c:	12 96       	adiw	r26, 0x02	; 2
    489e:	8d 93       	st	X+, r24
    48a0:	9c 93       	st	X, r25
    48a2:	13 97       	sbiw	r26, 0x03	; 3
    48a4:	e0 e0       	ldi	r30, 0x00	; 0
    48a6:	f0 e0       	ldi	r31, 0x00	; 0
    48a8:	d8 01       	movw	r26, r16
    48aa:	12 96       	adiw	r26, 0x02	; 2
    48ac:	8d 91       	ld	r24, X+
    48ae:	9c 91       	ld	r25, X
    48b0:	13 97       	sbiw	r26, 0x03	; 3
    48b2:	00 97       	sbiw	r24, 0x00	; 0
    48b4:	19 f0       	breq	.+6      	; 0x48bc <free+0xf0>
    48b6:	f8 01       	movw	r30, r16
    48b8:	8c 01       	movw	r16, r24
    48ba:	f6 cf       	rjmp	.-20     	; 0x48a8 <free+0xdc>
    48bc:	8d 91       	ld	r24, X+
    48be:	9c 91       	ld	r25, X
    48c0:	98 01       	movw	r18, r16
    48c2:	2e 5f       	subi	r18, 0xFE	; 254
    48c4:	3f 4f       	sbci	r19, 0xFF	; 255
    48c6:	82 0f       	add	r24, r18
    48c8:	93 1f       	adc	r25, r19
    48ca:	20 91 2e 23 	lds	r18, 0x232E
    48ce:	30 91 2f 23 	lds	r19, 0x232F
    48d2:	28 17       	cp	r18, r24
    48d4:	39 07       	cpc	r19, r25
    48d6:	69 f4       	brne	.+26     	; 0x48f2 <free+0x126>
    48d8:	30 97       	sbiw	r30, 0x00	; 0
    48da:	29 f4       	brne	.+10     	; 0x48e6 <free+0x11a>
    48dc:	10 92 30 23 	sts	0x2330, r1
    48e0:	10 92 31 23 	sts	0x2331, r1
    48e4:	02 c0       	rjmp	.+4      	; 0x48ea <free+0x11e>
    48e6:	12 82       	std	Z+2, r1	; 0x02
    48e8:	13 82       	std	Z+3, r1	; 0x03
    48ea:	00 93 2e 23 	sts	0x232E, r16
    48ee:	10 93 2f 23 	sts	0x232F, r17
    48f2:	df 91       	pop	r29
    48f4:	cf 91       	pop	r28
    48f6:	1f 91       	pop	r17
    48f8:	0f 91       	pop	r16
    48fa:	08 95       	ret

000048fc <memcpy>:
    48fc:	fb 01       	movw	r30, r22
    48fe:	dc 01       	movw	r26, r24
    4900:	02 c0       	rjmp	.+4      	; 0x4906 <memcpy+0xa>
    4902:	01 90       	ld	r0, Z+
    4904:	0d 92       	st	X+, r0
    4906:	41 50       	subi	r20, 0x01	; 1
    4908:	50 40       	sbci	r21, 0x00	; 0
    490a:	d8 f7       	brcc	.-10     	; 0x4902 <memcpy+0x6>
    490c:	08 95       	ret

0000490e <__do_global_dtors>:
    490e:	11 e0       	ldi	r17, 0x01	; 1
    4910:	cd ed       	ldi	r28, 0xDD	; 221
    4912:	d1 e0       	ldi	r29, 0x01	; 1
    4914:	00 e0       	ldi	r16, 0x00	; 0
    4916:	06 c0       	rjmp	.+12     	; 0x4924 <__do_global_dtors+0x16>
    4918:	80 2f       	mov	r24, r16
    491a:	fe 01       	movw	r30, r28
    491c:	0e 94 18 23 	call	0x4630	; 0x4630 <__tablejump2__>
    4920:	21 96       	adiw	r28, 0x01	; 1
    4922:	01 1d       	adc	r16, r1
    4924:	cf 3d       	cpi	r28, 0xDF	; 223
    4926:	d1 07       	cpc	r29, r17
    4928:	80 e0       	ldi	r24, 0x00	; 0
    492a:	08 07       	cpc	r16, r24
    492c:	a9 f7       	brne	.-22     	; 0x4918 <__do_global_dtors+0xa>
    492e:	f8 94       	cli

00004930 <__stop_program>:
    4930:	ff cf       	rjmp	.-2      	; 0x4930 <__stop_program>
