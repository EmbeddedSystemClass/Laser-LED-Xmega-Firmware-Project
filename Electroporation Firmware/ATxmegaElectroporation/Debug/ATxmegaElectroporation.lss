
ATxmegaElectroporation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004a88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f2  00802000  00004a88  00004b1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000024e  008020f2  008020f2  00004c0e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004c0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004c40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000860  00000000  00000000  00004c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b09b  00000000  00000000  000054e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021fa  00000000  00000000  0001057b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000027e0  00000000  00000000  00012775  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002f44  00000000  00000000  00014f58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000488a  00000000  00000000  00017e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000081fe  00000000  00000000  0001c726  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000790  00000000  00000000  00024924  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__dtors_end>
       4:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <__vector_1>
       8:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <__vector_2>
       c:	0c 94 96 0c 	jmp	0x192c	; 0x192c <__vector_3>
      10:	0c 94 c7 0c 	jmp	0x198e	; 0x198e <__vector_4>
      14:	0c 94 f8 0c 	jmp	0x19f0	; 0x19f0 <__vector_5>
      18:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <__vector_6>
      1c:	0c 94 5a 0d 	jmp	0x1ab4	; 0x1ab4 <__vector_7>
      20:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__vector_8>
      24:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <__vector_9>
      28:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__vector_10>
      2c:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__vector_11>
      30:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__vector_12>
      34:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__vector_13>
      38:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__vector_14>
      3c:	0c 94 e2 0e 	jmp	0x1dc4	; 0x1dc4 <__vector_15>
      40:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__vector_16>
      44:	0c 94 44 0f 	jmp	0x1e88	; 0x1e88 <__vector_17>
      48:	0c 94 75 0f 	jmp	0x1eea	; 0x1eea <__vector_18>
      4c:	0c 94 a6 0f 	jmp	0x1f4c	; 0x1f4c <__vector_19>
      50:	0c 94 d7 0f 	jmp	0x1fae	; 0x1fae <__vector_20>
      54:	0c 94 08 10 	jmp	0x2010	; 0x2010 <__vector_21>
      58:	0c 94 39 10 	jmp	0x2072	; 0x2072 <__vector_22>
      5c:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <__vector_23>
      60:	0c 94 9b 10 	jmp	0x2136	; 0x2136 <__vector_24>
      64:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <__vector_25>
      68:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <__vector_26>
      6c:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__vector_27>
      70:	0c 94 5f 11 	jmp	0x22be	; 0x22be <__vector_28>
      74:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__vector_29>
      78:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <__vector_30>
      7c:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__vector_31>
      80:	0c 94 23 12 	jmp	0x2446	; 0x2446 <__vector_32>
      84:	0c 94 54 12 	jmp	0x24a8	; 0x24a8 <__vector_33>
      88:	0c 94 85 12 	jmp	0x250a	; 0x250a <__vector_34>
      8c:	0c 94 b6 12 	jmp	0x256c	; 0x256c <__vector_35>
      90:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__vector_36>
      94:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__vector_37>
      98:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__vector_38>
      9c:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <__vector_39>
      a0:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__vector_40>
      a4:	0c 94 dc 13 	jmp	0x27b8	; 0x27b8 <__vector_41>
      a8:	0c 94 0d 14 	jmp	0x281a	; 0x281a <__vector_42>
      ac:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__vector_43>
      b0:	0c 94 6f 14 	jmp	0x28de	; 0x28de <__vector_44>
      b4:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__vector_45>
      b8:	0c 94 d1 14 	jmp	0x29a2	; 0x29a2 <__vector_46>
      bc:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <__vector_47>
      c0:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <__vector_48>
      c4:	0c 94 64 15 	jmp	0x2ac8	; 0x2ac8 <__vector_49>
      c8:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__vector_50>
      cc:	0c 94 c6 15 	jmp	0x2b8c	; 0x2b8c <__vector_51>
      d0:	0c 94 f7 15 	jmp	0x2bee	; 0x2bee <__vector_52>
      d4:	0c 94 28 16 	jmp	0x2c50	; 0x2c50 <__vector_53>
      d8:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__vector_54>
      dc:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__vector_55>
      e0:	0c 94 bb 16 	jmp	0x2d76	; 0x2d76 <__vector_56>
      e4:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__vector_57>
      e8:	0c 94 1d 17 	jmp	0x2e3a	; 0x2e3a <__vector_58>
      ec:	0c 94 4e 17 	jmp	0x2e9c	; 0x2e9c <__vector_59>
      f0:	0c 94 7f 17 	jmp	0x2efe	; 0x2efe <__vector_60>
      f4:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__vector_61>
      f8:	0c 94 e1 17 	jmp	0x2fc2	; 0x2fc2 <__vector_62>
      fc:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__vector_63>
     100:	0c 94 43 18 	jmp	0x3086	; 0x3086 <__vector_64>
     104:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <__vector_65>
     108:	0c 94 a5 18 	jmp	0x314a	; 0x314a <__vector_66>
     10c:	0c 94 d6 18 	jmp	0x31ac	; 0x31ac <__vector_67>
     110:	0c 94 07 19 	jmp	0x320e	; 0x320e <__vector_68>
     114:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__vector_69>
     118:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__vector_70>
     11c:	0c 94 9a 19 	jmp	0x3334	; 0x3334 <__vector_71>
     120:	0c 94 cb 19 	jmp	0x3396	; 0x3396 <__vector_72>
     124:	0c 94 fc 19 	jmp	0x33f8	; 0x33f8 <__vector_73>
     128:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__vector_74>
     12c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
     130:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
     134:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__vector_77>
     138:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__vector_78>
     13c:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__vector_79>
     140:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__vector_80>
     144:	0c 94 22 1b 	jmp	0x3644	; 0x3644 <__vector_81>
     148:	0c 94 53 1b 	jmp	0x36a6	; 0x36a6 <__vector_82>
     14c:	0c 94 84 1b 	jmp	0x3708	; 0x3708 <__vector_83>
     150:	0c 94 b5 1b 	jmp	0x376a	; 0x376a <__vector_84>
     154:	0c 94 e6 1b 	jmp	0x37cc	; 0x37cc <__vector_85>
     158:	0c 94 17 1c 	jmp	0x382e	; 0x382e <__vector_86>
     15c:	0c 94 48 1c 	jmp	0x3890	; 0x3890 <__vector_87>
     160:	0c 94 79 1c 	jmp	0x38f2	; 0x38f2 <__vector_88>
     164:	0c 94 aa 1c 	jmp	0x3954	; 0x3954 <__vector_89>
     168:	0c 94 db 1c 	jmp	0x39b6	; 0x39b6 <__vector_90>
     16c:	0c 94 0c 1d 	jmp	0x3a18	; 0x3a18 <__vector_91>
     170:	0c 94 3d 1d 	jmp	0x3a7a	; 0x3a7a <__vector_92>
     174:	0c 94 6e 1d 	jmp	0x3adc	; 0x3adc <__vector_93>
     178:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
     17c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
     180:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
     184:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
     188:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
     18c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
     190:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
     194:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
     198:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
     19c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
     1a0:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__vector_104>
     1a4:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <__vector_105>
     1a8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
     1ac:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
     1b0:	0c 94 01 1e 	jmp	0x3c02	; 0x3c02 <__vector_108>
     1b4:	0c 94 32 1e 	jmp	0x3c64	; 0x3c64 <__vector_109>
     1b8:	0c 94 63 1e 	jmp	0x3cc6	; 0x3cc6 <__vector_110>
     1bc:	0c 94 94 1e 	jmp	0x3d28	; 0x3d28 <__vector_111>
     1c0:	0c 94 c5 1e 	jmp	0x3d8a	; 0x3d8a <__vector_112>
     1c4:	0c 94 f6 1e 	jmp	0x3dec	; 0x3dec <__vector_113>
     1c8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
     1cc:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
     1d0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
     1d4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
     1d8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__bad_interrupt>
     1dc:	0c 94 27 1f 	jmp	0x3e4e	; 0x3e4e <__vector_119>
     1e0:	0c 94 58 1f 	jmp	0x3eb0	; 0x3eb0 <__vector_120>
     1e4:	0c 94 89 1f 	jmp	0x3f12	; 0x3f12 <__vector_121>
     1e8:	8a 04       	cpc	r8, r10
     1ea:	c9 04       	cpc	r12, r9
     1ec:	c9 04       	cpc	r12, r9
     1ee:	c9 04       	cpc	r12, r9
     1f0:	c9 04       	cpc	r12, r9
     1f2:	b9 04       	cpc	r11, r9
     1f4:	c9 04       	cpc	r12, r9
     1f6:	b1 04       	cpc	r11, r1
     1f8:	c9 04       	cpc	r12, r9
     1fa:	bd 04       	cpc	r11, r13
     1fc:	c9 04       	cpc	r12, r9
     1fe:	b5 04       	cpc	r11, r5
     200:	c9 04       	cpc	r12, r9
     202:	c9 04       	cpc	r12, r9
     204:	c9 04       	cpc	r12, r9
     206:	c9 04       	cpc	r12, r9
     208:	c9 04       	cpc	r12, r9
     20a:	c9 04       	cpc	r12, r9
     20c:	c9 04       	cpc	r12, r9
     20e:	c9 04       	cpc	r12, r9
     210:	c9 04       	cpc	r12, r9
     212:	bd 04       	cpc	r11, r13
     214:	c9 04       	cpc	r12, r9
     216:	8d 04       	cpc	r8, r13
     218:	c9 04       	cpc	r12, r9
     21a:	91 04       	cpc	r9, r1
     21c:	c9 04       	cpc	r12, r9
     21e:	c9 04       	cpc	r12, r9
     220:	99 04       	cpc	r9, r9
     222:	a9 04       	cpc	r10, r9
     224:	9d 04       	cpc	r9, r13
     226:	a1 04       	cpc	r10, r1
     228:	a5 04       	cpc	r10, r5
     22a:	95 04       	cpc	r9, r5
     22c:	ad 04       	cpc	r10, r13
     22e:	c5 04       	cpc	r12, r5
     230:	c9 04       	cpc	r12, r9
     232:	c1 04       	cpc	r12, r1
     234:	81 06       	cpc	r8, r17
     236:	85 06       	cpc	r8, r21
     238:	44 07       	cpc	r20, r20
     23a:	73 07       	cpc	r23, r19
     23c:	a7 07       	cpc	r26, r23
     23e:	d9 07       	cpc	r29, r25
     240:	5c 08       	sbc	r5, r12
     242:	00 08       	sbc	r0, r0
     244:	7b 08       	sbc	r7, r11
     246:	d7 08       	sbc	r13, r7
     248:	00 09       	sbc	r16, r0
     24a:	78 09       	sbc	r23, r8
     24c:	5f 09       	sbc	r21, r15
     24e:	14 09       	sbc	r17, r4
     250:	91 09       	sbc	r25, r1
     252:	cd 09       	sbc	r28, r13
     254:	96 09       	sbc	r25, r6
     256:	e5 21       	and	r30, r5
     258:	e5 21       	and	r30, r5
     25a:	ed 21       	and	r30, r13
     25c:	f5 21       	and	r31, r5
     25e:	00 22       	and	r0, r16
     260:	58 22       	and	r5, r24
     262:	5f 22       	and	r5, r31
     264:	8b 22       	and	r8, r27
     266:	8b 22       	and	r8, r27
     268:	8a 22       	and	r8, r26
     26a:	8a 22       	and	r8, r26

0000026c <__trampolines_start>:
     26c:	0c 94 81 06 	jmp	0xd02	; 0xd02 <_ZN16CLaserControlApp3RunEv+0x70>
     270:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <_GLOBAL__sub_D_timer>
     274:	0c 94 59 21 	jmp	0x42b2	; 0x42b2 <_ZN9CMBSender18OnVariableReceivedEjPjj>
     278:	0c 94 ed 21 	jmp	0x43da	; 0x43da <_ZN9CMBSender13OnReceiveByteEh+0x32>
     27c:	0c 94 5f 22 	jmp	0x44be	; 0x44be <_ZN9CMBSender13OnReceiveByteEh+0x116>
     280:	0c 94 45 0b 	jmp	0x168a	; 0x168a <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
     284:	0c 94 a9 04 	jmp	0x952	; 0x952 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x6c>
     288:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
     28c:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <_ZN7CTimerC5StartEj>
     290:	0c 94 cd 09 	jmp	0x139a	; 0x139a <_ZN16CLaserControlApp3RunEv+0x708>
     294:	0c 94 e5 21 	jmp	0x43ca	; 0x43ca <_ZN9CMBSender13OnReceiveByteEh+0x22>
     298:	0c 94 f3 22 	jmp	0x45e6	; 0x45e6 <_ZN9CMBSender18OnUSARTTxInterruptEPv>
     29c:	0c 94 bd 1f 	jmp	0x3f7a	; 0x3f7a <_GLOBAL__sub_I_dacSPI>
     2a0:	0c 94 2f 21 	jmp	0x425e	; 0x425e <_ZN16CMBEventsHandler15AllocateBuffersEjj>
     2a4:	0c 94 74 20 	jmp	0x40e8	; 0x40e8 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>
     2a8:	0c 94 8a 22 	jmp	0x4514	; 0x4514 <_ZN9CMBSender13OnReceiveByteEh+0x16c>
     2ac:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>
     2b0:	0c 94 c4 20 	jmp	0x4188	; 0x4188 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>
     2b4:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>
     2b8:	0c 94 c5 04 	jmp	0x98a	; 0x98a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xa4>
     2bc:	0c 94 ad 04 	jmp	0x95a	; 0x95a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x74>
     2c0:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <_ZN7CTimerC8SetCOMPAEj>
     2c4:	0c 94 68 21 	jmp	0x42d0	; 0x42d0 <_ZN9CMBSender18OnRegisterReceivedEhPhh>
     2c8:	0c 94 40 0b 	jmp	0x1680	; 0x1680 <_ZN7CTimerC8SetCOMPDEj>
     2cc:	0c 94 cd 04 	jmp	0x99a	; 0x99a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>
     2d0:	0c 94 a5 04 	jmp	0x94a	; 0x94a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x64>
     2d4:	0c 94 91 09 	jmp	0x1322	; 0x1322 <_ZN16CLaserControlApp3RunEv+0x690>
     2d8:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <_ZN7CTimerC8SetCOMPCEj>
     2dc:	0c 94 4a 21 	jmp	0x4294	; 0x4294 <_ZN16CMBEventsHandler11FreeBuffersEv>
     2e0:	0c 94 f5 21 	jmp	0x43ea	; 0x43ea <_ZN9CMBSender13OnReceiveByteEh+0x42>
     2e4:	0c 94 00 08 	jmp	0x1000	; 0x1000 <_ZN16CLaserControlApp3RunEv+0x36e>
     2e8:	0c 94 99 04 	jmp	0x932	; 0x932 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x4c>
     2ec:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>
     2f0:	0c 94 58 22 	jmp	0x44b0	; 0x44b0 <_ZN9CMBSender13OnReceiveByteEh+0x108>
     2f4:	0c 94 b5 04 	jmp	0x96a	; 0x96a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x84>
     2f8:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>
     2fc:	0c 94 9d 04 	jmp	0x93a	; 0x93a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x54>
     300:	0c 94 14 09 	jmp	0x1228	; 0x1228 <_ZN16CLaserControlApp3RunEv+0x596>
     304:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>
     308:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <_ZN16CLaserControlApp3RunEv+0x464>
     30c:	0c 94 86 03 	jmp	0x70c	; 0x70c <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>
     310:	0c 94 c1 04 	jmp	0x982	; 0x982 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x9c>
     314:	0c 94 a1 04 	jmp	0x942	; 0x942 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x5c>
     318:	0c 94 73 07 	jmp	0xee6	; 0xee6 <_ZN16CLaserControlApp3RunEv+0x254>
     31c:	0c 94 98 03 	jmp	0x730	; 0x730 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>
     320:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <_ZN10CDGUSUSART14IsTransmittingEv>
     324:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <_ZN16CLaserControlApp3RunEv+0x2bc>
     328:	0c 94 85 06 	jmp	0xd0a	; 0xd0a <_ZN16CLaserControlApp3RunEv+0x78>
     32c:	0c 94 8f 03 	jmp	0x71e	; 0x71e <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>
     330:	0c 94 8e 22 	jmp	0x451c	; 0x451c <_ZN9CMBSender18OnUSARTRxInterruptEPv>
     334:	0c 94 a5 20 	jmp	0x414a	; 0x414a <_ZN16CMBEventsHandler13FillRegDataRqEhh>
     338:	0c 94 95 04 	jmp	0x92a	; 0x92a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x44>
     33c:	0c 94 b9 04 	jmp	0x972	; 0x972 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x8c>
     340:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>
     344:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>
     348:	0c 94 6f 0a 	jmp	0x14de	; 0x14de <_ZN16CLaserControlApp13OnTimerStaticEPv>
     34c:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <_GLOBAL__sub_I_timer>
     350:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <_ZN16CLaserControlApp3RunEv+0x426>
     354:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <_ZN16CLaserControlApp3RunEv+0x51c>
     358:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <_ZN10CDGUSUSART15GetReceivedByteEv>
     35c:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <_ZN4CSPI16StaticOnTransmitEPv>
     360:	0c 94 ba 1f 	jmp	0x3f74	; 0x3f74 <__cxa_pure_virtual>
     364:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <_ZN7CTimerC9SetPeriodEj>
     368:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <_ZN16CLaserControlApp3RunEv+0x320>
     36c:	0c 94 8a 04 	jmp	0x914	; 0x914 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x2e>
     370:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <_ZN10CDGUSUSART11IsDataEmptyEv>
     374:	0c 94 c9 04 	jmp	0x992	; 0x992 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xac>
     378:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
     37c:	0c 94 44 07 	jmp	0xe88	; 0xe88 <_ZN16CLaserControlApp3RunEv+0x1f6>
     380:	0c 94 25 03 	jmp	0x64a	; 0x64a <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
     384:	0c 94 78 09 	jmp	0x12f0	; 0x12f0 <_ZN16CLaserControlApp3RunEv+0x65e>
     388:	0c 94 16 0b 	jmp	0x162c	; 0x162c <_ZN7CTimerC4StopEv>
     38c:	0c 94 36 0b 	jmp	0x166c	; 0x166c <_ZN7CTimerC8SetCOMPBEj>
     390:	0c 94 da 1f 	jmp	0x3fb4	; 0x3fb4 <_GLOBAL__sub_D_dacSPI>
     394:	0c 94 9f 0b 	jmp	0x173e	; 0x173e <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>
     398:	0c 94 8d 04 	jmp	0x91a	; 0x91a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x34>
     39c:	0c 94 0c 21 	jmp	0x4218	; 0x4218 <_ZN16CMBEventsHandler13FillVarDataRqEjj>
     3a0:	0c 94 98 23 	jmp	0x4730	; 0x4730 <_ZN9CMBSender21OnTransactionCallbackEPhj>
     3a4:	0c 94 00 09 	jmp	0x1200	; 0x1200 <_ZN16CLaserControlApp3RunEv+0x56e>
     3a8:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>
     3ac:	0c 94 bd 04 	jmp	0x97a	; 0x97a <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x94>
     3b0:	0c 94 b1 04 	jmp	0x962	; 0x962 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x7c>
     3b4:	0c 94 00 22 	jmp	0x4400	; 0x4400 <_ZN9CMBSender13OnReceiveByteEh+0x58>
     3b8:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <_ZN10CDGUSUSART11IsReceivingEv>
     3bc:	0c 94 25 0b 	jmp	0x164a	; 0x164a <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>
     3c0:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <_ZN10CDGUSUSART19SetTransmittingByteEh>
     3c4:	0c 94 96 09 	jmp	0x132c	; 0x132c <_ZN16CLaserControlApp3RunEv+0x69a>
     3c8:	0c 94 91 04 	jmp	0x922	; 0x922 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x3c>
     3cc:	0c 94 5f 09 	jmp	0x12be	; 0x12be <_ZN16CLaserControlApp3RunEv+0x62c>

000003d0 <__ctors_start>:
     3d0:	0a 06       	cpc	r0, r26
     3d2:	bd 1f       	adc	r27, r29

000003d4 <__ctors_end>:
     3d4:	0f 06       	cpc	r0, r31
     3d6:	da 1f       	adc	r29, r26

000003d8 <__dtors_end>:
     3d8:	11 24       	eor	r1, r1
     3da:	1f be       	out	0x3f, r1	; 63
     3dc:	cf ef       	ldi	r28, 0xFF	; 255
     3de:	cd bf       	out	0x3d, r28	; 61
     3e0:	df e3       	ldi	r29, 0x3F	; 63
     3e2:	de bf       	out	0x3e, r29	; 62
     3e4:	00 e0       	ldi	r16, 0x00	; 0
     3e6:	0c bf       	out	0x3c, r16	; 60

000003e8 <__do_copy_data>:
     3e8:	10 e2       	ldi	r17, 0x20	; 32
     3ea:	a0 e0       	ldi	r26, 0x00	; 0
     3ec:	b0 e2       	ldi	r27, 0x20	; 32
     3ee:	e8 e8       	ldi	r30, 0x88	; 136
     3f0:	fa e4       	ldi	r31, 0x4A	; 74
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	0b bf       	out	0x3b, r16	; 59
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <__do_copy_data+0x14>
     3f8:	07 90       	elpm	r0, Z+
     3fa:	0d 92       	st	X+, r0
     3fc:	a2 3f       	cpi	r26, 0xF2	; 242
     3fe:	b1 07       	cpc	r27, r17
     400:	d9 f7       	brne	.-10     	; 0x3f8 <__do_copy_data+0x10>

00000402 <__do_clear_bss>:
     402:	23 e2       	ldi	r18, 0x23	; 35
     404:	a2 ef       	ldi	r26, 0xF2	; 242
     406:	b0 e2       	ldi	r27, 0x20	; 32
     408:	01 c0       	rjmp	.+2      	; 0x40c <.do_clear_bss_start>

0000040a <.do_clear_bss_loop>:
     40a:	1d 92       	st	X+, r1

0000040c <.do_clear_bss_start>:
     40c:	a0 34       	cpi	r26, 0x40	; 64
     40e:	b2 07       	cpc	r27, r18
     410:	e1 f7       	brne	.-8      	; 0x40a <.do_clear_bss_loop>

00000412 <__do_global_ctors>:
     412:	11 e0       	ldi	r17, 0x01	; 1
     414:	ca ee       	ldi	r28, 0xEA	; 234
     416:	d1 e0       	ldi	r29, 0x01	; 1
     418:	00 e0       	ldi	r16, 0x00	; 0
     41a:	06 c0       	rjmp	.+12     	; 0x428 <__do_global_ctors+0x16>
     41c:	21 97       	sbiw	r28, 0x01	; 1
     41e:	01 09       	sbc	r16, r1
     420:	80 2f       	mov	r24, r16
     422:	fe 01       	movw	r30, r28
     424:	0e 94 ba 23 	call	0x4774	; 0x4774 <__tablejump2__>
     428:	c8 3e       	cpi	r28, 0xE8	; 232
     42a:	d1 07       	cpc	r29, r17
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	08 07       	cpc	r16, r24
     430:	a9 f7       	brne	.-22     	; 0x41c <__do_global_ctors+0xa>
     432:	0e 94 3a 20 	call	0x4074	; 0x4074 <main>
     436:	0c 94 32 25 	jmp	0x4a64	; 0x4a64 <__do_global_dtors>

0000043a <__bad_interrupt>:
     43a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000043e <_ZN13CDGUSDatabaseC1Ev>:
#define F_CPU 32000000

#include "util/delay.h"

// default constructor
CDGUSDatabase::CDGUSDatabase()
     43e:	08 95       	ret

00000440 <_ZN13CDGUSDatabaseD1Ev>:
{
} //CDGUSDatabase

// default destructor
CDGUSDatabase::~CDGUSDatabase()
     440:	08 95       	ret

00000442 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>:
{
} //~CDGUSDatabase

void CDGUSDatabase::Initialize(CMBSender* sender, uint16_t vp)
{
     442:	fc 01       	movw	r30, r24
	// GUI class initialization
	m_cpSender = sender;
     444:	62 83       	std	Z+2, r22	; 0x02
     446:	73 83       	std	Z+3, r23	; 0x03
	vp_addr = (vp >> 8) | (vp << 8);
     448:	94 2f       	mov	r25, r20
     44a:	85 2f       	mov	r24, r21
     44c:	84 83       	std	Z+4, r24	; 0x04
     44e:	95 83       	std	Z+5, r25	; 0x05
	vp_addres = vp;
     450:	46 83       	std	Z+6, r20	; 0x06
     452:	57 83       	std	Z+7, r21	; 0x07
	data_transaction = 0;
     454:	10 82       	st	Z, r1
     456:	11 82       	std	Z+1, r1	; 0x01
     458:	08 95       	ret

0000045a <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>:
	m_cpSender->WaitMODBUSListener();
	data_transaction = (uint16_t*)data;
}

void CDGUSDatabase::MapDatabaseToWrite(uint16_t vp, uint32_t addr, uint16_t length)
{
     45a:	8f 92       	push	r8
     45c:	9f 92       	push	r9
     45e:	af 92       	push	r10
     460:	bf 92       	push	r11
     462:	ef 92       	push	r14
     464:	ff 92       	push	r15
     466:	0f 93       	push	r16
     468:	1f 93       	push	r17
     46a:	cf 93       	push	r28
     46c:	df 93       	push	r29
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
     472:	2a 97       	sbiw	r28, 0x0a	; 10
     474:	cd bf       	out	0x3d, r28	; 61
     476:	de bf       	out	0x3e, r29	; 62
     478:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     47a:	8a e5       	ldi	r24, 0x5A	; 90
     47c:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0x50;
     47e:	80 e5       	ldi	r24, 0x50	; 80
     480:	8a 83       	std	Y+2, r24	; 0x02
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     482:	85 2e       	mov	r8, r21
     484:	99 24       	eor	r9, r9
     486:	aa 24       	eor	r10, r10
     488:	bb 24       	eor	r11, r11
     48a:	b2 2f       	mov	r27, r18
     48c:	aa 27       	eor	r26, r26
     48e:	99 27       	eor	r25, r25
     490:	88 27       	eor	r24, r24
     492:	88 29       	or	r24, r8
     494:	99 29       	or	r25, r9
     496:	aa 29       	or	r26, r10
     498:	bb 29       	or	r27, r11
     49a:	49 01       	movw	r8, r18
     49c:	5a 01       	movw	r10, r20
     49e:	88 24       	eor	r8, r8
     4a0:	aa 24       	eor	r10, r10
     4a2:	bb 24       	eor	r11, r11
     4a4:	ba 2c       	mov	r11, r10
     4a6:	a9 2c       	mov	r10, r9
     4a8:	98 2c       	mov	r9, r8
     4aa:	88 24       	eor	r8, r8
     4ac:	88 29       	or	r24, r8
     4ae:	99 29       	or	r25, r9
     4b0:	aa 29       	or	r26, r10
     4b2:	bb 29       	or	r27, r11
     4b4:	49 01       	movw	r8, r18
     4b6:	5a 01       	movw	r10, r20
     4b8:	88 24       	eor	r8, r8
     4ba:	99 24       	eor	r9, r9
     4bc:	bb 24       	eor	r11, r11
     4be:	89 2c       	mov	r8, r9
     4c0:	9a 2c       	mov	r9, r10
     4c2:	ab 2c       	mov	r10, r11
     4c4:	bb 24       	eor	r11, r11
     4c6:	88 29       	or	r24, r8
     4c8:	99 29       	or	r25, r9
     4ca:	aa 29       	or	r26, r10
     4cc:	bb 29       	or	r27, r11
     4ce:	8b 83       	std	Y+3, r24	; 0x03
     4d0:	9c 83       	std	Y+4, r25	; 0x04
     4d2:	ad 83       	std	Y+5, r26	; 0x05
     4d4:	be 83       	std	Y+6, r27	; 0x06
	FLASH.vp = (vp >> 8) | (vp << 8);
     4d6:	76 27       	eor	r23, r22
     4d8:	67 27       	eor	r22, r23
     4da:	76 27       	eor	r23, r22
     4dc:	6f 83       	std	Y+7, r22	; 0x07
     4de:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     4e0:	10 27       	eor	r17, r16
     4e2:	01 27       	eor	r16, r17
     4e4:	10 27       	eor	r17, r16
     4e6:	09 87       	std	Y+9, r16	; 0x09
     4e8:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     4ea:	2a e0       	ldi	r18, 0x0A	; 10
     4ec:	ae 01       	movw	r20, r28
     4ee:	4f 5f       	subi	r20, 0xFF	; 255
     4f0:	5f 4f       	sbci	r21, 0xFF	; 255
     4f2:	66 e5       	ldi	r22, 0x56	; 86
     4f4:	f7 01       	movw	r30, r14
     4f6:	82 81       	ldd	r24, Z+2	; 0x02
     4f8:	93 81       	ldd	r25, Z+3	; 0x03
     4fa:	0e 94 0d 23 	call	0x461a	; 0x461a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     4fe:	f7 01       	movw	r30, r14
     500:	82 81       	ldd	r24, Z+2	; 0x02
     502:	93 81       	ldd	r25, Z+3	; 0x03
     504:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     508:	2a 96       	adiw	r28, 0x0a	; 10
     50a:	cd bf       	out	0x3d, r28	; 61
     50c:	de bf       	out	0x3e, r29	; 62
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	1f 91       	pop	r17
     514:	0f 91       	pop	r16
     516:	ff 90       	pop	r15
     518:	ef 90       	pop	r14
     51a:	bf 90       	pop	r11
     51c:	af 90       	pop	r10
     51e:	9f 90       	pop	r9
     520:	8f 90       	pop	r8
     522:	08 95       	ret

00000524 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>:

void CDGUSDatabase::MapDatabaseToRead(uint16_t vp, uint32_t addr, uint16_t length)
{
     524:	8f 92       	push	r8
     526:	9f 92       	push	r9
     528:	af 92       	push	r10
     52a:	bf 92       	push	r11
     52c:	ef 92       	push	r14
     52e:	ff 92       	push	r15
     530:	0f 93       	push	r16
     532:	1f 93       	push	r17
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	cd b7       	in	r28, 0x3d	; 61
     53a:	de b7       	in	r29, 0x3e	; 62
     53c:	2a 97       	sbiw	r28, 0x0a	; 10
     53e:	cd bf       	out	0x3d, r28	; 61
     540:	de bf       	out	0x3e, r29	; 62
     542:	7c 01       	movw	r14, r24
	DGUS_WRITETOFLASH FLASH;
	
	FLASH.en = 0x5A;
     544:	8a e5       	ldi	r24, 0x5A	; 90
     546:	89 83       	std	Y+1, r24	; 0x01
	FLASH.op = 0xA0;
     548:	80 ea       	ldi	r24, 0xA0	; 160
     54a:	8a 83       	std	Y+2, r24	; 0x02
	FLASH.addr = ((addr & 0xff) << 24) | ((addr & 0xff00) << 8) | ((addr & 0xff0000) >> 8) | ((addr & 0xff000000) >> 24);
     54c:	85 2e       	mov	r8, r21
     54e:	99 24       	eor	r9, r9
     550:	aa 24       	eor	r10, r10
     552:	bb 24       	eor	r11, r11
     554:	b2 2f       	mov	r27, r18
     556:	aa 27       	eor	r26, r26
     558:	99 27       	eor	r25, r25
     55a:	88 27       	eor	r24, r24
     55c:	88 29       	or	r24, r8
     55e:	99 29       	or	r25, r9
     560:	aa 29       	or	r26, r10
     562:	bb 29       	or	r27, r11
     564:	49 01       	movw	r8, r18
     566:	5a 01       	movw	r10, r20
     568:	88 24       	eor	r8, r8
     56a:	aa 24       	eor	r10, r10
     56c:	bb 24       	eor	r11, r11
     56e:	ba 2c       	mov	r11, r10
     570:	a9 2c       	mov	r10, r9
     572:	98 2c       	mov	r9, r8
     574:	88 24       	eor	r8, r8
     576:	88 29       	or	r24, r8
     578:	99 29       	or	r25, r9
     57a:	aa 29       	or	r26, r10
     57c:	bb 29       	or	r27, r11
     57e:	49 01       	movw	r8, r18
     580:	5a 01       	movw	r10, r20
     582:	88 24       	eor	r8, r8
     584:	99 24       	eor	r9, r9
     586:	bb 24       	eor	r11, r11
     588:	89 2c       	mov	r8, r9
     58a:	9a 2c       	mov	r9, r10
     58c:	ab 2c       	mov	r10, r11
     58e:	bb 24       	eor	r11, r11
     590:	88 29       	or	r24, r8
     592:	99 29       	or	r25, r9
     594:	aa 29       	or	r26, r10
     596:	bb 29       	or	r27, r11
     598:	8b 83       	std	Y+3, r24	; 0x03
     59a:	9c 83       	std	Y+4, r25	; 0x04
     59c:	ad 83       	std	Y+5, r26	; 0x05
     59e:	be 83       	std	Y+6, r27	; 0x06
	FLASH.vp = (vp >> 8) | (vp << 8);
     5a0:	76 27       	eor	r23, r22
     5a2:	67 27       	eor	r22, r23
     5a4:	76 27       	eor	r23, r22
     5a6:	6f 83       	std	Y+7, r22	; 0x07
     5a8:	78 87       	std	Y+8, r23	; 0x08
	FLASH.len = (length >> 8) | (length << 8);
     5aa:	10 27       	eor	r17, r16
     5ac:	01 27       	eor	r16, r17
     5ae:	10 27       	eor	r17, r16
     5b0:	09 87       	std	Y+9, r16	; 0x09
     5b2:	1a 87       	std	Y+10, r17	; 0x0a
	
	// Database enable for reading
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&FLASH, sizeof(FLASH));
     5b4:	2a e0       	ldi	r18, 0x0A	; 10
     5b6:	ae 01       	movw	r20, r28
     5b8:	4f 5f       	subi	r20, 0xFF	; 255
     5ba:	5f 4f       	sbci	r21, 0xFF	; 255
     5bc:	66 e5       	ldi	r22, 0x56	; 86
     5be:	f7 01       	movw	r30, r14
     5c0:	82 81       	ldd	r24, Z+2	; 0x02
     5c2:	93 81       	ldd	r25, Z+3	; 0x03
     5c4:	0e 94 0d 23 	call	0x461a	; 0x461a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     5c8:	f7 01       	movw	r30, r14
     5ca:	82 81       	ldd	r24, Z+2	; 0x02
     5cc:	93 81       	ldd	r25, Z+3	; 0x03
     5ce:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     5d2:	2a 96       	adiw	r28, 0x0a	; 10
     5d4:	cd bf       	out	0x3d, r28	; 61
     5d6:	de bf       	out	0x3e, r29	; 62
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	1f 91       	pop	r17
     5de:	0f 91       	pop	r16
     5e0:	ff 90       	pop	r15
     5e2:	ef 90       	pop	r14
     5e4:	bf 90       	pop	r11
     5e6:	af 90       	pop	r10
     5e8:	9f 90       	pop	r9
     5ea:	8f 90       	pop	r8
     5ec:	08 95       	ret

000005ee <_ZN13CDGUSDatabase5UnMapEv>:

void CDGUSDatabase::UnMap()
{
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	1f 92       	push	r1
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
     5fc:	8c 01       	movw	r16, r24
	uint8_t en = 0x00;
     5fe:	19 82       	std	Y+1, r1	; 0x01
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&en, sizeof(en));
     600:	21 e0       	ldi	r18, 0x01	; 1
     602:	ae 01       	movw	r20, r28
     604:	4f 5f       	subi	r20, 0xFF	; 255
     606:	5f 4f       	sbci	r21, 0xFF	; 255
     608:	66 e5       	ldi	r22, 0x56	; 86
     60a:	fc 01       	movw	r30, r24
     60c:	82 81       	ldd	r24, Z+2	; 0x02
     60e:	93 81       	ldd	r25, Z+3	; 0x03
     610:	0e 94 0d 23 	call	0x461a	; 0x461a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     614:	f8 01       	movw	r30, r16
     616:	82 81       	ldd	r24, Z+2	; 0x02
     618:	93 81       	ldd	r25, Z+3	; 0x03
     61a:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
}
     61e:	0f 90       	pop	r0
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	1f 91       	pop	r17
     626:	0f 91       	pop	r16
     628:	08 95       	ret

0000062a <_ZN13CDGUSDatabase18OnVariableReceivedEjPjj>:
	m_cpSender->WriteDataToRegisterAsync(STRUCT_ADDR_WRITETOFLASH, (uint8_t*)&en, sizeof(en));
	m_cpSender->WaitMODBUSTransmitter();
}

void CDGUSDatabase::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	ec 01       	movw	r28, r24
     630:	ba 01       	movw	r22, r20
	if (data_transaction != 0)
     632:	88 81       	ld	r24, Y
     634:	99 81       	ldd	r25, Y+1	; 0x01
     636:	00 97       	sbiw	r24, 0x00	; 0
     638:	19 f0       	breq	.+6      	; 0x640 <_ZN13CDGUSDatabase18OnVariableReceivedEjPjj+0x16>
		memcpy(data_transaction, data, length);
     63a:	a9 01       	movw	r20, r18
     63c:	0e 94 20 25 	call	0x4a40	; 0x4a40 <memcpy>
	data_transaction = 0;
     640:	18 82       	st	Y, r1
     642:	19 82       	std	Y+1, r1	; 0x01
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	08 95       	ret

0000064a <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>:
{
} //~CDGUSUSART


void CDGUSUSART::Initialize(BAUDRATE baud, PARITY parity, STOPBITS stopbits, bool Async)
{
     64a:	0f 93       	push	r16
	PORTD.DIRSET = PIN3_bm; // Set TX to output
     64c:	e0 e6       	ldi	r30, 0x60	; 96
     64e:	f6 e0       	ldi	r31, 0x06	; 6
     650:	88 e0       	ldi	r24, 0x08	; 8
     652:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; // Set RX to input
     654:	84 e0       	ldi	r24, 0x04	; 4
     656:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN2CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
     658:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_TOTEM_gc;	// | PORT_SRLEN_bm;
     65a:	13 8a       	std	Z+19, r1	; 0x13
	
	// Turn on interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_LO_gc/* | USART_DREINTLVL_LO_gc*/;
     65c:	e0 ea       	ldi	r30, 0xA0	; 160
     65e:	f9 e0       	ldi	r31, 0x09	; 9
     660:	84 e1       	ldi	r24, 0x14	; 20
     662:	83 83       	std	Z+3, r24	; 0x03
	
	// Enable RX, TX
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     664:	88 e1       	ldi	r24, 0x18	; 24
     666:	84 83       	std	Z+4, r24	; 0x04
	
	// Double transmission speed
#ifdef U2X
	USARTD0.CTRLB |=  (1 << USART_CLK2X_bm);
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
     668:	84 81       	ldd	r24, Z+4	; 0x04
     66a:	84 83       	std	Z+4, r24	; 0x04
#endif

	// Parity param set
	uint8_t temp = 0;
	switch (parity)
     66c:	41 30       	cpi	r20, 0x01	; 1
     66e:	19 f0       	breq	.+6      	; 0x676 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x2c>
     670:	42 30       	cpi	r20, 0x02	; 2
     672:	19 f0       	breq	.+6      	; 0x67a <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x30>
     674:	04 c0       	rjmp	.+8      	; 0x67e <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x34>
	{
		case PARITY_DISABLE:
			temp |= USART_PMODE_DISABLED_gc;
		break;
		case PARITY_EVEN:
			temp |= USART_PMODE_EVEN_gc;
     676:	80 e2       	ldi	r24, 0x20	; 32
     678:	03 c0       	rjmp	.+6      	; 0x680 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
		break;
		case PARITY_ODD:
			temp |= USART_PMODE_ODD_gc;
     67a:	80 e3       	ldi	r24, 0x30	; 48
		break;
     67c:	01 c0       	rjmp	.+2      	; 0x680 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x36>
#else
	USARTD0.CTRLB &= ~(0 << USART_CLK2X_bm);
#endif

	// Parity param set
	uint8_t temp = 0;
     67e:	80 e0       	ldi	r24, 0x00	; 0
			temp |= USART_PMODE_ODD_gc;
		break;
	}
	
	// Stop bits param set
	switch (stopbits)
     680:	22 23       	and	r18, r18
     682:	19 f0       	breq	.+6      	; 0x68a <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x40>
     684:	21 30       	cpi	r18, 0x01	; 1
     686:	19 f0       	breq	.+6      	; 0x68e <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x44>
     688:	03 c0       	rjmp	.+6      	; 0x690 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
	{
		case STOPBITS_1BIT:
			temp &= ~USART_SBMODE_bm;
     68a:	87 7f       	andi	r24, 0xF7	; 247
		break;
     68c:	01 c0       	rjmp	.+2      	; 0x690 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x46>
		case STOPBITS_2BIT:
			temp |=  USART_SBMODE_bm;
     68e:	88 60       	ori	r24, 0x08	; 8
		break;
	}
	
	// USART mode asynchronous, 8bit
	USARTD0.CTRLC = (Async?USART_CMODE_ASYNCHRONOUS_gc:USART_CMODE_SYNCHRONOUS_gc) | USART_CHSIZE_8BIT_gc | temp;
     690:	01 11       	cpse	r16, r1
     692:	02 c0       	rjmp	.+4      	; 0x698 <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x4e>
     694:	93 e4       	ldi	r25, 0x43	; 67
     696:	01 c0       	rjmp	.+2      	; 0x69a <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb+0x50>
     698:	93 e0       	ldi	r25, 0x03	; 3
     69a:	89 2b       	or	r24, r25
     69c:	e0 ea       	ldi	r30, 0xA0	; 160
     69e:	f9 e0       	ldi	r31, 0x09	; 9
     6a0:	85 83       	std	Z+5, r24	; 0x05
	
	// Set baud rate
	USARTD0.BAUDCTRLA = bsel_table[baud];
     6a2:	70 e0       	ldi	r23, 0x00	; 0
     6a4:	db 01       	movw	r26, r22
     6a6:	aa 5d       	subi	r26, 0xDA	; 218
     6a8:	bf 4d       	sbci	r27, 0xDF	; 223
     6aa:	8c 91       	ld	r24, X
     6ac:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (((int8_t)(16 + bscale_table[baud])) << USART_BSCALE0_bp) | ((bsel_table[baud] >> 8) & 0x0F);	
     6ae:	db 01       	movw	r26, r22
     6b0:	aa 5f       	subi	r26, 0xFA	; 250
     6b2:	bf 4d       	sbci	r27, 0xDF	; 223
     6b4:	8c 91       	ld	r24, X
     6b6:	82 95       	swap	r24
     6b8:	80 7f       	andi	r24, 0xF0	; 240
     6ba:	87 83       	std	Z+7, r24	; 0x07
} //CUSART
     6bc:	0f 91       	pop	r16
     6be:	08 95       	ret

000006c0 <_ZN10CDGUSUSART15GetReceivedByteEv>:

uint8_t CDGUSUSART::GetReceivedByte()
{
	return USARTD0.DATA;
     6c0:	80 91 a0 09 	lds	r24, 0x09A0
}
     6c4:	08 95       	ret

000006c6 <_ZN10CDGUSUSART19SetTransmittingByteEh>:

void CDGUSUSART::SetTransmittingByte(uint8_t data)
{
	//while ( ( USARTD0.STATUS & (1<<USART_DREIF_bm)) );
	USARTD0.DATA = data;
     6c6:	60 93 a0 09 	sts	0x09A0, r22
     6ca:	08 95       	ret

000006cc <_ZN10CDGUSUSART14IsTransmittingEv>:
}

bool CDGUSUSART::IsTransmitting()
{
	return !( USARTD0.STATUS & USART_TXCIF_bm);
     6cc:	80 91 a1 09 	lds	r24, 0x09A1
     6d0:	86 fb       	bst	r24, 6
     6d2:	88 27       	eor	r24, r24
     6d4:	80 f9       	bld	r24, 0
}
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	89 27       	eor	r24, r25
     6da:	08 95       	ret

000006dc <_ZN10CDGUSUSART11IsReceivingEv>:

bool CDGUSUSART::IsReceiving()
{
	return !( USARTD0.STATUS & USART_RXCIF_bm);
     6dc:	80 91 a1 09 	lds	r24, 0x09A1
     6e0:	80 95       	com	r24
}
     6e2:	88 1f       	adc	r24, r24
     6e4:	88 27       	eor	r24, r24
     6e6:	88 1f       	adc	r24, r24
     6e8:	08 95       	ret

000006ea <_ZN10CDGUSUSART11IsDataEmptyEv>:

bool CDGUSUSART::IsDataEmpty()
{
	return !( USARTD0.STATUS & USART_DREIF_bm);
     6ea:	80 91 a1 09 	lds	r24, 0x09A1
     6ee:	85 fb       	bst	r24, 5
     6f0:	88 27       	eor	r24, r24
     6f2:	80 f9       	bld	r24, 0
}
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	89 27       	eor	r24, r25
     6f8:	08 95       	ret

000006fa <_ZN10CDGUSUSART25SetRxInterruptionCallbackEPvPFvS0_E>:

void CDGUSUSART::SetRxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_RXC_vect_num] = sender;
     6fa:	60 93 9d 22 	sts	0x229D, r22
     6fe:	70 93 9e 22 	sts	0x229E, r23
	InterruptFuncTable[USARTD0_RXC_vect_num] = callback;
     702:	40 93 a7 21 	sts	0x21A7, r20
     706:	50 93 a8 21 	sts	0x21A8, r21
     70a:	08 95       	ret

0000070c <_ZN10CDGUSUSART25SetTxInterruptionCallbackEPvPFvS0_E>:
}

void CDGUSUSART::SetTxInterruptionCallback(void* sender, ISRCallback callback)
{
	InterruptSenderTable[USARTD0_TXC_vect_num] = sender;
     70c:	60 93 a1 22 	sts	0x22A1, r22
     710:	70 93 a2 22 	sts	0x22A2, r23
	InterruptFuncTable[USARTD0_TXC_vect_num] = callback;
     714:	40 93 ab 21 	sts	0x21AB, r20
     718:	50 93 ac 21 	sts	0x21AC, r21
     71c:	08 95       	ret

0000071e <_ZN10CDGUSUSART12SetDMARxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMARxTrig(DMA_CH_t *dma_channel)
{
     71e:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_RXC_gc;
     720:	8b e6       	ldi	r24, 0x6B	; 107
     722:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->SRCADDR0 = (int)&USARTD0.DATA;
     724:	80 ea       	ldi	r24, 0xA0	; 160
     726:	80 87       	std	Z+8, r24	; 0x08
	dma_channel->SRCADDR1 = (int)&USARTD0.DATA >> 8;
     728:	89 e0       	ldi	r24, 0x09	; 9
     72a:	81 87       	std	Z+9, r24	; 0x09
	dma_channel->SRCADDR2 = 0;
     72c:	12 86       	std	Z+10, r1	; 0x0a
     72e:	08 95       	ret

00000730 <_ZN10CDGUSUSART12SetDMATxTrigEP13DMA_CH_struct>:
}

void CDGUSUSART::SetDMATxTrig(DMA_CH_t *dma_channel)
{
     730:	fb 01       	movw	r30, r22
	dma_channel->TRIGSRC = DMA_CH_TRIGSRC_USARTD0_DRE_gc;
     732:	8c e6       	ldi	r24, 0x6C	; 108
     734:	83 83       	std	Z+3, r24	; 0x03
	dma_channel->DESTADDR0 = (int)&USARTD0.DATA;
     736:	80 ea       	ldi	r24, 0xA0	; 160
     738:	84 87       	std	Z+12, r24	; 0x0c
	dma_channel->DESTADDR1 = (int)&USARTD0.DATA >> 8;
     73a:	89 e0       	ldi	r24, 0x09	; 9
     73c:	85 87       	std	Z+13, r24	; 0x0d
	dma_channel->DESTADDR2 = 0;
     73e:	16 86       	std	Z+14, r1	; 0x0e
     740:	08 95       	ret

00000742 <_ZN10CDGUSUSARTC1Ev>:
								true, true, true, true, true, true, true, true, true, true,
								true, true};
#endif

// default constructor
CDGUSUSART::CDGUSUSART()
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	ec 01       	movw	r28, r24
     748:	0e 94 2d 0c 	call	0x185a	; 0x185a <_ZN6CUSARTC1Ev>
     74c:	8d e4       	ldi	r24, 0x4D	; 77
     74e:	90 e2       	ldi	r25, 0x20	; 32
     750:	88 83       	st	Y, r24
     752:	99 83       	std	Y+1, r25	; 0x01
{
} //CDGUSUSART
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <_ZN10CDGUSUSARTD1Ev>:

// default destructor
CDGUSUSART::~CDGUSUSART()
     75a:	2d e4       	ldi	r18, 0x4D	; 77
     75c:	30 e2       	ldi	r19, 0x20	; 32
     75e:	fc 01       	movw	r30, r24
     760:	20 83       	st	Z, r18
     762:	31 83       	std	Z+1, r19	; 0x01
     764:	0e 94 33 0c 	call	0x1866	; 0x1866 <_ZN6CUSARTD1Ev>
     768:	08 95       	ret

0000076a <_ZN11CLaserBoardC1Ev>:
#include <avr/interrupt.h>
#include <avr/io.h>
#include <util/delay.h>

// default constructor
CLaserBoard::CLaserBoard()
     76a:	08 95       	ret

0000076c <_ZN11CLaserBoardD1Ev>:
{
} //CLaserBoard

// default destructor
CLaserBoard::~CLaserBoard()
     76c:	08 95       	ret

0000076e <_ZN11CLaserBoard12InitializeIOEv>:
} //~CLaserBoard

void CLaserBoard::InitializeIO()
{
	// Set all output
	PORTC.DIRSET = 0xFF;
     76e:	e0 e4       	ldi	r30, 0x40	; 64
     770:	f6 e0       	ldi	r31, 0x06	; 6
     772:	9f ef       	ldi	r25, 0xFF	; 255
     774:	91 83       	std	Z+1, r25	; 0x01
	
	// Configure all pins to "wired and"
	PORTC.PIN0CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     776:	88 ea       	ldi	r24, 0xA8	; 168
     778:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     77a:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.PIN2CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     77c:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     77e:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     780:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     782:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     784:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_WIREDAND_gc | PORT_SRLEN_bm;
     786:	87 8b       	std	Z+23, r24	; 0x17
	
	// Set all down
	PORTC.OUT = 0x00;
     788:	14 82       	std	Z+4, r1	; 0x04
	
	// Buzzer pin initialize
	PORTE.DIRSET = PIN3_bm;
     78a:	e0 e8       	ldi	r30, 0x80	; 128
     78c:	f6 e0       	ldi	r31, 0x06	; 6
     78e:	88 e0       	ldi	r24, 0x08	; 8
     790:	81 83       	std	Z+1, r24	; 0x01
	
	// Configure
	PORTE.PIN3CTRL = PORT_OPC_TOTEM_gc;
     792:	13 8a       	std	Z+19, r1	; 0x13
	PORTE.OUT = 0;
     794:	14 82       	std	Z+4, r1	; 0x04
	
	// Configure all pins of PWM to inverted
	PORTF.PIN0CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     796:	e0 ea       	ldi	r30, 0xA0	; 160
     798:	f6 e0       	ldi	r31, 0x06	; 6
     79a:	80 ec       	ldi	r24, 0xC0	; 192
     79c:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     79e:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     7a0:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     7a2:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     7a4:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     7a6:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     7a8:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     7aa:	87 8b       	std	Z+23, r24	; 0x17

	// Set all down
	PORTF.OUT = 0x00;
     7ac:	14 82       	std	Z+4, r1	; 0x04

	// Set all output
	PORTF.DIRSET = 0xFF;
     7ae:	91 83       	std	Z+1, r25	; 0x01
	
	// Set PD0 and PD4
	PORTD.DIRSET = PIN0_bm | PIN4_bm;
     7b0:	e0 e6       	ldi	r30, 0x60	; 96
     7b2:	f6 e0       	ldi	r31, 0x06	; 6
     7b4:	91 e1       	ldi	r25, 0x11	; 17
     7b6:	91 83       	std	Z+1, r25	; 0x01
	
	// Configure all pins to "wired and"
	PORTD.PIN0CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     7b8:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN4CTRL = PORT_INVEN_bm | PORT_OPC_TOTEM_gc | PORT_SRLEN_bm;
     7ba:	84 8b       	std	Z+20, r24	; 0x14
	
	PORTD.OUT = 0;//PIN0_bm;
     7bc:	14 82       	std	Z+4, r1	; 0x04
	
	// Enable low level interrupts
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
     7be:	e0 ea       	ldi	r30, 0xA0	; 160
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
     7c2:	82 81       	ldd	r24, Z+2	; 0x02
     7c4:	81 60       	ori	r24, 0x01	; 1
     7c6:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
     7c8:	82 81       	ldd	r24, Z+2	; 0x02
     7ca:	82 60       	ori	r24, 0x02	; 2
     7cc:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_HILVLEN_bm;
     7ce:	82 81       	ldd	r24, Z+2	; 0x02
     7d0:	84 60       	ori	r24, 0x04	; 4
     7d2:	82 83       	std	Z+2, r24	; 0x02
     7d4:	08 95       	ret

000007d6 <_ZN11CLaserBoard15InitializeClockEv>:

void CLaserBoard::InitializeClock()
{
	//-----------------------
	// External 16000.000 kHz oscillator initialization
	OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
     7d6:	e0 e5       	ldi	r30, 0x50	; 80
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	8b ec       	ldi	r24, 0xCB	; 203
     7dc:	82 83       	std	Z+2, r24	; 0x02
	// Enable the external oscillator
	OSC.CTRL |= OSC_XOSCEN_bm;
     7de:	80 81       	ld	r24, Z
     7e0:	88 60       	ori	r24, 0x08	; 8
     7e2:	80 83       	st	Z, r24
	// Wait for the external oscillator to stabilize
	while ((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
     7e4:	81 81       	ldd	r24, Z+1	; 0x01
     7e6:	83 ff       	sbrs	r24, 3
     7e8:	fd cf       	rjmp	.-6      	; 0x7e4 <_ZN11CLaserBoard15InitializeClockEv+0xe>
	// PLL initialization
	// PLL clock source: External Osc. or Clock
	// PLL multiplication factor: 2
	// PLL frequency: 32.000000 MHz
	// Set the PLL clock source and multiplication factor
	unsigned char n = (OSC.PLLCTRL & (~(OSC_PLLSRC_gm | OSC_PLLFAC_gm))) |    OSC_PLLSRC_XOSC_gc | OSC_PLLFAC2_bm;
     7ea:	e0 e5       	ldi	r30, 0x50	; 80
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	85 81       	ldd	r24, Z+5	; 0x05
	CCP = CCP_IOREG_gc;
     7f0:	98 ed       	ldi	r25, 0xD8	; 216
     7f2:	94 bf       	out	0x34, r25	; 52
	OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | OSC_PLLFAC2_bm;//n;
     7f4:	84 ec       	ldi	r24, 0xC4	; 196
     7f6:	85 83       	std	Z+5, r24	; 0x05
	// Enable the PLL
	OSC.CTRL |= OSC_PLLEN_bm;
     7f8:	80 81       	ld	r24, Z
     7fa:	80 61       	ori	r24, 0x10	; 16
     7fc:	80 83       	st	Z, r24
	// ClkPer4: 32000.000 kHz
	// ClkPer2: 32000.000 kHz
	// ClkPer:  32000.000 kHz
	// ClkCPU:  32000.000 kHz
	n = (CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
     7fe:	e0 e4       	ldi	r30, 0x40	; 64
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	81 81       	ldd	r24, Z+1	; 0x01
	CCP = CCP_IOREG_gc;
     804:	94 bf       	out	0x34, r25	; 52
	CLK.PSCTRL = CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;//n;
     806:	11 82       	std	Z+1, r1	; 0x01
	// Wait for the PLL to stabilize
	while ((OSC.STATUS & OSC_PLLRDY_bm)==0);
     808:	e0 e5       	ldi	r30, 0x50	; 80
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	81 81       	ldd	r24, Z+1	; 0x01
     80e:	84 ff       	sbrs	r24, 4
     810:	fd cf       	rjmp	.-6      	; 0x80c <_ZN11CLaserBoard15InitializeClockEv+0x36>
	// Select the system clock source: Phase Locked Loop
	n = (CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_PLL_gc;
     812:	e0 e4       	ldi	r30, 0x40	; 64
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 81       	ld	r24, Z
     818:	88 7f       	andi	r24, 0xF8	; 248
     81a:	84 60       	ori	r24, 0x04	; 4
	CCP = CCP_IOREG_gc;
     81c:	98 ed       	ldi	r25, 0xD8	; 216
     81e:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = n;
     820:	80 83       	st	Z, r24
	// Disable the unused oscillators: 2 MHz, 32 MHz, internal 32 kHz
	OSC.CTRL &= ~(OSC_RC2MEN_bm | OSC_RC32MEN_bm | OSC_RC32KEN_bm);
     822:	a0 e5       	ldi	r26, 0x50	; 80
     824:	b0 e0       	ldi	r27, 0x00	; 0
     826:	8c 91       	ld	r24, X
     828:	88 7f       	andi	r24, 0xF8	; 248
     82a:	8c 93       	st	X, r24
	// Lock the CLK.CTRL and CLK.PSCTRL registers
	n = CLK.LOCK | CLK_LOCK_bm;
     82c:	82 81       	ldd	r24, Z+2	; 0x02
	CCP = CCP_IOREG_gc;
     82e:	94 bf       	out	0x34, r25	; 52
	CLK.LOCK = CLK_LOCK_bm;//n;
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	82 83       	std	Z+2, r24	; 0x02
	// Peripheral Clock output: Disabled
	PORTCFG.CLKEVOUT = (PORTCFG.CLKEVOUT & (~PORTCFG_CLKOUT_gm)) | PORTCFG_CLKOUT_OFF_gc;
     834:	e0 eb       	ldi	r30, 0xB0	; 176
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	84 81       	ldd	r24, Z+4	; 0x04
     83a:	8c 7f       	andi	r24, 0xFC	; 252
     83c:	84 83       	std	Z+4, r24	; 0x04
     83e:	08 95       	ret

00000840 <_ZN11CLaserBoard8Relay1OnEv>:
	//-----------------------
}

void CLaserBoard::Relay1On()
{
	PORTD.DIRCLR = PIN0_bm;
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	80 93 62 06 	sts	0x0662, r24
     846:	08 95       	ret

00000848 <_ZN11CLaserBoard8Relay2OnEv>:
}

void CLaserBoard::Relay2On()
{
	PORTD.DIRCLR = PIN4_bm;
     848:	80 e1       	ldi	r24, 0x10	; 16
     84a:	80 93 62 06 	sts	0x0662, r24
     84e:	08 95       	ret

00000850 <_ZN11CLaserBoard9Relay1OffEv>:
}

void CLaserBoard::Relay1Off()
{
	PORTD.DIRSET = PIN0_bm;
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	80 93 61 06 	sts	0x0661, r24
     856:	08 95       	ret

00000858 <_ZN11CLaserBoard9Relay2OffEv>:
}

void CLaserBoard::Relay2Off()
{
	PORTD.DIRSET = PIN4_bm;
     858:	80 e1       	ldi	r24, 0x10	; 16
     85a:	80 93 61 06 	sts	0x0661, r24
     85e:	08 95       	ret

00000860 <_ZN11CLaserBoard4BeepEv>:
}

void CLaserBoard::Beep()
{
	cli();
     860:	f8 94       	cli
     862:	84 e6       	ldi	r24, 0x64	; 100
     864:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 100; i++)
	{
		PORTE.OUTSET = PIN3_bm;
     866:	e0 e8       	ldi	r30, 0x80	; 128
     868:	f6 e0       	ldi	r31, 0x06	; 6
     86a:	28 e0       	ldi	r18, 0x08	; 8
     86c:	25 83       	std	Z+5, r18	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     86e:	af e9       	ldi	r26, 0x9F	; 159
     870:	bf e0       	ldi	r27, 0x0F	; 15
     872:	11 97       	sbiw	r26, 0x01	; 1
     874:	f1 f7       	brne	.-4      	; 0x872 <_ZN11CLaserBoard4BeepEv+0x12>
     876:	00 c0       	rjmp	.+0      	; 0x878 <_ZN11CLaserBoard4BeepEv+0x18>
     878:	00 00       	nop
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
     87a:	26 83       	std	Z+6, r18	; 0x06
     87c:	af e9       	ldi	r26, 0x9F	; 159
     87e:	bf e0       	ldi	r27, 0x0F	; 15
     880:	11 97       	sbiw	r26, 0x01	; 1
     882:	f1 f7       	brne	.-4      	; 0x880 <_ZN11CLaserBoard4BeepEv+0x20>
     884:	00 c0       	rjmp	.+0      	; 0x886 <_ZN11CLaserBoard4BeepEv+0x26>
     886:	00 00       	nop
     888:	01 97       	sbiw	r24, 0x01	; 1

void CLaserBoard::Beep()
{
	cli();
	
	for (int i = 0; i < 100; i++)
     88a:	81 f7       	brne	.-32     	; 0x86c <_ZN11CLaserBoard4BeepEv+0xc>
		_delay_us(500);
		PORTE.OUTCLR = PIN3_bm;
		_delay_us(500);
	}
	
	sei();
     88c:	78 94       	sei
     88e:	08 95       	ret

00000890 <_ZN11CLaserBoard14BeepClassErrorEv>:
}

void CLaserBoard::BeepClassError()
{
	cli();
     890:	f8 94       	cli
     892:	45 e0       	ldi	r20, 0x05	; 5
     894:	50 e0       	ldi	r21, 0x00	; 0
	
	sei();
}

void CLaserBoard::BeepClassError()
{
     896:	64 e6       	ldi	r22, 0x64	; 100
     898:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
		{
			PORTE.OUTSET = PIN3_bm;
     89a:	e0 e8       	ldi	r30, 0x80	; 128
     89c:	f6 e0       	ldi	r31, 0x06	; 6
     89e:	28 e0       	ldi	r18, 0x08	; 8
     8a0:	1c c0       	rjmp	.+56     	; 0x8da <_ZN11CLaserBoard14BeepClassErrorEv+0x4a>
     8a2:	25 83       	std	Z+5, r18	; 0x05
     8a4:	af e9       	ldi	r26, 0x9F	; 159
     8a6:	bf e0       	ldi	r27, 0x0F	; 15
     8a8:	11 97       	sbiw	r26, 0x01	; 1
     8aa:	f1 f7       	brne	.-4      	; 0x8a8 <_ZN11CLaserBoard14BeepClassErrorEv+0x18>
     8ac:	00 c0       	rjmp	.+0      	; 0x8ae <_ZN11CLaserBoard14BeepClassErrorEv+0x1e>
     8ae:	00 00       	nop
			_delay_us(500);
			PORTE.OUTCLR = PIN3_bm;
     8b0:	26 83       	std	Z+6, r18	; 0x06
     8b2:	af e9       	ldi	r26, 0x9F	; 159
     8b4:	bf e0       	ldi	r27, 0x0F	; 15
     8b6:	11 97       	sbiw	r26, 0x01	; 1
     8b8:	f1 f7       	brne	.-4      	; 0x8b6 <_ZN11CLaserBoard14BeepClassErrorEv+0x26>
     8ba:	00 c0       	rjmp	.+0      	; 0x8bc <_ZN11CLaserBoard14BeepClassErrorEv+0x2c>
     8bc:	00 00       	nop
     8be:	01 97       	sbiw	r24, 0x01	; 1
{
	cli();
	
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 100; i++)
     8c0:	81 f7       	brne	.-32     	; 0x8a2 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8c2:	bf ef       	ldi	r27, 0xFF	; 255
     8c4:	73 ec       	ldi	r23, 0xC3	; 195
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	b1 50       	subi	r27, 0x01	; 1
     8ca:	70 40       	sbci	r23, 0x00	; 0
     8cc:	80 40       	sbci	r24, 0x00	; 0
     8ce:	e1 f7       	brne	.-8      	; 0x8c8 <_ZN11CLaserBoard14BeepClassErrorEv+0x38>
     8d0:	00 c0       	rjmp	.+0      	; 0x8d2 <_ZN11CLaserBoard14BeepClassErrorEv+0x42>
     8d2:	00 00       	nop
     8d4:	41 50       	subi	r20, 0x01	; 1
     8d6:	51 09       	sbc	r21, r1

void CLaserBoard::BeepClassError()
{
	cli();
	
	for (int j = 0; j < 5; j++)
     8d8:	19 f0       	breq	.+6      	; 0x8e0 <_ZN11CLaserBoard14BeepClassErrorEv+0x50>
	
	sei();
}

void CLaserBoard::BeepClassError()
{
     8da:	86 2f       	mov	r24, r22
     8dc:	93 2f       	mov	r25, r19
     8de:	e1 cf       	rjmp	.-62     	; 0x8a2 <_ZN11CLaserBoard14BeepClassErrorEv+0x12>
			_delay_us(500);
		}
		_delay_ms(100);
	}
	
	sei();
     8e0:	78 94       	sei
     8e2:	08 95       	ret

000008e4 <_ZN16CLaserControlApp21OnTransactionCallbackEPhj>:
{
} //~CLaserControlApp

// CMBEventsHandler
void CLaserControlApp::OnTransactionCallback(uint8_t* data, uint16_t length)
{
     8e4:	08 95       	ret

000008e6 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh>:
			CLaserBoard::Beep();
	}
}

void CLaserControlApp::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
     8e6:	dc 01       	movw	r26, r24
	// Update GUI registers
	if (addr == 0x03)	PIC_ID = data[1];
     8e8:	63 30       	cpi	r22, 0x03	; 3
     8ea:	29 f4       	brne	.+10     	; 0x8f6 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x10>
     8ec:	fa 01       	movw	r30, r20
     8ee:	81 81       	ldd	r24, Z+1	; 0x01
     8f0:	1d 96       	adiw	r26, 0x0d	; 13
     8f2:	8c 93       	st	X, r24
     8f4:	1d 97       	sbiw	r26, 0x0d	; 13
	
	switch (PIC_ID)
     8f6:	1d 96       	adiw	r26, 0x0d	; 13
     8f8:	4c 91       	ld	r20, X
     8fa:	1d 97       	sbiw	r26, 0x0d	; 13
     8fc:	50 e0       	ldi	r21, 0x00	; 0
     8fe:	46 32       	cpi	r20, 0x26	; 38
     900:	51 05       	cpc	r21, r1
     902:	08 f0       	brcs	.+2      	; 0x906 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0x20>
     904:	46 c0       	rjmp	.+140    	; 0x992 <_ZN16CLaserControlApp18OnRegisterReceivedEhPhh+0xac>
     906:	fa 01       	movw	r30, r20
     908:	88 27       	eor	r24, r24
     90a:	ec 50       	subi	r30, 0x0C	; 12
     90c:	ff 4f       	sbci	r31, 0xFF	; 255
     90e:	8f 4f       	sbci	r24, 0xFF	; 255
     910:	0c 94 ba 23 	jmp	0x4774	; 0x4774 <__tablejump2__>
	{
		case PICID_LOGO:
			state = APP_LOGO;
     914:	1c 96       	adiw	r26, 0x0c	; 12
     916:	1c 92       	st	X, r1
		break;
     918:	08 95       	ret
		case PICID_SETUP:
			state = APP_SETUP;
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	1c 96       	adiw	r26, 0x0c	; 12
     91e:	8c 93       	st	X, r24
		break;
     920:	08 95       	ret
		case PICID_TIMER:
			state = APP_RUN;
     922:	83 e0       	ldi	r24, 0x03	; 3
     924:	1c 96       	adiw	r26, 0x0c	; 12
     926:	8c 93       	st	X, r24
		break;
     928:	08 95       	ret
		case PICID_OnTimerStart:
			state = APP_OnTimerResume;
     92a:	85 e0       	ldi	r24, 0x05	; 5
     92c:	1c 96       	adiw	r26, 0x0c	; 12
     92e:	8c 93       	st	X, r24
		break;
     930:	08 95       	ret
		case PICID_OnStart:
			state = APP_OnTimerStart;
     932:	84 e0       	ldi	r24, 0x04	; 4
     934:	1c 96       	adiw	r26, 0x0c	; 12
     936:	8c 93       	st	X, r24
		break;
     938:	08 95       	ret
		case PICID_OnPause:
			state = APP_OnTimerPause;
     93a:	86 e0       	ldi	r24, 0x06	; 6
     93c:	1c 96       	adiw	r26, 0x0c	; 12
     93e:	8c 93       	st	X, r24
		break;
     940:	08 95       	ret
		case PICID_OnRestart:
			state = APP_OnTimerRestart;
     942:	88 e0       	ldi	r24, 0x08	; 8
     944:	1c 96       	adiw	r26, 0x0c	; 12
     946:	8c 93       	st	X, r24
		break;
     948:	08 95       	ret
		case PICID_OnStop:
			state = APP_OnTimerStop;
     94a:	87 e0       	ldi	r24, 0x07	; 7
     94c:	1c 96       	adiw	r26, 0x0c	; 12
     94e:	8c 93       	st	X, r24
		break;
     950:	08 95       	ret
		case PICID_OnH_L:
			state = APP_OnHL;
     952:	89 e0       	ldi	r24, 0x09	; 9
     954:	1c 96       	adiw	r26, 0x0c	; 12
     956:	8c 93       	st	X, r24
		break;
     958:	08 95       	ret
		case PICID_OnTimerSave:
			state = APP_OnSaveSetup;
     95a:	8a e0       	ldi	r24, 0x0A	; 10
     95c:	1c 96       	adiw	r26, 0x0c	; 12
     95e:	8c 93       	st	X, r24
		break;
     960:	08 95       	ret
		
		case PICID_PROFILEPOP:
			state = APP_READPROFILE;
     962:	8c e0       	ldi	r24, 0x0C	; 12
     964:	1c 96       	adiw	r26, 0x0c	; 12
     966:	8c 93       	st	X, r24
		break;
     968:	08 95       	ret
		case PICID_PROFILEPUSH:
			state = APP_SAVEPROFILE;
     96a:	8b e0       	ldi	r24, 0x0B	; 11
     96c:	1c 96       	adiw	r26, 0x0c	; 12
     96e:	8c 93       	st	X, r24
		break;
     970:	08 95       	ret
		case PICID_DATABASE:
			state = APP_SHOWDATABASE;
     972:	8d e0       	ldi	r24, 0x0D	; 13
     974:	1c 96       	adiw	r26, 0x0c	; 12
     976:	8c 93       	st	X, r24
		break;
     978:	08 95       	ret
		case PICID_EDITPROFILE:
		case PICID_NEWPROFILE:
			state = APP_UNMAPDATABASE;
     97a:	8e e0       	ldi	r24, 0x0E	; 14
     97c:	1c 96       	adiw	r26, 0x0c	; 12
     97e:	8c 93       	st	X, r24
		break;
     980:	08 95       	ret
		
		case PICID_Password:
			state = APP_PASSWORD;
     982:	80 e1       	ldi	r24, 0x10	; 16
     984:	1c 96       	adiw	r26, 0x0c	; 12
     986:	8c 93       	st	X, r24
		break;
     988:	08 95       	ret
		case PICID_Service:
			state = APP_SERVICE;
     98a:	8f e0       	ldi	r24, 0x0F	; 15
     98c:	1c 96       	adiw	r26, 0x0c	; 12
     98e:	8c 93       	st	X, r24
		break;
     990:	08 95       	ret
		
		default:
			//state = APP_SETUPtoRUN_ANIM;
			state = APP_IDLE;
     992:	81 e1       	ldi	r24, 0x11	; 17
     994:	1c 96       	adiw	r26, 0x0c	; 12
     996:	8c 93       	st	X, r24
     998:	08 95       	ret

0000099a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj>:
{
	//no code
}

void CLaserControlApp::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
extern CSoundPlayer player;
extern CDGUSDatabase Database;

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
     99e:	da 01       	movw	r26, r20
     9a0:	ed 91       	ld	r30, X+
     9a2:	fc 91       	ld	r31, X
     9a4:	fe 27       	eor	r31, r30
     9a6:	ef 27       	eor	r30, r31
     9a8:	fe 27       	eor	r31, r30

void CLaserControlApp::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
	// Update GUI variables	
	uint16_t val = swap(*((uint16_t*)data));
	switch (addr)
     9aa:	68 30       	cpi	r22, 0x08	; 8
     9ac:	71 05       	cpc	r23, r1
     9ae:	09 f4       	brne	.+2      	; 0x9b2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x18>
     9b0:	49 c0       	rjmp	.+146    	; 0xa44 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xaa>
     9b2:	ea 01       	movw	r28, r20
     9b4:	dc 01       	movw	r26, r24
     9b6:	69 30       	cpi	r22, 0x09	; 9
     9b8:	71 05       	cpc	r23, r1
     9ba:	98 f4       	brcc	.+38     	; 0x9e2 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x48>
     9bc:	62 30       	cpi	r22, 0x02	; 2
     9be:	71 05       	cpc	r23, r1
     9c0:	09 f4       	brne	.+2      	; 0x9c4 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x2a>
     9c2:	6e c0       	rjmp	.+220    	; 0xaa0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x106>
     9c4:	38 f4       	brcc	.+14     	; 0x9d4 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x3a>
     9c6:	61 15       	cp	r22, r1
     9c8:	71 05       	cpc	r23, r1
     9ca:	01 f1       	breq	.+64     	; 0xa0c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x72>
     9cc:	61 30       	cpi	r22, 0x01	; 1
     9ce:	71 05       	cpc	r23, r1
     9d0:	31 f1       	breq	.+76     	; 0xa1e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x84>
     9d2:	64 c0       	rjmp	.+200    	; 0xa9c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x102>
     9d4:	63 30       	cpi	r22, 0x03	; 3
     9d6:	71 05       	cpc	r23, r1
     9d8:	59 f1       	breq	.+86     	; 0xa30 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x96>
     9da:	67 30       	cpi	r22, 0x07	; 7
     9dc:	71 05       	cpc	r23, r1
     9de:	69 f1       	breq	.+90     	; 0xa3a <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xa0>
     9e0:	5d c0       	rjmp	.+186    	; 0xa9c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x102>
     9e2:	6d 30       	cpi	r22, 0x0D	; 13
     9e4:	71 05       	cpc	r23, r1
     9e6:	09 f4       	brne	.+2      	; 0x9ea <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x50>
     9e8:	54 c0       	rjmp	.+168    	; 0xa92 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xf8>
     9ea:	48 f4       	brcc	.+18     	; 0x9fe <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x64>
     9ec:	6b 30       	cpi	r22, 0x0B	; 11
     9ee:	71 05       	cpc	r23, r1
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x5a>
     9f2:	45 c0       	rjmp	.+138    	; 0xa7e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xe4>
     9f4:	6c 30       	cpi	r22, 0x0C	; 12
     9f6:	71 05       	cpc	r23, r1
     9f8:	09 f4       	brne	.+2      	; 0x9fc <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x62>
     9fa:	46 c0       	rjmp	.+140    	; 0xa88 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xee>
     9fc:	4f c0       	rjmp	.+158    	; 0xa9c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x102>
     9fe:	60 31       	cpi	r22, 0x10	; 16
     a00:	71 05       	cpc	r23, r1
     a02:	69 f1       	breq	.+90     	; 0xa5e <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xc4>
     a04:	61 15       	cp	r22, r1
     a06:	71 40       	sbci	r23, 0x01	; 1
     a08:	19 f1       	breq	.+70     	; 0xa50 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0xb6>
     a0a:	48 c0       	rjmp	.+144    	; 0xa9c <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x102>
	{
		case VARIABLE_ADDR_MIN:
			m_wSetMin = val;
     a0c:	54 96       	adiw	r26, 0x14	; 20
     a0e:	ed 93       	st	X+, r30
     a10:	fc 93       	st	X, r31
     a12:	55 97       	sbiw	r26, 0x15	; 21
			m_wMinutes = val;
     a14:	1e 96       	adiw	r26, 0x0e	; 14
     a16:	ed 93       	st	X+, r30
     a18:	fc 93       	st	X, r31
     a1a:	1f 97       	sbiw	r26, 0x0f	; 15
		break;
     a1c:	41 c0       	rjmp	.+130    	; 0xaa0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x106>
		case VARIABLE_ADDR_SEC:
			m_wSetSec = val;
     a1e:	56 96       	adiw	r26, 0x16	; 22
     a20:	ed 93       	st	X+, r30
     a22:	fc 93       	st	X, r31
     a24:	57 97       	sbiw	r26, 0x17	; 23
			m_wSeconds = val;
     a26:	50 96       	adiw	r26, 0x10	; 16
     a28:	ed 93       	st	X+, r30
     a2a:	fc 93       	st	X, r31
     a2c:	51 97       	sbiw	r26, 0x11	; 17
		break;
     a2e:	38 c0       	rjmp	.+112    	; 0xaa0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x106>
		case VARIABLE_ADDR_MSC:
			// Not used
		break;
		case VARIABLE_ADDR_PWR:
			m_wPower = val;
     a30:	58 96       	adiw	r26, 0x18	; 24
     a32:	ed 93       	st	X+, r30
     a34:	fc 93       	st	X, r31
     a36:	59 97       	sbiw	r26, 0x19	; 25
		break;
     a38:	33 c0       	rjmp	.+102    	; 0xaa0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x106>
		case VARIABLE_ADDR_DATAPAGE:
			m_wDatabasePage = val;
     a3a:	94 96       	adiw	r26, 0x24	; 36
     a3c:	ed 93       	st	X+, r30
     a3e:	fc 93       	st	X, r31
     a40:	95 97       	sbiw	r26, 0x25	; 37
		break;
     a42:	2e c0       	rjmp	.+92     	; 0xaa0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x106>
		case VARIABLE_ADDR_SEL:
			m_wDatabaseSelInx = val;
     a44:	dc 01       	movw	r26, r24
     a46:	96 96       	adiw	r26, 0x26	; 38
     a48:	ed 93       	st	X+, r30
     a4a:	fc 93       	st	X, r31
     a4c:	97 97       	sbiw	r26, 0x27	; 39
		break;
     a4e:	28 c0       	rjmp	.+80     	; 0xaa0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x106>
		case VARIABLE_ADDR_DATABASE:
			Database.OnVariableReceived(addr, data, length);
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	71 e0       	ldi	r23, 0x01	; 1
     a54:	85 ee       	ldi	r24, 0xE5	; 229
     a56:	92 e2       	ldi	r25, 0x22	; 34
     a58:	0e 94 15 03 	call	0x62a	; 0x62a <_ZN13CDGUSDatabase18OnVariableReceivedEjPjj>
		break;
     a5c:	21 c0       	rjmp	.+66     	; 0xaa0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x106>
		// Input password
		case VARIABLE_ADDR_PASSWORD:
			m_wPassword[0] = ((char*)data)[0];
     a5e:	28 81       	ld	r18, Y
     a60:	5a 96       	adiw	r26, 0x1a	; 26
     a62:	2c 93       	st	X, r18
     a64:	5a 97       	sbiw	r26, 0x1a	; 26
			m_wPassword[1] = ((char*)data)[1];
     a66:	29 81       	ldd	r18, Y+1	; 0x01
     a68:	5b 96       	adiw	r26, 0x1b	; 27
     a6a:	2c 93       	st	X, r18
     a6c:	5b 97       	sbiw	r26, 0x1b	; 27
			m_wPassword[2] = ((char*)data)[2];
     a6e:	2a 81       	ldd	r18, Y+2	; 0x02
     a70:	5c 96       	adiw	r26, 0x1c	; 28
     a72:	2c 93       	st	X, r18
     a74:	5c 97       	sbiw	r26, 0x1c	; 28
			m_wPassword[3] = ((char*)data)[3];
     a76:	2b 81       	ldd	r18, Y+3	; 0x03
     a78:	5d 96       	adiw	r26, 0x1d	; 29
     a7a:	2c 93       	st	X, r18
		break;
     a7c:	11 c0       	rjmp	.+34     	; 0xaa0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x106>
		// Input secure settings
		case VARIABLE_ADDR_DACOFFSET:
			m_wDAC_Offset = val;
     a7e:	5e 96       	adiw	r26, 0x1e	; 30
     a80:	ed 93       	st	X+, r30
     a82:	fc 93       	st	X, r31
     a84:	5f 97       	sbiw	r26, 0x1f	; 31
		break;
     a86:	0c c0       	rjmp	.+24     	; 0xaa0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x106>
		case VARIABLE_ADDR_DACP:
			m_wDAC_P = val;
     a88:	90 96       	adiw	r26, 0x20	; 32
     a8a:	ed 93       	st	X+, r30
     a8c:	fc 93       	st	X, r31
     a8e:	91 97       	sbiw	r26, 0x21	; 33
		break;
     a90:	07 c0       	rjmp	.+14     	; 0xaa0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x106>
		case VARIABLE_ADDR_DACM:
			m_wDAC_M = val;
     a92:	92 96       	adiw	r26, 0x22	; 34
     a94:	ed 93       	st	X+, r30
     a96:	fc 93       	st	X, r31
     a98:	93 97       	sbiw	r26, 0x23	; 35
		break;
     a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <_ZN16CLaserControlApp18OnVariableReceivedEjPjj+0x106>
		
		default:
			// Error
			CLaserBoard::Beep();
     a9c:	0e 94 30 04 	call	0x860	; 0x860 <_ZN11CLaserBoard4BeepEv>
	}
}
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	08 95       	ret

00000aa6 <_ZN16CLaserControlAppC1Ev>:
	else
		return y;
}

// default constructor
CLaserControlApp::CLaserControlApp()
     aa6:	2a e6       	ldi	r18, 0x6A	; 106
     aa8:	30 e2       	ldi	r19, 0x20	; 32
     aaa:	fc 01       	movw	r30, r24
     aac:	20 83       	st	Z, r18
     aae:	31 83       	std	Z+1, r19	; 0x01
     ab0:	08 95       	ret

00000ab2 <_ZN16CLaserControlAppD1Ev>:
{
} //CLaserControlApp

// default destructor
CLaserControlApp::~CLaserControlApp()
     ab2:	2a e6       	ldi	r18, 0x6A	; 106
     ab4:	30 e2       	ldi	r19, 0x20	; 32
     ab6:	fc 01       	movw	r30, r24
     ab8:	20 83       	st	Z, r18
     aba:	31 83       	std	Z+1, r19	; 0x01
     abc:	0e 94 58 21 	call	0x42b0	; 0x42b0 <_ZN16CMBEventsHandlerD1Ev>
     ac0:	08 95       	ret

00000ac2 <_ZN16CLaserControlApp5StartEv>:
	m_wDatabasePage = 0;
	m_wDatabaseSelInx = 0;
}

void CLaserControlApp::Start()
{	
     ac2:	0f 93       	push	r16
     ac4:	1f 93       	push	r17
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	cd b7       	in	r28, 0x3d	; 61
     acc:	de b7       	in	r29, 0x3e	; 62
     ace:	28 97       	sbiw	r28, 0x08	; 8
     ad0:	cd bf       	out	0x3d, r28	; 61
     ad2:	de bf       	out	0x3e, r29	; 62
     ad4:	8c 01       	movw	r16, r24
	// Startup DGUS initialization
	uint16_t pic_id = swap(1);
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	91 e0       	ldi	r25, 0x01	; 1
     ada:	8f 83       	std	Y+7, r24	; 0x07
     adc:	98 87       	std	Y+8, r25	; 0x08
	m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     ade:	22 e0       	ldi	r18, 0x02	; 2
     ae0:	ae 01       	movw	r20, r28
     ae2:	49 5f       	subi	r20, 0xF9	; 249
     ae4:	5f 4f       	sbci	r21, 0xFF	; 255
     ae6:	63 e0       	ldi	r22, 0x03	; 3
     ae8:	f8 01       	movw	r30, r16
     aea:	80 a5       	ldd	r24, Z+40	; 0x28
     aec:	91 a5       	ldd	r25, Z+41	; 0x29
     aee:	0e 94 0d 23 	call	0x461a	; 0x461a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
	m_cpSender->WaitMODBUSTransmitter();
     af2:	f8 01       	movw	r30, r16
     af4:	80 a5       	ldd	r24, Z+40	; 0x28
     af6:	91 a5       	ldd	r25, Z+41	; 0x29
     af8:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	//Setup variables
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MIN, (uint16_t*)&m_wSetMin, 2);
     afc:	a8 01       	movw	r20, r16
     afe:	4c 5e       	subi	r20, 0xEC	; 236
     b00:	5f 4f       	sbci	r21, 0xFF	; 255
     b02:	22 e0       	ldi	r18, 0x02	; 2
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	f8 01       	movw	r30, r16
     b0c:	80 a5       	ldd	r24, Z+40	; 0x28
     b0e:	91 a5       	ldd	r25, Z+41	; 0x29
     b10:	0e 94 1c 23 	call	0x4638	; 0x4638 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     b14:	f8 01       	movw	r30, r16
     b16:	80 a5       	ldd	r24, Z+40	; 0x28
     b18:	91 a5       	ldd	r25, Z+41	; 0x29
     b1a:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_SEC, (uint16_t*)&m_wSetSec, 2);
     b1e:	a8 01       	movw	r20, r16
     b20:	4a 5e       	subi	r20, 0xEA	; 234
     b22:	5f 4f       	sbci	r21, 0xFF	; 255
     b24:	22 e0       	ldi	r18, 0x02	; 2
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	61 e0       	ldi	r22, 0x01	; 1
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	f8 01       	movw	r30, r16
     b2e:	80 a5       	ldd	r24, Z+40	; 0x28
     b30:	91 a5       	ldd	r25, Z+41	; 0x29
     b32:	0e 94 1c 23 	call	0x4638	; 0x4638 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     b36:	f8 01       	movw	r30, r16
     b38:	80 a5       	ldd	r24, Z+40	; 0x28
     b3a:	91 a5       	ldd	r25, Z+41	; 0x29
     b3c:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MSC, (uint16_t*)&m_wMillSec, 2);
     b40:	a8 01       	movw	r20, r16
     b42:	4e 5e       	subi	r20, 0xEE	; 238
     b44:	5f 4f       	sbci	r21, 0xFF	; 255
     b46:	22 e0       	ldi	r18, 0x02	; 2
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	62 e0       	ldi	r22, 0x02	; 2
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	f8 01       	movw	r30, r16
     b50:	80 a5       	ldd	r24, Z+40	; 0x28
     b52:	91 a5       	ldd	r25, Z+41	; 0x29
     b54:	0e 94 1c 23 	call	0x4638	; 0x4638 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     b58:	f8 01       	movw	r30, r16
     b5a:	80 a5       	ldd	r24, Z+40	; 0x28
     b5c:	91 a5       	ldd	r25, Z+41	; 0x29
     b5e:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_PWR, (uint16_t*)&m_wPower, 2);
     b62:	a8 01       	movw	r20, r16
     b64:	48 5e       	subi	r20, 0xE8	; 232
     b66:	5f 4f       	sbci	r21, 0xFF	; 255
     b68:	22 e0       	ldi	r18, 0x02	; 2
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	63 e0       	ldi	r22, 0x03	; 3
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	f8 01       	movw	r30, r16
     b72:	80 a5       	ldd	r24, Z+40	; 0x28
     b74:	91 a5       	ldd	r25, Z+41	; 0x29
     b76:	0e 94 1c 23 	call	0x4638	; 0x4638 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     b7a:	f8 01       	movw	r30, r16
     b7c:	80 a5       	ldd	r24, Z+40	; 0x28
     b7e:	91 a5       	ldd	r25, Z+41	; 0x29
     b80:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	uint16_t bar = 0;
	uint16_t bar1 = min(bar, 12);
     b84:	1d 82       	std	Y+5, r1	; 0x05
     b86:	1e 82       	std	Y+6, r1	; 0x06
	uint16_t bar2 = min(max(bar, 11), 24);
     b88:	8b e0       	ldi	r24, 0x0B	; 11
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	8b 83       	std	Y+3, r24	; 0x03
     b8e:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t bar3 = max(bar, 23);
     b90:	87 e1       	ldi	r24, 0x17	; 23
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	89 83       	std	Y+1, r24	; 0x01
     b96:	9a 83       	std	Y+2, r25	; 0x02
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR1, (uint16_t*)&bar1, 2);
     b98:	22 e0       	ldi	r18, 0x02	; 2
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	ae 01       	movw	r20, r28
     b9e:	4b 5f       	subi	r20, 0xFB	; 251
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	64 e0       	ldi	r22, 0x04	; 4
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	f8 01       	movw	r30, r16
     ba8:	80 a5       	ldd	r24, Z+40	; 0x28
     baa:	91 a5       	ldd	r25, Z+41	; 0x29
     bac:	0e 94 1c 23 	call	0x4638	; 0x4638 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     bb0:	f8 01       	movw	r30, r16
     bb2:	80 a5       	ldd	r24, Z+40	; 0x28
     bb4:	91 a5       	ldd	r25, Z+41	; 0x29
     bb6:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR2, (uint16_t*)&bar2, 2);
     bba:	22 e0       	ldi	r18, 0x02	; 2
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	ae 01       	movw	r20, r28
     bc0:	4d 5f       	subi	r20, 0xFD	; 253
     bc2:	5f 4f       	sbci	r21, 0xFF	; 255
     bc4:	65 e0       	ldi	r22, 0x05	; 5
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	f8 01       	movw	r30, r16
     bca:	80 a5       	ldd	r24, Z+40	; 0x28
     bcc:	91 a5       	ldd	r25, Z+41	; 0x29
     bce:	0e 94 1c 23 	call	0x4638	; 0x4638 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     bd2:	f8 01       	movw	r30, r16
     bd4:	80 a5       	ldd	r24, Z+40	; 0x28
     bd6:	91 a5       	ldd	r25, Z+41	; 0x29
     bd8:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR3, (uint16_t*)&bar3, 2);
     bdc:	22 e0       	ldi	r18, 0x02	; 2
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	ae 01       	movw	r20, r28
     be2:	4f 5f       	subi	r20, 0xFF	; 255
     be4:	5f 4f       	sbci	r21, 0xFF	; 255
     be6:	66 e0       	ldi	r22, 0x06	; 6
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	f8 01       	movw	r30, r16
     bec:	80 a5       	ldd	r24, Z+40	; 0x28
     bee:	91 a5       	ldd	r25, Z+41	; 0x29
     bf0:	0e 94 1c 23 	call	0x4638	; 0x4638 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
	m_cpSender->WaitMODBUSTransmitter();
     bf4:	f8 01       	movw	r30, r16
     bf6:	80 a5       	ldd	r24, Z+40	; 0x28
     bf8:	91 a5       	ldd	r25, Z+41	; 0x29
     bfa:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	
	state = APP_SETUP;
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	f8 01       	movw	r30, r16
     c02:	84 87       	std	Z+12, r24	; 0x0c
}
     c04:	28 96       	adiw	r28, 0x08	; 8
     c06:	cd bf       	out	0x3d, r28	; 61
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	08 95       	ret

00000c14 <_GLOBAL__sub_I_timer>:
#include "CLaserControlApp.h"
#include "CSoundPlayer.h"
#include <util/delay.h>


CTimerC timer;
     c14:	84 ef       	ldi	r24, 0xF4	; 244
     c16:	90 e2       	ldi	r25, 0x20	; 32
     c18:	0e 94 b1 0b 	call	0x1762	; 0x1762 <_ZN7CTimerCC1Ev>
     c1c:	08 95       	ret

00000c1e <_GLOBAL__sub_D_timer>:
     c1e:	84 ef       	ldi	r24, 0xF4	; 244
     c20:	90 e2       	ldi	r25, 0x20	; 32
     c22:	0e 94 bd 0b 	call	0x177a	; 0x177a <_ZN7CTimerCD1Ev>
     c26:	08 95       	ret

00000c28 <_ZN16CLaserControlApp10InitializeEP9CMBSender>:
	}
}

// Initialization
void CLaserControlApp::Initialize(CMBSender* sender)
{
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	ec 01       	movw	r28, r24
	// GUI class initialization
	m_cpSender = sender;
     c2e:	68 a7       	std	Y+40, r22	; 0x28
     c30:	79 a7       	std	Y+41, r23	; 0x29
	timer.Initialize(WGM_Normal, CS_DIV256);
     c32:	46 e0       	ldi	r20, 0x06	; 6
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	84 ef       	ldi	r24, 0xF4	; 244
     c38:	90 e2       	ldi	r25, 0x20	; 32
     c3a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>
	timer.SetPeriod(25000); // Every 10 ms
     c3e:	68 ea       	ldi	r22, 0xA8	; 168
     c40:	71 e6       	ldi	r23, 0x61	; 97
     c42:	84 ef       	ldi	r24, 0xF4	; 244
     c44:	90 e2       	ldi	r25, 0x20	; 32
     c46:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_ZN7CTimerC9SetPeriodEj>
	timer.SetOVFCallback(OnTimerStatic, this, TC_OVFINTLVL_LO_gc); // Enable interrupt
     c4a:	21 e0       	ldi	r18, 0x01	; 1
     c4c:	ae 01       	movw	r20, r28
     c4e:	6f e6       	ldi	r22, 0x6F	; 111
     c50:	7a e0       	ldi	r23, 0x0A	; 10
     c52:	84 ef       	ldi	r24, 0xF4	; 244
     c54:	90 e2       	ldi	r25, 0x20	; 32
     c56:	0e 94 45 0b 	call	0x168a	; 0x168a <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>
	
	// Set global variables
	PIC_ID = 0;
     c5a:	1d 86       	std	Y+13, r1	; 0x0d
	m_wSetMin = 1;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	8c 8b       	std	Y+20, r24	; 0x14
     c62:	9d 8b       	std	Y+21, r25	; 0x15
	m_wSetSec = 30;
     c64:	8e e1       	ldi	r24, 0x1E	; 30
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	8e 8b       	std	Y+22, r24	; 0x16
     c6a:	9f 8b       	std	Y+23, r25	; 0x17
	m_wMillSec = 0;
     c6c:	1a 8a       	std	Y+18, r1	; 0x12
     c6e:	1b 8a       	std	Y+19, r1	; 0x13
	m_wMinutes = m_wSetMin;
     c70:	8c 89       	ldd	r24, Y+20	; 0x14
     c72:	9d 89       	ldd	r25, Y+21	; 0x15
     c74:	8e 87       	std	Y+14, r24	; 0x0e
     c76:	9f 87       	std	Y+15, r25	; 0x0f
	m_wSeconds = m_wSetSec;
     c78:	8e 89       	ldd	r24, Y+22	; 0x16
     c7a:	9f 89       	ldd	r25, Y+23	; 0x17
     c7c:	88 8b       	std	Y+16, r24	; 0x10
     c7e:	99 8b       	std	Y+17, r25	; 0x11
	m_wPower = 0;
     c80:	18 8e       	std	Y+24, r1	; 0x18
     c82:	19 8e       	std	Y+25, r1	; 0x19
	m_wDatabasePage = 0;
     c84:	1c a2       	std	Y+36, r1	; 0x24
     c86:	1d a2       	std	Y+37, r1	; 0x25
	m_wDatabaseSelInx = 0;
     c88:	1e a2       	std	Y+38, r1	; 0x26
     c8a:	1f a2       	std	Y+39, r1	; 0x27
}
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	08 95       	ret

00000c92 <_ZN16CLaserControlApp3RunEv>:
	state = APP_SETUP;
}

// Process GUI
void CLaserControlApp::Run()
{
     c92:	0f 93       	push	r16
     c94:	1f 93       	push	r17
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
     c9e:	28 97       	sbiw	r28, 0x08	; 8
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	8c 01       	movw	r16, r24
	// Get PIC ID
	m_cpSender->StartMODBUSRegisterTransaction(REGISTER_ADDR_PICID, 2);
     ca6:	42 e0       	ldi	r20, 0x02	; 2
     ca8:	63 e0       	ldi	r22, 0x03	; 3
     caa:	fc 01       	movw	r30, r24
     cac:	80 a5       	ldd	r24, Z+40	; 0x28
     cae:	91 a5       	ldd	r25, Z+41	; 0x29
     cb0:	0e 94 5b 23 	call	0x46b6	; 0x46b6 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>
	m_cpSender->WaitMODBUSTransmitter();
     cb4:	f8 01       	movw	r30, r16
     cb6:	80 a5       	ldd	r24, Z+40	; 0x28
     cb8:	91 a5       	ldd	r25, Z+41	; 0x29
     cba:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
	m_cpSender->WaitMODBUSListener();
     cbe:	f8 01       	movw	r30, r16
     cc0:	80 a5       	ldd	r24, Z+40	; 0x28
     cc2:	91 a5       	ldd	r25, Z+41	; 0x29
     cc4:	0e 94 f6 22 	call	0x45ec	; 0x45ec <_ZN9CMBSender18WaitMODBUSListenerEv>
     cc8:	ff ef       	ldi	r31, 0xFF	; 255
     cca:	21 ee       	ldi	r18, 0xE1	; 225
     ccc:	84 e0       	ldi	r24, 0x04	; 4
     cce:	f1 50       	subi	r31, 0x01	; 1
     cd0:	20 40       	sbci	r18, 0x00	; 0
     cd2:	80 40       	sbci	r24, 0x00	; 0
     cd4:	e1 f7       	brne	.-8      	; 0xcce <_ZN16CLaserControlApp3RunEv+0x3c>
     cd6:	00 c0       	rjmp	.+0      	; 0xcd8 <_ZN16CLaserControlApp3RunEv+0x46>
     cd8:	00 00       	nop
	
	static uint16_t anim = 5;
	uint16_t pic_id;
	
	static uint16_t bar = 0;
	uint16_t bar1 = 0;
     cda:	1d 82       	std	Y+5, r1	; 0x05
     cdc:	1e 82       	std	Y+6, r1	; 0x06
	uint16_t bar2 = 0;
     cde:	1b 82       	std	Y+3, r1	; 0x03
     ce0:	1c 82       	std	Y+4, r1	; 0x04
	uint16_t bar3 = 0;
     ce2:	19 82       	std	Y+1, r1	; 0x01
     ce4:	1a 82       	std	Y+2, r1	; 0x02
	
	switch (state)
     ce6:	f8 01       	movw	r30, r16
     ce8:	84 85       	ldd	r24, Z+12	; 0x0c
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	81 31       	cpi	r24, 0x11	; 17
     cee:	91 05       	cpc	r25, r1
     cf0:	08 f0       	brcs	.+2      	; 0xcf4 <_ZN16CLaserControlApp3RunEv+0x62>
     cf2:	53 c3       	rjmp	.+1702   	; 0x139a <_ZN16CLaserControlApp3RunEv+0x708>
     cf4:	fc 01       	movw	r30, r24
     cf6:	88 27       	eor	r24, r24
     cf8:	e6 5e       	subi	r30, 0xE6	; 230
     cfa:	fe 4f       	sbci	r31, 0xFE	; 254
     cfc:	8f 4f       	sbci	r24, 0xFF	; 255
     cfe:	0c 94 ba 23 	jmp	0x4774	; 0x4774 <__tablejump2__>
	{
		case APP_LOGO:
			Start(); // Start if logo
     d02:	c8 01       	movw	r24, r16
     d04:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN16CLaserControlApp5StartEv>
		break;
     d08:	61 c3       	rjmp	.+1730   	; 0x13cc <_ZN16CLaserControlApp3RunEv+0x73a>
		case APP_SETUP:
			// Get Variables
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_MIN, 2);
     d0a:	42 e0       	ldi	r20, 0x02	; 2
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	f8 01       	movw	r30, r16
     d12:	80 a5       	ldd	r24, Z+40	; 0x28
     d14:	91 a5       	ldd	r25, Z+41	; 0x29
     d16:	0e 94 61 23 	call	0x46c2	; 0x46c2 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
			m_cpSender->WaitMODBUSTransmitter();
     d1a:	f8 01       	movw	r30, r16
     d1c:	80 a5       	ldd	r24, Z+40	; 0x28
     d1e:	91 a5       	ldd	r25, Z+41	; 0x29
     d20:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSListener();
     d24:	f8 01       	movw	r30, r16
     d26:	80 a5       	ldd	r24, Z+40	; 0x28
     d28:	91 a5       	ldd	r25, Z+41	; 0x29
     d2a:	0e 94 f6 22 	call	0x45ec	; 0x45ec <_ZN9CMBSender18WaitMODBUSListenerEv>
     d2e:	ff ef       	ldi	r31, 0xFF	; 255
     d30:	21 ee       	ldi	r18, 0xE1	; 225
     d32:	84 e0       	ldi	r24, 0x04	; 4
     d34:	f1 50       	subi	r31, 0x01	; 1
     d36:	20 40       	sbci	r18, 0x00	; 0
     d38:	80 40       	sbci	r24, 0x00	; 0
     d3a:	e1 f7       	brne	.-8      	; 0xd34 <_ZN16CLaserControlApp3RunEv+0xa2>
     d3c:	00 c0       	rjmp	.+0      	; 0xd3e <_ZN16CLaserControlApp3RunEv+0xac>
     d3e:	00 00       	nop
			_delay_ms(50);
			
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_SEC, 2);
     d40:	42 e0       	ldi	r20, 0x02	; 2
     d42:	61 e0       	ldi	r22, 0x01	; 1
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	f8 01       	movw	r30, r16
     d48:	80 a5       	ldd	r24, Z+40	; 0x28
     d4a:	91 a5       	ldd	r25, Z+41	; 0x29
     d4c:	0e 94 61 23 	call	0x46c2	; 0x46c2 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
			m_cpSender->WaitMODBUSTransmitter();
     d50:	f8 01       	movw	r30, r16
     d52:	80 a5       	ldd	r24, Z+40	; 0x28
     d54:	91 a5       	ldd	r25, Z+41	; 0x29
     d56:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSListener();
     d5a:	f8 01       	movw	r30, r16
     d5c:	80 a5       	ldd	r24, Z+40	; 0x28
     d5e:	91 a5       	ldd	r25, Z+41	; 0x29
     d60:	0e 94 f6 22 	call	0x45ec	; 0x45ec <_ZN9CMBSender18WaitMODBUSListenerEv>
     d64:	ff ef       	ldi	r31, 0xFF	; 255
     d66:	21 ee       	ldi	r18, 0xE1	; 225
     d68:	84 e0       	ldi	r24, 0x04	; 4
     d6a:	f1 50       	subi	r31, 0x01	; 1
     d6c:	20 40       	sbci	r18, 0x00	; 0
     d6e:	80 40       	sbci	r24, 0x00	; 0
     d70:	e1 f7       	brne	.-8      	; 0xd6a <_ZN16CLaserControlApp3RunEv+0xd8>
     d72:	00 c0       	rjmp	.+0      	; 0xd74 <_ZN16CLaserControlApp3RunEv+0xe2>
     d74:	00 00       	nop
			_delay_ms(50);
			
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_PWR, 2);
     d76:	42 e0       	ldi	r20, 0x02	; 2
     d78:	63 e0       	ldi	r22, 0x03	; 3
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	f8 01       	movw	r30, r16
     d7e:	80 a5       	ldd	r24, Z+40	; 0x28
     d80:	91 a5       	ldd	r25, Z+41	; 0x29
     d82:	0e 94 61 23 	call	0x46c2	; 0x46c2 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
			m_cpSender->WaitMODBUSTransmitter();
     d86:	f8 01       	movw	r30, r16
     d88:	80 a5       	ldd	r24, Z+40	; 0x28
     d8a:	91 a5       	ldd	r25, Z+41	; 0x29
     d8c:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSListener();
     d90:	f8 01       	movw	r30, r16
     d92:	80 a5       	ldd	r24, Z+40	; 0x28
     d94:	91 a5       	ldd	r25, Z+41	; 0x29
     d96:	0e 94 f6 22 	call	0x45ec	; 0x45ec <_ZN9CMBSender18WaitMODBUSListenerEv>
     d9a:	ff ef       	ldi	r31, 0xFF	; 255
     d9c:	21 ee       	ldi	r18, 0xE1	; 225
     d9e:	84 e0       	ldi	r24, 0x04	; 4
     da0:	f1 50       	subi	r31, 0x01	; 1
     da2:	20 40       	sbci	r18, 0x00	; 0
     da4:	80 40       	sbci	r24, 0x00	; 0
     da6:	e1 f7       	brne	.-8      	; 0xda0 <_ZN16CLaserControlApp3RunEv+0x10e>
     da8:	00 c0       	rjmp	.+0      	; 0xdaa <_ZN16CLaserControlApp3RunEv+0x118>
     daa:	00 00       	nop
			_delay_ms(50);
			
			bar = (m_wPower * 34) / 100;
     dac:	f8 01       	movw	r30, r16
     dae:	80 8d       	ldd	r24, Z+24	; 0x18
     db0:	91 8d       	ldd	r25, Z+25	; 0x19
     db2:	42 e2       	ldi	r20, 0x22	; 34
     db4:	48 9f       	mul	r20, r24
     db6:	90 01       	movw	r18, r0
     db8:	49 9f       	mul	r20, r25
     dba:	30 0d       	add	r19, r0
     dbc:	11 24       	eor	r1, r1
     dbe:	36 95       	lsr	r19
     dc0:	27 95       	ror	r18
     dc2:	36 95       	lsr	r19
     dc4:	27 95       	ror	r18
     dc6:	ab e7       	ldi	r26, 0x7B	; 123
     dc8:	b4 e1       	ldi	r27, 0x14	; 20
     dca:	0e 94 c2 23 	call	0x4784	; 0x4784 <__umulhisi3>
     dce:	96 95       	lsr	r25
     dd0:	87 95       	ror	r24
     dd2:	80 93 f2 20 	sts	0x20F2, r24
     dd6:	90 93 f3 20 	sts	0x20F3, r25
	return (data >> 8) | (data << 8);
}

uint16_t min(uint16_t x, uint16_t y)
{
	if (x < y)
     dda:	8c 30       	cpi	r24, 0x0C	; 12
     ddc:	91 05       	cpc	r25, r1
     dde:	18 f0       	brcs	.+6      	; 0xde6 <_ZN16CLaserControlApp3RunEv+0x154>
		return x;
	else
		return y;
     de0:	3c e0       	ldi	r19, 0x0C	; 12
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	02 c0       	rjmp	.+4      	; 0xdea <_ZN16CLaserControlApp3RunEv+0x158>
}

uint16_t min(uint16_t x, uint16_t y)
{
	if (x < y)
		return x;
     de6:	38 2f       	mov	r19, r24
     de8:	29 2f       	mov	r18, r25
			m_cpSender->WaitMODBUSTransmitter();
			m_cpSender->WaitMODBUSListener();
			_delay_ms(50);
			
			bar = (m_wPower * 34) / 100;
			bar1 = min(bar, 12);
     dea:	3d 83       	std	Y+5, r19	; 0x05
     dec:	2e 83       	std	Y+6, r18	; 0x06
     dee:	9c 01       	movw	r18, r24
     df0:	8b 30       	cpi	r24, 0x0B	; 11
     df2:	91 05       	cpc	r25, r1
     df4:	10 f4       	brcc	.+4      	; 0xdfa <_ZN16CLaserControlApp3RunEv+0x168>
     df6:	2b e0       	ldi	r18, 0x0B	; 11
     df8:	30 e0       	ldi	r19, 0x00	; 0
	return (data >> 8) | (data << 8);
}

uint16_t min(uint16_t x, uint16_t y)
{
	if (x < y)
     dfa:	28 31       	cpi	r18, 0x18	; 24
     dfc:	31 05       	cpc	r19, r1
     dfe:	10 f0       	brcs	.+4      	; 0xe04 <_ZN16CLaserControlApp3RunEv+0x172>
		return x;
	else
		return y;
     e00:	28 e1       	ldi	r18, 0x18	; 24
     e02:	30 e0       	ldi	r19, 0x00	; 0
			m_cpSender->WaitMODBUSListener();
			_delay_ms(50);
			
			bar = (m_wPower * 34) / 100;
			bar1 = min(bar, 12);
			bar2 = min(max(bar, 11), 24);
     e04:	2b 83       	std	Y+3, r18	; 0x03
     e06:	3c 83       	std	Y+4, r19	; 0x04
     e08:	87 31       	cpi	r24, 0x17	; 23
     e0a:	91 05       	cpc	r25, r1
     e0c:	10 f4       	brcc	.+4      	; 0xe12 <_ZN16CLaserControlApp3RunEv+0x180>
     e0e:	87 e1       	ldi	r24, 0x17	; 23
     e10:	90 e0       	ldi	r25, 0x00	; 0
	return (data >> 8) | (data << 8);
}

uint16_t min(uint16_t x, uint16_t y)
{
	if (x < y)
     e12:	82 32       	cpi	r24, 0x22	; 34
     e14:	91 05       	cpc	r25, r1
     e16:	10 f0       	brcs	.+4      	; 0xe1c <_ZN16CLaserControlApp3RunEv+0x18a>
		return x;
	else
		return y;
     e18:	82 e2       	ldi	r24, 0x22	; 34
     e1a:	90 e0       	ldi	r25, 0x00	; 0
			_delay_ms(50);
			
			bar = (m_wPower * 34) / 100;
			bar1 = min(bar, 12);
			bar2 = min(max(bar, 11), 24);
			bar3 = min(max(bar, 23), 34);
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	9a 83       	std	Y+2, r25	; 0x02
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR1, (uint16_t*)&bar1, 2);
     e20:	22 e0       	ldi	r18, 0x02	; 2
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	ae 01       	movw	r20, r28
     e26:	4b 5f       	subi	r20, 0xFB	; 251
     e28:	5f 4f       	sbci	r21, 0xFF	; 255
     e2a:	64 e0       	ldi	r22, 0x04	; 4
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	f8 01       	movw	r30, r16
     e30:	80 a5       	ldd	r24, Z+40	; 0x28
     e32:	91 a5       	ldd	r25, Z+41	; 0x29
     e34:	0e 94 1c 23 	call	0x4638	; 0x4638 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     e38:	f8 01       	movw	r30, r16
     e3a:	80 a5       	ldd	r24, Z+40	; 0x28
     e3c:	91 a5       	ldd	r25, Z+41	; 0x29
     e3e:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR2, (uint16_t*)&bar2, 2);
     e42:	22 e0       	ldi	r18, 0x02	; 2
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	ae 01       	movw	r20, r28
     e48:	4d 5f       	subi	r20, 0xFD	; 253
     e4a:	5f 4f       	sbci	r21, 0xFF	; 255
     e4c:	65 e0       	ldi	r22, 0x05	; 5
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	f8 01       	movw	r30, r16
     e52:	80 a5       	ldd	r24, Z+40	; 0x28
     e54:	91 a5       	ldd	r25, Z+41	; 0x29
     e56:	0e 94 1c 23 	call	0x4638	; 0x4638 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     e5a:	f8 01       	movw	r30, r16
     e5c:	80 a5       	ldd	r24, Z+40	; 0x28
     e5e:	91 a5       	ldd	r25, Z+41	; 0x29
     e60:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR3, (uint16_t*)&bar3, 2);
     e64:	22 e0       	ldi	r18, 0x02	; 2
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	ae 01       	movw	r20, r28
     e6a:	4f 5f       	subi	r20, 0xFF	; 255
     e6c:	5f 4f       	sbci	r21, 0xFF	; 255
     e6e:	66 e0       	ldi	r22, 0x06	; 6
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	f8 01       	movw	r30, r16
     e74:	80 a5       	ldd	r24, Z+40	; 0x28
     e76:	91 a5       	ldd	r25, Z+41	; 0x29
     e78:	0e 94 1c 23 	call	0x4638	; 0x4638 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     e7c:	f8 01       	movw	r30, r16
     e7e:	80 a5       	ldd	r24, Z+40	; 0x28
     e80:	91 a5       	ldd	r25, Z+41	; 0x29
     e82:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		break;
     e86:	a2 c2       	rjmp	.+1348   	; 0x13cc <_ZN16CLaserControlApp3RunEv+0x73a>
		case APP_SETUPtoRUN_ANIM:
			// Play animation
			anim++;
     e88:	80 91 47 20 	lds	r24, 0x2047
     e8c:	90 91 48 20 	lds	r25, 0x2048
     e90:	01 96       	adiw	r24, 0x01	; 1
			if (anim > 9) {
     e92:	8a 30       	cpi	r24, 0x0A	; 10
     e94:	91 05       	cpc	r25, r1
     e96:	28 f4       	brcc	.+10     	; 0xea2 <_ZN16CLaserControlApp3RunEv+0x210>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR3, (uint16_t*)&bar3, 2);
			m_cpSender->WaitMODBUSTransmitter();
		break;
		case APP_SETUPtoRUN_ANIM:
			// Play animation
			anim++;
     e98:	80 93 47 20 	sts	0x2047, r24
     e9c:	90 93 48 20 	sts	0x2048, r25
     ea0:	09 c0       	rjmp	.+18     	; 0xeb4 <_ZN16CLaserControlApp3RunEv+0x222>
			if (anim > 9) {
				anim = 9;
     ea2:	89 e0       	ldi	r24, 0x09	; 9
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	80 93 47 20 	sts	0x2047, r24
     eaa:	90 93 48 20 	sts	0x2048, r25
				state = APP_RUN;
     eae:	83 e0       	ldi	r24, 0x03	; 3
     eb0:	f8 01       	movw	r30, r16
     eb2:	84 87       	std	Z+12, r24	; 0x0c
extern CSoundPlayer player;
extern CDGUSDatabase Database;

uint16_t swap(uint16_t data)
{
	return (data >> 8) | (data << 8);
     eb4:	80 91 47 20 	lds	r24, 0x2047
     eb8:	90 91 48 20 	lds	r25, 0x2048
     ebc:	98 27       	eor	r25, r24
     ebe:	89 27       	eor	r24, r25
     ec0:	98 27       	eor	r25, r24
			anim++;
			if (anim > 9) {
				anim = 9;
				state = APP_RUN;
			}
			pic_id = swap(anim);
     ec2:	8f 83       	std	Y+7, r24	; 0x07
     ec4:	98 87       	std	Y+8, r25	; 0x08
			
			// Timer setup to timer run animation
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     ec6:	22 e0       	ldi	r18, 0x02	; 2
     ec8:	ae 01       	movw	r20, r28
     eca:	49 5f       	subi	r20, 0xF9	; 249
     ecc:	5f 4f       	sbci	r21, 0xFF	; 255
     ece:	63 e0       	ldi	r22, 0x03	; 3
     ed0:	f8 01       	movw	r30, r16
     ed2:	80 a5       	ldd	r24, Z+40	; 0x28
     ed4:	91 a5       	ldd	r25, Z+41	; 0x29
     ed6:	0e 94 0d 23 	call	0x461a	; 0x461a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     eda:	f8 01       	movw	r30, r16
     edc:	80 a5       	ldd	r24, Z+40	; 0x28
     ede:	91 a5       	ldd	r25, Z+41	; 0x29
     ee0:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		break;
     ee4:	73 c2       	rjmp	.+1254   	; 0x13cc <_ZN16CLaserControlApp3RunEv+0x73a>
		case APP_RUN:
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MIN, (uint16_t*)&m_wMinutes, 2);
     ee6:	a8 01       	movw	r20, r16
     ee8:	42 5f       	subi	r20, 0xF2	; 242
     eea:	5f 4f       	sbci	r21, 0xFF	; 255
     eec:	22 e0       	ldi	r18, 0x02	; 2
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	f8 01       	movw	r30, r16
     ef6:	80 a5       	ldd	r24, Z+40	; 0x28
     ef8:	91 a5       	ldd	r25, Z+41	; 0x29
     efa:	0e 94 1c 23 	call	0x4638	; 0x4638 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     efe:	f8 01       	movw	r30, r16
     f00:	80 a5       	ldd	r24, Z+40	; 0x28
     f02:	91 a5       	ldd	r25, Z+41	; 0x29
     f04:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_SEC, (uint16_t*)&m_wSeconds, 2);
     f08:	a8 01       	movw	r20, r16
     f0a:	40 5f       	subi	r20, 0xF0	; 240
     f0c:	5f 4f       	sbci	r21, 0xFF	; 255
     f0e:	22 e0       	ldi	r18, 0x02	; 2
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	f8 01       	movw	r30, r16
     f18:	80 a5       	ldd	r24, Z+40	; 0x28
     f1a:	91 a5       	ldd	r25, Z+41	; 0x29
     f1c:	0e 94 1c 23 	call	0x4638	; 0x4638 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     f20:	f8 01       	movw	r30, r16
     f22:	80 a5       	ldd	r24, Z+40	; 0x28
     f24:	91 a5       	ldd	r25, Z+41	; 0x29
     f26:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MSC, (uint16_t*)&m_wMillSec, 2);
     f2a:	a8 01       	movw	r20, r16
     f2c:	4e 5e       	subi	r20, 0xEE	; 238
     f2e:	5f 4f       	sbci	r21, 0xFF	; 255
     f30:	22 e0       	ldi	r18, 0x02	; 2
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	62 e0       	ldi	r22, 0x02	; 2
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	f8 01       	movw	r30, r16
     f3a:	80 a5       	ldd	r24, Z+40	; 0x28
     f3c:	91 a5       	ldd	r25, Z+41	; 0x29
     f3e:	0e 94 1c 23 	call	0x4638	; 0x4638 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
     f42:	f8 01       	movw	r30, r16
     f44:	80 a5       	ldd	r24, Z+40	; 0x28
     f46:	91 a5       	ldd	r25, Z+41	; 0x29
     f48:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSTransmitter();
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR2, (uint16_t*)&bar2, 2);
			m_cpSender->WaitMODBUSTransmitter();
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_BAR3, (uint16_t*)&bar3, 2);
			m_cpSender->WaitMODBUSTransmitter();*/
		break;
     f4c:	3f c2       	rjmp	.+1150   	; 0x13cc <_ZN16CLaserControlApp3RunEv+0x73a>
		case APP_OnTimerStart:
			// Set Run state
			anim = 5;
     f4e:	85 e0       	ldi	r24, 0x05	; 5
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	80 93 47 20 	sts	0x2047, r24
     f56:	90 93 48 20 	sts	0x2048, r25
			pic_id = swap(PICID_TIMER);
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	99 e1       	ldi	r25, 0x19	; 25
     f5e:	8f 83       	std	Y+7, r24	; 0x07
     f60:	98 87       	std	Y+8, r25	; 0x08
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     f62:	22 e0       	ldi	r18, 0x02	; 2
     f64:	ae 01       	movw	r20, r28
     f66:	49 5f       	subi	r20, 0xF9	; 249
     f68:	5f 4f       	sbci	r21, 0xFF	; 255
     f6a:	63 e0       	ldi	r22, 0x03	; 3
     f6c:	f8 01       	movw	r30, r16
     f6e:	80 a5       	ldd	r24, Z+40	; 0x28
     f70:	91 a5       	ldd	r25, Z+41	; 0x29
     f72:	0e 94 0d 23 	call	0x461a	; 0x461a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     f76:	f8 01       	movw	r30, r16
     f78:	80 a5       	ldd	r24, Z+40	; 0x28
     f7a:	91 a5       	ldd	r25, Z+41	; 0x29
     f7c:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			m_wMinutes = m_wSetMin;
     f80:	f8 01       	movw	r30, r16
     f82:	84 89       	ldd	r24, Z+20	; 0x14
     f84:	95 89       	ldd	r25, Z+21	; 0x15
     f86:	86 87       	std	Z+14, r24	; 0x0e
     f88:	97 87       	std	Z+15, r25	; 0x0f
			m_wSeconds = m_wSetSec;
     f8a:	86 89       	ldd	r24, Z+22	; 0x16
     f8c:	97 89       	ldd	r25, Z+23	; 0x17
     f8e:	80 8b       	std	Z+16, r24	; 0x10
     f90:	91 8b       	std	Z+17, r25	; 0x11
			m_wMillSec = 0;
     f92:	12 8a       	std	Z+18, r1	; 0x12
     f94:	13 8a       	std	Z+19, r1	; 0x13
			
			// Start timer
			timer.Start(25000);
     f96:	68 ea       	ldi	r22, 0xA8	; 168
     f98:	71 e6       	ldi	r23, 0x61	; 97
     f9a:	84 ef       	ldi	r24, 0xF4	; 244
     f9c:	90 e2       	ldi	r25, 0x20	; 32
     f9e:	0e 94 09 0b 	call	0x1612	; 0x1612 <_ZN7CTimerC5StartEj>
			laserBoard.Relay1On();
     fa2:	88 e1       	ldi	r24, 0x18	; 24
     fa4:	93 e2       	ldi	r25, 0x23	; 35
     fa6:	0e 94 20 04 	call	0x840	; 0x840 <_ZN11CLaserBoard8Relay1OnEv>
			
			state = APP_RUN;
     faa:	83 e0       	ldi	r24, 0x03	; 3
     fac:	f8 01       	movw	r30, r16
     fae:	84 87       	std	Z+12, r24	; 0x0c
		break;
     fb0:	0d c2       	rjmp	.+1050   	; 0x13cc <_ZN16CLaserControlApp3RunEv+0x73a>
		case APP_OnTimerResume:
			// Set Run state
			//m_wPower = 0;
			anim = 5;
     fb2:	85 e0       	ldi	r24, 0x05	; 5
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	80 93 47 20 	sts	0x2047, r24
     fba:	90 93 48 20 	sts	0x2048, r25
			pic_id = swap(PICID_TIMER);
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	99 e1       	ldi	r25, 0x19	; 25
     fc2:	8f 83       	std	Y+7, r24	; 0x07
     fc4:	98 87       	std	Y+8, r25	; 0x08
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
     fc6:	22 e0       	ldi	r18, 0x02	; 2
     fc8:	ae 01       	movw	r20, r28
     fca:	49 5f       	subi	r20, 0xF9	; 249
     fcc:	5f 4f       	sbci	r21, 0xFF	; 255
     fce:	63 e0       	ldi	r22, 0x03	; 3
     fd0:	f8 01       	movw	r30, r16
     fd2:	80 a5       	ldd	r24, Z+40	; 0x28
     fd4:	91 a5       	ldd	r25, Z+41	; 0x29
     fd6:	0e 94 0d 23 	call	0x461a	; 0x461a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
     fda:	f8 01       	movw	r30, r16
     fdc:	80 a5       	ldd	r24, Z+40	; 0x28
     fde:	91 a5       	ldd	r25, Z+41	; 0x29
     fe0:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			// Start timer
			timer.Start(25000);
     fe4:	68 ea       	ldi	r22, 0xA8	; 168
     fe6:	71 e6       	ldi	r23, 0x61	; 97
     fe8:	84 ef       	ldi	r24, 0xF4	; 244
     fea:	90 e2       	ldi	r25, 0x20	; 32
     fec:	0e 94 09 0b 	call	0x1612	; 0x1612 <_ZN7CTimerC5StartEj>
			laserBoard.Relay1On();
     ff0:	88 e1       	ldi	r24, 0x18	; 24
     ff2:	93 e2       	ldi	r25, 0x23	; 35
     ff4:	0e 94 20 04 	call	0x840	; 0x840 <_ZN11CLaserBoard8Relay1OnEv>
			
			state = APP_RUN;
     ff8:	83 e0       	ldi	r24, 0x03	; 3
     ffa:	f8 01       	movw	r30, r16
     ffc:	84 87       	std	Z+12, r24	; 0x0c
		break;
     ffe:	e6 c1       	rjmp	.+972    	; 0x13cc <_ZN16CLaserControlApp3RunEv+0x73a>
		case APP_OnTimerStop:
			// Set Stop (return to Setup) state
			pic_id = swap(PICID_SETUP);
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	97 e1       	ldi	r25, 0x17	; 23
    1004:	8f 83       	std	Y+7, r24	; 0x07
    1006:	98 87       	std	Y+8, r25	; 0x08
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    1008:	22 e0       	ldi	r18, 0x02	; 2
    100a:	ae 01       	movw	r20, r28
    100c:	49 5f       	subi	r20, 0xF9	; 249
    100e:	5f 4f       	sbci	r21, 0xFF	; 255
    1010:	63 e0       	ldi	r22, 0x03	; 3
    1012:	f8 01       	movw	r30, r16
    1014:	80 a5       	ldd	r24, Z+40	; 0x28
    1016:	91 a5       	ldd	r25, Z+41	; 0x29
    1018:	0e 94 0d 23 	call	0x461a	; 0x461a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
    101c:	f8 01       	movw	r30, r16
    101e:	80 a5       	ldd	r24, Z+40	; 0x28
    1020:	91 a5       	ldd	r25, Z+41	; 0x29
    1022:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			// Stop timer
			timer.Stop();
    1026:	84 ef       	ldi	r24, 0xF4	; 244
    1028:	90 e2       	ldi	r25, 0x20	; 32
    102a:	0e 94 16 0b 	call	0x162c	; 0x162c <_ZN7CTimerC4StopEv>
			laserBoard.Relay1Off();
    102e:	88 e1       	ldi	r24, 0x18	; 24
    1030:	93 e2       	ldi	r25, 0x23	; 35
    1032:	0e 94 28 04 	call	0x850	; 0x850 <_ZN11CLaserBoard9Relay1OffEv>
			
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MIN, (uint16_t*)&m_wSetMin, 2);
    1036:	a8 01       	movw	r20, r16
    1038:	4c 5e       	subi	r20, 0xEC	; 236
    103a:	5f 4f       	sbci	r21, 0xFF	; 255
    103c:	22 e0       	ldi	r18, 0x02	; 2
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	60 e0       	ldi	r22, 0x00	; 0
    1042:	70 e0       	ldi	r23, 0x00	; 0
    1044:	f8 01       	movw	r30, r16
    1046:	80 a5       	ldd	r24, Z+40	; 0x28
    1048:	91 a5       	ldd	r25, Z+41	; 0x29
    104a:	0e 94 1c 23 	call	0x4638	; 0x4638 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
    104e:	f8 01       	movw	r30, r16
    1050:	80 a5       	ldd	r24, Z+40	; 0x28
    1052:	91 a5       	ldd	r25, Z+41	; 0x29
    1054:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_SEC, (uint16_t*)&m_wSetSec, 2);
    1058:	a8 01       	movw	r20, r16
    105a:	4a 5e       	subi	r20, 0xEA	; 234
    105c:	5f 4f       	sbci	r21, 0xFF	; 255
    105e:	22 e0       	ldi	r18, 0x02	; 2
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	61 e0       	ldi	r22, 0x01	; 1
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	f8 01       	movw	r30, r16
    1068:	80 a5       	ldd	r24, Z+40	; 0x28
    106a:	91 a5       	ldd	r25, Z+41	; 0x29
    106c:	0e 94 1c 23 	call	0x4638	; 0x4638 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
    1070:	f8 01       	movw	r30, r16
    1072:	80 a5       	ldd	r24, Z+40	; 0x28
    1074:	91 a5       	ldd	r25, Z+41	; 0x29
    1076:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_MSC, (uint16_t*)&m_wMillSec, 2);
    107a:	a8 01       	movw	r20, r16
    107c:	4e 5e       	subi	r20, 0xEE	; 238
    107e:	5f 4f       	sbci	r21, 0xFF	; 255
    1080:	22 e0       	ldi	r18, 0x02	; 2
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	62 e0       	ldi	r22, 0x02	; 2
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	f8 01       	movw	r30, r16
    108a:	80 a5       	ldd	r24, Z+40	; 0x28
    108c:	91 a5       	ldd	r25, Z+41	; 0x29
    108e:	0e 94 1c 23 	call	0x4638	; 0x4638 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
    1092:	f8 01       	movw	r30, r16
    1094:	80 a5       	ldd	r24, Z+40	; 0x28
    1096:	91 a5       	ldd	r25, Z+41	; 0x29
    1098:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			m_wMinutes = m_wSetMin;
    109c:	f8 01       	movw	r30, r16
    109e:	84 89       	ldd	r24, Z+20	; 0x14
    10a0:	95 89       	ldd	r25, Z+21	; 0x15
    10a2:	86 87       	std	Z+14, r24	; 0x0e
    10a4:	97 87       	std	Z+15, r25	; 0x0f
			m_wSeconds = m_wSetSec;
    10a6:	86 89       	ldd	r24, Z+22	; 0x16
    10a8:	97 89       	ldd	r25, Z+23	; 0x17
    10aa:	80 8b       	std	Z+16, r24	; 0x10
    10ac:	91 8b       	std	Z+17, r25	; 0x11
			m_wMillSec = 0;
    10ae:	12 8a       	std	Z+18, r1	; 0x12
    10b0:	13 8a       	std	Z+19, r1	; 0x13
			
			state = APP_SETUP;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	84 87       	std	Z+12, r24	; 0x0c
		break;
    10b6:	8a c1       	rjmp	.+788    	; 0x13cc <_ZN16CLaserControlApp3RunEv+0x73a>
		case APP_OnTimerPause:
			// Pause (return to Run) state
			pic_id = swap(PICID_TIMERPAUSED);
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	9a e1       	ldi	r25, 0x1A	; 26
    10bc:	8f 83       	std	Y+7, r24	; 0x07
    10be:	98 87       	std	Y+8, r25	; 0x08
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    10c0:	22 e0       	ldi	r18, 0x02	; 2
    10c2:	ae 01       	movw	r20, r28
    10c4:	49 5f       	subi	r20, 0xF9	; 249
    10c6:	5f 4f       	sbci	r21, 0xFF	; 255
    10c8:	63 e0       	ldi	r22, 0x03	; 3
    10ca:	f8 01       	movw	r30, r16
    10cc:	80 a5       	ldd	r24, Z+40	; 0x28
    10ce:	91 a5       	ldd	r25, Z+41	; 0x29
    10d0:	0e 94 0d 23 	call	0x461a	; 0x461a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
    10d4:	f8 01       	movw	r30, r16
    10d6:	80 a5       	ldd	r24, Z+40	; 0x28
    10d8:	91 a5       	ldd	r25, Z+41	; 0x29
    10da:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			timer.Stop();
    10de:	84 ef       	ldi	r24, 0xF4	; 244
    10e0:	90 e2       	ldi	r25, 0x20	; 32
    10e2:	0e 94 16 0b 	call	0x162c	; 0x162c <_ZN7CTimerC4StopEv>
			
			laserBoard.Relay1Off();
    10e6:	88 e1       	ldi	r24, 0x18	; 24
    10e8:	93 e2       	ldi	r25, 0x23	; 35
    10ea:	0e 94 28 04 	call	0x850	; 0x850 <_ZN11CLaserBoard9Relay1OffEv>
			
			state = APP_RUN;
    10ee:	83 e0       	ldi	r24, 0x03	; 3
    10f0:	f8 01       	movw	r30, r16
    10f2:	84 87       	std	Z+12, r24	; 0x0c
		break;
    10f4:	6b c1       	rjmp	.+726    	; 0x13cc <_ZN16CLaserControlApp3RunEv+0x73a>
		case APP_OnTimerRestart:
			// Restart (return to Run) state
			pic_id = swap(PICID_TIMER);
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	99 e1       	ldi	r25, 0x19	; 25
    10fa:	8f 83       	std	Y+7, r24	; 0x07
    10fc:	98 87       	std	Y+8, r25	; 0x08
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    10fe:	22 e0       	ldi	r18, 0x02	; 2
    1100:	ae 01       	movw	r20, r28
    1102:	49 5f       	subi	r20, 0xF9	; 249
    1104:	5f 4f       	sbci	r21, 0xFF	; 255
    1106:	63 e0       	ldi	r22, 0x03	; 3
    1108:	f8 01       	movw	r30, r16
    110a:	80 a5       	ldd	r24, Z+40	; 0x28
    110c:	91 a5       	ldd	r25, Z+41	; 0x29
    110e:	0e 94 0d 23 	call	0x461a	; 0x461a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
    1112:	f8 01       	movw	r30, r16
    1114:	80 a5       	ldd	r24, Z+40	; 0x28
    1116:	91 a5       	ldd	r25, Z+41	; 0x29
    1118:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			// Reset
			m_wMinutes = m_wSetMin;
    111c:	f8 01       	movw	r30, r16
    111e:	84 89       	ldd	r24, Z+20	; 0x14
    1120:	95 89       	ldd	r25, Z+21	; 0x15
    1122:	86 87       	std	Z+14, r24	; 0x0e
    1124:	97 87       	std	Z+15, r25	; 0x0f
			m_wSeconds = m_wSetSec;
    1126:	86 89       	ldd	r24, Z+22	; 0x16
    1128:	97 89       	ldd	r25, Z+23	; 0x17
    112a:	80 8b       	std	Z+16, r24	; 0x10
    112c:	91 8b       	std	Z+17, r25	; 0x11
			m_wMillSec = 0;
    112e:	12 8a       	std	Z+18, r1	; 0x12
    1130:	13 8a       	std	Z+19, r1	; 0x13
			
			timer.Stop();
    1132:	84 ef       	ldi	r24, 0xF4	; 244
    1134:	90 e2       	ldi	r25, 0x20	; 32
    1136:	0e 94 16 0b 	call	0x162c	; 0x162c <_ZN7CTimerC4StopEv>
			
			player.SoundStart(1000, 50, 1);
    113a:	21 e0       	ldi	r18, 0x01	; 1
    113c:	42 e3       	ldi	r20, 0x32	; 50
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	68 ee       	ldi	r22, 0xE8	; 232
    1142:	73 e0       	ldi	r23, 0x03	; 3
    1144:	87 e1       	ldi	r24, 0x17	; 23
    1146:	93 e2       	ldi	r25, 0x23	; 35
    1148:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
    114c:	87 e1       	ldi	r24, 0x17	; 23
    114e:	93 e2       	ldi	r25, 0x23	; 35
    1150:	0e 94 c5 0a 	call	0x158a	; 0x158a <_ZN12CSoundPlayer9SoundStopEv>
    1154:	ff ef       	ldi	r31, 0xFF	; 255
    1156:	21 ee       	ldi	r18, 0xE1	; 225
    1158:	84 e0       	ldi	r24, 0x04	; 4
    115a:	f1 50       	subi	r31, 0x01	; 1
    115c:	20 40       	sbci	r18, 0x00	; 0
    115e:	80 40       	sbci	r24, 0x00	; 0
    1160:	e1 f7       	brne	.-8      	; 0x115a <_ZN16CLaserControlApp3RunEv+0x4c8>
    1162:	00 c0       	rjmp	.+0      	; 0x1164 <_ZN16CLaserControlApp3RunEv+0x4d2>
    1164:	00 00       	nop
			_delay_ms(50);
			player.SoundStart(1000, 50, 1);
    1166:	21 e0       	ldi	r18, 0x01	; 1
    1168:	42 e3       	ldi	r20, 0x32	; 50
    116a:	50 e0       	ldi	r21, 0x00	; 0
    116c:	68 ee       	ldi	r22, 0xE8	; 232
    116e:	73 e0       	ldi	r23, 0x03	; 3
    1170:	87 e1       	ldi	r24, 0x17	; 23
    1172:	93 e2       	ldi	r25, 0x23	; 35
    1174:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
    1178:	87 e1       	ldi	r24, 0x17	; 23
    117a:	93 e2       	ldi	r25, 0x23	; 35
    117c:	0e 94 c5 0a 	call	0x158a	; 0x158a <_ZN12CSoundPlayer9SoundStopEv>
    1180:	9f ef       	ldi	r25, 0xFF	; 255
    1182:	e1 ee       	ldi	r30, 0xE1	; 225
    1184:	f4 e0       	ldi	r31, 0x04	; 4
    1186:	91 50       	subi	r25, 0x01	; 1
    1188:	e0 40       	sbci	r30, 0x00	; 0
    118a:	f0 40       	sbci	r31, 0x00	; 0
    118c:	e1 f7       	brne	.-8      	; 0x1186 <_ZN16CLaserControlApp3RunEv+0x4f4>
    118e:	00 c0       	rjmp	.+0      	; 0x1190 <_ZN16CLaserControlApp3RunEv+0x4fe>
    1190:	00 00       	nop
			_delay_ms(50);
			
			// Stop timer
			timer.Start(25000);
    1192:	68 ea       	ldi	r22, 0xA8	; 168
    1194:	71 e6       	ldi	r23, 0x61	; 97
    1196:	84 ef       	ldi	r24, 0xF4	; 244
    1198:	90 e2       	ldi	r25, 0x20	; 32
    119a:	0e 94 09 0b 	call	0x1612	; 0x1612 <_ZN7CTimerC5StartEj>
			laserBoard.Relay1On();
    119e:	88 e1       	ldi	r24, 0x18	; 24
    11a0:	93 e2       	ldi	r25, 0x23	; 35
    11a2:	0e 94 20 04 	call	0x840	; 0x840 <_ZN11CLaserBoard8Relay1OnEv>
			
			state = APP_RUN;
    11a6:	83 e0       	ldi	r24, 0x03	; 3
    11a8:	f8 01       	movw	r30, r16
    11aa:	84 87       	std	Z+12, r24	; 0x0c
		break;
    11ac:	0f c1       	rjmp	.+542    	; 0x13cc <_ZN16CLaserControlApp3RunEv+0x73a>
		case APP_OnHL:
			// Turn HL (return to Setup) state
			pic_id = swap(PICID_SETUP);
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	97 e1       	ldi	r25, 0x17	; 23
    11b2:	8f 83       	std	Y+7, r24	; 0x07
    11b4:	98 87       	std	Y+8, r25	; 0x08
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    11b6:	22 e0       	ldi	r18, 0x02	; 2
    11b8:	ae 01       	movw	r20, r28
    11ba:	49 5f       	subi	r20, 0xF9	; 249
    11bc:	5f 4f       	sbci	r21, 0xFF	; 255
    11be:	63 e0       	ldi	r22, 0x03	; 3
    11c0:	f8 01       	movw	r30, r16
    11c2:	80 a5       	ldd	r24, Z+40	; 0x28
    11c4:	91 a5       	ldd	r25, Z+41	; 0x29
    11c6:	0e 94 0d 23 	call	0x461a	; 0x461a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
    11ca:	f8 01       	movw	r30, r16
    11cc:	80 a5       	ldd	r24, Z+40	; 0x28
    11ce:	91 a5       	ldd	r25, Z+41	; 0x29
    11d0:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			
			static bool hl = true;
			
			if (hl)
    11d4:	80 91 46 20 	lds	r24, 0x2046
    11d8:	88 23       	and	r24, r24
    11da:	29 f0       	breq	.+10     	; 0x11e6 <_ZN16CLaserControlApp3RunEv+0x554>
				laserBoard.Relay2On();
    11dc:	88 e1       	ldi	r24, 0x18	; 24
    11de:	93 e2       	ldi	r25, 0x23	; 35
    11e0:	0e 94 24 04 	call	0x848	; 0x848 <_ZN11CLaserBoard8Relay2OnEv>
    11e4:	04 c0       	rjmp	.+8      	; 0x11ee <_ZN16CLaserControlApp3RunEv+0x55c>
			else
				laserBoard.Relay2Off();
    11e6:	88 e1       	ldi	r24, 0x18	; 24
    11e8:	93 e2       	ldi	r25, 0x23	; 35
    11ea:	0e 94 2c 04 	call	0x858	; 0x858 <_ZN11CLaserBoard9Relay2OffEv>
				
			hl = !hl;
    11ee:	80 91 46 20 	lds	r24, 0x2046
    11f2:	91 e0       	ldi	r25, 0x01	; 1
    11f4:	89 27       	eor	r24, r25
    11f6:	80 93 46 20 	sts	0x2046, r24
			
			state = APP_SETUP;
    11fa:	f8 01       	movw	r30, r16
    11fc:	94 87       	std	Z+12, r25	; 0x0c
		break;
    11fe:	e6 c0       	rjmp	.+460    	; 0x13cc <_ZN16CLaserControlApp3RunEv+0x73a>
		case APP_OnSaveSetup :
			pic_id = swap(PICID_SETUP);
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	97 e1       	ldi	r25, 0x17	; 23
    1204:	8f 83       	std	Y+7, r24	; 0x07
    1206:	98 87       	std	Y+8, r25	; 0x08
			m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    1208:	22 e0       	ldi	r18, 0x02	; 2
    120a:	ae 01       	movw	r20, r28
    120c:	49 5f       	subi	r20, 0xF9	; 249
    120e:	5f 4f       	sbci	r21, 0xFF	; 255
    1210:	63 e0       	ldi	r22, 0x03	; 3
    1212:	f8 01       	movw	r30, r16
    1214:	80 a5       	ldd	r24, Z+40	; 0x28
    1216:	91 a5       	ldd	r25, Z+41	; 0x29
    1218:	0e 94 0d 23 	call	0x461a	; 0x461a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
			m_cpSender->WaitMODBUSTransmitter();
    121c:	f8 01       	movw	r30, r16
    121e:	80 a5       	ldd	r24, Z+40	; 0x28
    1220:	91 a5       	ldd	r25, Z+41	; 0x29
    1222:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		break;
    1226:	d2 c0       	rjmp	.+420    	; 0x13cc <_ZN16CLaserControlApp3RunEv+0x73a>
		
		case APP_SHOWDATABASE:
			//Database.UnMap();
			
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_DATAPAGE, 2);
    1228:	42 e0       	ldi	r20, 0x02	; 2
    122a:	67 e0       	ldi	r22, 0x07	; 7
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	f8 01       	movw	r30, r16
    1230:	80 a5       	ldd	r24, Z+40	; 0x28
    1232:	91 a5       	ldd	r25, Z+41	; 0x29
    1234:	0e 94 61 23 	call	0x46c2	; 0x46c2 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
			m_cpSender->WaitMODBUSTransmitter();
    1238:	f8 01       	movw	r30, r16
    123a:	80 a5       	ldd	r24, Z+40	; 0x28
    123c:	91 a5       	ldd	r25, Z+41	; 0x29
    123e:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSListener();
    1242:	f8 01       	movw	r30, r16
    1244:	80 a5       	ldd	r24, Z+40	; 0x28
    1246:	91 a5       	ldd	r25, Z+41	; 0x29
    1248:	0e 94 f6 22 	call	0x45ec	; 0x45ec <_ZN9CMBSender18WaitMODBUSListenerEv>
    124c:	ff ef       	ldi	r31, 0xFF	; 255
    124e:	21 ee       	ldi	r18, 0xE1	; 225
    1250:	84 e0       	ldi	r24, 0x04	; 4
    1252:	f1 50       	subi	r31, 0x01	; 1
    1254:	20 40       	sbci	r18, 0x00	; 0
    1256:	80 40       	sbci	r24, 0x00	; 0
    1258:	e1 f7       	brne	.-8      	; 0x1252 <_ZN16CLaserControlApp3RunEv+0x5c0>
    125a:	00 c0       	rjmp	.+0      	; 0x125c <_ZN16CLaserControlApp3RunEv+0x5ca>
    125c:	00 00       	nop
			_delay_ms(50);
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_SEL, 2);
    125e:	42 e0       	ldi	r20, 0x02	; 2
    1260:	68 e0       	ldi	r22, 0x08	; 8
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	f8 01       	movw	r30, r16
    1266:	80 a5       	ldd	r24, Z+40	; 0x28
    1268:	91 a5       	ldd	r25, Z+41	; 0x29
    126a:	0e 94 61 23 	call	0x46c2	; 0x46c2 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
			m_cpSender->WaitMODBUSTransmitter();
    126e:	f8 01       	movw	r30, r16
    1270:	80 a5       	ldd	r24, Z+40	; 0x28
    1272:	91 a5       	ldd	r25, Z+41	; 0x29
    1274:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSListener();
    1278:	f8 01       	movw	r30, r16
    127a:	80 a5       	ldd	r24, Z+40	; 0x28
    127c:	91 a5       	ldd	r25, Z+41	; 0x29
    127e:	0e 94 f6 22 	call	0x45ec	; 0x45ec <_ZN9CMBSender18WaitMODBUSListenerEv>
    1282:	ff ef       	ldi	r31, 0xFF	; 255
    1284:	21 ee       	ldi	r18, 0xE1	; 225
    1286:	84 e0       	ldi	r24, 0x04	; 4
    1288:	f1 50       	subi	r31, 0x01	; 1
    128a:	20 40       	sbci	r18, 0x00	; 0
    128c:	80 40       	sbci	r24, 0x00	; 0
    128e:	e1 f7       	brne	.-8      	; 0x1288 <_ZN16CLaserControlApp3RunEv+0x5f6>
    1290:	00 c0       	rjmp	.+0      	; 0x1292 <_ZN16CLaserControlApp3RunEv+0x600>
    1292:	00 00       	nop
			_delay_ms(50);
		
			Database.MapDatabaseToRead(VARIABLE_ADDR_DATABASE, DGUS_DATABASE_ADDR + m_wDatabasePage*PROFILE_SIZE, 0x0C00);
    1294:	f8 01       	movw	r30, r16
    1296:	24 a1       	ldd	r18, Z+36	; 0x24
    1298:	35 a1       	ldd	r19, Z+37	; 0x25
    129a:	32 2f       	mov	r19, r18
    129c:	22 27       	eor	r18, r18
    129e:	c9 01       	movw	r24, r18
    12a0:	a0 e0       	ldi	r26, 0x00	; 0
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	9c 01       	movw	r18, r24
    12a6:	ad 01       	movw	r20, r26
    12a8:	40 57       	subi	r20, 0x70	; 112
    12aa:	5f 4f       	sbci	r21, 0xFF	; 255
    12ac:	00 e0       	ldi	r16, 0x00	; 0
    12ae:	1c e0       	ldi	r17, 0x0C	; 12
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	71 e0       	ldi	r23, 0x01	; 1
    12b4:	85 ee       	ldi	r24, 0xE5	; 229
    12b6:	92 e2       	ldi	r25, 0x22	; 34
    12b8:	0e 94 92 02 	call	0x524	; 0x524 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
		break;
    12bc:	87 c0       	rjmp	.+270    	; 0x13cc <_ZN16CLaserControlApp3RunEv+0x73a>
		case APP_READPROFILE:
			Database.MapDatabaseToRead(VARIABLE_ADDR_PROFILE, DGUS_DATABASE_ADDR + (m_wDatabasePage + m_wDatabaseSelInx)*PROFILE_SIZE, 0x0100);
    12be:	f8 01       	movw	r30, r16
    12c0:	84 a1       	ldd	r24, Z+36	; 0x24
    12c2:	95 a1       	ldd	r25, Z+37	; 0x25
    12c4:	26 a1       	ldd	r18, Z+38	; 0x26
    12c6:	37 a1       	ldd	r19, Z+39	; 0x27
    12c8:	28 0f       	add	r18, r24
    12ca:	39 1f       	adc	r19, r25
    12cc:	32 2f       	mov	r19, r18
    12ce:	22 27       	eor	r18, r18
    12d0:	c9 01       	movw	r24, r18
    12d2:	a0 e0       	ldi	r26, 0x00	; 0
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	9c 01       	movw	r18, r24
    12d8:	ad 01       	movw	r20, r26
    12da:	40 57       	subi	r20, 0x70	; 112
    12dc:	5f 4f       	sbci	r21, 0xFF	; 255
    12de:	00 e0       	ldi	r16, 0x00	; 0
    12e0:	11 e0       	ldi	r17, 0x01	; 1
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	7d e0       	ldi	r23, 0x0D	; 13
    12e6:	85 ee       	ldi	r24, 0xE5	; 229
    12e8:	92 e2       	ldi	r25, 0x22	; 34
    12ea:	0e 94 92 02 	call	0x524	; 0x524 <_ZN13CDGUSDatabase17MapDatabaseToReadEjmj>
		break;
    12ee:	6e c0       	rjmp	.+220    	; 0x13cc <_ZN16CLaserControlApp3RunEv+0x73a>
		case APP_SAVEPROFILE:
			Database.MapDatabaseToWrite(VARIABLE_ADDR_PROFILE, DGUS_DATABASE_ADDR + (m_wDatabasePage + m_wDatabaseSelInx)*PROFILE_SIZE, 0x0100);
    12f0:	f8 01       	movw	r30, r16
    12f2:	84 a1       	ldd	r24, Z+36	; 0x24
    12f4:	95 a1       	ldd	r25, Z+37	; 0x25
    12f6:	26 a1       	ldd	r18, Z+38	; 0x26
    12f8:	37 a1       	ldd	r19, Z+39	; 0x27
    12fa:	28 0f       	add	r18, r24
    12fc:	39 1f       	adc	r19, r25
    12fe:	32 2f       	mov	r19, r18
    1300:	22 27       	eor	r18, r18
    1302:	c9 01       	movw	r24, r18
    1304:	a0 e0       	ldi	r26, 0x00	; 0
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	9c 01       	movw	r18, r24
    130a:	ad 01       	movw	r20, r26
    130c:	40 57       	subi	r20, 0x70	; 112
    130e:	5f 4f       	sbci	r21, 0xFF	; 255
    1310:	00 e0       	ldi	r16, 0x00	; 0
    1312:	11 e0       	ldi	r17, 0x01	; 1
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	7d e0       	ldi	r23, 0x0D	; 13
    1318:	85 ee       	ldi	r24, 0xE5	; 229
    131a:	92 e2       	ldi	r25, 0x22	; 34
    131c:	0e 94 2d 02 	call	0x45a	; 0x45a <_ZN13CDGUSDatabase18MapDatabaseToWriteEjmj>
		break;
    1320:	55 c0       	rjmp	.+170    	; 0x13cc <_ZN16CLaserControlApp3RunEv+0x73a>
		case APP_UNMAPDATABASE:
			Database.UnMap();
    1322:	85 ee       	ldi	r24, 0xE5	; 229
    1324:	92 e2       	ldi	r25, 0x22	; 34
    1326:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_ZN13CDGUSDatabase5UnMapEv>
		break;
    132a:	50 c0       	rjmp	.+160    	; 0x13cc <_ZN16CLaserControlApp3RunEv+0x73a>
		
		case APP_PASSWORD:
			m_cpSender->StartMODBUSVariableTransaction(VARIABLE_ADDR_PASSWORD, 2);
    132c:	42 e0       	ldi	r20, 0x02	; 2
    132e:	60 e1       	ldi	r22, 0x10	; 16
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	f8 01       	movw	r30, r16
    1334:	80 a5       	ldd	r24, Z+40	; 0x28
    1336:	91 a5       	ldd	r25, Z+41	; 0x29
    1338:	0e 94 61 23 	call	0x46c2	; 0x46c2 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>
			m_cpSender->WaitMODBUSTransmitter();
    133c:	f8 01       	movw	r30, r16
    133e:	80 a5       	ldd	r24, Z+40	; 0x28
    1340:	91 a5       	ldd	r25, Z+41	; 0x29
    1342:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
			m_cpSender->WaitMODBUSListener();
    1346:	f8 01       	movw	r30, r16
    1348:	80 a5       	ldd	r24, Z+40	; 0x28
    134a:	91 a5       	ldd	r25, Z+41	; 0x29
    134c:	0e 94 f6 22 	call	0x45ec	; 0x45ec <_ZN9CMBSender18WaitMODBUSListenerEv>
    1350:	ff ef       	ldi	r31, 0xFF	; 255
    1352:	21 ee       	ldi	r18, 0xE1	; 225
    1354:	84 e0       	ldi	r24, 0x04	; 4
    1356:	f1 50       	subi	r31, 0x01	; 1
    1358:	20 40       	sbci	r18, 0x00	; 0
    135a:	80 40       	sbci	r24, 0x00	; 0
    135c:	e1 f7       	brne	.-8      	; 0x1356 <_ZN16CLaserControlApp3RunEv+0x6c4>
    135e:	00 c0       	rjmp	.+0      	; 0x1360 <_ZN16CLaserControlApp3RunEv+0x6ce>
    1360:	00 00       	nop
			_delay_ms(50);
			
			if (strcmp((char*)m_wPassword, "1234") == 0)
    1362:	61 e6       	ldi	r22, 0x61	; 97
    1364:	70 e2       	ldi	r23, 0x20	; 32
    1366:	c8 01       	movw	r24, r16
    1368:	4a 96       	adiw	r24, 0x1a	; 26
    136a:	0e 94 29 25 	call	0x4a52	; 0x4a52 <strcmp>
    136e:	89 2b       	or	r24, r25
    1370:	69 f5       	brne	.+90     	; 0x13cc <_ZN16CLaserControlApp3RunEv+0x73a>
			{
				pic_id = swap(PICID_Service);
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	93 e2       	ldi	r25, 0x23	; 35
    1376:	8f 83       	std	Y+7, r24	; 0x07
    1378:	98 87       	std	Y+8, r25	; 0x08
				m_cpSender->WriteDataToRegisterAsync(REGISTER_ADDR_PICID, (uint8_t*)&pic_id, 2);
    137a:	22 e0       	ldi	r18, 0x02	; 2
    137c:	ae 01       	movw	r20, r28
    137e:	49 5f       	subi	r20, 0xF9	; 249
    1380:	5f 4f       	sbci	r21, 0xFF	; 255
    1382:	63 e0       	ldi	r22, 0x03	; 3
    1384:	f8 01       	movw	r30, r16
    1386:	80 a5       	ldd	r24, Z+40	; 0x28
    1388:	91 a5       	ldd	r25, Z+41	; 0x29
    138a:	0e 94 0d 23 	call	0x461a	; 0x461a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>
				m_cpSender->WaitMODBUSTransmitter();
    138e:	f8 01       	movw	r30, r16
    1390:	80 a5       	ldd	r24, Z+40	; 0x28
    1392:	91 a5       	ldd	r25, Z+41	; 0x29
    1394:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
    1398:	19 c0       	rjmp	.+50     	; 0x13cc <_ZN16CLaserControlApp3RunEv+0x73a>
				m_cpSender->WaitMODBUSTransmitter();
			}*/
		break;
		
		default:
			Database.UnMap();
    139a:	85 ee       	ldi	r24, 0xE5	; 229
    139c:	92 e2       	ldi	r25, 0x22	; 34
    139e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_ZN13CDGUSDatabase5UnMapEv>
			m_wPassword[0] = 0;
    13a2:	f8 01       	movw	r30, r16
    13a4:	12 8e       	std	Z+26, r1	; 0x1a
			m_wPassword[1] = 0;
    13a6:	13 8e       	std	Z+27, r1	; 0x1b
			m_wPassword[2] = 0;
    13a8:	14 8e       	std	Z+28, r1	; 0x1c
			m_wPassword[3] = 0;
    13aa:	15 8e       	std	Z+29, r1	; 0x1d
			m_cpSender->WriteDataToSRAMAsync(VARIABLE_ADDR_PASSWORD, (uint16_t*)&m_wPassword, 2);
    13ac:	a8 01       	movw	r20, r16
    13ae:	46 5e       	subi	r20, 0xE6	; 230
    13b0:	5f 4f       	sbci	r21, 0xFF	; 255
    13b2:	22 e0       	ldi	r18, 0x02	; 2
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	60 e1       	ldi	r22, 0x10	; 16
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	80 a5       	ldd	r24, Z+40	; 0x28
    13bc:	91 a5       	ldd	r25, Z+41	; 0x29
    13be:	0e 94 1c 23 	call	0x4638	; 0x4638 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>
			m_cpSender->WaitMODBUSTransmitter();
    13c2:	f8 01       	movw	r30, r16
    13c4:	80 a5       	ldd	r24, Z+40	; 0x28
    13c6:	91 a5       	ldd	r25, Z+41	; 0x29
    13c8:	0e 94 4a 23 	call	0x4694	; 0x4694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>
		break;
	}
}
    13cc:	28 96       	adiw	r28, 0x08	; 8
    13ce:	cd bf       	out	0x3d, r28	; 61
    13d0:	de bf       	out	0x3e, r29	; 62
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	1f 91       	pop	r17
    13d8:	0f 91       	pop	r16
    13da:	08 95       	ret

000013dc <_ZN16CLaserControlApp9OnTimeoutEv>:
	m_wMillSec-=10;
}

void CLaserControlApp::OnTimeout()
{
	timer.Stop();
    13dc:	84 ef       	ldi	r24, 0xF4	; 244
    13de:	90 e2       	ldi	r25, 0x20	; 32
    13e0:	0e 94 16 0b 	call	0x162c	; 0x162c <_ZN7CTimerC4StopEv>
	laserBoard.Relay1Off();
    13e4:	88 e1       	ldi	r24, 0x18	; 24
    13e6:	93 e2       	ldi	r25, 0x23	; 35
    13e8:	0e 94 28 04 	call	0x850	; 0x850 <_ZN11CLaserBoard9Relay1OffEv>
    13ec:	08 95       	ret

000013ee <_ZN16CLaserControlApp7OnTimerEv>:
		break;
	}
}

void CLaserControlApp::OnTimer()
{
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	ec 01       	movw	r28, r24
	if (m_wMillSec == 0)
    13f4:	8a 89       	ldd	r24, Y+18	; 0x12
    13f6:	9b 89       	ldd	r25, Y+19	; 0x13
    13f8:	89 2b       	or	r24, r25
    13fa:	c9 f5       	brne	.+114    	; 0x146e <_ZN16CLaserControlApp7OnTimerEv+0x80>
	{
		if (m_wSeconds == 0)
    13fc:	88 89       	ldd	r24, Y+16	; 0x10
    13fe:	99 89       	ldd	r25, Y+17	; 0x11
    1400:	89 2b       	or	r24, r25
    1402:	f1 f4       	brne	.+60     	; 0x1440 <_ZN16CLaserControlApp7OnTimerEv+0x52>
		{
			if (m_wMinutes == 0)
    1404:	8e 85       	ldd	r24, Y+14	; 0x0e
    1406:	9f 85       	ldd	r25, Y+15	; 0x0f
    1408:	89 2b       	or	r24, r25
    140a:	89 f4       	brne	.+34     	; 0x142e <_ZN16CLaserControlApp7OnTimerEv+0x40>
			{
				OnTimeout();
    140c:	ce 01       	movw	r24, r28
    140e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <_ZN16CLaserControlApp9OnTimeoutEv>
				player.SoundStart(1000, 1000, 0);
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	48 ee       	ldi	r20, 0xE8	; 232
    1416:	53 e0       	ldi	r21, 0x03	; 3
    1418:	68 ee       	ldi	r22, 0xE8	; 232
    141a:	73 e0       	ldi	r23, 0x03	; 3
    141c:	87 e1       	ldi	r24, 0x17	; 23
    141e:	93 e2       	ldi	r25, 0x23	; 35
    1420:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN12CSoundPlayer10SoundStartEjjh>
				player.SoundStop();
    1424:	87 e1       	ldi	r24, 0x17	; 23
    1426:	93 e2       	ldi	r25, 0x23	; 35
    1428:	0e 94 c5 0a 	call	0x158a	; 0x158a <_ZN12CSoundPlayer9SoundStopEv>
				//player.beep(1000, 1000);
				return;
    142c:	55 c0       	rjmp	.+170    	; 0x14d8 <_ZN16CLaserControlApp7OnTimerEv+0xea>
			}
			m_wSeconds = 60;
    142e:	8c e3       	ldi	r24, 0x3C	; 60
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	88 8b       	std	Y+16, r24	; 0x10
    1434:	99 8b       	std	Y+17, r25	; 0x11
			m_wMinutes--;
    1436:	8e 85       	ldd	r24, Y+14	; 0x0e
    1438:	9f 85       	ldd	r25, Y+15	; 0x0f
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	8e 87       	std	Y+14, r24	; 0x0e
    143e:	9f 87       	std	Y+15, r25	; 0x0f
		}
		m_wMillSec = 100; // Every 10 ms
    1440:	84 e6       	ldi	r24, 0x64	; 100
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	8a 8b       	std	Y+18, r24	; 0x12
    1446:	9b 8b       	std	Y+19, r25	; 0x13
		m_wSeconds--;
    1448:	88 89       	ldd	r24, Y+16	; 0x10
    144a:	99 89       	ldd	r25, Y+17	; 0x11
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	88 8b       	std	Y+16, r24	; 0x10
    1450:	99 8b       	std	Y+17, r25	; 0x11
		if (m_wMinutes == 0 && m_wSeconds < 10)
    1452:	8e 85       	ldd	r24, Y+14	; 0x0e
    1454:	9f 85       	ldd	r25, Y+15	; 0x0f
    1456:	89 2b       	or	r24, r25
    1458:	81 f4       	brne	.+32     	; 0x147a <_ZN16CLaserControlApp7OnTimerEv+0x8c>
    145a:	88 89       	ldd	r24, Y+16	; 0x10
    145c:	99 89       	ldd	r25, Y+17	; 0x11
    145e:	0a 97       	sbiw	r24, 0x0a	; 10
    1460:	d0 f0       	brcs	.+52     	; 0x1496 <_ZN16CLaserControlApp7OnTimerEv+0xa8>
    1462:	0b c0       	rjmp	.+22     	; 0x147a <_ZN16CLaserControlApp7OnTimerEv+0x8c>
		{
			if (m_wMinutes == 0 && m_wSeconds < 5)
    1464:	88 89       	ldd	r24, Y+16	; 0x10
    1466:	99 89       	ldd	r25, Y+17	; 0x11
    1468:	05 97       	sbiw	r24, 0x05	; 5
    146a:	d0 f0       	brcs	.+52     	; 0x14a0 <_ZN16CLaserControlApp7OnTimerEv+0xb2>
    146c:	27 c0       	rjmp	.+78     	; 0x14bc <_ZN16CLaserControlApp7OnTimerEv+0xce>
			player.SoundStart(1000, 25, 2);
			player.SoundStop();
			//player.beep(1000, 25);
		}
	}
	m_wMillSec-=10;
    146e:	8a 89       	ldd	r24, Y+18	; 0x12
    1470:	9b 89       	ldd	r25, Y+19	; 0x13
    1472:	0a 97       	sbiw	r24, 0x0a	; 10
    1474:	8a 8b       	std	Y+18, r24	; 0x12
    1476:	9b 8b       	std	Y+19, r25	; 0x13
    1478:	2f c0       	rjmp	.+94     	; 0x14d8 <_ZN16CLaserControlApp7OnTimerEv+0xea>
				//player.beep(1000, 50);
			}
		}
		else
		{
			player.SoundStart(1000, 25, 2);
    147a:	22 e0       	ldi	r18, 0x02	; 2
    147c:	49 e1       	ldi	r20, 0x19	; 25
    147e:	50 e0       	ldi	r21, 0x00	; 0
    1480:	68 ee       	ldi	r22, 0xE8	; 232
    1482:	73 e0       	ldi	r23, 0x03	; 3
    1484:	87 e1       	ldi	r24, 0x17	; 23
    1486:	93 e2       	ldi	r25, 0x23	; 35
    1488:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN12CSoundPlayer10SoundStartEjjh>
			player.SoundStop();
    148c:	87 e1       	ldi	r24, 0x17	; 23
    148e:	93 e2       	ldi	r25, 0x23	; 35
    1490:	0e 94 c5 0a 	call	0x158a	; 0x158a <_ZN12CSoundPlayer9SoundStopEv>
    1494:	ec cf       	rjmp	.-40     	; 0x146e <_ZN16CLaserControlApp7OnTimerEv+0x80>
		}
		m_wMillSec = 100; // Every 10 ms
		m_wSeconds--;
		if (m_wMinutes == 0 && m_wSeconds < 10)
		{
			if (m_wMinutes == 0 && m_wSeconds < 5)
    1496:	8e 85       	ldd	r24, Y+14	; 0x0e
    1498:	9f 85       	ldd	r25, Y+15	; 0x0f
    149a:	89 2b       	or	r24, r25
    149c:	19 f3       	breq	.-58     	; 0x1464 <_ZN16CLaserControlApp7OnTimerEv+0x76>
    149e:	0e c0       	rjmp	.+28     	; 0x14bc <_ZN16CLaserControlApp7OnTimerEv+0xce>
			{
				player.SoundStart(1000, 100, 0);
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	44 e6       	ldi	r20, 0x64	; 100
    14a4:	50 e0       	ldi	r21, 0x00	; 0
    14a6:	68 ee       	ldi	r22, 0xE8	; 232
    14a8:	73 e0       	ldi	r23, 0x03	; 3
    14aa:	87 e1       	ldi	r24, 0x17	; 23
    14ac:	93 e2       	ldi	r25, 0x23	; 35
    14ae:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN12CSoundPlayer10SoundStartEjjh>
				player.SoundStop();
    14b2:	87 e1       	ldi	r24, 0x17	; 23
    14b4:	93 e2       	ldi	r25, 0x23	; 35
    14b6:	0e 94 c5 0a 	call	0x158a	; 0x158a <_ZN12CSoundPlayer9SoundStopEv>
    14ba:	d9 cf       	rjmp	.-78     	; 0x146e <_ZN16CLaserControlApp7OnTimerEv+0x80>
				//player.beep(1000, 100);
			}
			else
			{
				player.SoundStart(1000, 50, 1);
    14bc:	21 e0       	ldi	r18, 0x01	; 1
    14be:	42 e3       	ldi	r20, 0x32	; 50
    14c0:	50 e0       	ldi	r21, 0x00	; 0
    14c2:	68 ee       	ldi	r22, 0xE8	; 232
    14c4:	73 e0       	ldi	r23, 0x03	; 3
    14c6:	87 e1       	ldi	r24, 0x17	; 23
    14c8:	93 e2       	ldi	r25, 0x23	; 35
    14ca:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN12CSoundPlayer10SoundStartEjjh>
				player.SoundStop();
    14ce:	87 e1       	ldi	r24, 0x17	; 23
    14d0:	93 e2       	ldi	r25, 0x23	; 35
    14d2:	0e 94 c5 0a 	call	0x158a	; 0x158a <_ZN12CSoundPlayer9SoundStopEv>
    14d6:	cb cf       	rjmp	.-106    	; 0x146e <_ZN16CLaserControlApp7OnTimerEv+0x80>
			player.SoundStop();
			//player.beep(1000, 25);
		}
	}
	m_wMillSec-=10;
}
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	08 95       	ret

000014de <_ZN16CLaserControlApp13OnTimerStaticEPv>:
}

void CLaserControlApp::OnTimerStatic(void* sender)
{
	CLaserControlApp* app = (CLaserControlApp*)sender;
	app->OnTimer();
    14de:	0e 94 f7 09 	call	0x13ee	; 0x13ee <_ZN16CLaserControlApp7OnTimerEv>
    14e2:	08 95       	ret

000014e4 <_ZN12CSoundPlayerC1Ev>:
	SoundStart(note, duration, 3);
	SoundStop();
}

// default constructor
CSoundPlayer::CSoundPlayer()
    14e4:	08 95       	ret

000014e6 <_ZN12CSoundPlayerD1Ev>:
{
} //CSoundPlayer

// default destructor
CSoundPlayer::~CSoundPlayer()
    14e6:	08 95       	ret

000014e8 <_ZN12CSoundPlayer19InitializeToneTimerEv>:
} //~CSoundPlayer

void CSoundPlayer::InitializeToneTimer()
{
	// Start timer 4MHz tick rate
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;
    14e8:	e0 e0       	ldi	r30, 0x00	; 0
    14ea:	fa e0       	ldi	r31, 0x0A	; 10
    14ec:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE0.CTRLB = TC0_CCDEN_bm | TC_WGMODE_DS_B_gc;
    14ee:	87 e8       	ldi	r24, 0x87	; 135
    14f0:	81 83       	std	Z+1, r24	; 0x01
	
	// No events
	TCE0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    14f2:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1.000 Hz PWM
	TCE0.PER = PERIOD_1Hz;
    14f4:	84 e2       	ldi	r24, 0x24	; 36
    14f6:	94 ef       	ldi	r25, 0xF4	; 244
    14f8:	86 a3       	std	Z+38, r24	; 0x26
    14fa:	97 a3       	std	Z+39, r25	; 0x27
	
	// Set 50% duty cycle
	TCE0.CCD =  MAXVOLUME_CC;
    14fc:	82 e1       	ldi	r24, 0x12	; 18
    14fe:	9a e7       	ldi	r25, 0x7A	; 122
    1500:	86 a7       	std	Z+46, r24	; 0x2e
    1502:	97 a7       	std	Z+47, r25	; 0x2f
	
	// Disable interrupt
	TCE0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    1504:	16 82       	std	Z+6, r1	; 0x06
	TCE0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    1506:	17 82       	std	Z+7, r1	; 0x07
    1508:	08 95       	ret

0000150a <_ZN12CSoundPlayer23InitializeDurationTimerEv>:

void CSoundPlayer::InitializeDurationTimer()
{
	// Start timer 4MHz tick rate
	//TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;
    150a:	e0 e4       	ldi	r30, 0x40	; 64
    150c:	fa e0       	ldi	r31, 0x0A	; 10
    150e:	10 82       	st	Z, r1
	
	// Enable output compare channel D, PWM with single slope waveform generation mode
	TCE1.CTRLB = TC_WGMODE_NORMAL_gc;
    1510:	11 82       	std	Z+1, r1	; 0x01
	
	// No events
	TCE1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    1512:	13 82       	std	Z+3, r1	; 0x03
	
	// Set period for 1s
	TCE1.PER = DELAYPERIOD_1s;
    1514:	84 e2       	ldi	r24, 0x24	; 36
    1516:	94 ef       	ldi	r25, 0xF4	; 244
    1518:	86 a3       	std	Z+38, r24	; 0x26
    151a:	97 a3       	std	Z+39, r25	; 0x27
	
	// Disable interrupt
	TCE1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    151c:	16 82       	std	Z+6, r1	; 0x06
	TCE1.INTCTRLB = TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    151e:	17 82       	std	Z+7, r1	; 0x07
    1520:	08 95       	ret

00001522 <_ZN12CSoundPlayer10SoundStartEjjh>:
}

void CSoundPlayer::SoundStart(uint16_t freq, uint16_t time, uint8_t volume)
{
    1522:	0f 93       	push	r16
    1524:	1f 93       	push	r17
    1526:	cf 93       	push	r28
    1528:	8a 01       	movw	r16, r20
    152a:	c2 2f       	mov	r28, r18
	uint16_t period_tc0 = PERIOD_1Hz/freq;
    152c:	9b 01       	movw	r18, r22
    152e:	40 e0       	ldi	r20, 0x00	; 0
    1530:	50 e0       	ldi	r21, 0x00	; 0
    1532:	64 e2       	ldi	r22, 0x24	; 36
    1534:	74 ef       	ldi	r23, 0xF4	; 244
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	0e 94 9b 23 	call	0x4736	; 0x4736 <__divmodsi4>
	uint16_t period_tc1 = DELAYPERIOD_A1s * time + (time >> DELAYPERIOD_S1s);
    153e:	b8 01       	movw	r22, r16
    1540:	76 95       	lsr	r23
    1542:	67 95       	ror	r22
    1544:	ee e3       	ldi	r30, 0x3E	; 62
    1546:	e0 9f       	mul	r30, r16
    1548:	c0 01       	movw	r24, r0
    154a:	e1 9f       	mul	r30, r17
    154c:	90 0d       	add	r25, r0
    154e:	11 24       	eor	r1, r1
    1550:	86 0f       	add	r24, r22
    1552:	97 1f       	adc	r25, r23
	
	// Config
	TCE0.CCD = period_tc0 >> (volume + 1);
    1554:	cf 5f       	subi	r28, 0xFF	; 255
    1556:	b9 01       	movw	r22, r18
    1558:	02 c0       	rjmp	.+4      	; 0x155e <_ZN12CSoundPlayer10SoundStartEjjh+0x3c>
    155a:	76 95       	lsr	r23
    155c:	67 95       	ror	r22
    155e:	ca 95       	dec	r28
    1560:	e2 f7       	brpl	.-8      	; 0x155a <_ZN12CSoundPlayer10SoundStartEjjh+0x38>
    1562:	e0 e0       	ldi	r30, 0x00	; 0
    1564:	fa e0       	ldi	r31, 0x0A	; 10
    1566:	66 a7       	std	Z+46, r22	; 0x2e
    1568:	77 a7       	std	Z+47, r23	; 0x2f
	TCE0.PER = period_tc0;
    156a:	26 a3       	std	Z+38, r18	; 0x26
    156c:	37 a3       	std	Z+39, r19	; 0x27
	TCE1.PER = period_tc1;
    156e:	a0 e4       	ldi	r26, 0x40	; 64
    1570:	ba e0       	ldi	r27, 0x0A	; 10
    1572:	96 96       	adiw	r26, 0x26	; 38
    1574:	8d 93       	st	X+, r24
    1576:	9c 93       	st	X, r25
    1578:	97 97       	sbiw	r26, 0x27	; 39
	
	//Start timer
	TCE0.CTRLA = TC_CLKSEL_DIV256_gc;	//Start tone timer
    157a:	86 e0       	ldi	r24, 0x06	; 6
    157c:	80 83       	st	Z, r24
	TCE1.CTRLA = TC_CLKSEL_DIV1024_gc;	//Start duration timer
    157e:	87 e0       	ldi	r24, 0x07	; 7
    1580:	8c 93       	st	X, r24
}
    1582:	cf 91       	pop	r28
    1584:	1f 91       	pop	r17
    1586:	0f 91       	pop	r16
    1588:	08 95       	ret

0000158a <_ZN12CSoundPlayer9SoundStopEv>:

void CSoundPlayer::SoundStop()
{
	while (!(TCE1.INTFLAGS & TC0_OVFIF_bm));
    158a:	e0 e4       	ldi	r30, 0x40	; 64
    158c:	fa e0       	ldi	r31, 0x0A	; 10
    158e:	84 85       	ldd	r24, Z+12	; 0x0c
    1590:	80 ff       	sbrs	r24, 0
    1592:	fd cf       	rjmp	.-6      	; 0x158e <_ZN12CSoundPlayer9SoundStopEv+0x4>
	TCE1.INTFLAGS &= TC0_OVFIF_bm;
    1594:	e0 e4       	ldi	r30, 0x40	; 64
    1596:	fa e0       	ldi	r31, 0x0A	; 10
    1598:	84 85       	ldd	r24, Z+12	; 0x0c
    159a:	81 70       	andi	r24, 0x01	; 1
    159c:	84 87       	std	Z+12, r24	; 0x0c

	//Stop timer
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;		//Stop tone timer
    159e:	a0 e0       	ldi	r26, 0x00	; 0
    15a0:	ba e0       	ldi	r27, 0x0A	; 10
    15a2:	1c 92       	st	X, r1
	TCE1.CTRLA = TC_CLKSEL_OFF_gc;		//Stop duration timer
    15a4:	10 82       	st	Z, r1

	// Reset duration timer
	TCE1.CNT = 0;
    15a6:	10 a2       	std	Z+32, r1	; 0x20
    15a8:	11 a2       	std	Z+33, r1	; 0x21
	TCE0.CNT = 0;
    15aa:	90 96       	adiw	r26, 0x20	; 32
    15ac:	1d 92       	st	X+, r1
    15ae:	1c 92       	st	X, r1
    15b0:	91 97       	sbiw	r26, 0x21	; 33
    15b2:	2f ef       	ldi	r18, 0xFF	; 255
    15b4:	83 ef       	ldi	r24, 0xF3	; 243
    15b6:	91 e0       	ldi	r25, 0x01	; 1
    15b8:	21 50       	subi	r18, 0x01	; 1
    15ba:	80 40       	sbci	r24, 0x00	; 0
    15bc:	90 40       	sbci	r25, 0x00	; 0
    15be:	e1 f7       	brne	.-8      	; 0x15b8 <_ZN12CSoundPlayer9SoundStopEv+0x2e>
    15c0:	00 c0       	rjmp	.+0      	; 0x15c2 <_ZN12CSoundPlayer9SoundStopEv+0x38>
    15c2:	00 00       	nop
    15c4:	08 95       	ret

000015c6 <_ZN12CSoundPlayer10InitializeEv>:

	_delay_ms(20);
} 

void CSoundPlayer::Initialize()
{
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    15ca:	ec 01       	movw	r28, r24
	InitializeToneTimer();
    15cc:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN12CSoundPlayer19InitializeToneTimerEv>
	InitializeDurationTimer();
    15d0:	ce 01       	movw	r24, r28
    15d2:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN12CSoundPlayer23InitializeDurationTimerEv>
}
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	08 95       	ret

000015dc <_ZN7CTimerC10InitializeE27TIMER_WAVEFORMGEN_MODE_ENUM22TIMER_CLOCKSELECT_ENUM>:
} //~CTimerC

// Basic timer functions
void CTimerC::Initialize(TIMER_WAVEFORMGEN_MODE wgm, TIMER_CLOCKSELECT clock)
{	
	clockSrc = clock;
    15dc:	fc 01       	movw	r30, r24
    15de:	42 83       	std	Z+2, r20	; 0x02
	
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    15e0:	e0 e0       	ldi	r30, 0x00	; 0
    15e2:	f8 e0       	ldi	r31, 0x08	; 8
    15e4:	80 81       	ld	r24, Z
    15e6:	80 7f       	andi	r24, 0xF0	; 240
    15e8:	80 83       	st	Z, r24
	
	// No events
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    15ea:	13 82       	std	Z+3, r1	; 0x03
	
	// Reset
	TCC0.CNT = 0;
    15ec:	10 a2       	std	Z+32, r1	; 0x20
    15ee:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CCA = 0;
    15f0:	10 a6       	std	Z+40, r1	; 0x28
    15f2:	11 a6       	std	Z+41, r1	; 0x29
	TCC0.CCB = 0;
    15f4:	12 a6       	std	Z+42, r1	; 0x2a
    15f6:	13 a6       	std	Z+43, r1	; 0x2b
	TCC0.CCC = 0;
    15f8:	14 a6       	std	Z+44, r1	; 0x2c
    15fa:	15 a6       	std	Z+45, r1	; 0x2d
	TCC0.CCD = 0;
    15fc:	16 a6       	std	Z+46, r1	; 0x2e
    15fe:	17 a6       	std	Z+47, r1	; 0x2f
	TCC0.PER = 0;
    1600:	16 a2       	std	Z+38, r1	; 0x26
    1602:	17 a2       	std	Z+39, r1	; 0x27
	
	// Waveform generation mode
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) | wgm;
    1604:	81 81       	ldd	r24, Z+1	; 0x01
    1606:	88 7f       	andi	r24, 0xF8	; 248
    1608:	68 2b       	or	r22, r24
    160a:	61 83       	std	Z+1, r22	; 0x01
	
	// Start timer
	//TCC0.CTRLA = (TCC0.CTRLA & TC0_CLKSEL_gm) | clock;
	
	// Disable interrupts
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    160c:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB = TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    160e:	17 82       	std	Z+7, r1	; 0x07
    1610:	08 95       	ret

00001612 <_ZN7CTimerC5StartEj>:
}

void CTimerC::Start(uint16_t period)
{
	// Set period of timer
	TCC0.PER = period;
    1612:	e0 e0       	ldi	r30, 0x00	; 0
    1614:	f8 e0       	ldi	r31, 0x08	; 8
    1616:	66 a3       	std	Z+38, r22	; 0x26
    1618:	77 a3       	std	Z+39, r23	; 0x27
	
	// Start timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | clockSrc;
    161a:	20 81       	ld	r18, Z
    161c:	20 7f       	andi	r18, 0xF0	; 240
    161e:	dc 01       	movw	r26, r24
    1620:	12 96       	adiw	r26, 0x02	; 2
    1622:	9c 91       	ld	r25, X
    1624:	82 2f       	mov	r24, r18
    1626:	89 2b       	or	r24, r25
    1628:	80 83       	st	Z, r24
    162a:	08 95       	ret

0000162c <_ZN7CTimerC4StopEv>:
}

void CTimerC::Stop()
{
	// Stop timer
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_OFF_gc;
    162c:	e0 e0       	ldi	r30, 0x00	; 0
    162e:	f8 e0       	ldi	r31, 0x08	; 8
    1630:	80 81       	ld	r24, Z
    1632:	80 7f       	andi	r24, 0xF0	; 240
    1634:	80 83       	st	Z, r24
	TCC0.CNT = 0;
    1636:	10 a2       	std	Z+32, r1	; 0x20
    1638:	11 a2       	std	Z+33, r1	; 0x21
    163a:	08 95       	ret

0000163c <_ZN7CTimerC13EnableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::EnableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB = (TCC0.CTRLB & ~0xF0) | channels;
    163c:	e0 e0       	ldi	r30, 0x00	; 0
    163e:	f8 e0       	ldi	r31, 0x08	; 8
    1640:	81 81       	ldd	r24, Z+1	; 0x01
    1642:	8f 70       	andi	r24, 0x0F	; 15
    1644:	68 2b       	or	r22, r24
    1646:	61 83       	std	Z+1, r22	; 0x01
    1648:	08 95       	ret

0000164a <_ZN7CTimerC14DisableChannelE19TIMER_CHANNELS_ENUM>:
}

void CTimerC::DisableChannel(TIMER_CHANNELS channels)
{
	TCC0.CTRLB &= ~channels;
    164a:	e0 e0       	ldi	r30, 0x00	; 0
    164c:	f8 e0       	ldi	r31, 0x08	; 8
    164e:	81 81       	ldd	r24, Z+1	; 0x01
    1650:	60 95       	com	r22
    1652:	68 23       	and	r22, r24
    1654:	61 83       	std	Z+1, r22	; 0x01
    1656:	08 95       	ret

00001658 <_ZN7CTimerC9SetPeriodEj>:
}

void CTimerC::SetPeriod(uint16_t value)
{
	TCC0.PER = value;
    1658:	60 93 26 08 	sts	0x0826, r22
    165c:	70 93 27 08 	sts	0x0827, r23
    1660:	08 95       	ret

00001662 <_ZN7CTimerC8SetCOMPAEj>:
}

void CTimerC::SetCOMPA(uint16_t value)
{
	TCC0.CCA = value;
    1662:	60 93 28 08 	sts	0x0828, r22
    1666:	70 93 29 08 	sts	0x0829, r23
    166a:	08 95       	ret

0000166c <_ZN7CTimerC8SetCOMPBEj>:
}

void CTimerC::SetCOMPB(uint16_t value)
{
	TCC0.CCB = value;
    166c:	60 93 2a 08 	sts	0x082A, r22
    1670:	70 93 2b 08 	sts	0x082B, r23
    1674:	08 95       	ret

00001676 <_ZN7CTimerC8SetCOMPCEj>:
}

void CTimerC::SetCOMPC(uint16_t value)
{
	TCC0.CCC = value;
    1676:	60 93 2c 08 	sts	0x082C, r22
    167a:	70 93 2d 08 	sts	0x082D, r23
    167e:	08 95       	ret

00001680 <_ZN7CTimerC8SetCOMPDEj>:
}

void CTimerC::SetCOMPD(uint16_t value)
{
	TCC0.CCD = value;
    1680:	60 93 2e 08 	sts	0x082E, r22
    1684:	70 93 2f 08 	sts	0x082F, r23
    1688:	08 95       	ret

0000168a <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum>:
}

// Interrupts
void CTimerC::SetOVFCallback(ISRCallback func, void* owner, TC_OVFINTLVL_t intlvl)
{
	if (func != NULL)
    168a:	61 15       	cp	r22, r1
    168c:	71 05       	cpc	r23, r1
    168e:	31 f0       	breq	.+12     	; 0x169c <_ZN7CTimerC14SetOVFCallbackEPFvPvES0_17TC_OVFINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_OVFINTLVL_gm) | intlvl;
    1690:	e0 e0       	ldi	r30, 0x00	; 0
    1692:	f8 e0       	ldi	r31, 0x08	; 8
    1694:	86 81       	ldd	r24, Z+6	; 0x06
    1696:	83 70       	andi	r24, 0x03	; 3
    1698:	28 2b       	or	r18, r24
    169a:	26 83       	std	Z+6, r18	; 0x06
		
	InterruptFuncTable[TCC0_OVF_vect_num] = func;
    169c:	60 93 13 21 	sts	0x2113, r22
    16a0:	70 93 14 21 	sts	0x2114, r23
	InterruptSenderTable[TCC0_OVF_vect_num] = owner;
    16a4:	40 93 09 22 	sts	0x2209, r20
    16a8:	50 93 0a 22 	sts	0x220A, r21
    16ac:	08 95       	ret

000016ae <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum>:
}

void CTimerC::SetERRCallback(ISRCallback func, void* owner, TC_ERRINTLVL_t intlvl)
{
	if (func != NULL)
    16ae:	61 15       	cp	r22, r1
    16b0:	71 05       	cpc	r23, r1
    16b2:	31 f0       	breq	.+12     	; 0x16c0 <_ZN7CTimerC14SetERRCallbackEPFvPvES0_17TC_ERRINTLVL_enum+0x12>
		TCC0.INTCTRLA = (TCC0.INTCTRLA & TC0_ERRINTLVL_gm) | intlvl;
    16b4:	e0 e0       	ldi	r30, 0x00	; 0
    16b6:	f8 e0       	ldi	r31, 0x08	; 8
    16b8:	86 81       	ldd	r24, Z+6	; 0x06
    16ba:	8c 70       	andi	r24, 0x0C	; 12
    16bc:	28 2b       	or	r18, r24
    16be:	26 83       	std	Z+6, r18	; 0x06
	
	InterruptFuncTable[TCC0_ERR_vect_num] = func;
    16c0:	60 93 15 21 	sts	0x2115, r22
    16c4:	70 93 16 21 	sts	0x2116, r23
	InterruptSenderTable[TCC0_ERR_vect_num] = owner;
    16c8:	40 93 0b 22 	sts	0x220B, r20
    16cc:	50 93 0c 22 	sts	0x220C, r21
    16d0:	08 95       	ret

000016d2 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum>:
}

void CTimerC::SetCOMPACallback(ISRCallback func, void* owner, TC_CCAINTLVL_t intlvl)
{
	if (func != NULL)
    16d2:	61 15       	cp	r22, r1
    16d4:	71 05       	cpc	r23, r1
    16d6:	31 f0       	breq	.+12     	; 0x16e4 <_ZN7CTimerC16SetCOMPACallbackEPFvPvES0_17TC_CCAINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCAINTLVL_gm) | intlvl;
    16d8:	e0 e0       	ldi	r30, 0x00	; 0
    16da:	f8 e0       	ldi	r31, 0x08	; 8
    16dc:	87 81       	ldd	r24, Z+7	; 0x07
    16de:	83 70       	andi	r24, 0x03	; 3
    16e0:	28 2b       	or	r18, r24
    16e2:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCA_vect_num] = func;
    16e4:	60 93 17 21 	sts	0x2117, r22
    16e8:	70 93 18 21 	sts	0x2118, r23
	InterruptSenderTable[TCC0_CCA_vect_num] = owner;
    16ec:	40 93 0d 22 	sts	0x220D, r20
    16f0:	50 93 0e 22 	sts	0x220E, r21
    16f4:	08 95       	ret

000016f6 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum>:
}

void CTimerC::SetCOMPBCallback(ISRCallback func, void* owner, TC_CCBINTLVL_t intlvl)
{
	if (func != NULL)
    16f6:	61 15       	cp	r22, r1
    16f8:	71 05       	cpc	r23, r1
    16fa:	31 f0       	breq	.+12     	; 0x1708 <_ZN7CTimerC16SetCOMPBCallbackEPFvPvES0_17TC_CCBINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCBINTLVL_gm) | intlvl;
    16fc:	e0 e0       	ldi	r30, 0x00	; 0
    16fe:	f8 e0       	ldi	r31, 0x08	; 8
    1700:	87 81       	ldd	r24, Z+7	; 0x07
    1702:	8c 70       	andi	r24, 0x0C	; 12
    1704:	28 2b       	or	r18, r24
    1706:	27 83       	std	Z+7, r18	; 0x07
	
	InterruptFuncTable[TCC0_CCB_vect_num] = func;
    1708:	60 93 19 21 	sts	0x2119, r22
    170c:	70 93 1a 21 	sts	0x211A, r23
	InterruptSenderTable[TCC0_CCB_vect_num] = owner;
    1710:	40 93 0f 22 	sts	0x220F, r20
    1714:	50 93 10 22 	sts	0x2210, r21
    1718:	08 95       	ret

0000171a <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum>:
}

void CTimerC::SetCOMPCCallback(ISRCallback func, void* owner, TC_CCCINTLVL_t intlvl)
{
	if (func != NULL)
    171a:	61 15       	cp	r22, r1
    171c:	71 05       	cpc	r23, r1
    171e:	31 f0       	breq	.+12     	; 0x172c <_ZN7CTimerC16SetCOMPCCallbackEPFvPvES0_17TC_CCCINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCCINTLVL_gm) | intlvl;
    1720:	e0 e0       	ldi	r30, 0x00	; 0
    1722:	f8 e0       	ldi	r31, 0x08	; 8
    1724:	87 81       	ldd	r24, Z+7	; 0x07
    1726:	80 73       	andi	r24, 0x30	; 48
    1728:	28 2b       	or	r18, r24
    172a:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCC_vect_num] = func;
    172c:	60 93 1b 21 	sts	0x211B, r22
    1730:	70 93 1c 21 	sts	0x211C, r23
	InterruptSenderTable[TCC0_CCC_vect_num] = owner;
    1734:	40 93 11 22 	sts	0x2211, r20
    1738:	50 93 12 22 	sts	0x2212, r21
    173c:	08 95       	ret

0000173e <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum>:
}

void CTimerC::SetCOMPDCallback(ISRCallback func, void* owner, TC_CCDINTLVL_t intlvl)
{
	if (func != NULL)
    173e:	61 15       	cp	r22, r1
    1740:	71 05       	cpc	r23, r1
    1742:	31 f0       	breq	.+12     	; 0x1750 <_ZN7CTimerC16SetCOMPDCallbackEPFvPvES0_17TC_CCDINTLVL_enum+0x12>
		TCC0.INTCTRLB = (TCC0.INTCTRLB & TC0_CCDINTLVL_gm) | intlvl;
    1744:	e0 e0       	ldi	r30, 0x00	; 0
    1746:	f8 e0       	ldi	r31, 0x08	; 8
    1748:	87 81       	ldd	r24, Z+7	; 0x07
    174a:	80 7c       	andi	r24, 0xC0	; 192
    174c:	28 2b       	or	r18, r24
    174e:	27 83       	std	Z+7, r18	; 0x07
		
	InterruptFuncTable[TCC0_CCD_vect_num] = func;
    1750:	60 93 1d 21 	sts	0x211D, r22
    1754:	70 93 1e 21 	sts	0x211E, r23
	InterruptSenderTable[TCC0_CCD_vect_num] = owner;
    1758:	40 93 13 22 	sts	0x2213, r20
    175c:	50 93 14 22 	sts	0x2214, r21
    1760:	08 95       	ret

00001762 <_ZN7CTimerCC1Ev>:

#include "CTimerC.h"
#include "LaserLib/intx128.h"

// default constructor
CTimerC::CTimerC()
    1762:	cf 93       	push	r28
    1764:	df 93       	push	r29
    1766:	ec 01       	movw	r28, r24
    1768:	0e 94 26 0c 	call	0x184c	; 0x184c <_ZN6CTimerC1Ev>
    176c:	80 e8       	ldi	r24, 0x80	; 128
    176e:	90 e2       	ldi	r25, 0x20	; 32
    1770:	88 83       	st	Y, r24
    1772:	99 83       	std	Y+1, r25	; 0x01
{
} //CTimerC
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	08 95       	ret

0000177a <_ZN7CTimerCD1Ev>:

// default destructor
CTimerC::~CTimerC()
    177a:	20 e8       	ldi	r18, 0x80	; 128
    177c:	30 e2       	ldi	r19, 0x20	; 32
    177e:	fc 01       	movw	r30, r24
    1780:	20 83       	st	Z, r18
    1782:	31 83       	std	Z+1, r19	; 0x01
    1784:	0e 94 2c 0c 	call	0x1858	; 0x1858 <_ZN6CTimerD1Ev>
    1788:	08 95       	ret

0000178a <_ZN4CSPIC1Ev>:
#include <avr/io.h>
#include <stdlib.h>
#include <string.h>

// default constructor
CSPI::CSPI()
    178a:	08 95       	ret

0000178c <_ZN4CSPID1Ev>:
{
} //CSPI

// default destructor
CSPI::~CSPI()
    178c:	08 95       	ret

0000178e <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>:
{
} //~CSPI

void CSPI::Initialize(bool Master, SPI_DATA_ORDER dord, SPI_MODE mode, bool doubleClk, SPI_PRESCALER_t prescaler)
{
    178e:	ef 92       	push	r14
    1790:	0f 93       	push	r16
    1792:	1f 93       	push	r17
    1794:	cf 93       	push	r28
    1796:	df 93       	push	r29
    1798:	ec 01       	movw	r28, r24
	PORTE.DIRSET = PIN4_bm | PIN5_bm | PIN7_bm; // MOSI, nSS, SCK to out
    179a:	e0 e8       	ldi	r30, 0x80	; 128
    179c:	f6 e0       	ldi	r31, 0x06	; 6
    179e:	80 eb       	ldi	r24, 0xB0	; 176
    17a0:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRCLR = PIN6_bm;						// MISO to in
    17a2:	90 e4       	ldi	r25, 0x40	; 64
    17a4:	92 83       	std	Z+2, r25	; 0x02
	
	// All slew rate limit enable with inverting
	PORTE.PIN4CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    17a6:	90 ec       	ldi	r25, 0xC0	; 192
    17a8:	94 8b       	std	Z+20, r25	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    17aa:	95 8b       	std	Z+21, r25	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    17ac:	96 8b       	std	Z+22, r25	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_TOTEM_gc | PORT_SRLEN_bm | PORT_INVEN_bm;
    17ae:	97 8b       	std	Z+23, r25	; 0x17
	
	// Set high
	PORTE.OUTSET = PIN4_bm | PIN5_bm | PIN7_bm;
    17b0:	85 83       	std	Z+5, r24	; 0x05
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
		prescaler;
    17b2:	61 11       	cpse	r22, r1
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2c>
    17b6:	80 e4       	ldi	r24, 0x40	; 64
    17b8:	01 c0       	rjmp	.+2      	; 0x17bc <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x2e>
    17ba:	80 e5       	ldi	r24, 0x50	; 80
    17bc:	01 11       	cpse	r16, r1
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x36>
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	01 c0       	rjmp	.+2      	; 0x17c6 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x38>
    17c4:	30 e8       	ldi	r19, 0x80	; 128
    17c6:	41 11       	cpse	r20, r1
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x40>
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum+0x42>
    17ce:	90 e2       	ldi	r25, 0x20	; 32
	SPIE.CTRL = 
		SPI_ENABLE_bm | 
		(Master?SPI_MASTER_bm:0) | 
		(doubleClk?SPI_CLK2X_bm:0) | 
		(dord?SPI_DORD_bm:0) | 
		(mode << SPI_MODE_gp) |
    17d0:	22 0f       	add	r18, r18
    17d2:	22 0f       	add	r18, r18
    17d4:	e2 2a       	or	r14, r18
    17d6:	e8 2a       	or	r14, r24
    17d8:	e3 2a       	or	r14, r19
		prescaler;
    17da:	e9 2a       	or	r14, r25
    17dc:	00 ec       	ldi	r16, 0xC0	; 192
    17de:	1a e0       	ldi	r17, 0x0A	; 10
    17e0:	f8 01       	movw	r30, r16
    17e2:	e0 82       	st	Z, r14
		
	// Allocate transmit buffer
	buffer = (uint8_t*)malloc(256);
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	91 e0       	ldi	r25, 0x01	; 1
    17e8:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <malloc>
    17ec:	88 83       	st	Y, r24
    17ee:	99 83       	std	Y+1, r25	; 0x01
	
	// Enable interrupt
	SPIE.INTCTRL = SPI_INTLVL_LO_gc;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	f8 01       	movw	r30, r16
    17f4:	81 83       	std	Z+1, r24	; 0x01
	
	// Set interrupts
	InterruptFuncTable[SPIE_INT_vect_num] = StaticOnTransmit;
    17f6:	83 e2       	ldi	r24, 0x23	; 35
    17f8:	9c e0       	ldi	r25, 0x0C	; 12
    17fa:	80 93 69 21 	sts	0x2169, r24
    17fe:	90 93 6a 21 	sts	0x216A, r25
	InterruptSenderTable[SPIE_INT_vect_num] = this;
    1802:	c0 93 5f 22 	sts	0x225F, r28
    1806:	d0 93 60 22 	sts	0x2260, r29
}
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	1f 91       	pop	r17
    1810:	0f 91       	pop	r16
    1812:	ef 90       	pop	r14
    1814:	08 95       	ret

00001816 <_ZN4CSPI10OnTransmitEv>:
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
}

void CSPI::OnTransmit()
{
    1816:	fc 01       	movw	r30, r24
	if (rx_pos != 0)
    1818:	82 81       	ldd	r24, Z+2	; 0x02
    181a:	93 81       	ldd	r25, Z+3	; 0x03
    181c:	89 2b       	or	r24, r25
    181e:	79 f0       	breq	.+30     	; 0x183e <_ZN4CSPI10OnTransmitEv+0x28>
		SPIE.DATA = buffer[--rx_pos];
    1820:	40 81       	ld	r20, Z
    1822:	51 81       	ldd	r21, Z+1	; 0x01
    1824:	22 81       	ldd	r18, Z+2	; 0x02
    1826:	33 81       	ldd	r19, Z+3	; 0x03
    1828:	c9 01       	movw	r24, r18
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	82 83       	std	Z+2, r24	; 0x02
    182e:	93 83       	std	Z+3, r25	; 0x03
    1830:	fa 01       	movw	r30, r20
    1832:	e8 0f       	add	r30, r24
    1834:	f9 1f       	adc	r31, r25
    1836:	80 81       	ld	r24, Z
    1838:	80 93 c3 0a 	sts	0x0AC3, r24
    183c:	08 95       	ret
	else
		PORTE.OUTSET = PIN4_bm;
    183e:	80 e1       	ldi	r24, 0x10	; 16
    1840:	80 93 85 06 	sts	0x0685, r24
    1844:	08 95       	ret

00001846 <_ZN4CSPI16StaticOnTransmitEPv>:
}

void CSPI::StaticOnTransmit(void* sender)
{
	CSPI* spi = (CSPI*)sender;
	spi->OnTransmit();
    1846:	0e 94 0b 0c 	call	0x1816	; 0x1816 <_ZN4CSPI10OnTransmitEv>
    184a:	08 95       	ret

0000184c <_ZN6CTimerC1Ev>:

#include "CTimer.h"
#include "sys_interrupts.h"

// default constructor
CTimer::CTimer()
    184c:	24 ea       	ldi	r18, 0xA4	; 164
    184e:	30 e2       	ldi	r19, 0x20	; 32
    1850:	fc 01       	movw	r30, r24
    1852:	20 83       	st	Z, r18
    1854:	31 83       	std	Z+1, r19	; 0x01
    1856:	08 95       	ret

00001858 <_ZN6CTimerD1Ev>:
{

} //CTimer

// default destructor
CTimer::~CTimer()
    1858:	08 95       	ret

0000185a <_ZN6CUSARTC1Ev>:


#include "CUSART.h"

// default constructor
CUSART::CUSART()
    185a:	28 ec       	ldi	r18, 0xC8	; 200
    185c:	30 e2       	ldi	r19, 0x20	; 32
    185e:	fc 01       	movw	r30, r24
    1860:	20 83       	st	Z, r18
    1862:	31 83       	std	Z+1, r19	; 0x01
    1864:	08 95       	ret

00001866 <_ZN6CUSARTD1Ev>:
{
	
}

// default destructor
CUSART::~CUSART()
    1866:	08 95       	ret

00001868 <__vector_1>:
		if (InterruptFuncTable[vector_id##_num] != 0)										\
		(*(InterruptFuncTable[vector_id##_num]))(InterruptSenderTable[vector_id##_num]);	\
	}

/* OSC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(OSC_OSCF_vect)      /* External Oscillator Failure Interrupt (NMI) */
    1868:	1f 92       	push	r1
    186a:	0f 92       	push	r0
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	0f 92       	push	r0
    1870:	11 24       	eor	r1, r1
    1872:	0b b6       	in	r0, 0x3b	; 59
    1874:	0f 92       	push	r0
    1876:	2f 93       	push	r18
    1878:	3f 93       	push	r19
    187a:	4f 93       	push	r20
    187c:	5f 93       	push	r21
    187e:	6f 93       	push	r22
    1880:	7f 93       	push	r23
    1882:	8f 93       	push	r24
    1884:	9f 93       	push	r25
    1886:	af 93       	push	r26
    1888:	bf 93       	push	r27
    188a:	ef 93       	push	r30
    188c:	ff 93       	push	r31
    188e:	e0 91 f9 20 	lds	r30, 0x20F9
    1892:	f0 91 fa 20 	lds	r31, 0x20FA
    1896:	30 97       	sbiw	r30, 0x00	; 0
    1898:	29 f0       	breq	.+10     	; 0x18a4 <__vector_1+0x3c>
    189a:	80 91 ef 21 	lds	r24, 0x21EF
    189e:	90 91 f0 21 	lds	r25, 0x21F0
    18a2:	19 95       	eicall
    18a4:	ff 91       	pop	r31
    18a6:	ef 91       	pop	r30
    18a8:	bf 91       	pop	r27
    18aa:	af 91       	pop	r26
    18ac:	9f 91       	pop	r25
    18ae:	8f 91       	pop	r24
    18b0:	7f 91       	pop	r23
    18b2:	6f 91       	pop	r22
    18b4:	5f 91       	pop	r21
    18b6:	4f 91       	pop	r20
    18b8:	3f 91       	pop	r19
    18ba:	2f 91       	pop	r18
    18bc:	0f 90       	pop	r0
    18be:	0b be       	out	0x3b, r0	; 59
    18c0:	0f 90       	pop	r0
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	0f 90       	pop	r0
    18c6:	1f 90       	pop	r1
    18c8:	18 95       	reti

000018ca <__vector_2>:

/* PORTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT0_vect)      /* External Interrupt 0 */
    18ca:	1f 92       	push	r1
    18cc:	0f 92       	push	r0
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	0f 92       	push	r0
    18d2:	11 24       	eor	r1, r1
    18d4:	0b b6       	in	r0, 0x3b	; 59
    18d6:	0f 92       	push	r0
    18d8:	2f 93       	push	r18
    18da:	3f 93       	push	r19
    18dc:	4f 93       	push	r20
    18de:	5f 93       	push	r21
    18e0:	6f 93       	push	r22
    18e2:	7f 93       	push	r23
    18e4:	8f 93       	push	r24
    18e6:	9f 93       	push	r25
    18e8:	af 93       	push	r26
    18ea:	bf 93       	push	r27
    18ec:	ef 93       	push	r30
    18ee:	ff 93       	push	r31
    18f0:	e0 91 fb 20 	lds	r30, 0x20FB
    18f4:	f0 91 fc 20 	lds	r31, 0x20FC
    18f8:	30 97       	sbiw	r30, 0x00	; 0
    18fa:	29 f0       	breq	.+10     	; 0x1906 <__vector_2+0x3c>
    18fc:	80 91 f1 21 	lds	r24, 0x21F1
    1900:	90 91 f2 21 	lds	r25, 0x21F2
    1904:	19 95       	eicall
    1906:	ff 91       	pop	r31
    1908:	ef 91       	pop	r30
    190a:	bf 91       	pop	r27
    190c:	af 91       	pop	r26
    190e:	9f 91       	pop	r25
    1910:	8f 91       	pop	r24
    1912:	7f 91       	pop	r23
    1914:	6f 91       	pop	r22
    1916:	5f 91       	pop	r21
    1918:	4f 91       	pop	r20
    191a:	3f 91       	pop	r19
    191c:	2f 91       	pop	r18
    191e:	0f 90       	pop	r0
    1920:	0b be       	out	0x3b, r0	; 59
    1922:	0f 90       	pop	r0
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	0f 90       	pop	r0
    1928:	1f 90       	pop	r1
    192a:	18 95       	reti

0000192c <__vector_3>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTC_INT1_vect)      /* External Interrupt 1 */
    192c:	1f 92       	push	r1
    192e:	0f 92       	push	r0
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	0f 92       	push	r0
    1934:	11 24       	eor	r1, r1
    1936:	0b b6       	in	r0, 0x3b	; 59
    1938:	0f 92       	push	r0
    193a:	2f 93       	push	r18
    193c:	3f 93       	push	r19
    193e:	4f 93       	push	r20
    1940:	5f 93       	push	r21
    1942:	6f 93       	push	r22
    1944:	7f 93       	push	r23
    1946:	8f 93       	push	r24
    1948:	9f 93       	push	r25
    194a:	af 93       	push	r26
    194c:	bf 93       	push	r27
    194e:	ef 93       	push	r30
    1950:	ff 93       	push	r31
    1952:	e0 91 fd 20 	lds	r30, 0x20FD
    1956:	f0 91 fe 20 	lds	r31, 0x20FE
    195a:	30 97       	sbiw	r30, 0x00	; 0
    195c:	29 f0       	breq	.+10     	; 0x1968 <__vector_3+0x3c>
    195e:	80 91 f3 21 	lds	r24, 0x21F3
    1962:	90 91 f4 21 	lds	r25, 0x21F4
    1966:	19 95       	eicall
    1968:	ff 91       	pop	r31
    196a:	ef 91       	pop	r30
    196c:	bf 91       	pop	r27
    196e:	af 91       	pop	r26
    1970:	9f 91       	pop	r25
    1972:	8f 91       	pop	r24
    1974:	7f 91       	pop	r23
    1976:	6f 91       	pop	r22
    1978:	5f 91       	pop	r21
    197a:	4f 91       	pop	r20
    197c:	3f 91       	pop	r19
    197e:	2f 91       	pop	r18
    1980:	0f 90       	pop	r0
    1982:	0b be       	out	0x3b, r0	; 59
    1984:	0f 90       	pop	r0
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	0f 90       	pop	r0
    198a:	1f 90       	pop	r1
    198c:	18 95       	reti

0000198e <__vector_4>:

/* PORTR interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT0_vect)      /* External Interrupt 0 */
    198e:	1f 92       	push	r1
    1990:	0f 92       	push	r0
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	0f 92       	push	r0
    1996:	11 24       	eor	r1, r1
    1998:	0b b6       	in	r0, 0x3b	; 59
    199a:	0f 92       	push	r0
    199c:	2f 93       	push	r18
    199e:	3f 93       	push	r19
    19a0:	4f 93       	push	r20
    19a2:	5f 93       	push	r21
    19a4:	6f 93       	push	r22
    19a6:	7f 93       	push	r23
    19a8:	8f 93       	push	r24
    19aa:	9f 93       	push	r25
    19ac:	af 93       	push	r26
    19ae:	bf 93       	push	r27
    19b0:	ef 93       	push	r30
    19b2:	ff 93       	push	r31
    19b4:	e0 91 ff 20 	lds	r30, 0x20FF
    19b8:	f0 91 00 21 	lds	r31, 0x2100
    19bc:	30 97       	sbiw	r30, 0x00	; 0
    19be:	29 f0       	breq	.+10     	; 0x19ca <__vector_4+0x3c>
    19c0:	80 91 f5 21 	lds	r24, 0x21F5
    19c4:	90 91 f6 21 	lds	r25, 0x21F6
    19c8:	19 95       	eicall
    19ca:	ff 91       	pop	r31
    19cc:	ef 91       	pop	r30
    19ce:	bf 91       	pop	r27
    19d0:	af 91       	pop	r26
    19d2:	9f 91       	pop	r25
    19d4:	8f 91       	pop	r24
    19d6:	7f 91       	pop	r23
    19d8:	6f 91       	pop	r22
    19da:	5f 91       	pop	r21
    19dc:	4f 91       	pop	r20
    19de:	3f 91       	pop	r19
    19e0:	2f 91       	pop	r18
    19e2:	0f 90       	pop	r0
    19e4:	0b be       	out	0x3b, r0	; 59
    19e6:	0f 90       	pop	r0
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	0f 90       	pop	r0
    19ec:	1f 90       	pop	r1
    19ee:	18 95       	reti

000019f0 <__vector_5>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTR_INT1_vect)      /* External Interrupt 1 */
    19f0:	1f 92       	push	r1
    19f2:	0f 92       	push	r0
    19f4:	0f b6       	in	r0, 0x3f	; 63
    19f6:	0f 92       	push	r0
    19f8:	11 24       	eor	r1, r1
    19fa:	0b b6       	in	r0, 0x3b	; 59
    19fc:	0f 92       	push	r0
    19fe:	2f 93       	push	r18
    1a00:	3f 93       	push	r19
    1a02:	4f 93       	push	r20
    1a04:	5f 93       	push	r21
    1a06:	6f 93       	push	r22
    1a08:	7f 93       	push	r23
    1a0a:	8f 93       	push	r24
    1a0c:	9f 93       	push	r25
    1a0e:	af 93       	push	r26
    1a10:	bf 93       	push	r27
    1a12:	ef 93       	push	r30
    1a14:	ff 93       	push	r31
    1a16:	e0 91 01 21 	lds	r30, 0x2101
    1a1a:	f0 91 02 21 	lds	r31, 0x2102
    1a1e:	30 97       	sbiw	r30, 0x00	; 0
    1a20:	29 f0       	breq	.+10     	; 0x1a2c <__vector_5+0x3c>
    1a22:	80 91 f7 21 	lds	r24, 0x21F7
    1a26:	90 91 f8 21 	lds	r25, 0x21F8
    1a2a:	19 95       	eicall
    1a2c:	ff 91       	pop	r31
    1a2e:	ef 91       	pop	r30
    1a30:	bf 91       	pop	r27
    1a32:	af 91       	pop	r26
    1a34:	9f 91       	pop	r25
    1a36:	8f 91       	pop	r24
    1a38:	7f 91       	pop	r23
    1a3a:	6f 91       	pop	r22
    1a3c:	5f 91       	pop	r21
    1a3e:	4f 91       	pop	r20
    1a40:	3f 91       	pop	r19
    1a42:	2f 91       	pop	r18
    1a44:	0f 90       	pop	r0
    1a46:	0b be       	out	0x3b, r0	; 59
    1a48:	0f 90       	pop	r0
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	0f 90       	pop	r0
    1a4e:	1f 90       	pop	r1
    1a50:	18 95       	reti

00001a52 <__vector_6>:

/* DMA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH0_vect)      /* Channel 0 Interrupt */
    1a52:	1f 92       	push	r1
    1a54:	0f 92       	push	r0
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	0f 92       	push	r0
    1a5a:	11 24       	eor	r1, r1
    1a5c:	0b b6       	in	r0, 0x3b	; 59
    1a5e:	0f 92       	push	r0
    1a60:	2f 93       	push	r18
    1a62:	3f 93       	push	r19
    1a64:	4f 93       	push	r20
    1a66:	5f 93       	push	r21
    1a68:	6f 93       	push	r22
    1a6a:	7f 93       	push	r23
    1a6c:	8f 93       	push	r24
    1a6e:	9f 93       	push	r25
    1a70:	af 93       	push	r26
    1a72:	bf 93       	push	r27
    1a74:	ef 93       	push	r30
    1a76:	ff 93       	push	r31
    1a78:	e0 91 03 21 	lds	r30, 0x2103
    1a7c:	f0 91 04 21 	lds	r31, 0x2104
    1a80:	30 97       	sbiw	r30, 0x00	; 0
    1a82:	29 f0       	breq	.+10     	; 0x1a8e <__vector_6+0x3c>
    1a84:	80 91 f9 21 	lds	r24, 0x21F9
    1a88:	90 91 fa 21 	lds	r25, 0x21FA
    1a8c:	19 95       	eicall
    1a8e:	ff 91       	pop	r31
    1a90:	ef 91       	pop	r30
    1a92:	bf 91       	pop	r27
    1a94:	af 91       	pop	r26
    1a96:	9f 91       	pop	r25
    1a98:	8f 91       	pop	r24
    1a9a:	7f 91       	pop	r23
    1a9c:	6f 91       	pop	r22
    1a9e:	5f 91       	pop	r21
    1aa0:	4f 91       	pop	r20
    1aa2:	3f 91       	pop	r19
    1aa4:	2f 91       	pop	r18
    1aa6:	0f 90       	pop	r0
    1aa8:	0b be       	out	0x3b, r0	; 59
    1aaa:	0f 90       	pop	r0
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	0f 90       	pop	r0
    1ab0:	1f 90       	pop	r1
    1ab2:	18 95       	reti

00001ab4 <__vector_7>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH1_vect)      /* Channel 1 Interrupt */
    1ab4:	1f 92       	push	r1
    1ab6:	0f 92       	push	r0
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	0f 92       	push	r0
    1abc:	11 24       	eor	r1, r1
    1abe:	0b b6       	in	r0, 0x3b	; 59
    1ac0:	0f 92       	push	r0
    1ac2:	2f 93       	push	r18
    1ac4:	3f 93       	push	r19
    1ac6:	4f 93       	push	r20
    1ac8:	5f 93       	push	r21
    1aca:	6f 93       	push	r22
    1acc:	7f 93       	push	r23
    1ace:	8f 93       	push	r24
    1ad0:	9f 93       	push	r25
    1ad2:	af 93       	push	r26
    1ad4:	bf 93       	push	r27
    1ad6:	ef 93       	push	r30
    1ad8:	ff 93       	push	r31
    1ada:	e0 91 05 21 	lds	r30, 0x2105
    1ade:	f0 91 06 21 	lds	r31, 0x2106
    1ae2:	30 97       	sbiw	r30, 0x00	; 0
    1ae4:	29 f0       	breq	.+10     	; 0x1af0 <__vector_7+0x3c>
    1ae6:	80 91 fb 21 	lds	r24, 0x21FB
    1aea:	90 91 fc 21 	lds	r25, 0x21FC
    1aee:	19 95       	eicall
    1af0:	ff 91       	pop	r31
    1af2:	ef 91       	pop	r30
    1af4:	bf 91       	pop	r27
    1af6:	af 91       	pop	r26
    1af8:	9f 91       	pop	r25
    1afa:	8f 91       	pop	r24
    1afc:	7f 91       	pop	r23
    1afe:	6f 91       	pop	r22
    1b00:	5f 91       	pop	r21
    1b02:	4f 91       	pop	r20
    1b04:	3f 91       	pop	r19
    1b06:	2f 91       	pop	r18
    1b08:	0f 90       	pop	r0
    1b0a:	0b be       	out	0x3b, r0	; 59
    1b0c:	0f 90       	pop	r0
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	0f 90       	pop	r0
    1b12:	1f 90       	pop	r1
    1b14:	18 95       	reti

00001b16 <__vector_8>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH2_vect)      /* Channel 2 Interrupt */
    1b16:	1f 92       	push	r1
    1b18:	0f 92       	push	r0
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	0f 92       	push	r0
    1b1e:	11 24       	eor	r1, r1
    1b20:	0b b6       	in	r0, 0x3b	; 59
    1b22:	0f 92       	push	r0
    1b24:	2f 93       	push	r18
    1b26:	3f 93       	push	r19
    1b28:	4f 93       	push	r20
    1b2a:	5f 93       	push	r21
    1b2c:	6f 93       	push	r22
    1b2e:	7f 93       	push	r23
    1b30:	8f 93       	push	r24
    1b32:	9f 93       	push	r25
    1b34:	af 93       	push	r26
    1b36:	bf 93       	push	r27
    1b38:	ef 93       	push	r30
    1b3a:	ff 93       	push	r31
    1b3c:	e0 91 07 21 	lds	r30, 0x2107
    1b40:	f0 91 08 21 	lds	r31, 0x2108
    1b44:	30 97       	sbiw	r30, 0x00	; 0
    1b46:	29 f0       	breq	.+10     	; 0x1b52 <__vector_8+0x3c>
    1b48:	80 91 fd 21 	lds	r24, 0x21FD
    1b4c:	90 91 fe 21 	lds	r25, 0x21FE
    1b50:	19 95       	eicall
    1b52:	ff 91       	pop	r31
    1b54:	ef 91       	pop	r30
    1b56:	bf 91       	pop	r27
    1b58:	af 91       	pop	r26
    1b5a:	9f 91       	pop	r25
    1b5c:	8f 91       	pop	r24
    1b5e:	7f 91       	pop	r23
    1b60:	6f 91       	pop	r22
    1b62:	5f 91       	pop	r21
    1b64:	4f 91       	pop	r20
    1b66:	3f 91       	pop	r19
    1b68:	2f 91       	pop	r18
    1b6a:	0f 90       	pop	r0
    1b6c:	0b be       	out	0x3b, r0	; 59
    1b6e:	0f 90       	pop	r0
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	0f 90       	pop	r0
    1b74:	1f 90       	pop	r1
    1b76:	18 95       	reti

00001b78 <__vector_9>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(DMA_CH3_vect)      /* Channel 3 Interrupt */
    1b78:	1f 92       	push	r1
    1b7a:	0f 92       	push	r0
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	0f 92       	push	r0
    1b80:	11 24       	eor	r1, r1
    1b82:	0b b6       	in	r0, 0x3b	; 59
    1b84:	0f 92       	push	r0
    1b86:	2f 93       	push	r18
    1b88:	3f 93       	push	r19
    1b8a:	4f 93       	push	r20
    1b8c:	5f 93       	push	r21
    1b8e:	6f 93       	push	r22
    1b90:	7f 93       	push	r23
    1b92:	8f 93       	push	r24
    1b94:	9f 93       	push	r25
    1b96:	af 93       	push	r26
    1b98:	bf 93       	push	r27
    1b9a:	ef 93       	push	r30
    1b9c:	ff 93       	push	r31
    1b9e:	e0 91 09 21 	lds	r30, 0x2109
    1ba2:	f0 91 0a 21 	lds	r31, 0x210A
    1ba6:	30 97       	sbiw	r30, 0x00	; 0
    1ba8:	29 f0       	breq	.+10     	; 0x1bb4 <__vector_9+0x3c>
    1baa:	80 91 ff 21 	lds	r24, 0x21FF
    1bae:	90 91 00 22 	lds	r25, 0x2200
    1bb2:	19 95       	eicall
    1bb4:	ff 91       	pop	r31
    1bb6:	ef 91       	pop	r30
    1bb8:	bf 91       	pop	r27
    1bba:	af 91       	pop	r26
    1bbc:	9f 91       	pop	r25
    1bbe:	8f 91       	pop	r24
    1bc0:	7f 91       	pop	r23
    1bc2:	6f 91       	pop	r22
    1bc4:	5f 91       	pop	r21
    1bc6:	4f 91       	pop	r20
    1bc8:	3f 91       	pop	r19
    1bca:	2f 91       	pop	r18
    1bcc:	0f 90       	pop	r0
    1bce:	0b be       	out	0x3b, r0	; 59
    1bd0:	0f 90       	pop	r0
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	0f 90       	pop	r0
    1bd6:	1f 90       	pop	r1
    1bd8:	18 95       	reti

00001bda <__vector_10>:

/* RTC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_OVF_vect)      /* Overflow Interrupt */
    1bda:	1f 92       	push	r1
    1bdc:	0f 92       	push	r0
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	0f 92       	push	r0
    1be2:	11 24       	eor	r1, r1
    1be4:	0b b6       	in	r0, 0x3b	; 59
    1be6:	0f 92       	push	r0
    1be8:	2f 93       	push	r18
    1bea:	3f 93       	push	r19
    1bec:	4f 93       	push	r20
    1bee:	5f 93       	push	r21
    1bf0:	6f 93       	push	r22
    1bf2:	7f 93       	push	r23
    1bf4:	8f 93       	push	r24
    1bf6:	9f 93       	push	r25
    1bf8:	af 93       	push	r26
    1bfa:	bf 93       	push	r27
    1bfc:	ef 93       	push	r30
    1bfe:	ff 93       	push	r31
    1c00:	e0 91 0b 21 	lds	r30, 0x210B
    1c04:	f0 91 0c 21 	lds	r31, 0x210C
    1c08:	30 97       	sbiw	r30, 0x00	; 0
    1c0a:	29 f0       	breq	.+10     	; 0x1c16 <__vector_10+0x3c>
    1c0c:	80 91 01 22 	lds	r24, 0x2201
    1c10:	90 91 02 22 	lds	r25, 0x2202
    1c14:	19 95       	eicall
    1c16:	ff 91       	pop	r31
    1c18:	ef 91       	pop	r30
    1c1a:	bf 91       	pop	r27
    1c1c:	af 91       	pop	r26
    1c1e:	9f 91       	pop	r25
    1c20:	8f 91       	pop	r24
    1c22:	7f 91       	pop	r23
    1c24:	6f 91       	pop	r22
    1c26:	5f 91       	pop	r21
    1c28:	4f 91       	pop	r20
    1c2a:	3f 91       	pop	r19
    1c2c:	2f 91       	pop	r18
    1c2e:	0f 90       	pop	r0
    1c30:	0b be       	out	0x3b, r0	; 59
    1c32:	0f 90       	pop	r0
    1c34:	0f be       	out	0x3f, r0	; 63
    1c36:	0f 90       	pop	r0
    1c38:	1f 90       	pop	r1
    1c3a:	18 95       	reti

00001c3c <__vector_11>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(RTC_COMP_vect)      /* Compare Interrupt */
    1c3c:	1f 92       	push	r1
    1c3e:	0f 92       	push	r0
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	0f 92       	push	r0
    1c44:	11 24       	eor	r1, r1
    1c46:	0b b6       	in	r0, 0x3b	; 59
    1c48:	0f 92       	push	r0
    1c4a:	2f 93       	push	r18
    1c4c:	3f 93       	push	r19
    1c4e:	4f 93       	push	r20
    1c50:	5f 93       	push	r21
    1c52:	6f 93       	push	r22
    1c54:	7f 93       	push	r23
    1c56:	8f 93       	push	r24
    1c58:	9f 93       	push	r25
    1c5a:	af 93       	push	r26
    1c5c:	bf 93       	push	r27
    1c5e:	ef 93       	push	r30
    1c60:	ff 93       	push	r31
    1c62:	e0 91 0d 21 	lds	r30, 0x210D
    1c66:	f0 91 0e 21 	lds	r31, 0x210E
    1c6a:	30 97       	sbiw	r30, 0x00	; 0
    1c6c:	29 f0       	breq	.+10     	; 0x1c78 <__vector_11+0x3c>
    1c6e:	80 91 03 22 	lds	r24, 0x2203
    1c72:	90 91 04 22 	lds	r25, 0x2204
    1c76:	19 95       	eicall
    1c78:	ff 91       	pop	r31
    1c7a:	ef 91       	pop	r30
    1c7c:	bf 91       	pop	r27
    1c7e:	af 91       	pop	r26
    1c80:	9f 91       	pop	r25
    1c82:	8f 91       	pop	r24
    1c84:	7f 91       	pop	r23
    1c86:	6f 91       	pop	r22
    1c88:	5f 91       	pop	r21
    1c8a:	4f 91       	pop	r20
    1c8c:	3f 91       	pop	r19
    1c8e:	2f 91       	pop	r18
    1c90:	0f 90       	pop	r0
    1c92:	0b be       	out	0x3b, r0	; 59
    1c94:	0f 90       	pop	r0
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	0f 90       	pop	r0
    1c9a:	1f 90       	pop	r1
    1c9c:	18 95       	reti

00001c9e <__vector_12>:

/* TWIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIS_vect)      /* TWI Slave Interrupt */
    1c9e:	1f 92       	push	r1
    1ca0:	0f 92       	push	r0
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	0f 92       	push	r0
    1ca6:	11 24       	eor	r1, r1
    1ca8:	0b b6       	in	r0, 0x3b	; 59
    1caa:	0f 92       	push	r0
    1cac:	2f 93       	push	r18
    1cae:	3f 93       	push	r19
    1cb0:	4f 93       	push	r20
    1cb2:	5f 93       	push	r21
    1cb4:	6f 93       	push	r22
    1cb6:	7f 93       	push	r23
    1cb8:	8f 93       	push	r24
    1cba:	9f 93       	push	r25
    1cbc:	af 93       	push	r26
    1cbe:	bf 93       	push	r27
    1cc0:	ef 93       	push	r30
    1cc2:	ff 93       	push	r31
    1cc4:	e0 91 0f 21 	lds	r30, 0x210F
    1cc8:	f0 91 10 21 	lds	r31, 0x2110
    1ccc:	30 97       	sbiw	r30, 0x00	; 0
    1cce:	29 f0       	breq	.+10     	; 0x1cda <__vector_12+0x3c>
    1cd0:	80 91 05 22 	lds	r24, 0x2205
    1cd4:	90 91 06 22 	lds	r25, 0x2206
    1cd8:	19 95       	eicall
    1cda:	ff 91       	pop	r31
    1cdc:	ef 91       	pop	r30
    1cde:	bf 91       	pop	r27
    1ce0:	af 91       	pop	r26
    1ce2:	9f 91       	pop	r25
    1ce4:	8f 91       	pop	r24
    1ce6:	7f 91       	pop	r23
    1ce8:	6f 91       	pop	r22
    1cea:	5f 91       	pop	r21
    1cec:	4f 91       	pop	r20
    1cee:	3f 91       	pop	r19
    1cf0:	2f 91       	pop	r18
    1cf2:	0f 90       	pop	r0
    1cf4:	0b be       	out	0x3b, r0	; 59
    1cf6:	0f 90       	pop	r0
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	0f 90       	pop	r0
    1cfc:	1f 90       	pop	r1
    1cfe:	18 95       	reti

00001d00 <__vector_13>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIC_TWIM_vect)      /* TWI Master Interrupt */
    1d00:	1f 92       	push	r1
    1d02:	0f 92       	push	r0
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	0f 92       	push	r0
    1d08:	11 24       	eor	r1, r1
    1d0a:	0b b6       	in	r0, 0x3b	; 59
    1d0c:	0f 92       	push	r0
    1d0e:	2f 93       	push	r18
    1d10:	3f 93       	push	r19
    1d12:	4f 93       	push	r20
    1d14:	5f 93       	push	r21
    1d16:	6f 93       	push	r22
    1d18:	7f 93       	push	r23
    1d1a:	8f 93       	push	r24
    1d1c:	9f 93       	push	r25
    1d1e:	af 93       	push	r26
    1d20:	bf 93       	push	r27
    1d22:	ef 93       	push	r30
    1d24:	ff 93       	push	r31
    1d26:	e0 91 11 21 	lds	r30, 0x2111
    1d2a:	f0 91 12 21 	lds	r31, 0x2112
    1d2e:	30 97       	sbiw	r30, 0x00	; 0
    1d30:	29 f0       	breq	.+10     	; 0x1d3c <__vector_13+0x3c>
    1d32:	80 91 07 22 	lds	r24, 0x2207
    1d36:	90 91 08 22 	lds	r25, 0x2208
    1d3a:	19 95       	eicall
    1d3c:	ff 91       	pop	r31
    1d3e:	ef 91       	pop	r30
    1d40:	bf 91       	pop	r27
    1d42:	af 91       	pop	r26
    1d44:	9f 91       	pop	r25
    1d46:	8f 91       	pop	r24
    1d48:	7f 91       	pop	r23
    1d4a:	6f 91       	pop	r22
    1d4c:	5f 91       	pop	r21
    1d4e:	4f 91       	pop	r20
    1d50:	3f 91       	pop	r19
    1d52:	2f 91       	pop	r18
    1d54:	0f 90       	pop	r0
    1d56:	0b be       	out	0x3b, r0	; 59
    1d58:	0f 90       	pop	r0
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	0f 90       	pop	r0
    1d5e:	1f 90       	pop	r1
    1d60:	18 95       	reti

00001d62 <__vector_14>:

/* TCC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_OVF_vect)      /* Overflow Interrupt */
    1d62:	1f 92       	push	r1
    1d64:	0f 92       	push	r0
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	0f 92       	push	r0
    1d6a:	11 24       	eor	r1, r1
    1d6c:	0b b6       	in	r0, 0x3b	; 59
    1d6e:	0f 92       	push	r0
    1d70:	2f 93       	push	r18
    1d72:	3f 93       	push	r19
    1d74:	4f 93       	push	r20
    1d76:	5f 93       	push	r21
    1d78:	6f 93       	push	r22
    1d7a:	7f 93       	push	r23
    1d7c:	8f 93       	push	r24
    1d7e:	9f 93       	push	r25
    1d80:	af 93       	push	r26
    1d82:	bf 93       	push	r27
    1d84:	ef 93       	push	r30
    1d86:	ff 93       	push	r31
    1d88:	e0 91 13 21 	lds	r30, 0x2113
    1d8c:	f0 91 14 21 	lds	r31, 0x2114
    1d90:	30 97       	sbiw	r30, 0x00	; 0
    1d92:	29 f0       	breq	.+10     	; 0x1d9e <__vector_14+0x3c>
    1d94:	80 91 09 22 	lds	r24, 0x2209
    1d98:	90 91 0a 22 	lds	r25, 0x220A
    1d9c:	19 95       	eicall
    1d9e:	ff 91       	pop	r31
    1da0:	ef 91       	pop	r30
    1da2:	bf 91       	pop	r27
    1da4:	af 91       	pop	r26
    1da6:	9f 91       	pop	r25
    1da8:	8f 91       	pop	r24
    1daa:	7f 91       	pop	r23
    1dac:	6f 91       	pop	r22
    1dae:	5f 91       	pop	r21
    1db0:	4f 91       	pop	r20
    1db2:	3f 91       	pop	r19
    1db4:	2f 91       	pop	r18
    1db6:	0f 90       	pop	r0
    1db8:	0b be       	out	0x3b, r0	; 59
    1dba:	0f 90       	pop	r0
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	0f 90       	pop	r0
    1dc0:	1f 90       	pop	r1
    1dc2:	18 95       	reti

00001dc4 <__vector_15>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_ERR_vect)      /* Error Interrupt */
    1dc4:	1f 92       	push	r1
    1dc6:	0f 92       	push	r0
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	0f 92       	push	r0
    1dcc:	11 24       	eor	r1, r1
    1dce:	0b b6       	in	r0, 0x3b	; 59
    1dd0:	0f 92       	push	r0
    1dd2:	2f 93       	push	r18
    1dd4:	3f 93       	push	r19
    1dd6:	4f 93       	push	r20
    1dd8:	5f 93       	push	r21
    1dda:	6f 93       	push	r22
    1ddc:	7f 93       	push	r23
    1dde:	8f 93       	push	r24
    1de0:	9f 93       	push	r25
    1de2:	af 93       	push	r26
    1de4:	bf 93       	push	r27
    1de6:	ef 93       	push	r30
    1de8:	ff 93       	push	r31
    1dea:	e0 91 15 21 	lds	r30, 0x2115
    1dee:	f0 91 16 21 	lds	r31, 0x2116
    1df2:	30 97       	sbiw	r30, 0x00	; 0
    1df4:	29 f0       	breq	.+10     	; 0x1e00 <__vector_15+0x3c>
    1df6:	80 91 0b 22 	lds	r24, 0x220B
    1dfa:	90 91 0c 22 	lds	r25, 0x220C
    1dfe:	19 95       	eicall
    1e00:	ff 91       	pop	r31
    1e02:	ef 91       	pop	r30
    1e04:	bf 91       	pop	r27
    1e06:	af 91       	pop	r26
    1e08:	9f 91       	pop	r25
    1e0a:	8f 91       	pop	r24
    1e0c:	7f 91       	pop	r23
    1e0e:	6f 91       	pop	r22
    1e10:	5f 91       	pop	r21
    1e12:	4f 91       	pop	r20
    1e14:	3f 91       	pop	r19
    1e16:	2f 91       	pop	r18
    1e18:	0f 90       	pop	r0
    1e1a:	0b be       	out	0x3b, r0	; 59
    1e1c:	0f 90       	pop	r0
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	0f 90       	pop	r0
    1e22:	1f 90       	pop	r1
    1e24:	18 95       	reti

00001e26 <__vector_16>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCA_vect)      /* Compare or Capture A Interrupt */
    1e26:	1f 92       	push	r1
    1e28:	0f 92       	push	r0
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	0f 92       	push	r0
    1e2e:	11 24       	eor	r1, r1
    1e30:	0b b6       	in	r0, 0x3b	; 59
    1e32:	0f 92       	push	r0
    1e34:	2f 93       	push	r18
    1e36:	3f 93       	push	r19
    1e38:	4f 93       	push	r20
    1e3a:	5f 93       	push	r21
    1e3c:	6f 93       	push	r22
    1e3e:	7f 93       	push	r23
    1e40:	8f 93       	push	r24
    1e42:	9f 93       	push	r25
    1e44:	af 93       	push	r26
    1e46:	bf 93       	push	r27
    1e48:	ef 93       	push	r30
    1e4a:	ff 93       	push	r31
    1e4c:	e0 91 17 21 	lds	r30, 0x2117
    1e50:	f0 91 18 21 	lds	r31, 0x2118
    1e54:	30 97       	sbiw	r30, 0x00	; 0
    1e56:	29 f0       	breq	.+10     	; 0x1e62 <__vector_16+0x3c>
    1e58:	80 91 0d 22 	lds	r24, 0x220D
    1e5c:	90 91 0e 22 	lds	r25, 0x220E
    1e60:	19 95       	eicall
    1e62:	ff 91       	pop	r31
    1e64:	ef 91       	pop	r30
    1e66:	bf 91       	pop	r27
    1e68:	af 91       	pop	r26
    1e6a:	9f 91       	pop	r25
    1e6c:	8f 91       	pop	r24
    1e6e:	7f 91       	pop	r23
    1e70:	6f 91       	pop	r22
    1e72:	5f 91       	pop	r21
    1e74:	4f 91       	pop	r20
    1e76:	3f 91       	pop	r19
    1e78:	2f 91       	pop	r18
    1e7a:	0f 90       	pop	r0
    1e7c:	0b be       	out	0x3b, r0	; 59
    1e7e:	0f 90       	pop	r0
    1e80:	0f be       	out	0x3f, r0	; 63
    1e82:	0f 90       	pop	r0
    1e84:	1f 90       	pop	r1
    1e86:	18 95       	reti

00001e88 <__vector_17>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCB_vect)      /* Compare or Capture B Interrupt */
    1e88:	1f 92       	push	r1
    1e8a:	0f 92       	push	r0
    1e8c:	0f b6       	in	r0, 0x3f	; 63
    1e8e:	0f 92       	push	r0
    1e90:	11 24       	eor	r1, r1
    1e92:	0b b6       	in	r0, 0x3b	; 59
    1e94:	0f 92       	push	r0
    1e96:	2f 93       	push	r18
    1e98:	3f 93       	push	r19
    1e9a:	4f 93       	push	r20
    1e9c:	5f 93       	push	r21
    1e9e:	6f 93       	push	r22
    1ea0:	7f 93       	push	r23
    1ea2:	8f 93       	push	r24
    1ea4:	9f 93       	push	r25
    1ea6:	af 93       	push	r26
    1ea8:	bf 93       	push	r27
    1eaa:	ef 93       	push	r30
    1eac:	ff 93       	push	r31
    1eae:	e0 91 19 21 	lds	r30, 0x2119
    1eb2:	f0 91 1a 21 	lds	r31, 0x211A
    1eb6:	30 97       	sbiw	r30, 0x00	; 0
    1eb8:	29 f0       	breq	.+10     	; 0x1ec4 <__vector_17+0x3c>
    1eba:	80 91 0f 22 	lds	r24, 0x220F
    1ebe:	90 91 10 22 	lds	r25, 0x2210
    1ec2:	19 95       	eicall
    1ec4:	ff 91       	pop	r31
    1ec6:	ef 91       	pop	r30
    1ec8:	bf 91       	pop	r27
    1eca:	af 91       	pop	r26
    1ecc:	9f 91       	pop	r25
    1ece:	8f 91       	pop	r24
    1ed0:	7f 91       	pop	r23
    1ed2:	6f 91       	pop	r22
    1ed4:	5f 91       	pop	r21
    1ed6:	4f 91       	pop	r20
    1ed8:	3f 91       	pop	r19
    1eda:	2f 91       	pop	r18
    1edc:	0f 90       	pop	r0
    1ede:	0b be       	out	0x3b, r0	; 59
    1ee0:	0f 90       	pop	r0
    1ee2:	0f be       	out	0x3f, r0	; 63
    1ee4:	0f 90       	pop	r0
    1ee6:	1f 90       	pop	r1
    1ee8:	18 95       	reti

00001eea <__vector_18>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCC_vect)      /* Compare or Capture C Interrupt */
    1eea:	1f 92       	push	r1
    1eec:	0f 92       	push	r0
    1eee:	0f b6       	in	r0, 0x3f	; 63
    1ef0:	0f 92       	push	r0
    1ef2:	11 24       	eor	r1, r1
    1ef4:	0b b6       	in	r0, 0x3b	; 59
    1ef6:	0f 92       	push	r0
    1ef8:	2f 93       	push	r18
    1efa:	3f 93       	push	r19
    1efc:	4f 93       	push	r20
    1efe:	5f 93       	push	r21
    1f00:	6f 93       	push	r22
    1f02:	7f 93       	push	r23
    1f04:	8f 93       	push	r24
    1f06:	9f 93       	push	r25
    1f08:	af 93       	push	r26
    1f0a:	bf 93       	push	r27
    1f0c:	ef 93       	push	r30
    1f0e:	ff 93       	push	r31
    1f10:	e0 91 1b 21 	lds	r30, 0x211B
    1f14:	f0 91 1c 21 	lds	r31, 0x211C
    1f18:	30 97       	sbiw	r30, 0x00	; 0
    1f1a:	29 f0       	breq	.+10     	; 0x1f26 <__vector_18+0x3c>
    1f1c:	80 91 11 22 	lds	r24, 0x2211
    1f20:	90 91 12 22 	lds	r25, 0x2212
    1f24:	19 95       	eicall
    1f26:	ff 91       	pop	r31
    1f28:	ef 91       	pop	r30
    1f2a:	bf 91       	pop	r27
    1f2c:	af 91       	pop	r26
    1f2e:	9f 91       	pop	r25
    1f30:	8f 91       	pop	r24
    1f32:	7f 91       	pop	r23
    1f34:	6f 91       	pop	r22
    1f36:	5f 91       	pop	r21
    1f38:	4f 91       	pop	r20
    1f3a:	3f 91       	pop	r19
    1f3c:	2f 91       	pop	r18
    1f3e:	0f 90       	pop	r0
    1f40:	0b be       	out	0x3b, r0	; 59
    1f42:	0f 90       	pop	r0
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	0f 90       	pop	r0
    1f48:	1f 90       	pop	r1
    1f4a:	18 95       	reti

00001f4c <__vector_19>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC0_CCD_vect)      /* Compare or Capture D Interrupt */
    1f4c:	1f 92       	push	r1
    1f4e:	0f 92       	push	r0
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	0f 92       	push	r0
    1f54:	11 24       	eor	r1, r1
    1f56:	0b b6       	in	r0, 0x3b	; 59
    1f58:	0f 92       	push	r0
    1f5a:	2f 93       	push	r18
    1f5c:	3f 93       	push	r19
    1f5e:	4f 93       	push	r20
    1f60:	5f 93       	push	r21
    1f62:	6f 93       	push	r22
    1f64:	7f 93       	push	r23
    1f66:	8f 93       	push	r24
    1f68:	9f 93       	push	r25
    1f6a:	af 93       	push	r26
    1f6c:	bf 93       	push	r27
    1f6e:	ef 93       	push	r30
    1f70:	ff 93       	push	r31
    1f72:	e0 91 1d 21 	lds	r30, 0x211D
    1f76:	f0 91 1e 21 	lds	r31, 0x211E
    1f7a:	30 97       	sbiw	r30, 0x00	; 0
    1f7c:	29 f0       	breq	.+10     	; 0x1f88 <__vector_19+0x3c>
    1f7e:	80 91 13 22 	lds	r24, 0x2213
    1f82:	90 91 14 22 	lds	r25, 0x2214
    1f86:	19 95       	eicall
    1f88:	ff 91       	pop	r31
    1f8a:	ef 91       	pop	r30
    1f8c:	bf 91       	pop	r27
    1f8e:	af 91       	pop	r26
    1f90:	9f 91       	pop	r25
    1f92:	8f 91       	pop	r24
    1f94:	7f 91       	pop	r23
    1f96:	6f 91       	pop	r22
    1f98:	5f 91       	pop	r21
    1f9a:	4f 91       	pop	r20
    1f9c:	3f 91       	pop	r19
    1f9e:	2f 91       	pop	r18
    1fa0:	0f 90       	pop	r0
    1fa2:	0b be       	out	0x3b, r0	; 59
    1fa4:	0f 90       	pop	r0
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	0f 90       	pop	r0
    1faa:	1f 90       	pop	r1
    1fac:	18 95       	reti

00001fae <__vector_20>:

/* TCC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_OVF_vect)      /* Overflow Interrupt */
    1fae:	1f 92       	push	r1
    1fb0:	0f 92       	push	r0
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	0f 92       	push	r0
    1fb6:	11 24       	eor	r1, r1
    1fb8:	0b b6       	in	r0, 0x3b	; 59
    1fba:	0f 92       	push	r0
    1fbc:	2f 93       	push	r18
    1fbe:	3f 93       	push	r19
    1fc0:	4f 93       	push	r20
    1fc2:	5f 93       	push	r21
    1fc4:	6f 93       	push	r22
    1fc6:	7f 93       	push	r23
    1fc8:	8f 93       	push	r24
    1fca:	9f 93       	push	r25
    1fcc:	af 93       	push	r26
    1fce:	bf 93       	push	r27
    1fd0:	ef 93       	push	r30
    1fd2:	ff 93       	push	r31
    1fd4:	e0 91 1f 21 	lds	r30, 0x211F
    1fd8:	f0 91 20 21 	lds	r31, 0x2120
    1fdc:	30 97       	sbiw	r30, 0x00	; 0
    1fde:	29 f0       	breq	.+10     	; 0x1fea <__vector_20+0x3c>
    1fe0:	80 91 15 22 	lds	r24, 0x2215
    1fe4:	90 91 16 22 	lds	r25, 0x2216
    1fe8:	19 95       	eicall
    1fea:	ff 91       	pop	r31
    1fec:	ef 91       	pop	r30
    1fee:	bf 91       	pop	r27
    1ff0:	af 91       	pop	r26
    1ff2:	9f 91       	pop	r25
    1ff4:	8f 91       	pop	r24
    1ff6:	7f 91       	pop	r23
    1ff8:	6f 91       	pop	r22
    1ffa:	5f 91       	pop	r21
    1ffc:	4f 91       	pop	r20
    1ffe:	3f 91       	pop	r19
    2000:	2f 91       	pop	r18
    2002:	0f 90       	pop	r0
    2004:	0b be       	out	0x3b, r0	; 59
    2006:	0f 90       	pop	r0
    2008:	0f be       	out	0x3f, r0	; 63
    200a:	0f 90       	pop	r0
    200c:	1f 90       	pop	r1
    200e:	18 95       	reti

00002010 <__vector_21>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_ERR_vect)      /* Error Interrupt */
    2010:	1f 92       	push	r1
    2012:	0f 92       	push	r0
    2014:	0f b6       	in	r0, 0x3f	; 63
    2016:	0f 92       	push	r0
    2018:	11 24       	eor	r1, r1
    201a:	0b b6       	in	r0, 0x3b	; 59
    201c:	0f 92       	push	r0
    201e:	2f 93       	push	r18
    2020:	3f 93       	push	r19
    2022:	4f 93       	push	r20
    2024:	5f 93       	push	r21
    2026:	6f 93       	push	r22
    2028:	7f 93       	push	r23
    202a:	8f 93       	push	r24
    202c:	9f 93       	push	r25
    202e:	af 93       	push	r26
    2030:	bf 93       	push	r27
    2032:	ef 93       	push	r30
    2034:	ff 93       	push	r31
    2036:	e0 91 21 21 	lds	r30, 0x2121
    203a:	f0 91 22 21 	lds	r31, 0x2122
    203e:	30 97       	sbiw	r30, 0x00	; 0
    2040:	29 f0       	breq	.+10     	; 0x204c <__vector_21+0x3c>
    2042:	80 91 17 22 	lds	r24, 0x2217
    2046:	90 91 18 22 	lds	r25, 0x2218
    204a:	19 95       	eicall
    204c:	ff 91       	pop	r31
    204e:	ef 91       	pop	r30
    2050:	bf 91       	pop	r27
    2052:	af 91       	pop	r26
    2054:	9f 91       	pop	r25
    2056:	8f 91       	pop	r24
    2058:	7f 91       	pop	r23
    205a:	6f 91       	pop	r22
    205c:	5f 91       	pop	r21
    205e:	4f 91       	pop	r20
    2060:	3f 91       	pop	r19
    2062:	2f 91       	pop	r18
    2064:	0f 90       	pop	r0
    2066:	0b be       	out	0x3b, r0	; 59
    2068:	0f 90       	pop	r0
    206a:	0f be       	out	0x3f, r0	; 63
    206c:	0f 90       	pop	r0
    206e:	1f 90       	pop	r1
    2070:	18 95       	reti

00002072 <__vector_22>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCA_vect)      /* Compare or Capture A Interrupt */
    2072:	1f 92       	push	r1
    2074:	0f 92       	push	r0
    2076:	0f b6       	in	r0, 0x3f	; 63
    2078:	0f 92       	push	r0
    207a:	11 24       	eor	r1, r1
    207c:	0b b6       	in	r0, 0x3b	; 59
    207e:	0f 92       	push	r0
    2080:	2f 93       	push	r18
    2082:	3f 93       	push	r19
    2084:	4f 93       	push	r20
    2086:	5f 93       	push	r21
    2088:	6f 93       	push	r22
    208a:	7f 93       	push	r23
    208c:	8f 93       	push	r24
    208e:	9f 93       	push	r25
    2090:	af 93       	push	r26
    2092:	bf 93       	push	r27
    2094:	ef 93       	push	r30
    2096:	ff 93       	push	r31
    2098:	e0 91 23 21 	lds	r30, 0x2123
    209c:	f0 91 24 21 	lds	r31, 0x2124
    20a0:	30 97       	sbiw	r30, 0x00	; 0
    20a2:	29 f0       	breq	.+10     	; 0x20ae <__vector_22+0x3c>
    20a4:	80 91 19 22 	lds	r24, 0x2219
    20a8:	90 91 1a 22 	lds	r25, 0x221A
    20ac:	19 95       	eicall
    20ae:	ff 91       	pop	r31
    20b0:	ef 91       	pop	r30
    20b2:	bf 91       	pop	r27
    20b4:	af 91       	pop	r26
    20b6:	9f 91       	pop	r25
    20b8:	8f 91       	pop	r24
    20ba:	7f 91       	pop	r23
    20bc:	6f 91       	pop	r22
    20be:	5f 91       	pop	r21
    20c0:	4f 91       	pop	r20
    20c2:	3f 91       	pop	r19
    20c4:	2f 91       	pop	r18
    20c6:	0f 90       	pop	r0
    20c8:	0b be       	out	0x3b, r0	; 59
    20ca:	0f 90       	pop	r0
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	0f 90       	pop	r0
    20d0:	1f 90       	pop	r1
    20d2:	18 95       	reti

000020d4 <__vector_23>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCC1_CCB_vect)      /* Compare or Capture B Interrupt */
    20d4:	1f 92       	push	r1
    20d6:	0f 92       	push	r0
    20d8:	0f b6       	in	r0, 0x3f	; 63
    20da:	0f 92       	push	r0
    20dc:	11 24       	eor	r1, r1
    20de:	0b b6       	in	r0, 0x3b	; 59
    20e0:	0f 92       	push	r0
    20e2:	2f 93       	push	r18
    20e4:	3f 93       	push	r19
    20e6:	4f 93       	push	r20
    20e8:	5f 93       	push	r21
    20ea:	6f 93       	push	r22
    20ec:	7f 93       	push	r23
    20ee:	8f 93       	push	r24
    20f0:	9f 93       	push	r25
    20f2:	af 93       	push	r26
    20f4:	bf 93       	push	r27
    20f6:	ef 93       	push	r30
    20f8:	ff 93       	push	r31
    20fa:	e0 91 25 21 	lds	r30, 0x2125
    20fe:	f0 91 26 21 	lds	r31, 0x2126
    2102:	30 97       	sbiw	r30, 0x00	; 0
    2104:	29 f0       	breq	.+10     	; 0x2110 <__vector_23+0x3c>
    2106:	80 91 1b 22 	lds	r24, 0x221B
    210a:	90 91 1c 22 	lds	r25, 0x221C
    210e:	19 95       	eicall
    2110:	ff 91       	pop	r31
    2112:	ef 91       	pop	r30
    2114:	bf 91       	pop	r27
    2116:	af 91       	pop	r26
    2118:	9f 91       	pop	r25
    211a:	8f 91       	pop	r24
    211c:	7f 91       	pop	r23
    211e:	6f 91       	pop	r22
    2120:	5f 91       	pop	r21
    2122:	4f 91       	pop	r20
    2124:	3f 91       	pop	r19
    2126:	2f 91       	pop	r18
    2128:	0f 90       	pop	r0
    212a:	0b be       	out	0x3b, r0	; 59
    212c:	0f 90       	pop	r0
    212e:	0f be       	out	0x3f, r0	; 63
    2130:	0f 90       	pop	r0
    2132:	1f 90       	pop	r1
    2134:	18 95       	reti

00002136 <__vector_24>:

/* SPIC interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIC_INT_vect)      /* SPI Interrupt */
    2136:	1f 92       	push	r1
    2138:	0f 92       	push	r0
    213a:	0f b6       	in	r0, 0x3f	; 63
    213c:	0f 92       	push	r0
    213e:	11 24       	eor	r1, r1
    2140:	0b b6       	in	r0, 0x3b	; 59
    2142:	0f 92       	push	r0
    2144:	2f 93       	push	r18
    2146:	3f 93       	push	r19
    2148:	4f 93       	push	r20
    214a:	5f 93       	push	r21
    214c:	6f 93       	push	r22
    214e:	7f 93       	push	r23
    2150:	8f 93       	push	r24
    2152:	9f 93       	push	r25
    2154:	af 93       	push	r26
    2156:	bf 93       	push	r27
    2158:	ef 93       	push	r30
    215a:	ff 93       	push	r31
    215c:	e0 91 27 21 	lds	r30, 0x2127
    2160:	f0 91 28 21 	lds	r31, 0x2128
    2164:	30 97       	sbiw	r30, 0x00	; 0
    2166:	29 f0       	breq	.+10     	; 0x2172 <__vector_24+0x3c>
    2168:	80 91 1d 22 	lds	r24, 0x221D
    216c:	90 91 1e 22 	lds	r25, 0x221E
    2170:	19 95       	eicall
    2172:	ff 91       	pop	r31
    2174:	ef 91       	pop	r30
    2176:	bf 91       	pop	r27
    2178:	af 91       	pop	r26
    217a:	9f 91       	pop	r25
    217c:	8f 91       	pop	r24
    217e:	7f 91       	pop	r23
    2180:	6f 91       	pop	r22
    2182:	5f 91       	pop	r21
    2184:	4f 91       	pop	r20
    2186:	3f 91       	pop	r19
    2188:	2f 91       	pop	r18
    218a:	0f 90       	pop	r0
    218c:	0b be       	out	0x3b, r0	; 59
    218e:	0f 90       	pop	r0
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	0f 90       	pop	r0
    2194:	1f 90       	pop	r1
    2196:	18 95       	reti

00002198 <__vector_25>:

/* USARTC0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_RXC_vect)      /* Reception Complete Interrupt */
    2198:	1f 92       	push	r1
    219a:	0f 92       	push	r0
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	0f 92       	push	r0
    21a0:	11 24       	eor	r1, r1
    21a2:	0b b6       	in	r0, 0x3b	; 59
    21a4:	0f 92       	push	r0
    21a6:	2f 93       	push	r18
    21a8:	3f 93       	push	r19
    21aa:	4f 93       	push	r20
    21ac:	5f 93       	push	r21
    21ae:	6f 93       	push	r22
    21b0:	7f 93       	push	r23
    21b2:	8f 93       	push	r24
    21b4:	9f 93       	push	r25
    21b6:	af 93       	push	r26
    21b8:	bf 93       	push	r27
    21ba:	ef 93       	push	r30
    21bc:	ff 93       	push	r31
    21be:	e0 91 29 21 	lds	r30, 0x2129
    21c2:	f0 91 2a 21 	lds	r31, 0x212A
    21c6:	30 97       	sbiw	r30, 0x00	; 0
    21c8:	29 f0       	breq	.+10     	; 0x21d4 <__vector_25+0x3c>
    21ca:	80 91 1f 22 	lds	r24, 0x221F
    21ce:	90 91 20 22 	lds	r25, 0x2220
    21d2:	19 95       	eicall
    21d4:	ff 91       	pop	r31
    21d6:	ef 91       	pop	r30
    21d8:	bf 91       	pop	r27
    21da:	af 91       	pop	r26
    21dc:	9f 91       	pop	r25
    21de:	8f 91       	pop	r24
    21e0:	7f 91       	pop	r23
    21e2:	6f 91       	pop	r22
    21e4:	5f 91       	pop	r21
    21e6:	4f 91       	pop	r20
    21e8:	3f 91       	pop	r19
    21ea:	2f 91       	pop	r18
    21ec:	0f 90       	pop	r0
    21ee:	0b be       	out	0x3b, r0	; 59
    21f0:	0f 90       	pop	r0
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	0f 90       	pop	r0
    21f6:	1f 90       	pop	r1
    21f8:	18 95       	reti

000021fa <__vector_26>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_DRE_vect)      /* Data Register Empty Interrupt */
    21fa:	1f 92       	push	r1
    21fc:	0f 92       	push	r0
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	0f 92       	push	r0
    2202:	11 24       	eor	r1, r1
    2204:	0b b6       	in	r0, 0x3b	; 59
    2206:	0f 92       	push	r0
    2208:	2f 93       	push	r18
    220a:	3f 93       	push	r19
    220c:	4f 93       	push	r20
    220e:	5f 93       	push	r21
    2210:	6f 93       	push	r22
    2212:	7f 93       	push	r23
    2214:	8f 93       	push	r24
    2216:	9f 93       	push	r25
    2218:	af 93       	push	r26
    221a:	bf 93       	push	r27
    221c:	ef 93       	push	r30
    221e:	ff 93       	push	r31
    2220:	e0 91 2b 21 	lds	r30, 0x212B
    2224:	f0 91 2c 21 	lds	r31, 0x212C
    2228:	30 97       	sbiw	r30, 0x00	; 0
    222a:	29 f0       	breq	.+10     	; 0x2236 <__vector_26+0x3c>
    222c:	80 91 21 22 	lds	r24, 0x2221
    2230:	90 91 22 22 	lds	r25, 0x2222
    2234:	19 95       	eicall
    2236:	ff 91       	pop	r31
    2238:	ef 91       	pop	r30
    223a:	bf 91       	pop	r27
    223c:	af 91       	pop	r26
    223e:	9f 91       	pop	r25
    2240:	8f 91       	pop	r24
    2242:	7f 91       	pop	r23
    2244:	6f 91       	pop	r22
    2246:	5f 91       	pop	r21
    2248:	4f 91       	pop	r20
    224a:	3f 91       	pop	r19
    224c:	2f 91       	pop	r18
    224e:	0f 90       	pop	r0
    2250:	0b be       	out	0x3b, r0	; 59
    2252:	0f 90       	pop	r0
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	0f 90       	pop	r0
    2258:	1f 90       	pop	r1
    225a:	18 95       	reti

0000225c <__vector_27>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC0_TXC_vect)      /* Transmission Complete Interrupt */
    225c:	1f 92       	push	r1
    225e:	0f 92       	push	r0
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	0f 92       	push	r0
    2264:	11 24       	eor	r1, r1
    2266:	0b b6       	in	r0, 0x3b	; 59
    2268:	0f 92       	push	r0
    226a:	2f 93       	push	r18
    226c:	3f 93       	push	r19
    226e:	4f 93       	push	r20
    2270:	5f 93       	push	r21
    2272:	6f 93       	push	r22
    2274:	7f 93       	push	r23
    2276:	8f 93       	push	r24
    2278:	9f 93       	push	r25
    227a:	af 93       	push	r26
    227c:	bf 93       	push	r27
    227e:	ef 93       	push	r30
    2280:	ff 93       	push	r31
    2282:	e0 91 2d 21 	lds	r30, 0x212D
    2286:	f0 91 2e 21 	lds	r31, 0x212E
    228a:	30 97       	sbiw	r30, 0x00	; 0
    228c:	29 f0       	breq	.+10     	; 0x2298 <__vector_27+0x3c>
    228e:	80 91 23 22 	lds	r24, 0x2223
    2292:	90 91 24 22 	lds	r25, 0x2224
    2296:	19 95       	eicall
    2298:	ff 91       	pop	r31
    229a:	ef 91       	pop	r30
    229c:	bf 91       	pop	r27
    229e:	af 91       	pop	r26
    22a0:	9f 91       	pop	r25
    22a2:	8f 91       	pop	r24
    22a4:	7f 91       	pop	r23
    22a6:	6f 91       	pop	r22
    22a8:	5f 91       	pop	r21
    22aa:	4f 91       	pop	r20
    22ac:	3f 91       	pop	r19
    22ae:	2f 91       	pop	r18
    22b0:	0f 90       	pop	r0
    22b2:	0b be       	out	0x3b, r0	; 59
    22b4:	0f 90       	pop	r0
    22b6:	0f be       	out	0x3f, r0	; 63
    22b8:	0f 90       	pop	r0
    22ba:	1f 90       	pop	r1
    22bc:	18 95       	reti

000022be <__vector_28>:

/* USARTC1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_RXC_vect)      /* Reception Complete Interrupt */
    22be:	1f 92       	push	r1
    22c0:	0f 92       	push	r0
    22c2:	0f b6       	in	r0, 0x3f	; 63
    22c4:	0f 92       	push	r0
    22c6:	11 24       	eor	r1, r1
    22c8:	0b b6       	in	r0, 0x3b	; 59
    22ca:	0f 92       	push	r0
    22cc:	2f 93       	push	r18
    22ce:	3f 93       	push	r19
    22d0:	4f 93       	push	r20
    22d2:	5f 93       	push	r21
    22d4:	6f 93       	push	r22
    22d6:	7f 93       	push	r23
    22d8:	8f 93       	push	r24
    22da:	9f 93       	push	r25
    22dc:	af 93       	push	r26
    22de:	bf 93       	push	r27
    22e0:	ef 93       	push	r30
    22e2:	ff 93       	push	r31
    22e4:	e0 91 2f 21 	lds	r30, 0x212F
    22e8:	f0 91 30 21 	lds	r31, 0x2130
    22ec:	30 97       	sbiw	r30, 0x00	; 0
    22ee:	29 f0       	breq	.+10     	; 0x22fa <__vector_28+0x3c>
    22f0:	80 91 25 22 	lds	r24, 0x2225
    22f4:	90 91 26 22 	lds	r25, 0x2226
    22f8:	19 95       	eicall
    22fa:	ff 91       	pop	r31
    22fc:	ef 91       	pop	r30
    22fe:	bf 91       	pop	r27
    2300:	af 91       	pop	r26
    2302:	9f 91       	pop	r25
    2304:	8f 91       	pop	r24
    2306:	7f 91       	pop	r23
    2308:	6f 91       	pop	r22
    230a:	5f 91       	pop	r21
    230c:	4f 91       	pop	r20
    230e:	3f 91       	pop	r19
    2310:	2f 91       	pop	r18
    2312:	0f 90       	pop	r0
    2314:	0b be       	out	0x3b, r0	; 59
    2316:	0f 90       	pop	r0
    2318:	0f be       	out	0x3f, r0	; 63
    231a:	0f 90       	pop	r0
    231c:	1f 90       	pop	r1
    231e:	18 95       	reti

00002320 <__vector_29>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_DRE_vect)      /* Data Register Empty Interrupt */
    2320:	1f 92       	push	r1
    2322:	0f 92       	push	r0
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	0f 92       	push	r0
    2328:	11 24       	eor	r1, r1
    232a:	0b b6       	in	r0, 0x3b	; 59
    232c:	0f 92       	push	r0
    232e:	2f 93       	push	r18
    2330:	3f 93       	push	r19
    2332:	4f 93       	push	r20
    2334:	5f 93       	push	r21
    2336:	6f 93       	push	r22
    2338:	7f 93       	push	r23
    233a:	8f 93       	push	r24
    233c:	9f 93       	push	r25
    233e:	af 93       	push	r26
    2340:	bf 93       	push	r27
    2342:	ef 93       	push	r30
    2344:	ff 93       	push	r31
    2346:	e0 91 31 21 	lds	r30, 0x2131
    234a:	f0 91 32 21 	lds	r31, 0x2132
    234e:	30 97       	sbiw	r30, 0x00	; 0
    2350:	29 f0       	breq	.+10     	; 0x235c <__vector_29+0x3c>
    2352:	80 91 27 22 	lds	r24, 0x2227
    2356:	90 91 28 22 	lds	r25, 0x2228
    235a:	19 95       	eicall
    235c:	ff 91       	pop	r31
    235e:	ef 91       	pop	r30
    2360:	bf 91       	pop	r27
    2362:	af 91       	pop	r26
    2364:	9f 91       	pop	r25
    2366:	8f 91       	pop	r24
    2368:	7f 91       	pop	r23
    236a:	6f 91       	pop	r22
    236c:	5f 91       	pop	r21
    236e:	4f 91       	pop	r20
    2370:	3f 91       	pop	r19
    2372:	2f 91       	pop	r18
    2374:	0f 90       	pop	r0
    2376:	0b be       	out	0x3b, r0	; 59
    2378:	0f 90       	pop	r0
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	0f 90       	pop	r0
    237e:	1f 90       	pop	r1
    2380:	18 95       	reti

00002382 <__vector_30>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTC1_TXC_vect)      /* Transmission Complete Interrupt */
    2382:	1f 92       	push	r1
    2384:	0f 92       	push	r0
    2386:	0f b6       	in	r0, 0x3f	; 63
    2388:	0f 92       	push	r0
    238a:	11 24       	eor	r1, r1
    238c:	0b b6       	in	r0, 0x3b	; 59
    238e:	0f 92       	push	r0
    2390:	2f 93       	push	r18
    2392:	3f 93       	push	r19
    2394:	4f 93       	push	r20
    2396:	5f 93       	push	r21
    2398:	6f 93       	push	r22
    239a:	7f 93       	push	r23
    239c:	8f 93       	push	r24
    239e:	9f 93       	push	r25
    23a0:	af 93       	push	r26
    23a2:	bf 93       	push	r27
    23a4:	ef 93       	push	r30
    23a6:	ff 93       	push	r31
    23a8:	e0 91 33 21 	lds	r30, 0x2133
    23ac:	f0 91 34 21 	lds	r31, 0x2134
    23b0:	30 97       	sbiw	r30, 0x00	; 0
    23b2:	29 f0       	breq	.+10     	; 0x23be <__vector_30+0x3c>
    23b4:	80 91 29 22 	lds	r24, 0x2229
    23b8:	90 91 2a 22 	lds	r25, 0x222A
    23bc:	19 95       	eicall
    23be:	ff 91       	pop	r31
    23c0:	ef 91       	pop	r30
    23c2:	bf 91       	pop	r27
    23c4:	af 91       	pop	r26
    23c6:	9f 91       	pop	r25
    23c8:	8f 91       	pop	r24
    23ca:	7f 91       	pop	r23
    23cc:	6f 91       	pop	r22
    23ce:	5f 91       	pop	r21
    23d0:	4f 91       	pop	r20
    23d2:	3f 91       	pop	r19
    23d4:	2f 91       	pop	r18
    23d6:	0f 90       	pop	r0
    23d8:	0b be       	out	0x3b, r0	; 59
    23da:	0f 90       	pop	r0
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	0f 90       	pop	r0
    23e0:	1f 90       	pop	r1
    23e2:	18 95       	reti

000023e4 <__vector_31>:

/* AES interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(AES_INT_vect)      /* AES Interrupt */
    23e4:	1f 92       	push	r1
    23e6:	0f 92       	push	r0
    23e8:	0f b6       	in	r0, 0x3f	; 63
    23ea:	0f 92       	push	r0
    23ec:	11 24       	eor	r1, r1
    23ee:	0b b6       	in	r0, 0x3b	; 59
    23f0:	0f 92       	push	r0
    23f2:	2f 93       	push	r18
    23f4:	3f 93       	push	r19
    23f6:	4f 93       	push	r20
    23f8:	5f 93       	push	r21
    23fa:	6f 93       	push	r22
    23fc:	7f 93       	push	r23
    23fe:	8f 93       	push	r24
    2400:	9f 93       	push	r25
    2402:	af 93       	push	r26
    2404:	bf 93       	push	r27
    2406:	ef 93       	push	r30
    2408:	ff 93       	push	r31
    240a:	e0 91 35 21 	lds	r30, 0x2135
    240e:	f0 91 36 21 	lds	r31, 0x2136
    2412:	30 97       	sbiw	r30, 0x00	; 0
    2414:	29 f0       	breq	.+10     	; 0x2420 <__vector_31+0x3c>
    2416:	80 91 2b 22 	lds	r24, 0x222B
    241a:	90 91 2c 22 	lds	r25, 0x222C
    241e:	19 95       	eicall
    2420:	ff 91       	pop	r31
    2422:	ef 91       	pop	r30
    2424:	bf 91       	pop	r27
    2426:	af 91       	pop	r26
    2428:	9f 91       	pop	r25
    242a:	8f 91       	pop	r24
    242c:	7f 91       	pop	r23
    242e:	6f 91       	pop	r22
    2430:	5f 91       	pop	r21
    2432:	4f 91       	pop	r20
    2434:	3f 91       	pop	r19
    2436:	2f 91       	pop	r18
    2438:	0f 90       	pop	r0
    243a:	0b be       	out	0x3b, r0	; 59
    243c:	0f 90       	pop	r0
    243e:	0f be       	out	0x3f, r0	; 63
    2440:	0f 90       	pop	r0
    2442:	1f 90       	pop	r1
    2444:	18 95       	reti

00002446 <__vector_32>:

/* NVM interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_EE_vect)      /* EE Interrupt */
    2446:	1f 92       	push	r1
    2448:	0f 92       	push	r0
    244a:	0f b6       	in	r0, 0x3f	; 63
    244c:	0f 92       	push	r0
    244e:	11 24       	eor	r1, r1
    2450:	0b b6       	in	r0, 0x3b	; 59
    2452:	0f 92       	push	r0
    2454:	2f 93       	push	r18
    2456:	3f 93       	push	r19
    2458:	4f 93       	push	r20
    245a:	5f 93       	push	r21
    245c:	6f 93       	push	r22
    245e:	7f 93       	push	r23
    2460:	8f 93       	push	r24
    2462:	9f 93       	push	r25
    2464:	af 93       	push	r26
    2466:	bf 93       	push	r27
    2468:	ef 93       	push	r30
    246a:	ff 93       	push	r31
    246c:	e0 91 37 21 	lds	r30, 0x2137
    2470:	f0 91 38 21 	lds	r31, 0x2138
    2474:	30 97       	sbiw	r30, 0x00	; 0
    2476:	29 f0       	breq	.+10     	; 0x2482 <__vector_32+0x3c>
    2478:	80 91 2d 22 	lds	r24, 0x222D
    247c:	90 91 2e 22 	lds	r25, 0x222E
    2480:	19 95       	eicall
    2482:	ff 91       	pop	r31
    2484:	ef 91       	pop	r30
    2486:	bf 91       	pop	r27
    2488:	af 91       	pop	r26
    248a:	9f 91       	pop	r25
    248c:	8f 91       	pop	r24
    248e:	7f 91       	pop	r23
    2490:	6f 91       	pop	r22
    2492:	5f 91       	pop	r21
    2494:	4f 91       	pop	r20
    2496:	3f 91       	pop	r19
    2498:	2f 91       	pop	r18
    249a:	0f 90       	pop	r0
    249c:	0b be       	out	0x3b, r0	; 59
    249e:	0f 90       	pop	r0
    24a0:	0f be       	out	0x3f, r0	; 63
    24a2:	0f 90       	pop	r0
    24a4:	1f 90       	pop	r1
    24a6:	18 95       	reti

000024a8 <__vector_33>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(NVM_SPM_vect)      /* SPM Interrupt */
    24a8:	1f 92       	push	r1
    24aa:	0f 92       	push	r0
    24ac:	0f b6       	in	r0, 0x3f	; 63
    24ae:	0f 92       	push	r0
    24b0:	11 24       	eor	r1, r1
    24b2:	0b b6       	in	r0, 0x3b	; 59
    24b4:	0f 92       	push	r0
    24b6:	2f 93       	push	r18
    24b8:	3f 93       	push	r19
    24ba:	4f 93       	push	r20
    24bc:	5f 93       	push	r21
    24be:	6f 93       	push	r22
    24c0:	7f 93       	push	r23
    24c2:	8f 93       	push	r24
    24c4:	9f 93       	push	r25
    24c6:	af 93       	push	r26
    24c8:	bf 93       	push	r27
    24ca:	ef 93       	push	r30
    24cc:	ff 93       	push	r31
    24ce:	e0 91 39 21 	lds	r30, 0x2139
    24d2:	f0 91 3a 21 	lds	r31, 0x213A
    24d6:	30 97       	sbiw	r30, 0x00	; 0
    24d8:	29 f0       	breq	.+10     	; 0x24e4 <__vector_33+0x3c>
    24da:	80 91 2f 22 	lds	r24, 0x222F
    24de:	90 91 30 22 	lds	r25, 0x2230
    24e2:	19 95       	eicall
    24e4:	ff 91       	pop	r31
    24e6:	ef 91       	pop	r30
    24e8:	bf 91       	pop	r27
    24ea:	af 91       	pop	r26
    24ec:	9f 91       	pop	r25
    24ee:	8f 91       	pop	r24
    24f0:	7f 91       	pop	r23
    24f2:	6f 91       	pop	r22
    24f4:	5f 91       	pop	r21
    24f6:	4f 91       	pop	r20
    24f8:	3f 91       	pop	r19
    24fa:	2f 91       	pop	r18
    24fc:	0f 90       	pop	r0
    24fe:	0b be       	out	0x3b, r0	; 59
    2500:	0f 90       	pop	r0
    2502:	0f be       	out	0x3f, r0	; 63
    2504:	0f 90       	pop	r0
    2506:	1f 90       	pop	r1
    2508:	18 95       	reti

0000250a <__vector_34>:

/* PORTB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT0_vect)      /* External Interrupt 0 */
    250a:	1f 92       	push	r1
    250c:	0f 92       	push	r0
    250e:	0f b6       	in	r0, 0x3f	; 63
    2510:	0f 92       	push	r0
    2512:	11 24       	eor	r1, r1
    2514:	0b b6       	in	r0, 0x3b	; 59
    2516:	0f 92       	push	r0
    2518:	2f 93       	push	r18
    251a:	3f 93       	push	r19
    251c:	4f 93       	push	r20
    251e:	5f 93       	push	r21
    2520:	6f 93       	push	r22
    2522:	7f 93       	push	r23
    2524:	8f 93       	push	r24
    2526:	9f 93       	push	r25
    2528:	af 93       	push	r26
    252a:	bf 93       	push	r27
    252c:	ef 93       	push	r30
    252e:	ff 93       	push	r31
    2530:	e0 91 3b 21 	lds	r30, 0x213B
    2534:	f0 91 3c 21 	lds	r31, 0x213C
    2538:	30 97       	sbiw	r30, 0x00	; 0
    253a:	29 f0       	breq	.+10     	; 0x2546 <__vector_34+0x3c>
    253c:	80 91 31 22 	lds	r24, 0x2231
    2540:	90 91 32 22 	lds	r25, 0x2232
    2544:	19 95       	eicall
    2546:	ff 91       	pop	r31
    2548:	ef 91       	pop	r30
    254a:	bf 91       	pop	r27
    254c:	af 91       	pop	r26
    254e:	9f 91       	pop	r25
    2550:	8f 91       	pop	r24
    2552:	7f 91       	pop	r23
    2554:	6f 91       	pop	r22
    2556:	5f 91       	pop	r21
    2558:	4f 91       	pop	r20
    255a:	3f 91       	pop	r19
    255c:	2f 91       	pop	r18
    255e:	0f 90       	pop	r0
    2560:	0b be       	out	0x3b, r0	; 59
    2562:	0f 90       	pop	r0
    2564:	0f be       	out	0x3f, r0	; 63
    2566:	0f 90       	pop	r0
    2568:	1f 90       	pop	r1
    256a:	18 95       	reti

0000256c <__vector_35>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTB_INT1_vect)      /* External Interrupt 1 */
    256c:	1f 92       	push	r1
    256e:	0f 92       	push	r0
    2570:	0f b6       	in	r0, 0x3f	; 63
    2572:	0f 92       	push	r0
    2574:	11 24       	eor	r1, r1
    2576:	0b b6       	in	r0, 0x3b	; 59
    2578:	0f 92       	push	r0
    257a:	2f 93       	push	r18
    257c:	3f 93       	push	r19
    257e:	4f 93       	push	r20
    2580:	5f 93       	push	r21
    2582:	6f 93       	push	r22
    2584:	7f 93       	push	r23
    2586:	8f 93       	push	r24
    2588:	9f 93       	push	r25
    258a:	af 93       	push	r26
    258c:	bf 93       	push	r27
    258e:	ef 93       	push	r30
    2590:	ff 93       	push	r31
    2592:	e0 91 3d 21 	lds	r30, 0x213D
    2596:	f0 91 3e 21 	lds	r31, 0x213E
    259a:	30 97       	sbiw	r30, 0x00	; 0
    259c:	29 f0       	breq	.+10     	; 0x25a8 <__vector_35+0x3c>
    259e:	80 91 33 22 	lds	r24, 0x2233
    25a2:	90 91 34 22 	lds	r25, 0x2234
    25a6:	19 95       	eicall
    25a8:	ff 91       	pop	r31
    25aa:	ef 91       	pop	r30
    25ac:	bf 91       	pop	r27
    25ae:	af 91       	pop	r26
    25b0:	9f 91       	pop	r25
    25b2:	8f 91       	pop	r24
    25b4:	7f 91       	pop	r23
    25b6:	6f 91       	pop	r22
    25b8:	5f 91       	pop	r21
    25ba:	4f 91       	pop	r20
    25bc:	3f 91       	pop	r19
    25be:	2f 91       	pop	r18
    25c0:	0f 90       	pop	r0
    25c2:	0b be       	out	0x3b, r0	; 59
    25c4:	0f 90       	pop	r0
    25c6:	0f be       	out	0x3f, r0	; 63
    25c8:	0f 90       	pop	r0
    25ca:	1f 90       	pop	r1
    25cc:	18 95       	reti

000025ce <__vector_36>:

/* ACB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC0_vect)      /* AC0 Interrupt */
    25ce:	1f 92       	push	r1
    25d0:	0f 92       	push	r0
    25d2:	0f b6       	in	r0, 0x3f	; 63
    25d4:	0f 92       	push	r0
    25d6:	11 24       	eor	r1, r1
    25d8:	0b b6       	in	r0, 0x3b	; 59
    25da:	0f 92       	push	r0
    25dc:	2f 93       	push	r18
    25de:	3f 93       	push	r19
    25e0:	4f 93       	push	r20
    25e2:	5f 93       	push	r21
    25e4:	6f 93       	push	r22
    25e6:	7f 93       	push	r23
    25e8:	8f 93       	push	r24
    25ea:	9f 93       	push	r25
    25ec:	af 93       	push	r26
    25ee:	bf 93       	push	r27
    25f0:	ef 93       	push	r30
    25f2:	ff 93       	push	r31
    25f4:	e0 91 3f 21 	lds	r30, 0x213F
    25f8:	f0 91 40 21 	lds	r31, 0x2140
    25fc:	30 97       	sbiw	r30, 0x00	; 0
    25fe:	29 f0       	breq	.+10     	; 0x260a <__vector_36+0x3c>
    2600:	80 91 35 22 	lds	r24, 0x2235
    2604:	90 91 36 22 	lds	r25, 0x2236
    2608:	19 95       	eicall
    260a:	ff 91       	pop	r31
    260c:	ef 91       	pop	r30
    260e:	bf 91       	pop	r27
    2610:	af 91       	pop	r26
    2612:	9f 91       	pop	r25
    2614:	8f 91       	pop	r24
    2616:	7f 91       	pop	r23
    2618:	6f 91       	pop	r22
    261a:	5f 91       	pop	r21
    261c:	4f 91       	pop	r20
    261e:	3f 91       	pop	r19
    2620:	2f 91       	pop	r18
    2622:	0f 90       	pop	r0
    2624:	0b be       	out	0x3b, r0	; 59
    2626:	0f 90       	pop	r0
    2628:	0f be       	out	0x3f, r0	; 63
    262a:	0f 90       	pop	r0
    262c:	1f 90       	pop	r1
    262e:	18 95       	reti

00002630 <__vector_37>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_AC1_vect)      /* AC1 Interrupt */
    2630:	1f 92       	push	r1
    2632:	0f 92       	push	r0
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	0f 92       	push	r0
    2638:	11 24       	eor	r1, r1
    263a:	0b b6       	in	r0, 0x3b	; 59
    263c:	0f 92       	push	r0
    263e:	2f 93       	push	r18
    2640:	3f 93       	push	r19
    2642:	4f 93       	push	r20
    2644:	5f 93       	push	r21
    2646:	6f 93       	push	r22
    2648:	7f 93       	push	r23
    264a:	8f 93       	push	r24
    264c:	9f 93       	push	r25
    264e:	af 93       	push	r26
    2650:	bf 93       	push	r27
    2652:	ef 93       	push	r30
    2654:	ff 93       	push	r31
    2656:	e0 91 41 21 	lds	r30, 0x2141
    265a:	f0 91 42 21 	lds	r31, 0x2142
    265e:	30 97       	sbiw	r30, 0x00	; 0
    2660:	29 f0       	breq	.+10     	; 0x266c <__vector_37+0x3c>
    2662:	80 91 37 22 	lds	r24, 0x2237
    2666:	90 91 38 22 	lds	r25, 0x2238
    266a:	19 95       	eicall
    266c:	ff 91       	pop	r31
    266e:	ef 91       	pop	r30
    2670:	bf 91       	pop	r27
    2672:	af 91       	pop	r26
    2674:	9f 91       	pop	r25
    2676:	8f 91       	pop	r24
    2678:	7f 91       	pop	r23
    267a:	6f 91       	pop	r22
    267c:	5f 91       	pop	r21
    267e:	4f 91       	pop	r20
    2680:	3f 91       	pop	r19
    2682:	2f 91       	pop	r18
    2684:	0f 90       	pop	r0
    2686:	0b be       	out	0x3b, r0	; 59
    2688:	0f 90       	pop	r0
    268a:	0f be       	out	0x3f, r0	; 63
    268c:	0f 90       	pop	r0
    268e:	1f 90       	pop	r1
    2690:	18 95       	reti

00002692 <__vector_38>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACB_ACW_vect)      /* ACW Window Mode Interrupt */
    2692:	1f 92       	push	r1
    2694:	0f 92       	push	r0
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	0f 92       	push	r0
    269a:	11 24       	eor	r1, r1
    269c:	0b b6       	in	r0, 0x3b	; 59
    269e:	0f 92       	push	r0
    26a0:	2f 93       	push	r18
    26a2:	3f 93       	push	r19
    26a4:	4f 93       	push	r20
    26a6:	5f 93       	push	r21
    26a8:	6f 93       	push	r22
    26aa:	7f 93       	push	r23
    26ac:	8f 93       	push	r24
    26ae:	9f 93       	push	r25
    26b0:	af 93       	push	r26
    26b2:	bf 93       	push	r27
    26b4:	ef 93       	push	r30
    26b6:	ff 93       	push	r31
    26b8:	e0 91 43 21 	lds	r30, 0x2143
    26bc:	f0 91 44 21 	lds	r31, 0x2144
    26c0:	30 97       	sbiw	r30, 0x00	; 0
    26c2:	29 f0       	breq	.+10     	; 0x26ce <__vector_38+0x3c>
    26c4:	80 91 39 22 	lds	r24, 0x2239
    26c8:	90 91 3a 22 	lds	r25, 0x223A
    26cc:	19 95       	eicall
    26ce:	ff 91       	pop	r31
    26d0:	ef 91       	pop	r30
    26d2:	bf 91       	pop	r27
    26d4:	af 91       	pop	r26
    26d6:	9f 91       	pop	r25
    26d8:	8f 91       	pop	r24
    26da:	7f 91       	pop	r23
    26dc:	6f 91       	pop	r22
    26de:	5f 91       	pop	r21
    26e0:	4f 91       	pop	r20
    26e2:	3f 91       	pop	r19
    26e4:	2f 91       	pop	r18
    26e6:	0f 90       	pop	r0
    26e8:	0b be       	out	0x3b, r0	; 59
    26ea:	0f 90       	pop	r0
    26ec:	0f be       	out	0x3f, r0	; 63
    26ee:	0f 90       	pop	r0
    26f0:	1f 90       	pop	r1
    26f2:	18 95       	reti

000026f4 <__vector_39>:

/* ADCB interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH0_vect)      /* Interrupt 0 */
    26f4:	1f 92       	push	r1
    26f6:	0f 92       	push	r0
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	0f 92       	push	r0
    26fc:	11 24       	eor	r1, r1
    26fe:	0b b6       	in	r0, 0x3b	; 59
    2700:	0f 92       	push	r0
    2702:	2f 93       	push	r18
    2704:	3f 93       	push	r19
    2706:	4f 93       	push	r20
    2708:	5f 93       	push	r21
    270a:	6f 93       	push	r22
    270c:	7f 93       	push	r23
    270e:	8f 93       	push	r24
    2710:	9f 93       	push	r25
    2712:	af 93       	push	r26
    2714:	bf 93       	push	r27
    2716:	ef 93       	push	r30
    2718:	ff 93       	push	r31
    271a:	e0 91 45 21 	lds	r30, 0x2145
    271e:	f0 91 46 21 	lds	r31, 0x2146
    2722:	30 97       	sbiw	r30, 0x00	; 0
    2724:	29 f0       	breq	.+10     	; 0x2730 <__vector_39+0x3c>
    2726:	80 91 3b 22 	lds	r24, 0x223B
    272a:	90 91 3c 22 	lds	r25, 0x223C
    272e:	19 95       	eicall
    2730:	ff 91       	pop	r31
    2732:	ef 91       	pop	r30
    2734:	bf 91       	pop	r27
    2736:	af 91       	pop	r26
    2738:	9f 91       	pop	r25
    273a:	8f 91       	pop	r24
    273c:	7f 91       	pop	r23
    273e:	6f 91       	pop	r22
    2740:	5f 91       	pop	r21
    2742:	4f 91       	pop	r20
    2744:	3f 91       	pop	r19
    2746:	2f 91       	pop	r18
    2748:	0f 90       	pop	r0
    274a:	0b be       	out	0x3b, r0	; 59
    274c:	0f 90       	pop	r0
    274e:	0f be       	out	0x3f, r0	; 63
    2750:	0f 90       	pop	r0
    2752:	1f 90       	pop	r1
    2754:	18 95       	reti

00002756 <__vector_40>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH1_vect)      /* Interrupt 1 */
    2756:	1f 92       	push	r1
    2758:	0f 92       	push	r0
    275a:	0f b6       	in	r0, 0x3f	; 63
    275c:	0f 92       	push	r0
    275e:	11 24       	eor	r1, r1
    2760:	0b b6       	in	r0, 0x3b	; 59
    2762:	0f 92       	push	r0
    2764:	2f 93       	push	r18
    2766:	3f 93       	push	r19
    2768:	4f 93       	push	r20
    276a:	5f 93       	push	r21
    276c:	6f 93       	push	r22
    276e:	7f 93       	push	r23
    2770:	8f 93       	push	r24
    2772:	9f 93       	push	r25
    2774:	af 93       	push	r26
    2776:	bf 93       	push	r27
    2778:	ef 93       	push	r30
    277a:	ff 93       	push	r31
    277c:	e0 91 47 21 	lds	r30, 0x2147
    2780:	f0 91 48 21 	lds	r31, 0x2148
    2784:	30 97       	sbiw	r30, 0x00	; 0
    2786:	29 f0       	breq	.+10     	; 0x2792 <__vector_40+0x3c>
    2788:	80 91 3d 22 	lds	r24, 0x223D
    278c:	90 91 3e 22 	lds	r25, 0x223E
    2790:	19 95       	eicall
    2792:	ff 91       	pop	r31
    2794:	ef 91       	pop	r30
    2796:	bf 91       	pop	r27
    2798:	af 91       	pop	r26
    279a:	9f 91       	pop	r25
    279c:	8f 91       	pop	r24
    279e:	7f 91       	pop	r23
    27a0:	6f 91       	pop	r22
    27a2:	5f 91       	pop	r21
    27a4:	4f 91       	pop	r20
    27a6:	3f 91       	pop	r19
    27a8:	2f 91       	pop	r18
    27aa:	0f 90       	pop	r0
    27ac:	0b be       	out	0x3b, r0	; 59
    27ae:	0f 90       	pop	r0
    27b0:	0f be       	out	0x3f, r0	; 63
    27b2:	0f 90       	pop	r0
    27b4:	1f 90       	pop	r1
    27b6:	18 95       	reti

000027b8 <__vector_41>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH2_vect)      /* Interrupt 2 */
    27b8:	1f 92       	push	r1
    27ba:	0f 92       	push	r0
    27bc:	0f b6       	in	r0, 0x3f	; 63
    27be:	0f 92       	push	r0
    27c0:	11 24       	eor	r1, r1
    27c2:	0b b6       	in	r0, 0x3b	; 59
    27c4:	0f 92       	push	r0
    27c6:	2f 93       	push	r18
    27c8:	3f 93       	push	r19
    27ca:	4f 93       	push	r20
    27cc:	5f 93       	push	r21
    27ce:	6f 93       	push	r22
    27d0:	7f 93       	push	r23
    27d2:	8f 93       	push	r24
    27d4:	9f 93       	push	r25
    27d6:	af 93       	push	r26
    27d8:	bf 93       	push	r27
    27da:	ef 93       	push	r30
    27dc:	ff 93       	push	r31
    27de:	e0 91 49 21 	lds	r30, 0x2149
    27e2:	f0 91 4a 21 	lds	r31, 0x214A
    27e6:	30 97       	sbiw	r30, 0x00	; 0
    27e8:	29 f0       	breq	.+10     	; 0x27f4 <__vector_41+0x3c>
    27ea:	80 91 3f 22 	lds	r24, 0x223F
    27ee:	90 91 40 22 	lds	r25, 0x2240
    27f2:	19 95       	eicall
    27f4:	ff 91       	pop	r31
    27f6:	ef 91       	pop	r30
    27f8:	bf 91       	pop	r27
    27fa:	af 91       	pop	r26
    27fc:	9f 91       	pop	r25
    27fe:	8f 91       	pop	r24
    2800:	7f 91       	pop	r23
    2802:	6f 91       	pop	r22
    2804:	5f 91       	pop	r21
    2806:	4f 91       	pop	r20
    2808:	3f 91       	pop	r19
    280a:	2f 91       	pop	r18
    280c:	0f 90       	pop	r0
    280e:	0b be       	out	0x3b, r0	; 59
    2810:	0f 90       	pop	r0
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	0f 90       	pop	r0
    2816:	1f 90       	pop	r1
    2818:	18 95       	reti

0000281a <__vector_42>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCB_CH3_vect)      /* Interrupt 3 */
    281a:	1f 92       	push	r1
    281c:	0f 92       	push	r0
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	0f 92       	push	r0
    2822:	11 24       	eor	r1, r1
    2824:	0b b6       	in	r0, 0x3b	; 59
    2826:	0f 92       	push	r0
    2828:	2f 93       	push	r18
    282a:	3f 93       	push	r19
    282c:	4f 93       	push	r20
    282e:	5f 93       	push	r21
    2830:	6f 93       	push	r22
    2832:	7f 93       	push	r23
    2834:	8f 93       	push	r24
    2836:	9f 93       	push	r25
    2838:	af 93       	push	r26
    283a:	bf 93       	push	r27
    283c:	ef 93       	push	r30
    283e:	ff 93       	push	r31
    2840:	e0 91 4b 21 	lds	r30, 0x214B
    2844:	f0 91 4c 21 	lds	r31, 0x214C
    2848:	30 97       	sbiw	r30, 0x00	; 0
    284a:	29 f0       	breq	.+10     	; 0x2856 <__vector_42+0x3c>
    284c:	80 91 41 22 	lds	r24, 0x2241
    2850:	90 91 42 22 	lds	r25, 0x2242
    2854:	19 95       	eicall
    2856:	ff 91       	pop	r31
    2858:	ef 91       	pop	r30
    285a:	bf 91       	pop	r27
    285c:	af 91       	pop	r26
    285e:	9f 91       	pop	r25
    2860:	8f 91       	pop	r24
    2862:	7f 91       	pop	r23
    2864:	6f 91       	pop	r22
    2866:	5f 91       	pop	r21
    2868:	4f 91       	pop	r20
    286a:	3f 91       	pop	r19
    286c:	2f 91       	pop	r18
    286e:	0f 90       	pop	r0
    2870:	0b be       	out	0x3b, r0	; 59
    2872:	0f 90       	pop	r0
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	0f 90       	pop	r0
    2878:	1f 90       	pop	r1
    287a:	18 95       	reti

0000287c <__vector_43>:

/* PORTE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT0_vect)      /* External Interrupt 0 */
    287c:	1f 92       	push	r1
    287e:	0f 92       	push	r0
    2880:	0f b6       	in	r0, 0x3f	; 63
    2882:	0f 92       	push	r0
    2884:	11 24       	eor	r1, r1
    2886:	0b b6       	in	r0, 0x3b	; 59
    2888:	0f 92       	push	r0
    288a:	2f 93       	push	r18
    288c:	3f 93       	push	r19
    288e:	4f 93       	push	r20
    2890:	5f 93       	push	r21
    2892:	6f 93       	push	r22
    2894:	7f 93       	push	r23
    2896:	8f 93       	push	r24
    2898:	9f 93       	push	r25
    289a:	af 93       	push	r26
    289c:	bf 93       	push	r27
    289e:	ef 93       	push	r30
    28a0:	ff 93       	push	r31
    28a2:	e0 91 4d 21 	lds	r30, 0x214D
    28a6:	f0 91 4e 21 	lds	r31, 0x214E
    28aa:	30 97       	sbiw	r30, 0x00	; 0
    28ac:	29 f0       	breq	.+10     	; 0x28b8 <__vector_43+0x3c>
    28ae:	80 91 43 22 	lds	r24, 0x2243
    28b2:	90 91 44 22 	lds	r25, 0x2244
    28b6:	19 95       	eicall
    28b8:	ff 91       	pop	r31
    28ba:	ef 91       	pop	r30
    28bc:	bf 91       	pop	r27
    28be:	af 91       	pop	r26
    28c0:	9f 91       	pop	r25
    28c2:	8f 91       	pop	r24
    28c4:	7f 91       	pop	r23
    28c6:	6f 91       	pop	r22
    28c8:	5f 91       	pop	r21
    28ca:	4f 91       	pop	r20
    28cc:	3f 91       	pop	r19
    28ce:	2f 91       	pop	r18
    28d0:	0f 90       	pop	r0
    28d2:	0b be       	out	0x3b, r0	; 59
    28d4:	0f 90       	pop	r0
    28d6:	0f be       	out	0x3f, r0	; 63
    28d8:	0f 90       	pop	r0
    28da:	1f 90       	pop	r1
    28dc:	18 95       	reti

000028de <__vector_44>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTE_INT1_vect)      /* External Interrupt 1 */
    28de:	1f 92       	push	r1
    28e0:	0f 92       	push	r0
    28e2:	0f b6       	in	r0, 0x3f	; 63
    28e4:	0f 92       	push	r0
    28e6:	11 24       	eor	r1, r1
    28e8:	0b b6       	in	r0, 0x3b	; 59
    28ea:	0f 92       	push	r0
    28ec:	2f 93       	push	r18
    28ee:	3f 93       	push	r19
    28f0:	4f 93       	push	r20
    28f2:	5f 93       	push	r21
    28f4:	6f 93       	push	r22
    28f6:	7f 93       	push	r23
    28f8:	8f 93       	push	r24
    28fa:	9f 93       	push	r25
    28fc:	af 93       	push	r26
    28fe:	bf 93       	push	r27
    2900:	ef 93       	push	r30
    2902:	ff 93       	push	r31
    2904:	e0 91 4f 21 	lds	r30, 0x214F
    2908:	f0 91 50 21 	lds	r31, 0x2150
    290c:	30 97       	sbiw	r30, 0x00	; 0
    290e:	29 f0       	breq	.+10     	; 0x291a <__vector_44+0x3c>
    2910:	80 91 45 22 	lds	r24, 0x2245
    2914:	90 91 46 22 	lds	r25, 0x2246
    2918:	19 95       	eicall
    291a:	ff 91       	pop	r31
    291c:	ef 91       	pop	r30
    291e:	bf 91       	pop	r27
    2920:	af 91       	pop	r26
    2922:	9f 91       	pop	r25
    2924:	8f 91       	pop	r24
    2926:	7f 91       	pop	r23
    2928:	6f 91       	pop	r22
    292a:	5f 91       	pop	r21
    292c:	4f 91       	pop	r20
    292e:	3f 91       	pop	r19
    2930:	2f 91       	pop	r18
    2932:	0f 90       	pop	r0
    2934:	0b be       	out	0x3b, r0	; 59
    2936:	0f 90       	pop	r0
    2938:	0f be       	out	0x3f, r0	; 63
    293a:	0f 90       	pop	r0
    293c:	1f 90       	pop	r1
    293e:	18 95       	reti

00002940 <__vector_45>:

/* TWIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIS_vect)      /* TWI Slave Interrupt */
    2940:	1f 92       	push	r1
    2942:	0f 92       	push	r0
    2944:	0f b6       	in	r0, 0x3f	; 63
    2946:	0f 92       	push	r0
    2948:	11 24       	eor	r1, r1
    294a:	0b b6       	in	r0, 0x3b	; 59
    294c:	0f 92       	push	r0
    294e:	2f 93       	push	r18
    2950:	3f 93       	push	r19
    2952:	4f 93       	push	r20
    2954:	5f 93       	push	r21
    2956:	6f 93       	push	r22
    2958:	7f 93       	push	r23
    295a:	8f 93       	push	r24
    295c:	9f 93       	push	r25
    295e:	af 93       	push	r26
    2960:	bf 93       	push	r27
    2962:	ef 93       	push	r30
    2964:	ff 93       	push	r31
    2966:	e0 91 51 21 	lds	r30, 0x2151
    296a:	f0 91 52 21 	lds	r31, 0x2152
    296e:	30 97       	sbiw	r30, 0x00	; 0
    2970:	29 f0       	breq	.+10     	; 0x297c <__vector_45+0x3c>
    2972:	80 91 47 22 	lds	r24, 0x2247
    2976:	90 91 48 22 	lds	r25, 0x2248
    297a:	19 95       	eicall
    297c:	ff 91       	pop	r31
    297e:	ef 91       	pop	r30
    2980:	bf 91       	pop	r27
    2982:	af 91       	pop	r26
    2984:	9f 91       	pop	r25
    2986:	8f 91       	pop	r24
    2988:	7f 91       	pop	r23
    298a:	6f 91       	pop	r22
    298c:	5f 91       	pop	r21
    298e:	4f 91       	pop	r20
    2990:	3f 91       	pop	r19
    2992:	2f 91       	pop	r18
    2994:	0f 90       	pop	r0
    2996:	0b be       	out	0x3b, r0	; 59
    2998:	0f 90       	pop	r0
    299a:	0f be       	out	0x3f, r0	; 63
    299c:	0f 90       	pop	r0
    299e:	1f 90       	pop	r1
    29a0:	18 95       	reti

000029a2 <__vector_46>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TWIE_TWIM_vect)		/* TWI Master Interrupt */
    29a2:	1f 92       	push	r1
    29a4:	0f 92       	push	r0
    29a6:	0f b6       	in	r0, 0x3f	; 63
    29a8:	0f 92       	push	r0
    29aa:	11 24       	eor	r1, r1
    29ac:	0b b6       	in	r0, 0x3b	; 59
    29ae:	0f 92       	push	r0
    29b0:	2f 93       	push	r18
    29b2:	3f 93       	push	r19
    29b4:	4f 93       	push	r20
    29b6:	5f 93       	push	r21
    29b8:	6f 93       	push	r22
    29ba:	7f 93       	push	r23
    29bc:	8f 93       	push	r24
    29be:	9f 93       	push	r25
    29c0:	af 93       	push	r26
    29c2:	bf 93       	push	r27
    29c4:	ef 93       	push	r30
    29c6:	ff 93       	push	r31
    29c8:	e0 91 53 21 	lds	r30, 0x2153
    29cc:	f0 91 54 21 	lds	r31, 0x2154
    29d0:	30 97       	sbiw	r30, 0x00	; 0
    29d2:	29 f0       	breq	.+10     	; 0x29de <__vector_46+0x3c>
    29d4:	80 91 49 22 	lds	r24, 0x2249
    29d8:	90 91 4a 22 	lds	r25, 0x224A
    29dc:	19 95       	eicall
    29de:	ff 91       	pop	r31
    29e0:	ef 91       	pop	r30
    29e2:	bf 91       	pop	r27
    29e4:	af 91       	pop	r26
    29e6:	9f 91       	pop	r25
    29e8:	8f 91       	pop	r24
    29ea:	7f 91       	pop	r23
    29ec:	6f 91       	pop	r22
    29ee:	5f 91       	pop	r21
    29f0:	4f 91       	pop	r20
    29f2:	3f 91       	pop	r19
    29f4:	2f 91       	pop	r18
    29f6:	0f 90       	pop	r0
    29f8:	0b be       	out	0x3b, r0	; 59
    29fa:	0f 90       	pop	r0
    29fc:	0f be       	out	0x3f, r0	; 63
    29fe:	0f 90       	pop	r0
    2a00:	1f 90       	pop	r1
    2a02:	18 95       	reti

00002a04 <__vector_47>:

/* TCE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_OVF_vect)      /* Overflow Interrupt */
    2a04:	1f 92       	push	r1
    2a06:	0f 92       	push	r0
    2a08:	0f b6       	in	r0, 0x3f	; 63
    2a0a:	0f 92       	push	r0
    2a0c:	11 24       	eor	r1, r1
    2a0e:	0b b6       	in	r0, 0x3b	; 59
    2a10:	0f 92       	push	r0
    2a12:	2f 93       	push	r18
    2a14:	3f 93       	push	r19
    2a16:	4f 93       	push	r20
    2a18:	5f 93       	push	r21
    2a1a:	6f 93       	push	r22
    2a1c:	7f 93       	push	r23
    2a1e:	8f 93       	push	r24
    2a20:	9f 93       	push	r25
    2a22:	af 93       	push	r26
    2a24:	bf 93       	push	r27
    2a26:	ef 93       	push	r30
    2a28:	ff 93       	push	r31
    2a2a:	e0 91 55 21 	lds	r30, 0x2155
    2a2e:	f0 91 56 21 	lds	r31, 0x2156
    2a32:	30 97       	sbiw	r30, 0x00	; 0
    2a34:	29 f0       	breq	.+10     	; 0x2a40 <__vector_47+0x3c>
    2a36:	80 91 4b 22 	lds	r24, 0x224B
    2a3a:	90 91 4c 22 	lds	r25, 0x224C
    2a3e:	19 95       	eicall
    2a40:	ff 91       	pop	r31
    2a42:	ef 91       	pop	r30
    2a44:	bf 91       	pop	r27
    2a46:	af 91       	pop	r26
    2a48:	9f 91       	pop	r25
    2a4a:	8f 91       	pop	r24
    2a4c:	7f 91       	pop	r23
    2a4e:	6f 91       	pop	r22
    2a50:	5f 91       	pop	r21
    2a52:	4f 91       	pop	r20
    2a54:	3f 91       	pop	r19
    2a56:	2f 91       	pop	r18
    2a58:	0f 90       	pop	r0
    2a5a:	0b be       	out	0x3b, r0	; 59
    2a5c:	0f 90       	pop	r0
    2a5e:	0f be       	out	0x3f, r0	; 63
    2a60:	0f 90       	pop	r0
    2a62:	1f 90       	pop	r1
    2a64:	18 95       	reti

00002a66 <__vector_48>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_ERR_vect)      /* Error Interrupt */
    2a66:	1f 92       	push	r1
    2a68:	0f 92       	push	r0
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	0f 92       	push	r0
    2a6e:	11 24       	eor	r1, r1
    2a70:	0b b6       	in	r0, 0x3b	; 59
    2a72:	0f 92       	push	r0
    2a74:	2f 93       	push	r18
    2a76:	3f 93       	push	r19
    2a78:	4f 93       	push	r20
    2a7a:	5f 93       	push	r21
    2a7c:	6f 93       	push	r22
    2a7e:	7f 93       	push	r23
    2a80:	8f 93       	push	r24
    2a82:	9f 93       	push	r25
    2a84:	af 93       	push	r26
    2a86:	bf 93       	push	r27
    2a88:	ef 93       	push	r30
    2a8a:	ff 93       	push	r31
    2a8c:	e0 91 57 21 	lds	r30, 0x2157
    2a90:	f0 91 58 21 	lds	r31, 0x2158
    2a94:	30 97       	sbiw	r30, 0x00	; 0
    2a96:	29 f0       	breq	.+10     	; 0x2aa2 <__vector_48+0x3c>
    2a98:	80 91 4d 22 	lds	r24, 0x224D
    2a9c:	90 91 4e 22 	lds	r25, 0x224E
    2aa0:	19 95       	eicall
    2aa2:	ff 91       	pop	r31
    2aa4:	ef 91       	pop	r30
    2aa6:	bf 91       	pop	r27
    2aa8:	af 91       	pop	r26
    2aaa:	9f 91       	pop	r25
    2aac:	8f 91       	pop	r24
    2aae:	7f 91       	pop	r23
    2ab0:	6f 91       	pop	r22
    2ab2:	5f 91       	pop	r21
    2ab4:	4f 91       	pop	r20
    2ab6:	3f 91       	pop	r19
    2ab8:	2f 91       	pop	r18
    2aba:	0f 90       	pop	r0
    2abc:	0b be       	out	0x3b, r0	; 59
    2abe:	0f 90       	pop	r0
    2ac0:	0f be       	out	0x3f, r0	; 63
    2ac2:	0f 90       	pop	r0
    2ac4:	1f 90       	pop	r1
    2ac6:	18 95       	reti

00002ac8 <__vector_49>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCA_vect)      /* Compare or Capture A Interrupt */
    2ac8:	1f 92       	push	r1
    2aca:	0f 92       	push	r0
    2acc:	0f b6       	in	r0, 0x3f	; 63
    2ace:	0f 92       	push	r0
    2ad0:	11 24       	eor	r1, r1
    2ad2:	0b b6       	in	r0, 0x3b	; 59
    2ad4:	0f 92       	push	r0
    2ad6:	2f 93       	push	r18
    2ad8:	3f 93       	push	r19
    2ada:	4f 93       	push	r20
    2adc:	5f 93       	push	r21
    2ade:	6f 93       	push	r22
    2ae0:	7f 93       	push	r23
    2ae2:	8f 93       	push	r24
    2ae4:	9f 93       	push	r25
    2ae6:	af 93       	push	r26
    2ae8:	bf 93       	push	r27
    2aea:	ef 93       	push	r30
    2aec:	ff 93       	push	r31
    2aee:	e0 91 59 21 	lds	r30, 0x2159
    2af2:	f0 91 5a 21 	lds	r31, 0x215A
    2af6:	30 97       	sbiw	r30, 0x00	; 0
    2af8:	29 f0       	breq	.+10     	; 0x2b04 <__vector_49+0x3c>
    2afa:	80 91 4f 22 	lds	r24, 0x224F
    2afe:	90 91 50 22 	lds	r25, 0x2250
    2b02:	19 95       	eicall
    2b04:	ff 91       	pop	r31
    2b06:	ef 91       	pop	r30
    2b08:	bf 91       	pop	r27
    2b0a:	af 91       	pop	r26
    2b0c:	9f 91       	pop	r25
    2b0e:	8f 91       	pop	r24
    2b10:	7f 91       	pop	r23
    2b12:	6f 91       	pop	r22
    2b14:	5f 91       	pop	r21
    2b16:	4f 91       	pop	r20
    2b18:	3f 91       	pop	r19
    2b1a:	2f 91       	pop	r18
    2b1c:	0f 90       	pop	r0
    2b1e:	0b be       	out	0x3b, r0	; 59
    2b20:	0f 90       	pop	r0
    2b22:	0f be       	out	0x3f, r0	; 63
    2b24:	0f 90       	pop	r0
    2b26:	1f 90       	pop	r1
    2b28:	18 95       	reti

00002b2a <__vector_50>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCB_vect)      /* Compare or Capture B Interrupt */
    2b2a:	1f 92       	push	r1
    2b2c:	0f 92       	push	r0
    2b2e:	0f b6       	in	r0, 0x3f	; 63
    2b30:	0f 92       	push	r0
    2b32:	11 24       	eor	r1, r1
    2b34:	0b b6       	in	r0, 0x3b	; 59
    2b36:	0f 92       	push	r0
    2b38:	2f 93       	push	r18
    2b3a:	3f 93       	push	r19
    2b3c:	4f 93       	push	r20
    2b3e:	5f 93       	push	r21
    2b40:	6f 93       	push	r22
    2b42:	7f 93       	push	r23
    2b44:	8f 93       	push	r24
    2b46:	9f 93       	push	r25
    2b48:	af 93       	push	r26
    2b4a:	bf 93       	push	r27
    2b4c:	ef 93       	push	r30
    2b4e:	ff 93       	push	r31
    2b50:	e0 91 5b 21 	lds	r30, 0x215B
    2b54:	f0 91 5c 21 	lds	r31, 0x215C
    2b58:	30 97       	sbiw	r30, 0x00	; 0
    2b5a:	29 f0       	breq	.+10     	; 0x2b66 <__vector_50+0x3c>
    2b5c:	80 91 51 22 	lds	r24, 0x2251
    2b60:	90 91 52 22 	lds	r25, 0x2252
    2b64:	19 95       	eicall
    2b66:	ff 91       	pop	r31
    2b68:	ef 91       	pop	r30
    2b6a:	bf 91       	pop	r27
    2b6c:	af 91       	pop	r26
    2b6e:	9f 91       	pop	r25
    2b70:	8f 91       	pop	r24
    2b72:	7f 91       	pop	r23
    2b74:	6f 91       	pop	r22
    2b76:	5f 91       	pop	r21
    2b78:	4f 91       	pop	r20
    2b7a:	3f 91       	pop	r19
    2b7c:	2f 91       	pop	r18
    2b7e:	0f 90       	pop	r0
    2b80:	0b be       	out	0x3b, r0	; 59
    2b82:	0f 90       	pop	r0
    2b84:	0f be       	out	0x3f, r0	; 63
    2b86:	0f 90       	pop	r0
    2b88:	1f 90       	pop	r1
    2b8a:	18 95       	reti

00002b8c <__vector_51>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCC_vect)      /* Compare or Capture C Interrupt */
    2b8c:	1f 92       	push	r1
    2b8e:	0f 92       	push	r0
    2b90:	0f b6       	in	r0, 0x3f	; 63
    2b92:	0f 92       	push	r0
    2b94:	11 24       	eor	r1, r1
    2b96:	0b b6       	in	r0, 0x3b	; 59
    2b98:	0f 92       	push	r0
    2b9a:	2f 93       	push	r18
    2b9c:	3f 93       	push	r19
    2b9e:	4f 93       	push	r20
    2ba0:	5f 93       	push	r21
    2ba2:	6f 93       	push	r22
    2ba4:	7f 93       	push	r23
    2ba6:	8f 93       	push	r24
    2ba8:	9f 93       	push	r25
    2baa:	af 93       	push	r26
    2bac:	bf 93       	push	r27
    2bae:	ef 93       	push	r30
    2bb0:	ff 93       	push	r31
    2bb2:	e0 91 5d 21 	lds	r30, 0x215D
    2bb6:	f0 91 5e 21 	lds	r31, 0x215E
    2bba:	30 97       	sbiw	r30, 0x00	; 0
    2bbc:	29 f0       	breq	.+10     	; 0x2bc8 <__vector_51+0x3c>
    2bbe:	80 91 53 22 	lds	r24, 0x2253
    2bc2:	90 91 54 22 	lds	r25, 0x2254
    2bc6:	19 95       	eicall
    2bc8:	ff 91       	pop	r31
    2bca:	ef 91       	pop	r30
    2bcc:	bf 91       	pop	r27
    2bce:	af 91       	pop	r26
    2bd0:	9f 91       	pop	r25
    2bd2:	8f 91       	pop	r24
    2bd4:	7f 91       	pop	r23
    2bd6:	6f 91       	pop	r22
    2bd8:	5f 91       	pop	r21
    2bda:	4f 91       	pop	r20
    2bdc:	3f 91       	pop	r19
    2bde:	2f 91       	pop	r18
    2be0:	0f 90       	pop	r0
    2be2:	0b be       	out	0x3b, r0	; 59
    2be4:	0f 90       	pop	r0
    2be6:	0f be       	out	0x3f, r0	; 63
    2be8:	0f 90       	pop	r0
    2bea:	1f 90       	pop	r1
    2bec:	18 95       	reti

00002bee <__vector_52>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE0_CCD_vect)      /* Compare or Capture D Interrupt */
    2bee:	1f 92       	push	r1
    2bf0:	0f 92       	push	r0
    2bf2:	0f b6       	in	r0, 0x3f	; 63
    2bf4:	0f 92       	push	r0
    2bf6:	11 24       	eor	r1, r1
    2bf8:	0b b6       	in	r0, 0x3b	; 59
    2bfa:	0f 92       	push	r0
    2bfc:	2f 93       	push	r18
    2bfe:	3f 93       	push	r19
    2c00:	4f 93       	push	r20
    2c02:	5f 93       	push	r21
    2c04:	6f 93       	push	r22
    2c06:	7f 93       	push	r23
    2c08:	8f 93       	push	r24
    2c0a:	9f 93       	push	r25
    2c0c:	af 93       	push	r26
    2c0e:	bf 93       	push	r27
    2c10:	ef 93       	push	r30
    2c12:	ff 93       	push	r31
    2c14:	e0 91 5f 21 	lds	r30, 0x215F
    2c18:	f0 91 60 21 	lds	r31, 0x2160
    2c1c:	30 97       	sbiw	r30, 0x00	; 0
    2c1e:	29 f0       	breq	.+10     	; 0x2c2a <__vector_52+0x3c>
    2c20:	80 91 55 22 	lds	r24, 0x2255
    2c24:	90 91 56 22 	lds	r25, 0x2256
    2c28:	19 95       	eicall
    2c2a:	ff 91       	pop	r31
    2c2c:	ef 91       	pop	r30
    2c2e:	bf 91       	pop	r27
    2c30:	af 91       	pop	r26
    2c32:	9f 91       	pop	r25
    2c34:	8f 91       	pop	r24
    2c36:	7f 91       	pop	r23
    2c38:	6f 91       	pop	r22
    2c3a:	5f 91       	pop	r21
    2c3c:	4f 91       	pop	r20
    2c3e:	3f 91       	pop	r19
    2c40:	2f 91       	pop	r18
    2c42:	0f 90       	pop	r0
    2c44:	0b be       	out	0x3b, r0	; 59
    2c46:	0f 90       	pop	r0
    2c48:	0f be       	out	0x3f, r0	; 63
    2c4a:	0f 90       	pop	r0
    2c4c:	1f 90       	pop	r1
    2c4e:	18 95       	reti

00002c50 <__vector_53>:

/* TCE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_OVF_vect)      /* Overflow Interrupt */
    2c50:	1f 92       	push	r1
    2c52:	0f 92       	push	r0
    2c54:	0f b6       	in	r0, 0x3f	; 63
    2c56:	0f 92       	push	r0
    2c58:	11 24       	eor	r1, r1
    2c5a:	0b b6       	in	r0, 0x3b	; 59
    2c5c:	0f 92       	push	r0
    2c5e:	2f 93       	push	r18
    2c60:	3f 93       	push	r19
    2c62:	4f 93       	push	r20
    2c64:	5f 93       	push	r21
    2c66:	6f 93       	push	r22
    2c68:	7f 93       	push	r23
    2c6a:	8f 93       	push	r24
    2c6c:	9f 93       	push	r25
    2c6e:	af 93       	push	r26
    2c70:	bf 93       	push	r27
    2c72:	ef 93       	push	r30
    2c74:	ff 93       	push	r31
    2c76:	e0 91 61 21 	lds	r30, 0x2161
    2c7a:	f0 91 62 21 	lds	r31, 0x2162
    2c7e:	30 97       	sbiw	r30, 0x00	; 0
    2c80:	29 f0       	breq	.+10     	; 0x2c8c <__vector_53+0x3c>
    2c82:	80 91 57 22 	lds	r24, 0x2257
    2c86:	90 91 58 22 	lds	r25, 0x2258
    2c8a:	19 95       	eicall
    2c8c:	ff 91       	pop	r31
    2c8e:	ef 91       	pop	r30
    2c90:	bf 91       	pop	r27
    2c92:	af 91       	pop	r26
    2c94:	9f 91       	pop	r25
    2c96:	8f 91       	pop	r24
    2c98:	7f 91       	pop	r23
    2c9a:	6f 91       	pop	r22
    2c9c:	5f 91       	pop	r21
    2c9e:	4f 91       	pop	r20
    2ca0:	3f 91       	pop	r19
    2ca2:	2f 91       	pop	r18
    2ca4:	0f 90       	pop	r0
    2ca6:	0b be       	out	0x3b, r0	; 59
    2ca8:	0f 90       	pop	r0
    2caa:	0f be       	out	0x3f, r0	; 63
    2cac:	0f 90       	pop	r0
    2cae:	1f 90       	pop	r1
    2cb0:	18 95       	reti

00002cb2 <__vector_54>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_ERR_vect)      /* Error Interrupt */
    2cb2:	1f 92       	push	r1
    2cb4:	0f 92       	push	r0
    2cb6:	0f b6       	in	r0, 0x3f	; 63
    2cb8:	0f 92       	push	r0
    2cba:	11 24       	eor	r1, r1
    2cbc:	0b b6       	in	r0, 0x3b	; 59
    2cbe:	0f 92       	push	r0
    2cc0:	2f 93       	push	r18
    2cc2:	3f 93       	push	r19
    2cc4:	4f 93       	push	r20
    2cc6:	5f 93       	push	r21
    2cc8:	6f 93       	push	r22
    2cca:	7f 93       	push	r23
    2ccc:	8f 93       	push	r24
    2cce:	9f 93       	push	r25
    2cd0:	af 93       	push	r26
    2cd2:	bf 93       	push	r27
    2cd4:	ef 93       	push	r30
    2cd6:	ff 93       	push	r31
    2cd8:	e0 91 63 21 	lds	r30, 0x2163
    2cdc:	f0 91 64 21 	lds	r31, 0x2164
    2ce0:	30 97       	sbiw	r30, 0x00	; 0
    2ce2:	29 f0       	breq	.+10     	; 0x2cee <__vector_54+0x3c>
    2ce4:	80 91 59 22 	lds	r24, 0x2259
    2ce8:	90 91 5a 22 	lds	r25, 0x225A
    2cec:	19 95       	eicall
    2cee:	ff 91       	pop	r31
    2cf0:	ef 91       	pop	r30
    2cf2:	bf 91       	pop	r27
    2cf4:	af 91       	pop	r26
    2cf6:	9f 91       	pop	r25
    2cf8:	8f 91       	pop	r24
    2cfa:	7f 91       	pop	r23
    2cfc:	6f 91       	pop	r22
    2cfe:	5f 91       	pop	r21
    2d00:	4f 91       	pop	r20
    2d02:	3f 91       	pop	r19
    2d04:	2f 91       	pop	r18
    2d06:	0f 90       	pop	r0
    2d08:	0b be       	out	0x3b, r0	; 59
    2d0a:	0f 90       	pop	r0
    2d0c:	0f be       	out	0x3f, r0	; 63
    2d0e:	0f 90       	pop	r0
    2d10:	1f 90       	pop	r1
    2d12:	18 95       	reti

00002d14 <__vector_55>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCA_vect)      /* Compare or Capture A Interrupt */
    2d14:	1f 92       	push	r1
    2d16:	0f 92       	push	r0
    2d18:	0f b6       	in	r0, 0x3f	; 63
    2d1a:	0f 92       	push	r0
    2d1c:	11 24       	eor	r1, r1
    2d1e:	0b b6       	in	r0, 0x3b	; 59
    2d20:	0f 92       	push	r0
    2d22:	2f 93       	push	r18
    2d24:	3f 93       	push	r19
    2d26:	4f 93       	push	r20
    2d28:	5f 93       	push	r21
    2d2a:	6f 93       	push	r22
    2d2c:	7f 93       	push	r23
    2d2e:	8f 93       	push	r24
    2d30:	9f 93       	push	r25
    2d32:	af 93       	push	r26
    2d34:	bf 93       	push	r27
    2d36:	ef 93       	push	r30
    2d38:	ff 93       	push	r31
    2d3a:	e0 91 65 21 	lds	r30, 0x2165
    2d3e:	f0 91 66 21 	lds	r31, 0x2166
    2d42:	30 97       	sbiw	r30, 0x00	; 0
    2d44:	29 f0       	breq	.+10     	; 0x2d50 <__vector_55+0x3c>
    2d46:	80 91 5b 22 	lds	r24, 0x225B
    2d4a:	90 91 5c 22 	lds	r25, 0x225C
    2d4e:	19 95       	eicall
    2d50:	ff 91       	pop	r31
    2d52:	ef 91       	pop	r30
    2d54:	bf 91       	pop	r27
    2d56:	af 91       	pop	r26
    2d58:	9f 91       	pop	r25
    2d5a:	8f 91       	pop	r24
    2d5c:	7f 91       	pop	r23
    2d5e:	6f 91       	pop	r22
    2d60:	5f 91       	pop	r21
    2d62:	4f 91       	pop	r20
    2d64:	3f 91       	pop	r19
    2d66:	2f 91       	pop	r18
    2d68:	0f 90       	pop	r0
    2d6a:	0b be       	out	0x3b, r0	; 59
    2d6c:	0f 90       	pop	r0
    2d6e:	0f be       	out	0x3f, r0	; 63
    2d70:	0f 90       	pop	r0
    2d72:	1f 90       	pop	r1
    2d74:	18 95       	reti

00002d76 <__vector_56>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCE1_CCB_vect)      /* Compare or Capture B Interrupt */
    2d76:	1f 92       	push	r1
    2d78:	0f 92       	push	r0
    2d7a:	0f b6       	in	r0, 0x3f	; 63
    2d7c:	0f 92       	push	r0
    2d7e:	11 24       	eor	r1, r1
    2d80:	0b b6       	in	r0, 0x3b	; 59
    2d82:	0f 92       	push	r0
    2d84:	2f 93       	push	r18
    2d86:	3f 93       	push	r19
    2d88:	4f 93       	push	r20
    2d8a:	5f 93       	push	r21
    2d8c:	6f 93       	push	r22
    2d8e:	7f 93       	push	r23
    2d90:	8f 93       	push	r24
    2d92:	9f 93       	push	r25
    2d94:	af 93       	push	r26
    2d96:	bf 93       	push	r27
    2d98:	ef 93       	push	r30
    2d9a:	ff 93       	push	r31
    2d9c:	e0 91 67 21 	lds	r30, 0x2167
    2da0:	f0 91 68 21 	lds	r31, 0x2168
    2da4:	30 97       	sbiw	r30, 0x00	; 0
    2da6:	29 f0       	breq	.+10     	; 0x2db2 <__vector_56+0x3c>
    2da8:	80 91 5d 22 	lds	r24, 0x225D
    2dac:	90 91 5e 22 	lds	r25, 0x225E
    2db0:	19 95       	eicall
    2db2:	ff 91       	pop	r31
    2db4:	ef 91       	pop	r30
    2db6:	bf 91       	pop	r27
    2db8:	af 91       	pop	r26
    2dba:	9f 91       	pop	r25
    2dbc:	8f 91       	pop	r24
    2dbe:	7f 91       	pop	r23
    2dc0:	6f 91       	pop	r22
    2dc2:	5f 91       	pop	r21
    2dc4:	4f 91       	pop	r20
    2dc6:	3f 91       	pop	r19
    2dc8:	2f 91       	pop	r18
    2dca:	0f 90       	pop	r0
    2dcc:	0b be       	out	0x3b, r0	; 59
    2dce:	0f 90       	pop	r0
    2dd0:	0f be       	out	0x3f, r0	; 63
    2dd2:	0f 90       	pop	r0
    2dd4:	1f 90       	pop	r1
    2dd6:	18 95       	reti

00002dd8 <__vector_57>:

/* SPIE interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPIE_INT_vect)      /* SPI Interrupt */
    2dd8:	1f 92       	push	r1
    2dda:	0f 92       	push	r0
    2ddc:	0f b6       	in	r0, 0x3f	; 63
    2dde:	0f 92       	push	r0
    2de0:	11 24       	eor	r1, r1
    2de2:	0b b6       	in	r0, 0x3b	; 59
    2de4:	0f 92       	push	r0
    2de6:	2f 93       	push	r18
    2de8:	3f 93       	push	r19
    2dea:	4f 93       	push	r20
    2dec:	5f 93       	push	r21
    2dee:	6f 93       	push	r22
    2df0:	7f 93       	push	r23
    2df2:	8f 93       	push	r24
    2df4:	9f 93       	push	r25
    2df6:	af 93       	push	r26
    2df8:	bf 93       	push	r27
    2dfa:	ef 93       	push	r30
    2dfc:	ff 93       	push	r31
    2dfe:	e0 91 69 21 	lds	r30, 0x2169
    2e02:	f0 91 6a 21 	lds	r31, 0x216A
    2e06:	30 97       	sbiw	r30, 0x00	; 0
    2e08:	29 f0       	breq	.+10     	; 0x2e14 <__vector_57+0x3c>
    2e0a:	80 91 5f 22 	lds	r24, 0x225F
    2e0e:	90 91 60 22 	lds	r25, 0x2260
    2e12:	19 95       	eicall
    2e14:	ff 91       	pop	r31
    2e16:	ef 91       	pop	r30
    2e18:	bf 91       	pop	r27
    2e1a:	af 91       	pop	r26
    2e1c:	9f 91       	pop	r25
    2e1e:	8f 91       	pop	r24
    2e20:	7f 91       	pop	r23
    2e22:	6f 91       	pop	r22
    2e24:	5f 91       	pop	r21
    2e26:	4f 91       	pop	r20
    2e28:	3f 91       	pop	r19
    2e2a:	2f 91       	pop	r18
    2e2c:	0f 90       	pop	r0
    2e2e:	0b be       	out	0x3b, r0	; 59
    2e30:	0f 90       	pop	r0
    2e32:	0f be       	out	0x3f, r0	; 63
    2e34:	0f 90       	pop	r0
    2e36:	1f 90       	pop	r1
    2e38:	18 95       	reti

00002e3a <__vector_58>:

/* USARTE0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_RXC_vect)      /* Reception Complete Interrupt */
    2e3a:	1f 92       	push	r1
    2e3c:	0f 92       	push	r0
    2e3e:	0f b6       	in	r0, 0x3f	; 63
    2e40:	0f 92       	push	r0
    2e42:	11 24       	eor	r1, r1
    2e44:	0b b6       	in	r0, 0x3b	; 59
    2e46:	0f 92       	push	r0
    2e48:	2f 93       	push	r18
    2e4a:	3f 93       	push	r19
    2e4c:	4f 93       	push	r20
    2e4e:	5f 93       	push	r21
    2e50:	6f 93       	push	r22
    2e52:	7f 93       	push	r23
    2e54:	8f 93       	push	r24
    2e56:	9f 93       	push	r25
    2e58:	af 93       	push	r26
    2e5a:	bf 93       	push	r27
    2e5c:	ef 93       	push	r30
    2e5e:	ff 93       	push	r31
    2e60:	e0 91 6b 21 	lds	r30, 0x216B
    2e64:	f0 91 6c 21 	lds	r31, 0x216C
    2e68:	30 97       	sbiw	r30, 0x00	; 0
    2e6a:	29 f0       	breq	.+10     	; 0x2e76 <__vector_58+0x3c>
    2e6c:	80 91 61 22 	lds	r24, 0x2261
    2e70:	90 91 62 22 	lds	r25, 0x2262
    2e74:	19 95       	eicall
    2e76:	ff 91       	pop	r31
    2e78:	ef 91       	pop	r30
    2e7a:	bf 91       	pop	r27
    2e7c:	af 91       	pop	r26
    2e7e:	9f 91       	pop	r25
    2e80:	8f 91       	pop	r24
    2e82:	7f 91       	pop	r23
    2e84:	6f 91       	pop	r22
    2e86:	5f 91       	pop	r21
    2e88:	4f 91       	pop	r20
    2e8a:	3f 91       	pop	r19
    2e8c:	2f 91       	pop	r18
    2e8e:	0f 90       	pop	r0
    2e90:	0b be       	out	0x3b, r0	; 59
    2e92:	0f 90       	pop	r0
    2e94:	0f be       	out	0x3f, r0	; 63
    2e96:	0f 90       	pop	r0
    2e98:	1f 90       	pop	r1
    2e9a:	18 95       	reti

00002e9c <__vector_59>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_DRE_vect)      /* Data Register Empty Interrupt */
    2e9c:	1f 92       	push	r1
    2e9e:	0f 92       	push	r0
    2ea0:	0f b6       	in	r0, 0x3f	; 63
    2ea2:	0f 92       	push	r0
    2ea4:	11 24       	eor	r1, r1
    2ea6:	0b b6       	in	r0, 0x3b	; 59
    2ea8:	0f 92       	push	r0
    2eaa:	2f 93       	push	r18
    2eac:	3f 93       	push	r19
    2eae:	4f 93       	push	r20
    2eb0:	5f 93       	push	r21
    2eb2:	6f 93       	push	r22
    2eb4:	7f 93       	push	r23
    2eb6:	8f 93       	push	r24
    2eb8:	9f 93       	push	r25
    2eba:	af 93       	push	r26
    2ebc:	bf 93       	push	r27
    2ebe:	ef 93       	push	r30
    2ec0:	ff 93       	push	r31
    2ec2:	e0 91 6d 21 	lds	r30, 0x216D
    2ec6:	f0 91 6e 21 	lds	r31, 0x216E
    2eca:	30 97       	sbiw	r30, 0x00	; 0
    2ecc:	29 f0       	breq	.+10     	; 0x2ed8 <__vector_59+0x3c>
    2ece:	80 91 63 22 	lds	r24, 0x2263
    2ed2:	90 91 64 22 	lds	r25, 0x2264
    2ed6:	19 95       	eicall
    2ed8:	ff 91       	pop	r31
    2eda:	ef 91       	pop	r30
    2edc:	bf 91       	pop	r27
    2ede:	af 91       	pop	r26
    2ee0:	9f 91       	pop	r25
    2ee2:	8f 91       	pop	r24
    2ee4:	7f 91       	pop	r23
    2ee6:	6f 91       	pop	r22
    2ee8:	5f 91       	pop	r21
    2eea:	4f 91       	pop	r20
    2eec:	3f 91       	pop	r19
    2eee:	2f 91       	pop	r18
    2ef0:	0f 90       	pop	r0
    2ef2:	0b be       	out	0x3b, r0	; 59
    2ef4:	0f 90       	pop	r0
    2ef6:	0f be       	out	0x3f, r0	; 63
    2ef8:	0f 90       	pop	r0
    2efa:	1f 90       	pop	r1
    2efc:	18 95       	reti

00002efe <__vector_60>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE0_TXC_vect)      /* Transmission Complete Interrupt */
    2efe:	1f 92       	push	r1
    2f00:	0f 92       	push	r0
    2f02:	0f b6       	in	r0, 0x3f	; 63
    2f04:	0f 92       	push	r0
    2f06:	11 24       	eor	r1, r1
    2f08:	0b b6       	in	r0, 0x3b	; 59
    2f0a:	0f 92       	push	r0
    2f0c:	2f 93       	push	r18
    2f0e:	3f 93       	push	r19
    2f10:	4f 93       	push	r20
    2f12:	5f 93       	push	r21
    2f14:	6f 93       	push	r22
    2f16:	7f 93       	push	r23
    2f18:	8f 93       	push	r24
    2f1a:	9f 93       	push	r25
    2f1c:	af 93       	push	r26
    2f1e:	bf 93       	push	r27
    2f20:	ef 93       	push	r30
    2f22:	ff 93       	push	r31
    2f24:	e0 91 6f 21 	lds	r30, 0x216F
    2f28:	f0 91 70 21 	lds	r31, 0x2170
    2f2c:	30 97       	sbiw	r30, 0x00	; 0
    2f2e:	29 f0       	breq	.+10     	; 0x2f3a <__vector_60+0x3c>
    2f30:	80 91 65 22 	lds	r24, 0x2265
    2f34:	90 91 66 22 	lds	r25, 0x2266
    2f38:	19 95       	eicall
    2f3a:	ff 91       	pop	r31
    2f3c:	ef 91       	pop	r30
    2f3e:	bf 91       	pop	r27
    2f40:	af 91       	pop	r26
    2f42:	9f 91       	pop	r25
    2f44:	8f 91       	pop	r24
    2f46:	7f 91       	pop	r23
    2f48:	6f 91       	pop	r22
    2f4a:	5f 91       	pop	r21
    2f4c:	4f 91       	pop	r20
    2f4e:	3f 91       	pop	r19
    2f50:	2f 91       	pop	r18
    2f52:	0f 90       	pop	r0
    2f54:	0b be       	out	0x3b, r0	; 59
    2f56:	0f 90       	pop	r0
    2f58:	0f be       	out	0x3f, r0	; 63
    2f5a:	0f 90       	pop	r0
    2f5c:	1f 90       	pop	r1
    2f5e:	18 95       	reti

00002f60 <__vector_61>:

/* USARTE1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_RXC_vect)      /* Reception Complete Interrupt */
    2f60:	1f 92       	push	r1
    2f62:	0f 92       	push	r0
    2f64:	0f b6       	in	r0, 0x3f	; 63
    2f66:	0f 92       	push	r0
    2f68:	11 24       	eor	r1, r1
    2f6a:	0b b6       	in	r0, 0x3b	; 59
    2f6c:	0f 92       	push	r0
    2f6e:	2f 93       	push	r18
    2f70:	3f 93       	push	r19
    2f72:	4f 93       	push	r20
    2f74:	5f 93       	push	r21
    2f76:	6f 93       	push	r22
    2f78:	7f 93       	push	r23
    2f7a:	8f 93       	push	r24
    2f7c:	9f 93       	push	r25
    2f7e:	af 93       	push	r26
    2f80:	bf 93       	push	r27
    2f82:	ef 93       	push	r30
    2f84:	ff 93       	push	r31
    2f86:	e0 91 71 21 	lds	r30, 0x2171
    2f8a:	f0 91 72 21 	lds	r31, 0x2172
    2f8e:	30 97       	sbiw	r30, 0x00	; 0
    2f90:	29 f0       	breq	.+10     	; 0x2f9c <__vector_61+0x3c>
    2f92:	80 91 67 22 	lds	r24, 0x2267
    2f96:	90 91 68 22 	lds	r25, 0x2268
    2f9a:	19 95       	eicall
    2f9c:	ff 91       	pop	r31
    2f9e:	ef 91       	pop	r30
    2fa0:	bf 91       	pop	r27
    2fa2:	af 91       	pop	r26
    2fa4:	9f 91       	pop	r25
    2fa6:	8f 91       	pop	r24
    2fa8:	7f 91       	pop	r23
    2faa:	6f 91       	pop	r22
    2fac:	5f 91       	pop	r21
    2fae:	4f 91       	pop	r20
    2fb0:	3f 91       	pop	r19
    2fb2:	2f 91       	pop	r18
    2fb4:	0f 90       	pop	r0
    2fb6:	0b be       	out	0x3b, r0	; 59
    2fb8:	0f 90       	pop	r0
    2fba:	0f be       	out	0x3f, r0	; 63
    2fbc:	0f 90       	pop	r0
    2fbe:	1f 90       	pop	r1
    2fc0:	18 95       	reti

00002fc2 <__vector_62>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_DRE_vect)      /* Data Register Empty Interrupt */
    2fc2:	1f 92       	push	r1
    2fc4:	0f 92       	push	r0
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	0f 92       	push	r0
    2fca:	11 24       	eor	r1, r1
    2fcc:	0b b6       	in	r0, 0x3b	; 59
    2fce:	0f 92       	push	r0
    2fd0:	2f 93       	push	r18
    2fd2:	3f 93       	push	r19
    2fd4:	4f 93       	push	r20
    2fd6:	5f 93       	push	r21
    2fd8:	6f 93       	push	r22
    2fda:	7f 93       	push	r23
    2fdc:	8f 93       	push	r24
    2fde:	9f 93       	push	r25
    2fe0:	af 93       	push	r26
    2fe2:	bf 93       	push	r27
    2fe4:	ef 93       	push	r30
    2fe6:	ff 93       	push	r31
    2fe8:	e0 91 73 21 	lds	r30, 0x2173
    2fec:	f0 91 74 21 	lds	r31, 0x2174
    2ff0:	30 97       	sbiw	r30, 0x00	; 0
    2ff2:	29 f0       	breq	.+10     	; 0x2ffe <__vector_62+0x3c>
    2ff4:	80 91 69 22 	lds	r24, 0x2269
    2ff8:	90 91 6a 22 	lds	r25, 0x226A
    2ffc:	19 95       	eicall
    2ffe:	ff 91       	pop	r31
    3000:	ef 91       	pop	r30
    3002:	bf 91       	pop	r27
    3004:	af 91       	pop	r26
    3006:	9f 91       	pop	r25
    3008:	8f 91       	pop	r24
    300a:	7f 91       	pop	r23
    300c:	6f 91       	pop	r22
    300e:	5f 91       	pop	r21
    3010:	4f 91       	pop	r20
    3012:	3f 91       	pop	r19
    3014:	2f 91       	pop	r18
    3016:	0f 90       	pop	r0
    3018:	0b be       	out	0x3b, r0	; 59
    301a:	0f 90       	pop	r0
    301c:	0f be       	out	0x3f, r0	; 63
    301e:	0f 90       	pop	r0
    3020:	1f 90       	pop	r1
    3022:	18 95       	reti

00003024 <__vector_63>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTE1_TXC_vect)      /* Transmission Complete Interrupt */
    3024:	1f 92       	push	r1
    3026:	0f 92       	push	r0
    3028:	0f b6       	in	r0, 0x3f	; 63
    302a:	0f 92       	push	r0
    302c:	11 24       	eor	r1, r1
    302e:	0b b6       	in	r0, 0x3b	; 59
    3030:	0f 92       	push	r0
    3032:	2f 93       	push	r18
    3034:	3f 93       	push	r19
    3036:	4f 93       	push	r20
    3038:	5f 93       	push	r21
    303a:	6f 93       	push	r22
    303c:	7f 93       	push	r23
    303e:	8f 93       	push	r24
    3040:	9f 93       	push	r25
    3042:	af 93       	push	r26
    3044:	bf 93       	push	r27
    3046:	ef 93       	push	r30
    3048:	ff 93       	push	r31
    304a:	e0 91 75 21 	lds	r30, 0x2175
    304e:	f0 91 76 21 	lds	r31, 0x2176
    3052:	30 97       	sbiw	r30, 0x00	; 0
    3054:	29 f0       	breq	.+10     	; 0x3060 <__vector_63+0x3c>
    3056:	80 91 6b 22 	lds	r24, 0x226B
    305a:	90 91 6c 22 	lds	r25, 0x226C
    305e:	19 95       	eicall
    3060:	ff 91       	pop	r31
    3062:	ef 91       	pop	r30
    3064:	bf 91       	pop	r27
    3066:	af 91       	pop	r26
    3068:	9f 91       	pop	r25
    306a:	8f 91       	pop	r24
    306c:	7f 91       	pop	r23
    306e:	6f 91       	pop	r22
    3070:	5f 91       	pop	r21
    3072:	4f 91       	pop	r20
    3074:	3f 91       	pop	r19
    3076:	2f 91       	pop	r18
    3078:	0f 90       	pop	r0
    307a:	0b be       	out	0x3b, r0	; 59
    307c:	0f 90       	pop	r0
    307e:	0f be       	out	0x3f, r0	; 63
    3080:	0f 90       	pop	r0
    3082:	1f 90       	pop	r1
    3084:	18 95       	reti

00003086 <__vector_64>:

/* PORTD interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT0_vect)      /* External Interrupt 0 */
    3086:	1f 92       	push	r1
    3088:	0f 92       	push	r0
    308a:	0f b6       	in	r0, 0x3f	; 63
    308c:	0f 92       	push	r0
    308e:	11 24       	eor	r1, r1
    3090:	0b b6       	in	r0, 0x3b	; 59
    3092:	0f 92       	push	r0
    3094:	2f 93       	push	r18
    3096:	3f 93       	push	r19
    3098:	4f 93       	push	r20
    309a:	5f 93       	push	r21
    309c:	6f 93       	push	r22
    309e:	7f 93       	push	r23
    30a0:	8f 93       	push	r24
    30a2:	9f 93       	push	r25
    30a4:	af 93       	push	r26
    30a6:	bf 93       	push	r27
    30a8:	ef 93       	push	r30
    30aa:	ff 93       	push	r31
    30ac:	e0 91 77 21 	lds	r30, 0x2177
    30b0:	f0 91 78 21 	lds	r31, 0x2178
    30b4:	30 97       	sbiw	r30, 0x00	; 0
    30b6:	29 f0       	breq	.+10     	; 0x30c2 <__vector_64+0x3c>
    30b8:	80 91 6d 22 	lds	r24, 0x226D
    30bc:	90 91 6e 22 	lds	r25, 0x226E
    30c0:	19 95       	eicall
    30c2:	ff 91       	pop	r31
    30c4:	ef 91       	pop	r30
    30c6:	bf 91       	pop	r27
    30c8:	af 91       	pop	r26
    30ca:	9f 91       	pop	r25
    30cc:	8f 91       	pop	r24
    30ce:	7f 91       	pop	r23
    30d0:	6f 91       	pop	r22
    30d2:	5f 91       	pop	r21
    30d4:	4f 91       	pop	r20
    30d6:	3f 91       	pop	r19
    30d8:	2f 91       	pop	r18
    30da:	0f 90       	pop	r0
    30dc:	0b be       	out	0x3b, r0	; 59
    30de:	0f 90       	pop	r0
    30e0:	0f be       	out	0x3f, r0	; 63
    30e2:	0f 90       	pop	r0
    30e4:	1f 90       	pop	r1
    30e6:	18 95       	reti

000030e8 <__vector_65>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTD_INT1_vect)      /* External Interrupt 1 */
    30e8:	1f 92       	push	r1
    30ea:	0f 92       	push	r0
    30ec:	0f b6       	in	r0, 0x3f	; 63
    30ee:	0f 92       	push	r0
    30f0:	11 24       	eor	r1, r1
    30f2:	0b b6       	in	r0, 0x3b	; 59
    30f4:	0f 92       	push	r0
    30f6:	2f 93       	push	r18
    30f8:	3f 93       	push	r19
    30fa:	4f 93       	push	r20
    30fc:	5f 93       	push	r21
    30fe:	6f 93       	push	r22
    3100:	7f 93       	push	r23
    3102:	8f 93       	push	r24
    3104:	9f 93       	push	r25
    3106:	af 93       	push	r26
    3108:	bf 93       	push	r27
    310a:	ef 93       	push	r30
    310c:	ff 93       	push	r31
    310e:	e0 91 79 21 	lds	r30, 0x2179
    3112:	f0 91 7a 21 	lds	r31, 0x217A
    3116:	30 97       	sbiw	r30, 0x00	; 0
    3118:	29 f0       	breq	.+10     	; 0x3124 <__vector_65+0x3c>
    311a:	80 91 6f 22 	lds	r24, 0x226F
    311e:	90 91 70 22 	lds	r25, 0x2270
    3122:	19 95       	eicall
    3124:	ff 91       	pop	r31
    3126:	ef 91       	pop	r30
    3128:	bf 91       	pop	r27
    312a:	af 91       	pop	r26
    312c:	9f 91       	pop	r25
    312e:	8f 91       	pop	r24
    3130:	7f 91       	pop	r23
    3132:	6f 91       	pop	r22
    3134:	5f 91       	pop	r21
    3136:	4f 91       	pop	r20
    3138:	3f 91       	pop	r19
    313a:	2f 91       	pop	r18
    313c:	0f 90       	pop	r0
    313e:	0b be       	out	0x3b, r0	; 59
    3140:	0f 90       	pop	r0
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	0f 90       	pop	r0
    3146:	1f 90       	pop	r1
    3148:	18 95       	reti

0000314a <__vector_66>:

/* PORTA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT0_vect)      /* External Interrupt 0 */
    314a:	1f 92       	push	r1
    314c:	0f 92       	push	r0
    314e:	0f b6       	in	r0, 0x3f	; 63
    3150:	0f 92       	push	r0
    3152:	11 24       	eor	r1, r1
    3154:	0b b6       	in	r0, 0x3b	; 59
    3156:	0f 92       	push	r0
    3158:	2f 93       	push	r18
    315a:	3f 93       	push	r19
    315c:	4f 93       	push	r20
    315e:	5f 93       	push	r21
    3160:	6f 93       	push	r22
    3162:	7f 93       	push	r23
    3164:	8f 93       	push	r24
    3166:	9f 93       	push	r25
    3168:	af 93       	push	r26
    316a:	bf 93       	push	r27
    316c:	ef 93       	push	r30
    316e:	ff 93       	push	r31
    3170:	e0 91 7b 21 	lds	r30, 0x217B
    3174:	f0 91 7c 21 	lds	r31, 0x217C
    3178:	30 97       	sbiw	r30, 0x00	; 0
    317a:	29 f0       	breq	.+10     	; 0x3186 <__vector_66+0x3c>
    317c:	80 91 71 22 	lds	r24, 0x2271
    3180:	90 91 72 22 	lds	r25, 0x2272
    3184:	19 95       	eicall
    3186:	ff 91       	pop	r31
    3188:	ef 91       	pop	r30
    318a:	bf 91       	pop	r27
    318c:	af 91       	pop	r26
    318e:	9f 91       	pop	r25
    3190:	8f 91       	pop	r24
    3192:	7f 91       	pop	r23
    3194:	6f 91       	pop	r22
    3196:	5f 91       	pop	r21
    3198:	4f 91       	pop	r20
    319a:	3f 91       	pop	r19
    319c:	2f 91       	pop	r18
    319e:	0f 90       	pop	r0
    31a0:	0b be       	out	0x3b, r0	; 59
    31a2:	0f 90       	pop	r0
    31a4:	0f be       	out	0x3f, r0	; 63
    31a6:	0f 90       	pop	r0
    31a8:	1f 90       	pop	r1
    31aa:	18 95       	reti

000031ac <__vector_67>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTA_INT1_vect)      /* External Interrupt 1 */
    31ac:	1f 92       	push	r1
    31ae:	0f 92       	push	r0
    31b0:	0f b6       	in	r0, 0x3f	; 63
    31b2:	0f 92       	push	r0
    31b4:	11 24       	eor	r1, r1
    31b6:	0b b6       	in	r0, 0x3b	; 59
    31b8:	0f 92       	push	r0
    31ba:	2f 93       	push	r18
    31bc:	3f 93       	push	r19
    31be:	4f 93       	push	r20
    31c0:	5f 93       	push	r21
    31c2:	6f 93       	push	r22
    31c4:	7f 93       	push	r23
    31c6:	8f 93       	push	r24
    31c8:	9f 93       	push	r25
    31ca:	af 93       	push	r26
    31cc:	bf 93       	push	r27
    31ce:	ef 93       	push	r30
    31d0:	ff 93       	push	r31
    31d2:	e0 91 7d 21 	lds	r30, 0x217D
    31d6:	f0 91 7e 21 	lds	r31, 0x217E
    31da:	30 97       	sbiw	r30, 0x00	; 0
    31dc:	29 f0       	breq	.+10     	; 0x31e8 <__vector_67+0x3c>
    31de:	80 91 73 22 	lds	r24, 0x2273
    31e2:	90 91 74 22 	lds	r25, 0x2274
    31e6:	19 95       	eicall
    31e8:	ff 91       	pop	r31
    31ea:	ef 91       	pop	r30
    31ec:	bf 91       	pop	r27
    31ee:	af 91       	pop	r26
    31f0:	9f 91       	pop	r25
    31f2:	8f 91       	pop	r24
    31f4:	7f 91       	pop	r23
    31f6:	6f 91       	pop	r22
    31f8:	5f 91       	pop	r21
    31fa:	4f 91       	pop	r20
    31fc:	3f 91       	pop	r19
    31fe:	2f 91       	pop	r18
    3200:	0f 90       	pop	r0
    3202:	0b be       	out	0x3b, r0	; 59
    3204:	0f 90       	pop	r0
    3206:	0f be       	out	0x3f, r0	; 63
    3208:	0f 90       	pop	r0
    320a:	1f 90       	pop	r1
    320c:	18 95       	reti

0000320e <__vector_68>:

/* ACA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC0_vect)      /* AC0 Interrupt */
    320e:	1f 92       	push	r1
    3210:	0f 92       	push	r0
    3212:	0f b6       	in	r0, 0x3f	; 63
    3214:	0f 92       	push	r0
    3216:	11 24       	eor	r1, r1
    3218:	0b b6       	in	r0, 0x3b	; 59
    321a:	0f 92       	push	r0
    321c:	2f 93       	push	r18
    321e:	3f 93       	push	r19
    3220:	4f 93       	push	r20
    3222:	5f 93       	push	r21
    3224:	6f 93       	push	r22
    3226:	7f 93       	push	r23
    3228:	8f 93       	push	r24
    322a:	9f 93       	push	r25
    322c:	af 93       	push	r26
    322e:	bf 93       	push	r27
    3230:	ef 93       	push	r30
    3232:	ff 93       	push	r31
    3234:	e0 91 7f 21 	lds	r30, 0x217F
    3238:	f0 91 80 21 	lds	r31, 0x2180
    323c:	30 97       	sbiw	r30, 0x00	; 0
    323e:	29 f0       	breq	.+10     	; 0x324a <__vector_68+0x3c>
    3240:	80 91 75 22 	lds	r24, 0x2275
    3244:	90 91 76 22 	lds	r25, 0x2276
    3248:	19 95       	eicall
    324a:	ff 91       	pop	r31
    324c:	ef 91       	pop	r30
    324e:	bf 91       	pop	r27
    3250:	af 91       	pop	r26
    3252:	9f 91       	pop	r25
    3254:	8f 91       	pop	r24
    3256:	7f 91       	pop	r23
    3258:	6f 91       	pop	r22
    325a:	5f 91       	pop	r21
    325c:	4f 91       	pop	r20
    325e:	3f 91       	pop	r19
    3260:	2f 91       	pop	r18
    3262:	0f 90       	pop	r0
    3264:	0b be       	out	0x3b, r0	; 59
    3266:	0f 90       	pop	r0
    3268:	0f be       	out	0x3f, r0	; 63
    326a:	0f 90       	pop	r0
    326c:	1f 90       	pop	r1
    326e:	18 95       	reti

00003270 <__vector_69>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_AC1_vect)      /* AC1 Interrupt */
    3270:	1f 92       	push	r1
    3272:	0f 92       	push	r0
    3274:	0f b6       	in	r0, 0x3f	; 63
    3276:	0f 92       	push	r0
    3278:	11 24       	eor	r1, r1
    327a:	0b b6       	in	r0, 0x3b	; 59
    327c:	0f 92       	push	r0
    327e:	2f 93       	push	r18
    3280:	3f 93       	push	r19
    3282:	4f 93       	push	r20
    3284:	5f 93       	push	r21
    3286:	6f 93       	push	r22
    3288:	7f 93       	push	r23
    328a:	8f 93       	push	r24
    328c:	9f 93       	push	r25
    328e:	af 93       	push	r26
    3290:	bf 93       	push	r27
    3292:	ef 93       	push	r30
    3294:	ff 93       	push	r31
    3296:	e0 91 81 21 	lds	r30, 0x2181
    329a:	f0 91 82 21 	lds	r31, 0x2182
    329e:	30 97       	sbiw	r30, 0x00	; 0
    32a0:	29 f0       	breq	.+10     	; 0x32ac <__vector_69+0x3c>
    32a2:	80 91 77 22 	lds	r24, 0x2277
    32a6:	90 91 78 22 	lds	r25, 0x2278
    32aa:	19 95       	eicall
    32ac:	ff 91       	pop	r31
    32ae:	ef 91       	pop	r30
    32b0:	bf 91       	pop	r27
    32b2:	af 91       	pop	r26
    32b4:	9f 91       	pop	r25
    32b6:	8f 91       	pop	r24
    32b8:	7f 91       	pop	r23
    32ba:	6f 91       	pop	r22
    32bc:	5f 91       	pop	r21
    32be:	4f 91       	pop	r20
    32c0:	3f 91       	pop	r19
    32c2:	2f 91       	pop	r18
    32c4:	0f 90       	pop	r0
    32c6:	0b be       	out	0x3b, r0	; 59
    32c8:	0f 90       	pop	r0
    32ca:	0f be       	out	0x3f, r0	; 63
    32cc:	0f 90       	pop	r0
    32ce:	1f 90       	pop	r1
    32d0:	18 95       	reti

000032d2 <__vector_70>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ACA_ACW_vect)      /* ACW Window Mode Interrupt */
    32d2:	1f 92       	push	r1
    32d4:	0f 92       	push	r0
    32d6:	0f b6       	in	r0, 0x3f	; 63
    32d8:	0f 92       	push	r0
    32da:	11 24       	eor	r1, r1
    32dc:	0b b6       	in	r0, 0x3b	; 59
    32de:	0f 92       	push	r0
    32e0:	2f 93       	push	r18
    32e2:	3f 93       	push	r19
    32e4:	4f 93       	push	r20
    32e6:	5f 93       	push	r21
    32e8:	6f 93       	push	r22
    32ea:	7f 93       	push	r23
    32ec:	8f 93       	push	r24
    32ee:	9f 93       	push	r25
    32f0:	af 93       	push	r26
    32f2:	bf 93       	push	r27
    32f4:	ef 93       	push	r30
    32f6:	ff 93       	push	r31
    32f8:	e0 91 83 21 	lds	r30, 0x2183
    32fc:	f0 91 84 21 	lds	r31, 0x2184
    3300:	30 97       	sbiw	r30, 0x00	; 0
    3302:	29 f0       	breq	.+10     	; 0x330e <__vector_70+0x3c>
    3304:	80 91 79 22 	lds	r24, 0x2279
    3308:	90 91 7a 22 	lds	r25, 0x227A
    330c:	19 95       	eicall
    330e:	ff 91       	pop	r31
    3310:	ef 91       	pop	r30
    3312:	bf 91       	pop	r27
    3314:	af 91       	pop	r26
    3316:	9f 91       	pop	r25
    3318:	8f 91       	pop	r24
    331a:	7f 91       	pop	r23
    331c:	6f 91       	pop	r22
    331e:	5f 91       	pop	r21
    3320:	4f 91       	pop	r20
    3322:	3f 91       	pop	r19
    3324:	2f 91       	pop	r18
    3326:	0f 90       	pop	r0
    3328:	0b be       	out	0x3b, r0	; 59
    332a:	0f 90       	pop	r0
    332c:	0f be       	out	0x3f, r0	; 63
    332e:	0f 90       	pop	r0
    3330:	1f 90       	pop	r1
    3332:	18 95       	reti

00003334 <__vector_71>:

/* ADCA interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH0_vect)      /* Interrupt 0 */
    3334:	1f 92       	push	r1
    3336:	0f 92       	push	r0
    3338:	0f b6       	in	r0, 0x3f	; 63
    333a:	0f 92       	push	r0
    333c:	11 24       	eor	r1, r1
    333e:	0b b6       	in	r0, 0x3b	; 59
    3340:	0f 92       	push	r0
    3342:	2f 93       	push	r18
    3344:	3f 93       	push	r19
    3346:	4f 93       	push	r20
    3348:	5f 93       	push	r21
    334a:	6f 93       	push	r22
    334c:	7f 93       	push	r23
    334e:	8f 93       	push	r24
    3350:	9f 93       	push	r25
    3352:	af 93       	push	r26
    3354:	bf 93       	push	r27
    3356:	ef 93       	push	r30
    3358:	ff 93       	push	r31
    335a:	e0 91 85 21 	lds	r30, 0x2185
    335e:	f0 91 86 21 	lds	r31, 0x2186
    3362:	30 97       	sbiw	r30, 0x00	; 0
    3364:	29 f0       	breq	.+10     	; 0x3370 <__vector_71+0x3c>
    3366:	80 91 7b 22 	lds	r24, 0x227B
    336a:	90 91 7c 22 	lds	r25, 0x227C
    336e:	19 95       	eicall
    3370:	ff 91       	pop	r31
    3372:	ef 91       	pop	r30
    3374:	bf 91       	pop	r27
    3376:	af 91       	pop	r26
    3378:	9f 91       	pop	r25
    337a:	8f 91       	pop	r24
    337c:	7f 91       	pop	r23
    337e:	6f 91       	pop	r22
    3380:	5f 91       	pop	r21
    3382:	4f 91       	pop	r20
    3384:	3f 91       	pop	r19
    3386:	2f 91       	pop	r18
    3388:	0f 90       	pop	r0
    338a:	0b be       	out	0x3b, r0	; 59
    338c:	0f 90       	pop	r0
    338e:	0f be       	out	0x3f, r0	; 63
    3390:	0f 90       	pop	r0
    3392:	1f 90       	pop	r1
    3394:	18 95       	reti

00003396 <__vector_72>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH1_vect)      /* Interrupt 1 */
    3396:	1f 92       	push	r1
    3398:	0f 92       	push	r0
    339a:	0f b6       	in	r0, 0x3f	; 63
    339c:	0f 92       	push	r0
    339e:	11 24       	eor	r1, r1
    33a0:	0b b6       	in	r0, 0x3b	; 59
    33a2:	0f 92       	push	r0
    33a4:	2f 93       	push	r18
    33a6:	3f 93       	push	r19
    33a8:	4f 93       	push	r20
    33aa:	5f 93       	push	r21
    33ac:	6f 93       	push	r22
    33ae:	7f 93       	push	r23
    33b0:	8f 93       	push	r24
    33b2:	9f 93       	push	r25
    33b4:	af 93       	push	r26
    33b6:	bf 93       	push	r27
    33b8:	ef 93       	push	r30
    33ba:	ff 93       	push	r31
    33bc:	e0 91 87 21 	lds	r30, 0x2187
    33c0:	f0 91 88 21 	lds	r31, 0x2188
    33c4:	30 97       	sbiw	r30, 0x00	; 0
    33c6:	29 f0       	breq	.+10     	; 0x33d2 <__vector_72+0x3c>
    33c8:	80 91 7d 22 	lds	r24, 0x227D
    33cc:	90 91 7e 22 	lds	r25, 0x227E
    33d0:	19 95       	eicall
    33d2:	ff 91       	pop	r31
    33d4:	ef 91       	pop	r30
    33d6:	bf 91       	pop	r27
    33d8:	af 91       	pop	r26
    33da:	9f 91       	pop	r25
    33dc:	8f 91       	pop	r24
    33de:	7f 91       	pop	r23
    33e0:	6f 91       	pop	r22
    33e2:	5f 91       	pop	r21
    33e4:	4f 91       	pop	r20
    33e6:	3f 91       	pop	r19
    33e8:	2f 91       	pop	r18
    33ea:	0f 90       	pop	r0
    33ec:	0b be       	out	0x3b, r0	; 59
    33ee:	0f 90       	pop	r0
    33f0:	0f be       	out	0x3f, r0	; 63
    33f2:	0f 90       	pop	r0
    33f4:	1f 90       	pop	r1
    33f6:	18 95       	reti

000033f8 <__vector_73>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH2_vect)      /* Interrupt 2 */
    33f8:	1f 92       	push	r1
    33fa:	0f 92       	push	r0
    33fc:	0f b6       	in	r0, 0x3f	; 63
    33fe:	0f 92       	push	r0
    3400:	11 24       	eor	r1, r1
    3402:	0b b6       	in	r0, 0x3b	; 59
    3404:	0f 92       	push	r0
    3406:	2f 93       	push	r18
    3408:	3f 93       	push	r19
    340a:	4f 93       	push	r20
    340c:	5f 93       	push	r21
    340e:	6f 93       	push	r22
    3410:	7f 93       	push	r23
    3412:	8f 93       	push	r24
    3414:	9f 93       	push	r25
    3416:	af 93       	push	r26
    3418:	bf 93       	push	r27
    341a:	ef 93       	push	r30
    341c:	ff 93       	push	r31
    341e:	e0 91 89 21 	lds	r30, 0x2189
    3422:	f0 91 8a 21 	lds	r31, 0x218A
    3426:	30 97       	sbiw	r30, 0x00	; 0
    3428:	29 f0       	breq	.+10     	; 0x3434 <__vector_73+0x3c>
    342a:	80 91 7f 22 	lds	r24, 0x227F
    342e:	90 91 80 22 	lds	r25, 0x2280
    3432:	19 95       	eicall
    3434:	ff 91       	pop	r31
    3436:	ef 91       	pop	r30
    3438:	bf 91       	pop	r27
    343a:	af 91       	pop	r26
    343c:	9f 91       	pop	r25
    343e:	8f 91       	pop	r24
    3440:	7f 91       	pop	r23
    3442:	6f 91       	pop	r22
    3444:	5f 91       	pop	r21
    3446:	4f 91       	pop	r20
    3448:	3f 91       	pop	r19
    344a:	2f 91       	pop	r18
    344c:	0f 90       	pop	r0
    344e:	0b be       	out	0x3b, r0	; 59
    3450:	0f 90       	pop	r0
    3452:	0f be       	out	0x3f, r0	; 63
    3454:	0f 90       	pop	r0
    3456:	1f 90       	pop	r1
    3458:	18 95       	reti

0000345a <__vector_74>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(ADCA_CH3_vect)      /* Interrupt 3 */
    345a:	1f 92       	push	r1
    345c:	0f 92       	push	r0
    345e:	0f b6       	in	r0, 0x3f	; 63
    3460:	0f 92       	push	r0
    3462:	11 24       	eor	r1, r1
    3464:	0b b6       	in	r0, 0x3b	; 59
    3466:	0f 92       	push	r0
    3468:	2f 93       	push	r18
    346a:	3f 93       	push	r19
    346c:	4f 93       	push	r20
    346e:	5f 93       	push	r21
    3470:	6f 93       	push	r22
    3472:	7f 93       	push	r23
    3474:	8f 93       	push	r24
    3476:	9f 93       	push	r25
    3478:	af 93       	push	r26
    347a:	bf 93       	push	r27
    347c:	ef 93       	push	r30
    347e:	ff 93       	push	r31
    3480:	e0 91 8b 21 	lds	r30, 0x218B
    3484:	f0 91 8c 21 	lds	r31, 0x218C
    3488:	30 97       	sbiw	r30, 0x00	; 0
    348a:	29 f0       	breq	.+10     	; 0x3496 <__vector_74+0x3c>
    348c:	80 91 81 22 	lds	r24, 0x2281
    3490:	90 91 82 22 	lds	r25, 0x2282
    3494:	19 95       	eicall
    3496:	ff 91       	pop	r31
    3498:	ef 91       	pop	r30
    349a:	bf 91       	pop	r27
    349c:	af 91       	pop	r26
    349e:	9f 91       	pop	r25
    34a0:	8f 91       	pop	r24
    34a2:	7f 91       	pop	r23
    34a4:	6f 91       	pop	r22
    34a6:	5f 91       	pop	r21
    34a8:	4f 91       	pop	r20
    34aa:	3f 91       	pop	r19
    34ac:	2f 91       	pop	r18
    34ae:	0f 90       	pop	r0
    34b0:	0b be       	out	0x3b, r0	; 59
    34b2:	0f 90       	pop	r0
    34b4:	0f be       	out	0x3f, r0	; 63
    34b6:	0f 90       	pop	r0
    34b8:	1f 90       	pop	r1
    34ba:	18 95       	reti

000034bc <__vector_77>:

/* TCD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_OVF_vect)      /* Overflow Interrupt */
    34bc:	1f 92       	push	r1
    34be:	0f 92       	push	r0
    34c0:	0f b6       	in	r0, 0x3f	; 63
    34c2:	0f 92       	push	r0
    34c4:	11 24       	eor	r1, r1
    34c6:	0b b6       	in	r0, 0x3b	; 59
    34c8:	0f 92       	push	r0
    34ca:	2f 93       	push	r18
    34cc:	3f 93       	push	r19
    34ce:	4f 93       	push	r20
    34d0:	5f 93       	push	r21
    34d2:	6f 93       	push	r22
    34d4:	7f 93       	push	r23
    34d6:	8f 93       	push	r24
    34d8:	9f 93       	push	r25
    34da:	af 93       	push	r26
    34dc:	bf 93       	push	r27
    34de:	ef 93       	push	r30
    34e0:	ff 93       	push	r31
    34e2:	e0 91 91 21 	lds	r30, 0x2191
    34e6:	f0 91 92 21 	lds	r31, 0x2192
    34ea:	30 97       	sbiw	r30, 0x00	; 0
    34ec:	29 f0       	breq	.+10     	; 0x34f8 <__vector_77+0x3c>
    34ee:	80 91 87 22 	lds	r24, 0x2287
    34f2:	90 91 88 22 	lds	r25, 0x2288
    34f6:	19 95       	eicall
    34f8:	ff 91       	pop	r31
    34fa:	ef 91       	pop	r30
    34fc:	bf 91       	pop	r27
    34fe:	af 91       	pop	r26
    3500:	9f 91       	pop	r25
    3502:	8f 91       	pop	r24
    3504:	7f 91       	pop	r23
    3506:	6f 91       	pop	r22
    3508:	5f 91       	pop	r21
    350a:	4f 91       	pop	r20
    350c:	3f 91       	pop	r19
    350e:	2f 91       	pop	r18
    3510:	0f 90       	pop	r0
    3512:	0b be       	out	0x3b, r0	; 59
    3514:	0f 90       	pop	r0
    3516:	0f be       	out	0x3f, r0	; 63
    3518:	0f 90       	pop	r0
    351a:	1f 90       	pop	r1
    351c:	18 95       	reti

0000351e <__vector_78>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_ERR_vect)      /* Error Interrupt */
    351e:	1f 92       	push	r1
    3520:	0f 92       	push	r0
    3522:	0f b6       	in	r0, 0x3f	; 63
    3524:	0f 92       	push	r0
    3526:	11 24       	eor	r1, r1
    3528:	0b b6       	in	r0, 0x3b	; 59
    352a:	0f 92       	push	r0
    352c:	2f 93       	push	r18
    352e:	3f 93       	push	r19
    3530:	4f 93       	push	r20
    3532:	5f 93       	push	r21
    3534:	6f 93       	push	r22
    3536:	7f 93       	push	r23
    3538:	8f 93       	push	r24
    353a:	9f 93       	push	r25
    353c:	af 93       	push	r26
    353e:	bf 93       	push	r27
    3540:	ef 93       	push	r30
    3542:	ff 93       	push	r31
    3544:	e0 91 93 21 	lds	r30, 0x2193
    3548:	f0 91 94 21 	lds	r31, 0x2194
    354c:	30 97       	sbiw	r30, 0x00	; 0
    354e:	29 f0       	breq	.+10     	; 0x355a <__vector_78+0x3c>
    3550:	80 91 89 22 	lds	r24, 0x2289
    3554:	90 91 8a 22 	lds	r25, 0x228A
    3558:	19 95       	eicall
    355a:	ff 91       	pop	r31
    355c:	ef 91       	pop	r30
    355e:	bf 91       	pop	r27
    3560:	af 91       	pop	r26
    3562:	9f 91       	pop	r25
    3564:	8f 91       	pop	r24
    3566:	7f 91       	pop	r23
    3568:	6f 91       	pop	r22
    356a:	5f 91       	pop	r21
    356c:	4f 91       	pop	r20
    356e:	3f 91       	pop	r19
    3570:	2f 91       	pop	r18
    3572:	0f 90       	pop	r0
    3574:	0b be       	out	0x3b, r0	; 59
    3576:	0f 90       	pop	r0
    3578:	0f be       	out	0x3f, r0	; 63
    357a:	0f 90       	pop	r0
    357c:	1f 90       	pop	r1
    357e:	18 95       	reti

00003580 <__vector_79>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCA_vect)      /* Compare or Capture A Interrupt */
    3580:	1f 92       	push	r1
    3582:	0f 92       	push	r0
    3584:	0f b6       	in	r0, 0x3f	; 63
    3586:	0f 92       	push	r0
    3588:	11 24       	eor	r1, r1
    358a:	0b b6       	in	r0, 0x3b	; 59
    358c:	0f 92       	push	r0
    358e:	2f 93       	push	r18
    3590:	3f 93       	push	r19
    3592:	4f 93       	push	r20
    3594:	5f 93       	push	r21
    3596:	6f 93       	push	r22
    3598:	7f 93       	push	r23
    359a:	8f 93       	push	r24
    359c:	9f 93       	push	r25
    359e:	af 93       	push	r26
    35a0:	bf 93       	push	r27
    35a2:	ef 93       	push	r30
    35a4:	ff 93       	push	r31
    35a6:	e0 91 95 21 	lds	r30, 0x2195
    35aa:	f0 91 96 21 	lds	r31, 0x2196
    35ae:	30 97       	sbiw	r30, 0x00	; 0
    35b0:	29 f0       	breq	.+10     	; 0x35bc <__vector_79+0x3c>
    35b2:	80 91 8b 22 	lds	r24, 0x228B
    35b6:	90 91 8c 22 	lds	r25, 0x228C
    35ba:	19 95       	eicall
    35bc:	ff 91       	pop	r31
    35be:	ef 91       	pop	r30
    35c0:	bf 91       	pop	r27
    35c2:	af 91       	pop	r26
    35c4:	9f 91       	pop	r25
    35c6:	8f 91       	pop	r24
    35c8:	7f 91       	pop	r23
    35ca:	6f 91       	pop	r22
    35cc:	5f 91       	pop	r21
    35ce:	4f 91       	pop	r20
    35d0:	3f 91       	pop	r19
    35d2:	2f 91       	pop	r18
    35d4:	0f 90       	pop	r0
    35d6:	0b be       	out	0x3b, r0	; 59
    35d8:	0f 90       	pop	r0
    35da:	0f be       	out	0x3f, r0	; 63
    35dc:	0f 90       	pop	r0
    35de:	1f 90       	pop	r1
    35e0:	18 95       	reti

000035e2 <__vector_80>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCB_vect)      /* Compare or Capture B Interrupt */
    35e2:	1f 92       	push	r1
    35e4:	0f 92       	push	r0
    35e6:	0f b6       	in	r0, 0x3f	; 63
    35e8:	0f 92       	push	r0
    35ea:	11 24       	eor	r1, r1
    35ec:	0b b6       	in	r0, 0x3b	; 59
    35ee:	0f 92       	push	r0
    35f0:	2f 93       	push	r18
    35f2:	3f 93       	push	r19
    35f4:	4f 93       	push	r20
    35f6:	5f 93       	push	r21
    35f8:	6f 93       	push	r22
    35fa:	7f 93       	push	r23
    35fc:	8f 93       	push	r24
    35fe:	9f 93       	push	r25
    3600:	af 93       	push	r26
    3602:	bf 93       	push	r27
    3604:	ef 93       	push	r30
    3606:	ff 93       	push	r31
    3608:	e0 91 97 21 	lds	r30, 0x2197
    360c:	f0 91 98 21 	lds	r31, 0x2198
    3610:	30 97       	sbiw	r30, 0x00	; 0
    3612:	29 f0       	breq	.+10     	; 0x361e <__vector_80+0x3c>
    3614:	80 91 8d 22 	lds	r24, 0x228D
    3618:	90 91 8e 22 	lds	r25, 0x228E
    361c:	19 95       	eicall
    361e:	ff 91       	pop	r31
    3620:	ef 91       	pop	r30
    3622:	bf 91       	pop	r27
    3624:	af 91       	pop	r26
    3626:	9f 91       	pop	r25
    3628:	8f 91       	pop	r24
    362a:	7f 91       	pop	r23
    362c:	6f 91       	pop	r22
    362e:	5f 91       	pop	r21
    3630:	4f 91       	pop	r20
    3632:	3f 91       	pop	r19
    3634:	2f 91       	pop	r18
    3636:	0f 90       	pop	r0
    3638:	0b be       	out	0x3b, r0	; 59
    363a:	0f 90       	pop	r0
    363c:	0f be       	out	0x3f, r0	; 63
    363e:	0f 90       	pop	r0
    3640:	1f 90       	pop	r1
    3642:	18 95       	reti

00003644 <__vector_81>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCC_vect)      /* Compare or Capture C Interrupt */
    3644:	1f 92       	push	r1
    3646:	0f 92       	push	r0
    3648:	0f b6       	in	r0, 0x3f	; 63
    364a:	0f 92       	push	r0
    364c:	11 24       	eor	r1, r1
    364e:	0b b6       	in	r0, 0x3b	; 59
    3650:	0f 92       	push	r0
    3652:	2f 93       	push	r18
    3654:	3f 93       	push	r19
    3656:	4f 93       	push	r20
    3658:	5f 93       	push	r21
    365a:	6f 93       	push	r22
    365c:	7f 93       	push	r23
    365e:	8f 93       	push	r24
    3660:	9f 93       	push	r25
    3662:	af 93       	push	r26
    3664:	bf 93       	push	r27
    3666:	ef 93       	push	r30
    3668:	ff 93       	push	r31
    366a:	e0 91 99 21 	lds	r30, 0x2199
    366e:	f0 91 9a 21 	lds	r31, 0x219A
    3672:	30 97       	sbiw	r30, 0x00	; 0
    3674:	29 f0       	breq	.+10     	; 0x3680 <__vector_81+0x3c>
    3676:	80 91 8f 22 	lds	r24, 0x228F
    367a:	90 91 90 22 	lds	r25, 0x2290
    367e:	19 95       	eicall
    3680:	ff 91       	pop	r31
    3682:	ef 91       	pop	r30
    3684:	bf 91       	pop	r27
    3686:	af 91       	pop	r26
    3688:	9f 91       	pop	r25
    368a:	8f 91       	pop	r24
    368c:	7f 91       	pop	r23
    368e:	6f 91       	pop	r22
    3690:	5f 91       	pop	r21
    3692:	4f 91       	pop	r20
    3694:	3f 91       	pop	r19
    3696:	2f 91       	pop	r18
    3698:	0f 90       	pop	r0
    369a:	0b be       	out	0x3b, r0	; 59
    369c:	0f 90       	pop	r0
    369e:	0f be       	out	0x3f, r0	; 63
    36a0:	0f 90       	pop	r0
    36a2:	1f 90       	pop	r1
    36a4:	18 95       	reti

000036a6 <__vector_82>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD0_CCD_vect)      /* Compare or Capture D Interrupt */
    36a6:	1f 92       	push	r1
    36a8:	0f 92       	push	r0
    36aa:	0f b6       	in	r0, 0x3f	; 63
    36ac:	0f 92       	push	r0
    36ae:	11 24       	eor	r1, r1
    36b0:	0b b6       	in	r0, 0x3b	; 59
    36b2:	0f 92       	push	r0
    36b4:	2f 93       	push	r18
    36b6:	3f 93       	push	r19
    36b8:	4f 93       	push	r20
    36ba:	5f 93       	push	r21
    36bc:	6f 93       	push	r22
    36be:	7f 93       	push	r23
    36c0:	8f 93       	push	r24
    36c2:	9f 93       	push	r25
    36c4:	af 93       	push	r26
    36c6:	bf 93       	push	r27
    36c8:	ef 93       	push	r30
    36ca:	ff 93       	push	r31
    36cc:	e0 91 9b 21 	lds	r30, 0x219B
    36d0:	f0 91 9c 21 	lds	r31, 0x219C
    36d4:	30 97       	sbiw	r30, 0x00	; 0
    36d6:	29 f0       	breq	.+10     	; 0x36e2 <__vector_82+0x3c>
    36d8:	80 91 91 22 	lds	r24, 0x2291
    36dc:	90 91 92 22 	lds	r25, 0x2292
    36e0:	19 95       	eicall
    36e2:	ff 91       	pop	r31
    36e4:	ef 91       	pop	r30
    36e6:	bf 91       	pop	r27
    36e8:	af 91       	pop	r26
    36ea:	9f 91       	pop	r25
    36ec:	8f 91       	pop	r24
    36ee:	7f 91       	pop	r23
    36f0:	6f 91       	pop	r22
    36f2:	5f 91       	pop	r21
    36f4:	4f 91       	pop	r20
    36f6:	3f 91       	pop	r19
    36f8:	2f 91       	pop	r18
    36fa:	0f 90       	pop	r0
    36fc:	0b be       	out	0x3b, r0	; 59
    36fe:	0f 90       	pop	r0
    3700:	0f be       	out	0x3f, r0	; 63
    3702:	0f 90       	pop	r0
    3704:	1f 90       	pop	r1
    3706:	18 95       	reti

00003708 <__vector_83>:

/* TCD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_OVF_vect)      /* Overflow Interrupt */
    3708:	1f 92       	push	r1
    370a:	0f 92       	push	r0
    370c:	0f b6       	in	r0, 0x3f	; 63
    370e:	0f 92       	push	r0
    3710:	11 24       	eor	r1, r1
    3712:	0b b6       	in	r0, 0x3b	; 59
    3714:	0f 92       	push	r0
    3716:	2f 93       	push	r18
    3718:	3f 93       	push	r19
    371a:	4f 93       	push	r20
    371c:	5f 93       	push	r21
    371e:	6f 93       	push	r22
    3720:	7f 93       	push	r23
    3722:	8f 93       	push	r24
    3724:	9f 93       	push	r25
    3726:	af 93       	push	r26
    3728:	bf 93       	push	r27
    372a:	ef 93       	push	r30
    372c:	ff 93       	push	r31
    372e:	e0 91 9d 21 	lds	r30, 0x219D
    3732:	f0 91 9e 21 	lds	r31, 0x219E
    3736:	30 97       	sbiw	r30, 0x00	; 0
    3738:	29 f0       	breq	.+10     	; 0x3744 <__vector_83+0x3c>
    373a:	80 91 93 22 	lds	r24, 0x2293
    373e:	90 91 94 22 	lds	r25, 0x2294
    3742:	19 95       	eicall
    3744:	ff 91       	pop	r31
    3746:	ef 91       	pop	r30
    3748:	bf 91       	pop	r27
    374a:	af 91       	pop	r26
    374c:	9f 91       	pop	r25
    374e:	8f 91       	pop	r24
    3750:	7f 91       	pop	r23
    3752:	6f 91       	pop	r22
    3754:	5f 91       	pop	r21
    3756:	4f 91       	pop	r20
    3758:	3f 91       	pop	r19
    375a:	2f 91       	pop	r18
    375c:	0f 90       	pop	r0
    375e:	0b be       	out	0x3b, r0	; 59
    3760:	0f 90       	pop	r0
    3762:	0f be       	out	0x3f, r0	; 63
    3764:	0f 90       	pop	r0
    3766:	1f 90       	pop	r1
    3768:	18 95       	reti

0000376a <__vector_84>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_ERR_vect)      /* Error Interrupt */
    376a:	1f 92       	push	r1
    376c:	0f 92       	push	r0
    376e:	0f b6       	in	r0, 0x3f	; 63
    3770:	0f 92       	push	r0
    3772:	11 24       	eor	r1, r1
    3774:	0b b6       	in	r0, 0x3b	; 59
    3776:	0f 92       	push	r0
    3778:	2f 93       	push	r18
    377a:	3f 93       	push	r19
    377c:	4f 93       	push	r20
    377e:	5f 93       	push	r21
    3780:	6f 93       	push	r22
    3782:	7f 93       	push	r23
    3784:	8f 93       	push	r24
    3786:	9f 93       	push	r25
    3788:	af 93       	push	r26
    378a:	bf 93       	push	r27
    378c:	ef 93       	push	r30
    378e:	ff 93       	push	r31
    3790:	e0 91 9f 21 	lds	r30, 0x219F
    3794:	f0 91 a0 21 	lds	r31, 0x21A0
    3798:	30 97       	sbiw	r30, 0x00	; 0
    379a:	29 f0       	breq	.+10     	; 0x37a6 <__vector_84+0x3c>
    379c:	80 91 95 22 	lds	r24, 0x2295
    37a0:	90 91 96 22 	lds	r25, 0x2296
    37a4:	19 95       	eicall
    37a6:	ff 91       	pop	r31
    37a8:	ef 91       	pop	r30
    37aa:	bf 91       	pop	r27
    37ac:	af 91       	pop	r26
    37ae:	9f 91       	pop	r25
    37b0:	8f 91       	pop	r24
    37b2:	7f 91       	pop	r23
    37b4:	6f 91       	pop	r22
    37b6:	5f 91       	pop	r21
    37b8:	4f 91       	pop	r20
    37ba:	3f 91       	pop	r19
    37bc:	2f 91       	pop	r18
    37be:	0f 90       	pop	r0
    37c0:	0b be       	out	0x3b, r0	; 59
    37c2:	0f 90       	pop	r0
    37c4:	0f be       	out	0x3f, r0	; 63
    37c6:	0f 90       	pop	r0
    37c8:	1f 90       	pop	r1
    37ca:	18 95       	reti

000037cc <__vector_85>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCA_vect)      /* Compare or Capture A Interrupt */
    37cc:	1f 92       	push	r1
    37ce:	0f 92       	push	r0
    37d0:	0f b6       	in	r0, 0x3f	; 63
    37d2:	0f 92       	push	r0
    37d4:	11 24       	eor	r1, r1
    37d6:	0b b6       	in	r0, 0x3b	; 59
    37d8:	0f 92       	push	r0
    37da:	2f 93       	push	r18
    37dc:	3f 93       	push	r19
    37de:	4f 93       	push	r20
    37e0:	5f 93       	push	r21
    37e2:	6f 93       	push	r22
    37e4:	7f 93       	push	r23
    37e6:	8f 93       	push	r24
    37e8:	9f 93       	push	r25
    37ea:	af 93       	push	r26
    37ec:	bf 93       	push	r27
    37ee:	ef 93       	push	r30
    37f0:	ff 93       	push	r31
    37f2:	e0 91 a1 21 	lds	r30, 0x21A1
    37f6:	f0 91 a2 21 	lds	r31, 0x21A2
    37fa:	30 97       	sbiw	r30, 0x00	; 0
    37fc:	29 f0       	breq	.+10     	; 0x3808 <__vector_85+0x3c>
    37fe:	80 91 97 22 	lds	r24, 0x2297
    3802:	90 91 98 22 	lds	r25, 0x2298
    3806:	19 95       	eicall
    3808:	ff 91       	pop	r31
    380a:	ef 91       	pop	r30
    380c:	bf 91       	pop	r27
    380e:	af 91       	pop	r26
    3810:	9f 91       	pop	r25
    3812:	8f 91       	pop	r24
    3814:	7f 91       	pop	r23
    3816:	6f 91       	pop	r22
    3818:	5f 91       	pop	r21
    381a:	4f 91       	pop	r20
    381c:	3f 91       	pop	r19
    381e:	2f 91       	pop	r18
    3820:	0f 90       	pop	r0
    3822:	0b be       	out	0x3b, r0	; 59
    3824:	0f 90       	pop	r0
    3826:	0f be       	out	0x3f, r0	; 63
    3828:	0f 90       	pop	r0
    382a:	1f 90       	pop	r1
    382c:	18 95       	reti

0000382e <__vector_86>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCD1_CCB_vect)      /* Compare or Capture B Interrupt */
    382e:	1f 92       	push	r1
    3830:	0f 92       	push	r0
    3832:	0f b6       	in	r0, 0x3f	; 63
    3834:	0f 92       	push	r0
    3836:	11 24       	eor	r1, r1
    3838:	0b b6       	in	r0, 0x3b	; 59
    383a:	0f 92       	push	r0
    383c:	2f 93       	push	r18
    383e:	3f 93       	push	r19
    3840:	4f 93       	push	r20
    3842:	5f 93       	push	r21
    3844:	6f 93       	push	r22
    3846:	7f 93       	push	r23
    3848:	8f 93       	push	r24
    384a:	9f 93       	push	r25
    384c:	af 93       	push	r26
    384e:	bf 93       	push	r27
    3850:	ef 93       	push	r30
    3852:	ff 93       	push	r31
    3854:	e0 91 a3 21 	lds	r30, 0x21A3
    3858:	f0 91 a4 21 	lds	r31, 0x21A4
    385c:	30 97       	sbiw	r30, 0x00	; 0
    385e:	29 f0       	breq	.+10     	; 0x386a <__vector_86+0x3c>
    3860:	80 91 99 22 	lds	r24, 0x2299
    3864:	90 91 9a 22 	lds	r25, 0x229A
    3868:	19 95       	eicall
    386a:	ff 91       	pop	r31
    386c:	ef 91       	pop	r30
    386e:	bf 91       	pop	r27
    3870:	af 91       	pop	r26
    3872:	9f 91       	pop	r25
    3874:	8f 91       	pop	r24
    3876:	7f 91       	pop	r23
    3878:	6f 91       	pop	r22
    387a:	5f 91       	pop	r21
    387c:	4f 91       	pop	r20
    387e:	3f 91       	pop	r19
    3880:	2f 91       	pop	r18
    3882:	0f 90       	pop	r0
    3884:	0b be       	out	0x3b, r0	; 59
    3886:	0f 90       	pop	r0
    3888:	0f be       	out	0x3f, r0	; 63
    388a:	0f 90       	pop	r0
    388c:	1f 90       	pop	r1
    388e:	18 95       	reti

00003890 <__vector_87>:

/* SPID interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(SPID_INT_vect)      /* SPI Interrupt */
    3890:	1f 92       	push	r1
    3892:	0f 92       	push	r0
    3894:	0f b6       	in	r0, 0x3f	; 63
    3896:	0f 92       	push	r0
    3898:	11 24       	eor	r1, r1
    389a:	0b b6       	in	r0, 0x3b	; 59
    389c:	0f 92       	push	r0
    389e:	2f 93       	push	r18
    38a0:	3f 93       	push	r19
    38a2:	4f 93       	push	r20
    38a4:	5f 93       	push	r21
    38a6:	6f 93       	push	r22
    38a8:	7f 93       	push	r23
    38aa:	8f 93       	push	r24
    38ac:	9f 93       	push	r25
    38ae:	af 93       	push	r26
    38b0:	bf 93       	push	r27
    38b2:	ef 93       	push	r30
    38b4:	ff 93       	push	r31
    38b6:	e0 91 a5 21 	lds	r30, 0x21A5
    38ba:	f0 91 a6 21 	lds	r31, 0x21A6
    38be:	30 97       	sbiw	r30, 0x00	; 0
    38c0:	29 f0       	breq	.+10     	; 0x38cc <__vector_87+0x3c>
    38c2:	80 91 9b 22 	lds	r24, 0x229B
    38c6:	90 91 9c 22 	lds	r25, 0x229C
    38ca:	19 95       	eicall
    38cc:	ff 91       	pop	r31
    38ce:	ef 91       	pop	r30
    38d0:	bf 91       	pop	r27
    38d2:	af 91       	pop	r26
    38d4:	9f 91       	pop	r25
    38d6:	8f 91       	pop	r24
    38d8:	7f 91       	pop	r23
    38da:	6f 91       	pop	r22
    38dc:	5f 91       	pop	r21
    38de:	4f 91       	pop	r20
    38e0:	3f 91       	pop	r19
    38e2:	2f 91       	pop	r18
    38e4:	0f 90       	pop	r0
    38e6:	0b be       	out	0x3b, r0	; 59
    38e8:	0f 90       	pop	r0
    38ea:	0f be       	out	0x3f, r0	; 63
    38ec:	0f 90       	pop	r0
    38ee:	1f 90       	pop	r1
    38f0:	18 95       	reti

000038f2 <__vector_88>:

/* USARTD0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_RXC_vect)      /* Reception Complete Interrupt */
    38f2:	1f 92       	push	r1
    38f4:	0f 92       	push	r0
    38f6:	0f b6       	in	r0, 0x3f	; 63
    38f8:	0f 92       	push	r0
    38fa:	11 24       	eor	r1, r1
    38fc:	0b b6       	in	r0, 0x3b	; 59
    38fe:	0f 92       	push	r0
    3900:	2f 93       	push	r18
    3902:	3f 93       	push	r19
    3904:	4f 93       	push	r20
    3906:	5f 93       	push	r21
    3908:	6f 93       	push	r22
    390a:	7f 93       	push	r23
    390c:	8f 93       	push	r24
    390e:	9f 93       	push	r25
    3910:	af 93       	push	r26
    3912:	bf 93       	push	r27
    3914:	ef 93       	push	r30
    3916:	ff 93       	push	r31
    3918:	e0 91 a7 21 	lds	r30, 0x21A7
    391c:	f0 91 a8 21 	lds	r31, 0x21A8
    3920:	30 97       	sbiw	r30, 0x00	; 0
    3922:	29 f0       	breq	.+10     	; 0x392e <__vector_88+0x3c>
    3924:	80 91 9d 22 	lds	r24, 0x229D
    3928:	90 91 9e 22 	lds	r25, 0x229E
    392c:	19 95       	eicall
    392e:	ff 91       	pop	r31
    3930:	ef 91       	pop	r30
    3932:	bf 91       	pop	r27
    3934:	af 91       	pop	r26
    3936:	9f 91       	pop	r25
    3938:	8f 91       	pop	r24
    393a:	7f 91       	pop	r23
    393c:	6f 91       	pop	r22
    393e:	5f 91       	pop	r21
    3940:	4f 91       	pop	r20
    3942:	3f 91       	pop	r19
    3944:	2f 91       	pop	r18
    3946:	0f 90       	pop	r0
    3948:	0b be       	out	0x3b, r0	; 59
    394a:	0f 90       	pop	r0
    394c:	0f be       	out	0x3f, r0	; 63
    394e:	0f 90       	pop	r0
    3950:	1f 90       	pop	r1
    3952:	18 95       	reti

00003954 <__vector_89>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_DRE_vect)      /* Data Register Empty Interrupt */
    3954:	1f 92       	push	r1
    3956:	0f 92       	push	r0
    3958:	0f b6       	in	r0, 0x3f	; 63
    395a:	0f 92       	push	r0
    395c:	11 24       	eor	r1, r1
    395e:	0b b6       	in	r0, 0x3b	; 59
    3960:	0f 92       	push	r0
    3962:	2f 93       	push	r18
    3964:	3f 93       	push	r19
    3966:	4f 93       	push	r20
    3968:	5f 93       	push	r21
    396a:	6f 93       	push	r22
    396c:	7f 93       	push	r23
    396e:	8f 93       	push	r24
    3970:	9f 93       	push	r25
    3972:	af 93       	push	r26
    3974:	bf 93       	push	r27
    3976:	ef 93       	push	r30
    3978:	ff 93       	push	r31
    397a:	e0 91 a9 21 	lds	r30, 0x21A9
    397e:	f0 91 aa 21 	lds	r31, 0x21AA
    3982:	30 97       	sbiw	r30, 0x00	; 0
    3984:	29 f0       	breq	.+10     	; 0x3990 <__vector_89+0x3c>
    3986:	80 91 9f 22 	lds	r24, 0x229F
    398a:	90 91 a0 22 	lds	r25, 0x22A0
    398e:	19 95       	eicall
    3990:	ff 91       	pop	r31
    3992:	ef 91       	pop	r30
    3994:	bf 91       	pop	r27
    3996:	af 91       	pop	r26
    3998:	9f 91       	pop	r25
    399a:	8f 91       	pop	r24
    399c:	7f 91       	pop	r23
    399e:	6f 91       	pop	r22
    39a0:	5f 91       	pop	r21
    39a2:	4f 91       	pop	r20
    39a4:	3f 91       	pop	r19
    39a6:	2f 91       	pop	r18
    39a8:	0f 90       	pop	r0
    39aa:	0b be       	out	0x3b, r0	; 59
    39ac:	0f 90       	pop	r0
    39ae:	0f be       	out	0x3f, r0	; 63
    39b0:	0f 90       	pop	r0
    39b2:	1f 90       	pop	r1
    39b4:	18 95       	reti

000039b6 <__vector_90>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD0_TXC_vect)      /* Transmission Complete Interrupt */
    39b6:	1f 92       	push	r1
    39b8:	0f 92       	push	r0
    39ba:	0f b6       	in	r0, 0x3f	; 63
    39bc:	0f 92       	push	r0
    39be:	11 24       	eor	r1, r1
    39c0:	0b b6       	in	r0, 0x3b	; 59
    39c2:	0f 92       	push	r0
    39c4:	2f 93       	push	r18
    39c6:	3f 93       	push	r19
    39c8:	4f 93       	push	r20
    39ca:	5f 93       	push	r21
    39cc:	6f 93       	push	r22
    39ce:	7f 93       	push	r23
    39d0:	8f 93       	push	r24
    39d2:	9f 93       	push	r25
    39d4:	af 93       	push	r26
    39d6:	bf 93       	push	r27
    39d8:	ef 93       	push	r30
    39da:	ff 93       	push	r31
    39dc:	e0 91 ab 21 	lds	r30, 0x21AB
    39e0:	f0 91 ac 21 	lds	r31, 0x21AC
    39e4:	30 97       	sbiw	r30, 0x00	; 0
    39e6:	29 f0       	breq	.+10     	; 0x39f2 <__vector_90+0x3c>
    39e8:	80 91 a1 22 	lds	r24, 0x22A1
    39ec:	90 91 a2 22 	lds	r25, 0x22A2
    39f0:	19 95       	eicall
    39f2:	ff 91       	pop	r31
    39f4:	ef 91       	pop	r30
    39f6:	bf 91       	pop	r27
    39f8:	af 91       	pop	r26
    39fa:	9f 91       	pop	r25
    39fc:	8f 91       	pop	r24
    39fe:	7f 91       	pop	r23
    3a00:	6f 91       	pop	r22
    3a02:	5f 91       	pop	r21
    3a04:	4f 91       	pop	r20
    3a06:	3f 91       	pop	r19
    3a08:	2f 91       	pop	r18
    3a0a:	0f 90       	pop	r0
    3a0c:	0b be       	out	0x3b, r0	; 59
    3a0e:	0f 90       	pop	r0
    3a10:	0f be       	out	0x3f, r0	; 63
    3a12:	0f 90       	pop	r0
    3a14:	1f 90       	pop	r1
    3a16:	18 95       	reti

00003a18 <__vector_91>:

/* USARTD1 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_RXC_vect)      /* Reception Complete Interrupt */
    3a18:	1f 92       	push	r1
    3a1a:	0f 92       	push	r0
    3a1c:	0f b6       	in	r0, 0x3f	; 63
    3a1e:	0f 92       	push	r0
    3a20:	11 24       	eor	r1, r1
    3a22:	0b b6       	in	r0, 0x3b	; 59
    3a24:	0f 92       	push	r0
    3a26:	2f 93       	push	r18
    3a28:	3f 93       	push	r19
    3a2a:	4f 93       	push	r20
    3a2c:	5f 93       	push	r21
    3a2e:	6f 93       	push	r22
    3a30:	7f 93       	push	r23
    3a32:	8f 93       	push	r24
    3a34:	9f 93       	push	r25
    3a36:	af 93       	push	r26
    3a38:	bf 93       	push	r27
    3a3a:	ef 93       	push	r30
    3a3c:	ff 93       	push	r31
    3a3e:	e0 91 ad 21 	lds	r30, 0x21AD
    3a42:	f0 91 ae 21 	lds	r31, 0x21AE
    3a46:	30 97       	sbiw	r30, 0x00	; 0
    3a48:	29 f0       	breq	.+10     	; 0x3a54 <__vector_91+0x3c>
    3a4a:	80 91 a3 22 	lds	r24, 0x22A3
    3a4e:	90 91 a4 22 	lds	r25, 0x22A4
    3a52:	19 95       	eicall
    3a54:	ff 91       	pop	r31
    3a56:	ef 91       	pop	r30
    3a58:	bf 91       	pop	r27
    3a5a:	af 91       	pop	r26
    3a5c:	9f 91       	pop	r25
    3a5e:	8f 91       	pop	r24
    3a60:	7f 91       	pop	r23
    3a62:	6f 91       	pop	r22
    3a64:	5f 91       	pop	r21
    3a66:	4f 91       	pop	r20
    3a68:	3f 91       	pop	r19
    3a6a:	2f 91       	pop	r18
    3a6c:	0f 90       	pop	r0
    3a6e:	0b be       	out	0x3b, r0	; 59
    3a70:	0f 90       	pop	r0
    3a72:	0f be       	out	0x3f, r0	; 63
    3a74:	0f 90       	pop	r0
    3a76:	1f 90       	pop	r1
    3a78:	18 95       	reti

00003a7a <__vector_92>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_DRE_vect)      /* Data Register Empty Interrupt */
    3a7a:	1f 92       	push	r1
    3a7c:	0f 92       	push	r0
    3a7e:	0f b6       	in	r0, 0x3f	; 63
    3a80:	0f 92       	push	r0
    3a82:	11 24       	eor	r1, r1
    3a84:	0b b6       	in	r0, 0x3b	; 59
    3a86:	0f 92       	push	r0
    3a88:	2f 93       	push	r18
    3a8a:	3f 93       	push	r19
    3a8c:	4f 93       	push	r20
    3a8e:	5f 93       	push	r21
    3a90:	6f 93       	push	r22
    3a92:	7f 93       	push	r23
    3a94:	8f 93       	push	r24
    3a96:	9f 93       	push	r25
    3a98:	af 93       	push	r26
    3a9a:	bf 93       	push	r27
    3a9c:	ef 93       	push	r30
    3a9e:	ff 93       	push	r31
    3aa0:	e0 91 af 21 	lds	r30, 0x21AF
    3aa4:	f0 91 b0 21 	lds	r31, 0x21B0
    3aa8:	30 97       	sbiw	r30, 0x00	; 0
    3aaa:	29 f0       	breq	.+10     	; 0x3ab6 <__vector_92+0x3c>
    3aac:	80 91 a5 22 	lds	r24, 0x22A5
    3ab0:	90 91 a6 22 	lds	r25, 0x22A6
    3ab4:	19 95       	eicall
    3ab6:	ff 91       	pop	r31
    3ab8:	ef 91       	pop	r30
    3aba:	bf 91       	pop	r27
    3abc:	af 91       	pop	r26
    3abe:	9f 91       	pop	r25
    3ac0:	8f 91       	pop	r24
    3ac2:	7f 91       	pop	r23
    3ac4:	6f 91       	pop	r22
    3ac6:	5f 91       	pop	r21
    3ac8:	4f 91       	pop	r20
    3aca:	3f 91       	pop	r19
    3acc:	2f 91       	pop	r18
    3ace:	0f 90       	pop	r0
    3ad0:	0b be       	out	0x3b, r0	; 59
    3ad2:	0f 90       	pop	r0
    3ad4:	0f be       	out	0x3f, r0	; 63
    3ad6:	0f 90       	pop	r0
    3ad8:	1f 90       	pop	r1
    3ada:	18 95       	reti

00003adc <__vector_93>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTD1_TXC_vect)      /* Transmission Complete Interrupt */
    3adc:	1f 92       	push	r1
    3ade:	0f 92       	push	r0
    3ae0:	0f b6       	in	r0, 0x3f	; 63
    3ae2:	0f 92       	push	r0
    3ae4:	11 24       	eor	r1, r1
    3ae6:	0b b6       	in	r0, 0x3b	; 59
    3ae8:	0f 92       	push	r0
    3aea:	2f 93       	push	r18
    3aec:	3f 93       	push	r19
    3aee:	4f 93       	push	r20
    3af0:	5f 93       	push	r21
    3af2:	6f 93       	push	r22
    3af4:	7f 93       	push	r23
    3af6:	8f 93       	push	r24
    3af8:	9f 93       	push	r25
    3afa:	af 93       	push	r26
    3afc:	bf 93       	push	r27
    3afe:	ef 93       	push	r30
    3b00:	ff 93       	push	r31
    3b02:	e0 91 b1 21 	lds	r30, 0x21B1
    3b06:	f0 91 b2 21 	lds	r31, 0x21B2
    3b0a:	30 97       	sbiw	r30, 0x00	; 0
    3b0c:	29 f0       	breq	.+10     	; 0x3b18 <__vector_93+0x3c>
    3b0e:	80 91 a7 22 	lds	r24, 0x22A7
    3b12:	90 91 a8 22 	lds	r25, 0x22A8
    3b16:	19 95       	eicall
    3b18:	ff 91       	pop	r31
    3b1a:	ef 91       	pop	r30
    3b1c:	bf 91       	pop	r27
    3b1e:	af 91       	pop	r26
    3b20:	9f 91       	pop	r25
    3b22:	8f 91       	pop	r24
    3b24:	7f 91       	pop	r23
    3b26:	6f 91       	pop	r22
    3b28:	5f 91       	pop	r21
    3b2a:	4f 91       	pop	r20
    3b2c:	3f 91       	pop	r19
    3b2e:	2f 91       	pop	r18
    3b30:	0f 90       	pop	r0
    3b32:	0b be       	out	0x3b, r0	; 59
    3b34:	0f 90       	pop	r0
    3b36:	0f be       	out	0x3f, r0	; 63
    3b38:	0f 90       	pop	r0
    3b3a:	1f 90       	pop	r1
    3b3c:	18 95       	reti

00003b3e <__vector_104>:

/* PORTF interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT0_vect)      /* External Interrupt 0 */
    3b3e:	1f 92       	push	r1
    3b40:	0f 92       	push	r0
    3b42:	0f b6       	in	r0, 0x3f	; 63
    3b44:	0f 92       	push	r0
    3b46:	11 24       	eor	r1, r1
    3b48:	0b b6       	in	r0, 0x3b	; 59
    3b4a:	0f 92       	push	r0
    3b4c:	2f 93       	push	r18
    3b4e:	3f 93       	push	r19
    3b50:	4f 93       	push	r20
    3b52:	5f 93       	push	r21
    3b54:	6f 93       	push	r22
    3b56:	7f 93       	push	r23
    3b58:	8f 93       	push	r24
    3b5a:	9f 93       	push	r25
    3b5c:	af 93       	push	r26
    3b5e:	bf 93       	push	r27
    3b60:	ef 93       	push	r30
    3b62:	ff 93       	push	r31
    3b64:	e0 91 c7 21 	lds	r30, 0x21C7
    3b68:	f0 91 c8 21 	lds	r31, 0x21C8
    3b6c:	30 97       	sbiw	r30, 0x00	; 0
    3b6e:	29 f0       	breq	.+10     	; 0x3b7a <__vector_104+0x3c>
    3b70:	80 91 bd 22 	lds	r24, 0x22BD
    3b74:	90 91 be 22 	lds	r25, 0x22BE
    3b78:	19 95       	eicall
    3b7a:	ff 91       	pop	r31
    3b7c:	ef 91       	pop	r30
    3b7e:	bf 91       	pop	r27
    3b80:	af 91       	pop	r26
    3b82:	9f 91       	pop	r25
    3b84:	8f 91       	pop	r24
    3b86:	7f 91       	pop	r23
    3b88:	6f 91       	pop	r22
    3b8a:	5f 91       	pop	r21
    3b8c:	4f 91       	pop	r20
    3b8e:	3f 91       	pop	r19
    3b90:	2f 91       	pop	r18
    3b92:	0f 90       	pop	r0
    3b94:	0b be       	out	0x3b, r0	; 59
    3b96:	0f 90       	pop	r0
    3b98:	0f be       	out	0x3f, r0	; 63
    3b9a:	0f 90       	pop	r0
    3b9c:	1f 90       	pop	r1
    3b9e:	18 95       	reti

00003ba0 <__vector_105>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(PORTF_INT1_vect)      /* External Interrupt 1 */
    3ba0:	1f 92       	push	r1
    3ba2:	0f 92       	push	r0
    3ba4:	0f b6       	in	r0, 0x3f	; 63
    3ba6:	0f 92       	push	r0
    3ba8:	11 24       	eor	r1, r1
    3baa:	0b b6       	in	r0, 0x3b	; 59
    3bac:	0f 92       	push	r0
    3bae:	2f 93       	push	r18
    3bb0:	3f 93       	push	r19
    3bb2:	4f 93       	push	r20
    3bb4:	5f 93       	push	r21
    3bb6:	6f 93       	push	r22
    3bb8:	7f 93       	push	r23
    3bba:	8f 93       	push	r24
    3bbc:	9f 93       	push	r25
    3bbe:	af 93       	push	r26
    3bc0:	bf 93       	push	r27
    3bc2:	ef 93       	push	r30
    3bc4:	ff 93       	push	r31
    3bc6:	e0 91 c9 21 	lds	r30, 0x21C9
    3bca:	f0 91 ca 21 	lds	r31, 0x21CA
    3bce:	30 97       	sbiw	r30, 0x00	; 0
    3bd0:	29 f0       	breq	.+10     	; 0x3bdc <__vector_105+0x3c>
    3bd2:	80 91 bf 22 	lds	r24, 0x22BF
    3bd6:	90 91 c0 22 	lds	r25, 0x22C0
    3bda:	19 95       	eicall
    3bdc:	ff 91       	pop	r31
    3bde:	ef 91       	pop	r30
    3be0:	bf 91       	pop	r27
    3be2:	af 91       	pop	r26
    3be4:	9f 91       	pop	r25
    3be6:	8f 91       	pop	r24
    3be8:	7f 91       	pop	r23
    3bea:	6f 91       	pop	r22
    3bec:	5f 91       	pop	r21
    3bee:	4f 91       	pop	r20
    3bf0:	3f 91       	pop	r19
    3bf2:	2f 91       	pop	r18
    3bf4:	0f 90       	pop	r0
    3bf6:	0b be       	out	0x3b, r0	; 59
    3bf8:	0f 90       	pop	r0
    3bfa:	0f be       	out	0x3f, r0	; 63
    3bfc:	0f 90       	pop	r0
    3bfe:	1f 90       	pop	r1
    3c00:	18 95       	reti

00003c02 <__vector_108>:

/* TCF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_OVF_vect)      /* Overflow Interrupt */
    3c02:	1f 92       	push	r1
    3c04:	0f 92       	push	r0
    3c06:	0f b6       	in	r0, 0x3f	; 63
    3c08:	0f 92       	push	r0
    3c0a:	11 24       	eor	r1, r1
    3c0c:	0b b6       	in	r0, 0x3b	; 59
    3c0e:	0f 92       	push	r0
    3c10:	2f 93       	push	r18
    3c12:	3f 93       	push	r19
    3c14:	4f 93       	push	r20
    3c16:	5f 93       	push	r21
    3c18:	6f 93       	push	r22
    3c1a:	7f 93       	push	r23
    3c1c:	8f 93       	push	r24
    3c1e:	9f 93       	push	r25
    3c20:	af 93       	push	r26
    3c22:	bf 93       	push	r27
    3c24:	ef 93       	push	r30
    3c26:	ff 93       	push	r31
    3c28:	e0 91 cf 21 	lds	r30, 0x21CF
    3c2c:	f0 91 d0 21 	lds	r31, 0x21D0
    3c30:	30 97       	sbiw	r30, 0x00	; 0
    3c32:	29 f0       	breq	.+10     	; 0x3c3e <__vector_108+0x3c>
    3c34:	80 91 c5 22 	lds	r24, 0x22C5
    3c38:	90 91 c6 22 	lds	r25, 0x22C6
    3c3c:	19 95       	eicall
    3c3e:	ff 91       	pop	r31
    3c40:	ef 91       	pop	r30
    3c42:	bf 91       	pop	r27
    3c44:	af 91       	pop	r26
    3c46:	9f 91       	pop	r25
    3c48:	8f 91       	pop	r24
    3c4a:	7f 91       	pop	r23
    3c4c:	6f 91       	pop	r22
    3c4e:	5f 91       	pop	r21
    3c50:	4f 91       	pop	r20
    3c52:	3f 91       	pop	r19
    3c54:	2f 91       	pop	r18
    3c56:	0f 90       	pop	r0
    3c58:	0b be       	out	0x3b, r0	; 59
    3c5a:	0f 90       	pop	r0
    3c5c:	0f be       	out	0x3f, r0	; 63
    3c5e:	0f 90       	pop	r0
    3c60:	1f 90       	pop	r1
    3c62:	18 95       	reti

00003c64 <__vector_109>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_ERR_vect)      /* Error Interrupt */
    3c64:	1f 92       	push	r1
    3c66:	0f 92       	push	r0
    3c68:	0f b6       	in	r0, 0x3f	; 63
    3c6a:	0f 92       	push	r0
    3c6c:	11 24       	eor	r1, r1
    3c6e:	0b b6       	in	r0, 0x3b	; 59
    3c70:	0f 92       	push	r0
    3c72:	2f 93       	push	r18
    3c74:	3f 93       	push	r19
    3c76:	4f 93       	push	r20
    3c78:	5f 93       	push	r21
    3c7a:	6f 93       	push	r22
    3c7c:	7f 93       	push	r23
    3c7e:	8f 93       	push	r24
    3c80:	9f 93       	push	r25
    3c82:	af 93       	push	r26
    3c84:	bf 93       	push	r27
    3c86:	ef 93       	push	r30
    3c88:	ff 93       	push	r31
    3c8a:	e0 91 d1 21 	lds	r30, 0x21D1
    3c8e:	f0 91 d2 21 	lds	r31, 0x21D2
    3c92:	30 97       	sbiw	r30, 0x00	; 0
    3c94:	29 f0       	breq	.+10     	; 0x3ca0 <__vector_109+0x3c>
    3c96:	80 91 c7 22 	lds	r24, 0x22C7
    3c9a:	90 91 c8 22 	lds	r25, 0x22C8
    3c9e:	19 95       	eicall
    3ca0:	ff 91       	pop	r31
    3ca2:	ef 91       	pop	r30
    3ca4:	bf 91       	pop	r27
    3ca6:	af 91       	pop	r26
    3ca8:	9f 91       	pop	r25
    3caa:	8f 91       	pop	r24
    3cac:	7f 91       	pop	r23
    3cae:	6f 91       	pop	r22
    3cb0:	5f 91       	pop	r21
    3cb2:	4f 91       	pop	r20
    3cb4:	3f 91       	pop	r19
    3cb6:	2f 91       	pop	r18
    3cb8:	0f 90       	pop	r0
    3cba:	0b be       	out	0x3b, r0	; 59
    3cbc:	0f 90       	pop	r0
    3cbe:	0f be       	out	0x3f, r0	; 63
    3cc0:	0f 90       	pop	r0
    3cc2:	1f 90       	pop	r1
    3cc4:	18 95       	reti

00003cc6 <__vector_110>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCA_vect)      /* Compare or Capture A Interrupt */
    3cc6:	1f 92       	push	r1
    3cc8:	0f 92       	push	r0
    3cca:	0f b6       	in	r0, 0x3f	; 63
    3ccc:	0f 92       	push	r0
    3cce:	11 24       	eor	r1, r1
    3cd0:	0b b6       	in	r0, 0x3b	; 59
    3cd2:	0f 92       	push	r0
    3cd4:	2f 93       	push	r18
    3cd6:	3f 93       	push	r19
    3cd8:	4f 93       	push	r20
    3cda:	5f 93       	push	r21
    3cdc:	6f 93       	push	r22
    3cde:	7f 93       	push	r23
    3ce0:	8f 93       	push	r24
    3ce2:	9f 93       	push	r25
    3ce4:	af 93       	push	r26
    3ce6:	bf 93       	push	r27
    3ce8:	ef 93       	push	r30
    3cea:	ff 93       	push	r31
    3cec:	e0 91 d3 21 	lds	r30, 0x21D3
    3cf0:	f0 91 d4 21 	lds	r31, 0x21D4
    3cf4:	30 97       	sbiw	r30, 0x00	; 0
    3cf6:	29 f0       	breq	.+10     	; 0x3d02 <__vector_110+0x3c>
    3cf8:	80 91 c9 22 	lds	r24, 0x22C9
    3cfc:	90 91 ca 22 	lds	r25, 0x22CA
    3d00:	19 95       	eicall
    3d02:	ff 91       	pop	r31
    3d04:	ef 91       	pop	r30
    3d06:	bf 91       	pop	r27
    3d08:	af 91       	pop	r26
    3d0a:	9f 91       	pop	r25
    3d0c:	8f 91       	pop	r24
    3d0e:	7f 91       	pop	r23
    3d10:	6f 91       	pop	r22
    3d12:	5f 91       	pop	r21
    3d14:	4f 91       	pop	r20
    3d16:	3f 91       	pop	r19
    3d18:	2f 91       	pop	r18
    3d1a:	0f 90       	pop	r0
    3d1c:	0b be       	out	0x3b, r0	; 59
    3d1e:	0f 90       	pop	r0
    3d20:	0f be       	out	0x3f, r0	; 63
    3d22:	0f 90       	pop	r0
    3d24:	1f 90       	pop	r1
    3d26:	18 95       	reti

00003d28 <__vector_111>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCB_vect)      /* Compare or Capture B Interrupt */
    3d28:	1f 92       	push	r1
    3d2a:	0f 92       	push	r0
    3d2c:	0f b6       	in	r0, 0x3f	; 63
    3d2e:	0f 92       	push	r0
    3d30:	11 24       	eor	r1, r1
    3d32:	0b b6       	in	r0, 0x3b	; 59
    3d34:	0f 92       	push	r0
    3d36:	2f 93       	push	r18
    3d38:	3f 93       	push	r19
    3d3a:	4f 93       	push	r20
    3d3c:	5f 93       	push	r21
    3d3e:	6f 93       	push	r22
    3d40:	7f 93       	push	r23
    3d42:	8f 93       	push	r24
    3d44:	9f 93       	push	r25
    3d46:	af 93       	push	r26
    3d48:	bf 93       	push	r27
    3d4a:	ef 93       	push	r30
    3d4c:	ff 93       	push	r31
    3d4e:	e0 91 d5 21 	lds	r30, 0x21D5
    3d52:	f0 91 d6 21 	lds	r31, 0x21D6
    3d56:	30 97       	sbiw	r30, 0x00	; 0
    3d58:	29 f0       	breq	.+10     	; 0x3d64 <__vector_111+0x3c>
    3d5a:	80 91 cb 22 	lds	r24, 0x22CB
    3d5e:	90 91 cc 22 	lds	r25, 0x22CC
    3d62:	19 95       	eicall
    3d64:	ff 91       	pop	r31
    3d66:	ef 91       	pop	r30
    3d68:	bf 91       	pop	r27
    3d6a:	af 91       	pop	r26
    3d6c:	9f 91       	pop	r25
    3d6e:	8f 91       	pop	r24
    3d70:	7f 91       	pop	r23
    3d72:	6f 91       	pop	r22
    3d74:	5f 91       	pop	r21
    3d76:	4f 91       	pop	r20
    3d78:	3f 91       	pop	r19
    3d7a:	2f 91       	pop	r18
    3d7c:	0f 90       	pop	r0
    3d7e:	0b be       	out	0x3b, r0	; 59
    3d80:	0f 90       	pop	r0
    3d82:	0f be       	out	0x3f, r0	; 63
    3d84:	0f 90       	pop	r0
    3d86:	1f 90       	pop	r1
    3d88:	18 95       	reti

00003d8a <__vector_112>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCC_vect)      /* Compare or Capture C Interrupt */
    3d8a:	1f 92       	push	r1
    3d8c:	0f 92       	push	r0
    3d8e:	0f b6       	in	r0, 0x3f	; 63
    3d90:	0f 92       	push	r0
    3d92:	11 24       	eor	r1, r1
    3d94:	0b b6       	in	r0, 0x3b	; 59
    3d96:	0f 92       	push	r0
    3d98:	2f 93       	push	r18
    3d9a:	3f 93       	push	r19
    3d9c:	4f 93       	push	r20
    3d9e:	5f 93       	push	r21
    3da0:	6f 93       	push	r22
    3da2:	7f 93       	push	r23
    3da4:	8f 93       	push	r24
    3da6:	9f 93       	push	r25
    3da8:	af 93       	push	r26
    3daa:	bf 93       	push	r27
    3dac:	ef 93       	push	r30
    3dae:	ff 93       	push	r31
    3db0:	e0 91 d7 21 	lds	r30, 0x21D7
    3db4:	f0 91 d8 21 	lds	r31, 0x21D8
    3db8:	30 97       	sbiw	r30, 0x00	; 0
    3dba:	29 f0       	breq	.+10     	; 0x3dc6 <__vector_112+0x3c>
    3dbc:	80 91 cd 22 	lds	r24, 0x22CD
    3dc0:	90 91 ce 22 	lds	r25, 0x22CE
    3dc4:	19 95       	eicall
    3dc6:	ff 91       	pop	r31
    3dc8:	ef 91       	pop	r30
    3dca:	bf 91       	pop	r27
    3dcc:	af 91       	pop	r26
    3dce:	9f 91       	pop	r25
    3dd0:	8f 91       	pop	r24
    3dd2:	7f 91       	pop	r23
    3dd4:	6f 91       	pop	r22
    3dd6:	5f 91       	pop	r21
    3dd8:	4f 91       	pop	r20
    3dda:	3f 91       	pop	r19
    3ddc:	2f 91       	pop	r18
    3dde:	0f 90       	pop	r0
    3de0:	0b be       	out	0x3b, r0	; 59
    3de2:	0f 90       	pop	r0
    3de4:	0f be       	out	0x3f, r0	; 63
    3de6:	0f 90       	pop	r0
    3de8:	1f 90       	pop	r1
    3dea:	18 95       	reti

00003dec <__vector_113>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(TCF0_CCD_vect)      /* Compare or Capture D Interrupt */
    3dec:	1f 92       	push	r1
    3dee:	0f 92       	push	r0
    3df0:	0f b6       	in	r0, 0x3f	; 63
    3df2:	0f 92       	push	r0
    3df4:	11 24       	eor	r1, r1
    3df6:	0b b6       	in	r0, 0x3b	; 59
    3df8:	0f 92       	push	r0
    3dfa:	2f 93       	push	r18
    3dfc:	3f 93       	push	r19
    3dfe:	4f 93       	push	r20
    3e00:	5f 93       	push	r21
    3e02:	6f 93       	push	r22
    3e04:	7f 93       	push	r23
    3e06:	8f 93       	push	r24
    3e08:	9f 93       	push	r25
    3e0a:	af 93       	push	r26
    3e0c:	bf 93       	push	r27
    3e0e:	ef 93       	push	r30
    3e10:	ff 93       	push	r31
    3e12:	e0 91 d9 21 	lds	r30, 0x21D9
    3e16:	f0 91 da 21 	lds	r31, 0x21DA
    3e1a:	30 97       	sbiw	r30, 0x00	; 0
    3e1c:	29 f0       	breq	.+10     	; 0x3e28 <__vector_113+0x3c>
    3e1e:	80 91 cf 22 	lds	r24, 0x22CF
    3e22:	90 91 d0 22 	lds	r25, 0x22D0
    3e26:	19 95       	eicall
    3e28:	ff 91       	pop	r31
    3e2a:	ef 91       	pop	r30
    3e2c:	bf 91       	pop	r27
    3e2e:	af 91       	pop	r26
    3e30:	9f 91       	pop	r25
    3e32:	8f 91       	pop	r24
    3e34:	7f 91       	pop	r23
    3e36:	6f 91       	pop	r22
    3e38:	5f 91       	pop	r21
    3e3a:	4f 91       	pop	r20
    3e3c:	3f 91       	pop	r19
    3e3e:	2f 91       	pop	r18
    3e40:	0f 90       	pop	r0
    3e42:	0b be       	out	0x3b, r0	; 59
    3e44:	0f 90       	pop	r0
    3e46:	0f be       	out	0x3f, r0	; 63
    3e48:	0f 90       	pop	r0
    3e4a:	1f 90       	pop	r1
    3e4c:	18 95       	reti

00003e4e <__vector_119>:

/* USARTF0 interrupt vectors */
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_RXC_vect)      /* Reception Complete Interrupt */
    3e4e:	1f 92       	push	r1
    3e50:	0f 92       	push	r0
    3e52:	0f b6       	in	r0, 0x3f	; 63
    3e54:	0f 92       	push	r0
    3e56:	11 24       	eor	r1, r1
    3e58:	0b b6       	in	r0, 0x3b	; 59
    3e5a:	0f 92       	push	r0
    3e5c:	2f 93       	push	r18
    3e5e:	3f 93       	push	r19
    3e60:	4f 93       	push	r20
    3e62:	5f 93       	push	r21
    3e64:	6f 93       	push	r22
    3e66:	7f 93       	push	r23
    3e68:	8f 93       	push	r24
    3e6a:	9f 93       	push	r25
    3e6c:	af 93       	push	r26
    3e6e:	bf 93       	push	r27
    3e70:	ef 93       	push	r30
    3e72:	ff 93       	push	r31
    3e74:	e0 91 e5 21 	lds	r30, 0x21E5
    3e78:	f0 91 e6 21 	lds	r31, 0x21E6
    3e7c:	30 97       	sbiw	r30, 0x00	; 0
    3e7e:	29 f0       	breq	.+10     	; 0x3e8a <__vector_119+0x3c>
    3e80:	80 91 db 22 	lds	r24, 0x22DB
    3e84:	90 91 dc 22 	lds	r25, 0x22DC
    3e88:	19 95       	eicall
    3e8a:	ff 91       	pop	r31
    3e8c:	ef 91       	pop	r30
    3e8e:	bf 91       	pop	r27
    3e90:	af 91       	pop	r26
    3e92:	9f 91       	pop	r25
    3e94:	8f 91       	pop	r24
    3e96:	7f 91       	pop	r23
    3e98:	6f 91       	pop	r22
    3e9a:	5f 91       	pop	r21
    3e9c:	4f 91       	pop	r20
    3e9e:	3f 91       	pop	r19
    3ea0:	2f 91       	pop	r18
    3ea2:	0f 90       	pop	r0
    3ea4:	0b be       	out	0x3b, r0	; 59
    3ea6:	0f 90       	pop	r0
    3ea8:	0f be       	out	0x3f, r0	; 63
    3eaa:	0f 90       	pop	r0
    3eac:	1f 90       	pop	r1
    3eae:	18 95       	reti

00003eb0 <__vector_120>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_DRE_vect)      /* Data Register Empty Interrupt */
    3eb0:	1f 92       	push	r1
    3eb2:	0f 92       	push	r0
    3eb4:	0f b6       	in	r0, 0x3f	; 63
    3eb6:	0f 92       	push	r0
    3eb8:	11 24       	eor	r1, r1
    3eba:	0b b6       	in	r0, 0x3b	; 59
    3ebc:	0f 92       	push	r0
    3ebe:	2f 93       	push	r18
    3ec0:	3f 93       	push	r19
    3ec2:	4f 93       	push	r20
    3ec4:	5f 93       	push	r21
    3ec6:	6f 93       	push	r22
    3ec8:	7f 93       	push	r23
    3eca:	8f 93       	push	r24
    3ecc:	9f 93       	push	r25
    3ece:	af 93       	push	r26
    3ed0:	bf 93       	push	r27
    3ed2:	ef 93       	push	r30
    3ed4:	ff 93       	push	r31
    3ed6:	e0 91 e7 21 	lds	r30, 0x21E7
    3eda:	f0 91 e8 21 	lds	r31, 0x21E8
    3ede:	30 97       	sbiw	r30, 0x00	; 0
    3ee0:	29 f0       	breq	.+10     	; 0x3eec <__vector_120+0x3c>
    3ee2:	80 91 dd 22 	lds	r24, 0x22DD
    3ee6:	90 91 de 22 	lds	r25, 0x22DE
    3eea:	19 95       	eicall
    3eec:	ff 91       	pop	r31
    3eee:	ef 91       	pop	r30
    3ef0:	bf 91       	pop	r27
    3ef2:	af 91       	pop	r26
    3ef4:	9f 91       	pop	r25
    3ef6:	8f 91       	pop	r24
    3ef8:	7f 91       	pop	r23
    3efa:	6f 91       	pop	r22
    3efc:	5f 91       	pop	r21
    3efe:	4f 91       	pop	r20
    3f00:	3f 91       	pop	r19
    3f02:	2f 91       	pop	r18
    3f04:	0f 90       	pop	r0
    3f06:	0b be       	out	0x3b, r0	; 59
    3f08:	0f 90       	pop	r0
    3f0a:	0f be       	out	0x3f, r0	; 63
    3f0c:	0f 90       	pop	r0
    3f0e:	1f 90       	pop	r1
    3f10:	18 95       	reti

00003f12 <__vector_121>:
SYS_INTERRUPT_VECTOR_HANDLER_MACRO(USARTF0_TXC_vect)      /* Transmission Complete Interrupt */
    3f12:	1f 92       	push	r1
    3f14:	0f 92       	push	r0
    3f16:	0f b6       	in	r0, 0x3f	; 63
    3f18:	0f 92       	push	r0
    3f1a:	11 24       	eor	r1, r1
    3f1c:	0b b6       	in	r0, 0x3b	; 59
    3f1e:	0f 92       	push	r0
    3f20:	2f 93       	push	r18
    3f22:	3f 93       	push	r19
    3f24:	4f 93       	push	r20
    3f26:	5f 93       	push	r21
    3f28:	6f 93       	push	r22
    3f2a:	7f 93       	push	r23
    3f2c:	8f 93       	push	r24
    3f2e:	9f 93       	push	r25
    3f30:	af 93       	push	r26
    3f32:	bf 93       	push	r27
    3f34:	ef 93       	push	r30
    3f36:	ff 93       	push	r31
    3f38:	e0 91 e9 21 	lds	r30, 0x21E9
    3f3c:	f0 91 ea 21 	lds	r31, 0x21EA
    3f40:	30 97       	sbiw	r30, 0x00	; 0
    3f42:	29 f0       	breq	.+10     	; 0x3f4e <__vector_121+0x3c>
    3f44:	80 91 df 22 	lds	r24, 0x22DF
    3f48:	90 91 e0 22 	lds	r25, 0x22E0
    3f4c:	19 95       	eicall
    3f4e:	ff 91       	pop	r31
    3f50:	ef 91       	pop	r30
    3f52:	bf 91       	pop	r27
    3f54:	af 91       	pop	r26
    3f56:	9f 91       	pop	r25
    3f58:	8f 91       	pop	r24
    3f5a:	7f 91       	pop	r23
    3f5c:	6f 91       	pop	r22
    3f5e:	5f 91       	pop	r21
    3f60:	4f 91       	pop	r20
    3f62:	3f 91       	pop	r19
    3f64:	2f 91       	pop	r18
    3f66:	0f 90       	pop	r0
    3f68:	0b be       	out	0x3b, r0	; 59
    3f6a:	0f 90       	pop	r0
    3f6c:	0f be       	out	0x3f, r0	; 63
    3f6e:	0f 90       	pop	r0
    3f70:	1f 90       	pop	r1
    3f72:	18 95       	reti

00003f74 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual()
{	
	while(1)
	{
		laserBoard.BeepClassError();
    3f74:	0e 94 48 04 	call	0x890	; 0x890 <_ZN11CLaserBoard14BeepClassErrorEv>
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;
CDGUSDatabase Database;

extern "C" void __cxa_pure_virtual()
    3f78:	fd cf       	rjmp	.-6      	; 0x3f74 <__cxa_pure_virtual>

00003f7a <_GLOBAL__sub_I_dacSPI>:
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    3f7a:	84 e3       	ldi	r24, 0x34	; 52
    3f7c:	93 e2       	ldi	r25, 0x23	; 35
    3f7e:	0e 94 c5 0b 	call	0x178a	; 0x178a <_ZN4CSPIC1Ev>
CDGUSUSART usart;
    3f82:	82 e3       	ldi	r24, 0x32	; 50
    3f84:	93 e2       	ldi	r25, 0x23	; 35
    3f86:	0e 94 a1 03 	call	0x742	; 0x742 <_ZN10CDGUSUSARTC1Ev>
CMBSender sender;
    3f8a:	89 e1       	ldi	r24, 0x19	; 25
    3f8c:	93 e2       	ldi	r25, 0x23	; 35
    3f8e:	0e 94 77 21 	call	0x42ee	; 0x42ee <_ZN9CMBSenderC1Ev>
CLaserBoard laserBoard;
    3f92:	88 e1       	ldi	r24, 0x18	; 24
    3f94:	93 e2       	ldi	r25, 0x23	; 35
    3f96:	0e 94 b5 03 	call	0x76a	; 0x76a <_ZN11CLaserBoardC1Ev>
CSoundPlayer player;
    3f9a:	87 e1       	ldi	r24, 0x17	; 23
    3f9c:	93 e2       	ldi	r25, 0x23	; 35
    3f9e:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <_ZN12CSoundPlayerC1Ev>
CLaserControlApp App;
    3fa2:	8d ee       	ldi	r24, 0xED	; 237
    3fa4:	92 e2       	ldi	r25, 0x22	; 34
    3fa6:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_ZN16CLaserControlAppC1Ev>
CDGUSDatabase Database;
    3faa:	85 ee       	ldi	r24, 0xE5	; 229
    3fac:	92 e2       	ldi	r25, 0x22	; 34
    3fae:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN13CDGUSDatabaseC1Ev>
    3fb2:	08 95       	ret

00003fb4 <_GLOBAL__sub_D_dacSPI>:
    3fb4:	85 ee       	ldi	r24, 0xE5	; 229
    3fb6:	92 e2       	ldi	r25, 0x22	; 34
    3fb8:	0e 94 20 02 	call	0x440	; 0x440 <_ZN13CDGUSDatabaseD1Ev>
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
CLaserControlApp App;
    3fbc:	8d ee       	ldi	r24, 0xED	; 237
    3fbe:	92 e2       	ldi	r25, 0x22	; 34
    3fc0:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN16CLaserControlAppD1Ev>
/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
CSoundPlayer player;
    3fc4:	87 e1       	ldi	r24, 0x17	; 23
    3fc6:	93 e2       	ldi	r25, 0x23	; 35
    3fc8:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <_ZN12CSoundPlayerD1Ev>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
CLaserBoard laserBoard;
    3fcc:	88 e1       	ldi	r24, 0x18	; 24
    3fce:	93 e2       	ldi	r25, 0x23	; 35
    3fd0:	0e 94 b6 03 	call	0x76c	; 0x76c <_ZN11CLaserBoardD1Ev>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
CMBSender sender;
    3fd4:	89 e1       	ldi	r24, 0x19	; 25
    3fd6:	93 e2       	ldi	r25, 0x23	; 35
    3fd8:	0e 94 cc 21 	call	0x4398	; 0x4398 <_ZN9CMBSenderD1Ev>
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
CDGUSUSART usart;
    3fdc:	82 e3       	ldi	r24, 0x32	; 50
    3fde:	93 e2       	ldi	r25, 0x23	; 35
    3fe0:	0e 94 ad 03 	call	0x75a	; 0x75a <_ZN10CDGUSUSARTD1Ev>
// Utils
#include <math.h>
#include <util/delay.h>

/* Global variables */
CSPI dacSPI;
    3fe4:	84 e3       	ldi	r24, 0x34	; 52
    3fe6:	93 e2       	ldi	r25, 0x23	; 35
    3fe8:	0e 94 c6 0b 	call	0x178c	; 0x178c <_ZN4CSPID1Ev>
    3fec:	08 95       	ret

00003fee <_Z16SystemInitializev>:
		laserBoard.BeepClassError();
	}
}

void SystemInitialize()
{
    3fee:	ef 92       	push	r14
    3ff0:	0f 93       	push	r16
    3ff2:	1f 93       	push	r17
	cli();	/* Disable global interrupts */
    3ff4:	f8 94       	cli
	
	// Initialize modules
	laserBoard.InitializeIO();
    3ff6:	88 e1       	ldi	r24, 0x18	; 24
    3ff8:	93 e2       	ldi	r25, 0x23	; 35
    3ffa:	0e 94 b7 03 	call	0x76e	; 0x76e <_ZN11CLaserBoard12InitializeIOEv>
	player.Initialize();
    3ffe:	87 e1       	ldi	r24, 0x17	; 23
    4000:	93 e2       	ldi	r25, 0x23	; 35
    4002:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <_ZN12CSoundPlayer10InitializeEv>
	dacSPI.Initialize(true, SPI_DORD_MSBtoLSB, SPI_MODE_LFSTP_TRSMP, false, SPI_PRESCALER_DIV128_gc);
    4006:	0f 2e       	mov	r0, r31
    4008:	f3 e0       	ldi	r31, 0x03	; 3
    400a:	ef 2e       	mov	r14, r31
    400c:	f0 2d       	mov	r31, r0
    400e:	00 e0       	ldi	r16, 0x00	; 0
    4010:	23 e0       	ldi	r18, 0x03	; 3
    4012:	40 e0       	ldi	r20, 0x00	; 0
    4014:	61 e0       	ldi	r22, 0x01	; 1
    4016:	84 e3       	ldi	r24, 0x34	; 52
    4018:	93 e2       	ldi	r25, 0x23	; 35
    401a:	0e 94 c7 0b 	call	0x178e	; 0x178e <_ZN4CSPI10InitializeEb19SPI_DATA_ORDER_ENUM13SPI_MODE_ENUMb18SPI_PRESCALER_enum>
	usart.Initialize(BAUD_115200_ERM0P1, PARITY_DISABLE, STOPBITS_1BIT, true);
    401e:	01 e0       	ldi	r16, 0x01	; 1
    4020:	20 e0       	ldi	r18, 0x00	; 0
    4022:	40 e0       	ldi	r20, 0x00	; 0
    4024:	6d e0       	ldi	r22, 0x0D	; 13
    4026:	82 e3       	ldi	r24, 0x32	; 50
    4028:	93 e2       	ldi	r25, 0x23	; 35
    402a:	0e 94 25 03 	call	0x64a	; 0x64a <_ZN10CDGUSUSART10InitializeE13BAUDRATE_ENUM11PARITY_ENUM12STOBITS_ENUMb>
	sender.Initialize(&usart, &App, 256, 256);
    402e:	00 e0       	ldi	r16, 0x00	; 0
    4030:	11 e0       	ldi	r17, 0x01	; 1
    4032:	20 e0       	ldi	r18, 0x00	; 0
    4034:	31 e0       	ldi	r19, 0x01	; 1
    4036:	4d ee       	ldi	r20, 0xED	; 237
    4038:	52 e2       	ldi	r21, 0x22	; 34
    403a:	62 e3       	ldi	r22, 0x32	; 50
    403c:	73 e2       	ldi	r23, 0x23	; 35
    403e:	89 e1       	ldi	r24, 0x19	; 25
    4040:	93 e2       	ldi	r25, 0x23	; 35
    4042:	0e 94 7d 21 	call	0x42fa	; 0x42fa <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj>
	App.Initialize(&sender);
    4046:	69 e1       	ldi	r22, 0x19	; 25
    4048:	73 e2       	ldi	r23, 0x23	; 35
    404a:	8d ee       	ldi	r24, 0xED	; 237
    404c:	92 e2       	ldi	r25, 0x22	; 34
    404e:	0e 94 14 06 	call	0xc28	; 0xc28 <_ZN16CLaserControlApp10InitializeEP9CMBSender>
	laserBoard.InitializeClock();
    4052:	88 e1       	ldi	r24, 0x18	; 24
    4054:	93 e2       	ldi	r25, 0x23	; 35
    4056:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <_ZN11CLaserBoard15InitializeClockEv>
	Database.Initialize(&sender, VARIABLE_ADDR_DATABASE);
    405a:	40 e0       	ldi	r20, 0x00	; 0
    405c:	51 e0       	ldi	r21, 0x01	; 1
    405e:	69 e1       	ldi	r22, 0x19	; 25
    4060:	73 e2       	ldi	r23, 0x23	; 35
    4062:	85 ee       	ldi	r24, 0xE5	; 229
    4064:	92 e2       	ldi	r25, 0x22	; 34
    4066:	0e 94 21 02 	call	0x442	; 0x442 <_ZN13CDGUSDatabase10InitializeEP9CMBSenderj>
	
	sei();	/* Enable global interrupts */
    406a:	78 94       	sei
}
    406c:	1f 91       	pop	r17
    406e:	0f 91       	pop	r16
    4070:	ef 90       	pop	r14
    4072:	08 95       	ret

00004074 <main>:
int main(void)
{
	float x = 0.0f;
	
	// Initialization system
	SystemInitialize();
    4074:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_Z16SystemInitializev>
    4078:	2f ef       	ldi	r18, 0xFF	; 255
    407a:	8f e4       	ldi	r24, 0x4F	; 79
    407c:	93 ec       	ldi	r25, 0xC3	; 195
    407e:	21 50       	subi	r18, 0x01	; 1
    4080:	80 40       	sbci	r24, 0x00	; 0
    4082:	90 40       	sbci	r25, 0x00	; 0
    4084:	e1 f7       	brne	.-8      	; 0x407e <main+0xa>
    4086:	00 c0       	rjmp	.+0      	; 0x4088 <main+0x14>
    4088:	00 00       	nop
	// Startup delay (Beep "Imperial March")
	//player.Play();
	_delay_ms(2000);
	
	// Initialize application GUI
	App.Start();
    408a:	8d ee       	ldi	r24, 0xED	; 237
    408c:	92 e2       	ldi	r25, 0x22	; 34
    408e:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN16CLaserControlApp5StartEv>
		// Loop delay
		_delay_ms(1);
		
		// Process application
		static uint16_t prs = 0;
		if ((prs++ % 200) == 0)
    4092:	c8 ec       	ldi	r28, 0xC8	; 200
    4094:	8f e3       	ldi	r24, 0x3F	; 63
    4096:	9f e1       	ldi	r25, 0x1F	; 31
    4098:	01 97       	sbiw	r24, 0x01	; 1
    409a:	f1 f7       	brne	.-4      	; 0x4098 <main+0x24>
    409c:	00 c0       	rjmp	.+0      	; 0x409e <main+0x2a>
    409e:	00 00       	nop
    40a0:	40 91 e3 22 	lds	r20, 0x22E3
    40a4:	50 91 e4 22 	lds	r21, 0x22E4
    40a8:	ca 01       	movw	r24, r20
    40aa:	01 96       	adiw	r24, 0x01	; 1
    40ac:	80 93 e3 22 	sts	0x22E3, r24
    40b0:	90 93 e4 22 	sts	0x22E4, r25
    40b4:	9a 01       	movw	r18, r20
    40b6:	36 95       	lsr	r19
    40b8:	27 95       	ror	r18
    40ba:	36 95       	lsr	r19
    40bc:	27 95       	ror	r18
    40be:	36 95       	lsr	r19
    40c0:	27 95       	ror	r18
    40c2:	ab e7       	ldi	r26, 0x7B	; 123
    40c4:	b4 e1       	ldi	r27, 0x14	; 20
    40c6:	0e 94 c2 23 	call	0x4784	; 0x4784 <__umulhisi3>
    40ca:	96 95       	lsr	r25
    40cc:	87 95       	ror	r24
    40ce:	c8 9f       	mul	r28, r24
    40d0:	90 01       	movw	r18, r0
    40d2:	c9 9f       	mul	r28, r25
    40d4:	30 0d       	add	r19, r0
    40d6:	11 24       	eor	r1, r1
    40d8:	42 17       	cp	r20, r18
    40da:	53 07       	cpc	r21, r19
    40dc:	d9 f6       	brne	.-74     	; 0x4094 <main+0x20>
			App.Run();
    40de:	8d ee       	ldi	r24, 0xED	; 237
    40e0:	92 e2       	ldi	r25, 0x22	; 34
    40e2:	0e 94 49 06 	call	0xc92	; 0xc92 <_ZN16CLaserControlApp3RunEv>
    40e6:	d6 cf       	rjmp	.-84     	; 0x4094 <main+0x20>

000040e8 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh>:
	free(tx_buffer);
}

// local methods
void CMBEventsHandler::FillRegDataTx(uint8_t addr, uint8_t* data, uint8_t length)
{
    40e8:	cf 93       	push	r28
    40ea:	df 93       	push	r29
    40ec:	ec 01       	movw	r28, r24
		// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    40ee:	ec 81       	ldd	r30, Y+4	; 0x04
    40f0:	fd 81       	ldd	r31, Y+5	; 0x05
    40f2:	8a ea       	ldi	r24, 0xAA	; 170
    40f4:	80 83       	st	Z, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    40f6:	ec 81       	ldd	r30, Y+4	; 0x04
    40f8:	fd 81       	ldd	r31, Y+5	; 0x05
    40fa:	8c ec       	ldi	r24, 0xCC	; 204
    40fc:	81 83       	std	Z+1, r24	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 4; //CMD (1) + DATA(length) + CRC(2) + ADDR(1)
#else
	tx_buffer[2] = length + 2; //CMD (1) + DATA(length) + ADDR(1)
    40fe:	ec 81       	ldd	r30, Y+4	; 0x04
    4100:	fd 81       	ldd	r31, Y+5	; 0x05
    4102:	82 e0       	ldi	r24, 0x02	; 2
    4104:	82 0f       	add	r24, r18
    4106:	82 83       	std	Z+2, r24	; 0x02
#endif
	tx_buffer[3] = 0x80;	// Frame command
    4108:	ec 81       	ldd	r30, Y+4	; 0x04
    410a:	fd 81       	ldd	r31, Y+5	; 0x05
    410c:	80 e8       	ldi	r24, 0x80	; 128
    410e:	83 83       	std	Z+3, r24	; 0x03
	tx_buffer[4] = addr;	// Register address
    4110:	ec 81       	ldd	r30, Y+4	; 0x04
    4112:	fd 81       	ldd	r31, Y+5	; 0x05
    4114:	64 83       	std	Z+4, r22	; 0x04
	tx_frame_length = length + 5;
    4116:	85 e0       	ldi	r24, 0x05	; 5
    4118:	82 0f       	add	r24, r18
    411a:	89 87       	std	Y+9, r24	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    411c:	30 e0       	ldi	r19, 0x00	; 0
    411e:	21 15       	cp	r18, r1
    4120:	31 05       	cpc	r19, r1
    4122:	81 f0       	breq	.+32     	; 0x4144 <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x5c>
    4124:	da 01       	movw	r26, r20
    4126:	42 0f       	add	r20, r18
    4128:	53 1f       	adc	r21, r19
    412a:	65 e0       	ldi	r22, 0x05	; 5
    412c:	70 e0       	ldi	r23, 0x00	; 0
		tx_buffer[i+5] = data[i];
    412e:	9d 91       	ld	r25, X+
    4130:	ec 81       	ldd	r30, Y+4	; 0x04
    4132:	fd 81       	ldd	r31, Y+5	; 0x05
    4134:	e6 0f       	add	r30, r22
    4136:	f7 1f       	adc	r31, r23
    4138:	90 83       	st	Z, r25
    413a:	6f 5f       	subi	r22, 0xFF	; 255
    413c:	7f 4f       	sbci	r23, 0xFF	; 255
	tx_buffer[3] = 0x80;	// Frame command
	tx_buffer[4] = addr;	// Register address
	tx_frame_length = length + 5;
		
	// Frame data
	for (uint16_t i = 0; i < length; i++)
    413e:	a4 17       	cp	r26, r20
    4140:	b5 07       	cpc	r27, r21
    4142:	a9 f7       	brne	.-22     	; 0x412e <_ZN16CMBEventsHandler13FillRegDataTxEhPhh+0x46>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length]   = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	tx_frame_length = length + 7;
#endif
}
    4144:	df 91       	pop	r29
    4146:	cf 91       	pop	r28
    4148:	08 95       	ret

0000414a <_ZN16CMBEventsHandler13FillRegDataRqEhh>:

void CMBEventsHandler::FillRegDataRq(uint8_t addr, uint8_t length)
{
    414a:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    414c:	a4 81       	ldd	r26, Z+4	; 0x04
    414e:	b5 81       	ldd	r27, Z+5	; 0x05
    4150:	8a ea       	ldi	r24, 0xAA	; 170
    4152:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4154:	a4 81       	ldd	r26, Z+4	; 0x04
    4156:	b5 81       	ldd	r27, Z+5	; 0x05
    4158:	8c ec       	ldi	r24, 0xCC	; 204
    415a:	11 96       	adiw	r26, 0x01	; 1
    415c:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 5; //CMD(1) + DATA(2) + CRC(2)
#else
	tx_buffer[2] = 3; //CMD(1) + DATA(2)
    415e:	a4 81       	ldd	r26, Z+4	; 0x04
    4160:	b5 81       	ldd	r27, Z+5	; 0x05
    4162:	83 e0       	ldi	r24, 0x03	; 3
    4164:	12 96       	adiw	r26, 0x02	; 2
    4166:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x81;	// Frame command
    4168:	a4 81       	ldd	r26, Z+4	; 0x04
    416a:	b5 81       	ldd	r27, Z+5	; 0x05
    416c:	81 e8       	ldi	r24, 0x81	; 129
    416e:	13 96       	adiw	r26, 0x03	; 3
    4170:	8c 93       	st	X, r24
	tx_buffer[4] = addr;	// Register address
    4172:	a4 81       	ldd	r26, Z+4	; 0x04
    4174:	b5 81       	ldd	r27, Z+5	; 0x05
    4176:	14 96       	adiw	r26, 0x04	; 4
    4178:	6c 93       	st	X, r22
	tx_buffer[5] = length;	// Data
    417a:	a4 81       	ldd	r26, Z+4	; 0x04
    417c:	b5 81       	ldd	r27, Z+5	; 0x05
    417e:	15 96       	adiw	r26, 0x05	; 5
    4180:	4c 93       	st	X, r20
	tx_frame_length = 6;
    4182:	86 e0       	ldi	r24, 0x06	; 6
    4184:	81 87       	std	Z+9, r24	; 0x09
    4186:	08 95       	ret

00004188 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj>:
	tx_frame_length = length + 8;
#endif
}

void CMBEventsHandler::FillVarDataTx(uint16_t addr, uint16_t* data, uint16_t length)
{
    4188:	0f 93       	push	r16
    418a:	1f 93       	push	r17
    418c:	cf 93       	push	r28
    418e:	df 93       	push	r29
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    4190:	dc 01       	movw	r26, r24
    4192:	14 96       	adiw	r26, 0x04	; 4
    4194:	ed 91       	ld	r30, X+
    4196:	fc 91       	ld	r31, X
    4198:	15 97       	sbiw	r26, 0x05	; 5
    419a:	aa ea       	ldi	r26, 0xAA	; 170
    419c:	a0 83       	st	Z, r26
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    419e:	ec 01       	movw	r28, r24
    41a0:	ec 81       	ldd	r30, Y+4	; 0x04
    41a2:	fd 81       	ldd	r31, Y+5	; 0x05
    41a4:	ac ec       	ldi	r26, 0xCC	; 204
    41a6:	a1 83       	std	Z+1, r26	; 0x01
		// Frame size
#ifdef USE_CRC
	tx_buffer[2] = length + 5; //CMD (1) + DATA(length * 2) + CRC(2) + ADDR(2)
#else
	tx_buffer[2] = length + 3; //CMD (1) + DATA(length * 2) + ADDR(2)
    41a8:	ec 81       	ldd	r30, Y+4	; 0x04
    41aa:	fd 81       	ldd	r31, Y+5	; 0x05
    41ac:	a3 e0       	ldi	r26, 0x03	; 3
    41ae:	a2 0f       	add	r26, r18
    41b0:	a2 83       	std	Z+2, r26	; 0x02
#endif
	tx_buffer[3] = 0x82;	// Frame command
    41b2:	ec 81       	ldd	r30, Y+4	; 0x04
    41b4:	fd 81       	ldd	r31, Y+5	; 0x05
    41b6:	a2 e8       	ldi	r26, 0x82	; 130
    41b8:	a3 83       	std	Z+3, r26	; 0x03
	tx_buffer[4] = addr >> 8;
    41ba:	ec 81       	ldd	r30, Y+4	; 0x04
    41bc:	fd 81       	ldd	r31, Y+5	; 0x05
    41be:	74 83       	std	Z+4, r23	; 0x04
	tx_buffer[5] = addr & 0xff;
    41c0:	ec 81       	ldd	r30, Y+4	; 0x04
    41c2:	fd 81       	ldd	r31, Y+5	; 0x05
    41c4:	65 83       	std	Z+5, r22	; 0x05
	tx_frame_length = length + 6;
    41c6:	66 e0       	ldi	r22, 0x06	; 6
    41c8:	62 0f       	add	r22, r18
    41ca:	69 87       	std	Y+9, r22	; 0x09
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    41cc:	36 95       	lsr	r19
    41ce:	27 95       	ror	r18
    41d0:	21 15       	cp	r18, r1
    41d2:	31 05       	cpc	r19, r1
    41d4:	e1 f0       	breq	.+56     	; 0x420e <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x86>
    41d6:	e4 2f       	mov	r30, r20
    41d8:	f5 2f       	mov	r31, r21
    41da:	2d 5f       	subi	r18, 0xFD	; 253
    41dc:	3f 4f       	sbci	r19, 0xFF	; 255
    41de:	22 0f       	add	r18, r18
    41e0:	33 1f       	adc	r19, r19
    41e2:	46 e0       	ldi	r20, 0x06	; 6
    41e4:	50 e0       	ldi	r21, 0x00	; 0
	{
		tx_buffer[6 + i*2 + 0] = data[i] >> 8;
    41e6:	ec 01       	movw	r28, r24
    41e8:	ac 81       	ldd	r26, Y+4	; 0x04
    41ea:	bd 81       	ldd	r27, Y+5	; 0x05
    41ec:	a4 0f       	add	r26, r20
    41ee:	b5 1f       	adc	r27, r21
    41f0:	61 81       	ldd	r22, Z+1	; 0x01
    41f2:	6c 93       	st	X, r22
		tx_buffer[6 + i*2 + 1] = data[i] & 0xff;
    41f4:	ac 81       	ldd	r26, Y+4	; 0x04
    41f6:	bd 81       	ldd	r27, Y+5	; 0x05
    41f8:	a4 0f       	add	r26, r20
    41fa:	b5 1f       	adc	r27, r21
    41fc:	60 81       	ld	r22, Z
    41fe:	32 96       	adiw	r30, 0x02	; 2
    4200:	11 96       	adiw	r26, 0x01	; 1
    4202:	6c 93       	st	X, r22
    4204:	4e 5f       	subi	r20, 0xFE	; 254
    4206:	5f 4f       	sbci	r21, 0xFF	; 255
	tx_buffer[4] = addr >> 8;
	tx_buffer[5] = addr & 0xff;
	tx_frame_length = length + 6;
		
	// Frame data
	for (uint16_t i = 0; i < length / 2; i++)
    4208:	42 17       	cp	r20, r18
    420a:	53 07       	cpc	r21, r19
    420c:	61 f7       	brne	.-40     	; 0x41e6 <_ZN16CMBEventsHandler13FillVarDataTxEjPjj+0x5e>
		crc = _crc16_update(crc, tx_buffer[i]);
	tx_buffer[tx_frame_length] = crc >> 8;
	tx_buffer[tx_frame_length+1] = crc & 0xff;
	this->tx_frame_length = length * 2 + 8;
#endif
}
    420e:	df 91       	pop	r29
    4210:	cf 91       	pop	r28
    4212:	1f 91       	pop	r17
    4214:	0f 91       	pop	r16
    4216:	08 95       	ret

00004218 <_ZN16CMBEventsHandler13FillVarDataRqEjj>:

void CMBEventsHandler::FillVarDataRq(uint16_t addr, uint16_t length)
{
    4218:	fc 01       	movw	r30, r24
	// Frame header
	tx_buffer[0] = FRAMEHEADER_LOWBYTE;
    421a:	a4 81       	ldd	r26, Z+4	; 0x04
    421c:	b5 81       	ldd	r27, Z+5	; 0x05
    421e:	8a ea       	ldi	r24, 0xAA	; 170
    4220:	8c 93       	st	X, r24
	tx_buffer[1] = FRAMEHEADER_HIGHBYTE;
    4222:	a4 81       	ldd	r26, Z+4	; 0x04
    4224:	b5 81       	ldd	r27, Z+5	; 0x05
    4226:	8c ec       	ldi	r24, 0xCC	; 204
    4228:	11 96       	adiw	r26, 0x01	; 1
    422a:	8c 93       	st	X, r24
	// Frame size
#ifdef USE_CRC
	tx_buffer[2] = 6; //CMD(1) + DATA(3) + CRC(2)
#else
	tx_buffer[2] = 4; //CMD(1) + DATA(3)
    422c:	a4 81       	ldd	r26, Z+4	; 0x04
    422e:	b5 81       	ldd	r27, Z+5	; 0x05
    4230:	84 e0       	ldi	r24, 0x04	; 4
    4232:	12 96       	adiw	r26, 0x02	; 2
    4234:	8c 93       	st	X, r24
#endif
	tx_buffer[3] = 0x83;				// Frame command
    4236:	a4 81       	ldd	r26, Z+4	; 0x04
    4238:	b5 81       	ldd	r27, Z+5	; 0x05
    423a:	83 e8       	ldi	r24, 0x83	; 131
    423c:	13 96       	adiw	r26, 0x03	; 3
    423e:	8c 93       	st	X, r24
	tx_buffer[4] = addr >> 8;			// Register address
    4240:	a4 81       	ldd	r26, Z+4	; 0x04
    4242:	b5 81       	ldd	r27, Z+5	; 0x05
    4244:	14 96       	adiw	r26, 0x04	; 4
    4246:	7c 93       	st	X, r23
	tx_buffer[5] = addr & 0xff;			// Register address
    4248:	a4 81       	ldd	r26, Z+4	; 0x04
    424a:	b5 81       	ldd	r27, Z+5	; 0x05
    424c:	15 96       	adiw	r26, 0x05	; 5
    424e:	6c 93       	st	X, r22
	tx_buffer[6] = length;				// Data
    4250:	a4 81       	ldd	r26, Z+4	; 0x04
    4252:	b5 81       	ldd	r27, Z+5	; 0x05
    4254:	16 96       	adiw	r26, 0x06	; 6
    4256:	4c 93       	st	X, r20
	tx_frame_length = 7;
    4258:	87 e0       	ldi	r24, 0x07	; 7
    425a:	81 87       	std	Z+9, r24	; 0x09
    425c:	08 95       	ret

0000425e <_ZN16CMBEventsHandler15AllocateBuffersEjj>:
CMBEventsHandler::~CMBEventsHandler()
{
} //~CMBProtocol

void CMBEventsHandler::AllocateBuffers(uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    425e:	0f 93       	push	r16
    4260:	1f 93       	push	r17
    4262:	cf 93       	push	r28
    4264:	df 93       	push	r29
    4266:	ec 01       	movw	r28, r24
    4268:	cb 01       	movw	r24, r22
    426a:	8a 01       	movw	r16, r20
	rx_bufferSize = rx_bufSize;
    426c:	6f 83       	std	Y+7, r22	; 0x07
    426e:	78 87       	std	Y+8, r23	; 0x08
	tx_bufferSize = tx_bufSize;
    4270:	4a 87       	std	Y+10, r20	; 0x0a
    4272:	5b 87       	std	Y+11, r21	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    4274:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <malloc>
    4278:	8a 83       	std	Y+2, r24	; 0x02
    427a:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    427c:	c8 01       	movw	r24, r16
    427e:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <malloc>
    4282:	8c 83       	std	Y+4, r24	; 0x04
    4284:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_frame_length  = 0x00;
    4286:	19 86       	std	Y+9, r1	; 0x09
	rx_frame_length  = 0x00;
    4288:	1e 82       	std	Y+6, r1	; 0x06
}
    428a:	df 91       	pop	r29
    428c:	cf 91       	pop	r28
    428e:	1f 91       	pop	r17
    4290:	0f 91       	pop	r16
    4292:	08 95       	ret

00004294 <_ZN16CMBEventsHandler11FreeBuffersEv>:

void CMBEventsHandler::FreeBuffers()
{
    4294:	cf 93       	push	r28
    4296:	df 93       	push	r29
    4298:	ec 01       	movw	r28, r24
	free(rx_buffer);
    429a:	8a 81       	ldd	r24, Y+2	; 0x02
    429c:	9b 81       	ldd	r25, Y+3	; 0x03
    429e:	0e 94 88 24 	call	0x4910	; 0x4910 <free>
	free(tx_buffer);
    42a2:	8c 81       	ldd	r24, Y+4	; 0x04
    42a4:	9d 81       	ldd	r25, Y+5	; 0x05
    42a6:	0e 94 88 24 	call	0x4910	; 0x4910 <free>
}
    42aa:	df 91       	pop	r29
    42ac:	cf 91       	pop	r28
    42ae:	08 95       	ret

000042b0 <_ZN16CMBEventsHandlerD1Ev>:

#include "CMBProtocol.h"
#include <avr/io.h>
#include <util/crc16.h>

CMBEventsHandler::~CMBEventsHandler()
    42b0:	08 95       	ret

000042b2 <_ZN9CMBSender18OnVariableReceivedEjPjj>:
	CMBSender::ProcessTransaction(data, length);
}

void CMBSender::OnVariableReceived(uint16_t addr, uint16_t* data, uint16_t length)
{
	if (CallbackHandler != 0)
    42b2:	dc 01       	movw	r26, r24
    42b4:	57 96       	adiw	r26, 0x17	; 23
    42b6:	8d 91       	ld	r24, X+
    42b8:	9c 91       	ld	r25, X
    42ba:	58 97       	sbiw	r26, 0x18	; 24
    42bc:	00 97       	sbiw	r24, 0x00	; 0
    42be:	39 f0       	breq	.+14     	; 0x42ce <_ZN9CMBSender18OnVariableReceivedEjPjj+0x1c>
		CallbackHandler->OnVariableReceived(addr, data, length);
    42c0:	dc 01       	movw	r26, r24
    42c2:	ed 91       	ld	r30, X+
    42c4:	fc 91       	ld	r31, X
    42c6:	02 80       	ldd	r0, Z+2	; 0x02
    42c8:	f3 81       	ldd	r31, Z+3	; 0x03
    42ca:	e0 2d       	mov	r30, r0
    42cc:	19 95       	eicall
    42ce:	08 95       	ret

000042d0 <_ZN9CMBSender18OnRegisterReceivedEhPhh>:
}


void CMBSender::OnRegisterReceived(uint8_t addr, uint8_t* data, uint8_t length)
{
	if (CallbackHandler != 0)
    42d0:	dc 01       	movw	r26, r24
    42d2:	57 96       	adiw	r26, 0x17	; 23
    42d4:	8d 91       	ld	r24, X+
    42d6:	9c 91       	ld	r25, X
    42d8:	58 97       	sbiw	r26, 0x18	; 24
    42da:	00 97       	sbiw	r24, 0x00	; 0
    42dc:	39 f0       	breq	.+14     	; 0x42ec <_ZN9CMBSender18OnRegisterReceivedEhPhh+0x1c>
		CallbackHandler->OnRegisterReceived(addr, data, length);
    42de:	dc 01       	movw	r26, r24
    42e0:	ed 91       	ld	r30, X+
    42e2:	fc 91       	ld	r31, X
    42e4:	04 80       	ldd	r0, Z+4	; 0x04
    42e6:	f5 81       	ldd	r31, Z+5	; 0x05
    42e8:	e0 2d       	mov	r30, r0
    42ea:	19 95       	eicall
    42ec:	08 95       	ret

000042ee <_ZN9CMBSenderC1Ev>:
#include "CMBSender.h"
#include <avr/io.h>
#include <util/crc16.h>

// default constructor
CMBSender::CMBSender()
    42ee:	20 ee       	ldi	r18, 0xE0	; 224
    42f0:	30 e2       	ldi	r19, 0x20	; 32
    42f2:	fc 01       	movw	r30, r24
    42f4:	20 83       	st	Z, r18
    42f6:	31 83       	std	Z+1, r19	; 0x01
    42f8:	08 95       	ret

000042fa <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj>:
	
}


void CMBSender::Initialize(CUSART* usart, CMBEventsHandler *handler, uint16_t rx_bufSize, uint16_t tx_bufSize)
{
    42fa:	cf 92       	push	r12
    42fc:	df 92       	push	r13
    42fe:	ef 92       	push	r14
    4300:	ff 92       	push	r15
    4302:	0f 93       	push	r16
    4304:	1f 93       	push	r17
    4306:	cf 93       	push	r28
    4308:	df 93       	push	r29
    430a:	ec 01       	movw	r28, r24
    430c:	7b 01       	movw	r14, r22
    430e:	6a 01       	movw	r12, r20
    4310:	c9 01       	movw	r24, r18
	rx_bufferSize = rx_bufSize;
    4312:	2f 83       	std	Y+7, r18	; 0x07
    4314:	38 87       	std	Y+8, r19	; 0x08
	tx_bufferSize = tx_bufSize;
    4316:	0a 87       	std	Y+10, r16	; 0x0a
    4318:	1b 87       	std	Y+11, r17	; 0x0b
	rx_buffer = (uint8_t*)malloc(rx_bufferSize);
    431a:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <malloc>
    431e:	8a 83       	std	Y+2, r24	; 0x02
    4320:	9b 83       	std	Y+3, r25	; 0x03
	tx_buffer = (uint8_t*)malloc(tx_bufferSize);
    4322:	c8 01       	movw	r24, r16
    4324:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <malloc>
    4328:	8c 83       	std	Y+4, r24	; 0x04
    432a:	9d 83       	std	Y+5, r25	; 0x05
	
	// Variables
	tx_buffer_pos    = 0x00;
    432c:	1d 8a       	std	Y+21, r1	; 0x15
	tx_frame_length  = 0x00;
    432e:	19 86       	std	Y+9, r1	; 0x09
	rx_buffer_pos    = 0x00;
    4330:	1f 86       	std	Y+15, r1	; 0x0f
	rx_frame_length  = 0x00;
    4332:	1e 82       	std	Y+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    4334:	18 8a       	std	Y+16, r1	; 0x10
    4336:	19 8a       	std	Y+17, r1	; 0x11
	rx_currt_crc     = 0x00;
    4338:	1a 8a       	std	Y+18, r1	; 0x12
    433a:	1b 8a       	std	Y+19, r1	; 0x13
	modbus_receiver_state  = rx_Idle;
    433c:	87 e0       	ldi	r24, 0x07	; 7
    433e:	8e 87       	std	Y+14, r24	; 0x0e
	modbus_transmitter_state  = tx_Idle;
    4340:	82 e0       	ldi	r24, 0x02	; 2
    4342:	8c 8b       	std	Y+20, r24	; 0x14
	isTransaction = false;
    4344:	1e 8a       	std	Y+22, r1	; 0x16
	
	// Set usart interface interrupts
	pUSART = usart;
    4346:	ec 86       	std	Y+12, r14	; 0x0c
    4348:	fd 86       	std	Y+13, r15	; 0x0d
	usart->SetRxInterruptionCallback((void*)this, OnUSARTRxInterrupt);
    434a:	d7 01       	movw	r26, r14
    434c:	ed 91       	ld	r30, X+
    434e:	fc 91       	ld	r31, X
    4350:	04 84       	ldd	r0, Z+12	; 0x0c
    4352:	f5 85       	ldd	r31, Z+13	; 0x0d
    4354:	e0 2d       	mov	r30, r0
    4356:	4e e8       	ldi	r20, 0x8E	; 142
    4358:	52 e2       	ldi	r21, 0x22	; 34
    435a:	be 01       	movw	r22, r28
    435c:	c7 01       	movw	r24, r14
    435e:	19 95       	eicall
	usart->SetTxInterruptionCallback((void*)this, OnUSARTTxInterrupt);
    4360:	d7 01       	movw	r26, r14
    4362:	ed 91       	ld	r30, X+
    4364:	fc 91       	ld	r31, X
    4366:	06 84       	ldd	r0, Z+14	; 0x0e
    4368:	f7 85       	ldd	r31, Z+15	; 0x0f
    436a:	e0 2d       	mov	r30, r0
    436c:	43 ef       	ldi	r20, 0xF3	; 243
    436e:	52 e2       	ldi	r21, 0x22	; 34
    4370:	be 01       	movw	r22, r28
    4372:	c7 01       	movw	r24, r14
    4374:	19 95       	eicall
	
	// Set event handler
	if (handler)
    4376:	c1 14       	cp	r12, r1
    4378:	d1 04       	cpc	r13, r1
    437a:	19 f0       	breq	.+6      	; 0x4382 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj+0x88>
		CallbackHandler = handler;
    437c:	cf 8a       	std	Y+23, r12	; 0x17
    437e:	d8 8e       	std	Y+24, r13	; 0x18
    4380:	02 c0       	rjmp	.+4      	; 0x4386 <_ZN9CMBSender10InitializeEP6CUSARTP16CMBEventsHandlerjj+0x8c>
	else
		CallbackHandler = this;
    4382:	cf 8b       	std	Y+23, r28	; 0x17
    4384:	d8 8f       	std	Y+24, r29	; 0x18
} //CMBSender
    4386:	df 91       	pop	r29
    4388:	cf 91       	pop	r28
    438a:	1f 91       	pop	r17
    438c:	0f 91       	pop	r16
    438e:	ff 90       	pop	r15
    4390:	ef 90       	pop	r14
    4392:	df 90       	pop	r13
    4394:	cf 90       	pop	r12
    4396:	08 95       	ret

00004398 <_ZN9CMBSenderD1Ev>:
	free(rx_buffer);
	free(tx_buffer);
}

// default destructor
CMBSender::~CMBSender()
    4398:	20 ee       	ldi	r18, 0xE0	; 224
    439a:	30 e2       	ldi	r19, 0x20	; 32
    439c:	fc 01       	movw	r30, r24
    439e:	20 83       	st	Z, r18
    43a0:	31 83       	std	Z+1, r19	; 0x01
    43a2:	0e 94 58 21 	call	0x42b0	; 0x42b0 <_ZN16CMBEventsHandlerD1Ev>
    43a6:	08 95       	ret

000043a8 <_ZN9CMBSender13OnReceiveByteEh>:
//void CMBSender::RequestDataFromSRAM(uint16_t addr, uint8_t length);

volatile uint16_t cnt = 0;

void CMBSender::OnReceiveByte(uint8_t data)
{
    43a8:	cf 93       	push	r28
    43aa:	df 93       	push	r29
    43ac:	ec 01       	movw	r28, r24
    43ae:	96 2f       	mov	r25, r22
	switch (modbus_receiver_state)
    43b0:	4e 85       	ldd	r20, Y+14	; 0x0e
    43b2:	50 e0       	ldi	r21, 0x00	; 0
    43b4:	4b 30       	cpi	r20, 0x0B	; 11
    43b6:	51 05       	cpc	r21, r1
    43b8:	08 f0       	brcs	.+2      	; 0x43bc <_ZN9CMBSender13OnReceiveByteEh+0x14>
    43ba:	ad c0       	rjmp	.+346    	; 0x4516 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
    43bc:	fa 01       	movw	r30, r20
    43be:	88 27       	eor	r24, r24
    43c0:	e5 5d       	subi	r30, 0xD5	; 213
    43c2:	fe 4f       	sbci	r31, 0xFE	; 254
    43c4:	8f 4f       	sbci	r24, 0xFF	; 255
    43c6:	0c 94 ba 23 	jmp	0x4774	; 0x4774 <__tablejump2__>
	{
		case rx_Start :
		case rx_FrameHeader0 :
			if (data == FRAMEHEADER_LOWBYTE)
    43ca:	9a 3a       	cpi	r25, 0xAA	; 170
    43cc:	19 f4       	brne	.+6      	; 0x43d4 <_ZN9CMBSender13OnReceiveByteEh+0x2c>
				modbus_receiver_state = rx_FrameHeader1;
    43ce:	82 e0       	ldi	r24, 0x02	; 2
    43d0:	8e 87       	std	Y+14, r24	; 0x0e
    43d2:	a1 c0       	rjmp	.+322    	; 0x4516 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    43d4:	81 e0       	ldi	r24, 0x01	; 1
    43d6:	8e 87       	std	Y+14, r24	; 0x0e
    43d8:	9e c0       	rjmp	.+316    	; 0x4516 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_FrameHeader1 :
			if (data == FRAMEHEADER_HIGHBYTE)
    43da:	9c 3c       	cpi	r25, 0xCC	; 204
    43dc:	19 f4       	brne	.+6      	; 0x43e4 <_ZN9CMBSender13OnReceiveByteEh+0x3c>
				modbus_receiver_state = rx_FrameLength;
    43de:	83 e0       	ldi	r24, 0x03	; 3
    43e0:	8e 87       	std	Y+14, r24	; 0x0e
    43e2:	99 c0       	rjmp	.+306    	; 0x4516 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			else
				modbus_receiver_state = rx_FrameHeader0; // Skip
    43e4:	81 e0       	ldi	r24, 0x01	; 1
    43e6:	8e 87       	std	Y+14, r24	; 0x0e
    43e8:	96 c0       	rjmp	.+300    	; 0x4516 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_FrameLength :
			rx_frame_length = data;
    43ea:	9e 83       	std	Y+6, r25	; 0x06
			rx_buffer_pos = 0;
    43ec:	1f 86       	std	Y+15, r1	; 0x0f
			rx_currt_crc = 0;
    43ee:	1a 8a       	std	Y+18, r1	; 0x12
    43f0:	1b 8a       	std	Y+19, r1	; 0x13
			cnt = 0;
    43f2:	10 92 3a 23 	sts	0x233A, r1
    43f6:	10 92 3b 23 	sts	0x233B, r1
			modbus_receiver_state = rx_FrameReceive;
    43fa:	84 e0       	ldi	r24, 0x04	; 4
    43fc:	8e 87       	std	Y+14, r24	; 0x0e
			break;
    43fe:	8b c0       	rjmp	.+278    	; 0x4516 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		case rx_FrameReceive :
			rx_buffer[rx_buffer_pos] = data;
    4400:	8f 85       	ldd	r24, Y+15	; 0x0f
    4402:	ea 81       	ldd	r30, Y+2	; 0x02
    4404:	fb 81       	ldd	r31, Y+3	; 0x03
    4406:	e8 0f       	add	r30, r24
    4408:	f1 1d       	adc	r31, r1
    440a:	90 83       	st	Z, r25
			if (rx_buffer_pos > rx_bufferSize)
    440c:	2f 85       	ldd	r18, Y+15	; 0x0f
    440e:	30 e0       	ldi	r19, 0x00	; 0
    4410:	4f 81       	ldd	r20, Y+7	; 0x07
    4412:	58 85       	ldd	r21, Y+8	; 0x08
    4414:	42 17       	cp	r20, r18
    4416:	53 07       	cpc	r21, r19
    4418:	18 f4       	brcc	.+6      	; 0x4420 <_ZN9CMBSender13OnReceiveByteEh+0x78>
			{
				modbus_receiver_state = rx_Error;
    441a:	89 e0       	ldi	r24, 0x09	; 9
    441c:	8e 87       	std	Y+14, r24	; 0x0e
				break;
    441e:	7b c0       	rjmp	.+246    	; 0x4516 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
    4420:	2a 89       	ldd	r18, Y+18	; 0x12
    4422:	3b 89       	ldd	r19, Y+19	; 0x13
    4424:	29 27       	eor	r18, r25
    4426:	92 2f       	mov	r25, r18
    4428:	92 95       	swap	r25
    442a:	92 27       	eor	r25, r18
    442c:	09 2e       	mov	r0, r25
    442e:	96 95       	lsr	r25
    4430:	96 95       	lsr	r25
    4432:	90 25       	eor	r25, r0
    4434:	09 2e       	mov	r0, r25
    4436:	96 95       	lsr	r25
    4438:	90 25       	eor	r25, r0
    443a:	97 70       	andi	r25, 0x07	; 7
    443c:	02 2e       	mov	r0, r18
    443e:	23 2f       	mov	r18, r19
    4440:	96 95       	lsr	r25
    4442:	07 94       	ror	r0
    4444:	97 95       	ror	r25
    4446:	30 2d       	mov	r19, r0
    4448:	29 27       	eor	r18, r25
    444a:	06 94       	lsr	r0
    444c:	97 95       	ror	r25
    444e:	30 25       	eor	r19, r0
    4450:	29 27       	eor	r18, r25
			}
			rx_currt_crc = _crc16_update(rx_currt_crc, data);
    4452:	2a 8b       	std	Y+18, r18	; 0x12
    4454:	3b 8b       	std	Y+19, r19	; 0x13
			rx_buffer_pos++;
    4456:	8f 85       	ldd	r24, Y+15	; 0x0f
    4458:	8f 5f       	subi	r24, 0xFF	; 255
    445a:	8f 87       	std	Y+15, r24	; 0x0f
			cnt++;
    445c:	80 91 3a 23 	lds	r24, 0x233A
    4460:	90 91 3b 23 	lds	r25, 0x233B
    4464:	01 96       	adiw	r24, 0x01	; 1
    4466:	80 93 3a 23 	sts	0x233A, r24
    446a:	90 93 3b 23 	sts	0x233B, r25
			if (rx_buffer_pos == rx_frame_length)
    446e:	4f 85       	ldd	r20, Y+15	; 0x0f
    4470:	8e 81       	ldd	r24, Y+6	; 0x06
    4472:	48 13       	cpse	r20, r24
    4474:	50 c0       	rjmp	.+160    	; 0x4516 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			{
#ifdef USE_CRC
				modbus_receiver_state = rx_CRC0;
#else
				modbus_receiver_state = rx_Complete;
    4476:	88 e0       	ldi	r24, 0x08	; 8
    4478:	8e 87       	std	Y+14, r24	; 0x0e
#endif
				OnTransactionCallback(rx_buffer, rx_frame_length);
    447a:	e8 81       	ld	r30, Y
    447c:	f9 81       	ldd	r31, Y+1	; 0x01
    447e:	50 e0       	ldi	r21, 0x00	; 0
    4480:	6a 81       	ldd	r22, Y+2	; 0x02
    4482:	7b 81       	ldd	r23, Y+3	; 0x03
    4484:	01 90       	ld	r0, Z+
    4486:	f0 81       	ld	r31, Z
    4488:	e0 2d       	mov	r30, r0
    448a:	ce 01       	movw	r24, r28
    448c:	19 95       	eicall
				if (CallbackHandler != 0)
    448e:	8f 89       	ldd	r24, Y+23	; 0x17
    4490:	98 8d       	ldd	r25, Y+24	; 0x18
    4492:	00 97       	sbiw	r24, 0x00	; 0
    4494:	09 f4       	brne	.+2      	; 0x4498 <_ZN9CMBSender13OnReceiveByteEh+0xf0>
    4496:	3f c0       	rjmp	.+126    	; 0x4516 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    4498:	dc 01       	movw	r26, r24
    449a:	ed 91       	ld	r30, X+
    449c:	fc 91       	ld	r31, X
    449e:	4e 81       	ldd	r20, Y+6	; 0x06
    44a0:	50 e0       	ldi	r21, 0x00	; 0
    44a2:	6a 81       	ldd	r22, Y+2	; 0x02
    44a4:	7b 81       	ldd	r23, Y+3	; 0x03
    44a6:	01 90       	ld	r0, Z+
    44a8:	f0 81       	ld	r31, Z
    44aa:	e0 2d       	mov	r30, r0
    44ac:	19 95       	eicall
    44ae:	33 c0       	rjmp	.+102    	; 0x4516 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			}
			break;
		case rx_CRC0 :
			rx_frame_crc = data;
    44b0:	69 2f       	mov	r22, r25
    44b2:	70 e0       	ldi	r23, 0x00	; 0
    44b4:	68 8b       	std	Y+16, r22	; 0x10
    44b6:	79 8b       	std	Y+17, r23	; 0x11
			modbus_receiver_state = rx_CRC1;
    44b8:	86 e0       	ldi	r24, 0x06	; 6
    44ba:	8e 87       	std	Y+14, r24	; 0x0e
			break;
    44bc:	2c c0       	rjmp	.+88     	; 0x4516 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
		case rx_CRC1 :
			rx_frame_crc |= (data << 8);
    44be:	28 89       	ldd	r18, Y+16	; 0x10
    44c0:	39 89       	ldd	r19, Y+17	; 0x11
    44c2:	a9 01       	movw	r20, r18
    44c4:	59 2b       	or	r21, r25
    44c6:	48 8b       	std	Y+16, r20	; 0x10
    44c8:	59 8b       	std	Y+17, r21	; 0x11
			if (rx_currt_crc == rx_frame_crc)
    44ca:	2a 89       	ldd	r18, Y+18	; 0x12
    44cc:	3b 89       	ldd	r19, Y+19	; 0x13
    44ce:	42 17       	cp	r20, r18
    44d0:	53 07       	cpc	r21, r19
    44d2:	e9 f4       	brne	.+58     	; 0x450e <_ZN9CMBSender13OnReceiveByteEh+0x166>
			{
				modbus_receiver_state = rx_Complete;
    44d4:	88 e0       	ldi	r24, 0x08	; 8
    44d6:	8e 87       	std	Y+14, r24	; 0x0e
				
				OnTransactionCallback(rx_buffer, rx_frame_length);
    44d8:	e8 81       	ld	r30, Y
    44da:	f9 81       	ldd	r31, Y+1	; 0x01
    44dc:	4e 81       	ldd	r20, Y+6	; 0x06
    44de:	50 e0       	ldi	r21, 0x00	; 0
    44e0:	6a 81       	ldd	r22, Y+2	; 0x02
    44e2:	7b 81       	ldd	r23, Y+3	; 0x03
    44e4:	01 90       	ld	r0, Z+
    44e6:	f0 81       	ld	r31, Z
    44e8:	e0 2d       	mov	r30, r0
    44ea:	ce 01       	movw	r24, r28
    44ec:	19 95       	eicall
				if (CallbackHandler != 0)
    44ee:	8f 89       	ldd	r24, Y+23	; 0x17
    44f0:	98 8d       	ldd	r25, Y+24	; 0x18
    44f2:	00 97       	sbiw	r24, 0x00	; 0
    44f4:	81 f0       	breq	.+32     	; 0x4516 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
					CallbackHandler->OnTransactionCallback(rx_buffer, rx_frame_length);
    44f6:	dc 01       	movw	r26, r24
    44f8:	ed 91       	ld	r30, X+
    44fa:	fc 91       	ld	r31, X
    44fc:	4e 81       	ldd	r20, Y+6	; 0x06
    44fe:	50 e0       	ldi	r21, 0x00	; 0
    4500:	6a 81       	ldd	r22, Y+2	; 0x02
    4502:	7b 81       	ldd	r23, Y+3	; 0x03
    4504:	01 90       	ld	r0, Z+
    4506:	f0 81       	ld	r31, Z
    4508:	e0 2d       	mov	r30, r0
    450a:	19 95       	eicall
    450c:	04 c0       	rjmp	.+8      	; 0x4516 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			}
			else
				modbus_receiver_state = rx_Error;
    450e:	89 e0       	ldi	r24, 0x09	; 9
    4510:	8e 87       	std	Y+14, r24	; 0x0e
    4512:	01 c0       	rjmp	.+2      	; 0x4516 <_ZN9CMBSender13OnReceiveByteEh+0x16e>
			break;
		case rx_Error :
		case rx_TimeOut :
			isTransaction = false;
    4514:	1e 8a       	std	Y+22, r1	; 0x16
		case rx_Complete :
		case rx_Idle :
		default:
		break;
	};
}
    4516:	df 91       	pop	r29
    4518:	cf 91       	pop	r28
    451a:	08 95       	ret

0000451c <_ZN9CMBSender18OnUSARTRxInterruptEPv>:
{
	modbus_transmitter_state = tx_Idle;
}

void CMBSender::OnUSARTRxInterrupt(void* sender)
{
    451c:	cf 93       	push	r28
    451e:	df 93       	push	r29
    4520:	ec 01       	movw	r28, r24
	CMBSender* owner = (CMBSender*)sender;
	uint8_t data = owner->pUSART->GetReceivedByte();
    4522:	8c 85       	ldd	r24, Y+12	; 0x0c
    4524:	9d 85       	ldd	r25, Y+13	; 0x0d
    4526:	dc 01       	movw	r26, r24
    4528:	ed 91       	ld	r30, X+
    452a:	fc 91       	ld	r31, X
    452c:	02 80       	ldd	r0, Z+2	; 0x02
    452e:	f3 81       	ldd	r31, Z+3	; 0x03
    4530:	e0 2d       	mov	r30, r0
    4532:	19 95       	eicall
	owner->OnReceiveByte(data);
    4534:	68 2f       	mov	r22, r24
    4536:	ce 01       	movw	r24, r28
    4538:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <_ZN9CMBSender13OnReceiveByteEh>
}
    453c:	df 91       	pop	r29
    453e:	cf 91       	pop	r28
    4540:	08 95       	ret

00004542 <_ZN9CMBSender19StartMODBUSListenerEv>:
	if (modbus_receiver_state != rx_Complete)
		modbus_receiver_state = rx_TimeOut;
}

void CMBSender::StartMODBUSListener()
{
    4542:	fc 01       	movw	r30, r24
	rx_buffer_pos    = 0x00;
    4544:	17 86       	std	Z+15, r1	; 0x0f
	rx_frame_length  = 0x00;
    4546:	16 82       	std	Z+6, r1	; 0x06
	rx_frame_crc     = 0x00;
    4548:	10 8a       	std	Z+16, r1	; 0x10
    454a:	11 8a       	std	Z+17, r1	; 0x11
	rx_currt_crc     = 0x00;
    454c:	12 8a       	std	Z+18, r1	; 0x12
    454e:	13 8a       	std	Z+19, r1	; 0x13
	modbus_receiver_state  = rx_Start;
    4550:	16 86       	std	Z+14, r1	; 0x0e
    4552:	08 95       	ret

00004554 <_ZN9CMBSender14OnTransmitByteEv>:
		break;
	};
}

void CMBSender::OnTransmitByte()
{
    4554:	cf 93       	push	r28
    4556:	df 93       	push	r29
    4558:	ec 01       	movw	r28, r24
	switch (modbus_transmitter_state)
    455a:	8c 89       	ldd	r24, Y+20	; 0x14
    455c:	84 30       	cpi	r24, 0x04	; 4
    455e:	38 f4       	brcc	.+14     	; 0x456e <_ZN9CMBSender14OnTransmitByteEv+0x1a>
    4560:	82 30       	cpi	r24, 0x02	; 2
    4562:	b8 f5       	brcc	.+110    	; 0x45d2 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    4564:	88 23       	and	r24, r24
    4566:	31 f0       	breq	.+12     	; 0x4574 <_ZN9CMBSender14OnTransmitByteEv+0x20>
    4568:	81 30       	cpi	r24, 0x01	; 1
    456a:	d1 f0       	breq	.+52     	; 0x45a0 <_ZN9CMBSender14OnTransmitByteEv+0x4c>
    456c:	39 c0       	rjmp	.+114    	; 0x45e0 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
    456e:	85 30       	cpi	r24, 0x05	; 5
    4570:	81 f1       	breq	.+96     	; 0x45d2 <_ZN9CMBSender14OnTransmitByteEv+0x7e>
    4572:	36 c0       	rjmp	.+108    	; 0x45e0 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
	{
		case tx_Start :
			modbus_transmitter_state = tx_Transmitting; // Start receiving packet
    4574:	81 e0       	ldi	r24, 0x01	; 1
    4576:	8c 8b       	std	Y+20, r24	; 0x14
			tx_buffer_pos = 0;
    4578:	1d 8a       	std	Y+21, r1	; 0x15
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    457a:	8c 85       	ldd	r24, Y+12	; 0x0c
    457c:	9d 85       	ldd	r25, Y+13	; 0x0d
    457e:	2d 89       	ldd	r18, Y+21	; 0x15
    4580:	dc 01       	movw	r26, r24
    4582:	ed 91       	ld	r30, X+
    4584:	fc 91       	ld	r31, X
    4586:	ac 81       	ldd	r26, Y+4	; 0x04
    4588:	bd 81       	ldd	r27, Y+5	; 0x05
    458a:	a2 0f       	add	r26, r18
    458c:	b1 1d       	adc	r27, r1
    458e:	04 80       	ldd	r0, Z+4	; 0x04
    4590:	f5 81       	ldd	r31, Z+5	; 0x05
    4592:	e0 2d       	mov	r30, r0
    4594:	6c 91       	ld	r22, X
    4596:	19 95       	eicall
			tx_buffer_pos++;
    4598:	8d 89       	ldd	r24, Y+21	; 0x15
    459a:	8f 5f       	subi	r24, 0xFF	; 255
    459c:	8d 8b       	std	Y+21, r24	; 0x15
			break;
    459e:	20 c0       	rjmp	.+64     	; 0x45e0 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
		case tx_Transmitting :
			pUSART->SetTransmittingByte(tx_buffer[tx_buffer_pos]);
    45a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    45a2:	9d 85       	ldd	r25, Y+13	; 0x0d
    45a4:	2d 89       	ldd	r18, Y+21	; 0x15
    45a6:	dc 01       	movw	r26, r24
    45a8:	ed 91       	ld	r30, X+
    45aa:	fc 91       	ld	r31, X
    45ac:	ac 81       	ldd	r26, Y+4	; 0x04
    45ae:	bd 81       	ldd	r27, Y+5	; 0x05
    45b0:	a2 0f       	add	r26, r18
    45b2:	b1 1d       	adc	r27, r1
    45b4:	04 80       	ldd	r0, Z+4	; 0x04
    45b6:	f5 81       	ldd	r31, Z+5	; 0x05
    45b8:	e0 2d       	mov	r30, r0
    45ba:	6c 91       	ld	r22, X
    45bc:	19 95       	eicall
			tx_buffer_pos++;
    45be:	8d 89       	ldd	r24, Y+21	; 0x15
    45c0:	8f 5f       	subi	r24, 0xFF	; 255
    45c2:	8d 8b       	std	Y+21, r24	; 0x15
			if (tx_buffer_pos == tx_frame_length)
    45c4:	9d 89       	ldd	r25, Y+21	; 0x15
    45c6:	89 85       	ldd	r24, Y+9	; 0x09
    45c8:	98 13       	cpse	r25, r24
    45ca:	0a c0       	rjmp	.+20     	; 0x45e0 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
				modbus_transmitter_state = tx_Complete;
    45cc:	83 e0       	ldi	r24, 0x03	; 3
    45ce:	8c 8b       	std	Y+20, r24	; 0x14
    45d0:	07 c0       	rjmp	.+14     	; 0x45e0 <_ZN9CMBSender14OnTransmitByteEv+0x8c>
			break;
		case tx_Idle :
		case tx_TimeOut :
		case tx_Complete :
			if (isTransaction)
    45d2:	8e 89       	ldd	r24, Y+22	; 0x16
    45d4:	88 23       	and	r24, r24
    45d6:	19 f0       	breq	.+6      	; 0x45de <_ZN9CMBSender14OnTransmitByteEv+0x8a>
				StartMODBUSListener();
    45d8:	ce 01       	movw	r24, r28
    45da:	0e 94 a1 22 	call	0x4542	; 0x4542 <_ZN9CMBSender19StartMODBUSListenerEv>
			isTransaction = false;
    45de:	1e 8a       	std	Y+22, r1	; 0x16
		default :
		break;
	}
}
    45e0:	df 91       	pop	r29
    45e2:	cf 91       	pop	r28
    45e4:	08 95       	ret

000045e6 <_ZN9CMBSender18OnUSARTTxInterruptEPv>:
}

void CMBSender::OnUSARTTxInterrupt(void* sender)
{
	CMBSender* owner = (CMBSender*)sender;
	owner->OnTransmitByte();
    45e6:	0e 94 aa 22 	call	0x4554	; 0x4554 <_ZN9CMBSender14OnTransmitByteEv>
    45ea:	08 95       	ret

000045ec <_ZN9CMBSender18WaitMODBUSListenerEv>:
	rx_currt_crc     = 0x00;
	modbus_receiver_state  = rx_Start;
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
    45ec:	fc 01       	movw	r30, r24
	while (modbus_receiver_state != rx_Complete)
    45ee:	06 c0       	rjmp	.+12     	; 0x45fc <_ZN9CMBSender18WaitMODBUSListenerEv+0x10>
	{
		if (modbus_receiver_state == rx_Error)
    45f0:	86 85       	ldd	r24, Z+14	; 0x0e
    45f2:	89 30       	cpi	r24, 0x09	; 9
    45f4:	41 f0       	breq	.+16     	; 0x4606 <_ZN9CMBSender18WaitMODBUSListenerEv+0x1a>
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
    45f6:	86 85       	ldd	r24, Z+14	; 0x0e
    45f8:	8a 30       	cpi	r24, 0x0A	; 10
    45fa:	39 f0       	breq	.+14     	; 0x460a <_ZN9CMBSender18WaitMODBUSListenerEv+0x1e>
	modbus_receiver_state  = rx_Start;
}

MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
    45fc:	86 85       	ldd	r24, Z+14	; 0x0e
    45fe:	88 30       	cpi	r24, 0x08	; 8
    4600:	b9 f7       	brne	.-18     	; 0x45f0 <_ZN9CMBSender18WaitMODBUSListenerEv+0x4>
		if (modbus_receiver_state == rx_Error)
			return Error;
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
	}
	return Complete;
    4602:	81 e0       	ldi	r24, 0x01	; 1
    4604:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSListener()
{
	while (modbus_receiver_state != rx_Complete)
	{
		if (modbus_receiver_state == rx_Error)
			return Error;
    4606:	82 e0       	ldi	r24, 0x02	; 2
    4608:	08 95       	ret
		if (modbus_receiver_state == rx_TimeOut)
			return TimeOut;
    460a:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    460c:	08 95       	ret

0000460e <_ZN9CMBSender22StartMODBUSTransmitterEv>:
	modbus_receiver_state  = rx_Idle;
}

void CMBSender::StartMODBUSTransmitter()
{
	tx_buffer_pos = 0x00;
    460e:	fc 01       	movw	r30, r24
    4610:	15 8a       	std	Z+21, r1	; 0x15
	modbus_transmitter_state  = tx_Start;
    4612:	14 8a       	std	Z+20, r1	; 0x14
	OnTransmitByte();
    4614:	0e 94 aa 22 	call	0x4554	; 0x4554 <_ZN9CMBSender14OnTransmitByteEv>
    4618:	08 95       	ret

0000461a <_ZN9CMBSender24WriteDataToRegisterAsyncEhPhh>:
{
} //~CMBSender

// MODBUS write data to register command
void CMBSender::WriteDataToRegisterAsync(uint8_t addr, uint8_t* data, uint8_t length)
{
    461a:	cf 93       	push	r28
    461c:	df 93       	push	r29
    461e:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataTx(addr, data, length);
    4620:	e8 81       	ld	r30, Y
    4622:	f9 81       	ldd	r31, Y+1	; 0x01
    4624:	02 84       	ldd	r0, Z+10	; 0x0a
    4626:	f3 85       	ldd	r31, Z+11	; 0x0b
    4628:	e0 2d       	mov	r30, r0
    462a:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    462c:	ce 01       	movw	r24, r28
    462e:	0e 94 07 23 	call	0x460e	; 0x460e <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    4632:	df 91       	pop	r29
    4634:	cf 91       	pop	r28
    4636:	08 95       	ret

00004638 <_ZN9CMBSender20WriteDataToSRAMAsyncEjPjj>:

void CMBSender::WriteDataToSRAMAsync(uint16_t addr, uint16_t* data, uint16_t length)
{
    4638:	cf 93       	push	r28
    463a:	df 93       	push	r29
    463c:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataTx(addr, data, length);
    463e:	e8 81       	ld	r30, Y
    4640:	f9 81       	ldd	r31, Y+1	; 0x01
    4642:	06 84       	ldd	r0, Z+14	; 0x0e
    4644:	f7 85       	ldd	r31, Z+15	; 0x0f
    4646:	e0 2d       	mov	r30, r0
    4648:	19 95       	eicall
		
	// Start transition
	StartMODBUSTransmitter();
    464a:	ce 01       	movw	r24, r28
    464c:	0e 94 07 23 	call	0x460e	; 0x460e <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    4650:	df 91       	pop	r29
    4652:	cf 91       	pop	r28
    4654:	08 95       	ret

00004656 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>:

void CMBSender::RequestDataFromRegisterAsync(uint8_t addr, uint8_t length)
{
    4656:	cf 93       	push	r28
    4658:	df 93       	push	r29
    465a:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillRegDataRq(addr, length);
    465c:	e8 81       	ld	r30, Y
    465e:	f9 81       	ldd	r31, Y+1	; 0x01
    4660:	04 84       	ldd	r0, Z+12	; 0x0c
    4662:	f5 85       	ldd	r31, Z+13	; 0x0d
    4664:	e0 2d       	mov	r30, r0
    4666:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    4668:	ce 01       	movw	r24, r28
    466a:	0e 94 07 23 	call	0x460e	; 0x460e <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    466e:	df 91       	pop	r29
    4670:	cf 91       	pop	r28
    4672:	08 95       	ret

00004674 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>:

void CMBSender::RequestDataFromSRAMAsync(uint16_t addr, uint8_t length)
{
    4674:	cf 93       	push	r28
    4676:	df 93       	push	r29
    4678:	ec 01       	movw	r28, r24
	// Fill data transmit buffer
	FillVarDataRq(addr, length);
    467a:	e8 81       	ld	r30, Y
    467c:	f9 81       	ldd	r31, Y+1	; 0x01
    467e:	50 e0       	ldi	r21, 0x00	; 0
    4680:	00 88       	ldd	r0, Z+16	; 0x10
    4682:	f1 89       	ldd	r31, Z+17	; 0x11
    4684:	e0 2d       	mov	r30, r0
    4686:	19 95       	eicall
	
	// Start transition
	StartMODBUSTransmitter();
    4688:	ce 01       	movw	r24, r28
    468a:	0e 94 07 23 	call	0x460e	; 0x460e <_ZN9CMBSender22StartMODBUSTransmitterEv>
}
    468e:	df 91       	pop	r29
    4690:	cf 91       	pop	r28
    4692:	08 95       	ret

00004694 <_ZN9CMBSender21WaitMODBUSTransmitterEv>:
	modbus_transmitter_state  = tx_Start;
	OnTransmitByte();
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
    4694:	fc 01       	movw	r30, r24
	while (modbus_transmitter_state != tx_Complete)
    4696:	06 c0       	rjmp	.+12     	; 0x46a4 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x10>
	{
		if (modbus_transmitter_state == tx_Error)
    4698:	84 89       	ldd	r24, Z+20	; 0x14
    469a:	84 30       	cpi	r24, 0x04	; 4
    469c:	41 f0       	breq	.+16     	; 0x46ae <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1a>
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
    469e:	84 89       	ldd	r24, Z+20	; 0x14
    46a0:	85 30       	cpi	r24, 0x05	; 5
    46a2:	39 f0       	breq	.+14     	; 0x46b2 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x1e>
	OnTransmitByte();
}

MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
    46a4:	84 89       	ldd	r24, Z+20	; 0x14
    46a6:	83 30       	cpi	r24, 0x03	; 3
    46a8:	b9 f7       	brne	.-18     	; 0x4698 <_ZN9CMBSender21WaitMODBUSTransmitterEv+0x4>
		if (modbus_transmitter_state == tx_Error)
		return Error;
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
	}
	return Complete;
    46aa:	81 e0       	ldi	r24, 0x01	; 1
    46ac:	08 95       	ret
MODBUS_STATE CMBSender::WaitMODBUSTransmitter()
{
	while (modbus_transmitter_state != tx_Complete)
	{
		if (modbus_transmitter_state == tx_Error)
		return Error;
    46ae:	82 e0       	ldi	r24, 0x02	; 2
    46b0:	08 95       	ret
		if (modbus_transmitter_state == tx_TimeOut)
		return TimeOut;
    46b2:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Complete;
}
    46b4:	08 95       	ret

000046b6 <_ZN9CMBSender30StartMODBUSRegisterTransactionEhh>:
	owner->OnTransmitByte();
}

void CMBSender::StartMODBUSRegisterTransaction(uint8_t addr, uint8_t length)
{
	isTransaction = true;
    46b6:	21 e0       	ldi	r18, 0x01	; 1
    46b8:	fc 01       	movw	r30, r24
    46ba:	26 8b       	std	Z+22, r18	; 0x16
	RequestDataFromRegisterAsync(addr, length);
    46bc:	0e 94 2b 23 	call	0x4656	; 0x4656 <_ZN9CMBSender28RequestDataFromRegisterAsyncEhh>
    46c0:	08 95       	ret

000046c2 <_ZN9CMBSender30StartMODBUSVariableTransactionEjh>:
}

void CMBSender::StartMODBUSVariableTransaction(uint16_t addr, uint8_t length)
{
	isTransaction = true;
    46c2:	21 e0       	ldi	r18, 0x01	; 1
    46c4:	fc 01       	movw	r30, r24
    46c6:	26 8b       	std	Z+22, r18	; 0x16
	RequestDataFromSRAMAsync(addr, length);
    46c8:	0e 94 3a 23 	call	0x4674	; 0x4674 <_ZN9CMBSender24RequestDataFromSRAMAsyncEjh>
    46cc:	08 95       	ret

000046ce <_ZN9CMBSender18ProcessTransactionEPhj>:
}

void CMBSender::ProcessTransaction(uint8_t* data, uint16_t length)
{
    46ce:	0f 93       	push	r16
    46d0:	1f 93       	push	r17
    46d2:	cf 93       	push	r28
    46d4:	df 93       	push	r29
    46d6:	8c 01       	movw	r16, r24
    46d8:	eb 01       	movw	r28, r22
	if (data[0] == 0x81)
    46da:	98 81       	ld	r25, Y
    46dc:	91 38       	cpi	r25, 0x81	; 129
    46de:	69 f4       	brne	.+26     	; 0x46fa <_ZN9CMBSender18ProcessTransactionEPhj+0x2c>
	{
		OnRegisterReceived(data[1], &data[3], data[2]);
    46e0:	d8 01       	movw	r26, r16
    46e2:	ed 91       	ld	r30, X+
    46e4:	fc 91       	ld	r31, X
    46e6:	04 80       	ldd	r0, Z+4	; 0x04
    46e8:	f5 81       	ldd	r31, Z+5	; 0x05
    46ea:	e0 2d       	mov	r30, r0
    46ec:	2a 81       	ldd	r18, Y+2	; 0x02
    46ee:	ab 01       	movw	r20, r22
    46f0:	4d 5f       	subi	r20, 0xFD	; 253
    46f2:	5f 4f       	sbci	r21, 0xFF	; 255
    46f4:	69 81       	ldd	r22, Y+1	; 0x01
    46f6:	c8 01       	movw	r24, r16
    46f8:	19 95       	eicall
	}
	if (data[0] == 0x83)
    46fa:	98 81       	ld	r25, Y
    46fc:	93 38       	cpi	r25, 0x83	; 131
    46fe:	99 f4       	brne	.+38     	; 0x4726 <_ZN9CMBSender18ProcessTransactionEPhj+0x58>
	{
		OnVariableReceived((data[1] << 8) | data[2], (uint16_t*)&data[4], data[3]);
    4700:	d8 01       	movw	r26, r16
    4702:	ed 91       	ld	r30, X+
    4704:	fc 91       	ld	r31, X
    4706:	2b 81       	ldd	r18, Y+3	; 0x03
    4708:	30 e0       	ldi	r19, 0x00	; 0
    470a:	ae 01       	movw	r20, r28
    470c:	4c 5f       	subi	r20, 0xFC	; 252
    470e:	5f 4f       	sbci	r21, 0xFF	; 255
    4710:	69 81       	ldd	r22, Y+1	; 0x01
    4712:	70 e0       	ldi	r23, 0x00	; 0
    4714:	76 2f       	mov	r23, r22
    4716:	66 27       	eor	r22, r22
    4718:	8a 81       	ldd	r24, Y+2	; 0x02
    471a:	68 2b       	or	r22, r24
    471c:	02 80       	ldd	r0, Z+2	; 0x02
    471e:	f3 81       	ldd	r31, Z+3	; 0x03
    4720:	e0 2d       	mov	r30, r0
    4722:	c8 01       	movw	r24, r16
    4724:	19 95       	eicall
	}
}
    4726:	df 91       	pop	r29
    4728:	cf 91       	pop	r28
    472a:	1f 91       	pop	r17
    472c:	0f 91       	pop	r16
    472e:	08 95       	ret

00004730 <_ZN9CMBSender21OnTransactionCallbackEPhj>:

void CMBSender::OnTransactionCallback(uint8_t* data, uint16_t length)
{
	CMBSender::ProcessTransaction(data, length);
    4730:	0e 94 67 23 	call	0x46ce	; 0x46ce <_ZN9CMBSender18ProcessTransactionEPhj>
    4734:	08 95       	ret

00004736 <__divmodsi4>:
    4736:	05 2e       	mov	r0, r21
    4738:	97 fb       	bst	r25, 7
    473a:	1e f4       	brtc	.+6      	; 0x4742 <__divmodsi4+0xc>
    473c:	00 94       	com	r0
    473e:	0e 94 b2 23 	call	0x4764	; 0x4764 <__negsi2>
    4742:	57 fd       	sbrc	r21, 7
    4744:	07 d0       	rcall	.+14     	; 0x4754 <__divmodsi4_neg2>
    4746:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <__udivmodsi4>
    474a:	07 fc       	sbrc	r0, 7
    474c:	03 d0       	rcall	.+6      	; 0x4754 <__divmodsi4_neg2>
    474e:	4e f4       	brtc	.+18     	; 0x4762 <__divmodsi4_exit>
    4750:	0c 94 b2 23 	jmp	0x4764	; 0x4764 <__negsi2>

00004754 <__divmodsi4_neg2>:
    4754:	50 95       	com	r21
    4756:	40 95       	com	r20
    4758:	30 95       	com	r19
    475a:	21 95       	neg	r18
    475c:	3f 4f       	sbci	r19, 0xFF	; 255
    475e:	4f 4f       	sbci	r20, 0xFF	; 255
    4760:	5f 4f       	sbci	r21, 0xFF	; 255

00004762 <__divmodsi4_exit>:
    4762:	08 95       	ret

00004764 <__negsi2>:
    4764:	90 95       	com	r25
    4766:	80 95       	com	r24
    4768:	70 95       	com	r23
    476a:	61 95       	neg	r22
    476c:	7f 4f       	sbci	r23, 0xFF	; 255
    476e:	8f 4f       	sbci	r24, 0xFF	; 255
    4770:	9f 4f       	sbci	r25, 0xFF	; 255
    4772:	08 95       	ret

00004774 <__tablejump2__>:
    4774:	ee 0f       	add	r30, r30
    4776:	ff 1f       	adc	r31, r31
    4778:	88 1f       	adc	r24, r24
    477a:	8b bf       	out	0x3b, r24	; 59
    477c:	07 90       	elpm	r0, Z+
    477e:	f6 91       	elpm	r31, Z
    4780:	e0 2d       	mov	r30, r0
    4782:	19 94       	eijmp

00004784 <__umulhisi3>:
    4784:	a2 9f       	mul	r26, r18
    4786:	b0 01       	movw	r22, r0
    4788:	b3 9f       	mul	r27, r19
    478a:	c0 01       	movw	r24, r0
    478c:	a3 9f       	mul	r26, r19
    478e:	70 0d       	add	r23, r0
    4790:	81 1d       	adc	r24, r1
    4792:	11 24       	eor	r1, r1
    4794:	91 1d       	adc	r25, r1
    4796:	b2 9f       	mul	r27, r18
    4798:	70 0d       	add	r23, r0
    479a:	81 1d       	adc	r24, r1
    479c:	11 24       	eor	r1, r1
    479e:	91 1d       	adc	r25, r1
    47a0:	08 95       	ret

000047a2 <__udivmodsi4>:
    47a2:	a1 e2       	ldi	r26, 0x21	; 33
    47a4:	1a 2e       	mov	r1, r26
    47a6:	aa 1b       	sub	r26, r26
    47a8:	bb 1b       	sub	r27, r27
    47aa:	fd 01       	movw	r30, r26
    47ac:	0d c0       	rjmp	.+26     	; 0x47c8 <__udivmodsi4_ep>

000047ae <__udivmodsi4_loop>:
    47ae:	aa 1f       	adc	r26, r26
    47b0:	bb 1f       	adc	r27, r27
    47b2:	ee 1f       	adc	r30, r30
    47b4:	ff 1f       	adc	r31, r31
    47b6:	a2 17       	cp	r26, r18
    47b8:	b3 07       	cpc	r27, r19
    47ba:	e4 07       	cpc	r30, r20
    47bc:	f5 07       	cpc	r31, r21
    47be:	20 f0       	brcs	.+8      	; 0x47c8 <__udivmodsi4_ep>
    47c0:	a2 1b       	sub	r26, r18
    47c2:	b3 0b       	sbc	r27, r19
    47c4:	e4 0b       	sbc	r30, r20
    47c6:	f5 0b       	sbc	r31, r21

000047c8 <__udivmodsi4_ep>:
    47c8:	66 1f       	adc	r22, r22
    47ca:	77 1f       	adc	r23, r23
    47cc:	88 1f       	adc	r24, r24
    47ce:	99 1f       	adc	r25, r25
    47d0:	1a 94       	dec	r1
    47d2:	69 f7       	brne	.-38     	; 0x47ae <__udivmodsi4_loop>
    47d4:	60 95       	com	r22
    47d6:	70 95       	com	r23
    47d8:	80 95       	com	r24
    47da:	90 95       	com	r25
    47dc:	9b 01       	movw	r18, r22
    47de:	ac 01       	movw	r20, r24
    47e0:	bd 01       	movw	r22, r26
    47e2:	cf 01       	movw	r24, r30
    47e4:	08 95       	ret

000047e6 <malloc>:
    47e6:	cf 93       	push	r28
    47e8:	df 93       	push	r29
    47ea:	82 30       	cpi	r24, 0x02	; 2
    47ec:	91 05       	cpc	r25, r1
    47ee:	10 f4       	brcc	.+4      	; 0x47f4 <malloc+0xe>
    47f0:	82 e0       	ldi	r24, 0x02	; 2
    47f2:	90 e0       	ldi	r25, 0x00	; 0
    47f4:	e0 91 3e 23 	lds	r30, 0x233E
    47f8:	f0 91 3f 23 	lds	r31, 0x233F
    47fc:	20 e0       	ldi	r18, 0x00	; 0
    47fe:	30 e0       	ldi	r19, 0x00	; 0
    4800:	c0 e0       	ldi	r28, 0x00	; 0
    4802:	d0 e0       	ldi	r29, 0x00	; 0
    4804:	30 97       	sbiw	r30, 0x00	; 0
    4806:	11 f1       	breq	.+68     	; 0x484c <malloc+0x66>
    4808:	40 81       	ld	r20, Z
    480a:	51 81       	ldd	r21, Z+1	; 0x01
    480c:	48 17       	cp	r20, r24
    480e:	59 07       	cpc	r21, r25
    4810:	c0 f0       	brcs	.+48     	; 0x4842 <malloc+0x5c>
    4812:	48 17       	cp	r20, r24
    4814:	59 07       	cpc	r21, r25
    4816:	61 f4       	brne	.+24     	; 0x4830 <malloc+0x4a>
    4818:	82 81       	ldd	r24, Z+2	; 0x02
    481a:	93 81       	ldd	r25, Z+3	; 0x03
    481c:	20 97       	sbiw	r28, 0x00	; 0
    481e:	19 f0       	breq	.+6      	; 0x4826 <malloc+0x40>
    4820:	8a 83       	std	Y+2, r24	; 0x02
    4822:	9b 83       	std	Y+3, r25	; 0x03
    4824:	2b c0       	rjmp	.+86     	; 0x487c <malloc+0x96>
    4826:	80 93 3e 23 	sts	0x233E, r24
    482a:	90 93 3f 23 	sts	0x233F, r25
    482e:	26 c0       	rjmp	.+76     	; 0x487c <malloc+0x96>
    4830:	21 15       	cp	r18, r1
    4832:	31 05       	cpc	r19, r1
    4834:	19 f0       	breq	.+6      	; 0x483c <malloc+0x56>
    4836:	42 17       	cp	r20, r18
    4838:	53 07       	cpc	r21, r19
    483a:	18 f4       	brcc	.+6      	; 0x4842 <malloc+0x5c>
    483c:	9a 01       	movw	r18, r20
    483e:	be 01       	movw	r22, r28
    4840:	df 01       	movw	r26, r30
    4842:	ef 01       	movw	r28, r30
    4844:	02 80       	ldd	r0, Z+2	; 0x02
    4846:	f3 81       	ldd	r31, Z+3	; 0x03
    4848:	e0 2d       	mov	r30, r0
    484a:	dc cf       	rjmp	.-72     	; 0x4804 <malloc+0x1e>
    484c:	21 15       	cp	r18, r1
    484e:	31 05       	cpc	r19, r1
    4850:	09 f1       	breq	.+66     	; 0x4894 <malloc+0xae>
    4852:	28 1b       	sub	r18, r24
    4854:	39 0b       	sbc	r19, r25
    4856:	24 30       	cpi	r18, 0x04	; 4
    4858:	31 05       	cpc	r19, r1
    485a:	90 f4       	brcc	.+36     	; 0x4880 <malloc+0x9a>
    485c:	12 96       	adiw	r26, 0x02	; 2
    485e:	8d 91       	ld	r24, X+
    4860:	9c 91       	ld	r25, X
    4862:	13 97       	sbiw	r26, 0x03	; 3
    4864:	61 15       	cp	r22, r1
    4866:	71 05       	cpc	r23, r1
    4868:	21 f0       	breq	.+8      	; 0x4872 <malloc+0x8c>
    486a:	fb 01       	movw	r30, r22
    486c:	82 83       	std	Z+2, r24	; 0x02
    486e:	93 83       	std	Z+3, r25	; 0x03
    4870:	04 c0       	rjmp	.+8      	; 0x487a <malloc+0x94>
    4872:	80 93 3e 23 	sts	0x233E, r24
    4876:	90 93 3f 23 	sts	0x233F, r25
    487a:	fd 01       	movw	r30, r26
    487c:	32 96       	adiw	r30, 0x02	; 2
    487e:	44 c0       	rjmp	.+136    	; 0x4908 <malloc+0x122>
    4880:	fd 01       	movw	r30, r26
    4882:	e2 0f       	add	r30, r18
    4884:	f3 1f       	adc	r31, r19
    4886:	81 93       	st	Z+, r24
    4888:	91 93       	st	Z+, r25
    488a:	22 50       	subi	r18, 0x02	; 2
    488c:	31 09       	sbc	r19, r1
    488e:	2d 93       	st	X+, r18
    4890:	3c 93       	st	X, r19
    4892:	3a c0       	rjmp	.+116    	; 0x4908 <malloc+0x122>
    4894:	20 91 3c 23 	lds	r18, 0x233C
    4898:	30 91 3d 23 	lds	r19, 0x233D
    489c:	23 2b       	or	r18, r19
    489e:	41 f4       	brne	.+16     	; 0x48b0 <malloc+0xca>
    48a0:	20 91 02 20 	lds	r18, 0x2002
    48a4:	30 91 03 20 	lds	r19, 0x2003
    48a8:	20 93 3c 23 	sts	0x233C, r18
    48ac:	30 93 3d 23 	sts	0x233D, r19
    48b0:	20 91 00 20 	lds	r18, 0x2000
    48b4:	30 91 01 20 	lds	r19, 0x2001
    48b8:	21 15       	cp	r18, r1
    48ba:	31 05       	cpc	r19, r1
    48bc:	41 f4       	brne	.+16     	; 0x48ce <malloc+0xe8>
    48be:	2d b7       	in	r18, 0x3d	; 61
    48c0:	3e b7       	in	r19, 0x3e	; 62
    48c2:	40 91 04 20 	lds	r20, 0x2004
    48c6:	50 91 05 20 	lds	r21, 0x2005
    48ca:	24 1b       	sub	r18, r20
    48cc:	35 0b       	sbc	r19, r21
    48ce:	e0 91 3c 23 	lds	r30, 0x233C
    48d2:	f0 91 3d 23 	lds	r31, 0x233D
    48d6:	e2 17       	cp	r30, r18
    48d8:	f3 07       	cpc	r31, r19
    48da:	a0 f4       	brcc	.+40     	; 0x4904 <malloc+0x11e>
    48dc:	2e 1b       	sub	r18, r30
    48de:	3f 0b       	sbc	r19, r31
    48e0:	28 17       	cp	r18, r24
    48e2:	39 07       	cpc	r19, r25
    48e4:	78 f0       	brcs	.+30     	; 0x4904 <malloc+0x11e>
    48e6:	ac 01       	movw	r20, r24
    48e8:	4e 5f       	subi	r20, 0xFE	; 254
    48ea:	5f 4f       	sbci	r21, 0xFF	; 255
    48ec:	24 17       	cp	r18, r20
    48ee:	35 07       	cpc	r19, r21
    48f0:	48 f0       	brcs	.+18     	; 0x4904 <malloc+0x11e>
    48f2:	4e 0f       	add	r20, r30
    48f4:	5f 1f       	adc	r21, r31
    48f6:	40 93 3c 23 	sts	0x233C, r20
    48fa:	50 93 3d 23 	sts	0x233D, r21
    48fe:	81 93       	st	Z+, r24
    4900:	91 93       	st	Z+, r25
    4902:	02 c0       	rjmp	.+4      	; 0x4908 <malloc+0x122>
    4904:	e0 e0       	ldi	r30, 0x00	; 0
    4906:	f0 e0       	ldi	r31, 0x00	; 0
    4908:	cf 01       	movw	r24, r30
    490a:	df 91       	pop	r29
    490c:	cf 91       	pop	r28
    490e:	08 95       	ret

00004910 <free>:
    4910:	0f 93       	push	r16
    4912:	1f 93       	push	r17
    4914:	cf 93       	push	r28
    4916:	df 93       	push	r29
    4918:	00 97       	sbiw	r24, 0x00	; 0
    491a:	09 f4       	brne	.+2      	; 0x491e <free+0xe>
    491c:	8c c0       	rjmp	.+280    	; 0x4a36 <free+0x126>
    491e:	fc 01       	movw	r30, r24
    4920:	32 97       	sbiw	r30, 0x02	; 2
    4922:	12 82       	std	Z+2, r1	; 0x02
    4924:	13 82       	std	Z+3, r1	; 0x03
    4926:	00 91 3e 23 	lds	r16, 0x233E
    492a:	10 91 3f 23 	lds	r17, 0x233F
    492e:	01 15       	cp	r16, r1
    4930:	11 05       	cpc	r17, r1
    4932:	81 f4       	brne	.+32     	; 0x4954 <free+0x44>
    4934:	20 81       	ld	r18, Z
    4936:	31 81       	ldd	r19, Z+1	; 0x01
    4938:	82 0f       	add	r24, r18
    493a:	93 1f       	adc	r25, r19
    493c:	20 91 3c 23 	lds	r18, 0x233C
    4940:	30 91 3d 23 	lds	r19, 0x233D
    4944:	28 17       	cp	r18, r24
    4946:	39 07       	cpc	r19, r25
    4948:	79 f5       	brne	.+94     	; 0x49a8 <free+0x98>
    494a:	e0 93 3c 23 	sts	0x233C, r30
    494e:	f0 93 3d 23 	sts	0x233D, r31
    4952:	71 c0       	rjmp	.+226    	; 0x4a36 <free+0x126>
    4954:	d8 01       	movw	r26, r16
    4956:	40 e0       	ldi	r20, 0x00	; 0
    4958:	50 e0       	ldi	r21, 0x00	; 0
    495a:	ae 17       	cp	r26, r30
    495c:	bf 07       	cpc	r27, r31
    495e:	50 f4       	brcc	.+20     	; 0x4974 <free+0x64>
    4960:	12 96       	adiw	r26, 0x02	; 2
    4962:	2d 91       	ld	r18, X+
    4964:	3c 91       	ld	r19, X
    4966:	13 97       	sbiw	r26, 0x03	; 3
    4968:	ad 01       	movw	r20, r26
    496a:	21 15       	cp	r18, r1
    496c:	31 05       	cpc	r19, r1
    496e:	09 f1       	breq	.+66     	; 0x49b2 <free+0xa2>
    4970:	d9 01       	movw	r26, r18
    4972:	f3 cf       	rjmp	.-26     	; 0x495a <free+0x4a>
    4974:	9d 01       	movw	r18, r26
    4976:	da 01       	movw	r26, r20
    4978:	22 83       	std	Z+2, r18	; 0x02
    497a:	33 83       	std	Z+3, r19	; 0x03
    497c:	60 81       	ld	r22, Z
    497e:	71 81       	ldd	r23, Z+1	; 0x01
    4980:	86 0f       	add	r24, r22
    4982:	97 1f       	adc	r25, r23
    4984:	82 17       	cp	r24, r18
    4986:	93 07       	cpc	r25, r19
    4988:	69 f4       	brne	.+26     	; 0x49a4 <free+0x94>
    498a:	ec 01       	movw	r28, r24
    498c:	28 81       	ld	r18, Y
    498e:	39 81       	ldd	r19, Y+1	; 0x01
    4990:	26 0f       	add	r18, r22
    4992:	37 1f       	adc	r19, r23
    4994:	2e 5f       	subi	r18, 0xFE	; 254
    4996:	3f 4f       	sbci	r19, 0xFF	; 255
    4998:	20 83       	st	Z, r18
    499a:	31 83       	std	Z+1, r19	; 0x01
    499c:	8a 81       	ldd	r24, Y+2	; 0x02
    499e:	9b 81       	ldd	r25, Y+3	; 0x03
    49a0:	82 83       	std	Z+2, r24	; 0x02
    49a2:	93 83       	std	Z+3, r25	; 0x03
    49a4:	45 2b       	or	r20, r21
    49a6:	29 f4       	brne	.+10     	; 0x49b2 <free+0xa2>
    49a8:	e0 93 3e 23 	sts	0x233E, r30
    49ac:	f0 93 3f 23 	sts	0x233F, r31
    49b0:	42 c0       	rjmp	.+132    	; 0x4a36 <free+0x126>
    49b2:	12 96       	adiw	r26, 0x02	; 2
    49b4:	ed 93       	st	X+, r30
    49b6:	fc 93       	st	X, r31
    49b8:	13 97       	sbiw	r26, 0x03	; 3
    49ba:	ed 01       	movw	r28, r26
    49bc:	49 91       	ld	r20, Y+
    49be:	59 91       	ld	r21, Y+
    49c0:	9e 01       	movw	r18, r28
    49c2:	24 0f       	add	r18, r20
    49c4:	35 1f       	adc	r19, r21
    49c6:	e2 17       	cp	r30, r18
    49c8:	f3 07       	cpc	r31, r19
    49ca:	71 f4       	brne	.+28     	; 0x49e8 <free+0xd8>
    49cc:	80 81       	ld	r24, Z
    49ce:	91 81       	ldd	r25, Z+1	; 0x01
    49d0:	84 0f       	add	r24, r20
    49d2:	95 1f       	adc	r25, r21
    49d4:	02 96       	adiw	r24, 0x02	; 2
    49d6:	8d 93       	st	X+, r24
    49d8:	9c 93       	st	X, r25
    49da:	11 97       	sbiw	r26, 0x01	; 1
    49dc:	82 81       	ldd	r24, Z+2	; 0x02
    49de:	93 81       	ldd	r25, Z+3	; 0x03
    49e0:	12 96       	adiw	r26, 0x02	; 2
    49e2:	8d 93       	st	X+, r24
    49e4:	9c 93       	st	X, r25
    49e6:	13 97       	sbiw	r26, 0x03	; 3
    49e8:	e0 e0       	ldi	r30, 0x00	; 0
    49ea:	f0 e0       	ldi	r31, 0x00	; 0
    49ec:	d8 01       	movw	r26, r16
    49ee:	12 96       	adiw	r26, 0x02	; 2
    49f0:	8d 91       	ld	r24, X+
    49f2:	9c 91       	ld	r25, X
    49f4:	13 97       	sbiw	r26, 0x03	; 3
    49f6:	00 97       	sbiw	r24, 0x00	; 0
    49f8:	19 f0       	breq	.+6      	; 0x4a00 <free+0xf0>
    49fa:	f8 01       	movw	r30, r16
    49fc:	8c 01       	movw	r16, r24
    49fe:	f6 cf       	rjmp	.-20     	; 0x49ec <free+0xdc>
    4a00:	8d 91       	ld	r24, X+
    4a02:	9c 91       	ld	r25, X
    4a04:	98 01       	movw	r18, r16
    4a06:	2e 5f       	subi	r18, 0xFE	; 254
    4a08:	3f 4f       	sbci	r19, 0xFF	; 255
    4a0a:	82 0f       	add	r24, r18
    4a0c:	93 1f       	adc	r25, r19
    4a0e:	20 91 3c 23 	lds	r18, 0x233C
    4a12:	30 91 3d 23 	lds	r19, 0x233D
    4a16:	28 17       	cp	r18, r24
    4a18:	39 07       	cpc	r19, r25
    4a1a:	69 f4       	brne	.+26     	; 0x4a36 <free+0x126>
    4a1c:	30 97       	sbiw	r30, 0x00	; 0
    4a1e:	29 f4       	brne	.+10     	; 0x4a2a <free+0x11a>
    4a20:	10 92 3e 23 	sts	0x233E, r1
    4a24:	10 92 3f 23 	sts	0x233F, r1
    4a28:	02 c0       	rjmp	.+4      	; 0x4a2e <free+0x11e>
    4a2a:	12 82       	std	Z+2, r1	; 0x02
    4a2c:	13 82       	std	Z+3, r1	; 0x03
    4a2e:	00 93 3c 23 	sts	0x233C, r16
    4a32:	10 93 3d 23 	sts	0x233D, r17
    4a36:	df 91       	pop	r29
    4a38:	cf 91       	pop	r28
    4a3a:	1f 91       	pop	r17
    4a3c:	0f 91       	pop	r16
    4a3e:	08 95       	ret

00004a40 <memcpy>:
    4a40:	fb 01       	movw	r30, r22
    4a42:	dc 01       	movw	r26, r24
    4a44:	02 c0       	rjmp	.+4      	; 0x4a4a <memcpy+0xa>
    4a46:	01 90       	ld	r0, Z+
    4a48:	0d 92       	st	X+, r0
    4a4a:	41 50       	subi	r20, 0x01	; 1
    4a4c:	50 40       	sbci	r21, 0x00	; 0
    4a4e:	d8 f7       	brcc	.-10     	; 0x4a46 <memcpy+0x6>
    4a50:	08 95       	ret

00004a52 <strcmp>:
    4a52:	fb 01       	movw	r30, r22
    4a54:	dc 01       	movw	r26, r24
    4a56:	8d 91       	ld	r24, X+
    4a58:	01 90       	ld	r0, Z+
    4a5a:	80 19       	sub	r24, r0
    4a5c:	01 10       	cpse	r0, r1
    4a5e:	d9 f3       	breq	.-10     	; 0x4a56 <strcmp+0x4>
    4a60:	99 0b       	sbc	r25, r25
    4a62:	08 95       	ret

00004a64 <__do_global_dtors>:
    4a64:	11 e0       	ldi	r17, 0x01	; 1
    4a66:	ca ee       	ldi	r28, 0xEA	; 234
    4a68:	d1 e0       	ldi	r29, 0x01	; 1
    4a6a:	00 e0       	ldi	r16, 0x00	; 0
    4a6c:	06 c0       	rjmp	.+12     	; 0x4a7a <__do_global_dtors+0x16>
    4a6e:	80 2f       	mov	r24, r16
    4a70:	fe 01       	movw	r30, r28
    4a72:	0e 94 ba 23 	call	0x4774	; 0x4774 <__tablejump2__>
    4a76:	21 96       	adiw	r28, 0x01	; 1
    4a78:	01 1d       	adc	r16, r1
    4a7a:	cc 3e       	cpi	r28, 0xEC	; 236
    4a7c:	d1 07       	cpc	r29, r17
    4a7e:	80 e0       	ldi	r24, 0x00	; 0
    4a80:	08 07       	cpc	r16, r24
    4a82:	a9 f7       	brne	.-22     	; 0x4a6e <__do_global_dtors+0xa>
    4a84:	f8 94       	cli

00004a86 <__stop_program>:
    4a86:	ff cf       	rjmp	.-2      	; 0x4a86 <__stop_program>
